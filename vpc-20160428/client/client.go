// This file is auto-generated, don't edit it. Thanks.
package client

import (
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	rpc "github.com/alibabacloud-go/tea-rpc/client"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type ListPhysicalConnectionFeaturesRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
}

func (s ListPhysicalConnectionFeaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPhysicalConnectionFeaturesRequest) GoString() string {
	return s.String()
}

func (s *ListPhysicalConnectionFeaturesRequest) SetRegionId(v string) *ListPhysicalConnectionFeaturesRequest {
	s.RegionId = &v
	return s
}

func (s *ListPhysicalConnectionFeaturesRequest) SetClientToken(v string) *ListPhysicalConnectionFeaturesRequest {
	s.ClientToken = &v
	return s
}

func (s *ListPhysicalConnectionFeaturesRequest) SetPhysicalConnectionId(v string) *ListPhysicalConnectionFeaturesRequest {
	s.PhysicalConnectionId = &v
	return s
}

type ListPhysicalConnectionFeaturesResponse struct {
	RequestId                  *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PhysicalConnectionFeatures []*ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures `json:"PhysicalConnectionFeatures,omitempty" xml:"PhysicalConnectionFeatures,omitempty" require:"true" type:"Repeated"`
}

func (s ListPhysicalConnectionFeaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPhysicalConnectionFeaturesResponse) GoString() string {
	return s.String()
}

func (s *ListPhysicalConnectionFeaturesResponse) SetRequestId(v string) *ListPhysicalConnectionFeaturesResponse {
	s.RequestId = &v
	return s
}

func (s *ListPhysicalConnectionFeaturesResponse) SetPhysicalConnectionFeatures(v []*ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures) *ListPhysicalConnectionFeaturesResponse {
	s.PhysicalConnectionFeatures = v
	return s
}

type ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures struct {
	FeatureKey   *string `json:"FeatureKey,omitempty" xml:"FeatureKey,omitempty" require:"true"`
	FeatureValue *string `json:"FeatureValue,omitempty" xml:"FeatureValue,omitempty" require:"true"`
}

func (s ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures) String() string {
	return tea.Prettify(s)
}

func (s ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures) GoString() string {
	return s.String()
}

func (s *ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures) SetFeatureKey(v string) *ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures {
	s.FeatureKey = &v
	return s
}

func (s *ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures) SetFeatureValue(v string) *ListPhysicalConnectionFeaturesResponsePhysicalConnectionFeatures {
	s.FeatureValue = &v
	return s
}

type ListNatGatewayEcsMetricRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DryRun           *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NatGatewayId     *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	TimePoint        *int64  `json:"TimePoint,omitempty" xml:"TimePoint,omitempty" require:"true"`
	OrderKey         *string `json:"OrderKey,omitempty" xml:"OrderKey,omitempty"`
	OrderType        *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	NextToken        *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	MaxResults       *string `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
}

func (s ListNatGatewayEcsMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNatGatewayEcsMetricRequest) GoString() string {
	return s.String()
}

func (s *ListNatGatewayEcsMetricRequest) SetRegionId(v string) *ListNatGatewayEcsMetricRequest {
	s.RegionId = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetDryRun(v bool) *ListNatGatewayEcsMetricRequest {
	s.DryRun = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetNatGatewayId(v string) *ListNatGatewayEcsMetricRequest {
	s.NatGatewayId = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetTimePoint(v int64) *ListNatGatewayEcsMetricRequest {
	s.TimePoint = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetOrderKey(v string) *ListNatGatewayEcsMetricRequest {
	s.OrderKey = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetOrderType(v string) *ListNatGatewayEcsMetricRequest {
	s.OrderType = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetPrivateIpAddress(v string) *ListNatGatewayEcsMetricRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetNextToken(v string) *ListNatGatewayEcsMetricRequest {
	s.NextToken = &v
	return s
}

func (s *ListNatGatewayEcsMetricRequest) SetMaxResults(v string) *ListNatGatewayEcsMetricRequest {
	s.MaxResults = &v
	return s
}

type ListNatGatewayEcsMetricResponse struct {
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NextToken      *string                                          `json:"NextToken,omitempty" xml:"NextToken,omitempty" require:"true"`
	MaxResults     *int                                             `json:"MaxResults,omitempty" xml:"MaxResults,omitempty" require:"true"`
	MetricDataList []*ListNatGatewayEcsMetricResponseMetricDataList `json:"MetricDataList,omitempty" xml:"MetricDataList,omitempty" require:"true" type:"Repeated"`
}

func (s ListNatGatewayEcsMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNatGatewayEcsMetricResponse) GoString() string {
	return s.String()
}

func (s *ListNatGatewayEcsMetricResponse) SetRequestId(v string) *ListNatGatewayEcsMetricResponse {
	s.RequestId = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponse) SetNextToken(v string) *ListNatGatewayEcsMetricResponse {
	s.NextToken = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponse) SetMaxResults(v int) *ListNatGatewayEcsMetricResponse {
	s.MaxResults = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponse) SetMetricDataList(v []*ListNatGatewayEcsMetricResponseMetricDataList) *ListNatGatewayEcsMetricResponse {
	s.MetricDataList = v
	return s
}

type ListNatGatewayEcsMetricResponseMetricDataList struct {
	NatGatewayId     *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" require:"true"`
	Timestamp        *int64  `json:"Timestamp,omitempty" xml:"Timestamp,omitempty" require:"true"`
	ActiveSessionNum *int64  `json:"ActiveSessionNum,omitempty" xml:"ActiveSessionNum,omitempty" require:"true"`
	NewSessionRate   *int64  `json:"NewSessionRate,omitempty" xml:"NewSessionRate,omitempty" require:"true"`
	RxBps            *int64  `json:"RxBps,omitempty" xml:"RxBps,omitempty" require:"true"`
	TxBps            *int64  `json:"TxBps,omitempty" xml:"TxBps,omitempty" require:"true"`
	RxPps            *int64  `json:"RxPps,omitempty" xml:"RxPps,omitempty" require:"true"`
	TxPps            *int64  `json:"TxPps,omitempty" xml:"TxPps,omitempty" require:"true"`
}

func (s ListNatGatewayEcsMetricResponseMetricDataList) String() string {
	return tea.Prettify(s)
}

func (s ListNatGatewayEcsMetricResponseMetricDataList) GoString() string {
	return s.String()
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetNatGatewayId(v string) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.NatGatewayId = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetPrivateIpAddress(v string) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.PrivateIpAddress = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetTimestamp(v int64) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.Timestamp = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetActiveSessionNum(v int64) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.ActiveSessionNum = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetNewSessionRate(v int64) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.NewSessionRate = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetRxBps(v int64) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.RxBps = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetTxBps(v int64) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.TxBps = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetRxPps(v int64) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.RxPps = &v
	return s
}

func (s *ListNatGatewayEcsMetricResponseMetricDataList) SetTxPps(v int64) *ListNatGatewayEcsMetricResponseMetricDataList {
	s.TxPps = &v
	return s
}

type DisableNatGatewayEcsMetricRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DryRun       *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
}

func (s DisableNatGatewayEcsMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableNatGatewayEcsMetricRequest) GoString() string {
	return s.String()
}

func (s *DisableNatGatewayEcsMetricRequest) SetRegionId(v string) *DisableNatGatewayEcsMetricRequest {
	s.RegionId = &v
	return s
}

func (s *DisableNatGatewayEcsMetricRequest) SetDryRun(v bool) *DisableNatGatewayEcsMetricRequest {
	s.DryRun = &v
	return s
}

func (s *DisableNatGatewayEcsMetricRequest) SetNatGatewayId(v string) *DisableNatGatewayEcsMetricRequest {
	s.NatGatewayId = &v
	return s
}

type DisableNatGatewayEcsMetricResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DisableNatGatewayEcsMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableNatGatewayEcsMetricResponse) GoString() string {
	return s.String()
}

func (s *DisableNatGatewayEcsMetricResponse) SetRequestId(v string) *DisableNatGatewayEcsMetricResponse {
	s.RequestId = &v
	return s
}

type EnableNatGatewayEcsMetricRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DryRun       *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
}

func (s EnableNatGatewayEcsMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableNatGatewayEcsMetricRequest) GoString() string {
	return s.String()
}

func (s *EnableNatGatewayEcsMetricRequest) SetRegionId(v string) *EnableNatGatewayEcsMetricRequest {
	s.RegionId = &v
	return s
}

func (s *EnableNatGatewayEcsMetricRequest) SetDryRun(v bool) *EnableNatGatewayEcsMetricRequest {
	s.DryRun = &v
	return s
}

func (s *EnableNatGatewayEcsMetricRequest) SetNatGatewayId(v string) *EnableNatGatewayEcsMetricRequest {
	s.NatGatewayId = &v
	return s
}

type EnableNatGatewayEcsMetricResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s EnableNatGatewayEcsMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableNatGatewayEcsMetricResponse) GoString() string {
	return s.String()
}

func (s *EnableNatGatewayEcsMetricResponse) SetRequestId(v string) *EnableNatGatewayEcsMetricResponse {
	s.RequestId = &v
	return s
}

type CreateDhcpOptionsSetRequest struct {
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DomainNameServers         *string `json:"DomainNameServers,omitempty" xml:"DomainNameServers,omitempty"`
	DhcpOptionsSetName        *string `json:"DhcpOptionsSetName,omitempty" xml:"DhcpOptionsSetName,omitempty"`
	DhcpOptionsSetDescription *string `json:"DhcpOptionsSetDescription,omitempty" xml:"DhcpOptionsSetDescription,omitempty"`
	DomainName                *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ClientToken               *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun                    *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s CreateDhcpOptionsSetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDhcpOptionsSetRequest) GoString() string {
	return s.String()
}

func (s *CreateDhcpOptionsSetRequest) SetRegionId(v string) *CreateDhcpOptionsSetRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDhcpOptionsSetRequest) SetDomainNameServers(v string) *CreateDhcpOptionsSetRequest {
	s.DomainNameServers = &v
	return s
}

func (s *CreateDhcpOptionsSetRequest) SetDhcpOptionsSetName(v string) *CreateDhcpOptionsSetRequest {
	s.DhcpOptionsSetName = &v
	return s
}

func (s *CreateDhcpOptionsSetRequest) SetDhcpOptionsSetDescription(v string) *CreateDhcpOptionsSetRequest {
	s.DhcpOptionsSetDescription = &v
	return s
}

func (s *CreateDhcpOptionsSetRequest) SetDomainName(v string) *CreateDhcpOptionsSetRequest {
	s.DomainName = &v
	return s
}

func (s *CreateDhcpOptionsSetRequest) SetClientToken(v string) *CreateDhcpOptionsSetRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDhcpOptionsSetRequest) SetDryRun(v bool) *CreateDhcpOptionsSetRequest {
	s.DryRun = &v
	return s
}

type CreateDhcpOptionsSetResponse struct {
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DhcpOptionsSetId *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
}

func (s CreateDhcpOptionsSetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDhcpOptionsSetResponse) GoString() string {
	return s.String()
}

func (s *CreateDhcpOptionsSetResponse) SetRequestId(v string) *CreateDhcpOptionsSetResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDhcpOptionsSetResponse) SetDhcpOptionsSetId(v string) *CreateDhcpOptionsSetResponse {
	s.DhcpOptionsSetId = &v
	return s
}

type ReplaceVpcDhcpOptionsSetRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DhcpOptionsSetId *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	VpcId            *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun           *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s ReplaceVpcDhcpOptionsSetRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceVpcDhcpOptionsSetRequest) GoString() string {
	return s.String()
}

func (s *ReplaceVpcDhcpOptionsSetRequest) SetRegionId(v string) *ReplaceVpcDhcpOptionsSetRequest {
	s.RegionId = &v
	return s
}

func (s *ReplaceVpcDhcpOptionsSetRequest) SetDhcpOptionsSetId(v string) *ReplaceVpcDhcpOptionsSetRequest {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *ReplaceVpcDhcpOptionsSetRequest) SetVpcId(v string) *ReplaceVpcDhcpOptionsSetRequest {
	s.VpcId = &v
	return s
}

func (s *ReplaceVpcDhcpOptionsSetRequest) SetClientToken(v string) *ReplaceVpcDhcpOptionsSetRequest {
	s.ClientToken = &v
	return s
}

func (s *ReplaceVpcDhcpOptionsSetRequest) SetDryRun(v bool) *ReplaceVpcDhcpOptionsSetRequest {
	s.DryRun = &v
	return s
}

type ReplaceVpcDhcpOptionsSetResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ReplaceVpcDhcpOptionsSetResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceVpcDhcpOptionsSetResponse) GoString() string {
	return s.String()
}

func (s *ReplaceVpcDhcpOptionsSetResponse) SetRequestId(v string) *ReplaceVpcDhcpOptionsSetResponse {
	s.RequestId = &v
	return s
}

type UpdateDhcpOptionsSetAttributeRequest struct {
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DhcpOptionsSetId          *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	DomainNameServers         *string `json:"DomainNameServers,omitempty" xml:"DomainNameServers,omitempty"`
	DomainName                *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DhcpOptionsSetName        *string `json:"DhcpOptionsSetName,omitempty" xml:"DhcpOptionsSetName,omitempty"`
	DhcpOptionsSetDescription *string `json:"DhcpOptionsSetDescription,omitempty" xml:"DhcpOptionsSetDescription,omitempty"`
	ClientToken               *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun                    *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s UpdateDhcpOptionsSetAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDhcpOptionsSetAttributeRequest) GoString() string {
	return s.String()
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetRegionId(v string) *UpdateDhcpOptionsSetAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetDhcpOptionsSetId(v string) *UpdateDhcpOptionsSetAttributeRequest {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetDomainNameServers(v string) *UpdateDhcpOptionsSetAttributeRequest {
	s.DomainNameServers = &v
	return s
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetDomainName(v string) *UpdateDhcpOptionsSetAttributeRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetDhcpOptionsSetName(v string) *UpdateDhcpOptionsSetAttributeRequest {
	s.DhcpOptionsSetName = &v
	return s
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetDhcpOptionsSetDescription(v string) *UpdateDhcpOptionsSetAttributeRequest {
	s.DhcpOptionsSetDescription = &v
	return s
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetClientToken(v string) *UpdateDhcpOptionsSetAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateDhcpOptionsSetAttributeRequest) SetDryRun(v bool) *UpdateDhcpOptionsSetAttributeRequest {
	s.DryRun = &v
	return s
}

type UpdateDhcpOptionsSetAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateDhcpOptionsSetAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDhcpOptionsSetAttributeResponse) GoString() string {
	return s.String()
}

func (s *UpdateDhcpOptionsSetAttributeResponse) SetRequestId(v string) *UpdateDhcpOptionsSetAttributeResponse {
	s.RequestId = &v
	return s
}

type GetDhcpOptionsSetRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DhcpOptionsSetId *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
}

func (s GetDhcpOptionsSetRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDhcpOptionsSetRequest) GoString() string {
	return s.String()
}

func (s *GetDhcpOptionsSetRequest) SetRegionId(v string) *GetDhcpOptionsSetRequest {
	s.RegionId = &v
	return s
}

func (s *GetDhcpOptionsSetRequest) SetDhcpOptionsSetId(v string) *GetDhcpOptionsSetRequest {
	s.DhcpOptionsSetId = &v
	return s
}

type GetDhcpOptionsSetResponse struct {
	RequestId                 *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DhcpOptionsSetName        *string                                   `json:"DhcpOptionsSetName,omitempty" xml:"DhcpOptionsSetName,omitempty" require:"true"`
	DhcpOptionsSetDescription *string                                   `json:"DhcpOptionsSetDescription,omitempty" xml:"DhcpOptionsSetDescription,omitempty" require:"true"`
	DhcpOptionsSetId          *string                                   `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	OwnerId                   *int64                                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	Status                    *string                                   `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	AssociateVpcs             []*GetDhcpOptionsSetResponseAssociateVpcs `json:"AssociateVpcs,omitempty" xml:"AssociateVpcs,omitempty" require:"true" type:"Repeated"`
	DhcpOptions               *GetDhcpOptionsSetResponseDhcpOptions     `json:"DhcpOptions,omitempty" xml:"DhcpOptions,omitempty" require:"true" type:"Struct"`
}

func (s GetDhcpOptionsSetResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDhcpOptionsSetResponse) GoString() string {
	return s.String()
}

func (s *GetDhcpOptionsSetResponse) SetRequestId(v string) *GetDhcpOptionsSetResponse {
	s.RequestId = &v
	return s
}

func (s *GetDhcpOptionsSetResponse) SetDhcpOptionsSetName(v string) *GetDhcpOptionsSetResponse {
	s.DhcpOptionsSetName = &v
	return s
}

func (s *GetDhcpOptionsSetResponse) SetDhcpOptionsSetDescription(v string) *GetDhcpOptionsSetResponse {
	s.DhcpOptionsSetDescription = &v
	return s
}

func (s *GetDhcpOptionsSetResponse) SetDhcpOptionsSetId(v string) *GetDhcpOptionsSetResponse {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *GetDhcpOptionsSetResponse) SetOwnerId(v int64) *GetDhcpOptionsSetResponse {
	s.OwnerId = &v
	return s
}

func (s *GetDhcpOptionsSetResponse) SetStatus(v string) *GetDhcpOptionsSetResponse {
	s.Status = &v
	return s
}

func (s *GetDhcpOptionsSetResponse) SetAssociateVpcs(v []*GetDhcpOptionsSetResponseAssociateVpcs) *GetDhcpOptionsSetResponse {
	s.AssociateVpcs = v
	return s
}

func (s *GetDhcpOptionsSetResponse) SetDhcpOptions(v *GetDhcpOptionsSetResponseDhcpOptions) *GetDhcpOptionsSetResponse {
	s.DhcpOptions = v
	return s
}

type GetDhcpOptionsSetResponseAssociateVpcs struct {
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	AssociateStatus *string `json:"AssociateStatus,omitempty" xml:"AssociateStatus,omitempty" require:"true"`
}

func (s GetDhcpOptionsSetResponseAssociateVpcs) String() string {
	return tea.Prettify(s)
}

func (s GetDhcpOptionsSetResponseAssociateVpcs) GoString() string {
	return s.String()
}

func (s *GetDhcpOptionsSetResponseAssociateVpcs) SetVpcId(v string) *GetDhcpOptionsSetResponseAssociateVpcs {
	s.VpcId = &v
	return s
}

func (s *GetDhcpOptionsSetResponseAssociateVpcs) SetAssociateStatus(v string) *GetDhcpOptionsSetResponseAssociateVpcs {
	s.AssociateStatus = &v
	return s
}

type GetDhcpOptionsSetResponseDhcpOptions struct {
	DomainNameServers *string `json:"DomainNameServers,omitempty" xml:"DomainNameServers,omitempty" require:"true"`
	DomainName        *string `json:"DomainName,omitempty" xml:"DomainName,omitempty" require:"true"`
}

func (s GetDhcpOptionsSetResponseDhcpOptions) String() string {
	return tea.Prettify(s)
}

func (s GetDhcpOptionsSetResponseDhcpOptions) GoString() string {
	return s.String()
}

func (s *GetDhcpOptionsSetResponseDhcpOptions) SetDomainNameServers(v string) *GetDhcpOptionsSetResponseDhcpOptions {
	s.DomainNameServers = &v
	return s
}

func (s *GetDhcpOptionsSetResponseDhcpOptions) SetDomainName(v string) *GetDhcpOptionsSetResponseDhcpOptions {
	s.DomainName = &v
	return s
}

type ListDhcpOptionsSetsRequest struct {
	RegionId           *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NextToken          *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	MaxResults         *int      `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	DomainName         *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DhcpOptionsSetId   []*string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" type:"Repeated"`
	DhcpOptionsSetName *string   `json:"DhcpOptionsSetName,omitempty" xml:"DhcpOptionsSetName,omitempty"`
}

func (s ListDhcpOptionsSetsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDhcpOptionsSetsRequest) GoString() string {
	return s.String()
}

func (s *ListDhcpOptionsSetsRequest) SetRegionId(v string) *ListDhcpOptionsSetsRequest {
	s.RegionId = &v
	return s
}

func (s *ListDhcpOptionsSetsRequest) SetNextToken(v string) *ListDhcpOptionsSetsRequest {
	s.NextToken = &v
	return s
}

func (s *ListDhcpOptionsSetsRequest) SetMaxResults(v int) *ListDhcpOptionsSetsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDhcpOptionsSetsRequest) SetDomainName(v string) *ListDhcpOptionsSetsRequest {
	s.DomainName = &v
	return s
}

func (s *ListDhcpOptionsSetsRequest) SetDhcpOptionsSetId(v []*string) *ListDhcpOptionsSetsRequest {
	s.DhcpOptionsSetId = v
	return s
}

func (s *ListDhcpOptionsSetsRequest) SetDhcpOptionsSetName(v string) *ListDhcpOptionsSetsRequest {
	s.DhcpOptionsSetName = &v
	return s
}

type ListDhcpOptionsSetsResponse struct {
	RequestId       *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NextToken       *string                                       `json:"NextToken,omitempty" xml:"NextToken,omitempty" require:"true"`
	DhcpOptionsSets []*ListDhcpOptionsSetsResponseDhcpOptionsSets `json:"DhcpOptionsSets,omitempty" xml:"DhcpOptionsSets,omitempty" require:"true" type:"Repeated"`
}

func (s ListDhcpOptionsSetsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDhcpOptionsSetsResponse) GoString() string {
	return s.String()
}

func (s *ListDhcpOptionsSetsResponse) SetRequestId(v string) *ListDhcpOptionsSetsResponse {
	s.RequestId = &v
	return s
}

func (s *ListDhcpOptionsSetsResponse) SetNextToken(v string) *ListDhcpOptionsSetsResponse {
	s.NextToken = &v
	return s
}

func (s *ListDhcpOptionsSetsResponse) SetDhcpOptionsSets(v []*ListDhcpOptionsSetsResponseDhcpOptionsSets) *ListDhcpOptionsSetsResponse {
	s.DhcpOptionsSets = v
	return s
}

type ListDhcpOptionsSetsResponseDhcpOptionsSets struct {
	DhcpOptionsSetName        *string                                                `json:"DhcpOptionsSetName,omitempty" xml:"DhcpOptionsSetName,omitempty" require:"true"`
	DhcpOptionsSetDescription *string                                                `json:"DhcpOptionsSetDescription,omitempty" xml:"DhcpOptionsSetDescription,omitempty" require:"true"`
	OwnerId                   *int64                                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	Status                    *string                                                `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	DhcpOptionsSetId          *string                                                `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	AssociateVpcCount         *int                                                   `json:"AssociateVpcCount,omitempty" xml:"AssociateVpcCount,omitempty" require:"true"`
	DhcpOptions               *ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions `json:"DhcpOptions,omitempty" xml:"DhcpOptions,omitempty" require:"true" type:"Struct"`
}

func (s ListDhcpOptionsSetsResponseDhcpOptionsSets) String() string {
	return tea.Prettify(s)
}

func (s ListDhcpOptionsSetsResponseDhcpOptionsSets) GoString() string {
	return s.String()
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSets) SetDhcpOptionsSetName(v string) *ListDhcpOptionsSetsResponseDhcpOptionsSets {
	s.DhcpOptionsSetName = &v
	return s
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSets) SetDhcpOptionsSetDescription(v string) *ListDhcpOptionsSetsResponseDhcpOptionsSets {
	s.DhcpOptionsSetDescription = &v
	return s
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSets) SetOwnerId(v int64) *ListDhcpOptionsSetsResponseDhcpOptionsSets {
	s.OwnerId = &v
	return s
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSets) SetStatus(v string) *ListDhcpOptionsSetsResponseDhcpOptionsSets {
	s.Status = &v
	return s
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSets) SetDhcpOptionsSetId(v string) *ListDhcpOptionsSetsResponseDhcpOptionsSets {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSets) SetAssociateVpcCount(v int) *ListDhcpOptionsSetsResponseDhcpOptionsSets {
	s.AssociateVpcCount = &v
	return s
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSets) SetDhcpOptions(v *ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions) *ListDhcpOptionsSetsResponseDhcpOptionsSets {
	s.DhcpOptions = v
	return s
}

type ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions struct {
	DomainNameServers *string `json:"DomainNameServers,omitempty" xml:"DomainNameServers,omitempty" require:"true"`
	DomainName        *string `json:"DomainName,omitempty" xml:"DomainName,omitempty" require:"true"`
}

func (s ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions) String() string {
	return tea.Prettify(s)
}

func (s ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions) GoString() string {
	return s.String()
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions) SetDomainNameServers(v string) *ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions {
	s.DomainNameServers = &v
	return s
}

func (s *ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions) SetDomainName(v string) *ListDhcpOptionsSetsResponseDhcpOptionsSetsDhcpOptions {
	s.DomainName = &v
	return s
}

type DetachDhcpOptionsSetFromVpcRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DhcpOptionsSetId *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	VpcId            *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun           *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s DetachDhcpOptionsSetFromVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDhcpOptionsSetFromVpcRequest) GoString() string {
	return s.String()
}

func (s *DetachDhcpOptionsSetFromVpcRequest) SetRegionId(v string) *DetachDhcpOptionsSetFromVpcRequest {
	s.RegionId = &v
	return s
}

func (s *DetachDhcpOptionsSetFromVpcRequest) SetDhcpOptionsSetId(v string) *DetachDhcpOptionsSetFromVpcRequest {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *DetachDhcpOptionsSetFromVpcRequest) SetVpcId(v string) *DetachDhcpOptionsSetFromVpcRequest {
	s.VpcId = &v
	return s
}

func (s *DetachDhcpOptionsSetFromVpcRequest) SetClientToken(v string) *DetachDhcpOptionsSetFromVpcRequest {
	s.ClientToken = &v
	return s
}

func (s *DetachDhcpOptionsSetFromVpcRequest) SetDryRun(v bool) *DetachDhcpOptionsSetFromVpcRequest {
	s.DryRun = &v
	return s
}

type DetachDhcpOptionsSetFromVpcResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DetachDhcpOptionsSetFromVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDhcpOptionsSetFromVpcResponse) GoString() string {
	return s.String()
}

func (s *DetachDhcpOptionsSetFromVpcResponse) SetRequestId(v string) *DetachDhcpOptionsSetFromVpcResponse {
	s.RequestId = &v
	return s
}

type AttachDhcpOptionsSetToVpcRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DhcpOptionsSetId *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	VpcId            *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun           *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s AttachDhcpOptionsSetToVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDhcpOptionsSetToVpcRequest) GoString() string {
	return s.String()
}

func (s *AttachDhcpOptionsSetToVpcRequest) SetRegionId(v string) *AttachDhcpOptionsSetToVpcRequest {
	s.RegionId = &v
	return s
}

func (s *AttachDhcpOptionsSetToVpcRequest) SetDhcpOptionsSetId(v string) *AttachDhcpOptionsSetToVpcRequest {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *AttachDhcpOptionsSetToVpcRequest) SetVpcId(v string) *AttachDhcpOptionsSetToVpcRequest {
	s.VpcId = &v
	return s
}

func (s *AttachDhcpOptionsSetToVpcRequest) SetClientToken(v string) *AttachDhcpOptionsSetToVpcRequest {
	s.ClientToken = &v
	return s
}

func (s *AttachDhcpOptionsSetToVpcRequest) SetDryRun(v bool) *AttachDhcpOptionsSetToVpcRequest {
	s.DryRun = &v
	return s
}

type AttachDhcpOptionsSetToVpcResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AttachDhcpOptionsSetToVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDhcpOptionsSetToVpcResponse) GoString() string {
	return s.String()
}

func (s *AttachDhcpOptionsSetToVpcResponse) SetRequestId(v string) *AttachDhcpOptionsSetToVpcResponse {
	s.RequestId = &v
	return s
}

type DeleteDhcpOptionsSetRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DhcpOptionsSetId *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun           *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s DeleteDhcpOptionsSetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDhcpOptionsSetRequest) GoString() string {
	return s.String()
}

func (s *DeleteDhcpOptionsSetRequest) SetRegionId(v string) *DeleteDhcpOptionsSetRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDhcpOptionsSetRequest) SetDhcpOptionsSetId(v string) *DeleteDhcpOptionsSetRequest {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *DeleteDhcpOptionsSetRequest) SetClientToken(v string) *DeleteDhcpOptionsSetRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteDhcpOptionsSetRequest) SetDryRun(v bool) *DeleteDhcpOptionsSetRequest {
	s.DryRun = &v
	return s
}

type DeleteDhcpOptionsSetResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteDhcpOptionsSetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDhcpOptionsSetResponse) GoString() string {
	return s.String()
}

func (s *DeleteDhcpOptionsSetResponse) SetRequestId(v string) *DeleteDhcpOptionsSetResponse {
	s.RequestId = &v
	return s
}

type RenewInstanceRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty" require:"true"`
	Duration     *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetRegionId(v string) *RenewInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *RenewInstanceRequest) SetInstanceId(v string) *RenewInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPricingCycle(v string) *RenewInstanceRequest {
	s.PricingCycle = &v
	return s
}

func (s *RenewInstanceRequest) SetDuration(v int) *RenewInstanceRequest {
	s.Duration = &v
	return s
}

func (s *RenewInstanceRequest) SetInstanceType(v string) *RenewInstanceRequest {
	s.InstanceType = &v
	return s
}

type RenewInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetRequestId(v string) *RenewInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *RenewInstanceResponse) SetOrderId(v string) *RenewInstanceResponse {
	s.OrderId = &v
	return s
}

type DescribeInstanceAutoRenewAttributeRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType  *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	RenewalStatus *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber    *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetRegionId(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetInstanceType(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetRenewalStatus(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetPageSize(v int) *DescribeInstanceAutoRenewAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetPageNumber(v int) *DescribeInstanceAutoRenewAttributeRequest {
	s.PageNumber = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponse struct {
	RequestId               *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount              *string                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageSize                *string                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageNumber              *string                                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	InstanceRenewAttributes *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes `json:"InstanceRenewAttributes,omitempty" xml:"InstanceRenewAttributes,omitempty" require:"true" type:"Struct"`
}

func (s DescribeInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetRequestId(v string) *DescribeInstanceAutoRenewAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetTotalCount(v string) *DescribeInstanceAutoRenewAttributeResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetPageSize(v string) *DescribeInstanceAutoRenewAttributeResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetPageNumber(v string) *DescribeInstanceAutoRenewAttributeResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetInstanceRenewAttributes(v *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) *DescribeInstanceAutoRenewAttributeResponse {
	s.InstanceRenewAttributes = v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes struct {
	InstanceRenewAttribute []*DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute `json:"InstanceRenewAttribute,omitempty" xml:"InstanceRenewAttribute,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) SetInstanceRenewAttribute(v []*DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes {
	s.InstanceRenewAttribute = v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	RenewalStatus *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty" require:"true"`
	Duration      *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	PricingCycle  *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty" require:"true"`
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetRenewalStatus(v string) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.RenewalStatus = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetDuration(v int) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.Duration = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetPricingCycle(v string) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.PricingCycle = &v
	return s
}

type ModifyInstanceAutoRenewalAttributeRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	PricingCycle  *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty" require:"true"`
	Duration      *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	InstanceType  *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RenewalStatus *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
}

func (s ModifyInstanceAutoRenewalAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewalAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetRegionId(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetInstanceId(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetPricingCycle(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.PricingCycle = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetDuration(v int) *ModifyInstanceAutoRenewalAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetInstanceType(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetClientToken(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetRenewalStatus(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.RenewalStatus = &v
	return s
}

type ModifyInstanceAutoRenewalAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyInstanceAutoRenewalAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewalAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewalAttributeResponse) SetRequestId(v string) *ModifyInstanceAutoRenewalAttributeResponse {
	s.RequestId = &v
	return s
}

type ReleaseEipSegmentAddressRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SegmentInstanceId *string `json:"SegmentInstanceId,omitempty" xml:"SegmentInstanceId,omitempty" require:"true"`
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ReleaseEipSegmentAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipSegmentAddressRequest) GoString() string {
	return s.String()
}

func (s *ReleaseEipSegmentAddressRequest) SetRegionId(v string) *ReleaseEipSegmentAddressRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseEipSegmentAddressRequest) SetSegmentInstanceId(v string) *ReleaseEipSegmentAddressRequest {
	s.SegmentInstanceId = &v
	return s
}

func (s *ReleaseEipSegmentAddressRequest) SetClientToken(v string) *ReleaseEipSegmentAddressRequest {
	s.ClientToken = &v
	return s
}

type ReleaseEipSegmentAddressResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ReleaseEipSegmentAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipSegmentAddressResponse) GoString() string {
	return s.String()
}

func (s *ReleaseEipSegmentAddressResponse) SetRequestId(v string) *ReleaseEipSegmentAddressResponse {
	s.RequestId = &v
	return s
}

type DescribeEipSegmentRequest struct {
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SegmentInstanceId *string `json:"SegmentInstanceId,omitempty" xml:"SegmentInstanceId,omitempty"`
	PageNumber        *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeEipSegmentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipSegmentRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipSegmentRequest) SetClientToken(v string) *DescribeEipSegmentRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeEipSegmentRequest) SetRegionId(v string) *DescribeEipSegmentRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEipSegmentRequest) SetSegmentInstanceId(v string) *DescribeEipSegmentRequest {
	s.SegmentInstanceId = &v
	return s
}

func (s *DescribeEipSegmentRequest) SetPageNumber(v int) *DescribeEipSegmentRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEipSegmentRequest) SetPageSize(v int) *DescribeEipSegmentRequest {
	s.PageSize = &v
	return s
}

type DescribeEipSegmentResponse struct {
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount  *int                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber  *int                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *int                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	EipSegments *DescribeEipSegmentResponseEipSegments `json:"EipSegments,omitempty" xml:"EipSegments,omitempty" require:"true" type:"Struct"`
}

func (s DescribeEipSegmentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipSegmentResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipSegmentResponse) SetRequestId(v string) *DescribeEipSegmentResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEipSegmentResponse) SetTotalCount(v int) *DescribeEipSegmentResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeEipSegmentResponse) SetPageNumber(v int) *DescribeEipSegmentResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeEipSegmentResponse) SetPageSize(v int) *DescribeEipSegmentResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeEipSegmentResponse) SetEipSegments(v *DescribeEipSegmentResponseEipSegments) *DescribeEipSegmentResponse {
	s.EipSegments = v
	return s
}

type DescribeEipSegmentResponseEipSegments struct {
	EipSegment []*DescribeEipSegmentResponseEipSegmentsEipSegment `json:"EipSegment,omitempty" xml:"EipSegment,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeEipSegmentResponseEipSegments) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipSegmentResponseEipSegments) GoString() string {
	return s.String()
}

func (s *DescribeEipSegmentResponseEipSegments) SetEipSegment(v []*DescribeEipSegmentResponseEipSegmentsEipSegment) *DescribeEipSegmentResponseEipSegments {
	s.EipSegment = v
	return s
}

type DescribeEipSegmentResponseEipSegmentsEipSegment struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Segment      *string `json:"Segment,omitempty" xml:"Segment,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IpCount      *string `json:"IpCount,omitempty" xml:"IpCount,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Descritpion  *string `json:"Descritpion,omitempty" xml:"Descritpion,omitempty" require:"true"`
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
}

func (s DescribeEipSegmentResponseEipSegmentsEipSegment) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipSegmentResponseEipSegmentsEipSegment) GoString() string {
	return s.String()
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetInstanceId(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.InstanceId = &v
	return s
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetSegment(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.Segment = &v
	return s
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetStatus(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.Status = &v
	return s
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetRegionId(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.RegionId = &v
	return s
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetIpCount(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.IpCount = &v
	return s
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetName(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.Name = &v
	return s
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetDescritpion(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.Descritpion = &v
	return s
}

func (s *DescribeEipSegmentResponseEipSegmentsEipSegment) SetCreationTime(v string) *DescribeEipSegmentResponseEipSegmentsEipSegment {
	s.CreationTime = &v
	return s
}

type AllocateEipSegmentAddressRequest struct {
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Bandwidth          *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EipMask            *string `json:"EipMask,omitempty" xml:"EipMask,omitempty" require:"true"`
	Netmode            *string `json:"Netmode,omitempty" xml:"Netmode,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Isp                *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
}

func (s AllocateEipSegmentAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipSegmentAddressRequest) GoString() string {
	return s.String()
}

func (s *AllocateEipSegmentAddressRequest) SetClientToken(v string) *AllocateEipSegmentAddressRequest {
	s.ClientToken = &v
	return s
}

func (s *AllocateEipSegmentAddressRequest) SetBandwidth(v string) *AllocateEipSegmentAddressRequest {
	s.Bandwidth = &v
	return s
}

func (s *AllocateEipSegmentAddressRequest) SetRegionId(v string) *AllocateEipSegmentAddressRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateEipSegmentAddressRequest) SetEipMask(v string) *AllocateEipSegmentAddressRequest {
	s.EipMask = &v
	return s
}

func (s *AllocateEipSegmentAddressRequest) SetNetmode(v string) *AllocateEipSegmentAddressRequest {
	s.Netmode = &v
	return s
}

func (s *AllocateEipSegmentAddressRequest) SetInternetChargeType(v string) *AllocateEipSegmentAddressRequest {
	s.InternetChargeType = &v
	return s
}

func (s *AllocateEipSegmentAddressRequest) SetResourceGroupId(v string) *AllocateEipSegmentAddressRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AllocateEipSegmentAddressRequest) SetIsp(v string) *AllocateEipSegmentAddressRequest {
	s.Isp = &v
	return s
}

type AllocateEipSegmentAddressResponse struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EipSegmentInstanceId *string `json:"EipSegmentInstanceId,omitempty" xml:"EipSegmentInstanceId,omitempty" require:"true"`
	OrderId              *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s AllocateEipSegmentAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipSegmentAddressResponse) GoString() string {
	return s.String()
}

func (s *AllocateEipSegmentAddressResponse) SetRequestId(v string) *AllocateEipSegmentAddressResponse {
	s.RequestId = &v
	return s
}

func (s *AllocateEipSegmentAddressResponse) SetEipSegmentInstanceId(v string) *AllocateEipSegmentAddressResponse {
	s.EipSegmentInstanceId = &v
	return s
}

func (s *AllocateEipSegmentAddressResponse) SetOrderId(v int64) *AllocateEipSegmentAddressResponse {
	s.OrderId = &v
	return s
}

type UnassociateVpcCidrBlockRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId              *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	SecondaryCidrBlock *string `json:"SecondaryCidrBlock,omitempty" xml:"SecondaryCidrBlock,omitempty"`
}

func (s UnassociateVpcCidrBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateVpcCidrBlockRequest) GoString() string {
	return s.String()
}

func (s *UnassociateVpcCidrBlockRequest) SetRegionId(v string) *UnassociateVpcCidrBlockRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateVpcCidrBlockRequest) SetVpcId(v string) *UnassociateVpcCidrBlockRequest {
	s.VpcId = &v
	return s
}

func (s *UnassociateVpcCidrBlockRequest) SetSecondaryCidrBlock(v string) *UnassociateVpcCidrBlockRequest {
	s.SecondaryCidrBlock = &v
	return s
}

type UnassociateVpcCidrBlockResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnassociateVpcCidrBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateVpcCidrBlockResponse) GoString() string {
	return s.String()
}

func (s *UnassociateVpcCidrBlockResponse) SetRequestId(v string) *UnassociateVpcCidrBlockResponse {
	s.RequestId = &v
	return s
}

type AssociateVpcCidrBlockRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId              *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	SecondaryCidrBlock *string `json:"SecondaryCidrBlock,omitempty" xml:"SecondaryCidrBlock,omitempty"`
}

func (s AssociateVpcCidrBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateVpcCidrBlockRequest) GoString() string {
	return s.String()
}

func (s *AssociateVpcCidrBlockRequest) SetRegionId(v string) *AssociateVpcCidrBlockRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateVpcCidrBlockRequest) SetVpcId(v string) *AssociateVpcCidrBlockRequest {
	s.VpcId = &v
	return s
}

func (s *AssociateVpcCidrBlockRequest) SetSecondaryCidrBlock(v string) *AssociateVpcCidrBlockRequest {
	s.SecondaryCidrBlock = &v
	return s
}

type AssociateVpcCidrBlockResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AssociateVpcCidrBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateVpcCidrBlockResponse) GoString() string {
	return s.String()
}

func (s *AssociateVpcCidrBlockResponse) SetRequestId(v string) *AssociateVpcCidrBlockResponse {
	s.RequestId = &v
	return s
}

type DescribeRouterInterfaceAttributeRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s DescribeRouterInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfaceAttributeRequest) SetRegionId(v string) *DescribeRouterInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeRequest) SetInstanceId(v string) *DescribeRouterInterfaceAttributeRequest {
	s.InstanceId = &v
	return s
}

type DescribeRouterInterfaceAttributeResponse struct {
	RequestId                       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code                            *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message                         *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success                         *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	RouterInterfaceId               *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
	OppositeRegionId                *string `json:"OppositeRegionId,omitempty" xml:"OppositeRegionId,omitempty" require:"true"`
	Role                            *string `json:"Role,omitempty" xml:"Role,omitempty" require:"true"`
	Spec                            *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	Name                            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description                     *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	RouterId                        *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	RouterType                      *string `json:"RouterType,omitempty" xml:"RouterType,omitempty" require:"true"`
	CreationTime                    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	GmtModified                     *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	EndTime                         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	ChargeType                      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	Status                          *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	BusinessStatus                  *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	ConnectedTime                   *string `json:"ConnectedTime,omitempty" xml:"ConnectedTime,omitempty" require:"true"`
	OppositeInterfaceId             *string `json:"OppositeInterfaceId,omitempty" xml:"OppositeInterfaceId,omitempty" require:"true"`
	OppositeInterfaceSpec           *string `json:"OppositeInterfaceSpec,omitempty" xml:"OppositeInterfaceSpec,omitempty" require:"true"`
	OppositeInterfaceStatus         *string `json:"OppositeInterfaceStatus,omitempty" xml:"OppositeInterfaceStatus,omitempty" require:"true"`
	OppositeInterfaceBusinessStatus *string `json:"OppositeInterfaceBusinessStatus,omitempty" xml:"OppositeInterfaceBusinessStatus,omitempty" require:"true"`
	OppositeRouterId                *string `json:"OppositeRouterId,omitempty" xml:"OppositeRouterId,omitempty" require:"true"`
	OppositeRouterType              *string `json:"OppositeRouterType,omitempty" xml:"OppositeRouterType,omitempty" require:"true"`
	OppositeInterfaceOwnerId        *string `json:"OppositeInterfaceOwnerId,omitempty" xml:"OppositeInterfaceOwnerId,omitempty" require:"true"`
	AccessPointId                   *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	OppositeAccessPointId           *string `json:"OppositeAccessPointId,omitempty" xml:"OppositeAccessPointId,omitempty" require:"true"`
	HealthCheckSourceIp             *string `json:"HealthCheckSourceIp,omitempty" xml:"HealthCheckSourceIp,omitempty" require:"true"`
	HealthCheckTargetIp             *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty" require:"true"`
	OppositeVpcInstanceId           *string `json:"OppositeVpcInstanceId,omitempty" xml:"OppositeVpcInstanceId,omitempty" require:"true"`
	Bandwidth                       *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	VpcInstanceId                   *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty" require:"true"`
	OppositeBandwidth               *int    `json:"OppositeBandwidth,omitempty" xml:"OppositeBandwidth,omitempty" require:"true"`
	HasReservationData              *string `json:"HasReservationData,omitempty" xml:"HasReservationData,omitempty" require:"true"`
	ReservationBandwidth            *string `json:"ReservationBandwidth,omitempty" xml:"ReservationBandwidth,omitempty" require:"true"`
	ReservationInternetChargeType   *string `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty" require:"true"`
	ReservationActiveTime           *string `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty" require:"true"`
	ReservationOrderType            *string `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	CrossBorder                     *bool   `json:"CrossBorder,omitempty" xml:"CrossBorder,omitempty" require:"true"`
	HcThreshold                     *int    `json:"HcThreshold,omitempty" xml:"HcThreshold,omitempty" require:"true"`
	HcRate                          *int    `json:"HcRate,omitempty" xml:"HcRate,omitempty" require:"true"`
	HealthCheckStatus               *string `json:"HealthCheckStatus,omitempty" xml:"HealthCheckStatus,omitempty" require:"true"`
}

func (s DescribeRouterInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfaceAttributeResponse) SetRequestId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetCode(v string) *DescribeRouterInterfaceAttributeResponse {
	s.Code = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetMessage(v string) *DescribeRouterInterfaceAttributeResponse {
	s.Message = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetSuccess(v bool) *DescribeRouterInterfaceAttributeResponse {
	s.Success = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetRouterInterfaceId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.RouterInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeRegionId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeRegionId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetRole(v string) *DescribeRouterInterfaceAttributeResponse {
	s.Role = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetSpec(v string) *DescribeRouterInterfaceAttributeResponse {
	s.Spec = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetName(v string) *DescribeRouterInterfaceAttributeResponse {
	s.Name = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetDescription(v string) *DescribeRouterInterfaceAttributeResponse {
	s.Description = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetRouterId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.RouterId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetRouterType(v string) *DescribeRouterInterfaceAttributeResponse {
	s.RouterType = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetCreationTime(v string) *DescribeRouterInterfaceAttributeResponse {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetGmtModified(v string) *DescribeRouterInterfaceAttributeResponse {
	s.GmtModified = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetEndTime(v string) *DescribeRouterInterfaceAttributeResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetChargeType(v string) *DescribeRouterInterfaceAttributeResponse {
	s.ChargeType = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetStatus(v string) *DescribeRouterInterfaceAttributeResponse {
	s.Status = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetBusinessStatus(v string) *DescribeRouterInterfaceAttributeResponse {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetConnectedTime(v string) *DescribeRouterInterfaceAttributeResponse {
	s.ConnectedTime = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeInterfaceId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeInterfaceSpec(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeInterfaceSpec = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeInterfaceStatus(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeInterfaceStatus = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeInterfaceBusinessStatus(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeInterfaceBusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeRouterId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeRouterId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeRouterType(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeRouterType = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeInterfaceOwnerId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetAccessPointId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.AccessPointId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeAccessPointId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeAccessPointId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetHealthCheckSourceIp(v string) *DescribeRouterInterfaceAttributeResponse {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetHealthCheckTargetIp(v string) *DescribeRouterInterfaceAttributeResponse {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeVpcInstanceId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeVpcInstanceId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetBandwidth(v int) *DescribeRouterInterfaceAttributeResponse {
	s.Bandwidth = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetVpcInstanceId(v string) *DescribeRouterInterfaceAttributeResponse {
	s.VpcInstanceId = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetOppositeBandwidth(v int) *DescribeRouterInterfaceAttributeResponse {
	s.OppositeBandwidth = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetHasReservationData(v string) *DescribeRouterInterfaceAttributeResponse {
	s.HasReservationData = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetReservationBandwidth(v string) *DescribeRouterInterfaceAttributeResponse {
	s.ReservationBandwidth = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetReservationInternetChargeType(v string) *DescribeRouterInterfaceAttributeResponse {
	s.ReservationInternetChargeType = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetReservationActiveTime(v string) *DescribeRouterInterfaceAttributeResponse {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetReservationOrderType(v string) *DescribeRouterInterfaceAttributeResponse {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetCrossBorder(v bool) *DescribeRouterInterfaceAttributeResponse {
	s.CrossBorder = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetHcThreshold(v int) *DescribeRouterInterfaceAttributeResponse {
	s.HcThreshold = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetHcRate(v int) *DescribeRouterInterfaceAttributeResponse {
	s.HcRate = &v
	return s
}

func (s *DescribeRouterInterfaceAttributeResponse) SetHealthCheckStatus(v string) *DescribeRouterInterfaceAttributeResponse {
	s.HealthCheckStatus = &v
	return s
}

type DeleteExpressCloudConnectionRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EccId    *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
}

func (s DeleteExpressCloudConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExpressCloudConnectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteExpressCloudConnectionRequest) SetRegionId(v string) *DeleteExpressCloudConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteExpressCloudConnectionRequest) SetEccId(v string) *DeleteExpressCloudConnectionRequest {
	s.EccId = &v
	return s
}

type DeleteExpressCloudConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteExpressCloudConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExpressCloudConnectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteExpressCloudConnectionResponse) SetRequestId(v string) *DeleteExpressCloudConnectionResponse {
	s.RequestId = &v
	return s
}

type CancelExpressCloudConnectionRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EccId    *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
}

func (s CancelExpressCloudConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelExpressCloudConnectionRequest) GoString() string {
	return s.String()
}

func (s *CancelExpressCloudConnectionRequest) SetRegionId(v string) *CancelExpressCloudConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CancelExpressCloudConnectionRequest) SetEccId(v string) *CancelExpressCloudConnectionRequest {
	s.EccId = &v
	return s
}

type CancelExpressCloudConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CancelExpressCloudConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelExpressCloudConnectionResponse) GoString() string {
	return s.String()
}

func (s *CancelExpressCloudConnectionResponse) SetRequestId(v string) *CancelExpressCloudConnectionResponse {
	s.RequestId = &v
	return s
}

type DeletionProtectionRequest struct {
	ProtectionEnable *bool   `json:"ProtectionEnable,omitempty" xml:"ProtectionEnable,omitempty" require:"true"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DeletionProtectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletionProtectionRequest) GoString() string {
	return s.String()
}

func (s *DeletionProtectionRequest) SetProtectionEnable(v bool) *DeletionProtectionRequest {
	s.ProtectionEnable = &v
	return s
}

func (s *DeletionProtectionRequest) SetType(v string) *DeletionProtectionRequest {
	s.Type = &v
	return s
}

func (s *DeletionProtectionRequest) SetInstanceId(v string) *DeletionProtectionRequest {
	s.InstanceId = &v
	return s
}

func (s *DeletionProtectionRequest) SetClientToken(v string) *DeletionProtectionRequest {
	s.ClientToken = &v
	return s
}

func (s *DeletionProtectionRequest) SetRegionId(v string) *DeletionProtectionRequest {
	s.RegionId = &v
	return s
}

type DeletionProtectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeletionProtectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletionProtectionResponse) GoString() string {
	return s.String()
}

func (s *DeletionProtectionResponse) SetRequestId(v string) *DeletionProtectionResponse {
	s.RequestId = &v
	return s
}

type DescribeEipGatewayInfoRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeEipGatewayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipGatewayInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipGatewayInfoRequest) SetInstanceId(v string) *DescribeEipGatewayInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeEipGatewayInfoRequest) SetRegionId(v string) *DescribeEipGatewayInfoRequest {
	s.RegionId = &v
	return s
}

type DescribeEipGatewayInfoResponse struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code      *string                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	EipInfos  *DescribeEipGatewayInfoResponseEipInfos `json:"EipInfos,omitempty" xml:"EipInfos,omitempty" require:"true" type:"Struct"`
}

func (s DescribeEipGatewayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipGatewayInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipGatewayInfoResponse) SetRequestId(v string) *DescribeEipGatewayInfoResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEipGatewayInfoResponse) SetCode(v string) *DescribeEipGatewayInfoResponse {
	s.Code = &v
	return s
}

func (s *DescribeEipGatewayInfoResponse) SetMessage(v string) *DescribeEipGatewayInfoResponse {
	s.Message = &v
	return s
}

func (s *DescribeEipGatewayInfoResponse) SetEipInfos(v *DescribeEipGatewayInfoResponseEipInfos) *DescribeEipGatewayInfoResponse {
	s.EipInfos = v
	return s
}

type DescribeEipGatewayInfoResponseEipInfos struct {
	EipInfo []*DescribeEipGatewayInfoResponseEipInfosEipInfo `json:"EipInfo,omitempty" xml:"EipInfo,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeEipGatewayInfoResponseEipInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipGatewayInfoResponseEipInfos) GoString() string {
	return s.String()
}

func (s *DescribeEipGatewayInfoResponseEipInfos) SetEipInfo(v []*DescribeEipGatewayInfoResponseEipInfosEipInfo) *DescribeEipGatewayInfoResponseEipInfos {
	s.EipInfo = v
	return s
}

type DescribeEipGatewayInfoResponseEipInfosEipInfo struct {
	Ip     *string `json:"Ip,omitempty" xml:"Ip,omitempty" require:"true"`
	IpGw   *string `json:"IpGw,omitempty" xml:"IpGw,omitempty" require:"true"`
	IpMask *string `json:"IpMask,omitempty" xml:"IpMask,omitempty" require:"true"`
}

func (s DescribeEipGatewayInfoResponseEipInfosEipInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipGatewayInfoResponseEipInfosEipInfo) GoString() string {
	return s.String()
}

func (s *DescribeEipGatewayInfoResponseEipInfosEipInfo) SetIp(v string) *DescribeEipGatewayInfoResponseEipInfosEipInfo {
	s.Ip = &v
	return s
}

func (s *DescribeEipGatewayInfoResponseEipInfosEipInfo) SetIpGw(v string) *DescribeEipGatewayInfoResponseEipInfosEipInfo {
	s.IpGw = &v
	return s
}

func (s *DescribeEipGatewayInfoResponseEipInfosEipInfo) SetIpMask(v string) *DescribeEipGatewayInfoResponseEipInfosEipInfo {
	s.IpMask = &v
	return s
}

type ModifyBgpPeerAttributeRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BgpPeerId     *string `json:"BgpPeerId,omitempty" xml:"BgpPeerId,omitempty" require:"true"`
	BgpGroupId    *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty"`
	PeerIpAddress *string `json:"PeerIpAddress,omitempty" xml:"PeerIpAddress,omitempty"`
	EnableBfd     *bool   `json:"EnableBfd,omitempty" xml:"EnableBfd,omitempty"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	BfdMultiHop   *int    `json:"BfdMultiHop,omitempty" xml:"BfdMultiHop,omitempty"`
}

func (s ModifyBgpPeerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBgpPeerAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyBgpPeerAttributeRequest) SetRegionId(v string) *ModifyBgpPeerAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyBgpPeerAttributeRequest) SetBgpPeerId(v string) *ModifyBgpPeerAttributeRequest {
	s.BgpPeerId = &v
	return s
}

func (s *ModifyBgpPeerAttributeRequest) SetBgpGroupId(v string) *ModifyBgpPeerAttributeRequest {
	s.BgpGroupId = &v
	return s
}

func (s *ModifyBgpPeerAttributeRequest) SetPeerIpAddress(v string) *ModifyBgpPeerAttributeRequest {
	s.PeerIpAddress = &v
	return s
}

func (s *ModifyBgpPeerAttributeRequest) SetEnableBfd(v bool) *ModifyBgpPeerAttributeRequest {
	s.EnableBfd = &v
	return s
}

func (s *ModifyBgpPeerAttributeRequest) SetClientToken(v string) *ModifyBgpPeerAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyBgpPeerAttributeRequest) SetBfdMultiHop(v int) *ModifyBgpPeerAttributeRequest {
	s.BfdMultiHop = &v
	return s
}

type ModifyBgpPeerAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyBgpPeerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBgpPeerAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyBgpPeerAttributeResponse) SetRequestId(v string) *ModifyBgpPeerAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeVpnSslServerLogsRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnSslServerId     *string `json:"VpnSslServerId,omitempty" xml:"VpnSslServerId,omitempty" require:"true"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty"`
	From               *int    `json:"From,omitempty" xml:"From,omitempty"`
	To                 *int    `json:"To,omitempty" xml:"To,omitempty"`
	MinutePeriod       *int    `json:"MinutePeriod,omitempty" xml:"MinutePeriod,omitempty"`
	PageNumber         *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeVpnSslServerLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnSslServerLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpnSslServerLogsRequest) SetRegionId(v string) *DescribeVpnSslServerLogsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpnSslServerLogsRequest) SetVpnSslServerId(v string) *DescribeVpnSslServerLogsRequest {
	s.VpnSslServerId = &v
	return s
}

func (s *DescribeVpnSslServerLogsRequest) SetSslVpnClientCertId(v string) *DescribeVpnSslServerLogsRequest {
	s.SslVpnClientCertId = &v
	return s
}

func (s *DescribeVpnSslServerLogsRequest) SetFrom(v int) *DescribeVpnSslServerLogsRequest {
	s.From = &v
	return s
}

func (s *DescribeVpnSslServerLogsRequest) SetTo(v int) *DescribeVpnSslServerLogsRequest {
	s.To = &v
	return s
}

func (s *DescribeVpnSslServerLogsRequest) SetMinutePeriod(v int) *DescribeVpnSslServerLogsRequest {
	s.MinutePeriod = &v
	return s
}

func (s *DescribeVpnSslServerLogsRequest) SetPageNumber(v int) *DescribeVpnSslServerLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnSslServerLogsRequest) SetPageSize(v int) *DescribeVpnSslServerLogsRequest {
	s.PageSize = &v
	return s
}

type DescribeVpnSslServerLogsResponse struct {
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Count       *int                                  `json:"Count,omitempty" xml:"Count,omitempty" require:"true"`
	IsCompleted *bool                                 `json:"IsCompleted,omitempty" xml:"IsCompleted,omitempty" require:"true"`
	PageNumber  *int                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *int                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Data        *DescribeVpnSslServerLogsResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnSslServerLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnSslServerLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpnSslServerLogsResponse) SetRequestId(v string) *DescribeVpnSslServerLogsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpnSslServerLogsResponse) SetCount(v int) *DescribeVpnSslServerLogsResponse {
	s.Count = &v
	return s
}

func (s *DescribeVpnSslServerLogsResponse) SetIsCompleted(v bool) *DescribeVpnSslServerLogsResponse {
	s.IsCompleted = &v
	return s
}

func (s *DescribeVpnSslServerLogsResponse) SetPageNumber(v int) *DescribeVpnSslServerLogsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnSslServerLogsResponse) SetPageSize(v int) *DescribeVpnSslServerLogsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnSslServerLogsResponse) SetData(v *DescribeVpnSslServerLogsResponseData) *DescribeVpnSslServerLogsResponse {
	s.Data = v
	return s
}

type DescribeVpnSslServerLogsResponseData struct {
	Logs []*string `json:"Logs,omitempty" xml:"Logs,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpnSslServerLogsResponseData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnSslServerLogsResponseData) GoString() string {
	return s.String()
}

func (s *DescribeVpnSslServerLogsResponseData) SetLogs(v []*string) *DescribeVpnSslServerLogsResponseData {
	s.Logs = v
	return s
}

type ModifyExpressCloudConnectionBandwidthRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Bandwidth *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	EccId     *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
}

func (s ModifyExpressCloudConnectionBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyExpressCloudConnectionBandwidthRequest) GoString() string {
	return s.String()
}

func (s *ModifyExpressCloudConnectionBandwidthRequest) SetRegionId(v string) *ModifyExpressCloudConnectionBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyExpressCloudConnectionBandwidthRequest) SetBandwidth(v string) *ModifyExpressCloudConnectionBandwidthRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyExpressCloudConnectionBandwidthRequest) SetEccId(v string) *ModifyExpressCloudConnectionBandwidthRequest {
	s.EccId = &v
	return s
}

type ModifyExpressCloudConnectionBandwidthResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyExpressCloudConnectionBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyExpressCloudConnectionBandwidthResponse) GoString() string {
	return s.String()
}

func (s *ModifyExpressCloudConnectionBandwidthResponse) SetRequestId(v string) *ModifyExpressCloudConnectionBandwidthResponse {
	s.RequestId = &v
	return s
}

type ModifyExpressCloudConnectionAttributeRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	EccId       *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
	BgpAs       *string `json:"BgpAs,omitempty" xml:"BgpAs,omitempty"`
	PeIp        *string `json:"PeIp,omitempty" xml:"PeIp,omitempty"`
	CeIp        *string `json:"CeIp,omitempty" xml:"CeIp,omitempty"`
}

func (s ModifyExpressCloudConnectionAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyExpressCloudConnectionAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyExpressCloudConnectionAttributeRequest) SetDescription(v string) *ModifyExpressCloudConnectionAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyExpressCloudConnectionAttributeRequest) SetRegionId(v string) *ModifyExpressCloudConnectionAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyExpressCloudConnectionAttributeRequest) SetName(v string) *ModifyExpressCloudConnectionAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyExpressCloudConnectionAttributeRequest) SetEccId(v string) *ModifyExpressCloudConnectionAttributeRequest {
	s.EccId = &v
	return s
}

func (s *ModifyExpressCloudConnectionAttributeRequest) SetBgpAs(v string) *ModifyExpressCloudConnectionAttributeRequest {
	s.BgpAs = &v
	return s
}

func (s *ModifyExpressCloudConnectionAttributeRequest) SetPeIp(v string) *ModifyExpressCloudConnectionAttributeRequest {
	s.PeIp = &v
	return s
}

func (s *ModifyExpressCloudConnectionAttributeRequest) SetCeIp(v string) *ModifyExpressCloudConnectionAttributeRequest {
	s.CeIp = &v
	return s
}

type ModifyExpressCloudConnectionAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyExpressCloudConnectionAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyExpressCloudConnectionAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyExpressCloudConnectionAttributeResponse) SetRequestId(v string) *ModifyExpressCloudConnectionAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeExpressCloudConnectionsRequest struct {
	RegionId   *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageNumber *int                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter     []*DescribeExpressCloudConnectionsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeExpressCloudConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressCloudConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeExpressCloudConnectionsRequest) SetRegionId(v string) *DescribeExpressCloudConnectionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeExpressCloudConnectionsRequest) SetPageNumber(v int) *DescribeExpressCloudConnectionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeExpressCloudConnectionsRequest) SetPageSize(v int) *DescribeExpressCloudConnectionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeExpressCloudConnectionsRequest) SetFilter(v []*DescribeExpressCloudConnectionsRequestFilter) *DescribeExpressCloudConnectionsRequest {
	s.Filter = v
	return s
}

type DescribeExpressCloudConnectionsRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeExpressCloudConnectionsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressCloudConnectionsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeExpressCloudConnectionsRequestFilter) SetKey(v string) *DescribeExpressCloudConnectionsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeExpressCloudConnectionsRequestFilter) SetValue(v []*string) *DescribeExpressCloudConnectionsRequestFilter {
	s.Value = v
	return s
}

type DescribeExpressCloudConnectionsResponse struct {
	RequestId                 *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber                *int                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize                  *int                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalCount                *int                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	ExpressCloudConnectionSet *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSet `json:"ExpressCloudConnectionSet,omitempty" xml:"ExpressCloudConnectionSet,omitempty" require:"true" type:"Struct"`
}

func (s DescribeExpressCloudConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressCloudConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeExpressCloudConnectionsResponse) SetRequestId(v string) *DescribeExpressCloudConnectionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponse) SetPageNumber(v int) *DescribeExpressCloudConnectionsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponse) SetPageSize(v int) *DescribeExpressCloudConnectionsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponse) SetTotalCount(v int) *DescribeExpressCloudConnectionsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponse) SetExpressCloudConnectionSet(v *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSet) *DescribeExpressCloudConnectionsResponse {
	s.ExpressCloudConnectionSet = v
	return s
}

type DescribeExpressCloudConnectionsResponseExpressCloudConnectionSet struct {
	ExpressCloudConnectionType []*DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType `json:"ExpressCloudConnectionType,omitempty" xml:"ExpressCloudConnectionType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSet) GoString() string {
	return s.String()
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSet) SetExpressCloudConnectionType(v []*DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSet {
	s.ExpressCloudConnectionType = v
	return s
}

type DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType struct {
	InstanceId                    *string                                                                                                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Status                        *string                                                                                                              `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Name                          *string                                                                                                              `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description                   *string                                                                                                              `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	GmtCreate                     *string                                                                                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModify                     *string                                                                                                              `json:"GmtModify,omitempty" xml:"GmtModify,omitempty" require:"true"`
	PeerCity                      *string                                                                                                              `json:"PeerCity,omitempty" xml:"PeerCity,omitempty" require:"true"`
	PeerLocation                  *string                                                                                                              `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty" require:"true"`
	PortType                      *string                                                                                                              `json:"PortType,omitempty" xml:"PortType,omitempty" require:"true"`
	Bandwidth                     *int                                                                                                                 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	Distance                      *int                                                                                                                 `json:"Distance,omitempty" xml:"Distance,omitempty" require:"true"`
	RedundantEccId                *string                                                                                                              `json:"RedundantEccId,omitempty" xml:"RedundantEccId,omitempty" require:"true"`
	CircuitCode                   *string                                                                                                              `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty" require:"true"`
	Isp                           *string                                                                                                              `json:"Isp,omitempty" xml:"Isp,omitempty" require:"true"`
	Type                          *string                                                                                                              `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	IdcSP                         *string                                                                                                              `json:"IdcSP,omitempty" xml:"IdcSP,omitempty" require:"true"`
	BusinessStatus                *string                                                                                                              `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	HasReservationData            *string                                                                                                              `json:"HasReservationData,omitempty" xml:"HasReservationData,omitempty" require:"true"`
	ReservationBandwidth          *string                                                                                                              `json:"ReservationBandwidth,omitempty" xml:"ReservationBandwidth,omitempty" require:"true"`
	ReservationInternetChargeType *string                                                                                                              `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty" require:"true"`
	ReservationActiveTime         *string                                                                                                              `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty" require:"true"`
	ReservationOrderType          *string                                                                                                              `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	ApplicationType               *string                                                                                                              `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty" require:"true"`
	ApplicationId                 *string                                                                                                              `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty" require:"true"`
	ApplicationStatus             *string                                                                                                              `json:"ApplicationStatus,omitempty" xml:"ApplicationStatus,omitempty" require:"true"`
	ApplicationBandwidth          *string                                                                                                              `json:"ApplicationBandwidth,omitempty" xml:"ApplicationBandwidth,omitempty" require:"true"`
	EndTime                       *string                                                                                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	ChargeType                    *string                                                                                                              `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	ContactTel                    *string                                                                                                              `json:"ContactTel,omitempty" xml:"ContactTel,omitempty" require:"true"`
	ContactMail                   *string                                                                                                              `json:"ContactMail,omitempty" xml:"ContactMail,omitempty" require:"true"`
	IDCardNo                      *string                                                                                                              `json:"IDCardNo,omitempty" xml:"IDCardNo,omitempty" require:"true"`
	EstimatedTime                 *string                                                                                                              `json:"EstimatedTime,omitempty" xml:"EstimatedTime,omitempty" require:"true"`
	BgpAs                         *string                                                                                                              `json:"BgpAs,omitempty" xml:"BgpAs,omitempty" require:"true"`
	PeIp                          *string                                                                                                              `json:"PeIp,omitempty" xml:"PeIp,omitempty" require:"true"`
	CeIp                          *string                                                                                                              `json:"CeIp,omitempty" xml:"CeIp,omitempty" require:"true"`
	ConstructionPeriod            *string                                                                                                              `json:"ConstructionPeriod,omitempty" xml:"ConstructionPeriod,omitempty" require:"true"`
	VirtualBorderRouterModels     *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModels `json:"VirtualBorderRouterModels,omitempty" xml:"VirtualBorderRouterModels,omitempty" require:"true" type:"Struct"`
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) GoString() string {
	return s.String()
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetInstanceId(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.InstanceId = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetStatus(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.Status = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetName(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.Name = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetDescription(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.Description = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetGmtCreate(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.GmtCreate = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetGmtModify(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.GmtModify = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetPeerCity(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.PeerCity = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetPeerLocation(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.PeerLocation = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetPortType(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.PortType = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetBandwidth(v int) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.Bandwidth = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetDistance(v int) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.Distance = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetRedundantEccId(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.RedundantEccId = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetCircuitCode(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.CircuitCode = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetIsp(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.Isp = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetType(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.Type = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetIdcSP(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.IdcSP = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetBusinessStatus(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetHasReservationData(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.HasReservationData = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetReservationBandwidth(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ReservationBandwidth = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetReservationInternetChargeType(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ReservationInternetChargeType = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetReservationActiveTime(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetReservationOrderType(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetApplicationType(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ApplicationType = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetApplicationId(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ApplicationId = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetApplicationStatus(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ApplicationStatus = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetApplicationBandwidth(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ApplicationBandwidth = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetEndTime(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.EndTime = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetChargeType(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ChargeType = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetContactTel(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ContactTel = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetContactMail(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ContactMail = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetIDCardNo(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.IDCardNo = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetEstimatedTime(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.EstimatedTime = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetBgpAs(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.BgpAs = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetPeIp(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.PeIp = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetCeIp(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.CeIp = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetConstructionPeriod(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.ConstructionPeriod = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType) SetVirtualBorderRouterModels(v *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModels) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionType {
	s.VirtualBorderRouterModels = v
	return s
}

type DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModels struct {
	VirtualBorderRouterModel []*DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel `json:"VirtualBorderRouterModel,omitempty" xml:"VirtualBorderRouterModel,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModels) GoString() string {
	return s.String()
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModels) SetVirtualBorderRouterModel(v []*DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModels {
	s.VirtualBorderRouterModel = v
	return s
}

type DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	AccessPointId        *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel) GoString() string {
	return s.String()
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel) SetInstanceId(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel {
	s.InstanceId = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel) SetAccessPointId(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel {
	s.AccessPointId = &v
	return s
}

func (s *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel) SetPhysicalConnectionId(v string) *DescribeExpressCloudConnectionsResponseExpressCloudConnectionSetExpressCloudConnectionTypeVirtualBorderRouterModelsVirtualBorderRouterModel {
	s.PhysicalConnectionId = &v
	return s
}

type CreateExpressCloudConnectionRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	PeerCity       *string `json:"PeerCity,omitempty" xml:"PeerCity,omitempty"`
	PeerLocation   *string `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty" require:"true"`
	IdcSP          *string `json:"IdcSP,omitempty" xml:"IdcSP,omitempty" require:"true"`
	PortType       *string `json:"PortType,omitempty" xml:"PortType,omitempty"`
	Bandwidth      *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	ContactTel     *string `json:"ContactTel,omitempty" xml:"ContactTel,omitempty"`
	ContactMail    *string `json:"ContactMail,omitempty" xml:"ContactMail,omitempty"`
	IDCardNo       *string `json:"IDCardNo,omitempty" xml:"IDCardNo,omitempty"`
	RedundantEccId *string `json:"RedundantEccId,omitempty" xml:"RedundantEccId,omitempty"`
}

func (s CreateExpressCloudConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExpressCloudConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreateExpressCloudConnectionRequest) SetRegionId(v string) *CreateExpressCloudConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetName(v string) *CreateExpressCloudConnectionRequest {
	s.Name = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetDescription(v string) *CreateExpressCloudConnectionRequest {
	s.Description = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetPeerCity(v string) *CreateExpressCloudConnectionRequest {
	s.PeerCity = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetPeerLocation(v string) *CreateExpressCloudConnectionRequest {
	s.PeerLocation = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetIdcSP(v string) *CreateExpressCloudConnectionRequest {
	s.IdcSP = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetPortType(v string) *CreateExpressCloudConnectionRequest {
	s.PortType = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetBandwidth(v int) *CreateExpressCloudConnectionRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetContactTel(v string) *CreateExpressCloudConnectionRequest {
	s.ContactTel = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetContactMail(v string) *CreateExpressCloudConnectionRequest {
	s.ContactMail = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetIDCardNo(v string) *CreateExpressCloudConnectionRequest {
	s.IDCardNo = &v
	return s
}

func (s *CreateExpressCloudConnectionRequest) SetRedundantEccId(v string) *CreateExpressCloudConnectionRequest {
	s.RedundantEccId = &v
	return s
}

type CreateExpressCloudConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EccId     *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
}

func (s CreateExpressCloudConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExpressCloudConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreateExpressCloudConnectionResponse) SetRequestId(v string) *CreateExpressCloudConnectionResponse {
	s.RequestId = &v
	return s
}

func (s *CreateExpressCloudConnectionResponse) SetEccId(v string) *CreateExpressCloudConnectionResponse {
	s.EccId = &v
	return s
}

type UpdateNetworkAclEntriesRequest struct {
	IngressAclEntries       []*UpdateNetworkAclEntriesRequestIngressAclEntries `json:"IngressAclEntries,omitempty" xml:"IngressAclEntries,omitempty" type:"Repeated"`
	EgressAclEntries        []*UpdateNetworkAclEntriesRequestEgressAclEntries  `json:"EgressAclEntries,omitempty" xml:"EgressAclEntries,omitempty" type:"Repeated"`
	UpdateIngressAclEntries *bool                                              `json:"UpdateIngressAclEntries,omitempty" xml:"UpdateIngressAclEntries,omitempty"`
	UpdateEgressAclEntries  *bool                                              `json:"UpdateEgressAclEntries,omitempty" xml:"UpdateEgressAclEntries,omitempty"`
	NetworkAclId            *string                                            `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId                *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken             *string                                            `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s UpdateNetworkAclEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNetworkAclEntriesRequest) GoString() string {
	return s.String()
}

func (s *UpdateNetworkAclEntriesRequest) SetIngressAclEntries(v []*UpdateNetworkAclEntriesRequestIngressAclEntries) *UpdateNetworkAclEntriesRequest {
	s.IngressAclEntries = v
	return s
}

func (s *UpdateNetworkAclEntriesRequest) SetEgressAclEntries(v []*UpdateNetworkAclEntriesRequestEgressAclEntries) *UpdateNetworkAclEntriesRequest {
	s.EgressAclEntries = v
	return s
}

func (s *UpdateNetworkAclEntriesRequest) SetUpdateIngressAclEntries(v bool) *UpdateNetworkAclEntriesRequest {
	s.UpdateIngressAclEntries = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequest) SetUpdateEgressAclEntries(v bool) *UpdateNetworkAclEntriesRequest {
	s.UpdateEgressAclEntries = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequest) SetNetworkAclId(v string) *UpdateNetworkAclEntriesRequest {
	s.NetworkAclId = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequest) SetRegionId(v string) *UpdateNetworkAclEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequest) SetClientToken(v string) *UpdateNetworkAclEntriesRequest {
	s.ClientToken = &v
	return s
}

type UpdateNetworkAclEntriesRequestIngressAclEntries struct {
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	SourceCidrIp        *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s UpdateNetworkAclEntriesRequestIngressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s UpdateNetworkAclEntriesRequestIngressAclEntries) GoString() string {
	return s.String()
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetNetworkAclEntryName(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.NetworkAclEntryName = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetNetworkAclEntryId(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.NetworkAclEntryId = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetPolicy(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.Policy = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetProtocol(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.Protocol = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetSourceCidrIp(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.SourceCidrIp = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetPort(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.Port = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetEntryType(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.EntryType = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestIngressAclEntries) SetDescription(v string) *UpdateNetworkAclEntriesRequestIngressAclEntries {
	s.Description = &v
	return s
}

type UpdateNetworkAclEntriesRequestEgressAclEntries struct {
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	DestinationCidrIp   *string `json:"DestinationCidrIp,omitempty" xml:"DestinationCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s UpdateNetworkAclEntriesRequestEgressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s UpdateNetworkAclEntriesRequestEgressAclEntries) GoString() string {
	return s.String()
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetNetworkAclEntryName(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.NetworkAclEntryName = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetNetworkAclEntryId(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.NetworkAclEntryId = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetPolicy(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.Policy = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetProtocol(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.Protocol = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetDestinationCidrIp(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.DestinationCidrIp = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetPort(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.Port = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetEntryType(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.EntryType = &v
	return s
}

func (s *UpdateNetworkAclEntriesRequestEgressAclEntries) SetDescription(v string) *UpdateNetworkAclEntriesRequestEgressAclEntries {
	s.Description = &v
	return s
}

type UpdateNetworkAclEntriesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateNetworkAclEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNetworkAclEntriesResponse) GoString() string {
	return s.String()
}

func (s *UpdateNetworkAclEntriesResponse) SetRequestId(v string) *UpdateNetworkAclEntriesResponse {
	s.RequestId = &v
	return s
}

type UnassociateNetworkAclRequest struct {
	Resource     []*UnassociateNetworkAclRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
	NetworkAclId *string                                 `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId     *string                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string                                 `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s UnassociateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclRequest) SetResource(v []*UnassociateNetworkAclRequestResource) *UnassociateNetworkAclRequest {
	s.Resource = v
	return s
}

func (s *UnassociateNetworkAclRequest) SetNetworkAclId(v string) *UnassociateNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

func (s *UnassociateNetworkAclRequest) SetRegionId(v string) *UnassociateNetworkAclRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateNetworkAclRequest) SetClientToken(v string) *UnassociateNetworkAclRequest {
	s.ClientToken = &v
	return s
}

type UnassociateNetworkAclRequestResource struct {
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
}

func (s UnassociateNetworkAclRequestResource) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclRequestResource) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclRequestResource) SetResourceType(v string) *UnassociateNetworkAclRequestResource {
	s.ResourceType = &v
	return s
}

func (s *UnassociateNetworkAclRequestResource) SetResourceId(v string) *UnassociateNetworkAclRequestResource {
	s.ResourceId = &v
	return s
}

type UnassociateNetworkAclResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnassociateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclResponse) SetRequestId(v string) *UnassociateNetworkAclResponse {
	s.RequestId = &v
	return s
}

type ModifyNetworkAclAttributesRequest struct {
	NetworkAclId   *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifyNetworkAclAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAclAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAclAttributesRequest) SetNetworkAclId(v string) *ModifyNetworkAclAttributesRequest {
	s.NetworkAclId = &v
	return s
}

func (s *ModifyNetworkAclAttributesRequest) SetNetworkAclName(v string) *ModifyNetworkAclAttributesRequest {
	s.NetworkAclName = &v
	return s
}

func (s *ModifyNetworkAclAttributesRequest) SetDescription(v string) *ModifyNetworkAclAttributesRequest {
	s.Description = &v
	return s
}

func (s *ModifyNetworkAclAttributesRequest) SetRegionId(v string) *ModifyNetworkAclAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyNetworkAclAttributesRequest) SetClientToken(v string) *ModifyNetworkAclAttributesRequest {
	s.ClientToken = &v
	return s
}

type ModifyNetworkAclAttributesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyNetworkAclAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAclAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAclAttributesResponse) SetRequestId(v string) *ModifyNetworkAclAttributesResponse {
	s.RequestId = &v
	return s
}

type DescribeNetworkAclsRequest struct {
	NetworkAclId   *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ResourceType   *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId     *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	PageNumber     *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DescribeNetworkAclsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsRequest) SetNetworkAclId(v string) *DescribeNetworkAclsRequest {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetNetworkAclName(v string) *DescribeNetworkAclsRequest {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetVpcId(v string) *DescribeNetworkAclsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetResourceType(v string) *DescribeNetworkAclsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetResourceId(v string) *DescribeNetworkAclsRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetPageNumber(v int) *DescribeNetworkAclsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetPageSize(v int) *DescribeNetworkAclsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetRegionId(v string) *DescribeNetworkAclsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetClientToken(v string) *DescribeNetworkAclsRequest {
	s.ClientToken = &v
	return s
}

type DescribeNetworkAclsResponse struct {
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount  *string                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber  *string                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *string                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	NetworkAcls *DescribeNetworkAclsResponseNetworkAcls `json:"NetworkAcls,omitempty" xml:"NetworkAcls,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNetworkAclsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponse) SetRequestId(v string) *DescribeNetworkAclsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkAclsResponse) SetTotalCount(v string) *DescribeNetworkAclsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeNetworkAclsResponse) SetPageNumber(v string) *DescribeNetworkAclsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkAclsResponse) SetPageSize(v string) *DescribeNetworkAclsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkAclsResponse) SetNetworkAcls(v *DescribeNetworkAclsResponseNetworkAcls) *DescribeNetworkAclsResponse {
	s.NetworkAcls = v
	return s
}

type DescribeNetworkAclsResponseNetworkAcls struct {
	NetworkAcl []*DescribeNetworkAclsResponseNetworkAclsNetworkAcl `json:"NetworkAcl,omitempty" xml:"NetworkAcl,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNetworkAclsResponseNetworkAcls) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAcls) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAcls) SetNetworkAcl(v []*DescribeNetworkAclsResponseNetworkAclsNetworkAcl) *DescribeNetworkAclsResponseNetworkAcls {
	s.NetworkAcl = v
	return s
}

type DescribeNetworkAclsResponseNetworkAclsNetworkAcl struct {
	NetworkAclId      *string                                                            `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId          *string                                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NetworkAclName    *string                                                            `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty" require:"true"`
	Description       *string                                                            `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	VpcId             *string                                                            `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	CreationTime      *string                                                            `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Status            *string                                                            `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	OwnerId           *int64                                                             `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	IngressAclEntries *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntries `json:"IngressAclEntries,omitempty" xml:"IngressAclEntries,omitempty" require:"true" type:"Struct"`
	EgressAclEntries  *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntries  `json:"EgressAclEntries,omitempty" xml:"EgressAclEntries,omitempty" require:"true" type:"Struct"`
	Resources         *DescribeNetworkAclsResponseNetworkAclsNetworkAclResources         `json:"Resources,omitempty" xml:"Resources,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAcl) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAcl) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetNetworkAclId(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetRegionId(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetNetworkAclName(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetDescription(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetVpcId(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetCreationTime(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetStatus(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.Status = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetOwnerId(v int64) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetIngressAclEntries(v *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntries) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.IngressAclEntries = v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetEgressAclEntries(v *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntries) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.EgressAclEntries = v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAcl) SetResources(v *DescribeNetworkAclsResponseNetworkAclsNetworkAclResources) *DescribeNetworkAclsResponseNetworkAclsNetworkAcl {
	s.Resources = v
	return s
}

type DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntries struct {
	IngressAclEntry []*DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry `json:"IngressAclEntry,omitempty" xml:"IngressAclEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntries) SetIngressAclEntry(v []*DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntries {
	s.IngressAclEntry = v
	return s
}

type DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry struct {
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	SourceCidrIp        *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetNetworkAclEntryId(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetPolicy(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetProtocol(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetSourceCidrIp(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetPort(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.Port = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetEntryType(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.EntryType = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetNetworkAclEntryName(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.NetworkAclEntryName = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry) SetDescription(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclIngressAclEntriesIngressAclEntry {
	s.Description = &v
	return s
}

type DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntries struct {
	EgressAclEntry []*DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry `json:"EgressAclEntry,omitempty" xml:"EgressAclEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntries) SetEgressAclEntry(v []*DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntries {
	s.EgressAclEntry = v
	return s
}

type DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry struct {
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	DestinationCidrIp   *string `json:"DestinationCidrIp,omitempty" xml:"DestinationCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetNetworkAclEntryId(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetPolicy(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetProtocol(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetDestinationCidrIp(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.DestinationCidrIp = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetPort(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.Port = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetEntryType(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.EntryType = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetDescription(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry) SetNetworkAclEntryName(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclEgressAclEntriesEgressAclEntry {
	s.NetworkAclEntryName = &v
	return s
}

type DescribeNetworkAclsResponseNetworkAclsNetworkAclResources struct {
	Resource []*DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclResources) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclResources) SetResource(v []*DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource) *DescribeNetworkAclsResponseNetworkAclsNetworkAclResources {
	s.Resource = v
	return s
}

type DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource) SetResourceId(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource {
	s.ResourceId = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource) SetResourceType(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource {
	s.ResourceType = &v
	return s
}

func (s *DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource) SetStatus(v string) *DescribeNetworkAclsResponseNetworkAclsNetworkAclResourcesResource {
	s.Status = &v
	return s
}

type DescribeNetworkAclAttributesRequest struct {
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DescribeNetworkAclAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesRequest) SetNetworkAclId(v string) *DescribeNetworkAclAttributesRequest {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclAttributesRequest) SetRegionId(v string) *DescribeNetworkAclAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkAclAttributesRequest) SetClientToken(v string) *DescribeNetworkAclAttributesRequest {
	s.ClientToken = &v
	return s
}

type DescribeNetworkAclAttributesResponse struct {
	RequestId           *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NetworkAclAttribute *DescribeNetworkAclAttributesResponseNetworkAclAttribute `json:"NetworkAclAttribute,omitempty" xml:"NetworkAclAttribute,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNetworkAclAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponse) SetRequestId(v string) *DescribeNetworkAclAttributesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponse) SetNetworkAclAttribute(v *DescribeNetworkAclAttributesResponseNetworkAclAttribute) *DescribeNetworkAclAttributesResponse {
	s.NetworkAclAttribute = v
	return s
}

type DescribeNetworkAclAttributesResponseNetworkAclAttribute struct {
	NetworkAclId      *string                                                                   `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId          *string                                                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NetworkAclName    *string                                                                   `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty" require:"true"`
	Description       *string                                                                   `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	VpcId             *string                                                                   `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	CreationTime      *string                                                                   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Status            *string                                                                   `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	OwnerId           *int64                                                                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	IngressAclEntries *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntries `json:"IngressAclEntries,omitempty" xml:"IngressAclEntries,omitempty" require:"true" type:"Struct"`
	EgressAclEntries  *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntries  `json:"EgressAclEntries,omitempty" xml:"EgressAclEntries,omitempty" require:"true" type:"Struct"`
	Resources         *DescribeNetworkAclAttributesResponseNetworkAclAttributeResources         `json:"Resources,omitempty" xml:"Resources,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttribute) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetNetworkAclId(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetRegionId(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetNetworkAclName(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetDescription(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetVpcId(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetCreationTime(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetStatus(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.Status = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetOwnerId(v int64) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetIngressAclEntries(v *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntries) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.IngressAclEntries = v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetEgressAclEntries(v *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntries) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.EgressAclEntries = v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttribute) SetResources(v *DescribeNetworkAclAttributesResponseNetworkAclAttributeResources) *DescribeNetworkAclAttributesResponseNetworkAclAttribute {
	s.Resources = v
	return s
}

type DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntries struct {
	IngressAclEntry []*DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry `json:"IngressAclEntry,omitempty" xml:"IngressAclEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntries) SetIngressAclEntry(v []*DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntries {
	s.IngressAclEntry = v
	return s
}

type DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry struct {
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	SourceCidrIp        *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetNetworkAclEntryId(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetPolicy(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetProtocol(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetSourceCidrIp(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetPort(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Port = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetEntryType(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.EntryType = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetNetworkAclEntryName(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.NetworkAclEntryName = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetDescription(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Description = &v
	return s
}

type DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntries struct {
	EgressAclEntry []*DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry `json:"EgressAclEntry,omitempty" xml:"EgressAclEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntries) SetEgressAclEntry(v []*DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntries {
	s.EgressAclEntry = v
	return s
}

type DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry struct {
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	DestinationCidrIp   *string `json:"DestinationCidrIp,omitempty" xml:"DestinationCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetNetworkAclEntryId(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetPolicy(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetProtocol(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetDestinationCidrIp(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.DestinationCidrIp = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetPort(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Port = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetEntryType(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.EntryType = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetDescription(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetNetworkAclEntryName(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.NetworkAclEntryName = &v
	return s
}

type DescribeNetworkAclAttributesResponseNetworkAclAttributeResources struct {
	Resource []*DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeResources) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeResources) SetResource(v []*DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource) *DescribeNetworkAclAttributesResponseNetworkAclAttributeResources {
	s.Resource = v
	return s
}

type DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource) SetResourceId(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource {
	s.ResourceId = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource) SetResourceType(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource {
	s.ResourceType = &v
	return s
}

func (s *DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource) SetStatus(v string) *DescribeNetworkAclAttributesResponseNetworkAclAttributeResourcesResource {
	s.Status = &v
	return s
}

type DeleteNetworkAclRequest struct {
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclRequest) SetNetworkAclId(v string) *DeleteNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

func (s *DeleteNetworkAclRequest) SetRegionId(v string) *DeleteNetworkAclRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNetworkAclRequest) SetClientToken(v string) *DeleteNetworkAclRequest {
	s.ClientToken = &v
	return s
}

type DeleteNetworkAclResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclResponse) SetRequestId(v string) *DeleteNetworkAclResponse {
	s.RequestId = &v
	return s
}

type CreateNetworkAclRequest struct {
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclRequest) SetVpcId(v string) *CreateNetworkAclRequest {
	s.VpcId = &v
	return s
}

func (s *CreateNetworkAclRequest) SetNetworkAclName(v string) *CreateNetworkAclRequest {
	s.NetworkAclName = &v
	return s
}

func (s *CreateNetworkAclRequest) SetDescription(v string) *CreateNetworkAclRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkAclRequest) SetRegionId(v string) *CreateNetworkAclRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNetworkAclRequest) SetClientToken(v string) *CreateNetworkAclRequest {
	s.ClientToken = &v
	return s
}

type CreateNetworkAclResponse struct {
	RequestId           *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NetworkAclId        *string                                      `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	NetworkAclAttribute *CreateNetworkAclResponseNetworkAclAttribute `json:"NetworkAclAttribute,omitempty" xml:"NetworkAclAttribute,omitempty" require:"true" type:"Struct"`
}

func (s CreateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponse) SetRequestId(v string) *CreateNetworkAclResponse {
	s.RequestId = &v
	return s
}

func (s *CreateNetworkAclResponse) SetNetworkAclId(v string) *CreateNetworkAclResponse {
	s.NetworkAclId = &v
	return s
}

func (s *CreateNetworkAclResponse) SetNetworkAclAttribute(v *CreateNetworkAclResponseNetworkAclAttribute) *CreateNetworkAclResponse {
	s.NetworkAclAttribute = v
	return s
}

type CreateNetworkAclResponseNetworkAclAttribute struct {
	NetworkAclId      *string                                                       `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId          *string                                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NetworkAclName    *string                                                       `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty" require:"true"`
	Description       *string                                                       `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	VpcId             *string                                                       `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	CreationTime      *string                                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Status            *string                                                       `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IngressAclEntries *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntries `json:"IngressAclEntries,omitempty" xml:"IngressAclEntries,omitempty" require:"true" type:"Struct"`
	EgressAclEntries  *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntries  `json:"EgressAclEntries,omitempty" xml:"EgressAclEntries,omitempty" require:"true" type:"Struct"`
	Resources         *CreateNetworkAclResponseNetworkAclAttributeResources         `json:"Resources,omitempty" xml:"Resources,omitempty" require:"true" type:"Struct"`
}

func (s CreateNetworkAclResponseNetworkAclAttribute) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseNetworkAclAttribute) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetNetworkAclId(v string) *CreateNetworkAclResponseNetworkAclAttribute {
	s.NetworkAclId = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetRegionId(v string) *CreateNetworkAclResponseNetworkAclAttribute {
	s.RegionId = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetNetworkAclName(v string) *CreateNetworkAclResponseNetworkAclAttribute {
	s.NetworkAclName = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetDescription(v string) *CreateNetworkAclResponseNetworkAclAttribute {
	s.Description = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetVpcId(v string) *CreateNetworkAclResponseNetworkAclAttribute {
	s.VpcId = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetCreationTime(v string) *CreateNetworkAclResponseNetworkAclAttribute {
	s.CreationTime = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetStatus(v string) *CreateNetworkAclResponseNetworkAclAttribute {
	s.Status = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetIngressAclEntries(v *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntries) *CreateNetworkAclResponseNetworkAclAttribute {
	s.IngressAclEntries = v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetEgressAclEntries(v *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntries) *CreateNetworkAclResponseNetworkAclAttribute {
	s.EgressAclEntries = v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttribute) SetResources(v *CreateNetworkAclResponseNetworkAclAttributeResources) *CreateNetworkAclResponseNetworkAclAttribute {
	s.Resources = v
	return s
}

type CreateNetworkAclResponseNetworkAclAttributeIngressAclEntries struct {
	IngressAclEntry []*CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry `json:"IngressAclEntry,omitempty" xml:"IngressAclEntry,omitempty" require:"true" type:"Repeated"`
}

func (s CreateNetworkAclResponseNetworkAclAttributeIngressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseNetworkAclAttributeIngressAclEntries) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntries) SetIngressAclEntry(v []*CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntries {
	s.IngressAclEntry = v
	return s
}

type CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry struct {
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	SourceCidrIp        *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetNetworkAclEntryId(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetPolicy(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Policy = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetProtocol(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Protocol = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetSourceCidrIp(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.SourceCidrIp = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetPort(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Port = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetEntryType(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.EntryType = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetNetworkAclEntryName(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.NetworkAclEntryName = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry) SetDescription(v string) *CreateNetworkAclResponseNetworkAclAttributeIngressAclEntriesIngressAclEntry {
	s.Description = &v
	return s
}

type CreateNetworkAclResponseNetworkAclAttributeEgressAclEntries struct {
	EgressAclEntry []*CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry `json:"EgressAclEntry,omitempty" xml:"EgressAclEntry,omitempty" require:"true" type:"Repeated"`
}

func (s CreateNetworkAclResponseNetworkAclAttributeEgressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseNetworkAclAttributeEgressAclEntries) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntries) SetEgressAclEntry(v []*CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntries {
	s.EgressAclEntry = v
	return s
}

type CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry struct {
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty" require:"true"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	DestinationCidrIp   *string `json:"DestinationCidrIp,omitempty" xml:"DestinationCidrIp,omitempty" require:"true"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	EntryType           *string `json:"EntryType,omitempty" xml:"EntryType,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty" require:"true"`
}

func (s CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetNetworkAclEntryId(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetPolicy(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Policy = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetProtocol(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Protocol = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetDestinationCidrIp(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.DestinationCidrIp = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetPort(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Port = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetEntryType(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.EntryType = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetDescription(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.Description = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry) SetNetworkAclEntryName(v string) *CreateNetworkAclResponseNetworkAclAttributeEgressAclEntriesEgressAclEntry {
	s.NetworkAclEntryName = &v
	return s
}

type CreateNetworkAclResponseNetworkAclAttributeResources struct {
	Resource []*CreateNetworkAclResponseNetworkAclAttributeResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" require:"true" type:"Repeated"`
}

func (s CreateNetworkAclResponseNetworkAclAttributeResources) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseNetworkAclAttributeResources) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseNetworkAclAttributeResources) SetResource(v []*CreateNetworkAclResponseNetworkAclAttributeResourcesResource) *CreateNetworkAclResponseNetworkAclAttributeResources {
	s.Resource = v
	return s
}

type CreateNetworkAclResponseNetworkAclAttributeResourcesResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s CreateNetworkAclResponseNetworkAclAttributeResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseNetworkAclAttributeResourcesResource) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseNetworkAclAttributeResourcesResource) SetResourceId(v string) *CreateNetworkAclResponseNetworkAclAttributeResourcesResource {
	s.ResourceId = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeResourcesResource) SetResourceType(v string) *CreateNetworkAclResponseNetworkAclAttributeResourcesResource {
	s.ResourceType = &v
	return s
}

func (s *CreateNetworkAclResponseNetworkAclAttributeResourcesResource) SetStatus(v string) *CreateNetworkAclResponseNetworkAclAttributeResourcesResource {
	s.Status = &v
	return s
}

type CopyNetworkAclEntriesRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NetworkAclId       *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	SourceNetworkAclId *string `json:"SourceNetworkAclId,omitempty" xml:"SourceNetworkAclId,omitempty" require:"true"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CopyNetworkAclEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyNetworkAclEntriesRequest) GoString() string {
	return s.String()
}

func (s *CopyNetworkAclEntriesRequest) SetRegionId(v string) *CopyNetworkAclEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *CopyNetworkAclEntriesRequest) SetNetworkAclId(v string) *CopyNetworkAclEntriesRequest {
	s.NetworkAclId = &v
	return s
}

func (s *CopyNetworkAclEntriesRequest) SetSourceNetworkAclId(v string) *CopyNetworkAclEntriesRequest {
	s.SourceNetworkAclId = &v
	return s
}

func (s *CopyNetworkAclEntriesRequest) SetClientToken(v string) *CopyNetworkAclEntriesRequest {
	s.ClientToken = &v
	return s
}

type CopyNetworkAclEntriesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CopyNetworkAclEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyNetworkAclEntriesResponse) GoString() string {
	return s.String()
}

func (s *CopyNetworkAclEntriesResponse) SetRequestId(v string) *CopyNetworkAclEntriesResponse {
	s.RequestId = &v
	return s
}

type AssociateNetworkAclRequest struct {
	Resource     []*AssociateNetworkAclRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
	NetworkAclId *string                               `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	RegionId     *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string                               `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AssociateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *AssociateNetworkAclRequest) SetResource(v []*AssociateNetworkAclRequestResource) *AssociateNetworkAclRequest {
	s.Resource = v
	return s
}

func (s *AssociateNetworkAclRequest) SetNetworkAclId(v string) *AssociateNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

func (s *AssociateNetworkAclRequest) SetRegionId(v string) *AssociateNetworkAclRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateNetworkAclRequest) SetClientToken(v string) *AssociateNetworkAclRequest {
	s.ClientToken = &v
	return s
}

type AssociateNetworkAclRequestResource struct {
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
}

func (s AssociateNetworkAclRequestResource) String() string {
	return tea.Prettify(s)
}

func (s AssociateNetworkAclRequestResource) GoString() string {
	return s.String()
}

func (s *AssociateNetworkAclRequestResource) SetResourceType(v string) *AssociateNetworkAclRequestResource {
	s.ResourceType = &v
	return s
}

func (s *AssociateNetworkAclRequestResource) SetResourceId(v string) *AssociateNetworkAclRequestResource {
	s.ResourceId = &v
	return s
}

type AssociateNetworkAclResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AssociateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *AssociateNetworkAclResponse) SetRequestId(v string) *AssociateNetworkAclResponse {
	s.RequestId = &v
	return s
}

type ModifyCommonBandwidthPackageIpBandwidthRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	EipId              *string `json:"EipId,omitempty" xml:"EipId,omitempty" require:"true"`
	Bandwidth          *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
}

func (s ModifyCommonBandwidthPackageIpBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackageIpBandwidthRequest) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackageIpBandwidthRequest) SetRegionId(v string) *ModifyCommonBandwidthPackageIpBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCommonBandwidthPackageIpBandwidthRequest) SetBandwidthPackageId(v string) *ModifyCommonBandwidthPackageIpBandwidthRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyCommonBandwidthPackageIpBandwidthRequest) SetEipId(v string) *ModifyCommonBandwidthPackageIpBandwidthRequest {
	s.EipId = &v
	return s
}

func (s *ModifyCommonBandwidthPackageIpBandwidthRequest) SetBandwidth(v string) *ModifyCommonBandwidthPackageIpBandwidthRequest {
	s.Bandwidth = &v
	return s
}

type ModifyCommonBandwidthPackageIpBandwidthResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyCommonBandwidthPackageIpBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackageIpBandwidthResponse) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackageIpBandwidthResponse) SetRequestId(v string) *ModifyCommonBandwidthPackageIpBandwidthResponse {
	s.RequestId = &v
	return s
}

type CancelCommonBandwidthPackageIpBandwidthRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	EipId              *string `json:"EipId,omitempty" xml:"EipId,omitempty" require:"true"`
}

func (s CancelCommonBandwidthPackageIpBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelCommonBandwidthPackageIpBandwidthRequest) GoString() string {
	return s.String()
}

func (s *CancelCommonBandwidthPackageIpBandwidthRequest) SetRegionId(v string) *CancelCommonBandwidthPackageIpBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *CancelCommonBandwidthPackageIpBandwidthRequest) SetBandwidthPackageId(v string) *CancelCommonBandwidthPackageIpBandwidthRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *CancelCommonBandwidthPackageIpBandwidthRequest) SetEipId(v string) *CancelCommonBandwidthPackageIpBandwidthRequest {
	s.EipId = &v
	return s
}

type CancelCommonBandwidthPackageIpBandwidthResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CancelCommonBandwidthPackageIpBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelCommonBandwidthPackageIpBandwidthResponse) GoString() string {
	return s.String()
}

func (s *CancelCommonBandwidthPackageIpBandwidthResponse) SetRequestId(v string) *CancelCommonBandwidthPackageIpBandwidthResponse {
	s.RequestId = &v
	return s
}

type CreateVpnPbrRouteEntryRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	RouteSource  *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty" require:"true"`
	RouteDest    *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop      *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight       *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	PublishVpc   *bool   `json:"PublishVpc,omitempty" xml:"PublishVpc,omitempty" require:"true"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OverlayMode  *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty"`
}

func (s CreateVpnPbrRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnPbrRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateVpnPbrRouteEntryRequest) SetRegionId(v string) *CreateVpnPbrRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetClientToken(v string) *CreateVpnPbrRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetVpnGatewayId(v string) *CreateVpnPbrRouteEntryRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetRouteSource(v string) *CreateVpnPbrRouteEntryRequest {
	s.RouteSource = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetRouteDest(v string) *CreateVpnPbrRouteEntryRequest {
	s.RouteDest = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetNextHop(v string) *CreateVpnPbrRouteEntryRequest {
	s.NextHop = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetWeight(v int) *CreateVpnPbrRouteEntryRequest {
	s.Weight = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetPublishVpc(v bool) *CreateVpnPbrRouteEntryRequest {
	s.PublishVpc = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetDescription(v string) *CreateVpnPbrRouteEntryRequest {
	s.Description = &v
	return s
}

func (s *CreateVpnPbrRouteEntryRequest) SetOverlayMode(v string) *CreateVpnPbrRouteEntryRequest {
	s.OverlayMode = &v
	return s
}

type CreateVpnPbrRouteEntryResponse struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnInstanceId *string `json:"VpnInstanceId,omitempty" xml:"VpnInstanceId,omitempty" require:"true"`
	RouteSource   *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty" require:"true"`
	RouteDest     *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop       *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight        *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	OverlayMode   *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty" require:"true"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	State         *string `json:"State,omitempty" xml:"State,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
}

func (s CreateVpnPbrRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnPbrRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateVpnPbrRouteEntryResponse) SetRequestId(v string) *CreateVpnPbrRouteEntryResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetVpnInstanceId(v string) *CreateVpnPbrRouteEntryResponse {
	s.VpnInstanceId = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetRouteSource(v string) *CreateVpnPbrRouteEntryResponse {
	s.RouteSource = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetRouteDest(v string) *CreateVpnPbrRouteEntryResponse {
	s.RouteDest = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetNextHop(v string) *CreateVpnPbrRouteEntryResponse {
	s.NextHop = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetWeight(v int) *CreateVpnPbrRouteEntryResponse {
	s.Weight = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetOverlayMode(v string) *CreateVpnPbrRouteEntryResponse {
	s.OverlayMode = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetDescription(v string) *CreateVpnPbrRouteEntryResponse {
	s.Description = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetState(v string) *CreateVpnPbrRouteEntryResponse {
	s.State = &v
	return s
}

func (s *CreateVpnPbrRouteEntryResponse) SetCreateTime(v int64) *CreateVpnPbrRouteEntryResponse {
	s.CreateTime = &v
	return s
}

type CreateVpnRouteEntryRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	RouteDest    *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop      *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight       *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	PublishVpc   *bool   `json:"PublishVpc,omitempty" xml:"PublishVpc,omitempty" require:"true"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OverlayMode  *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty"`
}

func (s CreateVpnRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateVpnRouteEntryRequest) SetRegionId(v string) *CreateVpnRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetClientToken(v string) *CreateVpnRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetVpnGatewayId(v string) *CreateVpnRouteEntryRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetRouteDest(v string) *CreateVpnRouteEntryRequest {
	s.RouteDest = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetNextHop(v string) *CreateVpnRouteEntryRequest {
	s.NextHop = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetWeight(v int) *CreateVpnRouteEntryRequest {
	s.Weight = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetPublishVpc(v bool) *CreateVpnRouteEntryRequest {
	s.PublishVpc = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetDescription(v string) *CreateVpnRouteEntryRequest {
	s.Description = &v
	return s
}

func (s *CreateVpnRouteEntryRequest) SetOverlayMode(v string) *CreateVpnRouteEntryRequest {
	s.OverlayMode = &v
	return s
}

type CreateVpnRouteEntryResponse struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnInstanceId *string `json:"VpnInstanceId,omitempty" xml:"VpnInstanceId,omitempty" require:"true"`
	RouteDest     *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop       *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight        *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	OverlayMode   *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty" require:"true"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	State         *string `json:"State,omitempty" xml:"State,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
}

func (s CreateVpnRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateVpnRouteEntryResponse) SetRequestId(v string) *CreateVpnRouteEntryResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetVpnInstanceId(v string) *CreateVpnRouteEntryResponse {
	s.VpnInstanceId = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetRouteDest(v string) *CreateVpnRouteEntryResponse {
	s.RouteDest = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetNextHop(v string) *CreateVpnRouteEntryResponse {
	s.NextHop = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetWeight(v int) *CreateVpnRouteEntryResponse {
	s.Weight = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetOverlayMode(v string) *CreateVpnRouteEntryResponse {
	s.OverlayMode = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetDescription(v string) *CreateVpnRouteEntryResponse {
	s.Description = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetState(v string) *CreateVpnRouteEntryResponse {
	s.State = &v
	return s
}

func (s *CreateVpnRouteEntryResponse) SetCreateTime(v int64) *CreateVpnRouteEntryResponse {
	s.CreateTime = &v
	return s
}

type DeleteVpnPbrRouteEntryRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	RouteSource  *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty" require:"true"`
	RouteDest    *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop      *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight       *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	OverlayMode  *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty"`
}

func (s DeleteVpnPbrRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnPbrRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpnPbrRouteEntryRequest) SetRegionId(v string) *DeleteVpnPbrRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVpnPbrRouteEntryRequest) SetClientToken(v string) *DeleteVpnPbrRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteVpnPbrRouteEntryRequest) SetVpnGatewayId(v string) *DeleteVpnPbrRouteEntryRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DeleteVpnPbrRouteEntryRequest) SetRouteSource(v string) *DeleteVpnPbrRouteEntryRequest {
	s.RouteSource = &v
	return s
}

func (s *DeleteVpnPbrRouteEntryRequest) SetRouteDest(v string) *DeleteVpnPbrRouteEntryRequest {
	s.RouteDest = &v
	return s
}

func (s *DeleteVpnPbrRouteEntryRequest) SetNextHop(v string) *DeleteVpnPbrRouteEntryRequest {
	s.NextHop = &v
	return s
}

func (s *DeleteVpnPbrRouteEntryRequest) SetWeight(v int) *DeleteVpnPbrRouteEntryRequest {
	s.Weight = &v
	return s
}

func (s *DeleteVpnPbrRouteEntryRequest) SetOverlayMode(v string) *DeleteVpnPbrRouteEntryRequest {
	s.OverlayMode = &v
	return s
}

type DeleteVpnPbrRouteEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteVpnPbrRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnPbrRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpnPbrRouteEntryResponse) SetRequestId(v string) *DeleteVpnPbrRouteEntryResponse {
	s.RequestId = &v
	return s
}

type DeleteVpnRouteEntryRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	RouteDest    *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop      *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight       *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	OverlayMode  *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty"`
}

func (s DeleteVpnRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpnRouteEntryRequest) SetRegionId(v string) *DeleteVpnRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVpnRouteEntryRequest) SetClientToken(v string) *DeleteVpnRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteVpnRouteEntryRequest) SetVpnGatewayId(v string) *DeleteVpnRouteEntryRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DeleteVpnRouteEntryRequest) SetRouteDest(v string) *DeleteVpnRouteEntryRequest {
	s.RouteDest = &v
	return s
}

func (s *DeleteVpnRouteEntryRequest) SetNextHop(v string) *DeleteVpnRouteEntryRequest {
	s.NextHop = &v
	return s
}

func (s *DeleteVpnRouteEntryRequest) SetWeight(v int) *DeleteVpnRouteEntryRequest {
	s.Weight = &v
	return s
}

func (s *DeleteVpnRouteEntryRequest) SetOverlayMode(v string) *DeleteVpnRouteEntryRequest {
	s.OverlayMode = &v
	return s
}

type DeleteVpnRouteEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteVpnRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpnRouteEntryResponse) SetRequestId(v string) *DeleteVpnRouteEntryResponse {
	s.RequestId = &v
	return s
}

type DescribeVpnRouteEntriesRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnGatewayId   *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	PageNumber     *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RouteEntryType *string `json:"RouteEntryType,omitempty" xml:"RouteEntryType,omitempty"`
}

func (s DescribeVpnRouteEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnRouteEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpnRouteEntriesRequest) SetRegionId(v string) *DescribeVpnRouteEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpnRouteEntriesRequest) SetVpnGatewayId(v string) *DescribeVpnRouteEntriesRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnRouteEntriesRequest) SetPageNumber(v int) *DescribeVpnRouteEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnRouteEntriesRequest) SetPageSize(v int) *DescribeVpnRouteEntriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnRouteEntriesRequest) SetRouteEntryType(v string) *DescribeVpnRouteEntriesRequest {
	s.RouteEntryType = &v
	return s
}

type DescribeVpnRouteEntriesResponse struct {
	RequestId       *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount      *int                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber      *int                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize        *int                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	VpnRouteEntries *DescribeVpnRouteEntriesResponseVpnRouteEntries `json:"VpnRouteEntries,omitempty" xml:"VpnRouteEntries,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnRouteEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnRouteEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpnRouteEntriesResponse) SetRequestId(v string) *DescribeVpnRouteEntriesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponse) SetTotalCount(v int) *DescribeVpnRouteEntriesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponse) SetPageNumber(v int) *DescribeVpnRouteEntriesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponse) SetPageSize(v int) *DescribeVpnRouteEntriesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponse) SetVpnRouteEntries(v *DescribeVpnRouteEntriesResponseVpnRouteEntries) *DescribeVpnRouteEntriesResponse {
	s.VpnRouteEntries = v
	return s
}

type DescribeVpnRouteEntriesResponseVpnRouteEntries struct {
	VpnRouteEntry []*DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry `json:"VpnRouteEntry,omitempty" xml:"VpnRouteEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpnRouteEntriesResponseVpnRouteEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnRouteEntriesResponseVpnRouteEntries) GoString() string {
	return s.String()
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntries) SetVpnRouteEntry(v []*DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) *DescribeVpnRouteEntriesResponseVpnRouteEntries {
	s.VpnRouteEntry = v
	return s
}

type DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry struct {
	VpnInstanceId  *string `json:"VpnInstanceId,omitempty" xml:"VpnInstanceId,omitempty" require:"true"`
	RouteDest      *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop        *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight         *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	State          *string `json:"State,omitempty" xml:"State,omitempty" require:"true"`
	AsPath         *string `json:"AsPath,omitempty" xml:"AsPath,omitempty" require:"true"`
	Community      *string `json:"Community,omitempty" xml:"Community,omitempty" require:"true"`
	Source         *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	RouteEntryType *string `json:"RouteEntryType,omitempty" xml:"RouteEntryType,omitempty" require:"true"`
}

func (s DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) GoString() string {
	return s.String()
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetVpnInstanceId(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.VpnInstanceId = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetRouteDest(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.RouteDest = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetNextHop(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.NextHop = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetWeight(v int) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.Weight = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetCreateTime(v int64) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.CreateTime = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetState(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.State = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetAsPath(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.AsPath = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetCommunity(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.Community = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetSource(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.Source = &v
	return s
}

func (s *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry) SetRouteEntryType(v string) *DescribeVpnRouteEntriesResponseVpnRouteEntriesVpnRouteEntry {
	s.RouteEntryType = &v
	return s
}

type DescribeVpnPbrRouteEntriesRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeVpnPbrRouteEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnPbrRouteEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpnPbrRouteEntriesRequest) SetRegionId(v string) *DescribeVpnPbrRouteEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesRequest) SetVpnGatewayId(v string) *DescribeVpnPbrRouteEntriesRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesRequest) SetPageNumber(v int) *DescribeVpnPbrRouteEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesRequest) SetPageSize(v int) *DescribeVpnPbrRouteEntriesRequest {
	s.PageSize = &v
	return s
}

type DescribeVpnPbrRouteEntriesResponse struct {
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount         *int                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber         *int                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize           *int                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	VpnPbrRouteEntries *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntries `json:"VpnPbrRouteEntries,omitempty" xml:"VpnPbrRouteEntries,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnPbrRouteEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnPbrRouteEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpnPbrRouteEntriesResponse) SetRequestId(v string) *DescribeVpnPbrRouteEntriesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponse) SetTotalCount(v int) *DescribeVpnPbrRouteEntriesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponse) SetPageNumber(v int) *DescribeVpnPbrRouteEntriesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponse) SetPageSize(v int) *DescribeVpnPbrRouteEntriesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponse) SetVpnPbrRouteEntries(v *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntries) *DescribeVpnPbrRouteEntriesResponse {
	s.VpnPbrRouteEntries = v
	return s
}

type DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntries struct {
	VpnPbrRouteEntry []*DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry `json:"VpnPbrRouteEntry,omitempty" xml:"VpnPbrRouteEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntries) GoString() string {
	return s.String()
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntries) SetVpnPbrRouteEntry(v []*DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntries {
	s.VpnPbrRouteEntry = v
	return s
}

type DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry struct {
	VpnInstanceId *string `json:"VpnInstanceId,omitempty" xml:"VpnInstanceId,omitempty" require:"true"`
	RouteSource   *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty" require:"true"`
	RouteDest     *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop       *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight        *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	State         *string `json:"State,omitempty" xml:"State,omitempty" require:"true"`
}

func (s DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) GoString() string {
	return s.String()
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) SetVpnInstanceId(v string) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry {
	s.VpnInstanceId = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) SetRouteSource(v string) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry {
	s.RouteSource = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) SetRouteDest(v string) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry {
	s.RouteDest = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) SetNextHop(v string) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry {
	s.NextHop = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) SetWeight(v int) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry {
	s.Weight = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) SetCreateTime(v int64) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry {
	s.CreateTime = &v
	return s
}

func (s *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry) SetState(v string) *DescribeVpnPbrRouteEntriesResponseVpnPbrRouteEntriesVpnPbrRouteEntry {
	s.State = &v
	return s
}

type PublishVpnRouteEntryRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	RouteDest    *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop      *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	RouteType    *string `json:"RouteType,omitempty" xml:"RouteType,omitempty" require:"true"`
	PublishVpc   *bool   `json:"PublishVpc,omitempty" xml:"PublishVpc,omitempty" require:"true"`
}

func (s PublishVpnRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishVpnRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *PublishVpnRouteEntryRequest) SetRegionId(v string) *PublishVpnRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *PublishVpnRouteEntryRequest) SetClientToken(v string) *PublishVpnRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *PublishVpnRouteEntryRequest) SetVpnGatewayId(v string) *PublishVpnRouteEntryRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *PublishVpnRouteEntryRequest) SetRouteDest(v string) *PublishVpnRouteEntryRequest {
	s.RouteDest = &v
	return s
}

func (s *PublishVpnRouteEntryRequest) SetNextHop(v string) *PublishVpnRouteEntryRequest {
	s.NextHop = &v
	return s
}

func (s *PublishVpnRouteEntryRequest) SetRouteType(v string) *PublishVpnRouteEntryRequest {
	s.RouteType = &v
	return s
}

func (s *PublishVpnRouteEntryRequest) SetPublishVpc(v bool) *PublishVpnRouteEntryRequest {
	s.PublishVpc = &v
	return s
}

type PublishVpnRouteEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s PublishVpnRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishVpnRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *PublishVpnRouteEntryResponse) SetRequestId(v string) *PublishVpnRouteEntryResponse {
	s.RequestId = &v
	return s
}

type ModifyVpnRouteEntryWeightRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	RouteDest    *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop      *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight       *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	NewWeight    *int    `json:"NewWeight,omitempty" xml:"NewWeight,omitempty" require:"true"`
	OverlayMode  *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty"`
}

func (s ModifyVpnRouteEntryWeightRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnRouteEntryWeightRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpnRouteEntryWeightRequest) SetRegionId(v string) *ModifyVpnRouteEntryWeightRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVpnRouteEntryWeightRequest) SetClientToken(v string) *ModifyVpnRouteEntryWeightRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyVpnRouteEntryWeightRequest) SetVpnGatewayId(v string) *ModifyVpnRouteEntryWeightRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *ModifyVpnRouteEntryWeightRequest) SetRouteDest(v string) *ModifyVpnRouteEntryWeightRequest {
	s.RouteDest = &v
	return s
}

func (s *ModifyVpnRouteEntryWeightRequest) SetNextHop(v string) *ModifyVpnRouteEntryWeightRequest {
	s.NextHop = &v
	return s
}

func (s *ModifyVpnRouteEntryWeightRequest) SetWeight(v int) *ModifyVpnRouteEntryWeightRequest {
	s.Weight = &v
	return s
}

func (s *ModifyVpnRouteEntryWeightRequest) SetNewWeight(v int) *ModifyVpnRouteEntryWeightRequest {
	s.NewWeight = &v
	return s
}

func (s *ModifyVpnRouteEntryWeightRequest) SetOverlayMode(v string) *ModifyVpnRouteEntryWeightRequest {
	s.OverlayMode = &v
	return s
}

type ModifyVpnRouteEntryWeightResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyVpnRouteEntryWeightResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnRouteEntryWeightResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpnRouteEntryWeightResponse) SetRequestId(v string) *ModifyVpnRouteEntryWeightResponse {
	s.RequestId = &v
	return s
}

type ModifyVpnPbrRouteEntryWeightRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	RouteSource  *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty" require:"true"`
	RouteDest    *string `json:"RouteDest,omitempty" xml:"RouteDest,omitempty" require:"true"`
	NextHop      *string `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true"`
	Weight       *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	NewWeight    *int    `json:"NewWeight,omitempty" xml:"NewWeight,omitempty" require:"true"`
	OverlayMode  *string `json:"OverlayMode,omitempty" xml:"OverlayMode,omitempty"`
}

func (s ModifyVpnPbrRouteEntryWeightRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnPbrRouteEntryWeightRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetRegionId(v string) *ModifyVpnPbrRouteEntryWeightRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetClientToken(v string) *ModifyVpnPbrRouteEntryWeightRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetVpnGatewayId(v string) *ModifyVpnPbrRouteEntryWeightRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetRouteSource(v string) *ModifyVpnPbrRouteEntryWeightRequest {
	s.RouteSource = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetRouteDest(v string) *ModifyVpnPbrRouteEntryWeightRequest {
	s.RouteDest = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetNextHop(v string) *ModifyVpnPbrRouteEntryWeightRequest {
	s.NextHop = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetWeight(v int) *ModifyVpnPbrRouteEntryWeightRequest {
	s.Weight = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetNewWeight(v int) *ModifyVpnPbrRouteEntryWeightRequest {
	s.NewWeight = &v
	return s
}

func (s *ModifyVpnPbrRouteEntryWeightRequest) SetOverlayMode(v string) *ModifyVpnPbrRouteEntryWeightRequest {
	s.OverlayMode = &v
	return s
}

type ModifyVpnPbrRouteEntryWeightResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyVpnPbrRouteEntryWeightResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnPbrRouteEntryWeightResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpnPbrRouteEntryWeightResponse) SetRequestId(v string) *ModifyVpnPbrRouteEntryWeightResponse {
	s.RequestId = &v
	return s
}

type DescribePhysicalConnectionLOARequest struct {
	// description: The ID of the region where the leased line is deployed. ;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: Optional. The token used for client authentication. ;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// description: The instance ID of the physical connection interface. ;
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s DescribePhysicalConnectionLOARequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionLOARequest) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionLOARequest) SetRegionId(v string) *DescribePhysicalConnectionLOARequest {
	s.RegionId = &v
	return s
}

func (s *DescribePhysicalConnectionLOARequest) SetClientToken(v string) *DescribePhysicalConnectionLOARequest {
	s.ClientToken = &v
	return s
}

func (s *DescribePhysicalConnectionLOARequest) SetInstanceId(v string) *DescribePhysicalConnectionLOARequest {
	s.InstanceId = &v
	return s
}

type DescribePhysicalConnectionLOAResponse struct {
	// description: The ID of the request. ;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: The LOA information of the physical connection.
	PhysicalConnectionLOAType *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType `json:"PhysicalConnectionLOAType,omitempty" xml:"PhysicalConnectionLOAType,omitempty" require:"true" type:"Struct"`
}

func (s DescribePhysicalConnectionLOAResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionLOAResponse) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionLOAResponse) SetRequestId(v string) *DescribePhysicalConnectionLOAResponse {
	s.RequestId = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponse) SetPhysicalConnectionLOAType(v *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) *DescribePhysicalConnectionLOAResponse {
	s.PhysicalConnectionLOAType = v
	return s
}

type DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType struct {
	// description: The instance ID of the physical connection interface. ;
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	// description: The name of the company that requires the leased line. ;
	CompanyName *string `json:"CompanyName,omitempty" xml:"CompanyName,omitempty" require:"true"`
	// description: The company name that you set when you registered your account.;
	CompanyLocalizedName *string `json:"CompanyLocalizedName,omitempty" xml:"CompanyLocalizedName,omitempty" require:"true"`
	// description: The type of the physical connection.Valid values:* MSTP* Other * SDH* MPLSVPN * FIBRE;
	LineType *string `json:"LineType,omitempty" xml:"LineType,omitempty" require:"true"`
	// description: The number of leased line.;
	LineCode *string `json:"LineCode,omitempty" xml:"LineCode,omitempty" require:"true"`
	// description: The label numbers of the cables at the installation site.;
	LineLabel *string `json:"LineLabel,omitempty" xml:"LineLabel,omitempty" require:"true"`
	// description: The time when the the data center cable installation technician or representative will go to the installation site.;
	ConstructionTime *string `json:"ConstructionTime,omitempty" xml:"ConstructionTime,omitempty" require:"true"`
	// description: The status of the physical connection interface. ;
	Status *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	// description: The URL to use to download the LOA file.;
	LoaUrl *string `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty" require:"true"`
	// description: The name of the data center cable installation company. ;
	SI *string `json:"SI,omitempty" xml:"SI,omitempty" require:"true"`
	// description: The information about the data center cable installation technician or representative.
	PMInfo *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfo `json:"PMInfo,omitempty" xml:"PMInfo,omitempty" require:"true" type:"Struct"`
}

func (s DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetInstanceId(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.InstanceId = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetCompanyName(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.CompanyName = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetCompanyLocalizedName(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.CompanyLocalizedName = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetLineType(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.LineType = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetLineCode(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.LineCode = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetLineLabel(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.LineLabel = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetConstructionTime(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.ConstructionTime = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetStatus(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.Status = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetLoaUrl(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.LoaUrl = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetSI(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.SI = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType) SetPMInfo(v *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfo) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOAType {
	s.PMInfo = v
	return s
}

type DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfo struct {
	PMInfo []*DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo `json:"PMInfo,omitempty" xml:"PMInfo,omitempty" require:"true" type:"Repeated"`
}

func (s DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfo) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfo) SetPMInfo(v []*DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfo {
	s.PMInfo = v
	return s
}

type DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo struct {
	// description: The name of the data center cable installation technician or representative. ;
	PMName *string `json:"PMName,omitempty" xml:"PMName,omitempty" require:"true"`
	// description: The contact information of the data center cable installation technician or representative. ;
	PMContactInfo *string `json:"PMContactInfo,omitempty" xml:"PMContactInfo,omitempty" require:"true"`
	// description: The type of certificate or licence held by the data center cable installation technician or representative. ;
	PMCertificateType *string `json:"PMCertificateType,omitempty" xml:"PMCertificateType,omitempty" require:"true"`
	// description: The certificate or licence number of the data center cable installation technician or representative.;
	PMCertificateNo *string `json:"PMCertificateNo,omitempty" xml:"PMCertificateNo,omitempty" require:"true"`
	// description: The gender of the data center cable installation technician or representative.;
	PMGender *string `json:"PMGender,omitempty" xml:"PMGender,omitempty" require:"true"`
}

func (s DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) SetPMName(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo {
	s.PMName = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) SetPMContactInfo(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo {
	s.PMContactInfo = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) SetPMCertificateType(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo {
	s.PMCertificateType = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) SetPMCertificateNo(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo {
	s.PMCertificateNo = &v
	return s
}

func (s *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo) SetPMGender(v string) *DescribePhysicalConnectionLOAResponsePhysicalConnectionLOATypePMInfoPMInfo {
	s.PMGender = &v
	return s
}

type CreatePhysicalConnectionSetupOrderRequest struct {
	// description: The ID of the region where the leased line is deployed. You can get the region ID by calling the DescribeRegions API.;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: The ID of the access point.;
	AccessPointId *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	// description: The service provider that provides the leased line. Valid values:* CT: China Telecom* CU: China Unicom* CM: China Mobile* CO: Other Chinese service providers* Equinix: Equinix* Other: Other service providers outside Mainland China;
	LineOperator *string `json:"LineOperator,omitempty" xml:"LineOperator,omitempty" require:"true"`
	// description: Optional. The type of the leased line connection port. Valid values:* **100Base-T**: 100M electrical ports* **1000Base-T **(default value): Gigabit electrical ports* **1000Base-LX**: 1000M single-mode optical ports (10 km)* **10GBase-T**: 10GE electrical ports* **10GBase-LR**: 10GE single-mode optical ports (10km) ;
	PortType *string `json:"PortType,omitempty" xml:"PortType,omitempty"`
	// description: The ID of the redundant physical connection. Its status must be **Allocated**,**Confirmed**or** Enabled**. ;
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId,omitempty" xml:"RedundantPhysicalConnectionId,omitempty"`
	// description: Optional. Indicates whether to pay the fee automatically.Valid values: **true | false**;
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// description: Optional. The token used for client authentication.;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreatePhysicalConnectionSetupOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionSetupOrderRequest) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionSetupOrderRequest) SetRegionId(v string) *CreatePhysicalConnectionSetupOrderRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderRequest) SetAccessPointId(v string) *CreatePhysicalConnectionSetupOrderRequest {
	s.AccessPointId = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderRequest) SetLineOperator(v string) *CreatePhysicalConnectionSetupOrderRequest {
	s.LineOperator = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderRequest) SetPortType(v string) *CreatePhysicalConnectionSetupOrderRequest {
	s.PortType = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderRequest) SetRedundantPhysicalConnectionId(v string) *CreatePhysicalConnectionSetupOrderRequest {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderRequest) SetAutoPay(v bool) *CreatePhysicalConnectionSetupOrderRequest {
	s.AutoPay = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderRequest) SetClientToken(v string) *CreatePhysicalConnectionSetupOrderRequest {
	s.ClientToken = &v
	return s
}

type CreatePhysicalConnectionSetupOrderResponse struct {
	// description: ;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: The ID of the order.;
	OrderId              *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
}

func (s CreatePhysicalConnectionSetupOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionSetupOrderResponse) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionSetupOrderResponse) SetRequestId(v string) *CreatePhysicalConnectionSetupOrderResponse {
	s.RequestId = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderResponse) SetOrderId(v string) *CreatePhysicalConnectionSetupOrderResponse {
	s.OrderId = &v
	return s
}

func (s *CreatePhysicalConnectionSetupOrderResponse) SetPhysicalConnectionId(v string) *CreatePhysicalConnectionSetupOrderResponse {
	s.PhysicalConnectionId = &v
	return s
}

type CreatePhysicalConnectionOccupancyOrderRequest struct {
	// description: The ID of the region where the leased line is deployed.;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: The instance ID of the physical connection interface.;
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	// description: Optional. The validity period of a Subscription.;
	Period *int `json:"Period,omitempty" xml:"Period,omitempty"`
	// description: Optional. The billing method of the instance. Valid values:* PrePaid: Subscription. If you select this value, you must make sure that your account has enough available funds.* PostPaid (default value): Pay-As-You-Go;
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// description: Optional. Indicates whether to pay automatically. Valid values:* true (default value): Pay automatically. If you select this value, you must ensure that your account has enough available funds. Otherwise, the order that is generated is invalid.* false: Generates the order only. No fee is deducted from your account.;
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// description: Optional. The Subscription cycle. Valid values:* Month* Year;
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// description: Optional. The token used for client authentication.;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreatePhysicalConnectionOccupancyOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionOccupancyOrderRequest) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionOccupancyOrderRequest) SetRegionId(v string) *CreatePhysicalConnectionOccupancyOrderRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePhysicalConnectionOccupancyOrderRequest) SetPhysicalConnectionId(v string) *CreatePhysicalConnectionOccupancyOrderRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *CreatePhysicalConnectionOccupancyOrderRequest) SetPeriod(v int) *CreatePhysicalConnectionOccupancyOrderRequest {
	s.Period = &v
	return s
}

func (s *CreatePhysicalConnectionOccupancyOrderRequest) SetInstanceChargeType(v string) *CreatePhysicalConnectionOccupancyOrderRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreatePhysicalConnectionOccupancyOrderRequest) SetAutoPay(v bool) *CreatePhysicalConnectionOccupancyOrderRequest {
	s.AutoPay = &v
	return s
}

func (s *CreatePhysicalConnectionOccupancyOrderRequest) SetPricingCycle(v string) *CreatePhysicalConnectionOccupancyOrderRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreatePhysicalConnectionOccupancyOrderRequest) SetClientToken(v string) *CreatePhysicalConnectionOccupancyOrderRequest {
	s.ClientToken = &v
	return s
}

type CreatePhysicalConnectionOccupancyOrderResponse struct {
	// description: The ID of the request.;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreatePhysicalConnectionOccupancyOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionOccupancyOrderResponse) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionOccupancyOrderResponse) SetRequestId(v string) *CreatePhysicalConnectionOccupancyOrderResponse {
	s.RequestId = &v
	return s
}

type CompletePhysicalConnectionLOARequest struct {
	// description: Optional. The token used for client authentication.;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// description: The ID of the region where the leased line is deployed.;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: The instance ID of the physical connection interface.;
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	// description: The number of the leased line.;
	LineCode *string `json:"LineCode,omitempty" xml:"LineCode,omitempty" require:"true"`
	// description: The label numbers of cables at the installation site.;
	LineLabel *string `json:"LineLabel,omitempty" xml:"LineLabel,omitempty" require:"true"`
}

func (s CompletePhysicalConnectionLOARequest) String() string {
	return tea.Prettify(s)
}

func (s CompletePhysicalConnectionLOARequest) GoString() string {
	return s.String()
}

func (s *CompletePhysicalConnectionLOARequest) SetClientToken(v string) *CompletePhysicalConnectionLOARequest {
	s.ClientToken = &v
	return s
}

func (s *CompletePhysicalConnectionLOARequest) SetRegionId(v string) *CompletePhysicalConnectionLOARequest {
	s.RegionId = &v
	return s
}

func (s *CompletePhysicalConnectionLOARequest) SetInstanceId(v string) *CompletePhysicalConnectionLOARequest {
	s.InstanceId = &v
	return s
}

func (s *CompletePhysicalConnectionLOARequest) SetLineCode(v string) *CompletePhysicalConnectionLOARequest {
	s.LineCode = &v
	return s
}

func (s *CompletePhysicalConnectionLOARequest) SetLineLabel(v string) *CompletePhysicalConnectionLOARequest {
	s.LineLabel = &v
	return s
}

type CompletePhysicalConnectionLOAResponse struct {
	// description: The ID of the request.;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CompletePhysicalConnectionLOAResponse) String() string {
	return tea.Prettify(s)
}

func (s CompletePhysicalConnectionLOAResponse) GoString() string {
	return s.String()
}

func (s *CompletePhysicalConnectionLOAResponse) SetRequestId(v string) *CompletePhysicalConnectionLOAResponse {
	s.RequestId = &v
	return s
}

type ApplyPhysicalConnectionLOARequest struct {
	// description: Optional. The token used for client authentication.;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// description: The ID of the region to which the physical connection interface belongs.;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: Optional. The bandwidth value of the physical connection.;
	Bandwidth *int `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// description: The location where the leased line is deployed.;
	PeerLocation *string `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty"`
	// description: The instance ID of the physical connection interface.;
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	// description: The name of the company that requires the physical connection.;
	CompanyName *string `json:"CompanyName,omitempty" xml:"CompanyName,omitempty" require:"true"`
	// description: The type of leased line. ;
	LineType *string `json:"LineType,omitempty" xml:"LineType,omitempty" require:"true"`
	// description: The name of the installation company.;
	Si *string `json:"Si,omitempty" xml:"Si,omitempty" require:"true"`
	// description: The date and time when the data cable installation technician or representative will go to the installation site.;
	ConstructionTime *string                                    `json:"ConstructionTime,omitempty" xml:"ConstructionTime,omitempty" require:"true"`
	PMInfo           []*ApplyPhysicalConnectionLOARequestPMInfo `json:"PMInfo,omitempty" xml:"PMInfo,omitempty" type:"Repeated"`
}

func (s ApplyPhysicalConnectionLOARequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyPhysicalConnectionLOARequest) GoString() string {
	return s.String()
}

func (s *ApplyPhysicalConnectionLOARequest) SetClientToken(v string) *ApplyPhysicalConnectionLOARequest {
	s.ClientToken = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetRegionId(v string) *ApplyPhysicalConnectionLOARequest {
	s.RegionId = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetBandwidth(v int) *ApplyPhysicalConnectionLOARequest {
	s.Bandwidth = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetPeerLocation(v string) *ApplyPhysicalConnectionLOARequest {
	s.PeerLocation = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetInstanceId(v string) *ApplyPhysicalConnectionLOARequest {
	s.InstanceId = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetCompanyName(v string) *ApplyPhysicalConnectionLOARequest {
	s.CompanyName = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetLineType(v string) *ApplyPhysicalConnectionLOARequest {
	s.LineType = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetSi(v string) *ApplyPhysicalConnectionLOARequest {
	s.Si = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetConstructionTime(v string) *ApplyPhysicalConnectionLOARequest {
	s.ConstructionTime = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequest) SetPMInfo(v []*ApplyPhysicalConnectionLOARequestPMInfo) *ApplyPhysicalConnectionLOARequest {
	s.PMInfo = v
	return s
}

type ApplyPhysicalConnectionLOARequestPMInfo struct {
	PMName            *string `json:"PMName,omitempty" xml:"PMName,omitempty" require:"true"`
	PMContactInfo     *string `json:"PMContactInfo,omitempty" xml:"PMContactInfo,omitempty" require:"true"`
	PMCertificateType *string `json:"PMCertificateType,omitempty" xml:"PMCertificateType,omitempty" require:"true"`
	PMCertificateNo   *string `json:"PMCertificateNo,omitempty" xml:"PMCertificateNo,omitempty" require:"true"`
	PMGender          *string `json:"PMGender,omitempty" xml:"PMGender,omitempty" require:"true"`
}

func (s ApplyPhysicalConnectionLOARequestPMInfo) String() string {
	return tea.Prettify(s)
}

func (s ApplyPhysicalConnectionLOARequestPMInfo) GoString() string {
	return s.String()
}

func (s *ApplyPhysicalConnectionLOARequestPMInfo) SetPMName(v string) *ApplyPhysicalConnectionLOARequestPMInfo {
	s.PMName = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequestPMInfo) SetPMContactInfo(v string) *ApplyPhysicalConnectionLOARequestPMInfo {
	s.PMContactInfo = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequestPMInfo) SetPMCertificateType(v string) *ApplyPhysicalConnectionLOARequestPMInfo {
	s.PMCertificateType = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequestPMInfo) SetPMCertificateNo(v string) *ApplyPhysicalConnectionLOARequestPMInfo {
	s.PMCertificateNo = &v
	return s
}

func (s *ApplyPhysicalConnectionLOARequestPMInfo) SetPMGender(v string) *ApplyPhysicalConnectionLOARequestPMInfo {
	s.PMGender = &v
	return s
}

type ApplyPhysicalConnectionLOAResponse struct {
	// description: The ID of the request.;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ApplyPhysicalConnectionLOAResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyPhysicalConnectionLOAResponse) GoString() string {
	return s.String()
}

func (s *ApplyPhysicalConnectionLOAResponse) SetRequestId(v string) *ApplyPhysicalConnectionLOAResponse {
	s.RequestId = &v
	return s
}

type ConvertBandwidthPackageRequest struct {
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ConvertBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s ConvertBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *ConvertBandwidthPackageRequest) SetBandwidthPackageId(v string) *ConvertBandwidthPackageRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ConvertBandwidthPackageRequest) SetRegionId(v string) *ConvertBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *ConvertBandwidthPackageRequest) SetClientToken(v string) *ConvertBandwidthPackageRequest {
	s.ClientToken = &v
	return s
}

type ConvertBandwidthPackageResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ConvertInstanceId *string `json:"ConvertInstanceId,omitempty" xml:"ConvertInstanceId,omitempty" require:"true"`
}

func (s ConvertBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s ConvertBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *ConvertBandwidthPackageResponse) SetRequestId(v string) *ConvertBandwidthPackageResponse {
	s.RequestId = &v
	return s
}

func (s *ConvertBandwidthPackageResponse) SetConvertInstanceId(v string) *ConvertBandwidthPackageResponse {
	s.ConvertInstanceId = &v
	return s
}

type ModifyRouteEntryRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouteEntryName *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	RouteEntryId   *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty" require:"true"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouteEntryRequest) SetRegionId(v string) *ModifyRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouteEntryRequest) SetRouteEntryName(v string) *ModifyRouteEntryRequest {
	s.RouteEntryName = &v
	return s
}

func (s *ModifyRouteEntryRequest) SetRouteEntryId(v string) *ModifyRouteEntryRequest {
	s.RouteEntryId = &v
	return s
}

func (s *ModifyRouteEntryRequest) SetDescription(v string) *ModifyRouteEntryRequest {
	s.Description = &v
	return s
}

type ModifyRouteEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouteEntryResponse) SetRequestId(v string) *ModifyRouteEntryResponse {
	s.RequestId = &v
	return s
}

type DescribeRouteEntryListRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouteTableId         *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	RouteEntryId         *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
	DestinationCidrBlock *string `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	RouteEntryName       *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	IpVersion            *string `json:"IpVersion,omitempty" xml:"IpVersion,omitempty"`
	RouteEntryType       *string `json:"RouteEntryType,omitempty" xml:"RouteEntryType,omitempty"`
	NextHopId            *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopType          *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	MaxResult            *int    `json:"MaxResult,omitempty" xml:"MaxResult,omitempty"`
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s DescribeRouteEntryListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteEntryListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouteEntryListRequest) SetRegionId(v string) *DescribeRouteEntryListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetRouteTableId(v string) *DescribeRouteEntryListRequest {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetRouteEntryId(v string) *DescribeRouteEntryListRequest {
	s.RouteEntryId = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetDestinationCidrBlock(v string) *DescribeRouteEntryListRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetRouteEntryName(v string) *DescribeRouteEntryListRequest {
	s.RouteEntryName = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetIpVersion(v string) *DescribeRouteEntryListRequest {
	s.IpVersion = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetRouteEntryType(v string) *DescribeRouteEntryListRequest {
	s.RouteEntryType = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetNextHopId(v string) *DescribeRouteEntryListRequest {
	s.NextHopId = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetNextHopType(v string) *DescribeRouteEntryListRequest {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetMaxResult(v int) *DescribeRouteEntryListRequest {
	s.MaxResult = &v
	return s
}

func (s *DescribeRouteEntryListRequest) SetNextToken(v string) *DescribeRouteEntryListRequest {
	s.NextToken = &v
	return s
}

type DescribeRouteEntryListResponse struct {
	RequestId   *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NextToken   *string                                    `json:"NextToken,omitempty" xml:"NextToken,omitempty" require:"true"`
	RouteEntrys *DescribeRouteEntryListResponseRouteEntrys `json:"RouteEntrys,omitempty" xml:"RouteEntrys,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteEntryListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteEntryListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouteEntryListResponse) SetRequestId(v string) *DescribeRouteEntryListResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRouteEntryListResponse) SetNextToken(v string) *DescribeRouteEntryListResponse {
	s.NextToken = &v
	return s
}

func (s *DescribeRouteEntryListResponse) SetRouteEntrys(v *DescribeRouteEntryListResponseRouteEntrys) *DescribeRouteEntryListResponse {
	s.RouteEntrys = v
	return s
}

type DescribeRouteEntryListResponseRouteEntrys struct {
	RouteEntry []*DescribeRouteEntryListResponseRouteEntrysRouteEntry `json:"RouteEntry,omitempty" xml:"RouteEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteEntryListResponseRouteEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteEntryListResponseRouteEntrys) GoString() string {
	return s.String()
}

func (s *DescribeRouteEntryListResponseRouteEntrys) SetRouteEntry(v []*DescribeRouteEntryListResponseRouteEntrysRouteEntry) *DescribeRouteEntryListResponseRouteEntrys {
	s.RouteEntry = v
	return s
}

type DescribeRouteEntryListResponseRouteEntrysRouteEntry struct {
	RouteTableId         *string                                                      `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	DestinationCidrBlock *string                                                      `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty" require:"true"`
	Type                 *string                                                      `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	RouteEntryId         *string                                                      `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty" require:"true"`
	RouteEntryName       *string                                                      `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty" require:"true"`
	Description          *string                                                      `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Status               *string                                                      `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IpVersion            *string                                                      `json:"IpVersion,omitempty" xml:"IpVersion,omitempty" require:"true"`
	NextHops             *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHops `json:"NextHops,omitempty" xml:"NextHops,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntry) GoString() string {
	return s.String()
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetRouteTableId(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetDestinationCidrBlock(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetType(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.Type = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetRouteEntryId(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.RouteEntryId = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetRouteEntryName(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.RouteEntryName = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetDescription(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.Description = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetStatus(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.Status = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetIpVersion(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.IpVersion = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntry) SetNextHops(v *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHops) *DescribeRouteEntryListResponseRouteEntrysRouteEntry {
	s.NextHops = v
	return s
}

type DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHops struct {
	NextHop []*DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHops) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHops) GoString() string {
	return s.String()
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHops) SetNextHop(v []*DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHops {
	s.NextHop = v
	return s
}

type DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop struct {
	NextHopType        *string                                                                               `json:"NextHopType,omitempty" xml:"NextHopType,omitempty" require:"true"`
	NextHopId          *string                                                                               `json:"NextHopId,omitempty" xml:"NextHopId,omitempty" require:"true"`
	Enabled            *int                                                                                  `json:"Enabled,omitempty" xml:"Enabled,omitempty" require:"true"`
	Weight             *int                                                                                  `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	NextHopRegionId    *string                                                                               `json:"NextHopRegionId,omitempty" xml:"NextHopRegionId,omitempty" require:"true"`
	NextHopRelatedInfo *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo `json:"NextHopRelatedInfo,omitempty" xml:"NextHopRelatedInfo,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) GoString() string {
	return s.String()
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) SetNextHopType(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) SetNextHopId(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopId = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) SetEnabled(v int) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop {
	s.Enabled = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) SetWeight(v int) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop {
	s.Weight = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) SetNextHopRegionId(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopRegionId = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop) SetNextHopRelatedInfo(v *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopRelatedInfo = v
	return s
}

type DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo struct {
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo) GoString() string {
	return s.String()
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo) SetInstanceType(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo {
	s.InstanceType = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo) SetRegionId(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo) SetInstanceId(v string) *DescribeRouteEntryListResponseRouteEntrysRouteEntryNextHopsNextHopNextHopRelatedInfo {
	s.InstanceId = &v
	return s
}

type CreateIPv6TranslatorAclListRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	AclName     *string `json:"AclName,omitempty" xml:"AclName,omitempty" require:"true"`
}

func (s CreateIPv6TranslatorAclListRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIPv6TranslatorAclListRequest) GoString() string {
	return s.String()
}

func (s *CreateIPv6TranslatorAclListRequest) SetRegionId(v string) *CreateIPv6TranslatorAclListRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIPv6TranslatorAclListRequest) SetClientToken(v string) *CreateIPv6TranslatorAclListRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateIPv6TranslatorAclListRequest) SetAclName(v string) *CreateIPv6TranslatorAclListRequest {
	s.AclName = &v
	return s
}

type CreateIPv6TranslatorAclListResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AclId     *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
}

func (s CreateIPv6TranslatorAclListResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIPv6TranslatorAclListResponse) GoString() string {
	return s.String()
}

func (s *CreateIPv6TranslatorAclListResponse) SetRequestId(v string) *CreateIPv6TranslatorAclListResponse {
	s.RequestId = &v
	return s
}

func (s *CreateIPv6TranslatorAclListResponse) SetAclId(v string) *CreateIPv6TranslatorAclListResponse {
	s.AclId = &v
	return s
}

type DeleteIPv6TranslatorAclListRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	AclId       *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
}

func (s DeleteIPv6TranslatorAclListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPv6TranslatorAclListRequest) GoString() string {
	return s.String()
}

func (s *DeleteIPv6TranslatorAclListRequest) SetClientToken(v string) *DeleteIPv6TranslatorAclListRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteIPv6TranslatorAclListRequest) SetRegionId(v string) *DeleteIPv6TranslatorAclListRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIPv6TranslatorAclListRequest) SetAclId(v string) *DeleteIPv6TranslatorAclListRequest {
	s.AclId = &v
	return s
}

type DeleteIPv6TranslatorAclListResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteIPv6TranslatorAclListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPv6TranslatorAclListResponse) GoString() string {
	return s.String()
}

func (s *DeleteIPv6TranslatorAclListResponse) SetRequestId(v string) *DeleteIPv6TranslatorAclListResponse {
	s.RequestId = &v
	return s
}

type AddIPv6TranslatorAclListEntryRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	AclId           *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	AclEntryIp      *string `json:"AclEntryIp,omitempty" xml:"AclEntryIp,omitempty" require:"true"`
	AclEntryComment *string `json:"AclEntryComment,omitempty" xml:"AclEntryComment,omitempty"`
}

func (s AddIPv6TranslatorAclListEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddIPv6TranslatorAclListEntryRequest) GoString() string {
	return s.String()
}

func (s *AddIPv6TranslatorAclListEntryRequest) SetRegionId(v string) *AddIPv6TranslatorAclListEntryRequest {
	s.RegionId = &v
	return s
}

func (s *AddIPv6TranslatorAclListEntryRequest) SetAclId(v string) *AddIPv6TranslatorAclListEntryRequest {
	s.AclId = &v
	return s
}

func (s *AddIPv6TranslatorAclListEntryRequest) SetAclEntryIp(v string) *AddIPv6TranslatorAclListEntryRequest {
	s.AclEntryIp = &v
	return s
}

func (s *AddIPv6TranslatorAclListEntryRequest) SetAclEntryComment(v string) *AddIPv6TranslatorAclListEntryRequest {
	s.AclEntryComment = &v
	return s
}

type AddIPv6TranslatorAclListEntryResponse struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AclEntryId *string `json:"AclEntryId,omitempty" xml:"AclEntryId,omitempty" require:"true"`
}

func (s AddIPv6TranslatorAclListEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddIPv6TranslatorAclListEntryResponse) GoString() string {
	return s.String()
}

func (s *AddIPv6TranslatorAclListEntryResponse) SetRequestId(v string) *AddIPv6TranslatorAclListEntryResponse {
	s.RequestId = &v
	return s
}

func (s *AddIPv6TranslatorAclListEntryResponse) SetAclEntryId(v string) *AddIPv6TranslatorAclListEntryResponse {
	s.AclEntryId = &v
	return s
}

type DescribeIPv6TranslatorAclListsRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	AclId      *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	AclName    *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
}

func (s DescribeIPv6TranslatorAclListsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListsRequest) SetRegionId(v string) *DescribeIPv6TranslatorAclListsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsRequest) SetAclId(v string) *DescribeIPv6TranslatorAclListsRequest {
	s.AclId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsRequest) SetPageNumber(v int) *DescribeIPv6TranslatorAclListsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsRequest) SetPageSize(v int) *DescribeIPv6TranslatorAclListsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsRequest) SetAclName(v string) *DescribeIPv6TranslatorAclListsRequest {
	s.AclName = &v
	return s
}

type DescribeIPv6TranslatorAclListsResponse struct {
	RequestId          *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount         *int                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber         *int                                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize           *int                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Ipv6TranslatorAcls *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAcls `json:"Ipv6TranslatorAcls,omitempty" xml:"Ipv6TranslatorAcls,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIPv6TranslatorAclListsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListsResponse) SetRequestId(v string) *DescribeIPv6TranslatorAclListsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsResponse) SetTotalCount(v int) *DescribeIPv6TranslatorAclListsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsResponse) SetPageNumber(v int) *DescribeIPv6TranslatorAclListsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsResponse) SetPageSize(v int) *DescribeIPv6TranslatorAclListsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsResponse) SetIpv6TranslatorAcls(v *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAcls) *DescribeIPv6TranslatorAclListsResponse {
	s.Ipv6TranslatorAcls = v
	return s
}

type DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAcls struct {
	IPv6TranslatorAcl []*DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl `json:"IPv6TranslatorAcl,omitempty" xml:"IPv6TranslatorAcl,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAcls) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAcls) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAcls) SetIPv6TranslatorAcl(v []*DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl) *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAcls {
	s.IPv6TranslatorAcl = v
	return s
}

type DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl struct {
	AclId   *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	AclName *string `json:"AclName,omitempty" xml:"AclName,omitempty" require:"true"`
}

func (s DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl) SetAclId(v string) *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl {
	s.AclId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl) SetAclName(v string) *DescribeIPv6TranslatorAclListsResponseIpv6TranslatorAclsIPv6TranslatorAcl {
	s.AclName = &v
	return s
}

type ModifyIPv6TranslatorAclAttributeRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	AclId       *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	AclName     *string `json:"AclName,omitempty" xml:"AclName,omitempty" require:"true"`
}

func (s ModifyIPv6TranslatorAclAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorAclAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorAclAttributeRequest) SetRegionId(v string) *ModifyIPv6TranslatorAclAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIPv6TranslatorAclAttributeRequest) SetClientToken(v string) *ModifyIPv6TranslatorAclAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyIPv6TranslatorAclAttributeRequest) SetAclId(v string) *ModifyIPv6TranslatorAclAttributeRequest {
	s.AclId = &v
	return s
}

func (s *ModifyIPv6TranslatorAclAttributeRequest) SetAclName(v string) *ModifyIPv6TranslatorAclAttributeRequest {
	s.AclName = &v
	return s
}

type ModifyIPv6TranslatorAclAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIPv6TranslatorAclAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorAclAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorAclAttributeResponse) SetRequestId(v string) *ModifyIPv6TranslatorAclAttributeResponse {
	s.RequestId = &v
	return s
}

type RemoveIPv6TranslatorAclListEntryRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	AclId       *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	AclEntryId  *string `json:"AclEntryId,omitempty" xml:"AclEntryId,omitempty" require:"true"`
}

func (s RemoveIPv6TranslatorAclListEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveIPv6TranslatorAclListEntryRequest) GoString() string {
	return s.String()
}

func (s *RemoveIPv6TranslatorAclListEntryRequest) SetClientToken(v string) *RemoveIPv6TranslatorAclListEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *RemoveIPv6TranslatorAclListEntryRequest) SetRegionId(v string) *RemoveIPv6TranslatorAclListEntryRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveIPv6TranslatorAclListEntryRequest) SetAclId(v string) *RemoveIPv6TranslatorAclListEntryRequest {
	s.AclId = &v
	return s
}

func (s *RemoveIPv6TranslatorAclListEntryRequest) SetAclEntryId(v string) *RemoveIPv6TranslatorAclListEntryRequest {
	s.AclEntryId = &v
	return s
}

type RemoveIPv6TranslatorAclListEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RemoveIPv6TranslatorAclListEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveIPv6TranslatorAclListEntryResponse) GoString() string {
	return s.String()
}

func (s *RemoveIPv6TranslatorAclListEntryResponse) SetRequestId(v string) *RemoveIPv6TranslatorAclListEntryResponse {
	s.RequestId = &v
	return s
}

type DescribeIPv6TranslatorAclListAttributesRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	AclId      *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeIPv6TranslatorAclListAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListAttributesRequest) SetRegionId(v string) *DescribeIPv6TranslatorAclListAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesRequest) SetAclId(v string) *DescribeIPv6TranslatorAclListAttributesRequest {
	s.AclId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesRequest) SetPageNumber(v int) *DescribeIPv6TranslatorAclListAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesRequest) SetPageSize(v int) *DescribeIPv6TranslatorAclListAttributesRequest {
	s.PageSize = &v
	return s
}

type DescribeIPv6TranslatorAclListAttributesResponse struct {
	RequestId  *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AclId      *string                                                    `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	AclName    *string                                                    `json:"AclName,omitempty" xml:"AclName,omitempty" require:"true"`
	TotalCount *int                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *int                                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	AclEntries *DescribeIPv6TranslatorAclListAttributesResponseAclEntries `json:"AclEntries,omitempty" xml:"AclEntries,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIPv6TranslatorAclListAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListAttributesResponse) SetRequestId(v string) *DescribeIPv6TranslatorAclListAttributesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponse) SetAclId(v string) *DescribeIPv6TranslatorAclListAttributesResponse {
	s.AclId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponse) SetAclName(v string) *DescribeIPv6TranslatorAclListAttributesResponse {
	s.AclName = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponse) SetTotalCount(v int) *DescribeIPv6TranslatorAclListAttributesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponse) SetPageNumber(v int) *DescribeIPv6TranslatorAclListAttributesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponse) SetPageSize(v int) *DescribeIPv6TranslatorAclListAttributesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponse) SetAclEntries(v *DescribeIPv6TranslatorAclListAttributesResponseAclEntries) *DescribeIPv6TranslatorAclListAttributesResponse {
	s.AclEntries = v
	return s
}

type DescribeIPv6TranslatorAclListAttributesResponseAclEntries struct {
	AclEntry []*DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry `json:"AclEntry,omitempty" xml:"AclEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIPv6TranslatorAclListAttributesResponseAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListAttributesResponseAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListAttributesResponseAclEntries) SetAclEntry(v []*DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry) *DescribeIPv6TranslatorAclListAttributesResponseAclEntries {
	s.AclEntry = v
	return s
}

type DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry struct {
	AclEntryId      *string `json:"AclEntryId,omitempty" xml:"AclEntryId,omitempty" require:"true"`
	AclEntryIp      *string `json:"AclEntryIp,omitempty" xml:"AclEntryIp,omitempty" require:"true"`
	AclEntryComment *string `json:"AclEntryComment,omitempty" xml:"AclEntryComment,omitempty" require:"true"`
}

func (s DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry) SetAclEntryId(v string) *DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry {
	s.AclEntryId = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry) SetAclEntryIp(v string) *DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry {
	s.AclEntryIp = &v
	return s
}

func (s *DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry) SetAclEntryComment(v string) *DescribeIPv6TranslatorAclListAttributesResponseAclEntriesAclEntry {
	s.AclEntryComment = &v
	return s
}

type ModifyIPv6TranslatorAclListEntryRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	AclId           *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	AclEntryId      *string `json:"AclEntryId,omitempty" xml:"AclEntryId,omitempty" require:"true"`
	AclEntryComment *string `json:"AclEntryComment,omitempty" xml:"AclEntryComment,omitempty" require:"true"`
}

func (s ModifyIPv6TranslatorAclListEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorAclListEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorAclListEntryRequest) SetRegionId(v string) *ModifyIPv6TranslatorAclListEntryRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIPv6TranslatorAclListEntryRequest) SetAclId(v string) *ModifyIPv6TranslatorAclListEntryRequest {
	s.AclId = &v
	return s
}

func (s *ModifyIPv6TranslatorAclListEntryRequest) SetAclEntryId(v string) *ModifyIPv6TranslatorAclListEntryRequest {
	s.AclEntryId = &v
	return s
}

func (s *ModifyIPv6TranslatorAclListEntryRequest) SetAclEntryComment(v string) *ModifyIPv6TranslatorAclListEntryRequest {
	s.AclEntryComment = &v
	return s
}

type ModifyIPv6TranslatorAclListEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIPv6TranslatorAclListEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorAclListEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorAclListEntryResponse) SetRequestId(v string) *ModifyIPv6TranslatorAclListEntryResponse {
	s.RequestId = &v
	return s
}

type UnTagResourcesRequest struct {
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true" type:"Repeated"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	All          *bool     `json:"All,omitempty" xml:"All,omitempty"`
}

func (s UnTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UnTagResourcesRequest) SetResourceType(v string) *UnTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UnTagResourcesRequest) SetResourceId(v []*string) *UnTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UnTagResourcesRequest) SetTagKey(v []*string) *UnTagResourcesRequest {
	s.TagKey = v
	return s
}

func (s *UnTagResourcesRequest) SetRegionId(v string) *UnTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UnTagResourcesRequest) SetAll(v bool) *UnTagResourcesRequest {
	s.All = &v
	return s
}

type UnTagResourcesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UnTagResourcesResponse) SetRequestId(v string) *UnTagResourcesResponse {
	s.RequestId = &v
	return s
}

type TagResourcesRequest struct {
	ResourceType *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   []*string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true" type:"Repeated"`
	Tag          []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true" type:"Repeated"`
	RegionId     *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetRequestId(v string) *TagResourcesResponse {
	s.RequestId = &v
	return s
}

type ListTagResourcesRequest struct {
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag          []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	RegionId     *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NextToken    *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	MaxResults   *int                          `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetMaxResults(v int) *ListTagResourcesRequest {
	s.MaxResults = &v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NextToken    *string                               `json:"NextToken,omitempty" xml:"NextToken,omitempty" require:"true"`
	TagResources *ListTagResourcesResponseTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" require:"true" type:"Struct"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetRequestId(v string) *ListTagResourcesResponse {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponse) SetNextToken(v string) *ListTagResourcesResponse {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponse) SetTagResources(v *ListTagResourcesResponseTagResources) *ListTagResourcesResponse {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseTagResources struct {
	TagResource []*ListTagResourcesResponseTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" require:"true" type:"Repeated"`
}

func (s ListTagResourcesResponseTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseTagResources) SetTagResource(v []*ListTagResourcesResponseTagResourcesTagResource) *ListTagResourcesResponseTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseTagResourcesTagResource struct {
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
	ResourcId    *string `json:"ResourcId,omitempty" xml:"ResourcId,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
}

func (s ListTagResourcesResponseTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.TagValue = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetResourcId(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.ResourcId = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

type ModifyIpv6InternetBandwidthRequest struct {
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6AddressId           *string `json:"Ipv6AddressId,omitempty" xml:"Ipv6AddressId,omitempty"`
	Ipv6InternetBandwidthId *string `json:"Ipv6InternetBandwidthId,omitempty" xml:"Ipv6InternetBandwidthId,omitempty"`
	Bandwidth               *int64  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifyIpv6InternetBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6InternetBandwidthRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpv6InternetBandwidthRequest) SetRegionId(v string) *ModifyIpv6InternetBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIpv6InternetBandwidthRequest) SetIpv6AddressId(v string) *ModifyIpv6InternetBandwidthRequest {
	s.Ipv6AddressId = &v
	return s
}

func (s *ModifyIpv6InternetBandwidthRequest) SetIpv6InternetBandwidthId(v string) *ModifyIpv6InternetBandwidthRequest {
	s.Ipv6InternetBandwidthId = &v
	return s
}

func (s *ModifyIpv6InternetBandwidthRequest) SetBandwidth(v int64) *ModifyIpv6InternetBandwidthRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyIpv6InternetBandwidthRequest) SetClientToken(v string) *ModifyIpv6InternetBandwidthRequest {
	s.ClientToken = &v
	return s
}

type ModifyIpv6InternetBandwidthResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIpv6InternetBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6InternetBandwidthResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpv6InternetBandwidthResponse) SetRequestId(v string) *ModifyIpv6InternetBandwidthResponse {
	s.RequestId = &v
	return s
}

type ModifyIpv6GatewaySpecRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	Spec          *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifyIpv6GatewaySpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6GatewaySpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpv6GatewaySpecRequest) SetRegionId(v string) *ModifyIpv6GatewaySpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIpv6GatewaySpecRequest) SetIpv6GatewayId(v string) *ModifyIpv6GatewaySpecRequest {
	s.Ipv6GatewayId = &v
	return s
}

func (s *ModifyIpv6GatewaySpecRequest) SetSpec(v string) *ModifyIpv6GatewaySpecRequest {
	s.Spec = &v
	return s
}

func (s *ModifyIpv6GatewaySpecRequest) SetClientToken(v string) *ModifyIpv6GatewaySpecRequest {
	s.ClientToken = &v
	return s
}

type ModifyIpv6GatewaySpecResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIpv6GatewaySpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6GatewaySpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpv6GatewaySpecResponse) SetRequestId(v string) *ModifyIpv6GatewaySpecResponse {
	s.RequestId = &v
	return s
}

type ModifyIpv6GatewayAttributeRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyIpv6GatewayAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6GatewayAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpv6GatewayAttributeRequest) SetRegionId(v string) *ModifyIpv6GatewayAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIpv6GatewayAttributeRequest) SetIpv6GatewayId(v string) *ModifyIpv6GatewayAttributeRequest {
	s.Ipv6GatewayId = &v
	return s
}

func (s *ModifyIpv6GatewayAttributeRequest) SetName(v string) *ModifyIpv6GatewayAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyIpv6GatewayAttributeRequest) SetDescription(v string) *ModifyIpv6GatewayAttributeRequest {
	s.Description = &v
	return s
}

type ModifyIpv6GatewayAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIpv6GatewayAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6GatewayAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpv6GatewayAttributeResponse) SetRequestId(v string) *ModifyIpv6GatewayAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyIpv6AddressAttributeRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6AddressId *string `json:"Ipv6AddressId,omitempty" xml:"Ipv6AddressId,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyIpv6AddressAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6AddressAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpv6AddressAttributeRequest) SetRegionId(v string) *ModifyIpv6AddressAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIpv6AddressAttributeRequest) SetIpv6AddressId(v string) *ModifyIpv6AddressAttributeRequest {
	s.Ipv6AddressId = &v
	return s
}

func (s *ModifyIpv6AddressAttributeRequest) SetName(v string) *ModifyIpv6AddressAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyIpv6AddressAttributeRequest) SetDescription(v string) *ModifyIpv6AddressAttributeRequest {
	s.Description = &v
	return s
}

type ModifyIpv6AddressAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIpv6AddressAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpv6AddressAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpv6AddressAttributeResponse) SetRequestId(v string) *ModifyIpv6AddressAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeIpv6GatewaysRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber    *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeIpv6GatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6GatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpv6GatewaysRequest) SetRegionId(v string) *DescribeIpv6GatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIpv6GatewaysRequest) SetIpv6GatewayId(v string) *DescribeIpv6GatewaysRequest {
	s.Ipv6GatewayId = &v
	return s
}

func (s *DescribeIpv6GatewaysRequest) SetVpcId(v string) *DescribeIpv6GatewaysRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeIpv6GatewaysRequest) SetName(v string) *DescribeIpv6GatewaysRequest {
	s.Name = &v
	return s
}

func (s *DescribeIpv6GatewaysRequest) SetPageNumber(v int) *DescribeIpv6GatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpv6GatewaysRequest) SetPageSize(v int) *DescribeIpv6GatewaysRequest {
	s.PageSize = &v
	return s
}

type DescribeIpv6GatewaysResponse struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount   *int                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber   *int                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize     *int                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Ipv6Gateways *DescribeIpv6GatewaysResponseIpv6Gateways `json:"Ipv6Gateways,omitempty" xml:"Ipv6Gateways,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIpv6GatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6GatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpv6GatewaysResponse) SetRequestId(v string) *DescribeIpv6GatewaysResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIpv6GatewaysResponse) SetTotalCount(v int) *DescribeIpv6GatewaysResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeIpv6GatewaysResponse) SetPageNumber(v int) *DescribeIpv6GatewaysResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpv6GatewaysResponse) SetPageSize(v int) *DescribeIpv6GatewaysResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeIpv6GatewaysResponse) SetIpv6Gateways(v *DescribeIpv6GatewaysResponseIpv6Gateways) *DescribeIpv6GatewaysResponse {
	s.Ipv6Gateways = v
	return s
}

type DescribeIpv6GatewaysResponseIpv6Gateways struct {
	Ipv6Gateway []*DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway `json:"Ipv6Gateway,omitempty" xml:"Ipv6Gateway,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIpv6GatewaysResponseIpv6Gateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6GatewaysResponseIpv6Gateways) GoString() string {
	return s.String()
}

func (s *DescribeIpv6GatewaysResponseIpv6Gateways) SetIpv6Gateway(v []*DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) *DescribeIpv6GatewaysResponseIpv6Gateways {
	s.Ipv6Gateway = v
	return s
}

type DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId      *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	VpcId              *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Spec               *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" require:"true"`
	BusinessStatus     *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	ExpiredTime        *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	CreationTime       *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
}

func (s DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) GoString() string {
	return s.String()
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetRegionId(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.RegionId = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetIpv6GatewayId(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.Ipv6GatewayId = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetVpcId(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.VpcId = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetStatus(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.Status = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetName(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.Name = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetDescription(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.Description = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetSpec(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.Spec = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetInstanceChargeType(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetBusinessStatus(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetExpiredTime(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway) SetCreationTime(v string) *DescribeIpv6GatewaysResponseIpv6GatewaysIpv6Gateway {
	s.CreationTime = &v
	return s
}

type DescribeIpv6GatewayAttributeRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
}

func (s DescribeIpv6GatewayAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6GatewayAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpv6GatewayAttributeRequest) SetRegionId(v string) *DescribeIpv6GatewayAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeRequest) SetIpv6GatewayId(v string) *DescribeIpv6GatewayAttributeRequest {
	s.Ipv6GatewayId = &v
	return s
}

type DescribeIpv6GatewayAttributeResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId      *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	VpcId              *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	BusinessStatus     *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Spec               *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" require:"true"`
	ExpiredTime        *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	CreationTime       *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
}

func (s DescribeIpv6GatewayAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6GatewayAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpv6GatewayAttributeResponse) SetRequestId(v string) *DescribeIpv6GatewayAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetRegionId(v string) *DescribeIpv6GatewayAttributeResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetIpv6GatewayId(v string) *DescribeIpv6GatewayAttributeResponse {
	s.Ipv6GatewayId = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetVpcId(v string) *DescribeIpv6GatewayAttributeResponse {
	s.VpcId = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetStatus(v string) *DescribeIpv6GatewayAttributeResponse {
	s.Status = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetBusinessStatus(v string) *DescribeIpv6GatewayAttributeResponse {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetName(v string) *DescribeIpv6GatewayAttributeResponse {
	s.Name = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetDescription(v string) *DescribeIpv6GatewayAttributeResponse {
	s.Description = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetSpec(v string) *DescribeIpv6GatewayAttributeResponse {
	s.Spec = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetInstanceChargeType(v string) *DescribeIpv6GatewayAttributeResponse {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetExpiredTime(v string) *DescribeIpv6GatewayAttributeResponse {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeIpv6GatewayAttributeResponse) SetCreationTime(v string) *DescribeIpv6GatewayAttributeResponse {
	s.CreationTime = &v
	return s
}

type DescribeIpv6EgressOnlyRulesRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId        *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	Ipv6EgressOnlyRuleId *string `json:"Ipv6EgressOnlyRuleId,omitempty" xml:"Ipv6EgressOnlyRuleId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber           *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeIpv6EgressOnlyRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6EgressOnlyRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetRegionId(v string) *DescribeIpv6EgressOnlyRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetIpv6GatewayId(v string) *DescribeIpv6EgressOnlyRulesRequest {
	s.Ipv6GatewayId = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetIpv6EgressOnlyRuleId(v string) *DescribeIpv6EgressOnlyRulesRequest {
	s.Ipv6EgressOnlyRuleId = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetName(v string) *DescribeIpv6EgressOnlyRulesRequest {
	s.Name = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetInstanceType(v string) *DescribeIpv6EgressOnlyRulesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetInstanceId(v string) *DescribeIpv6EgressOnlyRulesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetPageNumber(v int) *DescribeIpv6EgressOnlyRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesRequest) SetPageSize(v int) *DescribeIpv6EgressOnlyRulesRequest {
	s.PageSize = &v
	return s
}

type DescribeIpv6EgressOnlyRulesResponse struct {
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount          *int                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber          *int                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize            *int                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Ipv6EgressOnlyRules *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRules `json:"Ipv6EgressOnlyRules,omitempty" xml:"Ipv6EgressOnlyRules,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIpv6EgressOnlyRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6EgressOnlyRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpv6EgressOnlyRulesResponse) SetRequestId(v string) *DescribeIpv6EgressOnlyRulesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponse) SetTotalCount(v int) *DescribeIpv6EgressOnlyRulesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponse) SetPageNumber(v int) *DescribeIpv6EgressOnlyRulesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponse) SetPageSize(v int) *DescribeIpv6EgressOnlyRulesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponse) SetIpv6EgressOnlyRules(v *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRules) *DescribeIpv6EgressOnlyRulesResponse {
	s.Ipv6EgressOnlyRules = v
	return s
}

type DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRules struct {
	Ipv6EgressOnlyRule []*DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule `json:"Ipv6EgressOnlyRule,omitempty" xml:"Ipv6EgressOnlyRule,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRules) GoString() string {
	return s.String()
}

func (s *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRules) SetIpv6EgressOnlyRule(v []*DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRules {
	s.Ipv6EgressOnlyRule = v
	return s
}

type DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule struct {
	Ipv6EgressOnlyRuleId *string `json:"Ipv6EgressOnlyRuleId,omitempty" xml:"Ipv6EgressOnlyRuleId,omitempty" require:"true"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) GoString() string {
	return s.String()
}

func (s *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) SetIpv6EgressOnlyRuleId(v string) *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule {
	s.Ipv6EgressOnlyRuleId = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) SetInstanceType(v string) *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule {
	s.InstanceType = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) SetInstanceId(v string) *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule {
	s.InstanceId = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) SetStatus(v string) *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule {
	s.Status = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) SetName(v string) *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule {
	s.Name = &v
	return s
}

func (s *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule) SetDescription(v string) *DescribeIpv6EgressOnlyRulesResponseIpv6EgressOnlyRulesIpv6EgressOnlyRule {
	s.Description = &v
	return s
}

type DescribeIpv6AddressesRequest struct {
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6AddressId           *string `json:"Ipv6AddressId,omitempty" xml:"Ipv6AddressId,omitempty"`
	Ipv6Address             *string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	AssociatedInstanceId    *string `json:"AssociatedInstanceId,omitempty" xml:"AssociatedInstanceId,omitempty"`
	AssociatedInstanceType  *string `json:"AssociatedInstanceType,omitempty" xml:"AssociatedInstanceType,omitempty"`
	NetworkType             *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	VpcId                   *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId               *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Ipv6InternetBandwidthId *string `json:"Ipv6InternetBandwidthId,omitempty" xml:"Ipv6InternetBandwidthId,omitempty"`
	PageNumber              *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeIpv6AddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6AddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpv6AddressesRequest) SetRegionId(v string) *DescribeIpv6AddressesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetIpv6AddressId(v string) *DescribeIpv6AddressesRequest {
	s.Ipv6AddressId = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetIpv6Address(v string) *DescribeIpv6AddressesRequest {
	s.Ipv6Address = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetName(v string) *DescribeIpv6AddressesRequest {
	s.Name = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetAssociatedInstanceId(v string) *DescribeIpv6AddressesRequest {
	s.AssociatedInstanceId = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetAssociatedInstanceType(v string) *DescribeIpv6AddressesRequest {
	s.AssociatedInstanceType = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetNetworkType(v string) *DescribeIpv6AddressesRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetVpcId(v string) *DescribeIpv6AddressesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetVSwitchId(v string) *DescribeIpv6AddressesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetIpv6InternetBandwidthId(v string) *DescribeIpv6AddressesRequest {
	s.Ipv6InternetBandwidthId = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetPageNumber(v int) *DescribeIpv6AddressesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpv6AddressesRequest) SetPageSize(v int) *DescribeIpv6AddressesRequest {
	s.PageSize = &v
	return s
}

type DescribeIpv6AddressesResponse struct {
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount    *int                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber    *int                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize      *int                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Ipv6Addresses *DescribeIpv6AddressesResponseIpv6Addresses `json:"Ipv6Addresses,omitempty" xml:"Ipv6Addresses,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIpv6AddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6AddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpv6AddressesResponse) SetRequestId(v string) *DescribeIpv6AddressesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIpv6AddressesResponse) SetTotalCount(v int) *DescribeIpv6AddressesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeIpv6AddressesResponse) SetPageNumber(v int) *DescribeIpv6AddressesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpv6AddressesResponse) SetPageSize(v int) *DescribeIpv6AddressesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeIpv6AddressesResponse) SetIpv6Addresses(v *DescribeIpv6AddressesResponseIpv6Addresses) *DescribeIpv6AddressesResponse {
	s.Ipv6Addresses = v
	return s
}

type DescribeIpv6AddressesResponseIpv6Addresses struct {
	Ipv6Address []*DescribeIpv6AddressesResponseIpv6AddressesIpv6Address `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIpv6AddressesResponseIpv6Addresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6AddressesResponseIpv6Addresses) GoString() string {
	return s.String()
}

func (s *DescribeIpv6AddressesResponseIpv6Addresses) SetIpv6Address(v []*DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) *DescribeIpv6AddressesResponseIpv6Addresses {
	s.Ipv6Address = v
	return s
}

type DescribeIpv6AddressesResponseIpv6AddressesIpv6Address struct {
	Ipv6AddressId          *string                                                                     `json:"Ipv6AddressId,omitempty" xml:"Ipv6AddressId,omitempty" require:"true"`
	Ipv6AddressName        *string                                                                     `json:"Ipv6AddressName,omitempty" xml:"Ipv6AddressName,omitempty" require:"true"`
	VSwitchId              *string                                                                     `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	VpcId                  *string                                                                     `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Ipv6GatewayId          *string                                                                     `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	Ipv6Address            *string                                                                     `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" require:"true"`
	AssociatedInstanceId   *string                                                                     `json:"AssociatedInstanceId,omitempty" xml:"AssociatedInstanceId,omitempty" require:"true"`
	AssociatedInstanceType *string                                                                     `json:"AssociatedInstanceType,omitempty" xml:"AssociatedInstanceType,omitempty" require:"true"`
	Status                 *string                                                                     `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	NetworkType            *string                                                                     `json:"NetworkType,omitempty" xml:"NetworkType,omitempty" require:"true"`
	RealBandwidth          *int                                                                        `json:"RealBandwidth,omitempty" xml:"RealBandwidth,omitempty" require:"true"`
	AllocationTime         *string                                                                     `json:"AllocationTime,omitempty" xml:"AllocationTime,omitempty" require:"true"`
	Ipv6InternetBandwidth  *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth `json:"Ipv6InternetBandwidth,omitempty" xml:"Ipv6InternetBandwidth,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) GoString() string {
	return s.String()
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetIpv6AddressId(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.Ipv6AddressId = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetIpv6AddressName(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.Ipv6AddressName = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetVSwitchId(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.VSwitchId = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetVpcId(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.VpcId = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetIpv6GatewayId(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.Ipv6GatewayId = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetIpv6Address(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.Ipv6Address = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetAssociatedInstanceId(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.AssociatedInstanceId = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetAssociatedInstanceType(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.AssociatedInstanceType = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetStatus(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.Status = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetNetworkType(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.NetworkType = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetRealBandwidth(v int) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.RealBandwidth = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetAllocationTime(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.AllocationTime = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address) SetIpv6InternetBandwidth(v *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) *DescribeIpv6AddressesResponseIpv6AddressesIpv6Address {
	s.Ipv6InternetBandwidth = v
	return s
}

type DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth struct {
	Bandwidth               *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	InstanceChargeType      *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" require:"true"`
	InternetChargeType      *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty" require:"true"`
	BusinessStatus          *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	Ipv6InternetBandwidthId *string `json:"Ipv6InternetBandwidthId,omitempty" xml:"Ipv6InternetBandwidthId,omitempty" require:"true"`
}

func (s DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) GoString() string {
	return s.String()
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) SetBandwidth(v int) *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth {
	s.Bandwidth = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) SetInstanceChargeType(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) SetInternetChargeType(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) SetBusinessStatus(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth) SetIpv6InternetBandwidthId(v string) *DescribeIpv6AddressesResponseIpv6AddressesIpv6AddressIpv6InternetBandwidth {
	s.Ipv6InternetBandwidthId = &v
	return s
}

type DeleteIpv6InternetBandwidthRequest struct {
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6AddressId           *string `json:"Ipv6AddressId,omitempty" xml:"Ipv6AddressId,omitempty"`
	Ipv6InternetBandwidthId *string `json:"Ipv6InternetBandwidthId,omitempty" xml:"Ipv6InternetBandwidthId,omitempty"`
}

func (s DeleteIpv6InternetBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpv6InternetBandwidthRequest) GoString() string {
	return s.String()
}

func (s *DeleteIpv6InternetBandwidthRequest) SetRegionId(v string) *DeleteIpv6InternetBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIpv6InternetBandwidthRequest) SetIpv6AddressId(v string) *DeleteIpv6InternetBandwidthRequest {
	s.Ipv6AddressId = &v
	return s
}

func (s *DeleteIpv6InternetBandwidthRequest) SetIpv6InternetBandwidthId(v string) *DeleteIpv6InternetBandwidthRequest {
	s.Ipv6InternetBandwidthId = &v
	return s
}

type DeleteIpv6InternetBandwidthResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteIpv6InternetBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpv6InternetBandwidthResponse) GoString() string {
	return s.String()
}

func (s *DeleteIpv6InternetBandwidthResponse) SetRequestId(v string) *DeleteIpv6InternetBandwidthResponse {
	s.RequestId = &v
	return s
}

type DeleteIpv6GatewayRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
}

func (s DeleteIpv6GatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpv6GatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteIpv6GatewayRequest) SetRegionId(v string) *DeleteIpv6GatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIpv6GatewayRequest) SetIpv6GatewayId(v string) *DeleteIpv6GatewayRequest {
	s.Ipv6GatewayId = &v
	return s
}

type DeleteIpv6GatewayResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteIpv6GatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpv6GatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteIpv6GatewayResponse) SetRequestId(v string) *DeleteIpv6GatewayResponse {
	s.RequestId = &v
	return s
}

type DeleteIpv6EgressOnlyRuleRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6EgressOnlyRuleId *string `json:"Ipv6EgressOnlyRuleId,omitempty" xml:"Ipv6EgressOnlyRuleId,omitempty" require:"true"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteIpv6EgressOnlyRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpv6EgressOnlyRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteIpv6EgressOnlyRuleRequest) SetRegionId(v string) *DeleteIpv6EgressOnlyRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIpv6EgressOnlyRuleRequest) SetIpv6EgressOnlyRuleId(v string) *DeleteIpv6EgressOnlyRuleRequest {
	s.Ipv6EgressOnlyRuleId = &v
	return s
}

func (s *DeleteIpv6EgressOnlyRuleRequest) SetClientToken(v string) *DeleteIpv6EgressOnlyRuleRequest {
	s.ClientToken = &v
	return s
}

type DeleteIpv6EgressOnlyRuleResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteIpv6EgressOnlyRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpv6EgressOnlyRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteIpv6EgressOnlyRuleResponse) SetRequestId(v string) *DeleteIpv6EgressOnlyRuleResponse {
	s.RequestId = &v
	return s
}

type CreateIpv6GatewayRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Spec        *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateIpv6GatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpv6GatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateIpv6GatewayRequest) SetRegionId(v string) *CreateIpv6GatewayRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIpv6GatewayRequest) SetVpcId(v string) *CreateIpv6GatewayRequest {
	s.VpcId = &v
	return s
}

func (s *CreateIpv6GatewayRequest) SetSpec(v string) *CreateIpv6GatewayRequest {
	s.Spec = &v
	return s
}

func (s *CreateIpv6GatewayRequest) SetName(v string) *CreateIpv6GatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateIpv6GatewayRequest) SetDescription(v string) *CreateIpv6GatewayRequest {
	s.Description = &v
	return s
}

func (s *CreateIpv6GatewayRequest) SetClientToken(v string) *CreateIpv6GatewayRequest {
	s.ClientToken = &v
	return s
}

type CreateIpv6GatewayResponse struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Ipv6GatewayId *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
}

func (s CreateIpv6GatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpv6GatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateIpv6GatewayResponse) SetRequestId(v string) *CreateIpv6GatewayResponse {
	s.RequestId = &v
	return s
}

func (s *CreateIpv6GatewayResponse) SetIpv6GatewayId(v string) *CreateIpv6GatewayResponse {
	s.Ipv6GatewayId = &v
	return s
}

type CreateIpv6EgressOnlyRuleRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceType  *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateIpv6EgressOnlyRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpv6EgressOnlyRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateIpv6EgressOnlyRuleRequest) SetRegionId(v string) *CreateIpv6EgressOnlyRuleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIpv6EgressOnlyRuleRequest) SetIpv6GatewayId(v string) *CreateIpv6EgressOnlyRuleRequest {
	s.Ipv6GatewayId = &v
	return s
}

func (s *CreateIpv6EgressOnlyRuleRequest) SetInstanceId(v string) *CreateIpv6EgressOnlyRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateIpv6EgressOnlyRuleRequest) SetInstanceType(v string) *CreateIpv6EgressOnlyRuleRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateIpv6EgressOnlyRuleRequest) SetName(v string) *CreateIpv6EgressOnlyRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateIpv6EgressOnlyRuleRequest) SetDescription(v string) *CreateIpv6EgressOnlyRuleRequest {
	s.Description = &v
	return s
}

func (s *CreateIpv6EgressOnlyRuleRequest) SetClientToken(v string) *CreateIpv6EgressOnlyRuleRequest {
	s.ClientToken = &v
	return s
}

type CreateIpv6EgressOnlyRuleResponse struct {
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Ipv6EgressRuleId *string `json:"Ipv6EgressRuleId,omitempty" xml:"Ipv6EgressRuleId,omitempty" require:"true"`
}

func (s CreateIpv6EgressOnlyRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpv6EgressOnlyRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateIpv6EgressOnlyRuleResponse) SetRequestId(v string) *CreateIpv6EgressOnlyRuleResponse {
	s.RequestId = &v
	return s
}

func (s *CreateIpv6EgressOnlyRuleResponse) SetIpv6EgressRuleId(v string) *CreateIpv6EgressOnlyRuleResponse {
	s.Ipv6EgressRuleId = &v
	return s
}

type AllocateIpv6InternetBandwidthRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6GatewayId      *string `json:"Ipv6GatewayId,omitempty" xml:"Ipv6GatewayId,omitempty" require:"true"`
	Ipv6AddressId      *string `json:"Ipv6AddressId,omitempty" xml:"Ipv6AddressId,omitempty" require:"true"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	Bandwidth          *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AllocateIpv6InternetBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateIpv6InternetBandwidthRequest) GoString() string {
	return s.String()
}

func (s *AllocateIpv6InternetBandwidthRequest) SetRegionId(v string) *AllocateIpv6InternetBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateIpv6InternetBandwidthRequest) SetIpv6GatewayId(v string) *AllocateIpv6InternetBandwidthRequest {
	s.Ipv6GatewayId = &v
	return s
}

func (s *AllocateIpv6InternetBandwidthRequest) SetIpv6AddressId(v string) *AllocateIpv6InternetBandwidthRequest {
	s.Ipv6AddressId = &v
	return s
}

func (s *AllocateIpv6InternetBandwidthRequest) SetInternetChargeType(v string) *AllocateIpv6InternetBandwidthRequest {
	s.InternetChargeType = &v
	return s
}

func (s *AllocateIpv6InternetBandwidthRequest) SetBandwidth(v int) *AllocateIpv6InternetBandwidthRequest {
	s.Bandwidth = &v
	return s
}

func (s *AllocateIpv6InternetBandwidthRequest) SetClientToken(v string) *AllocateIpv6InternetBandwidthRequest {
	s.ClientToken = &v
	return s
}

type AllocateIpv6InternetBandwidthResponse struct {
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Ipv6AddressId       *string `json:"Ipv6AddressId,omitempty" xml:"Ipv6AddressId,omitempty" require:"true"`
	InternetBandwidthId *string `json:"InternetBandwidthId,omitempty" xml:"InternetBandwidthId,omitempty" require:"true"`
}

func (s AllocateIpv6InternetBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateIpv6InternetBandwidthResponse) GoString() string {
	return s.String()
}

func (s *AllocateIpv6InternetBandwidthResponse) SetRequestId(v string) *AllocateIpv6InternetBandwidthResponse {
	s.RequestId = &v
	return s
}

func (s *AllocateIpv6InternetBandwidthResponse) SetIpv6AddressId(v string) *AllocateIpv6InternetBandwidthResponse {
	s.Ipv6AddressId = &v
	return s
}

func (s *AllocateIpv6InternetBandwidthResponse) SetInternetBandwidthId(v string) *AllocateIpv6InternetBandwidthResponse {
	s.InternetBandwidthId = &v
	return s
}

type DeleteExpressConnectRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
	Force             *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteExpressConnectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExpressConnectRequest) GoString() string {
	return s.String()
}

func (s *DeleteExpressConnectRequest) SetRegionId(v string) *DeleteExpressConnectRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteExpressConnectRequest) SetRouterInterfaceId(v string) *DeleteExpressConnectRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *DeleteExpressConnectRequest) SetForce(v bool) *DeleteExpressConnectRequest {
	s.Force = &v
	return s
}

func (s *DeleteExpressConnectRequest) SetClientToken(v string) *DeleteExpressConnectRequest {
	s.ClientToken = &v
	return s
}

type DeleteExpressConnectResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteExpressConnectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExpressConnectResponse) GoString() string {
	return s.String()
}

func (s *DeleteExpressConnectResponse) SetRequestId(v string) *DeleteExpressConnectResponse {
	s.RequestId = &v
	return s
}

type CreateIPv6TranslatorRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Spec         *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	PayType      *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	Duration     *int    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AutoPay      *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	Bandwidth    *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
}

func (s CreateIPv6TranslatorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIPv6TranslatorRequest) GoString() string {
	return s.String()
}

func (s *CreateIPv6TranslatorRequest) SetRegionId(v string) *CreateIPv6TranslatorRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetClientToken(v string) *CreateIPv6TranslatorRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetName(v string) *CreateIPv6TranslatorRequest {
	s.Name = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetSpec(v string) *CreateIPv6TranslatorRequest {
	s.Spec = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetPayType(v string) *CreateIPv6TranslatorRequest {
	s.PayType = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetPricingCycle(v string) *CreateIPv6TranslatorRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetDuration(v int) *CreateIPv6TranslatorRequest {
	s.Duration = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetAutoPay(v bool) *CreateIPv6TranslatorRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateIPv6TranslatorRequest) SetBandwidth(v int) *CreateIPv6TranslatorRequest {
	s.Bandwidth = &v
	return s
}

type CreateIPv6TranslatorResponse struct {
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Ipv6TranslatorId *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty" require:"true"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Spec             *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	OrderId          *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s CreateIPv6TranslatorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIPv6TranslatorResponse) GoString() string {
	return s.String()
}

func (s *CreateIPv6TranslatorResponse) SetRequestId(v string) *CreateIPv6TranslatorResponse {
	s.RequestId = &v
	return s
}

func (s *CreateIPv6TranslatorResponse) SetIpv6TranslatorId(v string) *CreateIPv6TranslatorResponse {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *CreateIPv6TranslatorResponse) SetName(v string) *CreateIPv6TranslatorResponse {
	s.Name = &v
	return s
}

func (s *CreateIPv6TranslatorResponse) SetSpec(v string) *CreateIPv6TranslatorResponse {
	s.Spec = &v
	return s
}

func (s *CreateIPv6TranslatorResponse) SetOrderId(v int64) *CreateIPv6TranslatorResponse {
	s.OrderId = &v
	return s
}

type DescribeIPv6TranslatorsRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6TranslatorId *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Spec             *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	AllocateIpv6Addr *string `json:"AllocateIpv6Addr,omitempty" xml:"AllocateIpv6Addr,omitempty"`
	AllocateIpv4Addr *string `json:"AllocateIpv4Addr,omitempty" xml:"AllocateIpv4Addr,omitempty"`
	PayType          *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	PageNumber       *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	BusinessStatus   *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
}

func (s DescribeIPv6TranslatorsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorsRequest) SetRegionId(v string) *DescribeIPv6TranslatorsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetIpv6TranslatorId(v string) *DescribeIPv6TranslatorsRequest {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetName(v string) *DescribeIPv6TranslatorsRequest {
	s.Name = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetSpec(v string) *DescribeIPv6TranslatorsRequest {
	s.Spec = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetStatus(v string) *DescribeIPv6TranslatorsRequest {
	s.Status = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetAllocateIpv6Addr(v string) *DescribeIPv6TranslatorsRequest {
	s.AllocateIpv6Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetAllocateIpv4Addr(v string) *DescribeIPv6TranslatorsRequest {
	s.AllocateIpv4Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetPayType(v string) *DescribeIPv6TranslatorsRequest {
	s.PayType = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetPageNumber(v int) *DescribeIPv6TranslatorsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetPageSize(v int) *DescribeIPv6TranslatorsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIPv6TranslatorsRequest) SetBusinessStatus(v string) *DescribeIPv6TranslatorsRequest {
	s.BusinessStatus = &v
	return s
}

type DescribeIPv6TranslatorsResponse struct {
	RequestId       *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount      *int                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber      *int                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize        *int                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Ipv6Translators *DescribeIPv6TranslatorsResponseIpv6Translators `json:"Ipv6Translators,omitempty" xml:"Ipv6Translators,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIPv6TranslatorsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorsResponse) SetRequestId(v string) *DescribeIPv6TranslatorsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponse) SetTotalCount(v int) *DescribeIPv6TranslatorsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponse) SetPageNumber(v int) *DescribeIPv6TranslatorsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponse) SetPageSize(v int) *DescribeIPv6TranslatorsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponse) SetIpv6Translators(v *DescribeIPv6TranslatorsResponseIpv6Translators) *DescribeIPv6TranslatorsResponse {
	s.Ipv6Translators = v
	return s
}

type DescribeIPv6TranslatorsResponseIpv6Translators struct {
	Ipv6Translator []*DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator `json:"Ipv6Translator,omitempty" xml:"Ipv6Translator,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIPv6TranslatorsResponseIpv6Translators) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorsResponseIpv6Translators) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorsResponseIpv6Translators) SetIpv6Translator(v []*DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) *DescribeIPv6TranslatorsResponseIpv6Translators {
	s.Ipv6Translator = v
	return s
}

type DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator struct {
	Ipv6TranslatorId       *string                                                                             `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty" require:"true"`
	CreateTime             *int64                                                                              `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime                *int64                                                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Spec                   *string                                                                             `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	Name                   *string                                                                             `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description            *string                                                                             `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Status                 *string                                                                             `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	BusinessStatus         *string                                                                             `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	PayType                *string                                                                             `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	Bandwidth              *int                                                                                `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	AllocateIpv6Addr       *string                                                                             `json:"AllocateIpv6Addr,omitempty" xml:"AllocateIpv6Addr,omitempty" require:"true"`
	AllocateIpv4Addr       *string                                                                             `json:"AllocateIpv4Addr,omitempty" xml:"AllocateIpv4Addr,omitempty" require:"true"`
	AvailableBandwidth     *string                                                                             `json:"AvailableBandwidth,omitempty" xml:"AvailableBandwidth,omitempty" require:"true"`
	RegionId               *string                                                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6TranslatorEntryIds *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6TranslatorIpv6TranslatorEntryIds `json:"Ipv6TranslatorEntryIds,omitempty" xml:"Ipv6TranslatorEntryIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetIpv6TranslatorId(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetCreateTime(v int64) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.CreateTime = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetEndTime(v int64) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.EndTime = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetSpec(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.Spec = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetName(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.Name = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetDescription(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.Description = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetStatus(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.Status = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetBusinessStatus(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetPayType(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.PayType = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetBandwidth(v int) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.Bandwidth = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetAllocateIpv6Addr(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.AllocateIpv6Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetAllocateIpv4Addr(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.AllocateIpv4Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetAvailableBandwidth(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.AvailableBandwidth = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetRegionId(v string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.RegionId = &v
	return s
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator) SetIpv6TranslatorEntryIds(v *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6TranslatorIpv6TranslatorEntryIds) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6Translator {
	s.Ipv6TranslatorEntryIds = v
	return s
}

type DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6TranslatorIpv6TranslatorEntryIds struct {
	// Ipv6TranslatorEntryId
	Ipv6TranslatorEntryId []*string `json:"Ipv6TranslatorEntryId,omitempty" xml:"Ipv6TranslatorEntryId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6TranslatorIpv6TranslatorEntryIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6TranslatorIpv6TranslatorEntryIds) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6TranslatorIpv6TranslatorEntryIds) SetIpv6TranslatorEntryId(v []*string) *DescribeIPv6TranslatorsResponseIpv6TranslatorsIpv6TranslatorIpv6TranslatorEntryIds {
	s.Ipv6TranslatorEntryId = v
	return s
}

type ModifyIPv6TranslatorAttributeRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Ipv6TranslatorId *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty" require:"true"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyIPv6TranslatorAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorAttributeRequest) SetRegionId(v string) *ModifyIPv6TranslatorAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIPv6TranslatorAttributeRequest) SetClientToken(v string) *ModifyIPv6TranslatorAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyIPv6TranslatorAttributeRequest) SetIpv6TranslatorId(v string) *ModifyIPv6TranslatorAttributeRequest {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *ModifyIPv6TranslatorAttributeRequest) SetName(v string) *ModifyIPv6TranslatorAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyIPv6TranslatorAttributeRequest) SetDescription(v string) *ModifyIPv6TranslatorAttributeRequest {
	s.Description = &v
	return s
}

type ModifyIPv6TranslatorAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIPv6TranslatorAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorAttributeResponse) SetRequestId(v string) *ModifyIPv6TranslatorAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyIPv6TranslatorBandwidthRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Ipv6TranslatorId *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty" require:"true"`
	Bandwidth        *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	AutoPay          *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
}

func (s ModifyIPv6TranslatorBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorBandwidthRequest) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorBandwidthRequest) SetRegionId(v string) *ModifyIPv6TranslatorBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIPv6TranslatorBandwidthRequest) SetClientToken(v string) *ModifyIPv6TranslatorBandwidthRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyIPv6TranslatorBandwidthRequest) SetIpv6TranslatorId(v string) *ModifyIPv6TranslatorBandwidthRequest {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *ModifyIPv6TranslatorBandwidthRequest) SetBandwidth(v int) *ModifyIPv6TranslatorBandwidthRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyIPv6TranslatorBandwidthRequest) SetAutoPay(v bool) *ModifyIPv6TranslatorBandwidthRequest {
	s.AutoPay = &v
	return s
}

type ModifyIPv6TranslatorBandwidthResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s ModifyIPv6TranslatorBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorBandwidthResponse) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorBandwidthResponse) SetRequestId(v string) *ModifyIPv6TranslatorBandwidthResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyIPv6TranslatorBandwidthResponse) SetOrderId(v string) *ModifyIPv6TranslatorBandwidthResponse {
	s.OrderId = &v
	return s
}

type CreateIPv6TranslatorEntryRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6TranslatorId *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty" require:"true"`
	EntryName        *string `json:"EntryName,omitempty" xml:"EntryName,omitempty"`
	EntryDescription *string `json:"EntryDescription,omitempty" xml:"EntryDescription,omitempty"`
	AllocateIpv6Port *int    `json:"AllocateIpv6Port,omitempty" xml:"AllocateIpv6Port,omitempty" require:"true"`
	BackendIpv4Addr  *string `json:"BackendIpv4Addr,omitempty" xml:"BackendIpv4Addr,omitempty" require:"true"`
	BackendIpv4Port  *int    `json:"BackendIpv4Port,omitempty" xml:"BackendIpv4Port,omitempty" require:"true"`
	TransProtocol    *string `json:"TransProtocol,omitempty" xml:"TransProtocol,omitempty" require:"true"`
	EntryBandwidth   *int    `json:"EntryBandwidth,omitempty" xml:"EntryBandwidth,omitempty"`
	AclStatus        *string `json:"AclStatus,omitempty" xml:"AclStatus,omitempty"`
	AclType          *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	AclId            *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
}

func (s CreateIPv6TranslatorEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIPv6TranslatorEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateIPv6TranslatorEntryRequest) SetRegionId(v string) *CreateIPv6TranslatorEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetIpv6TranslatorId(v string) *CreateIPv6TranslatorEntryRequest {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetEntryName(v string) *CreateIPv6TranslatorEntryRequest {
	s.EntryName = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetEntryDescription(v string) *CreateIPv6TranslatorEntryRequest {
	s.EntryDescription = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetAllocateIpv6Port(v int) *CreateIPv6TranslatorEntryRequest {
	s.AllocateIpv6Port = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetBackendIpv4Addr(v string) *CreateIPv6TranslatorEntryRequest {
	s.BackendIpv4Addr = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetBackendIpv4Port(v int) *CreateIPv6TranslatorEntryRequest {
	s.BackendIpv4Port = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetTransProtocol(v string) *CreateIPv6TranslatorEntryRequest {
	s.TransProtocol = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetEntryBandwidth(v int) *CreateIPv6TranslatorEntryRequest {
	s.EntryBandwidth = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetAclStatus(v string) *CreateIPv6TranslatorEntryRequest {
	s.AclStatus = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetAclType(v string) *CreateIPv6TranslatorEntryRequest {
	s.AclType = &v
	return s
}

func (s *CreateIPv6TranslatorEntryRequest) SetAclId(v string) *CreateIPv6TranslatorEntryRequest {
	s.AclId = &v
	return s
}

type CreateIPv6TranslatorEntryResponse struct {
	RequestId             *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Ipv6TranslatorEntryId *string `json:"Ipv6TranslatorEntryId,omitempty" xml:"Ipv6TranslatorEntryId,omitempty" require:"true"`
}

func (s CreateIPv6TranslatorEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIPv6TranslatorEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateIPv6TranslatorEntryResponse) SetRequestId(v string) *CreateIPv6TranslatorEntryResponse {
	s.RequestId = &v
	return s
}

func (s *CreateIPv6TranslatorEntryResponse) SetIpv6TranslatorEntryId(v string) *CreateIPv6TranslatorEntryResponse {
	s.Ipv6TranslatorEntryId = &v
	return s
}

type DeleteIPv6TranslatorEntryRequest struct {
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6TranslatorEntryId *string `json:"Ipv6TranslatorEntryId,omitempty" xml:"Ipv6TranslatorEntryId,omitempty"`
	Ipv6TranslatorId      *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty"`
}

func (s DeleteIPv6TranslatorEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPv6TranslatorEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteIPv6TranslatorEntryRequest) SetClientToken(v string) *DeleteIPv6TranslatorEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteIPv6TranslatorEntryRequest) SetRegionId(v string) *DeleteIPv6TranslatorEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIPv6TranslatorEntryRequest) SetIpv6TranslatorEntryId(v string) *DeleteIPv6TranslatorEntryRequest {
	s.Ipv6TranslatorEntryId = &v
	return s
}

func (s *DeleteIPv6TranslatorEntryRequest) SetIpv6TranslatorId(v string) *DeleteIPv6TranslatorEntryRequest {
	s.Ipv6TranslatorId = &v
	return s
}

type DeleteIPv6TranslatorEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteIPv6TranslatorEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPv6TranslatorEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteIPv6TranslatorEntryResponse) SetRequestId(v string) *DeleteIPv6TranslatorEntryResponse {
	s.RequestId = &v
	return s
}

type ModifyIPv6TranslatorEntryRequest struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6TranslatorEntryId *string `json:"Ipv6TranslatorEntryId,omitempty" xml:"Ipv6TranslatorEntryId,omitempty" require:"true"`
	EntryName             *string `json:"EntryName,omitempty" xml:"EntryName,omitempty"`
	EntryDescription      *string `json:"EntryDescription,omitempty" xml:"EntryDescription,omitempty"`
	AllocateIpv6Port      *int    `json:"AllocateIpv6Port,omitempty" xml:"AllocateIpv6Port,omitempty"`
	BackendIpv4Addr       *string `json:"BackendIpv4Addr,omitempty" xml:"BackendIpv4Addr,omitempty"`
	BackendIpv4Port       *int    `json:"BackendIpv4Port,omitempty" xml:"BackendIpv4Port,omitempty"`
	TransProtocol         *string `json:"TransProtocol,omitempty" xml:"TransProtocol,omitempty"`
	EntryBandwidth        *int    `json:"EntryBandwidth,omitempty" xml:"EntryBandwidth,omitempty"`
	AclStatus             *string `json:"AclStatus,omitempty" xml:"AclStatus,omitempty"`
	AclType               *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	AclId                 *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
}

func (s ModifyIPv6TranslatorEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorEntryRequest) SetRegionId(v string) *ModifyIPv6TranslatorEntryRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetIpv6TranslatorEntryId(v string) *ModifyIPv6TranslatorEntryRequest {
	s.Ipv6TranslatorEntryId = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetEntryName(v string) *ModifyIPv6TranslatorEntryRequest {
	s.EntryName = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetEntryDescription(v string) *ModifyIPv6TranslatorEntryRequest {
	s.EntryDescription = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetAllocateIpv6Port(v int) *ModifyIPv6TranslatorEntryRequest {
	s.AllocateIpv6Port = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetBackendIpv4Addr(v string) *ModifyIPv6TranslatorEntryRequest {
	s.BackendIpv4Addr = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetBackendIpv4Port(v int) *ModifyIPv6TranslatorEntryRequest {
	s.BackendIpv4Port = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetTransProtocol(v string) *ModifyIPv6TranslatorEntryRequest {
	s.TransProtocol = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetEntryBandwidth(v int) *ModifyIPv6TranslatorEntryRequest {
	s.EntryBandwidth = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetAclStatus(v string) *ModifyIPv6TranslatorEntryRequest {
	s.AclStatus = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetAclType(v string) *ModifyIPv6TranslatorEntryRequest {
	s.AclType = &v
	return s
}

func (s *ModifyIPv6TranslatorEntryRequest) SetAclId(v string) *ModifyIPv6TranslatorEntryRequest {
	s.AclId = &v
	return s
}

type ModifyIPv6TranslatorEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyIPv6TranslatorEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIPv6TranslatorEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyIPv6TranslatorEntryResponse) SetRequestId(v string) *ModifyIPv6TranslatorEntryResponse {
	s.RequestId = &v
	return s
}

type DescribeIPv6TranslatorEntriesRequest struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6TranslatorId      *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty"`
	Ipv6TranslatorEntryId *string `json:"Ipv6TranslatorEntryId,omitempty" xml:"Ipv6TranslatorEntryId,omitempty"`
	EntryName             *string `json:"EntryName,omitempty" xml:"EntryName,omitempty"`
	AllocateIpv6Addr      *string `json:"AllocateIpv6Addr,omitempty" xml:"AllocateIpv6Addr,omitempty"`
	AllocateIpv6Port      *int    `json:"AllocateIpv6Port,omitempty" xml:"AllocateIpv6Port,omitempty"`
	BackendIpv4Addr       *string `json:"BackendIpv4Addr,omitempty" xml:"BackendIpv4Addr,omitempty"`
	BackendIpv4Port       *int    `json:"BackendIpv4Port,omitempty" xml:"BackendIpv4Port,omitempty"`
	TransProtocol         *string `json:"TransProtocol,omitempty" xml:"TransProtocol,omitempty"`
	AclStatus             *string `json:"AclStatus,omitempty" xml:"AclStatus,omitempty"`
	AclType               *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	AclId                 *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	PageNumber            *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DescribeIPv6TranslatorEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetRegionId(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetIpv6TranslatorId(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetIpv6TranslatorEntryId(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.Ipv6TranslatorEntryId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetEntryName(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.EntryName = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetAllocateIpv6Addr(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.AllocateIpv6Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetAllocateIpv6Port(v int) *DescribeIPv6TranslatorEntriesRequest {
	s.AllocateIpv6Port = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetBackendIpv4Addr(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.BackendIpv4Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetBackendIpv4Port(v int) *DescribeIPv6TranslatorEntriesRequest {
	s.BackendIpv4Port = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetTransProtocol(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.TransProtocol = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetAclStatus(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.AclStatus = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetAclType(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.AclType = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetAclId(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.AclId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetPageNumber(v int) *DescribeIPv6TranslatorEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetPageSize(v int) *DescribeIPv6TranslatorEntriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesRequest) SetClientToken(v string) *DescribeIPv6TranslatorEntriesRequest {
	s.ClientToken = &v
	return s
}

type DescribeIPv6TranslatorEntriesResponse struct {
	RequestId             *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount            *int                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber            *int                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize              *int                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Ipv6TranslatorEntries *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntries `json:"Ipv6TranslatorEntries,omitempty" xml:"Ipv6TranslatorEntries,omitempty" require:"true" type:"Struct"`
}

func (s DescribeIPv6TranslatorEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorEntriesResponse) SetRequestId(v string) *DescribeIPv6TranslatorEntriesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponse) SetTotalCount(v int) *DescribeIPv6TranslatorEntriesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponse) SetPageNumber(v int) *DescribeIPv6TranslatorEntriesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponse) SetPageSize(v int) *DescribeIPv6TranslatorEntriesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponse) SetIpv6TranslatorEntries(v *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntries) *DescribeIPv6TranslatorEntriesResponse {
	s.Ipv6TranslatorEntries = v
	return s
}

type DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntries struct {
	Ipv6TranslatorEntry []*DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry `json:"Ipv6TranslatorEntry,omitempty" xml:"Ipv6TranslatorEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntries) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntries) SetIpv6TranslatorEntry(v []*DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntries {
	s.Ipv6TranslatorEntry = v
	return s
}

type DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry struct {
	Ipv6TranslatorId      *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty" require:"true"`
	Ipv6TranslatorEntryId *string `json:"Ipv6TranslatorEntryId,omitempty" xml:"Ipv6TranslatorEntryId,omitempty" require:"true"`
	AllocateIpv6Addr      *string `json:"AllocateIpv6Addr,omitempty" xml:"AllocateIpv6Addr,omitempty" require:"true"`
	AllocateIpv6Port      *int    `json:"AllocateIpv6Port,omitempty" xml:"AllocateIpv6Port,omitempty" require:"true"`
	BackendIpv4Addr       *string `json:"BackendIpv4Addr,omitempty" xml:"BackendIpv4Addr,omitempty" require:"true"`
	BackendIpv4Port       *string `json:"BackendIpv4Port,omitempty" xml:"BackendIpv4Port,omitempty" require:"true"`
	TransProtocol         *string `json:"TransProtocol,omitempty" xml:"TransProtocol,omitempty" require:"true"`
	EntryBandwidth        *string `json:"EntryBandwidth,omitempty" xml:"EntryBandwidth,omitempty" require:"true"`
	EntryDescription      *string `json:"EntryDescription,omitempty" xml:"EntryDescription,omitempty" require:"true"`
	EntryName             *string `json:"EntryName,omitempty" xml:"EntryName,omitempty" require:"true"`
	EntryStatus           *string `json:"EntryStatus,omitempty" xml:"EntryStatus,omitempty" require:"true"`
	AclStatus             *string `json:"AclStatus,omitempty" xml:"AclStatus,omitempty" require:"true"`
	AclType               *string `json:"AclType,omitempty" xml:"AclType,omitempty" require:"true"`
	AclId                 *string `json:"AclId,omitempty" xml:"AclId,omitempty" require:"true"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) GoString() string {
	return s.String()
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetIpv6TranslatorId(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.Ipv6TranslatorId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetIpv6TranslatorEntryId(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.Ipv6TranslatorEntryId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetAllocateIpv6Addr(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.AllocateIpv6Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetAllocateIpv6Port(v int) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.AllocateIpv6Port = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetBackendIpv4Addr(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.BackendIpv4Addr = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetBackendIpv4Port(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.BackendIpv4Port = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetTransProtocol(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.TransProtocol = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetEntryBandwidth(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.EntryBandwidth = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetEntryDescription(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.EntryDescription = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetEntryName(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.EntryName = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetEntryStatus(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.EntryStatus = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetAclStatus(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.AclStatus = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetAclType(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.AclType = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetAclId(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.AclId = &v
	return s
}

func (s *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry) SetRegionId(v string) *DescribeIPv6TranslatorEntriesResponseIpv6TranslatorEntriesIpv6TranslatorEntry {
	s.RegionId = &v
	return s
}

type DeleteIPv6TranslatorRequest struct {
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Ipv6TranslatorId *string `json:"Ipv6TranslatorId,omitempty" xml:"Ipv6TranslatorId,omitempty" require:"true"`
}

func (s DeleteIPv6TranslatorRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPv6TranslatorRequest) GoString() string {
	return s.String()
}

func (s *DeleteIPv6TranslatorRequest) SetClientToken(v string) *DeleteIPv6TranslatorRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteIPv6TranslatorRequest) SetRegionId(v string) *DeleteIPv6TranslatorRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIPv6TranslatorRequest) SetIpv6TranslatorId(v string) *DeleteIPv6TranslatorRequest {
	s.Ipv6TranslatorId = &v
	return s
}

type DeleteIPv6TranslatorResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteIPv6TranslatorResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPv6TranslatorResponse) GoString() string {
	return s.String()
}

func (s *DeleteIPv6TranslatorResponse) SetRequestId(v string) *DeleteIPv6TranslatorResponse {
	s.RequestId = &v
	return s
}

type AllocateEipAddressProRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IpAddress          *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Bandwidth          *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Period             *int    `json:"Period,omitempty" xml:"Period,omitempty"`
	ISP                *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	Netmode            *string `json:"Netmode,omitempty" xml:"Netmode,omitempty"`
	AutoPay            *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	PricingCycle       *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AllocateEipAddressProRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressProRequest) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressProRequest) SetRegionId(v string) *AllocateEipAddressProRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetIpAddress(v string) *AllocateEipAddressProRequest {
	s.IpAddress = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetInstanceId(v string) *AllocateEipAddressProRequest {
	s.InstanceId = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetBandwidth(v string) *AllocateEipAddressProRequest {
	s.Bandwidth = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetPeriod(v int) *AllocateEipAddressProRequest {
	s.Period = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetISP(v string) *AllocateEipAddressProRequest {
	s.ISP = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetNetmode(v string) *AllocateEipAddressProRequest {
	s.Netmode = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetAutoPay(v bool) *AllocateEipAddressProRequest {
	s.AutoPay = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetPricingCycle(v string) *AllocateEipAddressProRequest {
	s.PricingCycle = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetInstanceChargeType(v string) *AllocateEipAddressProRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetInternetChargeType(v string) *AllocateEipAddressProRequest {
	s.InternetChargeType = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetResourceGroupId(v string) *AllocateEipAddressProRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AllocateEipAddressProRequest) SetClientToken(v string) *AllocateEipAddressProRequest {
	s.ClientToken = &v
	return s
}

type AllocateEipAddressProResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	EipAddress      *string `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" require:"true"`
	OrderId         *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
}

func (s AllocateEipAddressProResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressProResponse) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressProResponse) SetRequestId(v string) *AllocateEipAddressProResponse {
	s.RequestId = &v
	return s
}

func (s *AllocateEipAddressProResponse) SetAllocationId(v string) *AllocateEipAddressProResponse {
	s.AllocationId = &v
	return s
}

func (s *AllocateEipAddressProResponse) SetEipAddress(v string) *AllocateEipAddressProResponse {
	s.EipAddress = &v
	return s
}

func (s *AllocateEipAddressProResponse) SetOrderId(v int64) *AllocateEipAddressProResponse {
	s.OrderId = &v
	return s
}

func (s *AllocateEipAddressProResponse) SetResourceGroupId(v string) *AllocateEipAddressProResponse {
	s.ResourceGroupId = &v
	return s
}

type DescribeHighDefinitionMonitorLogAttributeRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeHighDefinitionMonitorLogAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighDefinitionMonitorLogAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeHighDefinitionMonitorLogAttributeRequest) SetRegionId(v string) *DescribeHighDefinitionMonitorLogAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHighDefinitionMonitorLogAttributeRequest) SetInstanceId(v string) *DescribeHighDefinitionMonitorLogAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeHighDefinitionMonitorLogAttributeRequest) SetInstanceType(v string) *DescribeHighDefinitionMonitorLogAttributeRequest {
	s.InstanceType = &v
	return s
}

type DescribeHighDefinitionMonitorLogAttributeResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	LogProject   *string `json:"LogProject,omitempty" xml:"LogProject,omitempty" require:"true"`
	LogStore     *string `json:"LogStore,omitempty" xml:"LogStore,omitempty" require:"true"`
}

func (s DescribeHighDefinitionMonitorLogAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighDefinitionMonitorLogAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeHighDefinitionMonitorLogAttributeResponse) SetRequestId(v string) *DescribeHighDefinitionMonitorLogAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeHighDefinitionMonitorLogAttributeResponse) SetSuccess(v string) *DescribeHighDefinitionMonitorLogAttributeResponse {
	s.Success = &v
	return s
}

func (s *DescribeHighDefinitionMonitorLogAttributeResponse) SetInstanceId(v string) *DescribeHighDefinitionMonitorLogAttributeResponse {
	s.InstanceId = &v
	return s
}

func (s *DescribeHighDefinitionMonitorLogAttributeResponse) SetInstanceType(v string) *DescribeHighDefinitionMonitorLogAttributeResponse {
	s.InstanceType = &v
	return s
}

func (s *DescribeHighDefinitionMonitorLogAttributeResponse) SetLogProject(v string) *DescribeHighDefinitionMonitorLogAttributeResponse {
	s.LogProject = &v
	return s
}

func (s *DescribeHighDefinitionMonitorLogAttributeResponse) SetLogStore(v string) *DescribeHighDefinitionMonitorLogAttributeResponse {
	s.LogStore = &v
	return s
}

type ModifyFlowLogAttributeRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	FlowLogId   *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty" require:"true"`
	FlowLogName *string `json:"FlowLogName,omitempty" xml:"FlowLogName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyFlowLogAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowLogAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowLogAttributeRequest) SetRegionId(v string) *ModifyFlowLogAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetFlowLogId(v string) *ModifyFlowLogAttributeRequest {
	s.FlowLogId = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetFlowLogName(v string) *ModifyFlowLogAttributeRequest {
	s.FlowLogName = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetDescription(v string) *ModifyFlowLogAttributeRequest {
	s.Description = &v
	return s
}

type ModifyFlowLogAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s ModifyFlowLogAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowLogAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowLogAttributeResponse) SetRequestId(v string) *ModifyFlowLogAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyFlowLogAttributeResponse) SetSuccess(v string) *ModifyFlowLogAttributeResponse {
	s.Success = &v
	return s
}

type DescribeFlowLogsRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	FlowLogName  *string `json:"FlowLogName,omitempty" xml:"FlowLogName,omitempty"`
	FlowLogId    *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	TrafficType  *string `json:"TrafficType,omitempty" xml:"TrafficType,omitempty"`
	ProjectName  *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	LogStoreName *string `json:"LogStoreName,omitempty" xml:"LogStoreName,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeFlowLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsRequest) SetRegionId(v string) *DescribeFlowLogsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetFlowLogName(v string) *DescribeFlowLogsRequest {
	s.FlowLogName = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetFlowLogId(v string) *DescribeFlowLogsRequest {
	s.FlowLogId = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetDescription(v string) *DescribeFlowLogsRequest {
	s.Description = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetResourceType(v string) *DescribeFlowLogsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetResourceId(v string) *DescribeFlowLogsRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetTrafficType(v string) *DescribeFlowLogsRequest {
	s.TrafficType = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetProjectName(v string) *DescribeFlowLogsRequest {
	s.ProjectName = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetLogStoreName(v string) *DescribeFlowLogsRequest {
	s.LogStoreName = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetStatus(v string) *DescribeFlowLogsRequest {
	s.Status = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetPageNumber(v int) *DescribeFlowLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetPageSize(v int) *DescribeFlowLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetVpcId(v string) *DescribeFlowLogsRequest {
	s.VpcId = &v
	return s
}

type DescribeFlowLogsResponse struct {
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success    *string                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	TotalCount *string                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *string                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *string                           `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	FlowLogs   *DescribeFlowLogsResponseFlowLogs `json:"FlowLogs,omitempty" xml:"FlowLogs,omitempty" require:"true" type:"Struct"`
}

func (s DescribeFlowLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsResponse) SetRequestId(v string) *DescribeFlowLogsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowLogsResponse) SetSuccess(v string) *DescribeFlowLogsResponse {
	s.Success = &v
	return s
}

func (s *DescribeFlowLogsResponse) SetTotalCount(v string) *DescribeFlowLogsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeFlowLogsResponse) SetPageNumber(v string) *DescribeFlowLogsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowLogsResponse) SetPageSize(v string) *DescribeFlowLogsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowLogsResponse) SetFlowLogs(v *DescribeFlowLogsResponseFlowLogs) *DescribeFlowLogsResponse {
	s.FlowLogs = v
	return s
}

type DescribeFlowLogsResponseFlowLogs struct {
	FlowLog []*DescribeFlowLogsResponseFlowLogsFlowLog `json:"FlowLog,omitempty" xml:"FlowLog,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeFlowLogsResponseFlowLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsResponseFlowLogs) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsResponseFlowLogs) SetFlowLog(v []*DescribeFlowLogsResponseFlowLogsFlowLog) *DescribeFlowLogsResponseFlowLogs {
	s.FlowLog = v
	return s
}

type DescribeFlowLogsResponseFlowLogsFlowLog struct {
	FlowLogId    *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty" require:"true"`
	FlowLogName  *string `json:"FlowLogName,omitempty" xml:"FlowLogName,omitempty" require:"true"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	ProjectName  *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty" require:"true"`
	LogStoreName *string `json:"LogStoreName,omitempty" xml:"LogStoreName,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	TrafficType  *string `json:"TrafficType,omitempty" xml:"TrafficType,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeFlowLogsResponseFlowLogsFlowLog) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsResponseFlowLogsFlowLog) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetFlowLogId(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.FlowLogId = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetFlowLogName(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.FlowLogName = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetDescription(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.Description = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetCreationTime(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.CreationTime = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetResourceType(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.ResourceType = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetResourceId(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.ResourceId = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetProjectName(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.ProjectName = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetLogStoreName(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.LogStoreName = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetStatus(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.Status = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetTrafficType(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.TrafficType = &v
	return s
}

func (s *DescribeFlowLogsResponseFlowLogsFlowLog) SetRegionId(v string) *DescribeFlowLogsResponseFlowLogsFlowLog {
	s.RegionId = &v
	return s
}

type DeleteFlowLogRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	FlowLogId *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty" require:"true"`
}

func (s DeleteFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowLogRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowLogRequest) SetRegionId(v string) *DeleteFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowLogRequest) SetFlowLogId(v string) *DeleteFlowLogRequest {
	s.FlowLogId = &v
	return s
}

type DeleteFlowLogResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s DeleteFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowLogResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowLogResponse) SetRequestId(v string) *DeleteFlowLogResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowLogResponse) SetSuccess(v string) *DeleteFlowLogResponse {
	s.Success = &v
	return s
}

type DeactiveFlowLogRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	FlowLogId *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty" require:"true"`
}

func (s DeactiveFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DeactiveFlowLogRequest) GoString() string {
	return s.String()
}

func (s *DeactiveFlowLogRequest) SetRegionId(v string) *DeactiveFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *DeactiveFlowLogRequest) SetFlowLogId(v string) *DeactiveFlowLogRequest {
	s.FlowLogId = &v
	return s
}

type DeactiveFlowLogResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s DeactiveFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DeactiveFlowLogResponse) GoString() string {
	return s.String()
}

func (s *DeactiveFlowLogResponse) SetRequestId(v string) *DeactiveFlowLogResponse {
	s.RequestId = &v
	return s
}

func (s *DeactiveFlowLogResponse) SetSuccess(v string) *DeactiveFlowLogResponse {
	s.Success = &v
	return s
}

type CreateFlowLogRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	FlowLogName  *string `json:"FlowLogName,omitempty" xml:"FlowLogName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	TrafficType  *string `json:"TrafficType,omitempty" xml:"TrafficType,omitempty" require:"true"`
	ProjectName  *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty" require:"true"`
	LogStoreName *string `json:"LogStoreName,omitempty" xml:"LogStoreName,omitempty" require:"true"`
}

func (s CreateFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLogRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowLogRequest) SetRegionId(v string) *CreateFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowLogRequest) SetFlowLogName(v string) *CreateFlowLogRequest {
	s.FlowLogName = &v
	return s
}

func (s *CreateFlowLogRequest) SetDescription(v string) *CreateFlowLogRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowLogRequest) SetResourceType(v string) *CreateFlowLogRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateFlowLogRequest) SetResourceId(v string) *CreateFlowLogRequest {
	s.ResourceId = &v
	return s
}

func (s *CreateFlowLogRequest) SetTrafficType(v string) *CreateFlowLogRequest {
	s.TrafficType = &v
	return s
}

func (s *CreateFlowLogRequest) SetProjectName(v string) *CreateFlowLogRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateFlowLogRequest) SetLogStoreName(v string) *CreateFlowLogRequest {
	s.LogStoreName = &v
	return s
}

type CreateFlowLogResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	FlowLogId *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty" require:"true"`
}

func (s CreateFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLogResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowLogResponse) SetRequestId(v string) *CreateFlowLogResponse {
	s.RequestId = &v
	return s
}

func (s *CreateFlowLogResponse) SetSuccess(v string) *CreateFlowLogResponse {
	s.Success = &v
	return s
}

func (s *CreateFlowLogResponse) SetFlowLogId(v string) *CreateFlowLogResponse {
	s.FlowLogId = &v
	return s
}

type ActiveFlowLogRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	FlowLogId *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty" require:"true"`
}

func (s ActiveFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s ActiveFlowLogRequest) GoString() string {
	return s.String()
}

func (s *ActiveFlowLogRequest) SetRegionId(v string) *ActiveFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *ActiveFlowLogRequest) SetFlowLogId(v string) *ActiveFlowLogRequest {
	s.FlowLogId = &v
	return s
}

type ActiveFlowLogResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s ActiveFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s ActiveFlowLogResponse) GoString() string {
	return s.String()
}

func (s *ActiveFlowLogResponse) SetRequestId(v string) *ActiveFlowLogResponse {
	s.RequestId = &v
	return s
}

func (s *ActiveFlowLogResponse) SetSuccess(v string) *ActiveFlowLogResponse {
	s.Success = &v
	return s
}

type UnassociateRouteTableRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	VSwitchId    *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s UnassociateRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateRouteTableRequest) GoString() string {
	return s.String()
}

func (s *UnassociateRouteTableRequest) SetRegionId(v string) *UnassociateRouteTableRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateRouteTableRequest) SetRouteTableId(v string) *UnassociateRouteTableRequest {
	s.RouteTableId = &v
	return s
}

func (s *UnassociateRouteTableRequest) SetVSwitchId(v string) *UnassociateRouteTableRequest {
	s.VSwitchId = &v
	return s
}

func (s *UnassociateRouteTableRequest) SetClientToken(v string) *UnassociateRouteTableRequest {
	s.ClientToken = &v
	return s
}

type UnassociateRouteTableResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnassociateRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateRouteTableResponse) GoString() string {
	return s.String()
}

func (s *UnassociateRouteTableResponse) SetRequestId(v string) *UnassociateRouteTableResponse {
	s.RequestId = &v
	return s
}

type DeleteRouteTableRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
}

func (s DeleteRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteTableRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouteTableRequest) SetRegionId(v string) *DeleteRouteTableRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouteTableRequest) SetRouteTableId(v string) *DeleteRouteTableRequest {
	s.RouteTableId = &v
	return s
}

type DeleteRouteTableResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteTableResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouteTableResponse) SetRequestId(v string) *DeleteRouteTableResponse {
	s.RequestId = &v
	return s
}

type CreateRouteTableRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	RouteTableName *string `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteTableRequest) GoString() string {
	return s.String()
}

func (s *CreateRouteTableRequest) SetRegionId(v string) *CreateRouteTableRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRouteTableRequest) SetVpcId(v string) *CreateRouteTableRequest {
	s.VpcId = &v
	return s
}

func (s *CreateRouteTableRequest) SetRouteTableName(v string) *CreateRouteTableRequest {
	s.RouteTableName = &v
	return s
}

func (s *CreateRouteTableRequest) SetDescription(v string) *CreateRouteTableRequest {
	s.Description = &v
	return s
}

func (s *CreateRouteTableRequest) SetClientToken(v string) *CreateRouteTableRequest {
	s.ClientToken = &v
	return s
}

type CreateRouteTableResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
}

func (s CreateRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteTableResponse) GoString() string {
	return s.String()
}

func (s *CreateRouteTableResponse) SetRequestId(v string) *CreateRouteTableResponse {
	s.RequestId = &v
	return s
}

func (s *CreateRouteTableResponse) SetRouteTableId(v string) *CreateRouteTableResponse {
	s.RouteTableId = &v
	return s
}

type AssociateRouteTableRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	VSwitchId    *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AssociateRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateRouteTableRequest) GoString() string {
	return s.String()
}

func (s *AssociateRouteTableRequest) SetRegionId(v string) *AssociateRouteTableRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateRouteTableRequest) SetRouteTableId(v string) *AssociateRouteTableRequest {
	s.RouteTableId = &v
	return s
}

func (s *AssociateRouteTableRequest) SetVSwitchId(v string) *AssociateRouteTableRequest {
	s.VSwitchId = &v
	return s
}

func (s *AssociateRouteTableRequest) SetClientToken(v string) *AssociateRouteTableRequest {
	s.ClientToken = &v
	return s
}

type AssociateRouteTableResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AssociateRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateRouteTableResponse) GoString() string {
	return s.String()
}

func (s *AssociateRouteTableResponse) SetRequestId(v string) *AssociateRouteTableResponse {
	s.RequestId = &v
	return s
}

type CreateVpnGatewayRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	VpcId              *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Period             *int    `json:"Period,omitempty" xml:"Period,omitempty"`
	AutoPay            *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	Bandwidth          *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	EnableIpsec        *bool   `json:"EnableIpsec,omitempty" xml:"EnableIpsec,omitempty"`
	EnableSsl          *bool   `json:"EnableSsl,omitempty" xml:"EnableSsl,omitempty"`
	SslConnections     *int    `json:"SslConnections,omitempty" xml:"SslConnections,omitempty"`
	VSwitchId          *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateVpnGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateVpnGatewayRequest) SetRegionId(v string) *CreateVpnGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetName(v string) *CreateVpnGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetVpcId(v string) *CreateVpnGatewayRequest {
	s.VpcId = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetInstanceChargeType(v string) *CreateVpnGatewayRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetPeriod(v int) *CreateVpnGatewayRequest {
	s.Period = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetAutoPay(v bool) *CreateVpnGatewayRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetBandwidth(v int) *CreateVpnGatewayRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetEnableIpsec(v bool) *CreateVpnGatewayRequest {
	s.EnableIpsec = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetEnableSsl(v bool) *CreateVpnGatewayRequest {
	s.EnableSsl = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetSslConnections(v int) *CreateVpnGatewayRequest {
	s.SslConnections = &v
	return s
}

func (s *CreateVpnGatewayRequest) SetVSwitchId(v string) *CreateVpnGatewayRequest {
	s.VSwitchId = &v
	return s
}

type CreateVpnGatewayResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	OrderId      *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s CreateVpnGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateVpnGatewayResponse) SetRequestId(v string) *CreateVpnGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVpnGatewayResponse) SetVpnGatewayId(v string) *CreateVpnGatewayResponse {
	s.VpnGatewayId = &v
	return s
}

func (s *CreateVpnGatewayResponse) SetName(v string) *CreateVpnGatewayResponse {
	s.Name = &v
	return s
}

func (s *CreateVpnGatewayResponse) SetOrderId(v int64) *CreateVpnGatewayResponse {
	s.OrderId = &v
	return s
}

type MoveResourceGroupRequest struct {
	ResourceId         *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	ResourceType       *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	NewResourceGroupId *string `json:"NewResourceGroupId,omitempty" xml:"NewResourceGroupId,omitempty" require:"true"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s MoveResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupRequest) SetResourceId(v string) *MoveResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceType(v string) *MoveResourceGroupRequest {
	s.ResourceType = &v
	return s
}

func (s *MoveResourceGroupRequest) SetNewResourceGroupId(v string) *MoveResourceGroupRequest {
	s.NewResourceGroupId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetRegionId(v string) *MoveResourceGroupRequest {
	s.RegionId = &v
	return s
}

type MoveResourceGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s MoveResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupResponse) SetRequestId(v string) *MoveResourceGroupResponse {
	s.RequestId = &v
	return s
}

type RevokeInstanceFromCenRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	CenId        *string `json:"CenId,omitempty" xml:"CenId,omitempty" require:"true"`
	CenOwnerId   *int64  `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s RevokeInstanceFromCenRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromCenRequest) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromCenRequest) SetRegionId(v string) *RevokeInstanceFromCenRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeInstanceFromCenRequest) SetInstanceId(v string) *RevokeInstanceFromCenRequest {
	s.InstanceId = &v
	return s
}

func (s *RevokeInstanceFromCenRequest) SetInstanceType(v string) *RevokeInstanceFromCenRequest {
	s.InstanceType = &v
	return s
}

func (s *RevokeInstanceFromCenRequest) SetCenId(v string) *RevokeInstanceFromCenRequest {
	s.CenId = &v
	return s
}

func (s *RevokeInstanceFromCenRequest) SetCenOwnerId(v int64) *RevokeInstanceFromCenRequest {
	s.CenOwnerId = &v
	return s
}

func (s *RevokeInstanceFromCenRequest) SetClientToken(v string) *RevokeInstanceFromCenRequest {
	s.ClientToken = &v
	return s
}

type RevokeInstanceFromCenResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RevokeInstanceFromCenResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromCenResponse) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromCenResponse) SetRequestId(v string) *RevokeInstanceFromCenResponse {
	s.RequestId = &v
	return s
}

type GrantInstanceToCenRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	CenId        *string `json:"CenId,omitempty" xml:"CenId,omitempty" require:"true"`
	CenOwnerId   *int64  `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s GrantInstanceToCenRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantInstanceToCenRequest) GoString() string {
	return s.String()
}

func (s *GrantInstanceToCenRequest) SetRegionId(v string) *GrantInstanceToCenRequest {
	s.RegionId = &v
	return s
}

func (s *GrantInstanceToCenRequest) SetInstanceId(v string) *GrantInstanceToCenRequest {
	s.InstanceId = &v
	return s
}

func (s *GrantInstanceToCenRequest) SetInstanceType(v string) *GrantInstanceToCenRequest {
	s.InstanceType = &v
	return s
}

func (s *GrantInstanceToCenRequest) SetCenId(v string) *GrantInstanceToCenRequest {
	s.CenId = &v
	return s
}

func (s *GrantInstanceToCenRequest) SetCenOwnerId(v int64) *GrantInstanceToCenRequest {
	s.CenOwnerId = &v
	return s
}

func (s *GrantInstanceToCenRequest) SetClientToken(v string) *GrantInstanceToCenRequest {
	s.ClientToken = &v
	return s
}

type GrantInstanceToCenResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s GrantInstanceToCenResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantInstanceToCenResponse) GoString() string {
	return s.String()
}

func (s *GrantInstanceToCenResponse) SetRequestId(v string) *GrantInstanceToCenResponse {
	s.RequestId = &v
	return s
}

type DescribeGrantRulesToCenRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DescribeGrantRulesToCenRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesToCenRequest) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesToCenRequest) SetRegionId(v string) *DescribeGrantRulesToCenRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeGrantRulesToCenRequest) SetInstanceId(v string) *DescribeGrantRulesToCenRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeGrantRulesToCenRequest) SetInstanceType(v string) *DescribeGrantRulesToCenRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeGrantRulesToCenRequest) SetResourceGroupId(v string) *DescribeGrantRulesToCenRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeGrantRulesToCenRequest) SetClientToken(v string) *DescribeGrantRulesToCenRequest {
	s.ClientToken = &v
	return s
}

type DescribeGrantRulesToCenResponse struct {
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount    *int                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber    *int                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize      *int                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CenGrantRules *DescribeGrantRulesToCenResponseCenGrantRules `json:"CenGrantRules,omitempty" xml:"CenGrantRules,omitempty" require:"true" type:"Struct"`
}

func (s DescribeGrantRulesToCenResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesToCenResponse) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesToCenResponse) SetRequestId(v string) *DescribeGrantRulesToCenResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeGrantRulesToCenResponse) SetTotalCount(v int) *DescribeGrantRulesToCenResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeGrantRulesToCenResponse) SetPageNumber(v int) *DescribeGrantRulesToCenResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeGrantRulesToCenResponse) SetPageSize(v int) *DescribeGrantRulesToCenResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeGrantRulesToCenResponse) SetCenGrantRules(v *DescribeGrantRulesToCenResponseCenGrantRules) *DescribeGrantRulesToCenResponse {
	s.CenGrantRules = v
	return s
}

type DescribeGrantRulesToCenResponseCenGrantRules struct {
	CbnGrantRule []*DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule `json:"CbnGrantRule,omitempty" xml:"CbnGrantRule,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeGrantRulesToCenResponseCenGrantRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesToCenResponseCenGrantRules) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesToCenResponseCenGrantRules) SetCbnGrantRule(v []*DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule) *DescribeGrantRulesToCenResponseCenGrantRules {
	s.CbnGrantRule = v
	return s
}

type DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule struct {
	CenInstanceId *string `json:"CenInstanceId,omitempty" xml:"CenInstanceId,omitempty" require:"true"`
	CenOwnerId    *int64  `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty" require:"true"`
	CreationTime  *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
}

func (s DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule) SetCenInstanceId(v string) *DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule {
	s.CenInstanceId = &v
	return s
}

func (s *DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule) SetCenOwnerId(v int64) *DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule {
	s.CenOwnerId = &v
	return s
}

func (s *DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule) SetCreationTime(v string) *DescribeGrantRulesToCenResponseCenGrantRulesCbnGrantRule {
	s.CreationTime = &v
	return s
}

type ModifySslVpnServerRequest struct {
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnServerId        *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ClientIpPool          *string `json:"ClientIpPool,omitempty" xml:"ClientIpPool,omitempty"`
	LocalSubnet           *string `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty"`
	Proto                 *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	Cipher                *string `json:"Cipher,omitempty" xml:"Cipher,omitempty"`
	Port                  *int    `json:"Port,omitempty" xml:"Port,omitempty"`
	Compress              *bool   `json:"Compress,omitempty" xml:"Compress,omitempty"`
	EnableMultiFactorAuth *bool   `json:"EnableMultiFactorAuth,omitempty" xml:"EnableMultiFactorAuth,omitempty"`
	IDaaSInstanceId       *string `json:"IDaaSInstanceId,omitempty" xml:"IDaaSInstanceId,omitempty"`
}

func (s ModifySslVpnServerRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySslVpnServerRequest) GoString() string {
	return s.String()
}

func (s *ModifySslVpnServerRequest) SetClientToken(v string) *ModifySslVpnServerRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetRegionId(v string) *ModifySslVpnServerRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetSslVpnServerId(v string) *ModifySslVpnServerRequest {
	s.SslVpnServerId = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetName(v string) *ModifySslVpnServerRequest {
	s.Name = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetClientIpPool(v string) *ModifySslVpnServerRequest {
	s.ClientIpPool = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetLocalSubnet(v string) *ModifySslVpnServerRequest {
	s.LocalSubnet = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetProto(v string) *ModifySslVpnServerRequest {
	s.Proto = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetCipher(v string) *ModifySslVpnServerRequest {
	s.Cipher = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetPort(v int) *ModifySslVpnServerRequest {
	s.Port = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetCompress(v bool) *ModifySslVpnServerRequest {
	s.Compress = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetEnableMultiFactorAuth(v bool) *ModifySslVpnServerRequest {
	s.EnableMultiFactorAuth = &v
	return s
}

func (s *ModifySslVpnServerRequest) SetIDaaSInstanceId(v string) *ModifySslVpnServerRequest {
	s.IDaaSInstanceId = &v
	return s
}

type ModifySslVpnServerResponse struct {
	RequestId             *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnServerId        *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
	VpnGatewayId          *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	LocalSubnet           *string `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	ClientIpPool          *string `json:"ClientIpPool,omitempty" xml:"ClientIpPool,omitempty" require:"true"`
	CreateTime            *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Cipher                *string `json:"Cipher,omitempty" xml:"Cipher,omitempty" require:"true"`
	Proto                 *string `json:"Proto,omitempty" xml:"Proto,omitempty" require:"true"`
	Port                  *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	Compress              *bool   `json:"Compress,omitempty" xml:"Compress,omitempty" require:"true"`
	Connections           *int    `json:"Connections,omitempty" xml:"Connections,omitempty" require:"true"`
	MaxConnections        *int    `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty" require:"true"`
	InternetIp            *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty" require:"true"`
	EnableMultiFactorAuth *bool   `json:"EnableMultiFactorAuth,omitempty" xml:"EnableMultiFactorAuth,omitempty" require:"true"`
	IDaaSInstanceId       *string `json:"IDaaSInstanceId,omitempty" xml:"IDaaSInstanceId,omitempty" require:"true"`
}

func (s ModifySslVpnServerResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySslVpnServerResponse) GoString() string {
	return s.String()
}

func (s *ModifySslVpnServerResponse) SetRequestId(v string) *ModifySslVpnServerResponse {
	s.RequestId = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetRegionId(v string) *ModifySslVpnServerResponse {
	s.RegionId = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetSslVpnServerId(v string) *ModifySslVpnServerResponse {
	s.SslVpnServerId = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetVpnGatewayId(v string) *ModifySslVpnServerResponse {
	s.VpnGatewayId = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetName(v string) *ModifySslVpnServerResponse {
	s.Name = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetLocalSubnet(v string) *ModifySslVpnServerResponse {
	s.LocalSubnet = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetClientIpPool(v string) *ModifySslVpnServerResponse {
	s.ClientIpPool = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetCreateTime(v int64) *ModifySslVpnServerResponse {
	s.CreateTime = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetCipher(v string) *ModifySslVpnServerResponse {
	s.Cipher = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetProto(v string) *ModifySslVpnServerResponse {
	s.Proto = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetPort(v int) *ModifySslVpnServerResponse {
	s.Port = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetCompress(v bool) *ModifySslVpnServerResponse {
	s.Compress = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetConnections(v int) *ModifySslVpnServerResponse {
	s.Connections = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetMaxConnections(v int) *ModifySslVpnServerResponse {
	s.MaxConnections = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetInternetIp(v string) *ModifySslVpnServerResponse {
	s.InternetIp = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetEnableMultiFactorAuth(v bool) *ModifySslVpnServerResponse {
	s.EnableMultiFactorAuth = &v
	return s
}

func (s *ModifySslVpnServerResponse) SetIDaaSInstanceId(v string) *ModifySslVpnServerResponse {
	s.IDaaSInstanceId = &v
	return s
}

type ModifySslVpnClientCertRequest struct {
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifySslVpnClientCertRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySslVpnClientCertRequest) GoString() string {
	return s.String()
}

func (s *ModifySslVpnClientCertRequest) SetClientToken(v string) *ModifySslVpnClientCertRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySslVpnClientCertRequest) SetRegionId(v string) *ModifySslVpnClientCertRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySslVpnClientCertRequest) SetSslVpnClientCertId(v string) *ModifySslVpnClientCertRequest {
	s.SslVpnClientCertId = &v
	return s
}

func (s *ModifySslVpnClientCertRequest) SetName(v string) *ModifySslVpnClientCertRequest {
	s.Name = &v
	return s
}

type ModifySslVpnClientCertResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty" require:"true"`
}

func (s ModifySslVpnClientCertResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySslVpnClientCertResponse) GoString() string {
	return s.String()
}

func (s *ModifySslVpnClientCertResponse) SetRequestId(v string) *ModifySslVpnClientCertResponse {
	s.RequestId = &v
	return s
}

func (s *ModifySslVpnClientCertResponse) SetName(v string) *ModifySslVpnClientCertResponse {
	s.Name = &v
	return s
}

func (s *ModifySslVpnClientCertResponse) SetSslVpnClientCertId(v string) *ModifySslVpnClientCertResponse {
	s.SslVpnClientCertId = &v
	return s
}

type DescribeSslVpnServersRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnServerId *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty"`
	VpnGatewayId   *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber     *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSslVpnServersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnServersRequest) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnServersRequest) SetRegionId(v string) *DescribeSslVpnServersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSslVpnServersRequest) SetSslVpnServerId(v string) *DescribeSslVpnServersRequest {
	s.SslVpnServerId = &v
	return s
}

func (s *DescribeSslVpnServersRequest) SetVpnGatewayId(v string) *DescribeSslVpnServersRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeSslVpnServersRequest) SetName(v string) *DescribeSslVpnServersRequest {
	s.Name = &v
	return s
}

func (s *DescribeSslVpnServersRequest) SetPageNumber(v int) *DescribeSslVpnServersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSslVpnServersRequest) SetPageSize(v int) *DescribeSslVpnServersRequest {
	s.PageSize = &v
	return s
}

type DescribeSslVpnServersResponse struct {
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount    *int                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber    *int                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize      *int                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	SslVpnServers *DescribeSslVpnServersResponseSslVpnServers `json:"SslVpnServers,omitempty" xml:"SslVpnServers,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSslVpnServersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnServersResponse) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnServersResponse) SetRequestId(v string) *DescribeSslVpnServersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSslVpnServersResponse) SetTotalCount(v int) *DescribeSslVpnServersResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeSslVpnServersResponse) SetPageNumber(v int) *DescribeSslVpnServersResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSslVpnServersResponse) SetPageSize(v int) *DescribeSslVpnServersResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeSslVpnServersResponse) SetSslVpnServers(v *DescribeSslVpnServersResponseSslVpnServers) *DescribeSslVpnServersResponse {
	s.SslVpnServers = v
	return s
}

type DescribeSslVpnServersResponseSslVpnServers struct {
	SslVpnServer []*DescribeSslVpnServersResponseSslVpnServersSslVpnServer `json:"SslVpnServer,omitempty" xml:"SslVpnServer,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSslVpnServersResponseSslVpnServers) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnServersResponseSslVpnServers) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnServersResponseSslVpnServers) SetSslVpnServer(v []*DescribeSslVpnServersResponseSslVpnServersSslVpnServer) *DescribeSslVpnServersResponseSslVpnServers {
	s.SslVpnServer = v
	return s
}

type DescribeSslVpnServersResponseSslVpnServersSslVpnServer struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnServerId        *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
	VpnGatewayId          *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	LocalSubnet           *string `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	ClientIpPool          *string `json:"ClientIpPool,omitempty" xml:"ClientIpPool,omitempty" require:"true"`
	CreateTime            *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Cipher                *string `json:"Cipher,omitempty" xml:"Cipher,omitempty" require:"true"`
	Proto                 *string `json:"Proto,omitempty" xml:"Proto,omitempty" require:"true"`
	Port                  *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	Compress              *bool   `json:"Compress,omitempty" xml:"Compress,omitempty" require:"true"`
	Connections           *int    `json:"Connections,omitempty" xml:"Connections,omitempty" require:"true"`
	MaxConnections        *int    `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty" require:"true"`
	InternetIp            *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty" require:"true"`
	EnableMultiFactorAuth *bool   `json:"EnableMultiFactorAuth,omitempty" xml:"EnableMultiFactorAuth,omitempty" require:"true"`
	IDaaSInstanceId       *string `json:"IDaaSInstanceId,omitempty" xml:"IDaaSInstanceId,omitempty" require:"true"`
}

func (s DescribeSslVpnServersResponseSslVpnServersSslVpnServer) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnServersResponseSslVpnServersSslVpnServer) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetRegionId(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.RegionId = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetSslVpnServerId(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.SslVpnServerId = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetVpnGatewayId(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetName(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.Name = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetLocalSubnet(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.LocalSubnet = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetClientIpPool(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.ClientIpPool = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetCreateTime(v int64) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.CreateTime = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetCipher(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.Cipher = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetProto(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.Proto = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetPort(v int) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.Port = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetCompress(v bool) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.Compress = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetConnections(v int) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.Connections = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetMaxConnections(v int) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.MaxConnections = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetInternetIp(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.InternetIp = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetEnableMultiFactorAuth(v bool) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.EnableMultiFactorAuth = &v
	return s
}

func (s *DescribeSslVpnServersResponseSslVpnServersSslVpnServer) SetIDaaSInstanceId(v string) *DescribeSslVpnServersResponseSslVpnServersSslVpnServer {
	s.IDaaSInstanceId = &v
	return s
}

type DescribeSslVpnClientCertsRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnServerId     *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber         *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSslVpnClientCertsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnClientCertsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnClientCertsRequest) SetRegionId(v string) *DescribeSslVpnClientCertsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSslVpnClientCertsRequest) SetSslVpnServerId(v string) *DescribeSslVpnClientCertsRequest {
	s.SslVpnServerId = &v
	return s
}

func (s *DescribeSslVpnClientCertsRequest) SetSslVpnClientCertId(v string) *DescribeSslVpnClientCertsRequest {
	s.SslVpnClientCertId = &v
	return s
}

func (s *DescribeSslVpnClientCertsRequest) SetName(v string) *DescribeSslVpnClientCertsRequest {
	s.Name = &v
	return s
}

func (s *DescribeSslVpnClientCertsRequest) SetPageNumber(v int) *DescribeSslVpnClientCertsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSslVpnClientCertsRequest) SetPageSize(v int) *DescribeSslVpnClientCertsRequest {
	s.PageSize = &v
	return s
}

type DescribeSslVpnClientCertsResponse struct {
	RequestId            *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount           *int                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber           *int                                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize             *int                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	SslVpnClientCertKeys *DescribeSslVpnClientCertsResponseSslVpnClientCertKeys `json:"SslVpnClientCertKeys,omitempty" xml:"SslVpnClientCertKeys,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSslVpnClientCertsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnClientCertsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnClientCertsResponse) SetRequestId(v string) *DescribeSslVpnClientCertsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponse) SetTotalCount(v int) *DescribeSslVpnClientCertsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponse) SetPageNumber(v int) *DescribeSslVpnClientCertsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponse) SetPageSize(v int) *DescribeSslVpnClientCertsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponse) SetSslVpnClientCertKeys(v *DescribeSslVpnClientCertsResponseSslVpnClientCertKeys) *DescribeSslVpnClientCertsResponse {
	s.SslVpnClientCertKeys = v
	return s
}

type DescribeSslVpnClientCertsResponseSslVpnClientCertKeys struct {
	SslVpnClientCertKey []*DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey `json:"SslVpnClientCertKey,omitempty" xml:"SslVpnClientCertKey,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSslVpnClientCertsResponseSslVpnClientCertKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnClientCertsResponseSslVpnClientCertKeys) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeys) SetSslVpnClientCertKey(v []*DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeys {
	s.SslVpnClientCertKey = v
	return s
}

type DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	SslVpnServerId     *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime            *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) SetRegionId(v string) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey {
	s.RegionId = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) SetSslVpnClientCertId(v string) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey {
	s.SslVpnClientCertId = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) SetName(v string) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey {
	s.Name = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) SetSslVpnServerId(v string) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey {
	s.SslVpnServerId = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) SetCreateTime(v int64) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey {
	s.CreateTime = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) SetEndTime(v int64) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey {
	s.EndTime = &v
	return s
}

func (s *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey) SetStatus(v string) *DescribeSslVpnClientCertsResponseSslVpnClientCertKeysSslVpnClientCertKey {
	s.Status = &v
	return s
}

type DescribeSslVpnClientCertRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty" require:"true"`
}

func (s DescribeSslVpnClientCertRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnClientCertRequest) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnClientCertRequest) SetRegionId(v string) *DescribeSslVpnClientCertRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSslVpnClientCertRequest) SetSslVpnClientCertId(v string) *DescribeSslVpnClientCertRequest {
	s.SslVpnClientCertId = &v
	return s
}

type DescribeSslVpnClientCertResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	SslVpnServerId     *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
	CaCert             *string `json:"CaCert,omitempty" xml:"CaCert,omitempty" require:"true"`
	ClientCert         *string `json:"ClientCert,omitempty" xml:"ClientCert,omitempty" require:"true"`
	ClientKey          *string `json:"ClientKey,omitempty" xml:"ClientKey,omitempty" require:"true"`
	ClientConfig       *string `json:"ClientConfig,omitempty" xml:"ClientConfig,omitempty" require:"true"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime            *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeSslVpnClientCertResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSslVpnClientCertResponse) GoString() string {
	return s.String()
}

func (s *DescribeSslVpnClientCertResponse) SetRequestId(v string) *DescribeSslVpnClientCertResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetRegionId(v string) *DescribeSslVpnClientCertResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetSslVpnClientCertId(v string) *DescribeSslVpnClientCertResponse {
	s.SslVpnClientCertId = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetName(v string) *DescribeSslVpnClientCertResponse {
	s.Name = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetSslVpnServerId(v string) *DescribeSslVpnClientCertResponse {
	s.SslVpnServerId = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetCaCert(v string) *DescribeSslVpnClientCertResponse {
	s.CaCert = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetClientCert(v string) *DescribeSslVpnClientCertResponse {
	s.ClientCert = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetClientKey(v string) *DescribeSslVpnClientCertResponse {
	s.ClientKey = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetClientConfig(v string) *DescribeSslVpnClientCertResponse {
	s.ClientConfig = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetCreateTime(v int64) *DescribeSslVpnClientCertResponse {
	s.CreateTime = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetEndTime(v int64) *DescribeSslVpnClientCertResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeSslVpnClientCertResponse) SetStatus(v string) *DescribeSslVpnClientCertResponse {
	s.Status = &v
	return s
}

type DeleteSslVpnServerRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	SslVpnServerId *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
}

func (s DeleteSslVpnServerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSslVpnServerRequest) GoString() string {
	return s.String()
}

func (s *DeleteSslVpnServerRequest) SetRegionId(v string) *DeleteSslVpnServerRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSslVpnServerRequest) SetClientToken(v string) *DeleteSslVpnServerRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteSslVpnServerRequest) SetSslVpnServerId(v string) *DeleteSslVpnServerRequest {
	s.SslVpnServerId = &v
	return s
}

type DeleteSslVpnServerResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteSslVpnServerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSslVpnServerResponse) GoString() string {
	return s.String()
}

func (s *DeleteSslVpnServerResponse) SetRequestId(v string) *DeleteSslVpnServerResponse {
	s.RequestId = &v
	return s
}

type DeleteSslVpnClientCertRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty" require:"true"`
}

func (s DeleteSslVpnClientCertRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSslVpnClientCertRequest) GoString() string {
	return s.String()
}

func (s *DeleteSslVpnClientCertRequest) SetRegionId(v string) *DeleteSslVpnClientCertRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSslVpnClientCertRequest) SetClientToken(v string) *DeleteSslVpnClientCertRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteSslVpnClientCertRequest) SetSslVpnClientCertId(v string) *DeleteSslVpnClientCertRequest {
	s.SslVpnClientCertId = &v
	return s
}

type DeleteSslVpnClientCertResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteSslVpnClientCertResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSslVpnClientCertResponse) GoString() string {
	return s.String()
}

func (s *DeleteSslVpnClientCertResponse) SetRequestId(v string) *DeleteSslVpnClientCertResponse {
	s.RequestId = &v
	return s
}

type CreateSslVpnServerRequest struct {
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnGatewayId          *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ClientIpPool          *string `json:"ClientIpPool,omitempty" xml:"ClientIpPool,omitempty" require:"true"`
	LocalSubnet           *string `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	Proto                 *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	Cipher                *string `json:"Cipher,omitempty" xml:"Cipher,omitempty"`
	Port                  *int    `json:"Port,omitempty" xml:"Port,omitempty"`
	Compress              *bool   `json:"Compress,omitempty" xml:"Compress,omitempty"`
	EnableMultiFactorAuth *bool   `json:"EnableMultiFactorAuth,omitempty" xml:"EnableMultiFactorAuth,omitempty"`
	IDaaSInstanceId       *string `json:"IDaaSInstanceId,omitempty" xml:"IDaaSInstanceId,omitempty"`
}

func (s CreateSslVpnServerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSslVpnServerRequest) GoString() string {
	return s.String()
}

func (s *CreateSslVpnServerRequest) SetClientToken(v string) *CreateSslVpnServerRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetRegionId(v string) *CreateSslVpnServerRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetVpnGatewayId(v string) *CreateSslVpnServerRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetName(v string) *CreateSslVpnServerRequest {
	s.Name = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetClientIpPool(v string) *CreateSslVpnServerRequest {
	s.ClientIpPool = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetLocalSubnet(v string) *CreateSslVpnServerRequest {
	s.LocalSubnet = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetProto(v string) *CreateSslVpnServerRequest {
	s.Proto = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetCipher(v string) *CreateSslVpnServerRequest {
	s.Cipher = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetPort(v int) *CreateSslVpnServerRequest {
	s.Port = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetCompress(v bool) *CreateSslVpnServerRequest {
	s.Compress = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetEnableMultiFactorAuth(v bool) *CreateSslVpnServerRequest {
	s.EnableMultiFactorAuth = &v
	return s
}

func (s *CreateSslVpnServerRequest) SetIDaaSInstanceId(v string) *CreateSslVpnServerRequest {
	s.IDaaSInstanceId = &v
	return s
}

type CreateSslVpnServerResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SslVpnServerId *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s CreateSslVpnServerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSslVpnServerResponse) GoString() string {
	return s.String()
}

func (s *CreateSslVpnServerResponse) SetRequestId(v string) *CreateSslVpnServerResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSslVpnServerResponse) SetSslVpnServerId(v string) *CreateSslVpnServerResponse {
	s.SslVpnServerId = &v
	return s
}

func (s *CreateSslVpnServerResponse) SetName(v string) *CreateSslVpnServerResponse {
	s.Name = &v
	return s
}

type CreateSslVpnClientCertRequest struct {
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SslVpnServerId *string `json:"SslVpnServerId,omitempty" xml:"SslVpnServerId,omitempty" require:"true"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateSslVpnClientCertRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSslVpnClientCertRequest) GoString() string {
	return s.String()
}

func (s *CreateSslVpnClientCertRequest) SetClientToken(v string) *CreateSslVpnClientCertRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSslVpnClientCertRequest) SetRegionId(v string) *CreateSslVpnClientCertRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSslVpnClientCertRequest) SetSslVpnServerId(v string) *CreateSslVpnClientCertRequest {
	s.SslVpnServerId = &v
	return s
}

func (s *CreateSslVpnClientCertRequest) SetName(v string) *CreateSslVpnClientCertRequest {
	s.Name = &v
	return s
}

type CreateSslVpnClientCertResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	SslVpnClientCertId *string `json:"SslVpnClientCertId,omitempty" xml:"SslVpnClientCertId,omitempty" require:"true"`
}

func (s CreateSslVpnClientCertResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSslVpnClientCertResponse) GoString() string {
	return s.String()
}

func (s *CreateSslVpnClientCertResponse) SetRequestId(v string) *CreateSslVpnClientCertResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSslVpnClientCertResponse) SetName(v string) *CreateSslVpnClientCertResponse {
	s.Name = &v
	return s
}

func (s *CreateSslVpnClientCertResponse) SetSslVpnClientCertId(v string) *CreateSslVpnClientCertResponse {
	s.SslVpnClientCertId = &v
	return s
}

type RemoveGlobalAccelerationInstanceIpRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	IpInstanceId                 *string `json:"IpInstanceId,omitempty" xml:"IpInstanceId,omitempty" require:"true"`
}

func (s RemoveGlobalAccelerationInstanceIpRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveGlobalAccelerationInstanceIpRequest) GoString() string {
	return s.String()
}

func (s *RemoveGlobalAccelerationInstanceIpRequest) SetRegionId(v string) *RemoveGlobalAccelerationInstanceIpRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveGlobalAccelerationInstanceIpRequest) SetGlobalAccelerationInstanceId(v string) *RemoveGlobalAccelerationInstanceIpRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *RemoveGlobalAccelerationInstanceIpRequest) SetIpInstanceId(v string) *RemoveGlobalAccelerationInstanceIpRequest {
	s.IpInstanceId = &v
	return s
}

type RemoveGlobalAccelerationInstanceIpResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RemoveGlobalAccelerationInstanceIpResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveGlobalAccelerationInstanceIpResponse) GoString() string {
	return s.String()
}

func (s *RemoveGlobalAccelerationInstanceIpResponse) SetRequestId(v string) *RemoveGlobalAccelerationInstanceIpResponse {
	s.RequestId = &v
	return s
}

type AddGlobalAccelerationInstanceIpRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	IpInstanceId                 *string `json:"IpInstanceId,omitempty" xml:"IpInstanceId,omitempty" require:"true"`
}

func (s AddGlobalAccelerationInstanceIpRequest) String() string {
	return tea.Prettify(s)
}

func (s AddGlobalAccelerationInstanceIpRequest) GoString() string {
	return s.String()
}

func (s *AddGlobalAccelerationInstanceIpRequest) SetRegionId(v string) *AddGlobalAccelerationInstanceIpRequest {
	s.RegionId = &v
	return s
}

func (s *AddGlobalAccelerationInstanceIpRequest) SetGlobalAccelerationInstanceId(v string) *AddGlobalAccelerationInstanceIpRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *AddGlobalAccelerationInstanceIpRequest) SetIpInstanceId(v string) *AddGlobalAccelerationInstanceIpRequest {
	s.IpInstanceId = &v
	return s
}

type AddGlobalAccelerationInstanceIpResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AddGlobalAccelerationInstanceIpResponse) String() string {
	return tea.Prettify(s)
}

func (s AddGlobalAccelerationInstanceIpResponse) GoString() string {
	return s.String()
}

func (s *AddGlobalAccelerationInstanceIpResponse) SetRequestId(v string) *AddGlobalAccelerationInstanceIpResponse {
	s.RequestId = &v
	return s
}

type DescribeRouteTableListRequest struct {
	RouterType      *string `json:"RouterType,omitempty" xml:"RouterType,omitempty"`
	RouterId        *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RouteTableId    *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	RouteTableName  *string `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty"`
	PageNumber      *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeRouteTableListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTableListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouteTableListRequest) SetRouterType(v string) *DescribeRouteTableListRequest {
	s.RouterType = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetRouterId(v string) *DescribeRouteTableListRequest {
	s.RouterId = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetVpcId(v string) *DescribeRouteTableListRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetRouteTableId(v string) *DescribeRouteTableListRequest {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetRouteTableName(v string) *DescribeRouteTableListRequest {
	s.RouteTableName = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetPageNumber(v int) *DescribeRouteTableListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetPageSize(v int) *DescribeRouteTableListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetResourceGroupId(v string) *DescribeRouteTableListRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRouteTableListRequest) SetRegionId(v string) *DescribeRouteTableListRequest {
	s.RegionId = &v
	return s
}

type DescribeRouteTableListResponse struct {
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code            *string                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                        `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success         *bool                                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	PageSize        *int                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageNumber      *int                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	TotalCount      *int                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	RouterTableList *DescribeRouteTableListResponseRouterTableList `json:"RouterTableList,omitempty" xml:"RouterTableList,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteTableListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTableListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouteTableListResponse) SetRequestId(v string) *DescribeRouteTableListResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRouteTableListResponse) SetCode(v string) *DescribeRouteTableListResponse {
	s.Code = &v
	return s
}

func (s *DescribeRouteTableListResponse) SetMessage(v string) *DescribeRouteTableListResponse {
	s.Message = &v
	return s
}

func (s *DescribeRouteTableListResponse) SetSuccess(v bool) *DescribeRouteTableListResponse {
	s.Success = &v
	return s
}

func (s *DescribeRouteTableListResponse) SetPageSize(v int) *DescribeRouteTableListResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteTableListResponse) SetPageNumber(v int) *DescribeRouteTableListResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTableListResponse) SetTotalCount(v int) *DescribeRouteTableListResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeRouteTableListResponse) SetRouterTableList(v *DescribeRouteTableListResponseRouterTableList) *DescribeRouteTableListResponse {
	s.RouterTableList = v
	return s
}

type DescribeRouteTableListResponseRouterTableList struct {
	RouterTableListType []*DescribeRouteTableListResponseRouterTableListRouterTableListType `json:"RouterTableListType,omitempty" xml:"RouterTableListType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteTableListResponseRouterTableList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTableListResponseRouterTableList) GoString() string {
	return s.String()
}

func (s *DescribeRouteTableListResponseRouterTableList) SetRouterTableListType(v []*DescribeRouteTableListResponseRouterTableListRouterTableListType) *DescribeRouteTableListResponseRouterTableList {
	s.RouterTableListType = v
	return s
}

type DescribeRouteTableListResponseRouterTableListRouterTableListType struct {
	VpcId           *string                                                                     `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	RouterType      *string                                                                     `json:"RouterType,omitempty" xml:"RouterType,omitempty" require:"true"`
	RouterId        *string                                                                     `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	RouteTableId    *string                                                                     `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	RouteTableName  *string                                                                     `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty" require:"true"`
	RouteTableType  *string                                                                     `json:"RouteTableType,omitempty" xml:"RouteTableType,omitempty" require:"true"`
	Description     *string                                                                     `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	ResourceGroupId *string                                                                     `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	CreationTime    *string                                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Status          *string                                                                     `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	OwnerId         *int64                                                                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	Tags            *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTags       `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
	VSwitchIds      *DescribeRouteTableListResponseRouterTableListRouterTableListTypeVSwitchIds `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListType) GoString() string {
	return s.String()
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetVpcId(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.VpcId = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetRouterType(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.RouterType = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetRouterId(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.RouterId = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetRouteTableId(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetRouteTableName(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.RouteTableName = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetRouteTableType(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.RouteTableType = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetDescription(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.Description = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetResourceGroupId(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetCreationTime(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetStatus(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.Status = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetOwnerId(v int64) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.OwnerId = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetTags(v *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTags) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.Tags = v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListType) SetVSwitchIds(v *DescribeRouteTableListResponseRouterTableListRouterTableListTypeVSwitchIds) *DescribeRouteTableListResponseRouterTableListRouterTableListType {
	s.VSwitchIds = v
	return s
}

type DescribeRouteTableListResponseRouterTableListRouterTableListTypeTags struct {
	Tag []*DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListTypeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListTypeTags) GoString() string {
	return s.String()
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTags) SetTag(v []*DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag) *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTags {
	s.Tag = v
	return s
}

type DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag) SetKey(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag) SetValue(v string) *DescribeRouteTableListResponseRouterTableListRouterTableListTypeTagsTag {
	s.Value = &v
	return s
}

type DescribeRouteTableListResponseRouterTableListRouterTableListTypeVSwitchIds struct {
	// VSwitchId
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListTypeVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTableListResponseRouterTableListRouterTableListTypeVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeRouteTableListResponseRouterTableListRouterTableListTypeVSwitchIds) SetVSwitchId(v []*string) *DescribeRouteTableListResponseRouterTableListRouterTableListTypeVSwitchIds {
	s.VSwitchId = v
	return s
}

type ModifyRouteTableAttributesRequest struct {
	RouteTableId   *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	RouteTableName *string `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s ModifyRouteTableAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouteTableAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouteTableAttributesRequest) SetRouteTableId(v string) *ModifyRouteTableAttributesRequest {
	s.RouteTableId = &v
	return s
}

func (s *ModifyRouteTableAttributesRequest) SetRouteTableName(v string) *ModifyRouteTableAttributesRequest {
	s.RouteTableName = &v
	return s
}

func (s *ModifyRouteTableAttributesRequest) SetDescription(v string) *ModifyRouteTableAttributesRequest {
	s.Description = &v
	return s
}

func (s *ModifyRouteTableAttributesRequest) SetRegionId(v string) *ModifyRouteTableAttributesRequest {
	s.RegionId = &v
	return s
}

type ModifyRouteTableAttributesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s ModifyRouteTableAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouteTableAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouteTableAttributesResponse) SetRequestId(v string) *ModifyRouteTableAttributesResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyRouteTableAttributesResponse) SetCode(v string) *ModifyRouteTableAttributesResponse {
	s.Code = &v
	return s
}

func (s *ModifyRouteTableAttributesResponse) SetMessage(v string) *ModifyRouteTableAttributesResponse {
	s.Message = &v
	return s
}

func (s *ModifyRouteTableAttributesResponse) SetSuccess(v bool) *ModifyRouteTableAttributesResponse {
	s.Success = &v
	return s
}

type DescribeBgpNetworksRequest struct {
	RouterId   *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBgpNetworksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpNetworksRequest) GoString() string {
	return s.String()
}

func (s *DescribeBgpNetworksRequest) SetRouterId(v string) *DescribeBgpNetworksRequest {
	s.RouterId = &v
	return s
}

func (s *DescribeBgpNetworksRequest) SetRegionId(v string) *DescribeBgpNetworksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBgpNetworksRequest) SetPageNumber(v int) *DescribeBgpNetworksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBgpNetworksRequest) SetPageSize(v int) *DescribeBgpNetworksRequest {
	s.PageSize = &v
	return s
}

type DescribeBgpNetworksResponse struct {
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount  *int                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber  *int                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *int                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	BgpNetworks *DescribeBgpNetworksResponseBgpNetworks `json:"BgpNetworks,omitempty" xml:"BgpNetworks,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBgpNetworksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpNetworksResponse) GoString() string {
	return s.String()
}

func (s *DescribeBgpNetworksResponse) SetRequestId(v string) *DescribeBgpNetworksResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBgpNetworksResponse) SetTotalCount(v int) *DescribeBgpNetworksResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeBgpNetworksResponse) SetPageNumber(v int) *DescribeBgpNetworksResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeBgpNetworksResponse) SetPageSize(v int) *DescribeBgpNetworksResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeBgpNetworksResponse) SetBgpNetworks(v *DescribeBgpNetworksResponseBgpNetworks) *DescribeBgpNetworksResponse {
	s.BgpNetworks = v
	return s
}

type DescribeBgpNetworksResponseBgpNetworks struct {
	BgpNetwork []*DescribeBgpNetworksResponseBgpNetworksBgpNetwork `json:"BgpNetwork,omitempty" xml:"BgpNetwork,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBgpNetworksResponseBgpNetworks) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpNetworksResponseBgpNetworks) GoString() string {
	return s.String()
}

func (s *DescribeBgpNetworksResponseBgpNetworks) SetBgpNetwork(v []*DescribeBgpNetworksResponseBgpNetworksBgpNetwork) *DescribeBgpNetworksResponseBgpNetworks {
	s.BgpNetwork = v
	return s
}

type DescribeBgpNetworksResponseBgpNetworksBgpNetwork struct {
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	DstCidrBlock *string `json:"DstCidrBlock,omitempty" xml:"DstCidrBlock,omitempty" require:"true"`
	RouterId     *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeBgpNetworksResponseBgpNetworksBgpNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpNetworksResponseBgpNetworksBgpNetwork) GoString() string {
	return s.String()
}

func (s *DescribeBgpNetworksResponseBgpNetworksBgpNetwork) SetVpcId(v string) *DescribeBgpNetworksResponseBgpNetworksBgpNetwork {
	s.VpcId = &v
	return s
}

func (s *DescribeBgpNetworksResponseBgpNetworksBgpNetwork) SetDstCidrBlock(v string) *DescribeBgpNetworksResponseBgpNetworksBgpNetwork {
	s.DstCidrBlock = &v
	return s
}

func (s *DescribeBgpNetworksResponseBgpNetworksBgpNetwork) SetRouterId(v string) *DescribeBgpNetworksResponseBgpNetworksBgpNetwork {
	s.RouterId = &v
	return s
}

func (s *DescribeBgpNetworksResponseBgpNetworksBgpNetwork) SetStatus(v string) *DescribeBgpNetworksResponseBgpNetworksBgpNetwork {
	s.Status = &v
	return s
}

type ModifyCommonBandwidthPackagePayTypeRequest struct {
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	PayType            *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	PricingCycle       *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	Duration           *int    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AutoPay            *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	Bandwidth          *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	KbpsBandwidth      *string `json:"KbpsBandwidth,omitempty" xml:"KbpsBandwidth,omitempty"`
	ResourceBid        *string `json:"ResourceBid,omitempty" xml:"ResourceBid,omitempty"`
	ResourceUid        *int64  `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s ModifyCommonBandwidthPackagePayTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackagePayTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetBandwidthPackageId(v string) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetPayType(v string) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.PayType = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetPricingCycle(v string) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.PricingCycle = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetDuration(v int) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetAutoPay(v bool) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetBandwidth(v string) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetKbpsBandwidth(v string) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.KbpsBandwidth = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetResourceBid(v string) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.ResourceBid = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetResourceUid(v int64) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.ResourceUid = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeRequest) SetRegionId(v string) *ModifyCommonBandwidthPackagePayTypeRequest {
	s.RegionId = &v
	return s
}

type ModifyCommonBandwidthPackagePayTypeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	OrderId   *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
}

func (s ModifyCommonBandwidthPackagePayTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackagePayTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackagePayTypeResponse) SetRequestId(v string) *ModifyCommonBandwidthPackagePayTypeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeResponse) SetOrderId(v int64) *ModifyCommonBandwidthPackagePayTypeResponse {
	s.OrderId = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeResponse) SetCode(v string) *ModifyCommonBandwidthPackagePayTypeResponse {
	s.Code = &v
	return s
}

func (s *ModifyCommonBandwidthPackagePayTypeResponse) SetMessage(v string) *ModifyCommonBandwidthPackagePayTypeResponse {
	s.Message = &v
	return s
}

type UnassociateGlobalAccelerationInstanceRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	InstanceType                 *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s UnassociateGlobalAccelerationInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateGlobalAccelerationInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnassociateGlobalAccelerationInstanceRequest) SetRegionId(v string) *UnassociateGlobalAccelerationInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateGlobalAccelerationInstanceRequest) SetGlobalAccelerationInstanceId(v string) *UnassociateGlobalAccelerationInstanceRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *UnassociateGlobalAccelerationInstanceRequest) SetInstanceType(v string) *UnassociateGlobalAccelerationInstanceRequest {
	s.InstanceType = &v
	return s
}

type UnassociateGlobalAccelerationInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnassociateGlobalAccelerationInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateGlobalAccelerationInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnassociateGlobalAccelerationInstanceResponse) SetRequestId(v string) *UnassociateGlobalAccelerationInstanceResponse {
	s.RequestId = &v
	return s
}

type ModifyGlobalAccelerationInstanceSpecRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	Bandwidth                    *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
}

func (s ModifyGlobalAccelerationInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyGlobalAccelerationInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyGlobalAccelerationInstanceSpecRequest) SetRegionId(v string) *ModifyGlobalAccelerationInstanceSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyGlobalAccelerationInstanceSpecRequest) SetGlobalAccelerationInstanceId(v string) *ModifyGlobalAccelerationInstanceSpecRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *ModifyGlobalAccelerationInstanceSpecRequest) SetBandwidth(v string) *ModifyGlobalAccelerationInstanceSpecRequest {
	s.Bandwidth = &v
	return s
}

type ModifyGlobalAccelerationInstanceSpecResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyGlobalAccelerationInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyGlobalAccelerationInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyGlobalAccelerationInstanceSpecResponse) SetRequestId(v string) *ModifyGlobalAccelerationInstanceSpecResponse {
	s.RequestId = &v
	return s
}

type ModifyGlobalAccelerationInstanceAttributesRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	Name                         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description                  *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyGlobalAccelerationInstanceAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyGlobalAccelerationInstanceAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyGlobalAccelerationInstanceAttributesRequest) SetRegionId(v string) *ModifyGlobalAccelerationInstanceAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyGlobalAccelerationInstanceAttributesRequest) SetGlobalAccelerationInstanceId(v string) *ModifyGlobalAccelerationInstanceAttributesRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *ModifyGlobalAccelerationInstanceAttributesRequest) SetName(v string) *ModifyGlobalAccelerationInstanceAttributesRequest {
	s.Name = &v
	return s
}

func (s *ModifyGlobalAccelerationInstanceAttributesRequest) SetDescription(v string) *ModifyGlobalAccelerationInstanceAttributesRequest {
	s.Description = &v
	return s
}

type ModifyGlobalAccelerationInstanceAttributesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyGlobalAccelerationInstanceAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyGlobalAccelerationInstanceAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyGlobalAccelerationInstanceAttributesResponse) SetRequestId(v string) *ModifyGlobalAccelerationInstanceAttributesResponse {
	s.RequestId = &v
	return s
}

type DescribeServerRelatedGlobalAccelerationInstancesRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ServerId   *string `json:"ServerId,omitempty" xml:"ServerId,omitempty" require:"true"`
	ServerType *string `json:"ServerType,omitempty" xml:"ServerType,omitempty"`
}

func (s DescribeServerRelatedGlobalAccelerationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerRelatedGlobalAccelerationInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesRequest) SetRegionId(v string) *DescribeServerRelatedGlobalAccelerationInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesRequest) SetServerId(v string) *DescribeServerRelatedGlobalAccelerationInstancesRequest {
	s.ServerId = &v
	return s
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesRequest) SetServerType(v string) *DescribeServerRelatedGlobalAccelerationInstancesRequest {
	s.ServerType = &v
	return s
}

type DescribeServerRelatedGlobalAccelerationInstancesResponse struct {
	RequestId                   *string                                                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	GlobalAccelerationInstances *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstances `json:"GlobalAccelerationInstances,omitempty" xml:"GlobalAccelerationInstances,omitempty" require:"true" type:"Struct"`
}

func (s DescribeServerRelatedGlobalAccelerationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerRelatedGlobalAccelerationInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesResponse) SetRequestId(v string) *DescribeServerRelatedGlobalAccelerationInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesResponse) SetGlobalAccelerationInstances(v *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstances) *DescribeServerRelatedGlobalAccelerationInstancesResponse {
	s.GlobalAccelerationInstances = v
	return s
}

type DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstances struct {
	GlobalAccelerationInstance []*DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance `json:"GlobalAccelerationInstance,omitempty" xml:"GlobalAccelerationInstance,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstances) GoString() string {
	return s.String()
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstances) SetGlobalAccelerationInstance(v []*DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstances {
	s.GlobalAccelerationInstance = v
	return s
}

type DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	IpAddress                    *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	ServerIpAddress              *string `json:"ServerIpAddress,omitempty" xml:"ServerIpAddress,omitempty" require:"true"`
}

func (s DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) GoString() string {
	return s.String()
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetRegionId(v string) *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetGlobalAccelerationInstanceId(v string) *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetIpAddress(v string) *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.IpAddress = &v
	return s
}

func (s *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetServerIpAddress(v string) *DescribeServerRelatedGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ServerIpAddress = &v
	return s
}

type DescribeGlobalAccelerationInstancesRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IncludeReservationData       *bool   `json:"IncludeReservationData,omitempty" xml:"IncludeReservationData,omitempty"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty"`
	IpAddress                    *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Name                         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status                       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	BandwidthType                *string `json:"BandwidthType,omitempty" xml:"BandwidthType,omitempty"`
	ServiceLocation              *string `json:"ServiceLocation,omitempty" xml:"ServiceLocation,omitempty"`
	ServerId                     *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	PageNumber                   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeGlobalAccelerationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetRegionId(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetIncludeReservationData(v bool) *DescribeGlobalAccelerationInstancesRequest {
	s.IncludeReservationData = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetGlobalAccelerationInstanceId(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetIpAddress(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.IpAddress = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetName(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.Name = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetStatus(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.Status = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetBandwidthType(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.BandwidthType = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetServiceLocation(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.ServiceLocation = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetServerId(v string) *DescribeGlobalAccelerationInstancesRequest {
	s.ServerId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetPageNumber(v int) *DescribeGlobalAccelerationInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesRequest) SetPageSize(v int) *DescribeGlobalAccelerationInstancesRequest {
	s.PageSize = &v
	return s
}

type DescribeGlobalAccelerationInstancesResponse struct {
	RequestId                   *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount                  *int                                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber                  *int                                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize                    *int                                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	GlobalAccelerationInstances *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstances `json:"GlobalAccelerationInstances,omitempty" xml:"GlobalAccelerationInstances,omitempty" require:"true" type:"Struct"`
}

func (s DescribeGlobalAccelerationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesResponse) SetRequestId(v string) *DescribeGlobalAccelerationInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponse) SetTotalCount(v int) *DescribeGlobalAccelerationInstancesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponse) SetPageNumber(v int) *DescribeGlobalAccelerationInstancesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponse) SetPageSize(v int) *DescribeGlobalAccelerationInstancesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponse) SetGlobalAccelerationInstances(v *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstances) *DescribeGlobalAccelerationInstancesResponse {
	s.GlobalAccelerationInstances = v
	return s
}

type DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstances struct {
	GlobalAccelerationInstance []*DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance `json:"GlobalAccelerationInstance,omitempty" xml:"GlobalAccelerationInstance,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstances) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstances) SetGlobalAccelerationInstance(v []*DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstances {
	s.GlobalAccelerationInstance = v
	return s
}

type DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance struct {
	RegionId                      *string                                                                                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId  *string                                                                                                            `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	IpAddress                     *string                                                                                                            `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	Status                        *string                                                                                                            `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Bandwidth                     *string                                                                                                            `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	InternetChargeType            *string                                                                                                            `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty" require:"true"`
	ChargeType                    *string                                                                                                            `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	BandwidthType                 *string                                                                                                            `json:"BandwidthType,omitempty" xml:"BandwidthType,omitempty" require:"true"`
	AccelerationLocation          *string                                                                                                            `json:"AccelerationLocation,omitempty" xml:"AccelerationLocation,omitempty" require:"true"`
	ServiceLocation               *string                                                                                                            `json:"ServiceLocation,omitempty" xml:"ServiceLocation,omitempty" require:"true"`
	Name                          *string                                                                                                            `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description                   *string                                                                                                            `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	ExpiredTime                   *string                                                                                                            `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	CreationTime                  *string                                                                                                            `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	HasReservationData            *string                                                                                                            `json:"HasReservationData,omitempty" xml:"HasReservationData,omitempty" require:"true"`
	ReservationBandwidth          *string                                                                                                            `json:"ReservationBandwidth,omitempty" xml:"ReservationBandwidth,omitempty" require:"true"`
	ReservationInternetChargeType *string                                                                                                            `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty" require:"true"`
	ReservationActiveTime         *string                                                                                                            `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty" require:"true"`
	ReservationOrderType          *string                                                                                                            `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	BackendServers                *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServers    `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" require:"true" type:"Struct"`
	PublicIpAddresses             *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddresses `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty" require:"true" type:"Struct"`
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetRegionId(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetGlobalAccelerationInstanceId(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetIpAddress(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.IpAddress = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetStatus(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.Status = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetBandwidth(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.Bandwidth = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetInternetChargeType(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetChargeType(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ChargeType = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetBandwidthType(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.BandwidthType = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetAccelerationLocation(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.AccelerationLocation = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetServiceLocation(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ServiceLocation = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetName(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.Name = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetDescription(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.Description = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetExpiredTime(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetCreationTime(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetHasReservationData(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.HasReservationData = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetReservationBandwidth(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ReservationBandwidth = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetReservationInternetChargeType(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ReservationInternetChargeType = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetReservationActiveTime(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetReservationOrderType(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetBackendServers(v *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServers) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.BackendServers = v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance) SetPublicIpAddresses(v *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddresses) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstance {
	s.PublicIpAddresses = v
	return s
}

type DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServers struct {
	BackendServer []*DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer `json:"BackendServer,omitempty" xml:"BackendServer,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServers) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServers) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServers) SetBackendServer(v []*DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServers {
	s.BackendServer = v
	return s
}

type DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ServerId        *string `json:"ServerId,omitempty" xml:"ServerId,omitempty" require:"true"`
	ServerIpAddress *string `json:"ServerIpAddress,omitempty" xml:"ServerIpAddress,omitempty" require:"true"`
	ServerType      *string `json:"ServerType,omitempty" xml:"ServerType,omitempty" require:"true"`
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer) SetRegionId(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer {
	s.RegionId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer) SetServerId(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer {
	s.ServerId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer) SetServerIpAddress(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer {
	s.ServerIpAddress = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer) SetServerType(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstanceBackendServersBackendServer {
	s.ServerType = &v
	return s
}

type DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddresses struct {
	PublicIpAddress []*DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddresses) SetPublicIpAddress(v []*DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddresses {
	s.PublicIpAddress = v
	return s
}

type DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress struct {
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	IpAddress    *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress) SetAllocationId(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress) SetIpAddress(v string) *DescribeGlobalAccelerationInstancesResponseGlobalAccelerationInstancesGlobalAccelerationInstancePublicIpAddressesPublicIpAddress {
	s.IpAddress = &v
	return s
}

type DeleteGlobalAccelerationInstanceRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
}

func (s DeleteGlobalAccelerationInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGlobalAccelerationInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteGlobalAccelerationInstanceRequest) SetRegionId(v string) *DeleteGlobalAccelerationInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteGlobalAccelerationInstanceRequest) SetGlobalAccelerationInstanceId(v string) *DeleteGlobalAccelerationInstanceRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

type DeleteGlobalAccelerationInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteGlobalAccelerationInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGlobalAccelerationInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteGlobalAccelerationInstanceResponse) SetRequestId(v string) *DeleteGlobalAccelerationInstanceResponse {
	s.RequestId = &v
	return s
}

type CreateGlobalAccelerationInstanceRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ServiceLocation *string `json:"ServiceLocation,omitempty" xml:"ServiceLocation,omitempty" require:"true"`
	Bandwidth       *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	BandwidthType   *string `json:"BandwidthType,omitempty" xml:"BandwidthType,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateGlobalAccelerationInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGlobalAccelerationInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateGlobalAccelerationInstanceRequest) SetRegionId(v string) *CreateGlobalAccelerationInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceRequest) SetServiceLocation(v string) *CreateGlobalAccelerationInstanceRequest {
	s.ServiceLocation = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceRequest) SetBandwidth(v string) *CreateGlobalAccelerationInstanceRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceRequest) SetBandwidthType(v string) *CreateGlobalAccelerationInstanceRequest {
	s.BandwidthType = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceRequest) SetName(v string) *CreateGlobalAccelerationInstanceRequest {
	s.Name = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceRequest) SetDescription(v string) *CreateGlobalAccelerationInstanceRequest {
	s.Description = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceRequest) SetClientToken(v string) *CreateGlobalAccelerationInstanceRequest {
	s.ClientToken = &v
	return s
}

type CreateGlobalAccelerationInstanceResponse struct {
	RequestId                    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	IpAddress                    *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
}

func (s CreateGlobalAccelerationInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGlobalAccelerationInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateGlobalAccelerationInstanceResponse) SetRequestId(v string) *CreateGlobalAccelerationInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceResponse) SetGlobalAccelerationInstanceId(v string) *CreateGlobalAccelerationInstanceResponse {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *CreateGlobalAccelerationInstanceResponse) SetIpAddress(v string) *CreateGlobalAccelerationInstanceResponse {
	s.IpAddress = &v
	return s
}

type AssociateGlobalAccelerationInstanceRequest struct {
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	GlobalAccelerationInstanceId *string `json:"GlobalAccelerationInstanceId,omitempty" xml:"GlobalAccelerationInstanceId,omitempty" require:"true"`
	BackendServerId              *string `json:"BackendServerId,omitempty" xml:"BackendServerId,omitempty" require:"true"`
	BackendServerRegionId        *string `json:"BackendServerRegionId,omitempty" xml:"BackendServerRegionId,omitempty" require:"true"`
	BackendServerType            *string `json:"BackendServerType,omitempty" xml:"BackendServerType,omitempty"`
}

func (s AssociateGlobalAccelerationInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateGlobalAccelerationInstanceRequest) GoString() string {
	return s.String()
}

func (s *AssociateGlobalAccelerationInstanceRequest) SetRegionId(v string) *AssociateGlobalAccelerationInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateGlobalAccelerationInstanceRequest) SetGlobalAccelerationInstanceId(v string) *AssociateGlobalAccelerationInstanceRequest {
	s.GlobalAccelerationInstanceId = &v
	return s
}

func (s *AssociateGlobalAccelerationInstanceRequest) SetBackendServerId(v string) *AssociateGlobalAccelerationInstanceRequest {
	s.BackendServerId = &v
	return s
}

func (s *AssociateGlobalAccelerationInstanceRequest) SetBackendServerRegionId(v string) *AssociateGlobalAccelerationInstanceRequest {
	s.BackendServerRegionId = &v
	return s
}

func (s *AssociateGlobalAccelerationInstanceRequest) SetBackendServerType(v string) *AssociateGlobalAccelerationInstanceRequest {
	s.BackendServerType = &v
	return s
}

type AssociateGlobalAccelerationInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AssociateGlobalAccelerationInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateGlobalAccelerationInstanceResponse) GoString() string {
	return s.String()
}

func (s *AssociateGlobalAccelerationInstanceResponse) SetRequestId(v string) *AssociateGlobalAccelerationInstanceResponse {
	s.RequestId = &v
	return s
}

type DescribeVSwitchAttributesRequest struct {
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DryRun    *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s DescribeVSwitchAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesRequest) SetVSwitchId(v string) *DescribeVSwitchAttributesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchAttributesRequest) SetRegionId(v string) *DescribeVSwitchAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVSwitchAttributesRequest) SetDryRun(v bool) *DescribeVSwitchAttributesRequest {
	s.DryRun = &v
	return s
}

type DescribeVSwitchAttributesResponse struct {
	RequestId               *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VSwitchId               *string                                      `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	VpcId                   *string                                      `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Status                  *string                                      `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	CidrBlock               *string                                      `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty" require:"true"`
	Ipv6CidrBlock           *string                                      `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty" require:"true"`
	ZoneId                  *string                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	AvailableIpAddressCount *int64                                       `json:"AvailableIpAddressCount,omitempty" xml:"AvailableIpAddressCount,omitempty" require:"true"`
	Description             *string                                      `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	VSwitchName             *string                                      `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty" require:"true"`
	CreationTime            *string                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	IsDefault               *bool                                        `json:"IsDefault,omitempty" xml:"IsDefault,omitempty" require:"true"`
	ResourceGroupId         *string                                      `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	NetworkAclId            *string                                      `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	OwnerId                 *int64                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	ShareType               *string                                      `json:"ShareType,omitempty" xml:"ShareType,omitempty" require:"true"`
	RouteTable              *DescribeVSwitchAttributesResponseRouteTable `json:"RouteTable,omitempty" xml:"RouteTable,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVSwitchAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponse) SetRequestId(v string) *DescribeVSwitchAttributesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetVSwitchId(v string) *DescribeVSwitchAttributesResponse {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetVpcId(v string) *DescribeVSwitchAttributesResponse {
	s.VpcId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetStatus(v string) *DescribeVSwitchAttributesResponse {
	s.Status = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetCidrBlock(v string) *DescribeVSwitchAttributesResponse {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetIpv6CidrBlock(v string) *DescribeVSwitchAttributesResponse {
	s.Ipv6CidrBlock = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetZoneId(v string) *DescribeVSwitchAttributesResponse {
	s.ZoneId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetAvailableIpAddressCount(v int64) *DescribeVSwitchAttributesResponse {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetDescription(v string) *DescribeVSwitchAttributesResponse {
	s.Description = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetVSwitchName(v string) *DescribeVSwitchAttributesResponse {
	s.VSwitchName = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetCreationTime(v string) *DescribeVSwitchAttributesResponse {
	s.CreationTime = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetIsDefault(v bool) *DescribeVSwitchAttributesResponse {
	s.IsDefault = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetResourceGroupId(v string) *DescribeVSwitchAttributesResponse {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetNetworkAclId(v string) *DescribeVSwitchAttributesResponse {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetOwnerId(v int64) *DescribeVSwitchAttributesResponse {
	s.OwnerId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetShareType(v string) *DescribeVSwitchAttributesResponse {
	s.ShareType = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetRouteTable(v *DescribeVSwitchAttributesResponseRouteTable) *DescribeVSwitchAttributesResponse {
	s.RouteTable = v
	return s
}

type DescribeVSwitchAttributesResponseRouteTable struct {
	RouteTableId   *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	RouteTableType *string `json:"RouteTableType,omitempty" xml:"RouteTableType,omitempty" require:"true"`
}

func (s DescribeVSwitchAttributesResponseRouteTable) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponseRouteTable) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponseRouteTable) SetRouteTableId(v string) *DescribeVSwitchAttributesResponseRouteTable {
	s.RouteTableId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseRouteTable) SetRouteTableType(v string) *DescribeVSwitchAttributesResponseRouteTable {
	s.RouteTableType = &v
	return s
}

type RemoveCommonBandwidthPackageIpRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	IpInstanceId       *string `json:"IpInstanceId,omitempty" xml:"IpInstanceId,omitempty" require:"true"`
}

func (s RemoveCommonBandwidthPackageIpRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveCommonBandwidthPackageIpRequest) GoString() string {
	return s.String()
}

func (s *RemoveCommonBandwidthPackageIpRequest) SetRegionId(v string) *RemoveCommonBandwidthPackageIpRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveCommonBandwidthPackageIpRequest) SetBandwidthPackageId(v string) *RemoveCommonBandwidthPackageIpRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *RemoveCommonBandwidthPackageIpRequest) SetIpInstanceId(v string) *RemoveCommonBandwidthPackageIpRequest {
	s.IpInstanceId = &v
	return s
}

type RemoveCommonBandwidthPackageIpResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RemoveCommonBandwidthPackageIpResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveCommonBandwidthPackageIpResponse) GoString() string {
	return s.String()
}

func (s *RemoveCommonBandwidthPackageIpResponse) SetRequestId(v string) *RemoveCommonBandwidthPackageIpResponse {
	s.RequestId = &v
	return s
}

type ModifyCommonBandwidthPackageSpecRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	Bandwidth          *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
}

func (s ModifyCommonBandwidthPackageSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackageSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackageSpecRequest) SetRegionId(v string) *ModifyCommonBandwidthPackageSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCommonBandwidthPackageSpecRequest) SetBandwidthPackageId(v string) *ModifyCommonBandwidthPackageSpecRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyCommonBandwidthPackageSpecRequest) SetBandwidth(v string) *ModifyCommonBandwidthPackageSpecRequest {
	s.Bandwidth = &v
	return s
}

type ModifyCommonBandwidthPackageSpecResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyCommonBandwidthPackageSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackageSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackageSpecResponse) SetRequestId(v string) *ModifyCommonBandwidthPackageSpecResponse {
	s.RequestId = &v
	return s
}

type ModifyCommonBandwidthPackageAttributeRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyCommonBandwidthPackageAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackageAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackageAttributeRequest) SetRegionId(v string) *ModifyCommonBandwidthPackageAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCommonBandwidthPackageAttributeRequest) SetBandwidthPackageId(v string) *ModifyCommonBandwidthPackageAttributeRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyCommonBandwidthPackageAttributeRequest) SetName(v string) *ModifyCommonBandwidthPackageAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyCommonBandwidthPackageAttributeRequest) SetDescription(v string) *ModifyCommonBandwidthPackageAttributeRequest {
	s.Description = &v
	return s
}

type ModifyCommonBandwidthPackageAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyCommonBandwidthPackageAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommonBandwidthPackageAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyCommonBandwidthPackageAttributeResponse) SetRequestId(v string) *ModifyCommonBandwidthPackageAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeCommonBandwidthPackagesRequest struct {
	IncludeReservationData *bool   `json:"IncludeReservationData,omitempty" xml:"IncludeReservationData,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId     *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
	ResourceGroupId        *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber             *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize               *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	DryRun                 *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s DescribeCommonBandwidthPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonBandwidthPackagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommonBandwidthPackagesRequest) SetIncludeReservationData(v bool) *DescribeCommonBandwidthPackagesRequest {
	s.IncludeReservationData = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesRequest) SetRegionId(v string) *DescribeCommonBandwidthPackagesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesRequest) SetBandwidthPackageId(v string) *DescribeCommonBandwidthPackagesRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesRequest) SetResourceGroupId(v string) *DescribeCommonBandwidthPackagesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesRequest) SetName(v string) *DescribeCommonBandwidthPackagesRequest {
	s.Name = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesRequest) SetPageNumber(v int) *DescribeCommonBandwidthPackagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesRequest) SetPageSize(v int) *DescribeCommonBandwidthPackagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesRequest) SetDryRun(v bool) *DescribeCommonBandwidthPackagesRequest {
	s.DryRun = &v
	return s
}

type DescribeCommonBandwidthPackagesResponse struct {
	RequestId               *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount              *int                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber              *int                                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize                *int                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CommonBandwidthPackages *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackages `json:"CommonBandwidthPackages,omitempty" xml:"CommonBandwidthPackages,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCommonBandwidthPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonBandwidthPackagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommonBandwidthPackagesResponse) SetRequestId(v string) *DescribeCommonBandwidthPackagesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponse) SetTotalCount(v int) *DescribeCommonBandwidthPackagesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponse) SetPageNumber(v int) *DescribeCommonBandwidthPackagesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponse) SetPageSize(v int) *DescribeCommonBandwidthPackagesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponse) SetCommonBandwidthPackages(v *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackages) *DescribeCommonBandwidthPackagesResponse {
	s.CommonBandwidthPackages = v
	return s
}

type DescribeCommonBandwidthPackagesResponseCommonBandwidthPackages struct {
	CommonBandwidthPackage []*DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage `json:"CommonBandwidthPackage,omitempty" xml:"CommonBandwidthPackage,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackages) GoString() string {
	return s.String()
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackages) SetCommonBandwidthPackage(v []*DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackages {
	s.CommonBandwidthPackage = v
	return s
}

type DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage struct {
	BandwidthPackageId            *string                                                                                                `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	RegionId                      *string                                                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Name                          *string                                                                                                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description                   *string                                                                                                `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Bandwidth                     *string                                                                                                `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	InstanceChargeType            *string                                                                                                `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" require:"true"`
	InternetChargeType            *string                                                                                                `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty" require:"true"`
	BusinessStatus                *string                                                                                                `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	CreationTime                  *string                                                                                                `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	ExpiredTime                   *string                                                                                                `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	Status                        *string                                                                                                `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Ratio                         *int                                                                                                   `json:"Ratio,omitempty" xml:"Ratio,omitempty" require:"true"`
	ResourceGroupId               *string                                                                                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	HasReservationData            *string                                                                                                `json:"HasReservationData,omitempty" xml:"HasReservationData,omitempty" require:"true"`
	ReservationBandwidth          *string                                                                                                `json:"ReservationBandwidth,omitempty" xml:"ReservationBandwidth,omitempty" require:"true"`
	ReservationInternetChargeType *string                                                                                                `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty" require:"true"`
	ReservationActiveTime         *string                                                                                                `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty" require:"true"`
	ReservationOrderType          *string                                                                                                `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	ISP                           *string                                                                                                `json:"ISP,omitempty" xml:"ISP,omitempty" require:"true"`
	DeletionProtection            *bool                                                                                                  `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty" require:"true"`
	PublicIpAddresses             *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddresses `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) GoString() string {
	return s.String()
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetBandwidthPackageId(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetRegionId(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.RegionId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetName(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.Name = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetDescription(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.Description = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetBandwidth(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.Bandwidth = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetInstanceChargeType(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetInternetChargeType(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetBusinessStatus(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetCreationTime(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.CreationTime = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetExpiredTime(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetStatus(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.Status = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetRatio(v int) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.Ratio = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetResourceGroupId(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetHasReservationData(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.HasReservationData = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetReservationBandwidth(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.ReservationBandwidth = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetReservationInternetChargeType(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.ReservationInternetChargeType = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetReservationActiveTime(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetReservationOrderType(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetISP(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.ISP = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetDeletionProtection(v bool) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.DeletionProtection = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage) SetPublicIpAddresses(v *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddresses) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackage {
	s.PublicIpAddresses = v
	return s
}

type DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddresses struct {
	PublicIpAddresse []*DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse `json:"PublicIpAddresse,omitempty" xml:"PublicIpAddresse,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddresses) SetPublicIpAddresse(v []*DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddresses {
	s.PublicIpAddresse = v
	return s
}

type DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse struct {
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	IpAddress    *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse) GoString() string {
	return s.String()
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse) SetAllocationId(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.AllocationId = &v
	return s
}

func (s *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse) SetIpAddress(v string) *DescribeCommonBandwidthPackagesResponseCommonBandwidthPackagesCommonBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.IpAddress = &v
	return s
}

type DeleteCommonBandwidthPackageRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Force              *string `json:"Force,omitempty" xml:"Force,omitempty"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
}

func (s DeleteCommonBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCommonBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *DeleteCommonBandwidthPackageRequest) SetRegionId(v string) *DeleteCommonBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCommonBandwidthPackageRequest) SetForce(v string) *DeleteCommonBandwidthPackageRequest {
	s.Force = &v
	return s
}

func (s *DeleteCommonBandwidthPackageRequest) SetBandwidthPackageId(v string) *DeleteCommonBandwidthPackageRequest {
	s.BandwidthPackageId = &v
	return s
}

type DeleteCommonBandwidthPackageResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteCommonBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCommonBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *DeleteCommonBandwidthPackageResponse) SetRequestId(v string) *DeleteCommonBandwidthPackageResponse {
	s.RequestId = &v
	return s
}

type CreateCommonBandwidthPackageRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Zone               *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
	ISP                *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Bandwidth          *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	Ratio              *int    `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
}

func (s CreateCommonBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCommonBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *CreateCommonBandwidthPackageRequest) SetRegionId(v string) *CreateCommonBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetZone(v string) *CreateCommonBandwidthPackageRequest {
	s.Zone = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetISP(v string) *CreateCommonBandwidthPackageRequest {
	s.ISP = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetName(v string) *CreateCommonBandwidthPackageRequest {
	s.Name = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetDescription(v string) *CreateCommonBandwidthPackageRequest {
	s.Description = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetClientToken(v string) *CreateCommonBandwidthPackageRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetResourceGroupId(v string) *CreateCommonBandwidthPackageRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetBandwidth(v int) *CreateCommonBandwidthPackageRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetRatio(v int) *CreateCommonBandwidthPackageRequest {
	s.Ratio = &v
	return s
}

func (s *CreateCommonBandwidthPackageRequest) SetInternetChargeType(v string) *CreateCommonBandwidthPackageRequest {
	s.InternetChargeType = &v
	return s
}

type CreateCommonBandwidthPackageResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
}

func (s CreateCommonBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCommonBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *CreateCommonBandwidthPackageResponse) SetRequestId(v string) *CreateCommonBandwidthPackageResponse {
	s.RequestId = &v
	return s
}

func (s *CreateCommonBandwidthPackageResponse) SetBandwidthPackageId(v string) *CreateCommonBandwidthPackageResponse {
	s.BandwidthPackageId = &v
	return s
}

func (s *CreateCommonBandwidthPackageResponse) SetResourceGroupId(v string) *CreateCommonBandwidthPackageResponse {
	s.ResourceGroupId = &v
	return s
}

type AddCommonBandwidthPackageIpRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	IpInstanceId       *string `json:"IpInstanceId,omitempty" xml:"IpInstanceId,omitempty" require:"true"`
	IpType             *string `json:"IpType,omitempty" xml:"IpType,omitempty"`
}

func (s AddCommonBandwidthPackageIpRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCommonBandwidthPackageIpRequest) GoString() string {
	return s.String()
}

func (s *AddCommonBandwidthPackageIpRequest) SetRegionId(v string) *AddCommonBandwidthPackageIpRequest {
	s.RegionId = &v
	return s
}

func (s *AddCommonBandwidthPackageIpRequest) SetBandwidthPackageId(v string) *AddCommonBandwidthPackageIpRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *AddCommonBandwidthPackageIpRequest) SetIpInstanceId(v string) *AddCommonBandwidthPackageIpRequest {
	s.IpInstanceId = &v
	return s
}

func (s *AddCommonBandwidthPackageIpRequest) SetIpType(v string) *AddCommonBandwidthPackageIpRequest {
	s.IpType = &v
	return s
}

type AddCommonBandwidthPackageIpResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AddCommonBandwidthPackageIpResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCommonBandwidthPackageIpResponse) GoString() string {
	return s.String()
}

func (s *AddCommonBandwidthPackageIpResponse) SetRequestId(v string) *AddCommonBandwidthPackageIpResponse {
	s.RequestId = &v
	return s
}

type ModifyVpnGatewayAttributeRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId  *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	AutoPropagate *bool   `json:"AutoPropagate,omitempty" xml:"AutoPropagate,omitempty"`
}

func (s ModifyVpnGatewayAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnGatewayAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpnGatewayAttributeRequest) SetRegionId(v string) *ModifyVpnGatewayAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVpnGatewayAttributeRequest) SetClientToken(v string) *ModifyVpnGatewayAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyVpnGatewayAttributeRequest) SetVpnGatewayId(v string) *ModifyVpnGatewayAttributeRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *ModifyVpnGatewayAttributeRequest) SetName(v string) *ModifyVpnGatewayAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyVpnGatewayAttributeRequest) SetDescription(v string) *ModifyVpnGatewayAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVpnGatewayAttributeRequest) SetAutoPropagate(v bool) *ModifyVpnGatewayAttributeRequest {
	s.AutoPropagate = &v
	return s
}

type ModifyVpnGatewayAttributeResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnGatewayId   *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId      *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	InternetIp     *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty" require:"true"`
	IntranetIp     *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty" require:"true"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Spec           *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	EnableBgp      *bool   `json:"EnableBgp,omitempty" xml:"EnableBgp,omitempty" require:"true"`
	AutoPropagate  *bool   `json:"AutoPropagate,omitempty" xml:"AutoPropagate,omitempty" require:"true"`
}

func (s ModifyVpnGatewayAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnGatewayAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpnGatewayAttributeResponse) SetRequestId(v string) *ModifyVpnGatewayAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetVpnGatewayId(v string) *ModifyVpnGatewayAttributeResponse {
	s.VpnGatewayId = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetVpcId(v string) *ModifyVpnGatewayAttributeResponse {
	s.VpcId = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetVSwitchId(v string) *ModifyVpnGatewayAttributeResponse {
	s.VSwitchId = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetInternetIp(v string) *ModifyVpnGatewayAttributeResponse {
	s.InternetIp = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetIntranetIp(v string) *ModifyVpnGatewayAttributeResponse {
	s.IntranetIp = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetCreateTime(v int64) *ModifyVpnGatewayAttributeResponse {
	s.CreateTime = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetEndTime(v int64) *ModifyVpnGatewayAttributeResponse {
	s.EndTime = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetSpec(v string) *ModifyVpnGatewayAttributeResponse {
	s.Spec = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetName(v string) *ModifyVpnGatewayAttributeResponse {
	s.Name = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetDescription(v string) *ModifyVpnGatewayAttributeResponse {
	s.Description = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetStatus(v string) *ModifyVpnGatewayAttributeResponse {
	s.Status = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetBusinessStatus(v string) *ModifyVpnGatewayAttributeResponse {
	s.BusinessStatus = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetEnableBgp(v bool) *ModifyVpnGatewayAttributeResponse {
	s.EnableBgp = &v
	return s
}

func (s *ModifyVpnGatewayAttributeResponse) SetAutoPropagate(v bool) *ModifyVpnGatewayAttributeResponse {
	s.AutoPropagate = &v
	return s
}

type ModifyVpnConnectionAttributeRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnConnectionId    *string `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	LocalSubnet        *string `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty"`
	RemoteSubnet       *string `json:"RemoteSubnet,omitempty" xml:"RemoteSubnet,omitempty"`
	EffectImmediately  *bool   `json:"EffectImmediately,omitempty" xml:"EffectImmediately,omitempty"`
	IkeConfig          *string `json:"IkeConfig,omitempty" xml:"IkeConfig,omitempty"`
	IpsecConfig        *string `json:"IpsecConfig,omitempty" xml:"IpsecConfig,omitempty"`
	HealthCheckConfig  *string `json:"HealthCheckConfig,omitempty" xml:"HealthCheckConfig,omitempty"`
	AutoConfigRoute    *bool   `json:"AutoConfigRoute,omitempty" xml:"AutoConfigRoute,omitempty"`
	EnableDpd          *bool   `json:"EnableDpd,omitempty" xml:"EnableDpd,omitempty"`
	EnableNatTraversal *bool   `json:"EnableNatTraversal,omitempty" xml:"EnableNatTraversal,omitempty"`
	BgpConfig          *string `json:"BgpConfig,omitempty" xml:"BgpConfig,omitempty"`
}

func (s ModifyVpnConnectionAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnConnectionAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpnConnectionAttributeRequest) SetRegionId(v string) *ModifyVpnConnectionAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetClientToken(v string) *ModifyVpnConnectionAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetVpnConnectionId(v string) *ModifyVpnConnectionAttributeRequest {
	s.VpnConnectionId = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetName(v string) *ModifyVpnConnectionAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetLocalSubnet(v string) *ModifyVpnConnectionAttributeRequest {
	s.LocalSubnet = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetRemoteSubnet(v string) *ModifyVpnConnectionAttributeRequest {
	s.RemoteSubnet = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetEffectImmediately(v bool) *ModifyVpnConnectionAttributeRequest {
	s.EffectImmediately = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetIkeConfig(v string) *ModifyVpnConnectionAttributeRequest {
	s.IkeConfig = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetIpsecConfig(v string) *ModifyVpnConnectionAttributeRequest {
	s.IpsecConfig = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetHealthCheckConfig(v string) *ModifyVpnConnectionAttributeRequest {
	s.HealthCheckConfig = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetAutoConfigRoute(v bool) *ModifyVpnConnectionAttributeRequest {
	s.AutoConfigRoute = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetEnableDpd(v bool) *ModifyVpnConnectionAttributeRequest {
	s.EnableDpd = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetEnableNatTraversal(v bool) *ModifyVpnConnectionAttributeRequest {
	s.EnableNatTraversal = &v
	return s
}

func (s *ModifyVpnConnectionAttributeRequest) SetBgpConfig(v string) *ModifyVpnConnectionAttributeRequest {
	s.BgpConfig = &v
	return s
}

type ModifyVpnConnectionAttributeResponse struct {
	RequestId          *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnConnectionId    *string                                             `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
	CustomerGatewayId  *string                                             `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	VpnGatewayId       *string                                             `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name               *string                                             `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description        *string                                             `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	LocalSubnet        *string                                             `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	RemoteSubnet       *string                                             `json:"RemoteSubnet,omitempty" xml:"RemoteSubnet,omitempty" require:"true"`
	CreateTime         *int64                                              `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EffectImmediately  *bool                                               `json:"EffectImmediately,omitempty" xml:"EffectImmediately,omitempty" require:"true"`
	EnableDpd          *bool                                               `json:"EnableDpd,omitempty" xml:"EnableDpd,omitempty" require:"true"`
	EnableNatTraversal *bool                                               `json:"EnableNatTraversal,omitempty" xml:"EnableNatTraversal,omitempty" require:"true"`
	IkeConfig          *ModifyVpnConnectionAttributeResponseIkeConfig      `json:"IkeConfig,omitempty" xml:"IkeConfig,omitempty" require:"true" type:"Struct"`
	IpsecConfig        *ModifyVpnConnectionAttributeResponseIpsecConfig    `json:"IpsecConfig,omitempty" xml:"IpsecConfig,omitempty" require:"true" type:"Struct"`
	VcoHealthCheck     *ModifyVpnConnectionAttributeResponseVcoHealthCheck `json:"VcoHealthCheck,omitempty" xml:"VcoHealthCheck,omitempty" require:"true" type:"Struct"`
	VpnBgpConfig       *ModifyVpnConnectionAttributeResponseVpnBgpConfig   `json:"VpnBgpConfig,omitempty" xml:"VpnBgpConfig,omitempty" require:"true" type:"Struct"`
}

func (s ModifyVpnConnectionAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnConnectionAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpnConnectionAttributeResponse) SetRequestId(v string) *ModifyVpnConnectionAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetVpnConnectionId(v string) *ModifyVpnConnectionAttributeResponse {
	s.VpnConnectionId = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetCustomerGatewayId(v string) *ModifyVpnConnectionAttributeResponse {
	s.CustomerGatewayId = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetVpnGatewayId(v string) *ModifyVpnConnectionAttributeResponse {
	s.VpnGatewayId = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetName(v string) *ModifyVpnConnectionAttributeResponse {
	s.Name = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetDescription(v string) *ModifyVpnConnectionAttributeResponse {
	s.Description = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetLocalSubnet(v string) *ModifyVpnConnectionAttributeResponse {
	s.LocalSubnet = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetRemoteSubnet(v string) *ModifyVpnConnectionAttributeResponse {
	s.RemoteSubnet = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetCreateTime(v int64) *ModifyVpnConnectionAttributeResponse {
	s.CreateTime = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetEffectImmediately(v bool) *ModifyVpnConnectionAttributeResponse {
	s.EffectImmediately = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetEnableDpd(v bool) *ModifyVpnConnectionAttributeResponse {
	s.EnableDpd = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetEnableNatTraversal(v bool) *ModifyVpnConnectionAttributeResponse {
	s.EnableNatTraversal = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetIkeConfig(v *ModifyVpnConnectionAttributeResponseIkeConfig) *ModifyVpnConnectionAttributeResponse {
	s.IkeConfig = v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetIpsecConfig(v *ModifyVpnConnectionAttributeResponseIpsecConfig) *ModifyVpnConnectionAttributeResponse {
	s.IpsecConfig = v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetVcoHealthCheck(v *ModifyVpnConnectionAttributeResponseVcoHealthCheck) *ModifyVpnConnectionAttributeResponse {
	s.VcoHealthCheck = v
	return s
}

func (s *ModifyVpnConnectionAttributeResponse) SetVpnBgpConfig(v *ModifyVpnConnectionAttributeResponseVpnBgpConfig) *ModifyVpnConnectionAttributeResponse {
	s.VpnBgpConfig = v
	return s
}

type ModifyVpnConnectionAttributeResponseIkeConfig struct {
	Psk         *string `json:"Psk,omitempty" xml:"Psk,omitempty" require:"true"`
	IkeVersion  *string `json:"IkeVersion,omitempty" xml:"IkeVersion,omitempty" require:"true"`
	IkeMode     *string `json:"IkeMode,omitempty" xml:"IkeMode,omitempty" require:"true"`
	IkeEncAlg   *string `json:"IkeEncAlg,omitempty" xml:"IkeEncAlg,omitempty" require:"true"`
	IkeAuthAlg  *string `json:"IkeAuthAlg,omitempty" xml:"IkeAuthAlg,omitempty" require:"true"`
	IkePfs      *string `json:"IkePfs,omitempty" xml:"IkePfs,omitempty" require:"true"`
	IkeLifetime *int64  `json:"IkeLifetime,omitempty" xml:"IkeLifetime,omitempty" require:"true"`
	LocalId     *string `json:"LocalId,omitempty" xml:"LocalId,omitempty" require:"true"`
	RemoteId    *string `json:"RemoteId,omitempty" xml:"RemoteId,omitempty" require:"true"`
}

func (s ModifyVpnConnectionAttributeResponseIkeConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnConnectionAttributeResponseIkeConfig) GoString() string {
	return s.String()
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetPsk(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.Psk = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetIkeVersion(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.IkeVersion = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetIkeMode(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.IkeMode = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetIkeEncAlg(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.IkeEncAlg = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetIkeAuthAlg(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.IkeAuthAlg = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetIkePfs(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.IkePfs = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetIkeLifetime(v int64) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.IkeLifetime = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetLocalId(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.LocalId = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIkeConfig) SetRemoteId(v string) *ModifyVpnConnectionAttributeResponseIkeConfig {
	s.RemoteId = &v
	return s
}

type ModifyVpnConnectionAttributeResponseIpsecConfig struct {
	IpsecEncAlg   *string `json:"IpsecEncAlg,omitempty" xml:"IpsecEncAlg,omitempty" require:"true"`
	IpsecAuthAlg  *string `json:"IpsecAuthAlg,omitempty" xml:"IpsecAuthAlg,omitempty" require:"true"`
	IpsecPfs      *string `json:"IpsecPfs,omitempty" xml:"IpsecPfs,omitempty" require:"true"`
	IpsecLifetime *int64  `json:"IpsecLifetime,omitempty" xml:"IpsecLifetime,omitempty" require:"true"`
}

func (s ModifyVpnConnectionAttributeResponseIpsecConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnConnectionAttributeResponseIpsecConfig) GoString() string {
	return s.String()
}

func (s *ModifyVpnConnectionAttributeResponseIpsecConfig) SetIpsecEncAlg(v string) *ModifyVpnConnectionAttributeResponseIpsecConfig {
	s.IpsecEncAlg = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIpsecConfig) SetIpsecAuthAlg(v string) *ModifyVpnConnectionAttributeResponseIpsecConfig {
	s.IpsecAuthAlg = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIpsecConfig) SetIpsecPfs(v string) *ModifyVpnConnectionAttributeResponseIpsecConfig {
	s.IpsecPfs = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseIpsecConfig) SetIpsecLifetime(v int64) *ModifyVpnConnectionAttributeResponseIpsecConfig {
	s.IpsecLifetime = &v
	return s
}

type ModifyVpnConnectionAttributeResponseVcoHealthCheck struct {
	Enable   *string `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	Sip      *string `json:"Sip,omitempty" xml:"Sip,omitempty" require:"true"`
	Dip      *string `json:"Dip,omitempty" xml:"Dip,omitempty" require:"true"`
	Interval *int    `json:"Interval,omitempty" xml:"Interval,omitempty" require:"true"`
	Retry    *int    `json:"Retry,omitempty" xml:"Retry,omitempty" require:"true"`
}

func (s ModifyVpnConnectionAttributeResponseVcoHealthCheck) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnConnectionAttributeResponseVcoHealthCheck) GoString() string {
	return s.String()
}

func (s *ModifyVpnConnectionAttributeResponseVcoHealthCheck) SetEnable(v string) *ModifyVpnConnectionAttributeResponseVcoHealthCheck {
	s.Enable = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVcoHealthCheck) SetSip(v string) *ModifyVpnConnectionAttributeResponseVcoHealthCheck {
	s.Sip = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVcoHealthCheck) SetDip(v string) *ModifyVpnConnectionAttributeResponseVcoHealthCheck {
	s.Dip = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVcoHealthCheck) SetInterval(v int) *ModifyVpnConnectionAttributeResponseVcoHealthCheck {
	s.Interval = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVcoHealthCheck) SetRetry(v int) *ModifyVpnConnectionAttributeResponseVcoHealthCheck {
	s.Retry = &v
	return s
}

type ModifyVpnConnectionAttributeResponseVpnBgpConfig struct {
	EnableBgp  *string `json:"EnableBgp,omitempty" xml:"EnableBgp,omitempty" require:"true"`
	TunnelCidr *string `json:"TunnelCidr,omitempty" xml:"TunnelCidr,omitempty" require:"true"`
	LocalBgpIp *string `json:"LocalBgpIp,omitempty" xml:"LocalBgpIp,omitempty" require:"true"`
	PeerBgpIp  *string `json:"PeerBgpIp,omitempty" xml:"PeerBgpIp,omitempty" require:"true"`
	LocalAsn   *int    `json:"LocalAsn,omitempty" xml:"LocalAsn,omitempty" require:"true"`
	PeerAsn    *int    `json:"PeerAsn,omitempty" xml:"PeerAsn,omitempty" require:"true"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s ModifyVpnConnectionAttributeResponseVpnBgpConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpnConnectionAttributeResponseVpnBgpConfig) GoString() string {
	return s.String()
}

func (s *ModifyVpnConnectionAttributeResponseVpnBgpConfig) SetEnableBgp(v string) *ModifyVpnConnectionAttributeResponseVpnBgpConfig {
	s.EnableBgp = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVpnBgpConfig) SetTunnelCidr(v string) *ModifyVpnConnectionAttributeResponseVpnBgpConfig {
	s.TunnelCidr = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVpnBgpConfig) SetLocalBgpIp(v string) *ModifyVpnConnectionAttributeResponseVpnBgpConfig {
	s.LocalBgpIp = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVpnBgpConfig) SetPeerBgpIp(v string) *ModifyVpnConnectionAttributeResponseVpnBgpConfig {
	s.PeerBgpIp = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVpnBgpConfig) SetLocalAsn(v int) *ModifyVpnConnectionAttributeResponseVpnBgpConfig {
	s.LocalAsn = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVpnBgpConfig) SetPeerAsn(v int) *ModifyVpnConnectionAttributeResponseVpnBgpConfig {
	s.PeerAsn = &v
	return s
}

func (s *ModifyVpnConnectionAttributeResponseVpnBgpConfig) SetStatus(v string) *ModifyVpnConnectionAttributeResponseVpnBgpConfig {
	s.Status = &v
	return s
}

type ModifyCustomerGatewayAttributeRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyCustomerGatewayAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomerGatewayAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyCustomerGatewayAttributeRequest) SetRegionId(v string) *ModifyCustomerGatewayAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeRequest) SetClientToken(v string) *ModifyCustomerGatewayAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeRequest) SetCustomerGatewayId(v string) *ModifyCustomerGatewayAttributeRequest {
	s.CustomerGatewayId = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeRequest) SetName(v string) *ModifyCustomerGatewayAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeRequest) SetDescription(v string) *ModifyCustomerGatewayAttributeRequest {
	s.Description = &v
	return s
}

type ModifyCustomerGatewayAttributeResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	IpAddress         *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
}

func (s ModifyCustomerGatewayAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomerGatewayAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyCustomerGatewayAttributeResponse) SetRequestId(v string) *ModifyCustomerGatewayAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeResponse) SetCustomerGatewayId(v string) *ModifyCustomerGatewayAttributeResponse {
	s.CustomerGatewayId = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeResponse) SetIpAddress(v string) *ModifyCustomerGatewayAttributeResponse {
	s.IpAddress = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeResponse) SetName(v string) *ModifyCustomerGatewayAttributeResponse {
	s.Name = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeResponse) SetDescription(v string) *ModifyCustomerGatewayAttributeResponse {
	s.Description = &v
	return s
}

func (s *ModifyCustomerGatewayAttributeResponse) SetCreateTime(v int64) *ModifyCustomerGatewayAttributeResponse {
	s.CreateTime = &v
	return s
}

type DownloadVpnConnectionConfigRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnConnectionId *string `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
}

func (s DownloadVpnConnectionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadVpnConnectionConfigRequest) GoString() string {
	return s.String()
}

func (s *DownloadVpnConnectionConfigRequest) SetRegionId(v string) *DownloadVpnConnectionConfigRequest {
	s.RegionId = &v
	return s
}

func (s *DownloadVpnConnectionConfigRequest) SetVpnConnectionId(v string) *DownloadVpnConnectionConfigRequest {
	s.VpnConnectionId = &v
	return s
}

type DownloadVpnConnectionConfigResponse struct {
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnConnectionConfig *DownloadVpnConnectionConfigResponseVpnConnectionConfig `json:"VpnConnectionConfig,omitempty" xml:"VpnConnectionConfig,omitempty" require:"true" type:"Struct"`
}

func (s DownloadVpnConnectionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadVpnConnectionConfigResponse) GoString() string {
	return s.String()
}

func (s *DownloadVpnConnectionConfigResponse) SetRequestId(v string) *DownloadVpnConnectionConfigResponse {
	s.RequestId = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponse) SetVpnConnectionConfig(v *DownloadVpnConnectionConfigResponseVpnConnectionConfig) *DownloadVpnConnectionConfigResponse {
	s.VpnConnectionConfig = v
	return s
}

type DownloadVpnConnectionConfigResponseVpnConnectionConfig struct {
	LocalSubnet  *string                                                            `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	RemoteSubnet *string                                                            `json:"RemoteSubnet,omitempty" xml:"RemoteSubnet,omitempty" require:"true"`
	Local        *string                                                            `json:"Local,omitempty" xml:"Local,omitempty" require:"true"`
	Remote       *string                                                            `json:"Remote,omitempty" xml:"Remote,omitempty" require:"true"`
	IkeConfig    *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig   `json:"IkeConfig,omitempty" xml:"IkeConfig,omitempty" require:"true" type:"Struct"`
	IpsecConfig  *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig `json:"IpsecConfig,omitempty" xml:"IpsecConfig,omitempty" require:"true" type:"Struct"`
}

func (s DownloadVpnConnectionConfigResponseVpnConnectionConfig) String() string {
	return tea.Prettify(s)
}

func (s DownloadVpnConnectionConfigResponseVpnConnectionConfig) GoString() string {
	return s.String()
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfig) SetLocalSubnet(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfig {
	s.LocalSubnet = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfig) SetRemoteSubnet(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfig {
	s.RemoteSubnet = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfig) SetLocal(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfig {
	s.Local = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfig) SetRemote(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfig {
	s.Remote = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfig) SetIkeConfig(v *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) *DownloadVpnConnectionConfigResponseVpnConnectionConfig {
	s.IkeConfig = v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfig) SetIpsecConfig(v *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig) *DownloadVpnConnectionConfigResponseVpnConnectionConfig {
	s.IpsecConfig = v
	return s
}

type DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig struct {
	Psk         *string `json:"Psk,omitempty" xml:"Psk,omitempty" require:"true"`
	IkeVersion  *string `json:"IkeVersion,omitempty" xml:"IkeVersion,omitempty" require:"true"`
	IkeMode     *string `json:"IkeMode,omitempty" xml:"IkeMode,omitempty" require:"true"`
	IkeEncAlg   *string `json:"IkeEncAlg,omitempty" xml:"IkeEncAlg,omitempty" require:"true"`
	IkeAuthAlg  *string `json:"IkeAuthAlg,omitempty" xml:"IkeAuthAlg,omitempty" require:"true"`
	IkePfs      *string `json:"IkePfs,omitempty" xml:"IkePfs,omitempty" require:"true"`
	IkeLifetime *int64  `json:"IkeLifetime,omitempty" xml:"IkeLifetime,omitempty" require:"true"`
	LocalId     *string `json:"LocalId,omitempty" xml:"LocalId,omitempty" require:"true"`
	RemoteId    *string `json:"RemoteId,omitempty" xml:"RemoteId,omitempty" require:"true"`
}

func (s DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) String() string {
	return tea.Prettify(s)
}

func (s DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) GoString() string {
	return s.String()
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetPsk(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.Psk = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetIkeVersion(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.IkeVersion = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetIkeMode(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.IkeMode = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetIkeEncAlg(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.IkeEncAlg = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetIkeAuthAlg(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.IkeAuthAlg = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetIkePfs(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.IkePfs = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetIkeLifetime(v int64) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.IkeLifetime = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetLocalId(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.LocalId = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig) SetRemoteId(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIkeConfig {
	s.RemoteId = &v
	return s
}

type DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig struct {
	IpsecEncAlg   *string `json:"IpsecEncAlg,omitempty" xml:"IpsecEncAlg,omitempty" require:"true"`
	IpsecAuthAlg  *string `json:"IpsecAuthAlg,omitempty" xml:"IpsecAuthAlg,omitempty" require:"true"`
	IpsecPfs      *string `json:"IpsecPfs,omitempty" xml:"IpsecPfs,omitempty" require:"true"`
	IpsecLifetime *int64  `json:"IpsecLifetime,omitempty" xml:"IpsecLifetime,omitempty" require:"true"`
}

func (s DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig) String() string {
	return tea.Prettify(s)
}

func (s DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig) GoString() string {
	return s.String()
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig) SetIpsecEncAlg(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig {
	s.IpsecEncAlg = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig) SetIpsecAuthAlg(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig {
	s.IpsecAuthAlg = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig) SetIpsecPfs(v string) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig {
	s.IpsecPfs = &v
	return s
}

func (s *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig) SetIpsecLifetime(v int64) *DownloadVpnConnectionConfigResponseVpnConnectionConfigIpsecConfig {
	s.IpsecLifetime = &v
	return s
}

type DescribeVpnGatewaysRequest struct {
	RegionId               *string                          `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId                  *string                          `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpnGatewayId           *string                          `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty"`
	Status                 *string                          `json:"Status,omitempty" xml:"Status,omitempty"`
	BusinessStatus         *string                          `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	PageNumber             *int                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize               *int                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Tag                    []*DescribeVpnGatewaysRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	IncludeReservationData *bool                            `json:"IncludeReservationData,omitempty" xml:"IncludeReservationData,omitempty"`
}

func (s DescribeVpnGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysRequest) SetRegionId(v string) *DescribeVpnGatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetVpcId(v string) *DescribeVpnGatewaysRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetVpnGatewayId(v string) *DescribeVpnGatewaysRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetStatus(v string) *DescribeVpnGatewaysRequest {
	s.Status = &v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetBusinessStatus(v string) *DescribeVpnGatewaysRequest {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetPageNumber(v int) *DescribeVpnGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetPageSize(v int) *DescribeVpnGatewaysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetTag(v []*DescribeVpnGatewaysRequestTag) *DescribeVpnGatewaysRequest {
	s.Tag = v
	return s
}

func (s *DescribeVpnGatewaysRequest) SetIncludeReservationData(v bool) *DescribeVpnGatewaysRequest {
	s.IncludeReservationData = &v
	return s
}

type DescribeVpnGatewaysRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeVpnGatewaysRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysRequestTag) SetKey(v string) *DescribeVpnGatewaysRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeVpnGatewaysRequestTag) SetValue(v string) *DescribeVpnGatewaysRequestTag {
	s.Value = &v
	return s
}

type DescribeVpnGatewaysResponse struct {
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount  *int                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber  *int                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *int                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	VpnGateways *DescribeVpnGatewaysResponseVpnGateways `json:"VpnGateways,omitempty" xml:"VpnGateways,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysResponse) SetRequestId(v string) *DescribeVpnGatewaysResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpnGatewaysResponse) SetTotalCount(v int) *DescribeVpnGatewaysResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpnGatewaysResponse) SetPageNumber(v int) *DescribeVpnGatewaysResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnGatewaysResponse) SetPageSize(v int) *DescribeVpnGatewaysResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnGatewaysResponse) SetVpnGateways(v *DescribeVpnGatewaysResponseVpnGateways) *DescribeVpnGatewaysResponse {
	s.VpnGateways = v
	return s
}

type DescribeVpnGatewaysResponseVpnGateways struct {
	VpnGateway []*DescribeVpnGatewaysResponseVpnGatewaysVpnGateway `json:"VpnGateway,omitempty" xml:"VpnGateway,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpnGatewaysResponseVpnGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysResponseVpnGateways) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysResponseVpnGateways) SetVpnGateway(v []*DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) *DescribeVpnGatewaysResponseVpnGateways {
	s.VpnGateway = v
	return s
}

type DescribeVpnGatewaysResponseVpnGatewaysVpnGateway struct {
	VpnGatewayId      *string                                                          `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	VpcId             *string                                                          `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId         *string                                                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	InternetIp        *string                                                          `json:"InternetIp,omitempty" xml:"InternetIp,omitempty" require:"true"`
	CreateTime        *int64                                                           `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime           *int64                                                           `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Spec              *string                                                          `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	Name              *string                                                          `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description       *string                                                          `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Status            *string                                                          `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	BusinessStatus    *string                                                          `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	ChargeType        *string                                                          `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	IpsecVpn          *string                                                          `json:"IpsecVpn,omitempty" xml:"IpsecVpn,omitempty" require:"true"`
	SslVpn            *string                                                          `json:"SslVpn,omitempty" xml:"SslVpn,omitempty" require:"true"`
	SslMaxConnections *int64                                                           `json:"SslMaxConnections,omitempty" xml:"SslMaxConnections,omitempty" require:"true"`
	Tag               *string                                                          `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	EnableBgp         *bool                                                            `json:"EnableBgp,omitempty" xml:"EnableBgp,omitempty" require:"true"`
	AutoPropagate     *bool                                                            `json:"AutoPropagate,omitempty" xml:"AutoPropagate,omitempty" require:"true"`
	Tags              *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTags            `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
	ReservationData   *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData `json:"ReservationData,omitempty" xml:"ReservationData,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetVpnGatewayId(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetVpcId(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.VpcId = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetVSwitchId(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetInternetIp(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.InternetIp = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetCreateTime(v int64) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.CreateTime = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetEndTime(v int64) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.EndTime = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetSpec(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.Spec = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetName(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.Name = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetDescription(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.Description = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetStatus(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.Status = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetBusinessStatus(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetChargeType(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.ChargeType = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetIpsecVpn(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.IpsecVpn = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetSslVpn(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.SslVpn = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetSslMaxConnections(v int64) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.SslMaxConnections = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetTag(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.Tag = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetEnableBgp(v bool) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.EnableBgp = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetAutoPropagate(v bool) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.AutoPropagate = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetTags(v *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTags) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.Tags = v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway) SetReservationData(v *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) *DescribeVpnGatewaysResponseVpnGatewaysVpnGateway {
	s.ReservationData = v
	return s
}

type DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTags struct {
	Tag []*DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTags) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTags) SetTag(v []*DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTags {
	s.Tag = v
	return s
}

type DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag) SetKey(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag) SetValue(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayTagsTag {
	s.Value = &v
	return s
}

type DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData struct {
	Status                    *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ReservationEndTime        *string `json:"ReservationEndTime,omitempty" xml:"ReservationEndTime,omitempty" require:"true"`
	ReservationOrderType      *string `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	ReservationSpec           *string `json:"ReservationSpec,omitempty" xml:"ReservationSpec,omitempty" require:"true"`
	ReservationIpsec          *string `json:"ReservationIpsec,omitempty" xml:"ReservationIpsec,omitempty" require:"true"`
	ReservationSsl            *string `json:"ReservationSsl,omitempty" xml:"ReservationSsl,omitempty" require:"true"`
	ReservationMaxConnections *int    `json:"ReservationMaxConnections,omitempty" xml:"ReservationMaxConnections,omitempty" require:"true"`
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) SetStatus(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData {
	s.Status = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) SetReservationEndTime(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData {
	s.ReservationEndTime = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) SetReservationOrderType(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) SetReservationSpec(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData {
	s.ReservationSpec = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) SetReservationIpsec(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData {
	s.ReservationIpsec = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) SetReservationSsl(v string) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData {
	s.ReservationSsl = &v
	return s
}

func (s *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData) SetReservationMaxConnections(v int) *DescribeVpnGatewaysResponseVpnGatewaysVpnGatewayReservationData {
	s.ReservationMaxConnections = &v
	return s
}

type DescribeVpnGatewayRequest struct {
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnGatewayId           *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	IncludeReservationData *bool   `json:"IncludeReservationData,omitempty" xml:"IncludeReservationData,omitempty"`
}

func (s DescribeVpnGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewayRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewayRequest) SetRegionId(v string) *DescribeVpnGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpnGatewayRequest) SetVpnGatewayId(v string) *DescribeVpnGatewayRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnGatewayRequest) SetIncludeReservationData(v bool) *DescribeVpnGatewayRequest {
	s.IncludeReservationData = &v
	return s
}

type DescribeVpnGatewayResponse struct {
	RequestId         *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnGatewayId      *string                                    `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	VpcId             *string                                    `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId         *string                                    `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	InternetIp        *string                                    `json:"InternetIp,omitempty" xml:"InternetIp,omitempty" require:"true"`
	CreateTime        *int64                                     `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime           *int64                                     `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Spec              *string                                    `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	Name              *string                                    `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description       *string                                    `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Status            *string                                    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	BusinessStatus    *string                                    `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	ChargeType        *string                                    `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	IpsecVpn          *string                                    `json:"IpsecVpn,omitempty" xml:"IpsecVpn,omitempty" require:"true"`
	SslVpn            *string                                    `json:"SslVpn,omitempty" xml:"SslVpn,omitempty" require:"true"`
	SslMaxConnections *int64                                     `json:"SslMaxConnections,omitempty" xml:"SslMaxConnections,omitempty" require:"true"`
	Tag               *string                                    `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	EnableBgp         *bool                                      `json:"EnableBgp,omitempty" xml:"EnableBgp,omitempty" require:"true"`
	AutoPropagate     *bool                                      `json:"AutoPropagate,omitempty" xml:"AutoPropagate,omitempty" require:"true"`
	Tags              *DescribeVpnGatewayResponseTags            `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
	ReservationData   *DescribeVpnGatewayResponseReservationData `json:"ReservationData,omitempty" xml:"ReservationData,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewayResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewayResponse) SetRequestId(v string) *DescribeVpnGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetVpnGatewayId(v string) *DescribeVpnGatewayResponse {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetVpcId(v string) *DescribeVpnGatewayResponse {
	s.VpcId = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetVSwitchId(v string) *DescribeVpnGatewayResponse {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetInternetIp(v string) *DescribeVpnGatewayResponse {
	s.InternetIp = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetCreateTime(v int64) *DescribeVpnGatewayResponse {
	s.CreateTime = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetEndTime(v int64) *DescribeVpnGatewayResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetSpec(v string) *DescribeVpnGatewayResponse {
	s.Spec = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetName(v string) *DescribeVpnGatewayResponse {
	s.Name = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetDescription(v string) *DescribeVpnGatewayResponse {
	s.Description = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetStatus(v string) *DescribeVpnGatewayResponse {
	s.Status = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetBusinessStatus(v string) *DescribeVpnGatewayResponse {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetChargeType(v string) *DescribeVpnGatewayResponse {
	s.ChargeType = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetIpsecVpn(v string) *DescribeVpnGatewayResponse {
	s.IpsecVpn = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetSslVpn(v string) *DescribeVpnGatewayResponse {
	s.SslVpn = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetSslMaxConnections(v int64) *DescribeVpnGatewayResponse {
	s.SslMaxConnections = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetTag(v string) *DescribeVpnGatewayResponse {
	s.Tag = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetEnableBgp(v bool) *DescribeVpnGatewayResponse {
	s.EnableBgp = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetAutoPropagate(v bool) *DescribeVpnGatewayResponse {
	s.AutoPropagate = &v
	return s
}

func (s *DescribeVpnGatewayResponse) SetTags(v *DescribeVpnGatewayResponseTags) *DescribeVpnGatewayResponse {
	s.Tags = v
	return s
}

func (s *DescribeVpnGatewayResponse) SetReservationData(v *DescribeVpnGatewayResponseReservationData) *DescribeVpnGatewayResponse {
	s.ReservationData = v
	return s
}

type DescribeVpnGatewayResponseTags struct {
	Tag []*DescribeVpnGatewayResponseTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpnGatewayResponseTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewayResponseTags) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewayResponseTags) SetTag(v []*DescribeVpnGatewayResponseTagsTag) *DescribeVpnGatewayResponseTags {
	s.Tag = v
	return s
}

type DescribeVpnGatewayResponseTagsTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s DescribeVpnGatewayResponseTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewayResponseTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewayResponseTagsTag) SetKey(v string) *DescribeVpnGatewayResponseTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeVpnGatewayResponseTagsTag) SetValue(v string) *DescribeVpnGatewayResponseTagsTag {
	s.Value = &v
	return s
}

type DescribeVpnGatewayResponseReservationData struct {
	Status                    *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ReservationEndTime        *string `json:"ReservationEndTime,omitempty" xml:"ReservationEndTime,omitempty" require:"true"`
	ReservationOrderType      *string `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	ReservationSpec           *string `json:"ReservationSpec,omitempty" xml:"ReservationSpec,omitempty" require:"true"`
	ReservationIpsec          *string `json:"ReservationIpsec,omitempty" xml:"ReservationIpsec,omitempty" require:"true"`
	ReservationSsl            *string `json:"ReservationSsl,omitempty" xml:"ReservationSsl,omitempty" require:"true"`
	ReservationMaxConnections *int    `json:"ReservationMaxConnections,omitempty" xml:"ReservationMaxConnections,omitempty" require:"true"`
}

func (s DescribeVpnGatewayResponseReservationData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnGatewayResponseReservationData) GoString() string {
	return s.String()
}

func (s *DescribeVpnGatewayResponseReservationData) SetStatus(v string) *DescribeVpnGatewayResponseReservationData {
	s.Status = &v
	return s
}

func (s *DescribeVpnGatewayResponseReservationData) SetReservationEndTime(v string) *DescribeVpnGatewayResponseReservationData {
	s.ReservationEndTime = &v
	return s
}

func (s *DescribeVpnGatewayResponseReservationData) SetReservationOrderType(v string) *DescribeVpnGatewayResponseReservationData {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeVpnGatewayResponseReservationData) SetReservationSpec(v string) *DescribeVpnGatewayResponseReservationData {
	s.ReservationSpec = &v
	return s
}

func (s *DescribeVpnGatewayResponseReservationData) SetReservationIpsec(v string) *DescribeVpnGatewayResponseReservationData {
	s.ReservationIpsec = &v
	return s
}

func (s *DescribeVpnGatewayResponseReservationData) SetReservationSsl(v string) *DescribeVpnGatewayResponseReservationData {
	s.ReservationSsl = &v
	return s
}

func (s *DescribeVpnGatewayResponseReservationData) SetReservationMaxConnections(v int) *DescribeVpnGatewayResponseReservationData {
	s.ReservationMaxConnections = &v
	return s
}

type DescribeVpnConnectionsRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnGatewayId      *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty"`
	PageNumber        *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VpnConnectionId   *string `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty"`
}

func (s DescribeVpnConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsRequest) SetRegionId(v string) *DescribeVpnConnectionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpnConnectionsRequest) SetVpnGatewayId(v string) *DescribeVpnConnectionsRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnConnectionsRequest) SetCustomerGatewayId(v string) *DescribeVpnConnectionsRequest {
	s.CustomerGatewayId = &v
	return s
}

func (s *DescribeVpnConnectionsRequest) SetPageNumber(v int) *DescribeVpnConnectionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnConnectionsRequest) SetPageSize(v int) *DescribeVpnConnectionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnConnectionsRequest) SetVpnConnectionId(v string) *DescribeVpnConnectionsRequest {
	s.VpnConnectionId = &v
	return s
}

type DescribeVpnConnectionsResponse struct {
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount     *int                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber     *int                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize       *int                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	VpnConnections *DescribeVpnConnectionsResponseVpnConnections `json:"VpnConnections,omitempty" xml:"VpnConnections,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsResponse) SetRequestId(v string) *DescribeVpnConnectionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpnConnectionsResponse) SetTotalCount(v int) *DescribeVpnConnectionsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpnConnectionsResponse) SetPageNumber(v int) *DescribeVpnConnectionsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpnConnectionsResponse) SetPageSize(v int) *DescribeVpnConnectionsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVpnConnectionsResponse) SetVpnConnections(v *DescribeVpnConnectionsResponseVpnConnections) *DescribeVpnConnectionsResponse {
	s.VpnConnections = v
	return s
}

type DescribeVpnConnectionsResponseVpnConnections struct {
	VpnConnection []*DescribeVpnConnectionsResponseVpnConnectionsVpnConnection `json:"VpnConnection,omitempty" xml:"VpnConnection,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpnConnectionsResponseVpnConnections) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsResponseVpnConnections) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsResponseVpnConnections) SetVpnConnection(v []*DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) *DescribeVpnConnectionsResponseVpnConnections {
	s.VpnConnection = v
	return s
}

type DescribeVpnConnectionsResponseVpnConnectionsVpnConnection struct {
	VpnConnectionId    *string                                                                  `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
	CustomerGatewayId  *string                                                                  `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	VpnGatewayId       *string                                                                  `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name               *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	LocalSubnet        *string                                                                  `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	RemoteSubnet       *string                                                                  `json:"RemoteSubnet,omitempty" xml:"RemoteSubnet,omitempty" require:"true"`
	CreateTime         *int64                                                                   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EffectImmediately  *bool                                                                    `json:"EffectImmediately,omitempty" xml:"EffectImmediately,omitempty" require:"true"`
	Status             *string                                                                  `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	EnableDpd          *bool                                                                    `json:"EnableDpd,omitempty" xml:"EnableDpd,omitempty" require:"true"`
	EnableNatTraversal *bool                                                                    `json:"EnableNatTraversal,omitempty" xml:"EnableNatTraversal,omitempty" require:"true"`
	IkeConfig          *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig      `json:"IkeConfig,omitempty" xml:"IkeConfig,omitempty" require:"true" type:"Struct"`
	IpsecConfig        *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig    `json:"IpsecConfig,omitempty" xml:"IpsecConfig,omitempty" require:"true" type:"Struct"`
	VcoHealthCheck     *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck `json:"VcoHealthCheck,omitempty" xml:"VcoHealthCheck,omitempty" require:"true" type:"Struct"`
	VpnBgpConfig       *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig   `json:"VpnBgpConfig,omitempty" xml:"VpnBgpConfig,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetVpnConnectionId(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.VpnConnectionId = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetCustomerGatewayId(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.CustomerGatewayId = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetVpnGatewayId(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetName(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.Name = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetLocalSubnet(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.LocalSubnet = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetRemoteSubnet(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.RemoteSubnet = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetCreateTime(v int64) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.CreateTime = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetEffectImmediately(v bool) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.EffectImmediately = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetStatus(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.Status = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetEnableDpd(v bool) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.EnableDpd = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetEnableNatTraversal(v bool) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.EnableNatTraversal = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetIkeConfig(v *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.IkeConfig = v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetIpsecConfig(v *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.IpsecConfig = v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetVcoHealthCheck(v *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.VcoHealthCheck = v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection) SetVpnBgpConfig(v *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnection {
	s.VpnBgpConfig = v
	return s
}

type DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig struct {
	Psk         *string `json:"Psk,omitempty" xml:"Psk,omitempty" require:"true"`
	IkeVersion  *string `json:"IkeVersion,omitempty" xml:"IkeVersion,omitempty" require:"true"`
	IkeMode     *string `json:"IkeMode,omitempty" xml:"IkeMode,omitempty" require:"true"`
	IkeEncAlg   *string `json:"IkeEncAlg,omitempty" xml:"IkeEncAlg,omitempty" require:"true"`
	IkeAuthAlg  *string `json:"IkeAuthAlg,omitempty" xml:"IkeAuthAlg,omitempty" require:"true"`
	IkePfs      *string `json:"IkePfs,omitempty" xml:"IkePfs,omitempty" require:"true"`
	IkeLifetime *int64  `json:"IkeLifetime,omitempty" xml:"IkeLifetime,omitempty" require:"true"`
	LocalId     *string `json:"LocalId,omitempty" xml:"LocalId,omitempty" require:"true"`
	RemoteId    *string `json:"RemoteId,omitempty" xml:"RemoteId,omitempty" require:"true"`
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetPsk(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.Psk = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetIkeVersion(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.IkeVersion = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetIkeMode(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.IkeMode = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetIkeEncAlg(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.IkeEncAlg = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetIkeAuthAlg(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.IkeAuthAlg = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetIkePfs(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.IkePfs = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetIkeLifetime(v int64) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.IkeLifetime = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetLocalId(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.LocalId = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig) SetRemoteId(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIkeConfig {
	s.RemoteId = &v
	return s
}

type DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig struct {
	IpsecEncAlg   *string `json:"IpsecEncAlg,omitempty" xml:"IpsecEncAlg,omitempty" require:"true"`
	IpsecAuthAlg  *string `json:"IpsecAuthAlg,omitempty" xml:"IpsecAuthAlg,omitempty" require:"true"`
	IpsecPfs      *string `json:"IpsecPfs,omitempty" xml:"IpsecPfs,omitempty" require:"true"`
	IpsecLifetime *int64  `json:"IpsecLifetime,omitempty" xml:"IpsecLifetime,omitempty" require:"true"`
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig) SetIpsecEncAlg(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig {
	s.IpsecEncAlg = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig) SetIpsecAuthAlg(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig {
	s.IpsecAuthAlg = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig) SetIpsecPfs(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig {
	s.IpsecPfs = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig) SetIpsecLifetime(v int64) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionIpsecConfig {
	s.IpsecLifetime = &v
	return s
}

type DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck struct {
	Enable   *string `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	Sip      *string `json:"Sip,omitempty" xml:"Sip,omitempty" require:"true"`
	Dip      *string `json:"Dip,omitempty" xml:"Dip,omitempty" require:"true"`
	Interval *int    `json:"Interval,omitempty" xml:"Interval,omitempty" require:"true"`
	Retry    *int    `json:"Retry,omitempty" xml:"Retry,omitempty" require:"true"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) SetEnable(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck {
	s.Enable = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) SetSip(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck {
	s.Sip = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) SetDip(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck {
	s.Dip = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) SetInterval(v int) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck {
	s.Interval = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) SetRetry(v int) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck {
	s.Retry = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck) SetStatus(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVcoHealthCheck {
	s.Status = &v
	return s
}

type DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig struct {
	TunnelCidr *string `json:"TunnelCidr,omitempty" xml:"TunnelCidr,omitempty" require:"true"`
	LocalBgpIp *string `json:"LocalBgpIp,omitempty" xml:"LocalBgpIp,omitempty" require:"true"`
	PeerBgpIp  *string `json:"PeerBgpIp,omitempty" xml:"PeerBgpIp,omitempty" require:"true"`
	LocalAsn   *string `json:"LocalAsn,omitempty" xml:"LocalAsn,omitempty" require:"true"`
	PeerAsn    *string `json:"PeerAsn,omitempty" xml:"PeerAsn,omitempty" require:"true"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) SetTunnelCidr(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig {
	s.TunnelCidr = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) SetLocalBgpIp(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig {
	s.LocalBgpIp = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) SetPeerBgpIp(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig {
	s.PeerBgpIp = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) SetLocalAsn(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig {
	s.LocalAsn = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) SetPeerAsn(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig {
	s.PeerAsn = &v
	return s
}

func (s *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig) SetStatus(v string) *DescribeVpnConnectionsResponseVpnConnectionsVpnConnectionVpnBgpConfig {
	s.Status = &v
	return s
}

type DescribeVpnConnectionRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpnConnectionId *string `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
}

func (s DescribeVpnConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionRequest) SetRegionId(v string) *DescribeVpnConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpnConnectionRequest) SetVpnConnectionId(v string) *DescribeVpnConnectionRequest {
	s.VpnConnectionId = &v
	return s
}

type DescribeVpnConnectionResponse struct {
	RequestId          *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnConnectionId    *string                                      `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
	CustomerGatewayId  *string                                      `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	VpnGatewayId       *string                                      `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name               *string                                      `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	LocalSubnet        *string                                      `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	RemoteSubnet       *string                                      `json:"RemoteSubnet,omitempty" xml:"RemoteSubnet,omitempty" require:"true"`
	CreateTime         *int64                                       `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EffectImmediately  *bool                                        `json:"EffectImmediately,omitempty" xml:"EffectImmediately,omitempty" require:"true"`
	Status             *string                                      `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	EnableDpd          *bool                                        `json:"EnableDpd,omitempty" xml:"EnableDpd,omitempty" require:"true"`
	EnableNatTraversal *bool                                        `json:"EnableNatTraversal,omitempty" xml:"EnableNatTraversal,omitempty" require:"true"`
	IkeConfig          *DescribeVpnConnectionResponseIkeConfig      `json:"IkeConfig,omitempty" xml:"IkeConfig,omitempty" require:"true" type:"Struct"`
	IpsecConfig        *DescribeVpnConnectionResponseIpsecConfig    `json:"IpsecConfig,omitempty" xml:"IpsecConfig,omitempty" require:"true" type:"Struct"`
	VcoHealthCheck     *DescribeVpnConnectionResponseVcoHealthCheck `json:"VcoHealthCheck,omitempty" xml:"VcoHealthCheck,omitempty" require:"true" type:"Struct"`
	VpnBgpConfig       *DescribeVpnConnectionResponseVpnBgpConfig   `json:"VpnBgpConfig,omitempty" xml:"VpnBgpConfig,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpnConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionResponse) SetRequestId(v string) *DescribeVpnConnectionResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetVpnConnectionId(v string) *DescribeVpnConnectionResponse {
	s.VpnConnectionId = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetCustomerGatewayId(v string) *DescribeVpnConnectionResponse {
	s.CustomerGatewayId = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetVpnGatewayId(v string) *DescribeVpnConnectionResponse {
	s.VpnGatewayId = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetName(v string) *DescribeVpnConnectionResponse {
	s.Name = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetLocalSubnet(v string) *DescribeVpnConnectionResponse {
	s.LocalSubnet = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetRemoteSubnet(v string) *DescribeVpnConnectionResponse {
	s.RemoteSubnet = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetCreateTime(v int64) *DescribeVpnConnectionResponse {
	s.CreateTime = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetEffectImmediately(v bool) *DescribeVpnConnectionResponse {
	s.EffectImmediately = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetStatus(v string) *DescribeVpnConnectionResponse {
	s.Status = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetEnableDpd(v bool) *DescribeVpnConnectionResponse {
	s.EnableDpd = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetEnableNatTraversal(v bool) *DescribeVpnConnectionResponse {
	s.EnableNatTraversal = &v
	return s
}

func (s *DescribeVpnConnectionResponse) SetIkeConfig(v *DescribeVpnConnectionResponseIkeConfig) *DescribeVpnConnectionResponse {
	s.IkeConfig = v
	return s
}

func (s *DescribeVpnConnectionResponse) SetIpsecConfig(v *DescribeVpnConnectionResponseIpsecConfig) *DescribeVpnConnectionResponse {
	s.IpsecConfig = v
	return s
}

func (s *DescribeVpnConnectionResponse) SetVcoHealthCheck(v *DescribeVpnConnectionResponseVcoHealthCheck) *DescribeVpnConnectionResponse {
	s.VcoHealthCheck = v
	return s
}

func (s *DescribeVpnConnectionResponse) SetVpnBgpConfig(v *DescribeVpnConnectionResponseVpnBgpConfig) *DescribeVpnConnectionResponse {
	s.VpnBgpConfig = v
	return s
}

type DescribeVpnConnectionResponseIkeConfig struct {
	Psk         *string `json:"Psk,omitempty" xml:"Psk,omitempty" require:"true"`
	IkeVersion  *string `json:"IkeVersion,omitempty" xml:"IkeVersion,omitempty" require:"true"`
	IkeMode     *string `json:"IkeMode,omitempty" xml:"IkeMode,omitempty" require:"true"`
	IkeEncAlg   *string `json:"IkeEncAlg,omitempty" xml:"IkeEncAlg,omitempty" require:"true"`
	IkeAuthAlg  *string `json:"IkeAuthAlg,omitempty" xml:"IkeAuthAlg,omitempty" require:"true"`
	IkePfs      *string `json:"IkePfs,omitempty" xml:"IkePfs,omitempty" require:"true"`
	IkeLifetime *int64  `json:"IkeLifetime,omitempty" xml:"IkeLifetime,omitempty" require:"true"`
	LocalId     *string `json:"LocalId,omitempty" xml:"LocalId,omitempty" require:"true"`
	RemoteId    *string `json:"RemoteId,omitempty" xml:"RemoteId,omitempty" require:"true"`
}

func (s DescribeVpnConnectionResponseIkeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionResponseIkeConfig) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetPsk(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.Psk = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetIkeVersion(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.IkeVersion = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetIkeMode(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.IkeMode = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetIkeEncAlg(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.IkeEncAlg = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetIkeAuthAlg(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.IkeAuthAlg = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetIkePfs(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.IkePfs = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetIkeLifetime(v int64) *DescribeVpnConnectionResponseIkeConfig {
	s.IkeLifetime = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetLocalId(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.LocalId = &v
	return s
}

func (s *DescribeVpnConnectionResponseIkeConfig) SetRemoteId(v string) *DescribeVpnConnectionResponseIkeConfig {
	s.RemoteId = &v
	return s
}

type DescribeVpnConnectionResponseIpsecConfig struct {
	IpsecEncAlg   *string `json:"IpsecEncAlg,omitempty" xml:"IpsecEncAlg,omitempty" require:"true"`
	IpsecAuthAlg  *string `json:"IpsecAuthAlg,omitempty" xml:"IpsecAuthAlg,omitempty" require:"true"`
	IpsecPfs      *string `json:"IpsecPfs,omitempty" xml:"IpsecPfs,omitempty" require:"true"`
	IpsecLifetime *int64  `json:"IpsecLifetime,omitempty" xml:"IpsecLifetime,omitempty" require:"true"`
}

func (s DescribeVpnConnectionResponseIpsecConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionResponseIpsecConfig) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionResponseIpsecConfig) SetIpsecEncAlg(v string) *DescribeVpnConnectionResponseIpsecConfig {
	s.IpsecEncAlg = &v
	return s
}

func (s *DescribeVpnConnectionResponseIpsecConfig) SetIpsecAuthAlg(v string) *DescribeVpnConnectionResponseIpsecConfig {
	s.IpsecAuthAlg = &v
	return s
}

func (s *DescribeVpnConnectionResponseIpsecConfig) SetIpsecPfs(v string) *DescribeVpnConnectionResponseIpsecConfig {
	s.IpsecPfs = &v
	return s
}

func (s *DescribeVpnConnectionResponseIpsecConfig) SetIpsecLifetime(v int64) *DescribeVpnConnectionResponseIpsecConfig {
	s.IpsecLifetime = &v
	return s
}

type DescribeVpnConnectionResponseVcoHealthCheck struct {
	Enable   *string `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	Sip      *string `json:"Sip,omitempty" xml:"Sip,omitempty" require:"true"`
	Dip      *string `json:"Dip,omitempty" xml:"Dip,omitempty" require:"true"`
	Interval *int    `json:"Interval,omitempty" xml:"Interval,omitempty" require:"true"`
	Retry    *int    `json:"Retry,omitempty" xml:"Retry,omitempty" require:"true"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeVpnConnectionResponseVcoHealthCheck) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionResponseVcoHealthCheck) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionResponseVcoHealthCheck) SetEnable(v string) *DescribeVpnConnectionResponseVcoHealthCheck {
	s.Enable = &v
	return s
}

func (s *DescribeVpnConnectionResponseVcoHealthCheck) SetSip(v string) *DescribeVpnConnectionResponseVcoHealthCheck {
	s.Sip = &v
	return s
}

func (s *DescribeVpnConnectionResponseVcoHealthCheck) SetDip(v string) *DescribeVpnConnectionResponseVcoHealthCheck {
	s.Dip = &v
	return s
}

func (s *DescribeVpnConnectionResponseVcoHealthCheck) SetInterval(v int) *DescribeVpnConnectionResponseVcoHealthCheck {
	s.Interval = &v
	return s
}

func (s *DescribeVpnConnectionResponseVcoHealthCheck) SetRetry(v int) *DescribeVpnConnectionResponseVcoHealthCheck {
	s.Retry = &v
	return s
}

func (s *DescribeVpnConnectionResponseVcoHealthCheck) SetStatus(v string) *DescribeVpnConnectionResponseVcoHealthCheck {
	s.Status = &v
	return s
}

type DescribeVpnConnectionResponseVpnBgpConfig struct {
	EnableBgp  *string `json:"EnableBgp,omitempty" xml:"EnableBgp,omitempty" require:"true"`
	TunnelCidr *string `json:"TunnelCidr,omitempty" xml:"TunnelCidr,omitempty" require:"true"`
	LocalBgpIp *string `json:"LocalBgpIp,omitempty" xml:"LocalBgpIp,omitempty" require:"true"`
	PeerBgpIp  *string `json:"PeerBgpIp,omitempty" xml:"PeerBgpIp,omitempty" require:"true"`
	LocalAsn   *string `json:"LocalAsn,omitempty" xml:"LocalAsn,omitempty" require:"true"`
	PeerAsn    *string `json:"PeerAsn,omitempty" xml:"PeerAsn,omitempty" require:"true"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeVpnConnectionResponseVpnBgpConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpnConnectionResponseVpnBgpConfig) GoString() string {
	return s.String()
}

func (s *DescribeVpnConnectionResponseVpnBgpConfig) SetEnableBgp(v string) *DescribeVpnConnectionResponseVpnBgpConfig {
	s.EnableBgp = &v
	return s
}

func (s *DescribeVpnConnectionResponseVpnBgpConfig) SetTunnelCidr(v string) *DescribeVpnConnectionResponseVpnBgpConfig {
	s.TunnelCidr = &v
	return s
}

func (s *DescribeVpnConnectionResponseVpnBgpConfig) SetLocalBgpIp(v string) *DescribeVpnConnectionResponseVpnBgpConfig {
	s.LocalBgpIp = &v
	return s
}

func (s *DescribeVpnConnectionResponseVpnBgpConfig) SetPeerBgpIp(v string) *DescribeVpnConnectionResponseVpnBgpConfig {
	s.PeerBgpIp = &v
	return s
}

func (s *DescribeVpnConnectionResponseVpnBgpConfig) SetLocalAsn(v string) *DescribeVpnConnectionResponseVpnBgpConfig {
	s.LocalAsn = &v
	return s
}

func (s *DescribeVpnConnectionResponseVpnBgpConfig) SetPeerAsn(v string) *DescribeVpnConnectionResponseVpnBgpConfig {
	s.PeerAsn = &v
	return s
}

func (s *DescribeVpnConnectionResponseVpnBgpConfig) SetStatus(v string) *DescribeVpnConnectionResponseVpnBgpConfig {
	s.Status = &v
	return s
}

type DescribeCustomerGatewaysRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty"`
	PageNumber        *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeCustomerGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomerGatewaysRequest) SetRegionId(v string) *DescribeCustomerGatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCustomerGatewaysRequest) SetCustomerGatewayId(v string) *DescribeCustomerGatewaysRequest {
	s.CustomerGatewayId = &v
	return s
}

func (s *DescribeCustomerGatewaysRequest) SetPageNumber(v int) *DescribeCustomerGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCustomerGatewaysRequest) SetPageSize(v int) *DescribeCustomerGatewaysRequest {
	s.PageSize = &v
	return s
}

type DescribeCustomerGatewaysResponse struct {
	RequestId        *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount       *int                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber       *int                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize         *int                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CustomerGateways *DescribeCustomerGatewaysResponseCustomerGateways `json:"CustomerGateways,omitempty" xml:"CustomerGateways,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCustomerGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomerGatewaysResponse) SetRequestId(v string) *DescribeCustomerGatewaysResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCustomerGatewaysResponse) SetTotalCount(v int) *DescribeCustomerGatewaysResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeCustomerGatewaysResponse) SetPageNumber(v int) *DescribeCustomerGatewaysResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeCustomerGatewaysResponse) SetPageSize(v int) *DescribeCustomerGatewaysResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeCustomerGatewaysResponse) SetCustomerGateways(v *DescribeCustomerGatewaysResponseCustomerGateways) *DescribeCustomerGatewaysResponse {
	s.CustomerGateways = v
	return s
}

type DescribeCustomerGatewaysResponseCustomerGateways struct {
	CustomerGateway []*DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway `json:"CustomerGateway,omitempty" xml:"CustomerGateway,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCustomerGatewaysResponseCustomerGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerGatewaysResponseCustomerGateways) GoString() string {
	return s.String()
}

func (s *DescribeCustomerGatewaysResponseCustomerGateways) SetCustomerGateway(v []*DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) *DescribeCustomerGatewaysResponseCustomerGateways {
	s.CustomerGateway = v
	return s
}

type DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway struct {
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	IpAddress         *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Asn               *int    `json:"Asn,omitempty" xml:"Asn,omitempty" require:"true"`
}

func (s DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) GoString() string {
	return s.String()
}

func (s *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) SetCustomerGatewayId(v string) *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway {
	s.CustomerGatewayId = &v
	return s
}

func (s *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) SetName(v string) *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway {
	s.Name = &v
	return s
}

func (s *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) SetIpAddress(v string) *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway {
	s.IpAddress = &v
	return s
}

func (s *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) SetDescription(v string) *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway {
	s.Description = &v
	return s
}

func (s *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) SetCreateTime(v int64) *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway {
	s.CreateTime = &v
	return s
}

func (s *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway) SetAsn(v int) *DescribeCustomerGatewaysResponseCustomerGatewaysCustomerGateway {
	s.Asn = &v
	return s
}

type DescribeCustomerGatewayRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
}

func (s DescribeCustomerGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerGatewayRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomerGatewayRequest) SetRegionId(v string) *DescribeCustomerGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCustomerGatewayRequest) SetCustomerGatewayId(v string) *DescribeCustomerGatewayRequest {
	s.CustomerGatewayId = &v
	return s
}

type DescribeCustomerGatewayResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	IpAddress         *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Asn               *int    `json:"Asn,omitempty" xml:"Asn,omitempty" require:"true"`
}

func (s DescribeCustomerGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerGatewayResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomerGatewayResponse) SetRequestId(v string) *DescribeCustomerGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCustomerGatewayResponse) SetCustomerGatewayId(v string) *DescribeCustomerGatewayResponse {
	s.CustomerGatewayId = &v
	return s
}

func (s *DescribeCustomerGatewayResponse) SetIpAddress(v string) *DescribeCustomerGatewayResponse {
	s.IpAddress = &v
	return s
}

func (s *DescribeCustomerGatewayResponse) SetName(v string) *DescribeCustomerGatewayResponse {
	s.Name = &v
	return s
}

func (s *DescribeCustomerGatewayResponse) SetDescription(v string) *DescribeCustomerGatewayResponse {
	s.Description = &v
	return s
}

func (s *DescribeCustomerGatewayResponse) SetCreateTime(v int64) *DescribeCustomerGatewayResponse {
	s.CreateTime = &v
	return s
}

func (s *DescribeCustomerGatewayResponse) SetAsn(v int) *DescribeCustomerGatewayResponse {
	s.Asn = &v
	return s
}

type DeleteVpnGatewayRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnGatewayId *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
}

func (s DeleteVpnGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpnGatewayRequest) SetRegionId(v string) *DeleteVpnGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVpnGatewayRequest) SetClientToken(v string) *DeleteVpnGatewayRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteVpnGatewayRequest) SetVpnGatewayId(v string) *DeleteVpnGatewayRequest {
	s.VpnGatewayId = &v
	return s
}

type DeleteVpnGatewayResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteVpnGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpnGatewayResponse) SetRequestId(v string) *DeleteVpnGatewayResponse {
	s.RequestId = &v
	return s
}

type DeleteVpnConnectionRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VpnConnectionId *string `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
}

func (s DeleteVpnConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnConnectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpnConnectionRequest) SetRegionId(v string) *DeleteVpnConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVpnConnectionRequest) SetClientToken(v string) *DeleteVpnConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteVpnConnectionRequest) SetVpnConnectionId(v string) *DeleteVpnConnectionRequest {
	s.VpnConnectionId = &v
	return s
}

type DeleteVpnConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteVpnConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpnConnectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpnConnectionResponse) SetRequestId(v string) *DeleteVpnConnectionResponse {
	s.RequestId = &v
	return s
}

type DeleteCustomerGatewayRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
}

func (s DeleteCustomerGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomerGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomerGatewayRequest) SetRegionId(v string) *DeleteCustomerGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCustomerGatewayRequest) SetClientToken(v string) *DeleteCustomerGatewayRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteCustomerGatewayRequest) SetCustomerGatewayId(v string) *DeleteCustomerGatewayRequest {
	s.CustomerGatewayId = &v
	return s
}

type DeleteCustomerGatewayResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteCustomerGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomerGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomerGatewayResponse) SetRequestId(v string) *DeleteCustomerGatewayResponse {
	s.RequestId = &v
	return s
}

type CreateVpnConnectionRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CustomerGatewayId  *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	VpnGatewayId       *string `json:"VpnGatewayId,omitempty" xml:"VpnGatewayId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	LocalSubnet        *string `json:"LocalSubnet,omitempty" xml:"LocalSubnet,omitempty" require:"true"`
	RemoteSubnet       *string `json:"RemoteSubnet,omitempty" xml:"RemoteSubnet,omitempty" require:"true"`
	EffectImmediately  *bool   `json:"EffectImmediately,omitempty" xml:"EffectImmediately,omitempty"`
	IkeConfig          *string `json:"IkeConfig,omitempty" xml:"IkeConfig,omitempty"`
	IpsecConfig        *string `json:"IpsecConfig,omitempty" xml:"IpsecConfig,omitempty"`
	HealthCheckConfig  *string `json:"HealthCheckConfig,omitempty" xml:"HealthCheckConfig,omitempty"`
	AutoConfigRoute    *bool   `json:"AutoConfigRoute,omitempty" xml:"AutoConfigRoute,omitempty"`
	EnableDpd          *bool   `json:"EnableDpd,omitempty" xml:"EnableDpd,omitempty"`
	EnableNatTraversal *bool   `json:"EnableNatTraversal,omitempty" xml:"EnableNatTraversal,omitempty"`
	BgpConfig          *string `json:"BgpConfig,omitempty" xml:"BgpConfig,omitempty"`
}

func (s CreateVpnConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreateVpnConnectionRequest) SetRegionId(v string) *CreateVpnConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetClientToken(v string) *CreateVpnConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetCustomerGatewayId(v string) *CreateVpnConnectionRequest {
	s.CustomerGatewayId = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetVpnGatewayId(v string) *CreateVpnConnectionRequest {
	s.VpnGatewayId = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetName(v string) *CreateVpnConnectionRequest {
	s.Name = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetLocalSubnet(v string) *CreateVpnConnectionRequest {
	s.LocalSubnet = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetRemoteSubnet(v string) *CreateVpnConnectionRequest {
	s.RemoteSubnet = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetEffectImmediately(v bool) *CreateVpnConnectionRequest {
	s.EffectImmediately = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetIkeConfig(v string) *CreateVpnConnectionRequest {
	s.IkeConfig = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetIpsecConfig(v string) *CreateVpnConnectionRequest {
	s.IpsecConfig = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetHealthCheckConfig(v string) *CreateVpnConnectionRequest {
	s.HealthCheckConfig = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetAutoConfigRoute(v bool) *CreateVpnConnectionRequest {
	s.AutoConfigRoute = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetEnableDpd(v bool) *CreateVpnConnectionRequest {
	s.EnableDpd = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetEnableNatTraversal(v bool) *CreateVpnConnectionRequest {
	s.EnableNatTraversal = &v
	return s
}

func (s *CreateVpnConnectionRequest) SetBgpConfig(v string) *CreateVpnConnectionRequest {
	s.BgpConfig = &v
	return s
}

type CreateVpnConnectionResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpnConnectionId *string `json:"VpnConnectionId,omitempty" xml:"VpnConnectionId,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
}

func (s CreateVpnConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpnConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreateVpnConnectionResponse) SetRequestId(v string) *CreateVpnConnectionResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVpnConnectionResponse) SetVpnConnectionId(v string) *CreateVpnConnectionResponse {
	s.VpnConnectionId = &v
	return s
}

func (s *CreateVpnConnectionResponse) SetName(v string) *CreateVpnConnectionResponse {
	s.Name = &v
	return s
}

func (s *CreateVpnConnectionResponse) SetCreateTime(v int64) *CreateVpnConnectionResponse {
	s.CreateTime = &v
	return s
}

type CreateCustomerGatewayRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	IpAddress   *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Asn         *string `json:"Asn,omitempty" xml:"Asn,omitempty"`
}

func (s CreateCustomerGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomerGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomerGatewayRequest) SetRegionId(v string) *CreateCustomerGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCustomerGatewayRequest) SetClientToken(v string) *CreateCustomerGatewayRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateCustomerGatewayRequest) SetIpAddress(v string) *CreateCustomerGatewayRequest {
	s.IpAddress = &v
	return s
}

func (s *CreateCustomerGatewayRequest) SetName(v string) *CreateCustomerGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateCustomerGatewayRequest) SetDescription(v string) *CreateCustomerGatewayRequest {
	s.Description = &v
	return s
}

func (s *CreateCustomerGatewayRequest) SetAsn(v string) *CreateCustomerGatewayRequest {
	s.Asn = &v
	return s
}

type CreateCustomerGatewayResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	CustomerGatewayId *string `json:"CustomerGatewayId,omitempty" xml:"CustomerGatewayId,omitempty" require:"true"`
	IpAddress         *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
}

func (s CreateCustomerGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomerGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomerGatewayResponse) SetRequestId(v string) *CreateCustomerGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *CreateCustomerGatewayResponse) SetCustomerGatewayId(v string) *CreateCustomerGatewayResponse {
	s.CustomerGatewayId = &v
	return s
}

func (s *CreateCustomerGatewayResponse) SetIpAddress(v string) *CreateCustomerGatewayResponse {
	s.IpAddress = &v
	return s
}

func (s *CreateCustomerGatewayResponse) SetName(v string) *CreateCustomerGatewayResponse {
	s.Name = &v
	return s
}

func (s *CreateCustomerGatewayResponse) SetDescription(v string) *CreateCustomerGatewayResponse {
	s.Description = &v
	return s
}

func (s *CreateCustomerGatewayResponse) SetCreateTime(v int64) *CreateCustomerGatewayResponse {
	s.CreateTime = &v
	return s
}

type ModifyBgpGroupAttributeRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BgpGroupId  *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LocalAsn    *int64  `json:"LocalAsn,omitempty" xml:"LocalAsn,omitempty"`
	PeerAsn     *int64  `json:"PeerAsn,omitempty" xml:"PeerAsn,omitempty"`
	AuthKey     *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	IsFakeAsn   *bool   `json:"IsFakeAsn,omitempty" xml:"IsFakeAsn,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifyBgpGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBgpGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyBgpGroupAttributeRequest) SetRegionId(v string) *ModifyBgpGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetBgpGroupId(v string) *ModifyBgpGroupAttributeRequest {
	s.BgpGroupId = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetName(v string) *ModifyBgpGroupAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetDescription(v string) *ModifyBgpGroupAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetLocalAsn(v int64) *ModifyBgpGroupAttributeRequest {
	s.LocalAsn = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetPeerAsn(v int64) *ModifyBgpGroupAttributeRequest {
	s.PeerAsn = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetAuthKey(v string) *ModifyBgpGroupAttributeRequest {
	s.AuthKey = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetIsFakeAsn(v bool) *ModifyBgpGroupAttributeRequest {
	s.IsFakeAsn = &v
	return s
}

func (s *ModifyBgpGroupAttributeRequest) SetClientToken(v string) *ModifyBgpGroupAttributeRequest {
	s.ClientToken = &v
	return s
}

type ModifyBgpGroupAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyBgpGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBgpGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyBgpGroupAttributeResponse) SetRequestId(v string) *ModifyBgpGroupAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeBgpPeersRequest struct {
	RouterId   *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	BgpPeerId  *string `json:"BgpPeerId,omitempty" xml:"BgpPeerId,omitempty"`
	BgpGroupId *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IsDefault  *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBgpPeersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpPeersRequest) GoString() string {
	return s.String()
}

func (s *DescribeBgpPeersRequest) SetRouterId(v string) *DescribeBgpPeersRequest {
	s.RouterId = &v
	return s
}

func (s *DescribeBgpPeersRequest) SetBgpPeerId(v string) *DescribeBgpPeersRequest {
	s.BgpPeerId = &v
	return s
}

func (s *DescribeBgpPeersRequest) SetBgpGroupId(v string) *DescribeBgpPeersRequest {
	s.BgpGroupId = &v
	return s
}

func (s *DescribeBgpPeersRequest) SetRegionId(v string) *DescribeBgpPeersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBgpPeersRequest) SetIsDefault(v bool) *DescribeBgpPeersRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeBgpPeersRequest) SetPageNumber(v int) *DescribeBgpPeersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBgpPeersRequest) SetPageSize(v int) *DescribeBgpPeersRequest {
	s.PageSize = &v
	return s
}

type DescribeBgpPeersResponse struct {
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount *int                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *int                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	BgpPeers   *DescribeBgpPeersResponseBgpPeers `json:"BgpPeers,omitempty" xml:"BgpPeers,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBgpPeersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpPeersResponse) GoString() string {
	return s.String()
}

func (s *DescribeBgpPeersResponse) SetRequestId(v string) *DescribeBgpPeersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBgpPeersResponse) SetTotalCount(v int) *DescribeBgpPeersResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeBgpPeersResponse) SetPageNumber(v int) *DescribeBgpPeersResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeBgpPeersResponse) SetPageSize(v int) *DescribeBgpPeersResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeBgpPeersResponse) SetBgpPeers(v *DescribeBgpPeersResponseBgpPeers) *DescribeBgpPeersResponse {
	s.BgpPeers = v
	return s
}

type DescribeBgpPeersResponseBgpPeers struct {
	BgpPeer []*DescribeBgpPeersResponseBgpPeersBgpPeer `json:"BgpPeer,omitempty" xml:"BgpPeer,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBgpPeersResponseBgpPeers) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpPeersResponseBgpPeers) GoString() string {
	return s.String()
}

func (s *DescribeBgpPeersResponseBgpPeers) SetBgpPeer(v []*DescribeBgpPeersResponseBgpPeersBgpPeer) *DescribeBgpPeersResponseBgpPeers {
	s.BgpPeer = v
	return s
}

type DescribeBgpPeersResponseBgpPeersBgpPeer struct {
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	BgpPeerId     *string `json:"BgpPeerId,omitempty" xml:"BgpPeerId,omitempty" require:"true"`
	BgpGroupId    *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty" require:"true"`
	PeerIpAddress *string `json:"PeerIpAddress,omitempty" xml:"PeerIpAddress,omitempty" require:"true"`
	PeerAsn       *string `json:"PeerAsn,omitempty" xml:"PeerAsn,omitempty" require:"true"`
	AuthKey       *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty" require:"true"`
	RouterId      *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	BgpStatus     *string `json:"BgpStatus,omitempty" xml:"BgpStatus,omitempty" require:"true"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Keepalive     *string `json:"Keepalive,omitempty" xml:"Keepalive,omitempty" require:"true"`
	LocalAsn      *string `json:"LocalAsn,omitempty" xml:"LocalAsn,omitempty" require:"true"`
	Hold          *string `json:"Hold,omitempty" xml:"Hold,omitempty" require:"true"`
	IsFake        *string `json:"IsFake,omitempty" xml:"IsFake,omitempty" require:"true"`
	RouteLimit    *string `json:"RouteLimit,omitempty" xml:"RouteLimit,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EnableBfd     *bool   `json:"EnableBfd,omitempty" xml:"EnableBfd,omitempty" require:"true"`
	IpVersion     *string `json:"IpVersion,omitempty" xml:"IpVersion,omitempty" require:"true"`
	BfdMultiHop   *int    `json:"BfdMultiHop,omitempty" xml:"BfdMultiHop,omitempty" require:"true"`
}

func (s DescribeBgpPeersResponseBgpPeersBgpPeer) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpPeersResponseBgpPeersBgpPeer) GoString() string {
	return s.String()
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetName(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.Name = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetDescription(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.Description = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetBgpPeerId(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.BgpPeerId = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetBgpGroupId(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.BgpGroupId = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetPeerIpAddress(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.PeerIpAddress = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetPeerAsn(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.PeerAsn = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetAuthKey(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.AuthKey = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetRouterId(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.RouterId = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetBgpStatus(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.BgpStatus = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetStatus(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.Status = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetKeepalive(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.Keepalive = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetLocalAsn(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.LocalAsn = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetHold(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.Hold = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetIsFake(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.IsFake = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetRouteLimit(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.RouteLimit = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetRegionId(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.RegionId = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetEnableBfd(v bool) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.EnableBfd = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetIpVersion(v string) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.IpVersion = &v
	return s
}

func (s *DescribeBgpPeersResponseBgpPeersBgpPeer) SetBfdMultiHop(v int) *DescribeBgpPeersResponseBgpPeersBgpPeer {
	s.BfdMultiHop = &v
	return s
}

type DescribeBgpGroupsRequest struct {
	RouterId   *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	BgpGroupId *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IsDefault  *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBgpGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBgpGroupsRequest) SetRouterId(v string) *DescribeBgpGroupsRequest {
	s.RouterId = &v
	return s
}

func (s *DescribeBgpGroupsRequest) SetBgpGroupId(v string) *DescribeBgpGroupsRequest {
	s.BgpGroupId = &v
	return s
}

func (s *DescribeBgpGroupsRequest) SetRegionId(v string) *DescribeBgpGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBgpGroupsRequest) SetIsDefault(v bool) *DescribeBgpGroupsRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeBgpGroupsRequest) SetPageNumber(v int) *DescribeBgpGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBgpGroupsRequest) SetPageSize(v int) *DescribeBgpGroupsRequest {
	s.PageSize = &v
	return s
}

type DescribeBgpGroupsResponse struct {
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount *int                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *int                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	BgpGroups  *DescribeBgpGroupsResponseBgpGroups `json:"BgpGroups,omitempty" xml:"BgpGroups,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBgpGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBgpGroupsResponse) SetRequestId(v string) *DescribeBgpGroupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBgpGroupsResponse) SetTotalCount(v int) *DescribeBgpGroupsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeBgpGroupsResponse) SetPageNumber(v int) *DescribeBgpGroupsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeBgpGroupsResponse) SetPageSize(v int) *DescribeBgpGroupsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeBgpGroupsResponse) SetBgpGroups(v *DescribeBgpGroupsResponseBgpGroups) *DescribeBgpGroupsResponse {
	s.BgpGroups = v
	return s
}

type DescribeBgpGroupsResponseBgpGroups struct {
	BgpGroup []*DescribeBgpGroupsResponseBgpGroupsBgpGroup `json:"BgpGroup,omitempty" xml:"BgpGroup,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBgpGroupsResponseBgpGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpGroupsResponseBgpGroups) GoString() string {
	return s.String()
}

func (s *DescribeBgpGroupsResponseBgpGroups) SetBgpGroup(v []*DescribeBgpGroupsResponseBgpGroupsBgpGroup) *DescribeBgpGroupsResponseBgpGroups {
	s.BgpGroup = v
	return s
}

type DescribeBgpGroupsResponseBgpGroupsBgpGroup struct {
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	BgpGroupId  *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty" require:"true"`
	PeerAsn     *string `json:"PeerAsn,omitempty" xml:"PeerAsn,omitempty" require:"true"`
	AuthKey     *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty" require:"true"`
	RouterId    *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Keepalive   *string `json:"Keepalive,omitempty" xml:"Keepalive,omitempty" require:"true"`
	LocalAsn    *string `json:"LocalAsn,omitempty" xml:"LocalAsn,omitempty" require:"true"`
	Hold        *string `json:"Hold,omitempty" xml:"Hold,omitempty" require:"true"`
	IsFake      *string `json:"IsFake,omitempty" xml:"IsFake,omitempty" require:"true"`
	RouteLimit  *string `json:"RouteLimit,omitempty" xml:"RouteLimit,omitempty" require:"true"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IpVersion   *string `json:"IpVersion,omitempty" xml:"IpVersion,omitempty" require:"true"`
}

func (s DescribeBgpGroupsResponseBgpGroupsBgpGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeBgpGroupsResponseBgpGroupsBgpGroup) GoString() string {
	return s.String()
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetName(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.Name = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetDescription(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.Description = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetBgpGroupId(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.BgpGroupId = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetPeerAsn(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.PeerAsn = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetAuthKey(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.AuthKey = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetRouterId(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.RouterId = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetStatus(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.Status = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetKeepalive(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.Keepalive = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetLocalAsn(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.LocalAsn = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetHold(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.Hold = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetIsFake(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.IsFake = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetRouteLimit(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.RouteLimit = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetRegionId(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.RegionId = &v
	return s
}

func (s *DescribeBgpGroupsResponseBgpGroupsBgpGroup) SetIpVersion(v string) *DescribeBgpGroupsResponseBgpGroupsBgpGroup {
	s.IpVersion = &v
	return s
}

type DeleteBgpPeerRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BgpPeerId   *string `json:"BgpPeerId,omitempty" xml:"BgpPeerId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteBgpPeerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBgpPeerRequest) GoString() string {
	return s.String()
}

func (s *DeleteBgpPeerRequest) SetRegionId(v string) *DeleteBgpPeerRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBgpPeerRequest) SetBgpPeerId(v string) *DeleteBgpPeerRequest {
	s.BgpPeerId = &v
	return s
}

func (s *DeleteBgpPeerRequest) SetClientToken(v string) *DeleteBgpPeerRequest {
	s.ClientToken = &v
	return s
}

type DeleteBgpPeerResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteBgpPeerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBgpPeerResponse) GoString() string {
	return s.String()
}

func (s *DeleteBgpPeerResponse) SetRequestId(v string) *DeleteBgpPeerResponse {
	s.RequestId = &v
	return s
}

type DeleteBgpNetworkRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DstCidrBlock *string `json:"DstCidrBlock,omitempty" xml:"DstCidrBlock,omitempty" require:"true"`
	RouterId     *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteBgpNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBgpNetworkRequest) GoString() string {
	return s.String()
}

func (s *DeleteBgpNetworkRequest) SetRegionId(v string) *DeleteBgpNetworkRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBgpNetworkRequest) SetDstCidrBlock(v string) *DeleteBgpNetworkRequest {
	s.DstCidrBlock = &v
	return s
}

func (s *DeleteBgpNetworkRequest) SetRouterId(v string) *DeleteBgpNetworkRequest {
	s.RouterId = &v
	return s
}

func (s *DeleteBgpNetworkRequest) SetClientToken(v string) *DeleteBgpNetworkRequest {
	s.ClientToken = &v
	return s
}

type DeleteBgpNetworkResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteBgpNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBgpNetworkResponse) GoString() string {
	return s.String()
}

func (s *DeleteBgpNetworkResponse) SetRequestId(v string) *DeleteBgpNetworkResponse {
	s.RequestId = &v
	return s
}

type DeleteBgpGroupRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BgpGroupId  *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteBgpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBgpGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteBgpGroupRequest) SetRegionId(v string) *DeleteBgpGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBgpGroupRequest) SetBgpGroupId(v string) *DeleteBgpGroupRequest {
	s.BgpGroupId = &v
	return s
}

func (s *DeleteBgpGroupRequest) SetClientToken(v string) *DeleteBgpGroupRequest {
	s.ClientToken = &v
	return s
}

type DeleteBgpGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteBgpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBgpGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteBgpGroupResponse) SetRequestId(v string) *DeleteBgpGroupResponse {
	s.RequestId = &v
	return s
}

type CreateBgpPeerRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BgpGroupId    *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty" require:"true"`
	PeerIpAddress *string `json:"PeerIpAddress,omitempty" xml:"PeerIpAddress,omitempty"`
	EnableBfd     *bool   `json:"EnableBfd,omitempty" xml:"EnableBfd,omitempty"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	IpVersion     *string `json:"IpVersion,omitempty" xml:"IpVersion,omitempty"`
	BfdMultiHop   *int    `json:"BfdMultiHop,omitempty" xml:"BfdMultiHop,omitempty"`
}

func (s CreateBgpPeerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBgpPeerRequest) GoString() string {
	return s.String()
}

func (s *CreateBgpPeerRequest) SetRegionId(v string) *CreateBgpPeerRequest {
	s.RegionId = &v
	return s
}

func (s *CreateBgpPeerRequest) SetBgpGroupId(v string) *CreateBgpPeerRequest {
	s.BgpGroupId = &v
	return s
}

func (s *CreateBgpPeerRequest) SetPeerIpAddress(v string) *CreateBgpPeerRequest {
	s.PeerIpAddress = &v
	return s
}

func (s *CreateBgpPeerRequest) SetEnableBfd(v bool) *CreateBgpPeerRequest {
	s.EnableBfd = &v
	return s
}

func (s *CreateBgpPeerRequest) SetClientToken(v string) *CreateBgpPeerRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateBgpPeerRequest) SetIpVersion(v string) *CreateBgpPeerRequest {
	s.IpVersion = &v
	return s
}

func (s *CreateBgpPeerRequest) SetBfdMultiHop(v int) *CreateBgpPeerRequest {
	s.BfdMultiHop = &v
	return s
}

type CreateBgpPeerResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	BgpPeerId *string `json:"BgpPeerId,omitempty" xml:"BgpPeerId,omitempty" require:"true"`
}

func (s CreateBgpPeerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBgpPeerResponse) GoString() string {
	return s.String()
}

func (s *CreateBgpPeerResponse) SetRequestId(v string) *CreateBgpPeerResponse {
	s.RequestId = &v
	return s
}

func (s *CreateBgpPeerResponse) SetBgpPeerId(v string) *CreateBgpPeerResponse {
	s.BgpPeerId = &v
	return s
}

type CreateBgpGroupRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterId    *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LocalAsn    *int64  `json:"LocalAsn,omitempty" xml:"LocalAsn,omitempty"`
	PeerAsn     *int64  `json:"PeerAsn,omitempty" xml:"PeerAsn,omitempty" require:"true"`
	AuthKey     *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	IsFakeAsn   *bool   `json:"IsFakeAsn,omitempty" xml:"IsFakeAsn,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	IpVersion   *string `json:"IpVersion,omitempty" xml:"IpVersion,omitempty"`
}

func (s CreateBgpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBgpGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateBgpGroupRequest) SetRegionId(v string) *CreateBgpGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateBgpGroupRequest) SetRouterId(v string) *CreateBgpGroupRequest {
	s.RouterId = &v
	return s
}

func (s *CreateBgpGroupRequest) SetName(v string) *CreateBgpGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateBgpGroupRequest) SetDescription(v string) *CreateBgpGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateBgpGroupRequest) SetLocalAsn(v int64) *CreateBgpGroupRequest {
	s.LocalAsn = &v
	return s
}

func (s *CreateBgpGroupRequest) SetPeerAsn(v int64) *CreateBgpGroupRequest {
	s.PeerAsn = &v
	return s
}

func (s *CreateBgpGroupRequest) SetAuthKey(v string) *CreateBgpGroupRequest {
	s.AuthKey = &v
	return s
}

func (s *CreateBgpGroupRequest) SetIsFakeAsn(v bool) *CreateBgpGroupRequest {
	s.IsFakeAsn = &v
	return s
}

func (s *CreateBgpGroupRequest) SetClientToken(v string) *CreateBgpGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateBgpGroupRequest) SetIpVersion(v string) *CreateBgpGroupRequest {
	s.IpVersion = &v
	return s
}

type CreateBgpGroupResponse struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	BgpGroupId *string `json:"BgpGroupId,omitempty" xml:"BgpGroupId,omitempty" require:"true"`
}

func (s CreateBgpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBgpGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateBgpGroupResponse) SetRequestId(v string) *CreateBgpGroupResponse {
	s.RequestId = &v
	return s
}

func (s *CreateBgpGroupResponse) SetBgpGroupId(v string) *CreateBgpGroupResponse {
	s.BgpGroupId = &v
	return s
}

type AddBgpNetworkRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DstCidrBlock *string `json:"DstCidrBlock,omitempty" xml:"DstCidrBlock,omitempty" require:"true"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RouterId     *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AddBgpNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBgpNetworkRequest) GoString() string {
	return s.String()
}

func (s *AddBgpNetworkRequest) SetRegionId(v string) *AddBgpNetworkRequest {
	s.RegionId = &v
	return s
}

func (s *AddBgpNetworkRequest) SetDstCidrBlock(v string) *AddBgpNetworkRequest {
	s.DstCidrBlock = &v
	return s
}

func (s *AddBgpNetworkRequest) SetVpcId(v string) *AddBgpNetworkRequest {
	s.VpcId = &v
	return s
}

func (s *AddBgpNetworkRequest) SetRouterId(v string) *AddBgpNetworkRequest {
	s.RouterId = &v
	return s
}

func (s *AddBgpNetworkRequest) SetClientToken(v string) *AddBgpNetworkRequest {
	s.ClientToken = &v
	return s
}

type AddBgpNetworkResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AddBgpNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBgpNetworkResponse) GoString() string {
	return s.String()
}

func (s *AddBgpNetworkResponse) SetRequestId(v string) *AddBgpNetworkResponse {
	s.RequestId = &v
	return s
}

type EnableVpcClassicLinkRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s EnableVpcClassicLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableVpcClassicLinkRequest) GoString() string {
	return s.String()
}

func (s *EnableVpcClassicLinkRequest) SetRegionId(v string) *EnableVpcClassicLinkRequest {
	s.RegionId = &v
	return s
}

func (s *EnableVpcClassicLinkRequest) SetVpcId(v string) *EnableVpcClassicLinkRequest {
	s.VpcId = &v
	return s
}

func (s *EnableVpcClassicLinkRequest) SetClientToken(v string) *EnableVpcClassicLinkRequest {
	s.ClientToken = &v
	return s
}

type EnableVpcClassicLinkResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s EnableVpcClassicLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableVpcClassicLinkResponse) GoString() string {
	return s.String()
}

func (s *EnableVpcClassicLinkResponse) SetRequestId(v string) *EnableVpcClassicLinkResponse {
	s.RequestId = &v
	return s
}

type DisableVpcClassicLinkRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DisableVpcClassicLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableVpcClassicLinkRequest) GoString() string {
	return s.String()
}

func (s *DisableVpcClassicLinkRequest) SetRegionId(v string) *DisableVpcClassicLinkRequest {
	s.RegionId = &v
	return s
}

func (s *DisableVpcClassicLinkRequest) SetVpcId(v string) *DisableVpcClassicLinkRequest {
	s.VpcId = &v
	return s
}

func (s *DisableVpcClassicLinkRequest) SetClientToken(v string) *DisableVpcClassicLinkRequest {
	s.ClientToken = &v
	return s
}

type DisableVpcClassicLinkResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DisableVpcClassicLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableVpcClassicLinkResponse) GoString() string {
	return s.String()
}

func (s *DisableVpcClassicLinkResponse) SetRequestId(v string) *DisableVpcClassicLinkResponse {
	s.RequestId = &v
	return s
}

type DescribeVpcAttributeRequest struct {
	VpcId     *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DryRun    *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	IsDefault *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
}

func (s DescribeVpcAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeRequest) SetVpcId(v string) *DescribeVpcAttributeRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcAttributeRequest) SetRegionId(v string) *DescribeVpcAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcAttributeRequest) SetDryRun(v bool) *DescribeVpcAttributeRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeVpcAttributeRequest) SetIsDefault(v bool) *DescribeVpcAttributeRequest {
	s.IsDefault = &v
	return s
}

type DescribeVpcAttributeResponse struct {
	RequestId            *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpcId                *string                                          `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	RegionId             *string                                          `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Status               *string                                          `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	VpcName              *string                                          `json:"VpcName,omitempty" xml:"VpcName,omitempty" require:"true"`
	CreationTime         *string                                          `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	CidrBlock            *string                                          `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty" require:"true"`
	Ipv6CidrBlock        *string                                          `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty" require:"true"`
	VRouterId            *string                                          `json:"VRouterId,omitempty" xml:"VRouterId,omitempty" require:"true"`
	Description          *string                                          `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	IsDefault            *bool                                            `json:"IsDefault,omitempty" xml:"IsDefault,omitempty" require:"true"`
	ClassicLinkEnabled   *bool                                            `json:"ClassicLinkEnabled,omitempty" xml:"ClassicLinkEnabled,omitempty" require:"true"`
	ResourceGroupId      *string                                          `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	NetworkAclNum        *string                                          `json:"NetworkAclNum,omitempty" xml:"NetworkAclNum,omitempty" require:"true"`
	OwnerId              *int64                                           `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	DhcpOptionsSetId     *string                                          `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	DhcpOptionsSetStatus *string                                          `json:"DhcpOptionsSetStatus,omitempty" xml:"DhcpOptionsSetStatus,omitempty" require:"true"`
	AssociatedCens       *DescribeVpcAttributeResponseAssociatedCens      `json:"AssociatedCens,omitempty" xml:"AssociatedCens,omitempty" require:"true" type:"Struct"`
	CloudResources       *DescribeVpcAttributeResponseCloudResources      `json:"CloudResources,omitempty" xml:"CloudResources,omitempty" require:"true" type:"Struct"`
	VSwitchIds           *DescribeVpcAttributeResponseVSwitchIds          `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" require:"true" type:"Struct"`
	UserCidrs            *DescribeVpcAttributeResponseUserCidrs           `json:"UserCidrs,omitempty" xml:"UserCidrs,omitempty" require:"true" type:"Struct"`
	SecondaryCidrBlocks  *DescribeVpcAttributeResponseSecondaryCidrBlocks `json:"SecondaryCidrBlocks,omitempty" xml:"SecondaryCidrBlocks,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpcAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponse) SetRequestId(v string) *DescribeVpcAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetVpcId(v string) *DescribeVpcAttributeResponse {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetRegionId(v string) *DescribeVpcAttributeResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetStatus(v string) *DescribeVpcAttributeResponse {
	s.Status = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetVpcName(v string) *DescribeVpcAttributeResponse {
	s.VpcName = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetCreationTime(v string) *DescribeVpcAttributeResponse {
	s.CreationTime = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetCidrBlock(v string) *DescribeVpcAttributeResponse {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetIpv6CidrBlock(v string) *DescribeVpcAttributeResponse {
	s.Ipv6CidrBlock = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetVRouterId(v string) *DescribeVpcAttributeResponse {
	s.VRouterId = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetDescription(v string) *DescribeVpcAttributeResponse {
	s.Description = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetIsDefault(v bool) *DescribeVpcAttributeResponse {
	s.IsDefault = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetClassicLinkEnabled(v bool) *DescribeVpcAttributeResponse {
	s.ClassicLinkEnabled = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetResourceGroupId(v string) *DescribeVpcAttributeResponse {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetNetworkAclNum(v string) *DescribeVpcAttributeResponse {
	s.NetworkAclNum = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetOwnerId(v int64) *DescribeVpcAttributeResponse {
	s.OwnerId = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetDhcpOptionsSetId(v string) *DescribeVpcAttributeResponse {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetDhcpOptionsSetStatus(v string) *DescribeVpcAttributeResponse {
	s.DhcpOptionsSetStatus = &v
	return s
}

func (s *DescribeVpcAttributeResponse) SetAssociatedCens(v *DescribeVpcAttributeResponseAssociatedCens) *DescribeVpcAttributeResponse {
	s.AssociatedCens = v
	return s
}

func (s *DescribeVpcAttributeResponse) SetCloudResources(v *DescribeVpcAttributeResponseCloudResources) *DescribeVpcAttributeResponse {
	s.CloudResources = v
	return s
}

func (s *DescribeVpcAttributeResponse) SetVSwitchIds(v *DescribeVpcAttributeResponseVSwitchIds) *DescribeVpcAttributeResponse {
	s.VSwitchIds = v
	return s
}

func (s *DescribeVpcAttributeResponse) SetUserCidrs(v *DescribeVpcAttributeResponseUserCidrs) *DescribeVpcAttributeResponse {
	s.UserCidrs = v
	return s
}

func (s *DescribeVpcAttributeResponse) SetSecondaryCidrBlocks(v *DescribeVpcAttributeResponseSecondaryCidrBlocks) *DescribeVpcAttributeResponse {
	s.SecondaryCidrBlocks = v
	return s
}

type DescribeVpcAttributeResponseAssociatedCens struct {
	AssociatedCen []*DescribeVpcAttributeResponseAssociatedCensAssociatedCen `json:"AssociatedCen,omitempty" xml:"AssociatedCen,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcAttributeResponseAssociatedCens) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponseAssociatedCens) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponseAssociatedCens) SetAssociatedCen(v []*DescribeVpcAttributeResponseAssociatedCensAssociatedCen) *DescribeVpcAttributeResponseAssociatedCens {
	s.AssociatedCen = v
	return s
}

type DescribeVpcAttributeResponseAssociatedCensAssociatedCen struct {
	CenId      *string `json:"CenId,omitempty" xml:"CenId,omitempty" require:"true"`
	CenOwnerId *int64  `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty" require:"true"`
	CenStatus  *string `json:"CenStatus,omitempty" xml:"CenStatus,omitempty" require:"true"`
}

func (s DescribeVpcAttributeResponseAssociatedCensAssociatedCen) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponseAssociatedCensAssociatedCen) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponseAssociatedCensAssociatedCen) SetCenId(v string) *DescribeVpcAttributeResponseAssociatedCensAssociatedCen {
	s.CenId = &v
	return s
}

func (s *DescribeVpcAttributeResponseAssociatedCensAssociatedCen) SetCenOwnerId(v int64) *DescribeVpcAttributeResponseAssociatedCensAssociatedCen {
	s.CenOwnerId = &v
	return s
}

func (s *DescribeVpcAttributeResponseAssociatedCensAssociatedCen) SetCenStatus(v string) *DescribeVpcAttributeResponseAssociatedCensAssociatedCen {
	s.CenStatus = &v
	return s
}

type DescribeVpcAttributeResponseCloudResources struct {
	CloudResourceSetType []*DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType `json:"CloudResourceSetType,omitempty" xml:"CloudResourceSetType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcAttributeResponseCloudResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponseCloudResources) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponseCloudResources) SetCloudResourceSetType(v []*DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType) *DescribeVpcAttributeResponseCloudResources {
	s.CloudResourceSetType = v
	return s
}

type DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType struct {
	ResourceType  *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceCount *int    `json:"ResourceCount,omitempty" xml:"ResourceCount,omitempty" require:"true"`
}

func (s DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType) SetResourceType(v string) *DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType {
	s.ResourceType = &v
	return s
}

func (s *DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType) SetResourceCount(v int) *DescribeVpcAttributeResponseCloudResourcesCloudResourceSetType {
	s.ResourceCount = &v
	return s
}

type DescribeVpcAttributeResponseVSwitchIds struct {
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcAttributeResponseVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponseVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponseVSwitchIds) SetVSwitchId(v []*string) *DescribeVpcAttributeResponseVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeVpcAttributeResponseUserCidrs struct {
	UserCidr []*string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcAttributeResponseUserCidrs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponseUserCidrs) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponseUserCidrs) SetUserCidr(v []*string) *DescribeVpcAttributeResponseUserCidrs {
	s.UserCidr = v
	return s
}

type DescribeVpcAttributeResponseSecondaryCidrBlocks struct {
	SecondaryCidrBlock []*string `json:"SecondaryCidrBlock,omitempty" xml:"SecondaryCidrBlock,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcAttributeResponseSecondaryCidrBlocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAttributeResponseSecondaryCidrBlocks) GoString() string {
	return s.String()
}

func (s *DescribeVpcAttributeResponseSecondaryCidrBlocks) SetSecondaryCidrBlock(v []*string) *DescribeVpcAttributeResponseSecondaryCidrBlocks {
	s.SecondaryCidrBlock = v
	return s
}

type UnassociatePhysicalConnectionFromVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VbrId                *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s UnassociatePhysicalConnectionFromVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociatePhysicalConnectionFromVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest) SetRegionId(v string) *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest) SetVbrId(v string) *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest) SetPhysicalConnectionId(v string) *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest) SetClientToken(v string) *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

type UnassociatePhysicalConnectionFromVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnassociatePhysicalConnectionFromVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociatePhysicalConnectionFromVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *UnassociatePhysicalConnectionFromVirtualBorderRouterResponse) SetRequestId(v string) *UnassociatePhysicalConnectionFromVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type AssociatePhysicalConnectionToVirtualBorderRouterRequest struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VbrId                 *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	PhysicalConnectionId  *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	VlanId                *string `json:"VlanId,omitempty" xml:"VlanId,omitempty" require:"true"`
	CircuitCode           *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	LocalGatewayIp        *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty"`
	PeerGatewayIp         *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty"`
	PeeringSubnetMask     *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	LocalIpv6GatewayIp    *string `json:"LocalIpv6GatewayIp,omitempty" xml:"LocalIpv6GatewayIp,omitempty"`
	PeerIpv6GatewayIp     *string `json:"PeerIpv6GatewayIp,omitempty" xml:"PeerIpv6GatewayIp,omitempty"`
	PeeringIpv6SubnetMask *string `json:"PeeringIpv6SubnetMask,omitempty" xml:"PeeringIpv6SubnetMask,omitempty"`
	EnableIpv6            *string `json:"EnableIpv6,omitempty" xml:"EnableIpv6,omitempty"`
}

func (s AssociatePhysicalConnectionToVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociatePhysicalConnectionToVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetRegionId(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetVbrId(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetPhysicalConnectionId(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetVlanId(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.VlanId = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetCircuitCode(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.CircuitCode = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetLocalGatewayIp(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.LocalGatewayIp = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetPeerGatewayIp(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.PeerGatewayIp = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetPeeringSubnetMask(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.PeeringSubnetMask = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetClientToken(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetLocalIpv6GatewayIp(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.LocalIpv6GatewayIp = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetPeerIpv6GatewayIp(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.PeerIpv6GatewayIp = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetPeeringIpv6SubnetMask(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.PeeringIpv6SubnetMask = &v
	return s
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterRequest) SetEnableIpv6(v string) *AssociatePhysicalConnectionToVirtualBorderRouterRequest {
	s.EnableIpv6 = &v
	return s
}

type AssociatePhysicalConnectionToVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AssociatePhysicalConnectionToVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociatePhysicalConnectionToVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *AssociatePhysicalConnectionToVirtualBorderRouterResponse) SetRequestId(v string) *AssociatePhysicalConnectionToVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type ModifySnatEntryRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SnatTableId   *string `json:"SnatTableId,omitempty" xml:"SnatTableId,omitempty" require:"true"`
	SnatEntryId   *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty" require:"true"`
	SnatIp        *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifySnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySnatEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifySnatEntryRequest) SetRegionId(v string) *ModifySnatEntryRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySnatEntryRequest) SetSnatTableId(v string) *ModifySnatEntryRequest {
	s.SnatTableId = &v
	return s
}

func (s *ModifySnatEntryRequest) SetSnatEntryId(v string) *ModifySnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

func (s *ModifySnatEntryRequest) SetSnatIp(v string) *ModifySnatEntryRequest {
	s.SnatIp = &v
	return s
}

func (s *ModifySnatEntryRequest) SetSnatEntryName(v string) *ModifySnatEntryRequest {
	s.SnatEntryName = &v
	return s
}

func (s *ModifySnatEntryRequest) SetClientToken(v string) *ModifySnatEntryRequest {
	s.ClientToken = &v
	return s
}

type ModifySnatEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifySnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySnatEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifySnatEntryResponse) SetRequestId(v string) *ModifySnatEntryResponse {
	s.RequestId = &v
	return s
}

type ModifyNatGatewaySpecRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	Spec         *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	AutoPay      *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifyNatGatewaySpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNatGatewaySpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyNatGatewaySpecRequest) SetRegionId(v string) *ModifyNatGatewaySpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyNatGatewaySpecRequest) SetNatGatewayId(v string) *ModifyNatGatewaySpecRequest {
	s.NatGatewayId = &v
	return s
}

func (s *ModifyNatGatewaySpecRequest) SetSpec(v string) *ModifyNatGatewaySpecRequest {
	s.Spec = &v
	return s
}

func (s *ModifyNatGatewaySpecRequest) SetAutoPay(v bool) *ModifyNatGatewaySpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyNatGatewaySpecRequest) SetClientToken(v string) *ModifyNatGatewaySpecRequest {
	s.ClientToken = &v
	return s
}

type ModifyNatGatewaySpecResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyNatGatewaySpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNatGatewaySpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyNatGatewaySpecResponse) SetRequestId(v string) *ModifyNatGatewaySpecResponse {
	s.RequestId = &v
	return s
}

type ModifyNatGatewayAttributeRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyNatGatewayAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNatGatewayAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyNatGatewayAttributeRequest) SetRegionId(v string) *ModifyNatGatewayAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyNatGatewayAttributeRequest) SetNatGatewayId(v string) *ModifyNatGatewayAttributeRequest {
	s.NatGatewayId = &v
	return s
}

func (s *ModifyNatGatewayAttributeRequest) SetName(v string) *ModifyNatGatewayAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyNatGatewayAttributeRequest) SetDescription(v string) *ModifyNatGatewayAttributeRequest {
	s.Description = &v
	return s
}

type ModifyNatGatewayAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyNatGatewayAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNatGatewayAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyNatGatewayAttributeResponse) SetRequestId(v string) *ModifyNatGatewayAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyBandwidthPackageAttributeRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyBandwidthPackageAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageAttributeRequest) SetRegionId(v string) *ModifyBandwidthPackageAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyBandwidthPackageAttributeRequest) SetBandwidthPackageId(v string) *ModifyBandwidthPackageAttributeRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyBandwidthPackageAttributeRequest) SetName(v string) *ModifyBandwidthPackageAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyBandwidthPackageAttributeRequest) SetDescription(v string) *ModifyBandwidthPackageAttributeRequest {
	s.Description = &v
	return s
}

type ModifyBandwidthPackageAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyBandwidthPackageAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageAttributeResponse) SetRequestId(v string) *ModifyBandwidthPackageAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeSnatTableEntriesRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SnatTableId     *string `json:"SnatTableId,omitempty" xml:"SnatTableId,omitempty" require:"true"`
	SnatEntryId     *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	SourceVSwitchId *string `json:"SourceVSwitchId,omitempty" xml:"SourceVSwitchId,omitempty"`
	SourceCIDR      *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
	SnatIp          *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	SnatEntryName   *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	PageNumber      *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSnatTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesRequest) SetRegionId(v string) *DescribeSnatTableEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatTableId(v string) *DescribeSnatTableEntriesRequest {
	s.SnatTableId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatEntryId(v string) *DescribeSnatTableEntriesRequest {
	s.SnatEntryId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSourceVSwitchId(v string) *DescribeSnatTableEntriesRequest {
	s.SourceVSwitchId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSourceCIDR(v string) *DescribeSnatTableEntriesRequest {
	s.SourceCIDR = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatIp(v string) *DescribeSnatTableEntriesRequest {
	s.SnatIp = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatEntryName(v string) *DescribeSnatTableEntriesRequest {
	s.SnatEntryName = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetPageNumber(v int) *DescribeSnatTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetPageSize(v int) *DescribeSnatTableEntriesRequest {
	s.PageSize = &v
	return s
}

type DescribeSnatTableEntriesResponse struct {
	RequestId        *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount       *int                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber       *int                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize         *int                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	SnatTableEntries *DescribeSnatTableEntriesResponseSnatTableEntries `json:"SnatTableEntries,omitempty" xml:"SnatTableEntries,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSnatTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponse) SetRequestId(v string) *DescribeSnatTableEntriesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetTotalCount(v int) *DescribeSnatTableEntriesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetPageNumber(v int) *DescribeSnatTableEntriesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetPageSize(v int) *DescribeSnatTableEntriesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetSnatTableEntries(v *DescribeSnatTableEntriesResponseSnatTableEntries) *DescribeSnatTableEntriesResponse {
	s.SnatTableEntries = v
	return s
}

type DescribeSnatTableEntriesResponseSnatTableEntries struct {
	SnatTableEntry []*DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry `json:"SnatTableEntry,omitempty" xml:"SnatTableEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSnatTableEntriesResponseSnatTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponseSnatTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntries) SetSnatTableEntry(v []*DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) *DescribeSnatTableEntriesResponseSnatTableEntries {
	s.SnatTableEntry = v
	return s
}

type DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry struct {
	SnatTableId     *string `json:"SnatTableId,omitempty" xml:"SnatTableId,omitempty" require:"true"`
	SnatEntryId     *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty" require:"true"`
	SourceVSwitchId *string `json:"SourceVSwitchId,omitempty" xml:"SourceVSwitchId,omitempty" require:"true"`
	SourceCIDR      *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty" require:"true"`
	SnatIp          *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty" require:"true"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	SnatEntryName   *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty" require:"true"`
}

func (s DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) SetSnatTableId(v string) *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry {
	s.SnatTableId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) SetSnatEntryId(v string) *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry {
	s.SnatEntryId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) SetSourceVSwitchId(v string) *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry {
	s.SourceVSwitchId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) SetSourceCIDR(v string) *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry {
	s.SourceCIDR = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) SetSnatIp(v string) *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry {
	s.SnatIp = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) SetStatus(v string) *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry {
	s.Status = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry) SetSnatEntryName(v string) *DescribeSnatTableEntriesResponseSnatTableEntriesSnatTableEntry {
	s.SnatEntryName = &v
	return s
}

type DeleteSnatEntryRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SnatTableId *string `json:"SnatTableId,omitempty" xml:"SnatTableId,omitempty" require:"true"`
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryRequest) SetRegionId(v string) *DeleteSnatEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetSnatTableId(v string) *DeleteSnatEntryRequest {
	s.SnatTableId = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetSnatEntryId(v string) *DeleteSnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetClientToken(v string) *DeleteSnatEntryRequest {
	s.ClientToken = &v
	return s
}

type DeleteSnatEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryResponse) SetRequestId(v string) *DeleteSnatEntryResponse {
	s.RequestId = &v
	return s
}

type CreateSnatEntryRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SnatTableId     *string `json:"SnatTableId,omitempty" xml:"SnatTableId,omitempty" require:"true"`
	SourceVSwitchId *string `json:"SourceVSwitchId,omitempty" xml:"SourceVSwitchId,omitempty"`
	SourceCIDR      *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
	SnatIp          *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty" require:"true"`
	SnatEntryName   *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryRequest) SetRegionId(v string) *CreateSnatEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSnatTableId(v string) *CreateSnatEntryRequest {
	s.SnatTableId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceVSwitchId(v string) *CreateSnatEntryRequest {
	s.SourceVSwitchId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceCIDR(v string) *CreateSnatEntryRequest {
	s.SourceCIDR = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSnatIp(v string) *CreateSnatEntryRequest {
	s.SnatIp = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSnatEntryName(v string) *CreateSnatEntryRequest {
	s.SnatEntryName = &v
	return s
}

func (s *CreateSnatEntryRequest) SetClientToken(v string) *CreateSnatEntryRequest {
	s.ClientToken = &v
	return s
}

type CreateSnatEntryResponse struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty" require:"true"`
}

func (s CreateSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryResponse) SetRequestId(v string) *CreateSnatEntryResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSnatEntryResponse) SetSnatEntryId(v string) *CreateSnatEntryResponse {
	s.SnatEntryId = &v
	return s
}

type CreateBandwidthPackageRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NatGatewayId       *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	IpCount            *int    `json:"IpCount,omitempty" xml:"IpCount,omitempty" require:"true"`
	Bandwidth          *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	ISP                *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	Zone               *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
}

func (s CreateBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *CreateBandwidthPackageRequest) SetRegionId(v string) *CreateBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetNatGatewayId(v string) *CreateBandwidthPackageRequest {
	s.NatGatewayId = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetName(v string) *CreateBandwidthPackageRequest {
	s.Name = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetDescription(v string) *CreateBandwidthPackageRequest {
	s.Description = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetClientToken(v string) *CreateBandwidthPackageRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetIpCount(v int) *CreateBandwidthPackageRequest {
	s.IpCount = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetBandwidth(v int) *CreateBandwidthPackageRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetISP(v string) *CreateBandwidthPackageRequest {
	s.ISP = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetZone(v string) *CreateBandwidthPackageRequest {
	s.Zone = &v
	return s
}

func (s *CreateBandwidthPackageRequest) SetInternetChargeType(v string) *CreateBandwidthPackageRequest {
	s.InternetChargeType = &v
	return s
}

type CreateBandwidthPackageResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
}

func (s CreateBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *CreateBandwidthPackageResponse) SetRequestId(v string) *CreateBandwidthPackageResponse {
	s.RequestId = &v
	return s
}

func (s *CreateBandwidthPackageResponse) SetBandwidthPackageId(v string) *CreateBandwidthPackageResponse {
	s.BandwidthPackageId = &v
	return s
}

type UnassociateHaVipRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	HaVipId     *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" require:"true"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Force       *string `json:"Force,omitempty" xml:"Force,omitempty"`
}

func (s UnassociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipRequest) SetClientToken(v string) *UnassociateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *UnassociateHaVipRequest) SetRegionId(v string) *UnassociateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetHaVipId(v string) *UnassociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetInstanceId(v string) *UnassociateHaVipRequest {
	s.InstanceId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetForce(v string) *UnassociateHaVipRequest {
	s.Force = &v
	return s
}

type UnassociateHaVipResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnassociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipResponse) SetRequestId(v string) *UnassociateHaVipResponse {
	s.RequestId = &v
	return s
}

type UnassociateEipAddressRequest struct {
	Force            *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId     *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType     *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s UnassociateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *UnassociateEipAddressRequest) SetForce(v bool) *UnassociateEipAddressRequest {
	s.Force = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetRegionId(v string) *UnassociateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetAllocationId(v string) *UnassociateEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetInstanceId(v string) *UnassociateEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetInstanceType(v string) *UnassociateEipAddressRequest {
	s.InstanceType = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetPrivateIpAddress(v string) *UnassociateEipAddressRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetClientToken(v string) *UnassociateEipAddressRequest {
	s.ClientToken = &v
	return s
}

type UnassociateEipAddressResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnassociateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *UnassociateEipAddressResponse) SetRequestId(v string) *UnassociateEipAddressResponse {
	s.RequestId = &v
	return s
}

type TerminateVirtualBorderRouterRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VbrId       *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s TerminateVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *TerminateVirtualBorderRouterRequest) SetRegionId(v string) *TerminateVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetVbrId(v string) *TerminateVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetClientToken(v string) *TerminateVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

type TerminateVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s TerminateVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *TerminateVirtualBorderRouterResponse) SetRequestId(v string) *TerminateVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type TerminatePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s TerminatePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminatePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *TerminatePhysicalConnectionRequest) SetRegionId(v string) *TerminatePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *TerminatePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetClientToken(v string) *TerminatePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

type TerminatePhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s TerminatePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminatePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *TerminatePhysicalConnectionResponse) SetRequestId(v string) *TerminatePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type RemoveBandwidthPackageIpsRequest struct {
	RegionId           *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string   `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	ClientToken        *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RemovedIpAddresses []*string `json:"RemovedIpAddresses,omitempty" xml:"RemovedIpAddresses,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveBandwidthPackageIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBandwidthPackageIpsRequest) GoString() string {
	return s.String()
}

func (s *RemoveBandwidthPackageIpsRequest) SetRegionId(v string) *RemoveBandwidthPackageIpsRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetBandwidthPackageId(v string) *RemoveBandwidthPackageIpsRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetClientToken(v string) *RemoveBandwidthPackageIpsRequest {
	s.ClientToken = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetRemovedIpAddresses(v []*string) *RemoveBandwidthPackageIpsRequest {
	s.RemovedIpAddresses = v
	return s
}

type RemoveBandwidthPackageIpsResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RemoveBandwidthPackageIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveBandwidthPackageIpsResponse) GoString() string {
	return s.String()
}

func (s *RemoveBandwidthPackageIpsResponse) SetRequestId(v string) *RemoveBandwidthPackageIpsResponse {
	s.RequestId = &v
	return s
}

type ReleaseEipAddressRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
}

func (s ReleaseEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipAddressRequest) GoString() string {
	return s.String()
}

func (s *ReleaseEipAddressRequest) SetRegionId(v string) *ReleaseEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetAllocationId(v string) *ReleaseEipAddressRequest {
	s.AllocationId = &v
	return s
}

type ReleaseEipAddressResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ReleaseEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipAddressResponse) GoString() string {
	return s.String()
}

func (s *ReleaseEipAddressResponse) SetRequestId(v string) *ReleaseEipAddressResponse {
	s.RequestId = &v
	return s
}

type RecoverVirtualBorderRouterRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VbrId       *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s RecoverVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s RecoverVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *RecoverVirtualBorderRouterRequest) SetRegionId(v string) *RecoverVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetVbrId(v string) *RecoverVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetClientToken(v string) *RecoverVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

type RecoverVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RecoverVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s RecoverVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *RecoverVirtualBorderRouterResponse) SetRequestId(v string) *RecoverVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type ModifyVSwitchAttributeRequest struct {
	VSwitchId     *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	VSwitchName   *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Ipv6CidrBlock *int    `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty"`
}

func (s ModifyVSwitchAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchId(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchName(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchName = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetRegionId(v string) *ModifyVSwitchAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetDescription(v string) *ModifyVSwitchAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetIpv6CidrBlock(v int) *ModifyVSwitchAttributeRequest {
	s.Ipv6CidrBlock = &v
	return s
}

type ModifyVSwitchAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyVSwitchAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponse) SetRequestId(v string) *ModifyVSwitchAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyVRouterAttributeRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VRouterId   *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty" require:"true"`
	VRouterName *string `json:"VRouterName,omitempty" xml:"VRouterName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyVRouterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVRouterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVRouterAttributeRequest) SetRegionId(v string) *ModifyVRouterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetVRouterId(v string) *ModifyVRouterAttributeRequest {
	s.VRouterId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetVRouterName(v string) *ModifyVRouterAttributeRequest {
	s.VRouterName = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetDescription(v string) *ModifyVRouterAttributeRequest {
	s.Description = &v
	return s
}

type ModifyVRouterAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyVRouterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVRouterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVRouterAttributeResponse) SetRequestId(v string) *ModifyVRouterAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyVpcAttributeRequest struct {
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	VpcName       *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	CidrBlock     *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EnableIPv6    *bool   `json:"EnableIPv6,omitempty" xml:"EnableIPv6,omitempty"`
	Ipv6CidrBlock *string `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty"`
}

func (s ModifyVpcAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpcAttributeRequest) SetVpcId(v string) *ModifyVpcAttributeRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetDescription(v string) *ModifyVpcAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetVpcName(v string) *ModifyVpcAttributeRequest {
	s.VpcName = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetCidrBlock(v string) *ModifyVpcAttributeRequest {
	s.CidrBlock = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetRegionId(v string) *ModifyVpcAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetEnableIPv6(v bool) *ModifyVpcAttributeRequest {
	s.EnableIPv6 = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetIpv6CidrBlock(v string) *ModifyVpcAttributeRequest {
	s.Ipv6CidrBlock = &v
	return s
}

type ModifyVpcAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyVpcAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpcAttributeResponse) SetRequestId(v string) *ModifyVpcAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyVirtualBorderRouterAttributeRequest struct {
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VbrId                         *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	VlanId                        *int    `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
	CircuitCode                   *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	LocalGatewayIp                *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty"`
	PeerGatewayIp                 *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty"`
	PeeringSubnetMask             *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty"`
	MinTxInterval                 *int64  `json:"MinTxInterval,omitempty" xml:"MinTxInterval,omitempty"`
	MinRxInterval                 *int64  `json:"MinRxInterval,omitempty" xml:"MinRxInterval,omitempty"`
	DetectMultiplier              *int64  `json:"DetectMultiplier,omitempty" xml:"DetectMultiplier,omitempty"`
	Description                   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	AssociatedPhysicalConnections *string `json:"AssociatedPhysicalConnections,omitempty" xml:"AssociatedPhysicalConnections,omitempty"`
	ClientToken                   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	LocalIpv6GatewayIp            *string `json:"LocalIpv6GatewayIp,omitempty" xml:"LocalIpv6GatewayIp,omitempty"`
	PeerIpv6GatewayIp             *string `json:"PeerIpv6GatewayIp,omitempty" xml:"PeerIpv6GatewayIp,omitempty"`
	PeeringIpv6SubnetMask         *string `json:"PeeringIpv6SubnetMask,omitempty" xml:"PeeringIpv6SubnetMask,omitempty"`
	EnableIpv6                    *bool   `json:"EnableIpv6,omitempty" xml:"EnableIpv6,omitempty"`
}

func (s ModifyVirtualBorderRouterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVirtualBorderRouterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetRegionId(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetVbrId(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.VbrId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetVlanId(v int) *ModifyVirtualBorderRouterAttributeRequest {
	s.VlanId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetCircuitCode(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.CircuitCode = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetLocalGatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.LocalGatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeerGatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeerGatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeeringSubnetMask(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeeringSubnetMask = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetMinTxInterval(v int64) *ModifyVirtualBorderRouterAttributeRequest {
	s.MinTxInterval = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetMinRxInterval(v int64) *ModifyVirtualBorderRouterAttributeRequest {
	s.MinRxInterval = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetDetectMultiplier(v int64) *ModifyVirtualBorderRouterAttributeRequest {
	s.DetectMultiplier = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetDescription(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetName(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetAssociatedPhysicalConnections(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.AssociatedPhysicalConnections = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetClientToken(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetLocalIpv6GatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.LocalIpv6GatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeerIpv6GatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeerIpv6GatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeeringIpv6SubnetMask(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeeringIpv6SubnetMask = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetEnableIpv6(v bool) *ModifyVirtualBorderRouterAttributeRequest {
	s.EnableIpv6 = &v
	return s
}

type ModifyVirtualBorderRouterAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyVirtualBorderRouterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVirtualBorderRouterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVirtualBorderRouterAttributeResponse) SetRequestId(v string) *ModifyVirtualBorderRouterAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyRouterInterfaceSpecRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
	Spec              *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifyRouterInterfaceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceSpecRequest) SetRegionId(v string) *ModifyRouterInterfaceSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetRouterInterfaceId(v string) *ModifyRouterInterfaceSpecRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetSpec(v string) *ModifyRouterInterfaceSpecRequest {
	s.Spec = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetClientToken(v string) *ModifyRouterInterfaceSpecRequest {
	s.ClientToken = &v
	return s
}

type ModifyRouterInterfaceSpecResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Spec      *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
}

func (s ModifyRouterInterfaceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceSpecResponse) SetRequestId(v string) *ModifyRouterInterfaceSpecResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecResponse) SetSpec(v string) *ModifyRouterInterfaceSpecResponse {
	s.Spec = &v
	return s
}

type ModifyRouterInterfaceAttributeRequest struct {
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterInterfaceId        *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
	Name                     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description              *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OppositeInterfaceId      *string `json:"OppositeInterfaceId,omitempty" xml:"OppositeInterfaceId,omitempty"`
	OppositeRouterId         *string `json:"OppositeRouterId,omitempty" xml:"OppositeRouterId,omitempty"`
	OppositeRouterType       *string `json:"OppositeRouterType,omitempty" xml:"OppositeRouterType,omitempty"`
	OppositeInterfaceOwnerId *int64  `json:"OppositeInterfaceOwnerId,omitempty" xml:"OppositeInterfaceOwnerId,omitempty"`
	HealthCheckSourceIp      *string `json:"HealthCheckSourceIp,omitempty" xml:"HealthCheckSourceIp,omitempty"`
	HealthCheckTargetIp      *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty"`
	HcThreshold              *int    `json:"HcThreshold,omitempty" xml:"HcThreshold,omitempty"`
	HcRate                   *int    `json:"HcRate,omitempty" xml:"HcRate,omitempty"`
	DeleteHealthCheckIp      *bool   `json:"DeleteHealthCheckIp,omitempty" xml:"DeleteHealthCheckIp,omitempty"`
}

func (s ModifyRouterInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceAttributeRequest) SetRegionId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetRouterInterfaceId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetName(v string) *ModifyRouterInterfaceAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetDescription(v string) *ModifyRouterInterfaceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeInterfaceId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeRouterId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeRouterId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeRouterType(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeRouterType = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeInterfaceOwnerId(v int64) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHealthCheckSourceIp(v string) *ModifyRouterInterfaceAttributeRequest {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHealthCheckTargetIp(v string) *ModifyRouterInterfaceAttributeRequest {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHcThreshold(v int) *ModifyRouterInterfaceAttributeRequest {
	s.HcThreshold = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHcRate(v int) *ModifyRouterInterfaceAttributeRequest {
	s.HcRate = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetDeleteHealthCheckIp(v bool) *ModifyRouterInterfaceAttributeRequest {
	s.DeleteHealthCheckIp = &v
	return s
}

type ModifyRouterInterfaceAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyRouterInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceAttributeResponse) SetRequestId(v string) *ModifyRouterInterfaceAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyPhysicalConnectionAttributeRequest struct {
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PhysicalConnectionId          *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	LineOperator                  *string `json:"LineOperator,omitempty" xml:"LineOperator,omitempty"`
	Bandwidth                     *int    `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	PeerLocation                  *string `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty"`
	PortType                      *string `json:"PortType,omitempty" xml:"PortType,omitempty"`
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId,omitempty" xml:"RedundantPhysicalConnectionId,omitempty"`
	Description                   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ClientToken                   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CircuitCode                   *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
}

func (s ModifyPhysicalConnectionAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhysicalConnectionAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetRegionId(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetPhysicalConnectionId(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetLineOperator(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.LineOperator = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetBandwidth(v int) *ModifyPhysicalConnectionAttributeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetPeerLocation(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.PeerLocation = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetPortType(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.PortType = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetRedundantPhysicalConnectionId(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetDescription(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetName(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetClientToken(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetCircuitCode(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.CircuitCode = &v
	return s
}

type ModifyPhysicalConnectionAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyPhysicalConnectionAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhysicalConnectionAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyPhysicalConnectionAttributeResponse) SetRequestId(v string) *ModifyPhysicalConnectionAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyHaVipAttributeRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	HaVipId     *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyHaVipAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeRequest) SetClientToken(v string) *ModifyHaVipAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetRegionId(v string) *ModifyHaVipAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetHaVipId(v string) *ModifyHaVipAttributeRequest {
	s.HaVipId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetDescription(v string) *ModifyHaVipAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetName(v string) *ModifyHaVipAttributeRequest {
	s.Name = &v
	return s
}

type ModifyHaVipAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyHaVipAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeResponse) SetRequestId(v string) *ModifyHaVipAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyForwardEntryRequest struct {
	ForwardTableId   *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty" require:"true"`
	ForwardEntryId   *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty" require:"true"`
	ExternalIp       *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort     *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	InternalIp       *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort     *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol       *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	PortBreak        *bool   `json:"PortBreak,omitempty" xml:"PortBreak,omitempty"`
}

func (s ModifyForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryRequest) SetForwardTableId(v string) *ModifyForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardEntryId(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetExternalIp(v string) *ModifyForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetExternalPort(v string) *ModifyForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalIp(v string) *ModifyForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalPort(v string) *ModifyForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetIpProtocol(v string) *ModifyForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardEntryName(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetRegionId(v string) *ModifyForwardEntryRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetClientToken(v string) *ModifyForwardEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetPortBreak(v bool) *ModifyForwardEntryRequest {
	s.PortBreak = &v
	return s
}

type ModifyForwardEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponse) SetRequestId(v string) *ModifyForwardEntryResponse {
	s.RequestId = &v
	return s
}

type ModifyEipAddressAttributeRequest struct {
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	Bandwidth    *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyEipAddressAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEipAddressAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyEipAddressAttributeRequest) SetAllocationId(v string) *ModifyEipAddressAttributeRequest {
	s.AllocationId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetBandwidth(v string) *ModifyEipAddressAttributeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetRegionId(v string) *ModifyEipAddressAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetName(v string) *ModifyEipAddressAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetDescription(v string) *ModifyEipAddressAttributeRequest {
	s.Description = &v
	return s
}

type ModifyEipAddressAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyEipAddressAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEipAddressAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyEipAddressAttributeResponse) SetRequestId(v string) *ModifyEipAddressAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyBandwidthPackageSpecRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	Bandwidth          *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
}

func (s ModifyBandwidthPackageSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageSpecRequest) SetRegionId(v string) *ModifyBandwidthPackageSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetBandwidthPackageId(v string) *ModifyBandwidthPackageSpecRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetBandwidth(v string) *ModifyBandwidthPackageSpecRequest {
	s.Bandwidth = &v
	return s
}

type ModifyBandwidthPackageSpecResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyBandwidthPackageSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageSpecResponse) SetRequestId(v string) *ModifyBandwidthPackageSpecResponse {
	s.RequestId = &v
	return s
}

type EnablePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s EnablePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s EnablePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *EnablePhysicalConnectionRequest) SetRegionId(v string) *EnablePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *EnablePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetClientToken(v string) *EnablePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

type EnablePhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s EnablePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s EnablePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *EnablePhysicalConnectionResponse) SetRequestId(v string) *EnablePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type DescribeZonesRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeZonesRequest) SetRegionId(v string) *DescribeZonesRequest {
	s.RegionId = &v
	return s
}

type DescribeZonesResponse struct {
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Zones     *DescribeZonesResponseZones `json:"Zones,omitempty" xml:"Zones,omitempty" require:"true" type:"Struct"`
}

func (s DescribeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponse) SetRequestId(v string) *DescribeZonesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeZonesResponse) SetZones(v *DescribeZonesResponseZones) *DescribeZonesResponse {
	s.Zones = v
	return s
}

type DescribeZonesResponseZones struct {
	Zone []*DescribeZonesResponseZonesZone `json:"Zone,omitempty" xml:"Zone,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZones) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZones) SetZone(v []*DescribeZonesResponseZonesZone) *DescribeZonesResponseZones {
	s.Zone = v
	return s
}

type DescribeZonesResponseZonesZone struct {
	ZoneId    *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty" require:"true"`
}

func (s DescribeZonesResponseZonesZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZone) SetZoneId(v string) *DescribeZonesResponseZonesZone {
	s.ZoneId = &v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetLocalName(v string) *DescribeZonesResponseZonesZone {
	s.LocalName = &v
	return s
}

type DescribeVSwitchesRequest struct {
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId       *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId          *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VSwitchName     *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
	DryRun          *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	IsDefault       *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	RouteTableId    *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	PageNumber      *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VSwitchOwnerId  *int64  `json:"VSwitchOwnerId,omitempty" xml:"VSwitchOwnerId,omitempty"`
}

func (s DescribeVSwitchesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesRequest) SetVpcId(v string) *DescribeVSwitchesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchId(v string) *DescribeVSwitchesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetZoneId(v string) *DescribeVSwitchesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetRegionId(v string) *DescribeVSwitchesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchName(v string) *DescribeVSwitchesRequest {
	s.VSwitchName = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetDryRun(v bool) *DescribeVSwitchesRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetIsDefault(v bool) *DescribeVSwitchesRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetRouteTableId(v string) *DescribeVSwitchesRequest {
	s.RouteTableId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetResourceGroupId(v string) *DescribeVSwitchesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageNumber(v int) *DescribeVSwitchesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageSize(v int) *DescribeVSwitchesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchOwnerId(v int64) *DescribeVSwitchesRequest {
	s.VSwitchOwnerId = &v
	return s
}

type DescribeVSwitchesResponse struct {
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount *int                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *int                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	VSwitches  *DescribeVSwitchesResponseVSwitches `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVSwitchesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponse) SetRequestId(v string) *DescribeVSwitchesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetTotalCount(v int) *DescribeVSwitchesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetPageNumber(v int) *DescribeVSwitchesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetPageSize(v int) *DescribeVSwitchesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetVSwitches(v *DescribeVSwitchesResponseVSwitches) *DescribeVSwitchesResponse {
	s.VSwitches = v
	return s
}

type DescribeVSwitchesResponseVSwitches struct {
	VSwitch []*DescribeVSwitchesResponseVSwitchesVSwitch `json:"VSwitch,omitempty" xml:"VSwitch,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVSwitchesResponseVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseVSwitches) SetVSwitch(v []*DescribeVSwitchesResponseVSwitchesVSwitch) *DescribeVSwitchesResponseVSwitches {
	s.VSwitch = v
	return s
}

type DescribeVSwitchesResponseVSwitchesVSwitch struct {
	VSwitchId               *string                                              `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	VpcId                   *string                                              `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Status                  *string                                              `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	CidrBlock               *string                                              `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty" require:"true"`
	Ipv6CidrBlock           *string                                              `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty" require:"true"`
	ZoneId                  *string                                              `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	AvailableIpAddressCount *int64                                               `json:"AvailableIpAddressCount,omitempty" xml:"AvailableIpAddressCount,omitempty" require:"true"`
	Description             *string                                              `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	VSwitchName             *string                                              `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty" require:"true"`
	CreationTime            *string                                              `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	IsDefault               *bool                                                `json:"IsDefault,omitempty" xml:"IsDefault,omitempty" require:"true"`
	ResourceGroupId         *string                                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	NetworkAclId            *string                                              `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty" require:"true"`
	OwnerId                 *int64                                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	ShareType               *string                                              `json:"ShareType,omitempty" xml:"ShareType,omitempty" require:"true"`
	Tags                    *DescribeVSwitchesResponseVSwitchesVSwitchTags       `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
	RouteTable              *DescribeVSwitchesResponseVSwitchesVSwitchRouteTable `json:"RouteTable,omitempty" xml:"RouteTable,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVSwitchesResponseVSwitchesVSwitch) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseVSwitchesVSwitch) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetVSwitchId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetVpcId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.VpcId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetStatus(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.Status = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetCidrBlock(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetIpv6CidrBlock(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.Ipv6CidrBlock = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetZoneId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.ZoneId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetAvailableIpAddressCount(v int64) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetDescription(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.Description = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetVSwitchName(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.VSwitchName = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetCreationTime(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.CreationTime = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetIsDefault(v bool) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.IsDefault = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetResourceGroupId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetNetworkAclId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetOwnerId(v int64) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.OwnerId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetShareType(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.ShareType = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetTags(v *DescribeVSwitchesResponseVSwitchesVSwitchTags) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.Tags = v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetRouteTable(v *DescribeVSwitchesResponseVSwitchesVSwitchRouteTable) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.RouteTable = v
	return s
}

type DescribeVSwitchesResponseVSwitchesVSwitchTags struct {
	Tag []*DescribeVSwitchesResponseVSwitchesVSwitchTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVSwitchesResponseVSwitchesVSwitchTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseVSwitchesVSwitchTags) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitchTags) SetTag(v []*DescribeVSwitchesResponseVSwitchesVSwitchTagsTag) *DescribeVSwitchesResponseVSwitchesVSwitchTags {
	s.Tag = v
	return s
}

type DescribeVSwitchesResponseVSwitchesVSwitchTagsTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s DescribeVSwitchesResponseVSwitchesVSwitchTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseVSwitchesVSwitchTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitchTagsTag) SetKey(v string) *DescribeVSwitchesResponseVSwitchesVSwitchTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitchTagsTag) SetValue(v string) *DescribeVSwitchesResponseVSwitchesVSwitchTagsTag {
	s.Value = &v
	return s
}

type DescribeVSwitchesResponseVSwitchesVSwitchRouteTable struct {
	RouteTableId   *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	RouteTableType *string `json:"RouteTableType,omitempty" xml:"RouteTableType,omitempty" require:"true"`
}

func (s DescribeVSwitchesResponseVSwitchesVSwitchRouteTable) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseVSwitchesVSwitchRouteTable) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitchRouteTable) SetRouteTableId(v string) *DescribeVSwitchesResponseVSwitchesVSwitchRouteTable {
	s.RouteTableId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitchRouteTable) SetRouteTableType(v string) *DescribeVSwitchesResponseVSwitchesVSwitchRouteTable {
	s.RouteTableType = &v
	return s
}

type DescribeVRoutersRequest struct {
	VRouterId  *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeVRoutersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersRequest) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersRequest) SetVRouterId(v string) *DescribeVRoutersRequest {
	s.VRouterId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetRegionId(v string) *DescribeVRoutersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetPageNumber(v int) *DescribeVRoutersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVRoutersRequest) SetPageSize(v int) *DescribeVRoutersRequest {
	s.PageSize = &v
	return s
}

type DescribeVRoutersResponse struct {
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount *int                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *int                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	VRouters   *DescribeVRoutersResponseVRouters `json:"VRouters,omitempty" xml:"VRouters,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVRoutersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponse) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponse) SetRequestId(v string) *DescribeVRoutersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVRoutersResponse) SetTotalCount(v int) *DescribeVRoutersResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVRoutersResponse) SetPageNumber(v int) *DescribeVRoutersResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVRoutersResponse) SetPageSize(v int) *DescribeVRoutersResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVRoutersResponse) SetVRouters(v *DescribeVRoutersResponseVRouters) *DescribeVRoutersResponse {
	s.VRouters = v
	return s
}

type DescribeVRoutersResponseVRouters struct {
	VRouter []*DescribeVRoutersResponseVRoutersVRouter `json:"VRouter,omitempty" xml:"VRouter,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVRoutersResponseVRouters) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseVRouters) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseVRouters) SetVRouter(v []*DescribeVRoutersResponseVRoutersVRouter) *DescribeVRoutersResponseVRouters {
	s.VRouter = v
	return s
}

type DescribeVRoutersResponseVRoutersVRouter struct {
	RegionId      *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId         *string                                               `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VRouterName   *string                                               `json:"VRouterName,omitempty" xml:"VRouterName,omitempty" require:"true"`
	Description   *string                                               `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	VRouterId     *string                                               `json:"VRouterId,omitempty" xml:"VRouterId,omitempty" require:"true"`
	CreationTime  *string                                               `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	RouteTableIds *DescribeVRoutersResponseVRoutersVRouterRouteTableIds `json:"RouteTableIds,omitempty" xml:"RouteTableIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVRoutersResponseVRoutersVRouter) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseVRoutersVRouter) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetRegionId(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.RegionId = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetVpcId(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.VpcId = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetVRouterName(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.VRouterName = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetDescription(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.Description = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetVRouterId(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.VRouterId = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetCreationTime(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.CreationTime = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetRouteTableIds(v *DescribeVRoutersResponseVRoutersVRouterRouteTableIds) *DescribeVRoutersResponseVRoutersVRouter {
	s.RouteTableIds = v
	return s
}

type DescribeVRoutersResponseVRoutersVRouterRouteTableIds struct {
	// RouteTableId
	RouteTableId []*string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVRoutersResponseVRoutersVRouterRouteTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseVRoutersVRouterRouteTableIds) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseVRoutersVRouterRouteTableIds) SetRouteTableId(v []*string) *DescribeVRoutersResponseVRoutersVRouterRouteTableIds {
	s.RouteTableId = v
	return s
}

type DescribeVpcsRequest struct {
	VpcId            *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcName          *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	IsDefault        *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	DryRun           *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	ResourceGroupId  *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	PageNumber       *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VpcOwnerId       *int64  `json:"VpcOwnerId,omitempty" xml:"VpcOwnerId,omitempty"`
	DhcpOptionsSetId *string `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty"`
}

func (s DescribeVpcsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcsRequest) SetVpcId(v string) *DescribeVpcsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcsRequest) SetRegionId(v string) *DescribeVpcsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcsRequest) SetVpcName(v string) *DescribeVpcsRequest {
	s.VpcName = &v
	return s
}

func (s *DescribeVpcsRequest) SetIsDefault(v bool) *DescribeVpcsRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeVpcsRequest) SetDryRun(v bool) *DescribeVpcsRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeVpcsRequest) SetResourceGroupId(v string) *DescribeVpcsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeVpcsRequest) SetPageNumber(v int) *DescribeVpcsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcsRequest) SetPageSize(v int) *DescribeVpcsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcsRequest) SetVpcOwnerId(v int64) *DescribeVpcsRequest {
	s.VpcOwnerId = &v
	return s
}

func (s *DescribeVpcsRequest) SetDhcpOptionsSetId(v string) *DescribeVpcsRequest {
	s.DhcpOptionsSetId = &v
	return s
}

type DescribeVpcsResponse struct {
	RequestId  *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount *int                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *int                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                      `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Vpcs       *DescribeVpcsResponseVpcs `json:"Vpcs,omitempty" xml:"Vpcs,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpcsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponse) SetRequestId(v string) *DescribeVpcsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcsResponse) SetTotalCount(v int) *DescribeVpcsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpcsResponse) SetPageNumber(v int) *DescribeVpcsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcsResponse) SetPageSize(v int) *DescribeVpcsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcsResponse) SetVpcs(v *DescribeVpcsResponseVpcs) *DescribeVpcsResponse {
	s.Vpcs = v
	return s
}

type DescribeVpcsResponseVpcs struct {
	Vpc []*DescribeVpcsResponseVpcsVpc `json:"Vpc,omitempty" xml:"Vpc,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcs) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcs) SetVpc(v []*DescribeVpcsResponseVpcsVpc) *DescribeVpcsResponseVpcs {
	s.Vpc = v
	return s
}

type DescribeVpcsResponseVpcsVpc struct {
	VpcId                  *string                                         `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	RegionId               *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Status                 *string                                         `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	VpcName                *string                                         `json:"VpcName,omitempty" xml:"VpcName,omitempty" require:"true"`
	CreationTime           *string                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	CidrBlock              *string                                         `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty" require:"true"`
	Ipv6CidrBlock          *string                                         `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty" require:"true"`
	VRouterId              *string                                         `json:"VRouterId,omitempty" xml:"VRouterId,omitempty" require:"true"`
	Description            *string                                         `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	IsDefault              *bool                                           `json:"IsDefault,omitempty" xml:"IsDefault,omitempty" require:"true"`
	NetworkAclNum          *string                                         `json:"NetworkAclNum,omitempty" xml:"NetworkAclNum,omitempty" require:"true"`
	ResourceGroupId        *string                                         `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	CenStatus              *string                                         `json:"CenStatus,omitempty" xml:"CenStatus,omitempty" require:"true"`
	OwnerId                *int64                                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty" require:"true"`
	SupportAdvancedFeature *bool                                           `json:"SupportAdvancedFeature,omitempty" xml:"SupportAdvancedFeature,omitempty" require:"true"`
	AdvancedResource       *bool                                           `json:"AdvancedResource,omitempty" xml:"AdvancedResource,omitempty" require:"true"`
	DhcpOptionsSetId       *string                                         `json:"DhcpOptionsSetId,omitempty" xml:"DhcpOptionsSetId,omitempty" require:"true"`
	DhcpOptionsSetStatus   *string                                         `json:"DhcpOptionsSetStatus,omitempty" xml:"DhcpOptionsSetStatus,omitempty" require:"true"`
	Tags                   *DescribeVpcsResponseVpcsVpcTags                `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
	VSwitchIds             *DescribeVpcsResponseVpcsVpcVSwitchIds          `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" require:"true" type:"Struct"`
	UserCidrs              *DescribeVpcsResponseVpcsVpcUserCidrs           `json:"UserCidrs,omitempty" xml:"UserCidrs,omitempty" require:"true" type:"Struct"`
	NatGatewayIds          *DescribeVpcsResponseVpcsVpcNatGatewayIds       `json:"NatGatewayIds,omitempty" xml:"NatGatewayIds,omitempty" require:"true" type:"Struct"`
	RouterTableIds         *DescribeVpcsResponseVpcsVpcRouterTableIds      `json:"RouterTableIds,omitempty" xml:"RouterTableIds,omitempty" require:"true" type:"Struct"`
	SecondaryCidrBlocks    *DescribeVpcsResponseVpcsVpcSecondaryCidrBlocks `json:"SecondaryCidrBlocks,omitempty" xml:"SecondaryCidrBlocks,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVpcsResponseVpcsVpc) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpc) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpc) SetVpcId(v string) *DescribeVpcsResponseVpcsVpc {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetRegionId(v string) *DescribeVpcsResponseVpcsVpc {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetStatus(v string) *DescribeVpcsResponseVpcsVpc {
	s.Status = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetVpcName(v string) *DescribeVpcsResponseVpcsVpc {
	s.VpcName = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetCreationTime(v string) *DescribeVpcsResponseVpcsVpc {
	s.CreationTime = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetCidrBlock(v string) *DescribeVpcsResponseVpcsVpc {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetIpv6CidrBlock(v string) *DescribeVpcsResponseVpcsVpc {
	s.Ipv6CidrBlock = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetVRouterId(v string) *DescribeVpcsResponseVpcsVpc {
	s.VRouterId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetDescription(v string) *DescribeVpcsResponseVpcsVpc {
	s.Description = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetIsDefault(v bool) *DescribeVpcsResponseVpcsVpc {
	s.IsDefault = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetNetworkAclNum(v string) *DescribeVpcsResponseVpcsVpc {
	s.NetworkAclNum = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetResourceGroupId(v string) *DescribeVpcsResponseVpcsVpc {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetCenStatus(v string) *DescribeVpcsResponseVpcsVpc {
	s.CenStatus = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetOwnerId(v int64) *DescribeVpcsResponseVpcsVpc {
	s.OwnerId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetSupportAdvancedFeature(v bool) *DescribeVpcsResponseVpcsVpc {
	s.SupportAdvancedFeature = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetAdvancedResource(v bool) *DescribeVpcsResponseVpcsVpc {
	s.AdvancedResource = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetDhcpOptionsSetId(v string) *DescribeVpcsResponseVpcsVpc {
	s.DhcpOptionsSetId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetDhcpOptionsSetStatus(v string) *DescribeVpcsResponseVpcsVpc {
	s.DhcpOptionsSetStatus = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetTags(v *DescribeVpcsResponseVpcsVpcTags) *DescribeVpcsResponseVpcsVpc {
	s.Tags = v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetVSwitchIds(v *DescribeVpcsResponseVpcsVpcVSwitchIds) *DescribeVpcsResponseVpcsVpc {
	s.VSwitchIds = v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetUserCidrs(v *DescribeVpcsResponseVpcsVpcUserCidrs) *DescribeVpcsResponseVpcsVpc {
	s.UserCidrs = v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetNatGatewayIds(v *DescribeVpcsResponseVpcsVpcNatGatewayIds) *DescribeVpcsResponseVpcsVpc {
	s.NatGatewayIds = v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetRouterTableIds(v *DescribeVpcsResponseVpcsVpcRouterTableIds) *DescribeVpcsResponseVpcsVpc {
	s.RouterTableIds = v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetSecondaryCidrBlocks(v *DescribeVpcsResponseVpcsVpcSecondaryCidrBlocks) *DescribeVpcsResponseVpcsVpc {
	s.SecondaryCidrBlocks = v
	return s
}

type DescribeVpcsResponseVpcsVpcTags struct {
	Tag []*DescribeVpcsResponseVpcsVpcTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcTags) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcTags) SetTag(v []*DescribeVpcsResponseVpcsVpcTagsTag) *DescribeVpcsResponseVpcsVpcTags {
	s.Tag = v
	return s
}

type DescribeVpcsResponseVpcsVpcTagsTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s DescribeVpcsResponseVpcsVpcTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcTagsTag) SetKey(v string) *DescribeVpcsResponseVpcsVpcTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpcTagsTag) SetValue(v string) *DescribeVpcsResponseVpcsVpcTagsTag {
	s.Value = &v
	return s
}

type DescribeVpcsResponseVpcsVpcVSwitchIds struct {
	// VSwitchId
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcVSwitchIds) SetVSwitchId(v []*string) *DescribeVpcsResponseVpcsVpcVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeVpcsResponseVpcsVpcUserCidrs struct {
	// UserCidr
	UserCidr []*string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcUserCidrs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcUserCidrs) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcUserCidrs) SetUserCidr(v []*string) *DescribeVpcsResponseVpcsVpcUserCidrs {
	s.UserCidr = v
	return s
}

type DescribeVpcsResponseVpcsVpcNatGatewayIds struct {
	// NatGatewayIds
	NatGatewayIds []*string `json:"NatGatewayIds,omitempty" xml:"NatGatewayIds,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcNatGatewayIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcNatGatewayIds) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcNatGatewayIds) SetNatGatewayIds(v []*string) *DescribeVpcsResponseVpcsVpcNatGatewayIds {
	s.NatGatewayIds = v
	return s
}

type DescribeVpcsResponseVpcsVpcRouterTableIds struct {
	// RouterTableIds
	RouterTableIds []*string `json:"RouterTableIds,omitempty" xml:"RouterTableIds,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcRouterTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcRouterTableIds) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcRouterTableIds) SetRouterTableIds(v []*string) *DescribeVpcsResponseVpcsVpcRouterTableIds {
	s.RouterTableIds = v
	return s
}

type DescribeVpcsResponseVpcsVpcSecondaryCidrBlocks struct {
	// SecondaryCidrBlock
	SecondaryCidrBlock []*string `json:"SecondaryCidrBlock,omitempty" xml:"SecondaryCidrBlock,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcSecondaryCidrBlocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcSecondaryCidrBlocks) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcSecondaryCidrBlocks) SetSecondaryCidrBlock(v []*string) *DescribeVpcsResponseVpcsVpcSecondaryCidrBlocks {
	s.SecondaryCidrBlock = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionRequest struct {
	Filter               []*DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	RegionId             *string                                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PhysicalConnectionId *string                                                           `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	PageNumber           *int                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetFilter(v []*DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.Filter = v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetRegionId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPhysicalConnectionId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPageNumber(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPageSize(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PageSize = &v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) SetKey(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) SetValue(v []*string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter {
	s.Value = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponse struct {
	RequestId                                   *string                                                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber                                  *int                                                                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize                                    *int                                                                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalCount                                  *int                                                                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	VirtualBorderRouterForPhysicalConnectionSet *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet `json:"VirtualBorderRouterForPhysicalConnectionSet,omitempty" xml:"VirtualBorderRouterForPhysicalConnectionSet,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetRequestId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetPageNumber(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetPageSize(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetTotalCount(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetVirtualBorderRouterForPhysicalConnectionSet(v *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.VirtualBorderRouterForPhysicalConnectionSet = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet struct {
	VirtualBorderRouterForPhysicalConnectionType []*DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType `json:"VirtualBorderRouterForPhysicalConnectionType,omitempty" xml:"VirtualBorderRouterForPhysicalConnectionType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) SetVirtualBorderRouterForPhysicalConnectionType(v []*DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet {
	s.VirtualBorderRouterForPhysicalConnectionType = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType struct {
	VbrId                   *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	VbrOwnerUid             *int64  `json:"VbrOwnerUid,omitempty" xml:"VbrOwnerUid,omitempty" require:"true"`
	EccId                   *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
	Type                    *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	ActivationTime          *string `json:"ActivationTime,omitempty" xml:"ActivationTime,omitempty" require:"true"`
	TerminationTime         *string `json:"TerminationTime,omitempty" xml:"TerminationTime,omitempty" require:"true"`
	RecoveryTime            *string `json:"RecoveryTime,omitempty" xml:"RecoveryTime,omitempty" require:"true"`
	VlanId                  *int    `json:"VlanId,omitempty" xml:"VlanId,omitempty" require:"true"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	CircuitCode             *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty" require:"true"`
	LocalGatewayIp          *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty" require:"true"`
	PeerGatewayIp           *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty" require:"true"`
	PeeringSubnetMask       *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty" require:"true"`
	PConnVbrChargeType      *string `json:"PConnVbrChargeType,omitempty" xml:"PConnVbrChargeType,omitempty" require:"true"`
	PConnVbrExpireTime      *string `json:"PConnVbrExpireTime,omitempty" xml:"PConnVbrExpireTime,omitempty" require:"true"`
	PConnVbrBussinessStatus *string `json:"PConnVbrBussinessStatus,omitempty" xml:"PConnVbrBussinessStatus,omitempty" require:"true"`
	Bandwidth               *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	LocalIpv6GatewayIp      *string `json:"LocalIpv6GatewayIp,omitempty" xml:"LocalIpv6GatewayIp,omitempty" require:"true"`
	PeerIpv6GatewayIp       *string `json:"PeerIpv6GatewayIp,omitempty" xml:"PeerIpv6GatewayIp,omitempty" require:"true"`
	PeeringIpv6SubnetMask   *string `json:"PeeringIpv6SubnetMask,omitempty" xml:"PeeringIpv6SubnetMask,omitempty" require:"true"`
	EnableIpv6              *bool   `json:"EnableIpv6,omitempty" xml:"EnableIpv6,omitempty" require:"true"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetVbrId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.VbrId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetVbrOwnerUid(v int64) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.VbrOwnerUid = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetEccId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.EccId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetType(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.Type = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetCreationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.CreationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetActivationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.ActivationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetTerminationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.TerminationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetRecoveryTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.RecoveryTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetVlanId(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.VlanId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetStatus(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.Status = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetCircuitCode(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.CircuitCode = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetLocalGatewayIp(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.LocalGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetPeerGatewayIp(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.PeerGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetPeeringSubnetMask(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.PeeringSubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetPConnVbrChargeType(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.PConnVbrChargeType = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetPConnVbrExpireTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.PConnVbrExpireTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetPConnVbrBussinessStatus(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.PConnVbrBussinessStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetBandwidth(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.Bandwidth = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetLocalIpv6GatewayIp(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.LocalIpv6GatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetPeerIpv6GatewayIp(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.PeerIpv6GatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetPeeringIpv6SubnetMask(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.PeeringIpv6SubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetEnableIpv6(v bool) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.EnableIpv6 = &v
	return s
}

type DescribeVirtualBorderRoutersRequest struct {
	RegionId   *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageNumber *int                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter     []*DescribeVirtualBorderRoutersRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersRequest) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersRequest) SetRegionId(v string) *DescribeVirtualBorderRoutersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetPageNumber(v int) *DescribeVirtualBorderRoutersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetPageSize(v int) *DescribeVirtualBorderRoutersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetFilter(v []*DescribeVirtualBorderRoutersRequestFilter) *DescribeVirtualBorderRoutersRequest {
	s.Filter = v
	return s
}

type DescribeVirtualBorderRoutersRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersRequestFilter) SetKey(v string) *DescribeVirtualBorderRoutersRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequestFilter) SetValue(v []*string) *DescribeVirtualBorderRoutersRequestFilter {
	s.Value = v
	return s
}

type DescribeVirtualBorderRoutersResponse struct {
	RequestId              *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber             *int                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize               *int                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalCount             *int                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	VirtualBorderRouterSet *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet `json:"VirtualBorderRouterSet,omitempty" xml:"VirtualBorderRouterSet,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVirtualBorderRoutersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponse) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponse) SetRequestId(v string) *DescribeVirtualBorderRoutersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetPageNumber(v int) *DescribeVirtualBorderRoutersResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetPageSize(v int) *DescribeVirtualBorderRoutersResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetTotalCount(v int) *DescribeVirtualBorderRoutersResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetVirtualBorderRouterSet(v *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) *DescribeVirtualBorderRoutersResponse {
	s.VirtualBorderRouterSet = v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet struct {
	VirtualBorderRouterType []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType `json:"VirtualBorderRouterType,omitempty" xml:"VirtualBorderRouterType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) SetVirtualBorderRouterType(v []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet {
	s.VirtualBorderRouterType = v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType struct {
	VbrId                            *string                                                                                                         `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	CreationTime                     *string                                                                                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	ActivationTime                   *string                                                                                                         `json:"ActivationTime,omitempty" xml:"ActivationTime,omitempty" require:"true"`
	TerminationTime                  *string                                                                                                         `json:"TerminationTime,omitempty" xml:"TerminationTime,omitempty" require:"true"`
	RecoveryTime                     *string                                                                                                         `json:"RecoveryTime,omitempty" xml:"RecoveryTime,omitempty" require:"true"`
	Status                           *string                                                                                                         `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	VlanId                           *int                                                                                                            `json:"VlanId,omitempty" xml:"VlanId,omitempty" require:"true"`
	CircuitCode                      *string                                                                                                         `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty" require:"true"`
	RouteTableId                     *string                                                                                                         `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	VlanInterfaceId                  *string                                                                                                         `json:"VlanInterfaceId,omitempty" xml:"VlanInterfaceId,omitempty" require:"true"`
	LocalGatewayIp                   *string                                                                                                         `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty" require:"true"`
	PeerGatewayIp                    *string                                                                                                         `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty" require:"true"`
	PeeringSubnetMask                *string                                                                                                         `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty" require:"true"`
	PhysicalConnectionId             *string                                                                                                         `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	PhysicalConnectionStatus         *string                                                                                                         `json:"PhysicalConnectionStatus,omitempty" xml:"PhysicalConnectionStatus,omitempty" require:"true"`
	PhysicalConnectionBusinessStatus *string                                                                                                         `json:"PhysicalConnectionBusinessStatus,omitempty" xml:"PhysicalConnectionBusinessStatus,omitempty" require:"true"`
	PhysicalConnectionOwnerUid       *string                                                                                                         `json:"PhysicalConnectionOwnerUid,omitempty" xml:"PhysicalConnectionOwnerUid,omitempty" require:"true"`
	AccessPointId                    *string                                                                                                         `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	Name                             *string                                                                                                         `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description                      *string                                                                                                         `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	PConnVbrExpireTime               *string                                                                                                         `json:"PConnVbrExpireTime,omitempty" xml:"PConnVbrExpireTime,omitempty" require:"true"`
	EccId                            *string                                                                                                         `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
	Type                             *string                                                                                                         `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	MinTxInterval                    *int64                                                                                                          `json:"MinTxInterval,omitempty" xml:"MinTxInterval,omitempty" require:"true"`
	MinRxInterval                    *int64                                                                                                          `json:"MinRxInterval,omitempty" xml:"MinRxInterval,omitempty" require:"true"`
	DetectMultiplier                 *int64                                                                                                          `json:"DetectMultiplier,omitempty" xml:"DetectMultiplier,omitempty" require:"true"`
	LocalIpv6GatewayIp               *string                                                                                                         `json:"LocalIpv6GatewayIp,omitempty" xml:"LocalIpv6GatewayIp,omitempty" require:"true"`
	PeerIpv6GatewayIp                *string                                                                                                         `json:"PeerIpv6GatewayIp,omitempty" xml:"PeerIpv6GatewayIp,omitempty" require:"true"`
	PeeringIpv6SubnetMask            *string                                                                                                         `json:"PeeringIpv6SubnetMask,omitempty" xml:"PeeringIpv6SubnetMask,omitempty" require:"true"`
	EnableIpv6                       *bool                                                                                                           `json:"EnableIpv6,omitempty" xml:"EnableIpv6,omitempty" require:"true"`
	AssociatedPhysicalConnections    *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnections `json:"AssociatedPhysicalConnections,omitempty" xml:"AssociatedPhysicalConnections,omitempty" require:"true" type:"Struct"`
	AssociatedCens                   *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCens                `json:"AssociatedCens,omitempty" xml:"AssociatedCens,omitempty" require:"true" type:"Struct"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetVbrId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.VbrId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetCreationTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.CreationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetActivationTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.ActivationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetTerminationTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.TerminationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetRecoveryTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.RecoveryTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.Status = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetVlanId(v int) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.VlanId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetCircuitCode(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.CircuitCode = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetRouteTableId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.RouteTableId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetVlanInterfaceId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.VlanInterfaceId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetLocalGatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.LocalGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPeerGatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PeerGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPeeringSubnetMask(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PeeringSubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionBusinessStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionBusinessStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionOwnerUid(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionOwnerUid = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetAccessPointId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.AccessPointId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetName(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.Name = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetDescription(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.Description = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPConnVbrExpireTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PConnVbrExpireTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetEccId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.EccId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetType(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.Type = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetMinTxInterval(v int64) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.MinTxInterval = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetMinRxInterval(v int64) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.MinRxInterval = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetDetectMultiplier(v int64) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.DetectMultiplier = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetLocalIpv6GatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.LocalIpv6GatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPeerIpv6GatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PeerIpv6GatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPeeringIpv6SubnetMask(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PeeringIpv6SubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetEnableIpv6(v bool) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.EnableIpv6 = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetAssociatedPhysicalConnections(v *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnections) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.AssociatedPhysicalConnections = v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetAssociatedCens(v *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCens) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.AssociatedCens = v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnections struct {
	AssociatedPhysicalConnection []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection `json:"AssociatedPhysicalConnection,omitempty" xml:"AssociatedPhysicalConnection,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnections) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnections) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnections) SetAssociatedPhysicalConnection(v []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnections {
	s.AssociatedPhysicalConnection = v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection struct {
	CircuitCode                      *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty" require:"true"`
	VlanInterfaceId                  *string `json:"VlanInterfaceId,omitempty" xml:"VlanInterfaceId,omitempty" require:"true"`
	LocalGatewayIp                   *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty" require:"true"`
	PeerGatewayIp                    *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty" require:"true"`
	PeeringSubnetMask                *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty" require:"true"`
	PhysicalConnectionId             *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	PhysicalConnectionStatus         *string `json:"PhysicalConnectionStatus,omitempty" xml:"PhysicalConnectionStatus,omitempty" require:"true"`
	PhysicalConnectionBusinessStatus *string `json:"PhysicalConnectionBusinessStatus,omitempty" xml:"PhysicalConnectionBusinessStatus,omitempty" require:"true"`
	PhysicalConnectionOwnerUid       *string `json:"PhysicalConnectionOwnerUid,omitempty" xml:"PhysicalConnectionOwnerUid,omitempty" require:"true"`
	VlanId                           *string `json:"VlanId,omitempty" xml:"VlanId,omitempty" require:"true"`
	LocalIpv6GatewayIp               *string `json:"LocalIpv6GatewayIp,omitempty" xml:"LocalIpv6GatewayIp,omitempty" require:"true"`
	PeerIpv6GatewayIp                *string `json:"PeerIpv6GatewayIp,omitempty" xml:"PeerIpv6GatewayIp,omitempty" require:"true"`
	PeeringIpv6SubnetMask            *string `json:"PeeringIpv6SubnetMask,omitempty" xml:"PeeringIpv6SubnetMask,omitempty" require:"true"`
	Status                           *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	EnableIpv6                       *bool   `json:"EnableIpv6,omitempty" xml:"EnableIpv6,omitempty" require:"true"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetCircuitCode(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.CircuitCode = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetVlanInterfaceId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.VlanInterfaceId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetLocalGatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.LocalGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPeerGatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PeerGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPeeringSubnetMask(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PeeringSubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPhysicalConnectionId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPhysicalConnectionStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PhysicalConnectionStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPhysicalConnectionBusinessStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PhysicalConnectionBusinessStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPhysicalConnectionOwnerUid(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PhysicalConnectionOwnerUid = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetVlanId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.VlanId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetLocalIpv6GatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.LocalIpv6GatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPeerIpv6GatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PeerIpv6GatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetPeeringIpv6SubnetMask(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.PeeringIpv6SubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.Status = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection) SetEnableIpv6(v bool) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedPhysicalConnectionsAssociatedPhysicalConnection {
	s.EnableIpv6 = &v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCens struct {
	AssociatedCen []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen `json:"AssociatedCen,omitempty" xml:"AssociatedCen,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCens) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCens) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCens) SetAssociatedCen(v []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCens {
	s.AssociatedCen = v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen struct {
	CenId      *string `json:"CenId,omitempty" xml:"CenId,omitempty" require:"true"`
	CenOwnerId *int64  `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty" require:"true"`
	CenStatus  *string `json:"CenStatus,omitempty" xml:"CenStatus,omitempty" require:"true"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen) SetCenId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen {
	s.CenId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen) SetCenOwnerId(v int64) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen {
	s.CenOwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen) SetCenStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterTypeAssociatedCensAssociatedCen {
	s.CenStatus = &v
	return s
}

type DescribeRouteTablesRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VRouterId       *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	RouteTableId    *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	RouterType      *string `json:"RouterType,omitempty" xml:"RouterType,omitempty"`
	RouterId        *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	RouteTableName  *string `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	PageNumber      *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeRouteTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesRequest) SetRegionId(v string) *DescribeRouteTablesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetVRouterId(v string) *DescribeRouteTablesRequest {
	s.VRouterId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouteTableId(v string) *DescribeRouteTablesRequest {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouterType(v string) *DescribeRouteTablesRequest {
	s.RouterType = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouterId(v string) *DescribeRouteTablesRequest {
	s.RouterId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetType(v string) *DescribeRouteTablesRequest {
	s.Type = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouteTableName(v string) *DescribeRouteTablesRequest {
	s.RouteTableName = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetResourceGroupId(v string) *DescribeRouteTablesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetPageNumber(v int) *DescribeRouteTablesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetPageSize(v int) *DescribeRouteTablesRequest {
	s.PageSize = &v
	return s
}

type DescribeRouteTablesResponse struct {
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount  *int                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber  *int                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *int                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	RouteTables *DescribeRouteTablesResponseRouteTables `json:"RouteTables,omitempty" xml:"RouteTables,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponse) SetRequestId(v string) *DescribeRouteTablesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetTotalCount(v int) *DescribeRouteTablesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetPageNumber(v int) *DescribeRouteTablesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetPageSize(v int) *DescribeRouteTablesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetRouteTables(v *DescribeRouteTablesResponseRouteTables) *DescribeRouteTablesResponse {
	s.RouteTables = v
	return s
}

type DescribeRouteTablesResponseRouteTables struct {
	RouteTable []*DescribeRouteTablesResponseRouteTablesRouteTable `json:"RouteTable,omitempty" xml:"RouteTable,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteTablesResponseRouteTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTables) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTables) SetRouteTable(v []*DescribeRouteTablesResponseRouteTablesRouteTable) *DescribeRouteTablesResponseRouteTables {
	s.RouteTable = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTable struct {
	VRouterId       *string                                                      `json:"VRouterId,omitempty" xml:"VRouterId,omitempty" require:"true"`
	RouteTableId    *string                                                      `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	RouteTableType  *string                                                      `json:"RouteTableType,omitempty" xml:"RouteTableType,omitempty" require:"true"`
	CreationTime    *string                                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	ResourceGroupId *string                                                      `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	Status          *string                                                      `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	RouteEntrys     *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys `json:"RouteEntrys,omitempty" xml:"RouteEntrys,omitempty" require:"true" type:"Struct"`
	VSwitchIds      *DescribeRouteTablesResponseRouteTablesRouteTableVSwitchIds  `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTable) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTable) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetVRouterId(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.VRouterId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetRouteTableId(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetRouteTableType(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.RouteTableType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetCreationTime(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetResourceGroupId(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetStatus(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.Status = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetRouteEntrys(v *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.RouteEntrys = v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetVSwitchIds(v *DescribeRouteTablesResponseRouteTablesRouteTableVSwitchIds) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.VSwitchIds = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys struct {
	RouteEntry []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry `json:"RouteEntry,omitempty" xml:"RouteEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) SetRouteEntry(v []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys {
	s.RouteEntry = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry struct {
	RouteTableId             *string                                                                        `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	DestinationCidrBlock     *string                                                                        `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty" require:"true"`
	Type                     *string                                                                        `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Status                   *string                                                                        `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	InstanceId               *string                                                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	NextHopType              *string                                                                        `json:"NextHopType,omitempty" xml:"NextHopType,omitempty" require:"true"`
	RouteEntryName           *string                                                                        `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty" require:"true"`
	Description              *string                                                                        `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	RouteEntryId             *string                                                                        `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty" require:"true"`
	NextHopRegionId          *string                                                                        `json:"NextHopRegionId,omitempty" xml:"NextHopRegionId,omitempty" require:"true"`
	NextHopOppsiteType       *string                                                                        `json:"NextHopOppsiteType,omitempty" xml:"NextHopOppsiteType,omitempty" require:"true"`
	NextHopOppsiteInstanceId *string                                                                        `json:"NextHopOppsiteInstanceId,omitempty" xml:"NextHopOppsiteInstanceId,omitempty" require:"true"`
	NextHopOppsiteRegionId   *string                                                                        `json:"NextHopOppsiteRegionId,omitempty" xml:"NextHopOppsiteRegionId,omitempty" require:"true"`
	PrivateIpAddress         *string                                                                        `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" require:"true"`
	NextHops                 *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops `json:"NextHops,omitempty" xml:"NextHops,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetRouteTableId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetDestinationCidrBlock(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.Type = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetStatus(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.Status = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetInstanceId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.InstanceId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHopType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetRouteEntryName(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.RouteEntryName = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetDescription(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.Description = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetRouteEntryId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.RouteEntryId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHopRegionId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHopRegionId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHopOppsiteType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHopOppsiteType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHopOppsiteInstanceId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHopOppsiteInstanceId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHopOppsiteRegionId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHopOppsiteRegionId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetPrivateIpAddress(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHops(v *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHops = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops struct {
	NextHop []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop `json:"NextHop,omitempty" xml:"NextHop,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) SetNextHop(v []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops {
	s.NextHop = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop struct {
	NextHopType              *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty" require:"true"`
	NextHopId                *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty" require:"true"`
	Enabled                  *int    `json:"Enabled,omitempty" xml:"Enabled,omitempty" require:"true"`
	Weight                   *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
	NextHopRegionId          *string `json:"NextHopRegionId,omitempty" xml:"NextHopRegionId,omitempty" require:"true"`
	NextHopOppsiteType       *string `json:"NextHopOppsiteType,omitempty" xml:"NextHopOppsiteType,omitempty" require:"true"`
	NextHopOppsiteInstanceId *string `json:"NextHopOppsiteInstanceId,omitempty" xml:"NextHopOppsiteInstanceId,omitempty" require:"true"`
	NextHopOppsiteRegionId   *string `json:"NextHopOppsiteRegionId,omitempty" xml:"NextHopOppsiteRegionId,omitempty" require:"true"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetEnabled(v int) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.Enabled = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetWeight(v int) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.Weight = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopRegionId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopRegionId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopOppsiteType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopOppsiteType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopOppsiteInstanceId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopOppsiteInstanceId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopOppsiteRegionId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopOppsiteRegionId = &v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableVSwitchIds struct {
	// VSwitchId
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableVSwitchIds) SetVSwitchId(v []*string) *DescribeRouteTablesResponseRouteTablesRouteTableVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeRouterInterfacesRequest struct {
	RegionId               *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IncludeReservationData *bool                                    `json:"IncludeReservationData,omitempty" xml:"IncludeReservationData,omitempty"`
	PageNumber             *int                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize               *int                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter                 []*DescribeRouterInterfacesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeRouterInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesRequest) SetRegionId(v string) *DescribeRouterInterfacesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetIncludeReservationData(v bool) *DescribeRouterInterfacesRequest {
	s.IncludeReservationData = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetPageNumber(v int) *DescribeRouterInterfacesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetPageSize(v int) *DescribeRouterInterfacesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetFilter(v []*DescribeRouterInterfacesRequestFilter) *DescribeRouterInterfacesRequest {
	s.Filter = v
	return s
}

type DescribeRouterInterfacesRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouterInterfacesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesRequestFilter) SetKey(v string) *DescribeRouterInterfacesRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeRouterInterfacesRequestFilter) SetValue(v []*string) *DescribeRouterInterfacesRequestFilter {
	s.Value = v
	return s
}

type DescribeRouterInterfacesResponse struct {
	RequestId          *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber         *int                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize           *int                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalCount         *int                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	RouterInterfaceSet *DescribeRouterInterfacesResponseRouterInterfaceSet `json:"RouterInterfaceSet,omitempty" xml:"RouterInterfaceSet,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRouterInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponse) SetRequestId(v string) *DescribeRouterInterfacesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetPageNumber(v int) *DescribeRouterInterfacesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetPageSize(v int) *DescribeRouterInterfacesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetTotalCount(v int) *DescribeRouterInterfacesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetRouterInterfaceSet(v *DescribeRouterInterfacesResponseRouterInterfaceSet) *DescribeRouterInterfacesResponse {
	s.RouterInterfaceSet = v
	return s
}

type DescribeRouterInterfacesResponseRouterInterfaceSet struct {
	RouterInterfaceType []*DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType `json:"RouterInterfaceType,omitempty" xml:"RouterInterfaceType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSet) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSet) SetRouterInterfaceType(v []*DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) *DescribeRouterInterfacesResponseRouterInterfaceSet {
	s.RouterInterfaceType = v
	return s
}

type DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType struct {
	RouterInterfaceId               *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
	OppositeRegionId                *string `json:"OppositeRegionId,omitempty" xml:"OppositeRegionId,omitempty" require:"true"`
	Role                            *string `json:"Role,omitempty" xml:"Role,omitempty" require:"true"`
	Spec                            *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	Name                            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description                     *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	RouterId                        *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	RouterType                      *string `json:"RouterType,omitempty" xml:"RouterType,omitempty" require:"true"`
	CreationTime                    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	EndTime                         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	ChargeType                      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	Status                          *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	BusinessStatus                  *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	ConnectedTime                   *string `json:"ConnectedTime,omitempty" xml:"ConnectedTime,omitempty" require:"true"`
	OppositeInterfaceId             *string `json:"OppositeInterfaceId,omitempty" xml:"OppositeInterfaceId,omitempty" require:"true"`
	OppositeInterfaceSpec           *string `json:"OppositeInterfaceSpec,omitempty" xml:"OppositeInterfaceSpec,omitempty" require:"true"`
	OppositeInterfaceStatus         *string `json:"OppositeInterfaceStatus,omitempty" xml:"OppositeInterfaceStatus,omitempty" require:"true"`
	OppositeInterfaceBusinessStatus *string `json:"OppositeInterfaceBusinessStatus,omitempty" xml:"OppositeInterfaceBusinessStatus,omitempty" require:"true"`
	OppositeRouterId                *string `json:"OppositeRouterId,omitempty" xml:"OppositeRouterId,omitempty" require:"true"`
	OppositeRouterType              *string `json:"OppositeRouterType,omitempty" xml:"OppositeRouterType,omitempty" require:"true"`
	OppositeInterfaceOwnerId        *string `json:"OppositeInterfaceOwnerId,omitempty" xml:"OppositeInterfaceOwnerId,omitempty" require:"true"`
	AccessPointId                   *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	OppositeAccessPointId           *string `json:"OppositeAccessPointId,omitempty" xml:"OppositeAccessPointId,omitempty" require:"true"`
	HealthCheckSourceIp             *string `json:"HealthCheckSourceIp,omitempty" xml:"HealthCheckSourceIp,omitempty" require:"true"`
	HealthCheckTargetIp             *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty" require:"true"`
	OppositeVpcInstanceId           *string `json:"OppositeVpcInstanceId,omitempty" xml:"OppositeVpcInstanceId,omitempty" require:"true"`
	Bandwidth                       *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	VpcInstanceId                   *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty" require:"true"`
	OppositeBandwidth               *int    `json:"OppositeBandwidth,omitempty" xml:"OppositeBandwidth,omitempty" require:"true"`
	HasReservationData              *string `json:"HasReservationData,omitempty" xml:"HasReservationData,omitempty" require:"true"`
	ReservationBandwidth            *string `json:"ReservationBandwidth,omitempty" xml:"ReservationBandwidth,omitempty" require:"true"`
	ReservationInternetChargeType   *string `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty" require:"true"`
	ReservationActiveTime           *string `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty" require:"true"`
	ReservationOrderType            *string `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	CrossBorder                     *bool   `json:"CrossBorder,omitempty" xml:"CrossBorder,omitempty" require:"true"`
	HcThreshold                     *int    `json:"HcThreshold,omitempty" xml:"HcThreshold,omitempty" require:"true"`
	HcRate                          *int    `json:"HcRate,omitempty" xml:"HcRate,omitempty" require:"true"`
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRouterInterfaceId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.RouterInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeRegionId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeRegionId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRole(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Role = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetSpec(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Spec = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetName(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Name = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetDescription(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Description = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRouterId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.RouterId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRouterType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.RouterType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetCreationTime(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetEndTime(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.EndTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetChargeType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ChargeType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Status = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetBusinessStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetConnectedTime(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ConnectedTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceSpec(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceSpec = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceBusinessStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceBusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeRouterId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeRouterId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeRouterType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeRouterType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceOwnerId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetAccessPointId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.AccessPointId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeAccessPointId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeAccessPointId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetHealthCheckSourceIp(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetHealthCheckTargetIp(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeVpcInstanceId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeVpcInstanceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetBandwidth(v int) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Bandwidth = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetVpcInstanceId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.VpcInstanceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeBandwidth(v int) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeBandwidth = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetHasReservationData(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.HasReservationData = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetReservationBandwidth(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ReservationBandwidth = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetReservationInternetChargeType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ReservationInternetChargeType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetReservationActiveTime(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetReservationOrderType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetCrossBorder(v bool) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.CrossBorder = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetHcThreshold(v int) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.HcThreshold = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetHcRate(v int) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.HcRate = &v
	return s
}

type DescribeRegionsRequest struct {
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetAcceptLanguage(v string) *DescribeRegionsRequest {
	s.AcceptLanguage = &v
	return s
}

type DescribeRegionsResponse struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Regions   *DescribeRegionsResponseRegions `json:"Regions,omitempty" xml:"Regions,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetRequestId(v string) *DescribeRegionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponse) SetRegions(v *DescribeRegionsResponseRegions) *DescribeRegionsResponse {
	s.Regions = v
	return s
}

type DescribeRegionsResponseRegions struct {
	Region []*DescribeRegionsResponseRegionsRegion `json:"Region,omitempty" xml:"Region,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRegionsResponseRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseRegions) SetRegion(v []*DescribeRegionsResponseRegionsRegion) *DescribeRegionsResponseRegions {
	s.Region = v
	return s
}

type DescribeRegionsResponseRegionsRegion struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	LocalName      *string `json:"LocalName,omitempty" xml:"LocalName,omitempty" require:"true"`
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty" require:"true"`
}

func (s DescribeRegionsResponseRegionsRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseRegionsRegion {
	s.RegionId = &v
	return s
}

func (s *DescribeRegionsResponseRegionsRegion) SetLocalName(v string) *DescribeRegionsResponseRegionsRegion {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseRegionsRegion) SetRegionEndpoint(v string) *DescribeRegionsResponseRegionsRegion {
	s.RegionEndpoint = &v
	return s
}

type DescribePhysicalConnectionsRequest struct {
	// description: The ID of the region where the leased line is deployed. You can obtain the region ID by calling the [DescribeRegions](~~36063~~);
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: Optional. The page number of the physical connection list. Default value: 1.;
	PageNumber *int `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// description: Optional. The number of rows per page. Maximum value: 50. Default value: 10.;
	PageSize *int                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter   []*DescribePhysicalConnectionsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	// description: Optional. Indicates whether to return invalid orders.;
	IncludeReservationData *bool `json:"IncludeReservationData,omitempty" xml:"IncludeReservationData,omitempty"`
	// description: Optional. It is used to guarantee the idempotence of requests. This parameter is generated by clients. It must be unique for each request and must not exceed 64 ASCII characters in length.;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DescribePhysicalConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsRequest) SetRegionId(v string) *DescribePhysicalConnectionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetPageNumber(v int) *DescribePhysicalConnectionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetPageSize(v int) *DescribePhysicalConnectionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetFilter(v []*DescribePhysicalConnectionsRequestFilter) *DescribePhysicalConnectionsRequest {
	s.Filter = v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetIncludeReservationData(v bool) *DescribePhysicalConnectionsRequest {
	s.IncludeReservationData = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetClientToken(v string) *DescribePhysicalConnectionsRequest {
	s.ClientToken = &v
	return s
}

type DescribePhysicalConnectionsRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" require:"true" type:"Repeated"`
}

func (s DescribePhysicalConnectionsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsRequestFilter) SetKey(v string) *DescribePhysicalConnectionsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribePhysicalConnectionsRequestFilter) SetValue(v []*string) *DescribePhysicalConnectionsRequestFilter {
	s.Value = v
	return s
}

type DescribePhysicalConnectionsResponse struct {
	// description: The ID of the request ;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: The current page number ;
	PageNumber *int `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	// description: The number of items per page;
	PageSize *int `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	// description: The number of items in a list;
	TotalCount *int `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	// description: Details of physical connections
	PhysicalConnectionSet *DescribePhysicalConnectionsResponsePhysicalConnectionSet `json:"PhysicalConnectionSet,omitempty" xml:"PhysicalConnectionSet,omitempty" require:"true" type:"Struct"`
}

func (s DescribePhysicalConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponse) SetRequestId(v string) *DescribePhysicalConnectionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetPageNumber(v int) *DescribePhysicalConnectionsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetPageSize(v int) *DescribePhysicalConnectionsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetTotalCount(v int) *DescribePhysicalConnectionsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetPhysicalConnectionSet(v *DescribePhysicalConnectionsResponsePhysicalConnectionSet) *DescribePhysicalConnectionsResponse {
	s.PhysicalConnectionSet = v
	return s
}

type DescribePhysicalConnectionsResponsePhysicalConnectionSet struct {
	PhysicalConnectionType []*DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType `json:"PhysicalConnectionType,omitempty" xml:"PhysicalConnectionType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSet) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSet) SetPhysicalConnectionType(v []*DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) *DescribePhysicalConnectionsResponsePhysicalConnectionSet {
	s.PhysicalConnectionType = v
	return s
}

type DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType struct {
	// description: The ID of the physical connection;
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	// description: The access point ID of the physical connection;
	AccessPointId *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	// description: The type of the physical connection. Default value: **VPC**.;
	Type *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	// description: The status of the physical connection. Valid values: * **Initial**: The physical connection has been applied for and is under review by Alibaba Cloud* **Approved**: The application is approved* **Allocating**: Resources* **Allocated**: The leased line is being installed.* **Confirmed**: The completed leased line installation needs to be confirmed by the customer.* **Enabled**: The physical connection interface is enabled.* **Rejected**: The application is rejected.* **Canceled**: The application is canceled.* **Allocation Failed**: Failed to allocate resources* **Terminated**: The physical connection is terminated;
	Status *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	// description: The payment status of the physical connection. Valid values: * Normal * FinancialLocked: locked due to overdue payment* SecurityLocked: locked due to security reasons;
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	// description: The time when the physical connection is established ;
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	// description: The time when the physical connection is enabled ;
	EnabledTime *string `json:"EnabledTime,omitempty" xml:"EnabledTime,omitempty" require:"true"`
	// description: The service provider that provides the leased line. Valid values:* CT: China Telecom * CU: China Unicom* CM: China Mobile* CO: Other Chinese service providers* Equinix: Equinix * Other: Other service providers outside Mainland China;
	LineOperator *string `json:"LineOperator,omitempty" xml:"LineOperator,omitempty" require:"true"`
	// description: The specification of the physical connection;
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	// description: The location of the on-premises IDC;
	PeerLocation *string `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty" require:"true"`
	// description: The type of physical connection ports:* 100Base-T: 100M electrical ports * 1000Base-T (default value): Gigabit electrical ports * 1000Base-LX: Gigabit single-mode optical ports (10 km) * 10GBase-T: 10-GE electrical ports  * 10GBase-LR: 10-GE single-mode optical ports (10 km);
	PortType *string `json:"PortType,omitempty" xml:"PortType,omitempty" require:"true"`
	// description: The ID of the redundant physical connection;
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId,omitempty" xml:"RedundantPhysicalConnectionId,omitempty" require:"true"`
	// description: The name of the physical connection;
	Name *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	// description: A description about the physical connection;
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	// description: The location where the leased line is connected;
	AdLocation *string `json:"AdLocation,omitempty" xml:"AdLocation,omitempty" require:"true"`
	// description: The port number of the physical connection device;
	PortNumber *string `json:"PortNumber,omitempty" xml:"PortNumber,omitempty" require:"true"`
	// description: The number of the leased line from the service provider;
	CircuitCode *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty" require:"true"`
	// description: The bandwidth of the physical connection;
	Bandwidth *int64 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	// description: The status of the LOA ;
	LoaStatus *string `json:"LoaStatus,omitempty" xml:"LoaStatus,omitempty" require:"true"`
	// description: Indicates whether subscription messages are received;
	HasReservationData *string `json:"HasReservationData,omitempty" xml:"HasReservationData,omitempty" require:"true"`
	// description: The type of renewal ;
	ReservationInternetChargeType *string `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty" require:"true"`
	// description: The effective time of a renewal;
	ReservationActiveTime *string `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty" require:"true"`
	// description: The type of the renewal order ;
	ReservationOrderType *string `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	// description: The time when the physical connection expires ;
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	// description: The billing method of the physical connection;
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPhysicalConnectionId(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetAccessPointId(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.AccessPointId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetType(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Type = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetStatus(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Status = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetBusinessStatus(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.BusinessStatus = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetCreationTime(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.CreationTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetEnabledTime(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.EnabledTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetLineOperator(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.LineOperator = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetSpec(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Spec = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPeerLocation(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PeerLocation = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPortType(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PortType = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetRedundantPhysicalConnectionId(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetName(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Name = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetDescription(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Description = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetAdLocation(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.AdLocation = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPortNumber(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PortNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetCircuitCode(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.CircuitCode = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetBandwidth(v int64) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Bandwidth = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetLoaStatus(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.LoaStatus = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetHasReservationData(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.HasReservationData = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetReservationInternetChargeType(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.ReservationInternetChargeType = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetReservationActiveTime(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetReservationOrderType(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetEndTime(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.EndTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetChargeType(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.ChargeType = &v
	return s
}

type DescribeNewProjectEipMonitorDataRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Period       *int    `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeNewProjectEipMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetRegionId(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetAllocationId(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetStartTime(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetEndTime(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetPeriod(v int) *DescribeNewProjectEipMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeNewProjectEipMonitorDataResponse struct {
	RequestId       *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EipMonitorDatas *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas `json:"EipMonitorDatas,omitempty" xml:"EipMonitorDatas,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNewProjectEipMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponse) SetRequestId(v string) *DescribeNewProjectEipMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponse) SetEipMonitorDatas(v *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) *DescribeNewProjectEipMonitorDataResponse {
	s.EipMonitorDatas = v
	return s
}

type DescribeNewProjectEipMonitorDataResponseEipMonitorDatas struct {
	EipMonitorData []*DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData `json:"EipMonitorData,omitempty" xml:"EipMonitorData,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) SetEipMonitorData(v []*DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas {
	s.EipMonitorData = v
	return s
}

type DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData struct {
	EipRX        *int    `json:"EipRX,omitempty" xml:"EipRX,omitempty" require:"true"`
	EipTX        *int    `json:"EipTX,omitempty" xml:"EipTX,omitempty" require:"true"`
	EipFlow      *int    `json:"EipFlow,omitempty" xml:"EipFlow,omitempty" require:"true"`
	EipBandwidth *int    `json:"EipBandwidth,omitempty" xml:"EipBandwidth,omitempty" require:"true"`
	EipPackets   *int    `json:"EipPackets,omitempty" xml:"EipPackets,omitempty" require:"true"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty" require:"true"`
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipRX(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipRX = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipTX(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipTX = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipFlow(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipFlow = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipBandwidth(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipPackets(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipPackets = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetTimeStamp(v string) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.TimeStamp = &v
	return s
}

type DescribeNatGatewaysRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NatGatewayId       *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	VpcId              *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Spec               *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	NatType            *string `json:"NatType,omitempty" xml:"NatType,omitempty"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	PageNumber         *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	DryRun             *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s DescribeNatGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysRequest) SetRegionId(v string) *DescribeNatGatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNatGatewayId(v string) *DescribeNatGatewaysRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetVpcId(v string) *DescribeNatGatewaysRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetName(v string) *DescribeNatGatewaysRequest {
	s.Name = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetInstanceChargeType(v string) *DescribeNatGatewaysRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetSpec(v string) *DescribeNatGatewaysRequest {
	s.Spec = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNatType(v string) *DescribeNatGatewaysRequest {
	s.NatType = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetResourceGroupId(v string) *DescribeNatGatewaysRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageNumber(v int) *DescribeNatGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageSize(v int) *DescribeNatGatewaysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetDryRun(v bool) *DescribeNatGatewaysRequest {
	s.DryRun = &v
	return s
}

type DescribeNatGatewaysResponse struct {
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount  *int                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber  *int                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *int                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	NatGateways *DescribeNatGatewaysResponseNatGateways `json:"NatGateways,omitempty" xml:"NatGateways,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNatGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponse) SetRequestId(v string) *DescribeNatGatewaysResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetTotalCount(v int) *DescribeNatGatewaysResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetPageNumber(v int) *DescribeNatGatewaysResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetPageSize(v int) *DescribeNatGatewaysResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetNatGateways(v *DescribeNatGatewaysResponseNatGateways) *DescribeNatGatewaysResponse {
	s.NatGateways = v
	return s
}

type DescribeNatGatewaysResponseNatGateways struct {
	NatGateway []*DescribeNatGatewaysResponseNatGatewaysNatGateway `json:"NatGateway,omitempty" xml:"NatGateway,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGateways) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGateways) SetNatGateway(v []*DescribeNatGatewaysResponseNatGatewaysNatGateway) *DescribeNatGatewaysResponseNatGateways {
	s.NatGateway = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGateway struct {
	NatGatewayId          *string                                                                `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	RegionId              *string                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Name                  *string                                                                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description           *string                                                                `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	VpcId                 *string                                                                `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Spec                  *string                                                                `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	InstanceChargeType    *string                                                                `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" require:"true"`
	ExpiredTime           *string                                                                `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	AutoPay               *bool                                                                  `json:"AutoPay,omitempty" xml:"AutoPay,omitempty" require:"true"`
	BusinessStatus        *string                                                                `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	CreationTime          *string                                                                `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Status                *string                                                                `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	NatType               *string                                                                `json:"NatType,omitempty" xml:"NatType,omitempty" require:"true"`
	InternetChargeType    *string                                                                `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty" require:"true"`
	ResourceGroupId       *string                                                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	DeletionProtection    *bool                                                                  `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty" require:"true"`
	EcsMetricEnabled      *bool                                                                  `json:"EcsMetricEnabled,omitempty" xml:"EcsMetricEnabled,omitempty" require:"true"`
	IpLists               *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpLists               `json:"IpLists,omitempty" xml:"IpLists,omitempty" require:"true" type:"Struct"`
	NatGatewayPrivateInfo *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo `json:"NatGatewayPrivateInfo,omitempty" xml:"NatGatewayPrivateInfo,omitempty" require:"true" type:"Struct"`
	ForwardTableIds       *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds       `json:"ForwardTableIds,omitempty" xml:"ForwardTableIds,omitempty" require:"true" type:"Struct"`
	SnatTableIds          *DescribeNatGatewaysResponseNatGatewaysNatGatewaySnatTableIds          `json:"SnatTableIds,omitempty" xml:"SnatTableIds,omitempty" require:"true" type:"Struct"`
	BandwidthPackageIds   *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds   `json:"BandwidthPackageIds,omitempty" xml:"BandwidthPackageIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGateway) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGateway) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetNatGatewayId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetRegionId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.RegionId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetName(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Name = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetDescription(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Description = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetVpcId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.VpcId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetSpec(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Spec = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetInstanceChargeType(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetExpiredTime(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetAutoPay(v bool) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.AutoPay = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetBusinessStatus(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetCreationTime(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.CreationTime = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetStatus(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Status = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetNatType(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.NatType = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetInternetChargeType(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetResourceGroupId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetDeletionProtection(v bool) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.DeletionProtection = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetEcsMetricEnabled(v bool) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.EcsMetricEnabled = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetIpLists(v *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpLists) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.IpLists = v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetNatGatewayPrivateInfo(v *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.NatGatewayPrivateInfo = v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetForwardTableIds(v *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.ForwardTableIds = v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetSnatTableIds(v *DescribeNatGatewaysResponseNatGatewaysNatGatewaySnatTableIds) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.SnatTableIds = v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetBandwidthPackageIds(v *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.BandwidthPackageIds = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewayIpLists struct {
	IpList []*DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList `json:"IpList,omitempty" xml:"IpList,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayIpLists) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayIpLists) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpLists) SetIpList(v []*DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpLists {
	s.IpList = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList struct {
	AllocationId     *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	IpAddress        *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	UsingStatus      *string `json:"UsingStatus,omitempty" xml:"UsingStatus,omitempty" require:"true"`
	ApAccessEnabled  *bool   `json:"ApAccessEnabled,omitempty" xml:"ApAccessEnabled,omitempty" require:"true"`
	SnatEntryEnabled *bool   `json:"SnatEntryEnabled,omitempty" xml:"SnatEntryEnabled,omitempty" require:"true"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) SetAllocationId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList {
	s.AllocationId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) SetIpAddress(v string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList {
	s.IpAddress = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) SetUsingStatus(v string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList {
	s.UsingStatus = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) SetApAccessEnabled(v bool) *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList {
	s.ApAccessEnabled = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList) SetSnatEntryEnabled(v bool) *DescribeNatGatewaysResponseNatGatewaysNatGatewayIpListsIpList {
	s.SnatEntryEnabled = &v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo struct {
	EniInstanceId    *string `json:"EniInstanceId,omitempty" xml:"EniInstanceId,omitempty" require:"true"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" require:"true"`
	VswitchId        *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty" require:"true"`
	IzNo             *string `json:"IzNo,omitempty" xml:"IzNo,omitempty" require:"true"`
	MaxBandwidth     *int    `json:"MaxBandwidth,omitempty" xml:"MaxBandwidth,omitempty" require:"true"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) SetEniInstanceId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo {
	s.EniInstanceId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) SetPrivateIpAddress(v string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) SetVswitchId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo {
	s.VswitchId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) SetIzNo(v string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo {
	s.IzNo = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo) SetMaxBandwidth(v int) *DescribeNatGatewaysResponseNatGatewaysNatGatewayNatGatewayPrivateInfo {
	s.MaxBandwidth = &v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds struct {
	// ForwardTableId
	ForwardTableId []*string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) SetForwardTableId(v []*string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds {
	s.ForwardTableId = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewaySnatTableIds struct {
	// SnatTableId
	SnatTableId []*string `json:"SnatTableId,omitempty" xml:"SnatTableId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewaySnatTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewaySnatTableIds) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewaySnatTableIds) SetSnatTableId(v []*string) *DescribeNatGatewaysResponseNatGatewaysNatGatewaySnatTableIds {
	s.SnatTableId = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds struct {
	// BandwidthPackageId
	BandwidthPackageId []*string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) SetBandwidthPackageId(v []*string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds {
	s.BandwidthPackageId = v
	return s
}

type DescribeHaVipsRequest struct {
	RegionId   *string                        `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageNumber *int                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter     []*DescribeHaVipsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeHaVipsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsRequest) SetRegionId(v string) *DescribeHaVipsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageNumber(v int) *DescribeHaVipsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageSize(v int) *DescribeHaVipsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHaVipsRequest) SetFilter(v []*DescribeHaVipsRequestFilter) *DescribeHaVipsRequest {
	s.Filter = v
	return s
}

type DescribeHaVipsRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeHaVipsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsRequestFilter) SetKey(v string) *DescribeHaVipsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeHaVipsRequestFilter) SetValue(v []*string) *DescribeHaVipsRequestFilter {
	s.Value = v
	return s
}

type DescribeHaVipsResponse struct {
	RequestId  *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount *int                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber *int                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                          `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	HaVips     *DescribeHaVipsResponseHaVips `json:"HaVips,omitempty" xml:"HaVips,omitempty" require:"true" type:"Struct"`
}

func (s DescribeHaVipsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponse) SetRequestId(v string) *DescribeHaVipsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeHaVipsResponse) SetTotalCount(v int) *DescribeHaVipsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeHaVipsResponse) SetPageNumber(v int) *DescribeHaVipsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeHaVipsResponse) SetPageSize(v int) *DescribeHaVipsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeHaVipsResponse) SetHaVips(v *DescribeHaVipsResponseHaVips) *DescribeHaVipsResponse {
	s.HaVips = v
	return s
}

type DescribeHaVipsResponseHaVips struct {
	HaVip []*DescribeHaVipsResponseHaVipsHaVip `json:"HaVip,omitempty" xml:"HaVip,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeHaVipsResponseHaVips) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVips) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVips) SetHaVip(v []*DescribeHaVipsResponseHaVipsHaVip) *DescribeHaVipsResponseHaVips {
	s.HaVip = v
	return s
}

type DescribeHaVipsResponseHaVipsHaVip struct {
	HaVipId                *string                                                  `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" require:"true"`
	RegionId               *string                                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId                  *string                                                  `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId              *string                                                  `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	IpAddress              *string                                                  `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	Status                 *string                                                  `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	MasterInstanceId       *string                                                  `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty" require:"true"`
	Description            *string                                                  `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Name                   *string                                                  `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ChargeType             *string                                                  `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	CreateTime             *string                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	AssociatedInstances    *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances    `json:"AssociatedInstances,omitempty" xml:"AssociatedInstances,omitempty" require:"true" type:"Struct"`
	AssociatedEipAddresses *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses `json:"AssociatedEipAddresses,omitempty" xml:"AssociatedEipAddresses,omitempty" require:"true" type:"Struct"`
}

func (s DescribeHaVipsResponseHaVipsHaVip) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVipsHaVip) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetHaVipId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.HaVipId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetRegionId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.RegionId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetVpcId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.VpcId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetVSwitchId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.VSwitchId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetIpAddress(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.IpAddress = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetStatus(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.Status = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetMasterInstanceId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetDescription(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.Description = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetName(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.Name = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetChargeType(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.ChargeType = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetCreateTime(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.CreateTime = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetAssociatedInstances(v *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) *DescribeHaVipsResponseHaVipsHaVip {
	s.AssociatedInstances = v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetAssociatedEipAddresses(v *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) *DescribeHaVipsResponseHaVipsHaVip {
	s.AssociatedEipAddresses = v
	return s
}

type DescribeHaVipsResponseHaVipsHaVipAssociatedInstances struct {
	// associatedInstance
	AssociatedInstance []*string `json:"associatedInstance,omitempty" xml:"associatedInstance,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) SetAssociatedInstance(v []*string) *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances {
	s.AssociatedInstance = v
	return s
}

type DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses struct {
	// associatedEipAddresse
	AssociatedEipAddresse []*string `json:"associatedEipAddresse,omitempty" xml:"associatedEipAddresse,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) SetAssociatedEipAddresse(v []*string) *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses {
	s.AssociatedEipAddresse = v
	return s
}

type DescribeForwardTableEntriesRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ForwardTableId   *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty" require:"true"`
	ForwardEntryId   *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	ExternalIp       *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort     *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	InternalIp       *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort     *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol       *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	PageNumber       *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeForwardTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesRequest) SetRegionId(v string) *DescribeForwardTableEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardTableId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardTableId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetExternalIp(v string) *DescribeForwardTableEntriesRequest {
	s.ExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetExternalPort(v string) *DescribeForwardTableEntriesRequest {
	s.ExternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetInternalIp(v string) *DescribeForwardTableEntriesRequest {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetInternalPort(v string) *DescribeForwardTableEntriesRequest {
	s.InternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetIpProtocol(v string) *DescribeForwardTableEntriesRequest {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryName(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageNumber(v int) *DescribeForwardTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageSize(v int) *DescribeForwardTableEntriesRequest {
	s.PageSize = &v
	return s
}

type DescribeForwardTableEntriesResponse struct {
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount          *int                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber          *int                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize            *int                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ForwardTableEntries *DescribeForwardTableEntriesResponseForwardTableEntries `json:"ForwardTableEntries,omitempty" xml:"ForwardTableEntries,omitempty" require:"true" type:"Struct"`
}

func (s DescribeForwardTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponse) SetRequestId(v string) *DescribeForwardTableEntriesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetTotalCount(v int) *DescribeForwardTableEntriesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetPageNumber(v int) *DescribeForwardTableEntriesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetPageSize(v int) *DescribeForwardTableEntriesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetForwardTableEntries(v *DescribeForwardTableEntriesResponseForwardTableEntries) *DescribeForwardTableEntriesResponse {
	s.ForwardTableEntries = v
	return s
}

type DescribeForwardTableEntriesResponseForwardTableEntries struct {
	ForwardTableEntry []*DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry `json:"ForwardTableEntry,omitempty" xml:"ForwardTableEntry,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeForwardTableEntriesResponseForwardTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseForwardTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntries) SetForwardTableEntry(v []*DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) *DescribeForwardTableEntriesResponseForwardTableEntries {
	s.ForwardTableEntry = v
	return s
}

type DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry struct {
	ForwardTableId   *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty" require:"true"`
	ForwardEntryId   *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty" require:"true"`
	ExternalIp       *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty" require:"true"`
	ExternalPort     *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty" require:"true"`
	IpProtocol       *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty" require:"true"`
	InternalIp       *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty" require:"true"`
	InternalPort     *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty" require:"true"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty" require:"true"`
}

func (s DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetForwardTableId(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ForwardTableId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetForwardEntryId(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetExternalIp(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetExternalPort(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ExternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetIpProtocol(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetInternalIp(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetInternalPort(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.InternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetStatus(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.Status = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetForwardEntryName(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ForwardEntryName = &v
	return s
}

type DescribeEipMonitorDataRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Period       *int    `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeEipMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataRequest) SetRegionId(v string) *DescribeEipMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetAllocationId(v string) *DescribeEipMonitorDataRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetStartTime(v string) *DescribeEipMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetEndTime(v string) *DescribeEipMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetPeriod(v int) *DescribeEipMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeEipMonitorDataResponse struct {
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EipMonitorDatas *DescribeEipMonitorDataResponseEipMonitorDatas `json:"EipMonitorDatas,omitempty" xml:"EipMonitorDatas,omitempty" require:"true" type:"Struct"`
}

func (s DescribeEipMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponse) SetRequestId(v string) *DescribeEipMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEipMonitorDataResponse) SetEipMonitorDatas(v *DescribeEipMonitorDataResponseEipMonitorDatas) *DescribeEipMonitorDataResponse {
	s.EipMonitorDatas = v
	return s
}

type DescribeEipMonitorDataResponseEipMonitorDatas struct {
	EipMonitorData []*DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData `json:"EipMonitorData,omitempty" xml:"EipMonitorData,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeEipMonitorDataResponseEipMonitorDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponseEipMonitorDatas) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatas) SetEipMonitorData(v []*DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) *DescribeEipMonitorDataResponseEipMonitorDatas {
	s.EipMonitorData = v
	return s
}

type DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData struct {
	EipRX        *int64  `json:"EipRX,omitempty" xml:"EipRX,omitempty" require:"true"`
	EipTX        *int64  `json:"EipTX,omitempty" xml:"EipTX,omitempty" require:"true"`
	EipFlow      *int    `json:"EipFlow,omitempty" xml:"EipFlow,omitempty" require:"true"`
	EipBandwidth *int    `json:"EipBandwidth,omitempty" xml:"EipBandwidth,omitempty" require:"true"`
	EipPackets   *int    `json:"EipPackets,omitempty" xml:"EipPackets,omitempty" require:"true"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty" require:"true"`
}

func (s DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipRX(v int64) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipRX = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipTX(v int64) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipTX = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipFlow(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipFlow = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipBandwidth(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipPackets(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipPackets = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetTimeStamp(v string) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.TimeStamp = &v
	return s
}

type DescribeEipAddressesRequest struct {
	RegionId               *string                              `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IncludeReservationData *bool                                `json:"IncludeReservationData,omitempty" xml:"IncludeReservationData,omitempty"`
	Status                 *string                              `json:"Status,omitempty" xml:"Status,omitempty"`
	EipAddress             *string                              `json:"EipAddress,omitempty" xml:"EipAddress,omitempty"`
	AllocationId           *string                              `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	SegmentInstanceId      *string                              `json:"SegmentInstanceId,omitempty" xml:"SegmentInstanceId,omitempty"`
	ResourceGroupId        *string                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	PageNumber             *int                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize               *int                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ISP                    *string                              `json:"ISP,omitempty" xml:"ISP,omitempty"`
	Filter                 []*DescribeEipAddressesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	LockReason             *string                              `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	AssociatedInstanceType *string                              `json:"AssociatedInstanceType,omitempty" xml:"AssociatedInstanceType,omitempty"`
	AssociatedInstanceId   *string                              `json:"AssociatedInstanceId,omitempty" xml:"AssociatedInstanceId,omitempty"`
	ChargeType             *string                              `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DryRun                 *bool                                `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s DescribeEipAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesRequest) SetRegionId(v string) *DescribeEipAddressesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetIncludeReservationData(v bool) *DescribeEipAddressesRequest {
	s.IncludeReservationData = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetStatus(v string) *DescribeEipAddressesRequest {
	s.Status = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetEipAddress(v string) *DescribeEipAddressesRequest {
	s.EipAddress = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAllocationId(v string) *DescribeEipAddressesRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetSegmentInstanceId(v string) *DescribeEipAddressesRequest {
	s.SegmentInstanceId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetResourceGroupId(v string) *DescribeEipAddressesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetPageNumber(v int) *DescribeEipAddressesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetPageSize(v int) *DescribeEipAddressesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetISP(v string) *DescribeEipAddressesRequest {
	s.ISP = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetFilter(v []*DescribeEipAddressesRequestFilter) *DescribeEipAddressesRequest {
	s.Filter = v
	return s
}

func (s *DescribeEipAddressesRequest) SetLockReason(v string) *DescribeEipAddressesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAssociatedInstanceType(v string) *DescribeEipAddressesRequest {
	s.AssociatedInstanceType = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAssociatedInstanceId(v string) *DescribeEipAddressesRequest {
	s.AssociatedInstanceId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetChargeType(v string) *DescribeEipAddressesRequest {
	s.ChargeType = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetDryRun(v bool) *DescribeEipAddressesRequest {
	s.DryRun = &v
	return s
}

type DescribeEipAddressesRequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeEipAddressesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesRequestFilter) SetKey(v string) *DescribeEipAddressesRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeEipAddressesRequestFilter) SetValue(v string) *DescribeEipAddressesRequestFilter {
	s.Value = &v
	return s
}

type DescribeEipAddressesResponse struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount   *int                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber   *int                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize     *int                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	EipAddresses *DescribeEipAddressesResponseEipAddresses `json:"EipAddresses,omitempty" xml:"EipAddresses,omitempty" require:"true" type:"Struct"`
}

func (s DescribeEipAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponse) SetRequestId(v string) *DescribeEipAddressesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetTotalCount(v int) *DescribeEipAddressesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetPageNumber(v int) *DescribeEipAddressesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetPageSize(v int) *DescribeEipAddressesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetEipAddresses(v *DescribeEipAddressesResponseEipAddresses) *DescribeEipAddressesResponse {
	s.EipAddresses = v
	return s
}

type DescribeEipAddressesResponseEipAddresses struct {
	EipAddress []*DescribeEipAddressesResponseEipAddressesEipAddress `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeEipAddressesResponseEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddresses) SetEipAddress(v []*DescribeEipAddressesResponseEipAddressesEipAddress) *DescribeEipAddressesResponseEipAddresses {
	s.EipAddress = v
	return s
}

type DescribeEipAddressesResponseEipAddressesEipAddress struct {
	RegionId                      *string                                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IpAddress                     *string                                                             `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	PrivateIpAddress              *string                                                             `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" require:"true"`
	AllocationId                  *string                                                             `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	Status                        *string                                                             `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	InstanceId                    *string                                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Bandwidth                     *string                                                             `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	EipBandwidth                  *string                                                             `json:"EipBandwidth,omitempty" xml:"EipBandwidth,omitempty" require:"true"`
	InternetChargeType            *string                                                             `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty" require:"true"`
	AllocationTime                *string                                                             `json:"AllocationTime,omitempty" xml:"AllocationTime,omitempty" require:"true"`
	InstanceType                  *string                                                             `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" require:"true"`
	InstanceRegionId              *string                                                             `json:"InstanceRegionId,omitempty" xml:"InstanceRegionId,omitempty" require:"true"`
	ChargeType                    *string                                                             `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	ExpiredTime                   *string                                                             `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	HDMonitorStatus               *string                                                             `json:"HDMonitorStatus,omitempty" xml:"HDMonitorStatus,omitempty" require:"true"`
	Name                          *string                                                             `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ISP                           *string                                                             `json:"ISP,omitempty" xml:"ISP,omitempty" require:"true"`
	Descritpion                   *string                                                             `json:"Descritpion,omitempty" xml:"Descritpion,omitempty" require:"true"`
	BandwidthPackageId            *string                                                             `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	BandwidthPackageType          *string                                                             `json:"BandwidthPackageType,omitempty" xml:"BandwidthPackageType,omitempty" require:"true"`
	BandwidthPackageBandwidth     *string                                                             `json:"BandwidthPackageBandwidth,omitempty" xml:"BandwidthPackageBandwidth,omitempty" require:"true"`
	ResourceGroupId               *string                                                             `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	HasReservationData            *string                                                             `json:"HasReservationData,omitempty" xml:"HasReservationData,omitempty" require:"true"`
	ReservationBandwidth          *string                                                             `json:"ReservationBandwidth,omitempty" xml:"ReservationBandwidth,omitempty" require:"true"`
	ReservationInternetChargeType *string                                                             `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty" require:"true"`
	ReservationActiveTime         *string                                                             `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty" require:"true"`
	ReservationOrderType          *string                                                             `json:"ReservationOrderType,omitempty" xml:"ReservationOrderType,omitempty" require:"true"`
	Mode                          *string                                                             `json:"Mode,omitempty" xml:"Mode,omitempty" require:"true"`
	DeletionProtection            *bool                                                               `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty" require:"true"`
	SecondLimited                 *bool                                                               `json:"SecondLimited,omitempty" xml:"SecondLimited,omitempty" require:"true"`
	SegmentInstanceId             *string                                                             `json:"SegmentInstanceId,omitempty" xml:"SegmentInstanceId,omitempty" require:"true"`
	Netmode                       *string                                                             `json:"Netmode,omitempty" xml:"Netmode,omitempty" require:"true"`
	OperationLocks                *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks   `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" require:"true" type:"Struct"`
	AvailableRegions              *DescribeEipAddressesResponseEipAddressesEipAddressAvailableRegions `json:"AvailableRegions,omitempty" xml:"AvailableRegions,omitempty" require:"true" type:"Struct"`
}

func (s DescribeEipAddressesResponseEipAddressesEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddressesEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetRegionId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.RegionId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetIpAddress(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetPrivateIpAddress(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetAllocationId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetStatus(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Status = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetInstanceId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.InstanceId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetBandwidth(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetEipBandwidth(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetInternetChargeType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetAllocationTime(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.AllocationTime = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetInstanceType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.InstanceType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetInstanceRegionId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.InstanceRegionId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetChargeType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ChargeType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetExpiredTime(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetHDMonitorStatus(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.HDMonitorStatus = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetName(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Name = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetISP(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ISP = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetDescritpion(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Descritpion = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetBandwidthPackageId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetBandwidthPackageType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.BandwidthPackageType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetBandwidthPackageBandwidth(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.BandwidthPackageBandwidth = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetResourceGroupId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetHasReservationData(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.HasReservationData = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetReservationBandwidth(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ReservationBandwidth = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetReservationInternetChargeType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ReservationInternetChargeType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetReservationActiveTime(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetReservationOrderType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ReservationOrderType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetMode(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Mode = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetDeletionProtection(v bool) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.DeletionProtection = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetSecondLimited(v bool) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.SecondLimited = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetSegmentInstanceId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.SegmentInstanceId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetNetmode(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Netmode = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetOperationLocks(v *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.OperationLocks = v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetAvailableRegions(v *DescribeEipAddressesResponseEipAddressesEipAddressAvailableRegions) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.AvailableRegions = v
	return s
}

type DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks struct {
	LockReason []*DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason `json:"LockReason,omitempty" xml:"LockReason,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) SetLockReason(v []*DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks {
	s.LockReason = v
	return s
}

type DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty" require:"true"`
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) SetLockReason(v string) *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason {
	s.LockReason = &v
	return s
}

type DescribeEipAddressesResponseEipAddressesEipAddressAvailableRegions struct {
	// AvailableRegion
	AvailableRegion []*string `json:"AvailableRegion,omitempty" xml:"AvailableRegion,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressAvailableRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressAvailableRegions) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddressAvailableRegions) SetAvailableRegion(v []*string) *DescribeEipAddressesResponseEipAddressesEipAddressAvailableRegions {
	s.AvailableRegion = v
	return s
}

type DescribeBandwidthPackagesRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
	NatGatewayId       *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	PageNumber         *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBandwidthPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesRequest) SetRegionId(v string) *DescribeBandwidthPackagesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetBandwidthPackageId(v string) *DescribeBandwidthPackagesRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetNatGatewayId(v string) *DescribeBandwidthPackagesRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetPageNumber(v int) *DescribeBandwidthPackagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetPageSize(v int) *DescribeBandwidthPackagesRequest {
	s.PageSize = &v
	return s
}

type DescribeBandwidthPackagesResponse struct {
	RequestId         *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalCount        *int                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	PageNumber        *int                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize          *int                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	BandwidthPackages *DescribeBandwidthPackagesResponseBandwidthPackages `json:"BandwidthPackages,omitempty" xml:"BandwidthPackages,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBandwidthPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponse) SetRequestId(v string) *DescribeBandwidthPackagesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetTotalCount(v int) *DescribeBandwidthPackagesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetPageNumber(v int) *DescribeBandwidthPackagesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetPageSize(v int) *DescribeBandwidthPackagesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetBandwidthPackages(v *DescribeBandwidthPackagesResponseBandwidthPackages) *DescribeBandwidthPackagesResponse {
	s.BandwidthPackages = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackages struct {
	BandwidthPackage []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage `json:"BandwidthPackage,omitempty" xml:"BandwidthPackage,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackages) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackages) SetBandwidthPackage(v []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) *DescribeBandwidthPackagesResponseBandwidthPackages {
	s.BandwidthPackage = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage struct {
	BandwidthPackageId *string                                                                              `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	RegionId           *string                                                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Name               *string                                                                              `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description        *string                                                                              `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	ZoneId             *string                                                                              `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	NatGatewayId       *string                                                                              `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	Bandwidth          *string                                                                              `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	InstanceChargeType *string                                                                              `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" require:"true"`
	InternetChargeType *string                                                                              `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty" require:"true"`
	BusinessStatus     *string                                                                              `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty" require:"true"`
	IpCount            *string                                                                              `json:"IpCount,omitempty" xml:"IpCount,omitempty" require:"true"`
	CreationTime       *string                                                                              `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Status             *string                                                                              `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ISP                *string                                                                              `json:"ISP,omitempty" xml:"ISP,omitempty" require:"true"`
	PublicIpAddresses  *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetBandwidthPackageId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetRegionId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetName(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Name = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetDescription(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Description = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetZoneId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.ZoneId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetNatGatewayId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetBandwidth(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Bandwidth = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetInstanceChargeType(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetInternetChargeType(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetBusinessStatus(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetIpCount(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.IpCount = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetCreationTime(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.CreationTime = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetStatus(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Status = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetISP(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.ISP = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetPublicIpAddresses(v *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.PublicIpAddresses = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses struct {
	PublicIpAddresse []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse `json:"PublicIpAddresse,omitempty" xml:"PublicIpAddresse,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) SetPublicIpAddresse(v []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses {
	s.PublicIpAddresse = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse struct {
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	IpAddress       *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	UsingStatus     *string `json:"UsingStatus,omitempty" xml:"UsingStatus,omitempty" require:"true"`
	ApAccessEnabled *bool   `json:"ApAccessEnabled,omitempty" xml:"ApAccessEnabled,omitempty" require:"true"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) SetAllocationId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.AllocationId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) SetIpAddress(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.IpAddress = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) SetUsingStatus(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.UsingStatus = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) SetApAccessEnabled(v bool) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.ApAccessEnabled = &v
	return s
}

type DescribeAccessPointsRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAccessPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsRequest) SetRegionId(v string) *DescribeAccessPointsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetPageNumber(v int) *DescribeAccessPointsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetPageSize(v int) *DescribeAccessPointsRequest {
	s.PageSize = &v
	return s
}

type DescribeAccessPointsResponse struct {
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber     *int                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize       *int                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalCount     *int                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	AccessPointSet *DescribeAccessPointsResponseAccessPointSet `json:"AccessPointSet,omitempty" xml:"AccessPointSet,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAccessPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponse) SetRequestId(v string) *DescribeAccessPointsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetPageNumber(v int) *DescribeAccessPointsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetPageSize(v int) *DescribeAccessPointsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetTotalCount(v int) *DescribeAccessPointsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetAccessPointSet(v *DescribeAccessPointsResponseAccessPointSet) *DescribeAccessPointsResponse {
	s.AccessPointSet = v
	return s
}

type DescribeAccessPointsResponseAccessPointSet struct {
	AccessPointType []*DescribeAccessPointsResponseAccessPointSetAccessPointType `json:"AccessPointType,omitempty" xml:"AccessPointType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAccessPointsResponseAccessPointSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseAccessPointSet) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseAccessPointSet) SetAccessPointType(v []*DescribeAccessPointsResponseAccessPointSetAccessPointType) *DescribeAccessPointsResponseAccessPointSet {
	s.AccessPointType = v
	return s
}

type DescribeAccessPointsResponseAccessPointSetAccessPointType struct {
	AccessPointId            *string                                                                            `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	Status                   *string                                                                            `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Type                     *string                                                                            `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	AttachedRegionNo         *string                                                                            `json:"AttachedRegionNo,omitempty" xml:"AttachedRegionNo,omitempty" require:"true"`
	Location                 *string                                                                            `json:"Location,omitempty" xml:"Location,omitempty" require:"true"`
	HostOperator             *string                                                                            `json:"HostOperator,omitempty" xml:"HostOperator,omitempty" require:"true"`
	Name                     *string                                                                            `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description              *string                                                                            `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	AccessPointFeatureModels *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModels `json:"AccessPointFeatureModels,omitempty" xml:"AccessPointFeatureModels,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointType) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointType) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetAccessPointId(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.AccessPointId = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetStatus(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Status = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetType(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Type = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetAttachedRegionNo(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.AttachedRegionNo = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetLocation(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Location = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetHostOperator(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.HostOperator = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetName(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Name = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetDescription(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Description = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetAccessPointFeatureModels(v *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModels) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.AccessPointFeatureModels = v
	return s
}

type DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModels struct {
	AccessPointFeatureModel []*DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel `json:"AccessPointFeatureModel,omitempty" xml:"AccessPointFeatureModel,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModels) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModels) SetAccessPointFeatureModel(v []*DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel) *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModels {
	s.AccessPointFeatureModel = v
	return s
}

type DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel struct {
	FeatureKey   *string `json:"FeatureKey,omitempty" xml:"FeatureKey,omitempty" require:"true"`
	FeatureValue *string `json:"FeatureValue,omitempty" xml:"FeatureValue,omitempty" require:"true"`
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel) SetFeatureKey(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel {
	s.FeatureKey = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel) SetFeatureValue(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointTypeAccessPointFeatureModelsAccessPointFeatureModel {
	s.FeatureValue = &v
	return s
}

type DeleteVSwitchRequest struct {
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchRequest) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchRequest) SetVSwitchId(v string) *DeleteVSwitchRequest {
	s.VSwitchId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetRegionId(v string) *DeleteVSwitchRequest {
	s.RegionId = &v
	return s
}

type DeleteVSwitchResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponse) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponse) SetRequestId(v string) *DeleteVSwitchResponse {
	s.RequestId = &v
	return s
}

type DeleteVpcRequest struct {
	VpcId    *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpcRequest) SetVpcId(v string) *DeleteVpcRequest {
	s.VpcId = &v
	return s
}

func (s *DeleteVpcRequest) SetRegionId(v string) *DeleteVpcRequest {
	s.RegionId = &v
	return s
}

type DeleteVpcResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpcResponse) SetRequestId(v string) *DeleteVpcResponse {
	s.RequestId = &v
	return s
}

type DeleteVirtualBorderRouterRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VbrId       *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *DeleteVirtualBorderRouterRequest) SetRegionId(v string) *DeleteVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetVbrId(v string) *DeleteVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetClientToken(v string) *DeleteVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

type DeleteVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *DeleteVirtualBorderRouterResponse) SetRequestId(v string) *DeleteVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type DeleteRouterInterfaceRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouterInterfaceRequest) SetRegionId(v string) *DeleteRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetRouterInterfaceId(v string) *DeleteRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetClientToken(v string) *DeleteRouterInterfaceRequest {
	s.ClientToken = &v
	return s
}

type DeleteRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouterInterfaceResponse) SetRequestId(v string) *DeleteRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type DeleteRouteEntryRequest struct {
	RegionId             *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouteTableId         *string                               `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	RouteEntryId         *string                               `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
	DestinationCidrBlock *string                               `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	NextHopId            *string                               `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopList          []*DeleteRouteEntryRequestNextHopList `json:"NextHopList,omitempty" xml:"NextHopList,omitempty" type:"Repeated"`
}

func (s DeleteRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryRequest) SetRegionId(v string) *DeleteRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetRouteTableId(v string) *DeleteRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetRouteEntryId(v string) *DeleteRouteEntryRequest {
	s.RouteEntryId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetDestinationCidrBlock(v string) *DeleteRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetNextHopId(v string) *DeleteRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetNextHopList(v []*DeleteRouteEntryRequestNextHopList) *DeleteRouteEntryRequest {
	s.NextHopList = v
	return s
}

type DeleteRouteEntryRequestNextHopList struct {
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty" require:"true"`
	NextHopId   *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty" require:"true"`
}

func (s DeleteRouteEntryRequestNextHopList) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryRequestNextHopList) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryRequestNextHopList) SetNextHopType(v string) *DeleteRouteEntryRequestNextHopList {
	s.NextHopType = &v
	return s
}

func (s *DeleteRouteEntryRequestNextHopList) SetNextHopId(v string) *DeleteRouteEntryRequestNextHopList {
	s.NextHopId = &v
	return s
}

type DeleteRouteEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryResponse) SetRequestId(v string) *DeleteRouteEntryResponse {
	s.RequestId = &v
	return s
}

type DeletePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeletePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *DeletePhysicalConnectionRequest) SetRegionId(v string) *DeletePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *DeletePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetClientToken(v string) *DeletePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

type DeletePhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeletePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *DeletePhysicalConnectionResponse) SetRequestId(v string) *DeletePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type DeleteNatGatewayRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	Force        *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
}

func (s DeleteNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayRequest) SetRegionId(v string) *DeleteNatGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetNatGatewayId(v string) *DeleteNatGatewayRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetForce(v bool) *DeleteNatGatewayRequest {
	s.Force = &v
	return s
}

type DeleteNatGatewayResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponse) SetRequestId(v string) *DeleteNatGatewayResponse {
	s.RequestId = &v
	return s
}

type DeleteHaVipRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	HaVipId     *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" require:"true"`
}

func (s DeleteHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipRequest) GoString() string {
	return s.String()
}

func (s *DeleteHaVipRequest) SetClientToken(v string) *DeleteHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteHaVipRequest) SetRegionId(v string) *DeleteHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHaVipRequest) SetHaVipId(v string) *DeleteHaVipRequest {
	s.HaVipId = &v
	return s
}

type DeleteHaVipResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipResponse) GoString() string {
	return s.String()
}

func (s *DeleteHaVipResponse) SetRequestId(v string) *DeleteHaVipResponse {
	s.RequestId = &v
	return s
}

type DeleteForwardEntryRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ForwardTableId *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty" require:"true"`
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty" require:"true"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s DeleteForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryRequest) SetRegionId(v string) *DeleteForwardEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetForwardTableId(v string) *DeleteForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetForwardEntryId(v string) *DeleteForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetClientToken(v string) *DeleteForwardEntryRequest {
	s.ClientToken = &v
	return s
}

type DeleteForwardEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponse) SetRequestId(v string) *DeleteForwardEntryResponse {
	s.RequestId = &v
	return s
}

type DeleteBandwidthPackageRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	Force              *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
}

func (s DeleteBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *DeleteBandwidthPackageRequest) SetRegionId(v string) *DeleteBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetBandwidthPackageId(v string) *DeleteBandwidthPackageRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetForce(v bool) *DeleteBandwidthPackageRequest {
	s.Force = &v
	return s
}

type DeleteBandwidthPackageResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *DeleteBandwidthPackageResponse) SetRequestId(v string) *DeleteBandwidthPackageResponse {
	s.RequestId = &v
	return s
}

type DeactivateRouterInterfaceRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
}

func (s DeactivateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeactivateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeactivateRouterInterfaceRequest) SetRegionId(v string) *DeactivateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetRouterInterfaceId(v string) *DeactivateRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type DeactivateRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeactivateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeactivateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeactivateRouterInterfaceResponse) SetRequestId(v string) *DeactivateRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type CreateVSwitchRequest struct {
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CidrBlock     *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty" require:"true"`
	Ipv6CidrBlock *int    `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchName   *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchRequest) GoString() string {
	return s.String()
}

func (s *CreateVSwitchRequest) SetZoneId(v string) *CreateVSwitchRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateVSwitchRequest) SetRegionId(v string) *CreateVSwitchRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVSwitchRequest) SetCidrBlock(v string) *CreateVSwitchRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVSwitchRequest) SetIpv6CidrBlock(v int) *CreateVSwitchRequest {
	s.Ipv6CidrBlock = &v
	return s
}

func (s *CreateVSwitchRequest) SetVpcId(v string) *CreateVSwitchRequest {
	s.VpcId = &v
	return s
}

func (s *CreateVSwitchRequest) SetVSwitchName(v string) *CreateVSwitchRequest {
	s.VSwitchName = &v
	return s
}

func (s *CreateVSwitchRequest) SetDescription(v string) *CreateVSwitchRequest {
	s.Description = &v
	return s
}

func (s *CreateVSwitchRequest) SetClientToken(v string) *CreateVSwitchRequest {
	s.ClientToken = &v
	return s
}

type CreateVSwitchResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
}

func (s CreateVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponse) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponse) SetRequestId(v string) *CreateVSwitchResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVSwitchResponse) SetVSwitchId(v string) *CreateVSwitchResponse {
	s.VSwitchId = &v
	return s
}

type CreateVpcRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	CidrBlock       *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Ipv6CidrBlock   *string `json:"Ipv6CidrBlock,omitempty" xml:"Ipv6CidrBlock,omitempty"`
	EnableIpv6      *bool   `json:"EnableIpv6,omitempty" xml:"EnableIpv6,omitempty"`
	VpcName         *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DryRun          *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	UserCidr        *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcRequest) GoString() string {
	return s.String()
}

func (s *CreateVpcRequest) SetRegionId(v string) *CreateVpcRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpcRequest) SetCidrBlock(v string) *CreateVpcRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVpcRequest) SetIpv6CidrBlock(v string) *CreateVpcRequest {
	s.Ipv6CidrBlock = &v
	return s
}

func (s *CreateVpcRequest) SetEnableIpv6(v bool) *CreateVpcRequest {
	s.EnableIpv6 = &v
	return s
}

func (s *CreateVpcRequest) SetVpcName(v string) *CreateVpcRequest {
	s.VpcName = &v
	return s
}

func (s *CreateVpcRequest) SetDescription(v string) *CreateVpcRequest {
	s.Description = &v
	return s
}

func (s *CreateVpcRequest) SetResourceGroupId(v string) *CreateVpcRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateVpcRequest) SetDryRun(v bool) *CreateVpcRequest {
	s.DryRun = &v
	return s
}

func (s *CreateVpcRequest) SetUserCidr(v string) *CreateVpcRequest {
	s.UserCidr = &v
	return s
}

func (s *CreateVpcRequest) SetClientToken(v string) *CreateVpcRequest {
	s.ClientToken = &v
	return s
}

type CreateVpcResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VRouterId       *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty" require:"true"`
	RouteTableId    *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
}

func (s CreateVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcResponse) GoString() string {
	return s.String()
}

func (s *CreateVpcResponse) SetRequestId(v string) *CreateVpcResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVpcResponse) SetVpcId(v string) *CreateVpcResponse {
	s.VpcId = &v
	return s
}

func (s *CreateVpcResponse) SetVRouterId(v string) *CreateVpcResponse {
	s.VRouterId = &v
	return s
}

func (s *CreateVpcResponse) SetRouteTableId(v string) *CreateVpcResponse {
	s.RouteTableId = &v
	return s
}

func (s *CreateVpcResponse) SetResourceGroupId(v string) *CreateVpcResponse {
	s.ResourceGroupId = &v
	return s
}

type CreateVirtualBorderRouterRequest struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PhysicalConnectionId  *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	VbrOwnerId            *int64  `json:"VbrOwnerId,omitempty" xml:"VbrOwnerId,omitempty"`
	VlanId                *int    `json:"VlanId,omitempty" xml:"VlanId,omitempty" require:"true"`
	CircuitCode           *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	LocalGatewayIp        *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty"`
	PeerGatewayIp         *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty"`
	PeeringSubnetMask     *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	LocalIpv6GatewayIp    *string `json:"LocalIpv6GatewayIp,omitempty" xml:"LocalIpv6GatewayIp,omitempty"`
	PeerIpv6GatewayIp     *string `json:"PeerIpv6GatewayIp,omitempty" xml:"PeerIpv6GatewayIp,omitempty"`
	PeeringIpv6SubnetMask *string `json:"PeeringIpv6SubnetMask,omitempty" xml:"PeeringIpv6SubnetMask,omitempty"`
	EnableIpv6            *bool   `json:"EnableIpv6,omitempty" xml:"EnableIpv6,omitempty"`
}

func (s CreateVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *CreateVirtualBorderRouterRequest) SetRegionId(v string) *CreateVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPhysicalConnectionId(v string) *CreateVirtualBorderRouterRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetVbrOwnerId(v int64) *CreateVirtualBorderRouterRequest {
	s.VbrOwnerId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetVlanId(v int) *CreateVirtualBorderRouterRequest {
	s.VlanId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetCircuitCode(v string) *CreateVirtualBorderRouterRequest {
	s.CircuitCode = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetLocalGatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.LocalGatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeerGatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.PeerGatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeeringSubnetMask(v string) *CreateVirtualBorderRouterRequest {
	s.PeeringSubnetMask = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetDescription(v string) *CreateVirtualBorderRouterRequest {
	s.Description = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetName(v string) *CreateVirtualBorderRouterRequest {
	s.Name = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetClientToken(v string) *CreateVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetLocalIpv6GatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.LocalIpv6GatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeerIpv6GatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.PeerIpv6GatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeeringIpv6SubnetMask(v string) *CreateVirtualBorderRouterRequest {
	s.PeeringIpv6SubnetMask = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetEnableIpv6(v bool) *CreateVirtualBorderRouterRequest {
	s.EnableIpv6 = &v
	return s
}

type CreateVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VbrId     *string `json:"VbrId,omitempty" xml:"VbrId,omitempty" require:"true"`
}

func (s CreateVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *CreateVirtualBorderRouterResponse) SetRequestId(v string) *CreateVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVirtualBorderRouterResponse) SetVbrId(v string) *CreateVirtualBorderRouterResponse {
	s.VbrId = &v
	return s
}

type CreateRouterInterfaceRequest struct {
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Role                     *string `json:"Role,omitempty" xml:"Role,omitempty" require:"true"`
	OppositeRegionId         *string `json:"OppositeRegionId,omitempty" xml:"OppositeRegionId,omitempty" require:"true"`
	Spec                     *string `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	RouterType               *string `json:"RouterType,omitempty" xml:"RouterType,omitempty" require:"true"`
	RouterId                 *string `json:"RouterId,omitempty" xml:"RouterId,omitempty" require:"true"`
	OppositeInterfaceId      *string `json:"OppositeInterfaceId,omitempty" xml:"OppositeInterfaceId,omitempty"`
	OppositeRouterId         *string `json:"OppositeRouterId,omitempty" xml:"OppositeRouterId,omitempty"`
	OppositeRouterType       *string `json:"OppositeRouterType,omitempty" xml:"OppositeRouterType,omitempty"`
	OppositeInterfaceOwnerId *string `json:"OppositeInterfaceOwnerId,omitempty" xml:"OppositeInterfaceOwnerId,omitempty"`
	HealthCheckSourceIp      *string `json:"HealthCheckSourceIp,omitempty" xml:"HealthCheckSourceIp,omitempty"`
	HealthCheckTargetIp      *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty"`
	AccessPointId            *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	OppositeAccessPointId    *string `json:"OppositeAccessPointId,omitempty" xml:"OppositeAccessPointId,omitempty"`
	Description              *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Period                   *int    `json:"Period,omitempty" xml:"Period,omitempty"`
	InstanceChargeType       *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	AutoPay                  *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	PricingCycle             *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	ClientToken              *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *CreateRouterInterfaceRequest) SetRegionId(v string) *CreateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRole(v string) *CreateRouterInterfaceRequest {
	s.Role = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRegionId(v string) *CreateRouterInterfaceRequest {
	s.OppositeRegionId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetSpec(v string) *CreateRouterInterfaceRequest {
	s.Spec = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRouterType(v string) *CreateRouterInterfaceRequest {
	s.RouterType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRouterId(v string) *CreateRouterInterfaceRequest {
	s.RouterId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeInterfaceId(v string) *CreateRouterInterfaceRequest {
	s.OppositeInterfaceId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRouterId(v string) *CreateRouterInterfaceRequest {
	s.OppositeRouterId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRouterType(v string) *CreateRouterInterfaceRequest {
	s.OppositeRouterType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeInterfaceOwnerId(v string) *CreateRouterInterfaceRequest {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetHealthCheckSourceIp(v string) *CreateRouterInterfaceRequest {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetHealthCheckTargetIp(v string) *CreateRouterInterfaceRequest {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetAccessPointId(v string) *CreateRouterInterfaceRequest {
	s.AccessPointId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeAccessPointId(v string) *CreateRouterInterfaceRequest {
	s.OppositeAccessPointId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetDescription(v string) *CreateRouterInterfaceRequest {
	s.Description = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetName(v string) *CreateRouterInterfaceRequest {
	s.Name = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetPeriod(v int) *CreateRouterInterfaceRequest {
	s.Period = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetInstanceChargeType(v string) *CreateRouterInterfaceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetAutoPay(v bool) *CreateRouterInterfaceRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetPricingCycle(v string) *CreateRouterInterfaceRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetClientToken(v string) *CreateRouterInterfaceRequest {
	s.ClientToken = &v
	return s
}

type CreateRouterInterfaceResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
	OrderId           *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s CreateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *CreateRouterInterfaceResponse) SetRequestId(v string) *CreateRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateRouterInterfaceResponse) SetRouterInterfaceId(v string) *CreateRouterInterfaceResponse {
	s.RouterInterfaceId = &v
	return s
}

func (s *CreateRouterInterfaceResponse) SetOrderId(v int64) *CreateRouterInterfaceResponse {
	s.OrderId = &v
	return s
}

type CreateRouteEntryRequest struct {
	RegionId             *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouteTableId         *string                               `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" require:"true"`
	DestinationCidrBlock *string                               `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty" require:"true"`
	NextHopId            *string                               `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	ClientToken          *string                               `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RouteEntryName       *string                               `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	Description          *string                               `json:"Description,omitempty" xml:"Description,omitempty"`
	NextHopType          *string                               `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	NextHopList          []*CreateRouteEntryRequestNextHopList `json:"NextHopList,omitempty" xml:"NextHopList,omitempty" type:"Repeated"`
}

func (s CreateRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryRequest) SetRegionId(v string) *CreateRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetRouteTableId(v string) *CreateRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetDestinationCidrBlock(v string) *CreateRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopId(v string) *CreateRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetClientToken(v string) *CreateRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateRouteEntryRequest) SetRouteEntryName(v string) *CreateRouteEntryRequest {
	s.RouteEntryName = &v
	return s
}

func (s *CreateRouteEntryRequest) SetDescription(v string) *CreateRouteEntryRequest {
	s.Description = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopType(v string) *CreateRouteEntryRequest {
	s.NextHopType = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopList(v []*CreateRouteEntryRequestNextHopList) *CreateRouteEntryRequest {
	s.NextHopList = v
	return s
}

type CreateRouteEntryRequestNextHopList struct {
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty" require:"true"`
	NextHopId   *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty" require:"true"`
	Weight      *int    `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
}

func (s CreateRouteEntryRequestNextHopList) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryRequestNextHopList) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryRequestNextHopList) SetNextHopType(v string) *CreateRouteEntryRequestNextHopList {
	s.NextHopType = &v
	return s
}

func (s *CreateRouteEntryRequestNextHopList) SetNextHopId(v string) *CreateRouteEntryRequestNextHopList {
	s.NextHopId = &v
	return s
}

func (s *CreateRouteEntryRequestNextHopList) SetWeight(v int) *CreateRouteEntryRequestNextHopList {
	s.Weight = &v
	return s
}

type CreateRouteEntryResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryResponse) SetRequestId(v string) *CreateRouteEntryResponse {
	s.RequestId = &v
	return s
}

type CreatePhysicalConnectionRequest struct {
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	AccessPointId                 *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty" require:"true"`
	Type                          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	LineOperator                  *string `json:"LineOperator,omitempty" xml:"LineOperator,omitempty" require:"true"`
	Bandwidth                     *int    `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	PeerLocation                  *string `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty" require:"true"`
	PortType                      *string `json:"PortType,omitempty" xml:"PortType,omitempty"`
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId,omitempty" xml:"RedundantPhysicalConnectionId,omitempty"`
	Description                   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	CircuitCode                   *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	ClientToken                   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CreatePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionRequest) SetRegionId(v string) *CreatePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetAccessPointId(v string) *CreatePhysicalConnectionRequest {
	s.AccessPointId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetType(v string) *CreatePhysicalConnectionRequest {
	s.Type = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetLineOperator(v string) *CreatePhysicalConnectionRequest {
	s.LineOperator = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetBandwidth(v int) *CreatePhysicalConnectionRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetPeerLocation(v string) *CreatePhysicalConnectionRequest {
	s.PeerLocation = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetPortType(v string) *CreatePhysicalConnectionRequest {
	s.PortType = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetRedundantPhysicalConnectionId(v string) *CreatePhysicalConnectionRequest {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetDescription(v string) *CreatePhysicalConnectionRequest {
	s.Description = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetName(v string) *CreatePhysicalConnectionRequest {
	s.Name = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetCircuitCode(v string) *CreatePhysicalConnectionRequest {
	s.CircuitCode = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetClientToken(v string) *CreatePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

type CreatePhysicalConnectionResponse struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
}

func (s CreatePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionResponse) SetRequestId(v string) *CreatePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

func (s *CreatePhysicalConnectionResponse) SetPhysicalConnectionId(v string) *CreatePhysicalConnectionResponse {
	s.PhysicalConnectionId = &v
	return s
}

type CreateNatGatewayRequest struct {
	RegionId           *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId              *string                                    `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	Name               *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Description        *string                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken        *string                                    `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Spec               *string                                    `json:"Spec,omitempty" xml:"Spec,omitempty"`
	BandwidthPackage   []*CreateNatGatewayRequestBandwidthPackage `json:"BandwidthPackage,omitempty" xml:"BandwidthPackage,omitempty" type:"Repeated"`
	InstanceChargeType *string                                    `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	PricingCycle       *string                                    `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	Duration           *string                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AutoPay            *bool                                      `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	VSwitchId          *string                                    `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NatType            *string                                    `json:"NatType,omitempty" xml:"NatType,omitempty"`
	InternetChargeType *string                                    `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
}

func (s CreateNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequest) SetRegionId(v string) *CreateNatGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetVpcId(v string) *CreateNatGatewayRequest {
	s.VpcId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetName(v string) *CreateNatGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateNatGatewayRequest) SetDescription(v string) *CreateNatGatewayRequest {
	s.Description = &v
	return s
}

func (s *CreateNatGatewayRequest) SetClientToken(v string) *CreateNatGatewayRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateNatGatewayRequest) SetSpec(v string) *CreateNatGatewayRequest {
	s.Spec = &v
	return s
}

func (s *CreateNatGatewayRequest) SetBandwidthPackage(v []*CreateNatGatewayRequestBandwidthPackage) *CreateNatGatewayRequest {
	s.BandwidthPackage = v
	return s
}

func (s *CreateNatGatewayRequest) SetInstanceChargeType(v string) *CreateNatGatewayRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateNatGatewayRequest) SetPricingCycle(v string) *CreateNatGatewayRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateNatGatewayRequest) SetDuration(v string) *CreateNatGatewayRequest {
	s.Duration = &v
	return s
}

func (s *CreateNatGatewayRequest) SetAutoPay(v bool) *CreateNatGatewayRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateNatGatewayRequest) SetVSwitchId(v string) *CreateNatGatewayRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetNatType(v string) *CreateNatGatewayRequest {
	s.NatType = &v
	return s
}

func (s *CreateNatGatewayRequest) SetInternetChargeType(v string) *CreateNatGatewayRequest {
	s.InternetChargeType = &v
	return s
}

type CreateNatGatewayRequestBandwidthPackage struct {
	IpCount   *int    `json:"IpCount,omitempty" xml:"IpCount,omitempty" require:"true"`
	Bandwidth *int    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" require:"true"`
	Zone      *string `json:"Zone,omitempty" xml:"Zone,omitempty" require:"true"`
	ISP       *string `json:"ISP,omitempty" xml:"ISP,omitempty" require:"true"`
}

func (s CreateNatGatewayRequestBandwidthPackage) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequestBandwidthPackage) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetIpCount(v int) *CreateNatGatewayRequestBandwidthPackage {
	s.IpCount = &v
	return s
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetBandwidth(v int) *CreateNatGatewayRequestBandwidthPackage {
	s.Bandwidth = &v
	return s
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetZone(v string) *CreateNatGatewayRequestBandwidthPackage {
	s.Zone = &v
	return s
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetISP(v string) *CreateNatGatewayRequestBandwidthPackage {
	s.ISP = &v
	return s
}

type CreateNatGatewayResponse struct {
	RequestId           *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NatGatewayId        *string                                      `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" require:"true"`
	ForwardTableIds     *CreateNatGatewayResponseForwardTableIds     `json:"ForwardTableIds,omitempty" xml:"ForwardTableIds,omitempty" require:"true" type:"Struct"`
	SnatTableIds        *CreateNatGatewayResponseSnatTableIds        `json:"SnatTableIds,omitempty" xml:"SnatTableIds,omitempty" require:"true" type:"Struct"`
	BandwidthPackageIds *CreateNatGatewayResponseBandwidthPackageIds `json:"BandwidthPackageIds,omitempty" xml:"BandwidthPackageIds,omitempty" require:"true" type:"Struct"`
}

func (s CreateNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponse) SetRequestId(v string) *CreateNatGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *CreateNatGatewayResponse) SetNatGatewayId(v string) *CreateNatGatewayResponse {
	s.NatGatewayId = &v
	return s
}

func (s *CreateNatGatewayResponse) SetForwardTableIds(v *CreateNatGatewayResponseForwardTableIds) *CreateNatGatewayResponse {
	s.ForwardTableIds = v
	return s
}

func (s *CreateNatGatewayResponse) SetSnatTableIds(v *CreateNatGatewayResponseSnatTableIds) *CreateNatGatewayResponse {
	s.SnatTableIds = v
	return s
}

func (s *CreateNatGatewayResponse) SetBandwidthPackageIds(v *CreateNatGatewayResponseBandwidthPackageIds) *CreateNatGatewayResponse {
	s.BandwidthPackageIds = v
	return s
}

type CreateNatGatewayResponseForwardTableIds struct {
	ForwardTableId []*string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty" require:"true" type:"Repeated"`
}

func (s CreateNatGatewayResponseForwardTableIds) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseForwardTableIds) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseForwardTableIds) SetForwardTableId(v []*string) *CreateNatGatewayResponseForwardTableIds {
	s.ForwardTableId = v
	return s
}

type CreateNatGatewayResponseSnatTableIds struct {
	SnatTableId []*string `json:"SnatTableId,omitempty" xml:"SnatTableId,omitempty" require:"true" type:"Repeated"`
}

func (s CreateNatGatewayResponseSnatTableIds) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseSnatTableIds) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseSnatTableIds) SetSnatTableId(v []*string) *CreateNatGatewayResponseSnatTableIds {
	s.SnatTableId = v
	return s
}

type CreateNatGatewayResponseBandwidthPackageIds struct {
	BandwidthPackageId []*string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true" type:"Repeated"`
}

func (s CreateNatGatewayResponseBandwidthPackageIds) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseBandwidthPackageIds) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseBandwidthPackageIds) SetBandwidthPackageId(v []*string) *CreateNatGatewayResponseBandwidthPackageIds {
	s.BandwidthPackageId = v
	return s
}

type CreateHaVipRequest struct {
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VSwitchId   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	IpAddress   *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s CreateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipRequest) GoString() string {
	return s.String()
}

func (s *CreateHaVipRequest) SetName(v string) *CreateHaVipRequest {
	s.Name = &v
	return s
}

func (s *CreateHaVipRequest) SetClientToken(v string) *CreateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateHaVipRequest) SetRegionId(v string) *CreateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHaVipRequest) SetVSwitchId(v string) *CreateHaVipRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateHaVipRequest) SetIpAddress(v string) *CreateHaVipRequest {
	s.IpAddress = &v
	return s
}

func (s *CreateHaVipRequest) SetDescription(v string) *CreateHaVipRequest {
	s.Description = &v
	return s
}

type CreateHaVipResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	HaVipId   *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" require:"true"`
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
}

func (s CreateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipResponse) GoString() string {
	return s.String()
}

func (s *CreateHaVipResponse) SetRequestId(v string) *CreateHaVipResponse {
	s.RequestId = &v
	return s
}

func (s *CreateHaVipResponse) SetHaVipId(v string) *CreateHaVipResponse {
	s.HaVipId = &v
	return s
}

func (s *CreateHaVipResponse) SetIpAddress(v string) *CreateHaVipResponse {
	s.IpAddress = &v
	return s
}

type CreateForwardEntryRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ForwardTableId   *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty" require:"true"`
	ExternalIp       *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty" require:"true"`
	ExternalPort     *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty" require:"true"`
	InternalIp       *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty" require:"true"`
	InternalPort     *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty" require:"true"`
	IpProtocol       *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty" require:"true"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	PortBreak        *bool   `json:"PortBreak,omitempty" xml:"PortBreak,omitempty"`
}

func (s CreateForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryRequest) SetRegionId(v string) *CreateForwardEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetForwardTableId(v string) *CreateForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalIp(v string) *CreateForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalPort(v string) *CreateForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalIp(v string) *CreateForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalPort(v string) *CreateForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetIpProtocol(v string) *CreateForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

func (s *CreateForwardEntryRequest) SetForwardEntryName(v string) *CreateForwardEntryRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *CreateForwardEntryRequest) SetClientToken(v string) *CreateForwardEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateForwardEntryRequest) SetPortBreak(v bool) *CreateForwardEntryRequest {
	s.PortBreak = &v
	return s
}

type CreateForwardEntryResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty" require:"true"`
}

func (s CreateForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponse) SetRequestId(v string) *CreateForwardEntryResponse {
	s.RequestId = &v
	return s
}

func (s *CreateForwardEntryResponse) SetForwardEntryId(v string) *CreateForwardEntryResponse {
	s.ForwardEntryId = &v
	return s
}

type ConnectRouterInterfaceRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
}

func (s ConnectRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConnectRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *ConnectRouterInterfaceRequest) SetRegionId(v string) *ConnectRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetRouterInterfaceId(v string) *ConnectRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type ConnectRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ConnectRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConnectRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *ConnectRouterInterfaceResponse) SetRequestId(v string) *ConnectRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type CancelPhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty" require:"true"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CancelPhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelPhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *CancelPhysicalConnectionRequest) SetRegionId(v string) *CancelPhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetPhysicalConnectionId(v string) *CancelPhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetClientToken(v string) *CancelPhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

type CancelPhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CancelPhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelPhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *CancelPhysicalConnectionResponse) SetRequestId(v string) *CancelPhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type AssociateHaVipRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	HaVipId     *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" require:"true"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s AssociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *AssociateHaVipRequest) SetClientToken(v string) *AssociateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *AssociateHaVipRequest) SetRegionId(v string) *AssociateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateHaVipRequest) SetHaVipId(v string) *AssociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *AssociateHaVipRequest) SetInstanceId(v string) *AssociateHaVipRequest {
	s.InstanceId = &v
	return s
}

type AssociateHaVipResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AssociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *AssociateHaVipResponse) SetRequestId(v string) *AssociateHaVipResponse {
	s.RequestId = &v
	return s
}

type AssociateEipAddressRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId     *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceType     *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceRegionId *string `json:"InstanceRegionId,omitempty" xml:"InstanceRegionId,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	Mode             *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AssociateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AssociateEipAddressRequest) SetRegionId(v string) *AssociateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetAllocationId(v string) *AssociateEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetInstanceId(v string) *AssociateEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetInstanceType(v string) *AssociateEipAddressRequest {
	s.InstanceType = &v
	return s
}

func (s *AssociateEipAddressRequest) SetInstanceRegionId(v string) *AssociateEipAddressRequest {
	s.InstanceRegionId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetPrivateIpAddress(v string) *AssociateEipAddressRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *AssociateEipAddressRequest) SetMode(v string) *AssociateEipAddressRequest {
	s.Mode = &v
	return s
}

func (s *AssociateEipAddressRequest) SetClientToken(v string) *AssociateEipAddressRequest {
	s.ClientToken = &v
	return s
}

type AssociateEipAddressResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AssociateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AssociateEipAddressResponse) SetRequestId(v string) *AssociateEipAddressResponse {
	s.RequestId = &v
	return s
}

type AllocateEipAddressRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Bandwidth          *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Period             *int    `json:"Period,omitempty" xml:"Period,omitempty"`
	ISP                *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	ActivityId         *int64  `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	Netmode            *string `json:"Netmode,omitempty" xml:"Netmode,omitempty"`
	AutoPay            *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	PricingCycle       *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AllocateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressRequest) SetRegionId(v string) *AllocateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetBandwidth(v string) *AllocateEipAddressRequest {
	s.Bandwidth = &v
	return s
}

func (s *AllocateEipAddressRequest) SetPeriod(v int) *AllocateEipAddressRequest {
	s.Period = &v
	return s
}

func (s *AllocateEipAddressRequest) SetISP(v string) *AllocateEipAddressRequest {
	s.ISP = &v
	return s
}

func (s *AllocateEipAddressRequest) SetActivityId(v int64) *AllocateEipAddressRequest {
	s.ActivityId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetNetmode(v string) *AllocateEipAddressRequest {
	s.Netmode = &v
	return s
}

func (s *AllocateEipAddressRequest) SetAutoPay(v bool) *AllocateEipAddressRequest {
	s.AutoPay = &v
	return s
}

func (s *AllocateEipAddressRequest) SetPricingCycle(v string) *AllocateEipAddressRequest {
	s.PricingCycle = &v
	return s
}

func (s *AllocateEipAddressRequest) SetInstanceChargeType(v string) *AllocateEipAddressRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *AllocateEipAddressRequest) SetInternetChargeType(v string) *AllocateEipAddressRequest {
	s.InternetChargeType = &v
	return s
}

func (s *AllocateEipAddressRequest) SetResourceGroupId(v string) *AllocateEipAddressRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetClientToken(v string) *AllocateEipAddressRequest {
	s.ClientToken = &v
	return s
}

type AllocateEipAddressResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" require:"true"`
	EipAddress      *string `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" require:"true"`
	OrderId         *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
}

func (s AllocateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressResponse) SetRequestId(v string) *AllocateEipAddressResponse {
	s.RequestId = &v
	return s
}

func (s *AllocateEipAddressResponse) SetAllocationId(v string) *AllocateEipAddressResponse {
	s.AllocationId = &v
	return s
}

func (s *AllocateEipAddressResponse) SetEipAddress(v string) *AllocateEipAddressResponse {
	s.EipAddress = &v
	return s
}

func (s *AllocateEipAddressResponse) SetOrderId(v int64) *AllocateEipAddressResponse {
	s.OrderId = &v
	return s
}

func (s *AllocateEipAddressResponse) SetResourceGroupId(v string) *AllocateEipAddressResponse {
	s.ResourceGroupId = &v
	return s
}

type AddBandwidthPackageIpsRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BandwidthPackageId *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty" require:"true"`
	IpCount            *string `json:"IpCount,omitempty" xml:"IpCount,omitempty" require:"true"`
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AddBandwidthPackageIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBandwidthPackageIpsRequest) GoString() string {
	return s.String()
}

func (s *AddBandwidthPackageIpsRequest) SetRegionId(v string) *AddBandwidthPackageIpsRequest {
	s.RegionId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetBandwidthPackageId(v string) *AddBandwidthPackageIpsRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetIpCount(v string) *AddBandwidthPackageIpsRequest {
	s.IpCount = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetClientToken(v string) *AddBandwidthPackageIpsRequest {
	s.ClientToken = &v
	return s
}

type AddBandwidthPackageIpsResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AddBandwidthPackageIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBandwidthPackageIpsResponse) GoString() string {
	return s.String()
}

func (s *AddBandwidthPackageIpsResponse) SetRequestId(v string) *AddBandwidthPackageIpsResponse {
	s.RequestId = &v
	return s
}

type ActivateRouterInterfaceRequest struct {
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty" require:"true"`
}

func (s ActivateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ActivateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *ActivateRouterInterfaceRequest) SetRegionId(v string) *ActivateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetRouterInterfaceId(v string) *ActivateRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type ActivateRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ActivateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ActivateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *ActivateRouterInterfaceResponse) SetRequestId(v string) *ActivateRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type Client struct {
	rpc.Client
}

func NewClient(config *rpc.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *rpc.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("vpc.aliyuncs.com"),
		"cn-beijing":                  tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("vpc.aliyuncs.com"),
		"cn-shanghai":                 tea.String("vpc.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("vpc.aliyuncs.com"),
		"cn-hongkong":                 tea.String("vpc.aliyuncs.com"),
		"ap-southeast-1":              tea.String("vpc.aliyuncs.com"),
		"us-west-1":                   tea.String("vpc.aliyuncs.com"),
		"us-east-1":                   tea.String("vpc.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("vpc.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("vpc.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("vpc.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("vpc.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("vpc.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("vpc.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("vpc.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("vpc.aliyuncs.com"),
		"cn-edge-1":                   tea.String("vpc-nebula.cn-qingdao-nebula.aliyuncs.com"),
		"cn-fujian":                   tea.String("vpc.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("vpc.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("vpc.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("vpc.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("vpc-nebula.cn-qingdao-nebula.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("vpc.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("vpc.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("vpc.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("vpc.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("vpc.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("vpc.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("vpc.aliyuncs.com"),
		"cn-wuhan":                    tea.String("vpc.aliyuncs.com"),
		"cn-yushanfang":               tea.String("vpc.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("vpc.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("vpc.cn-zhangjiakou.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("vpc-nebula.cn-qingdao-nebula.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("vpc-nebula.cn-shenzhen-cloudstone.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("vpc.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("vpc"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) ListPhysicalConnectionFeaturesWithOptions(request *ListPhysicalConnectionFeaturesRequest, runtime *util.RuntimeOptions) (_result *ListPhysicalConnectionFeaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListPhysicalConnectionFeaturesResponse{}
	_body, _err := client.DoRequest(tea.String("ListPhysicalConnectionFeatures"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPhysicalConnectionFeatures(request *ListPhysicalConnectionFeaturesRequest) (_result *ListPhysicalConnectionFeaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPhysicalConnectionFeaturesResponse{}
	_body, _err := client.ListPhysicalConnectionFeaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNatGatewayEcsMetricWithOptions(request *ListNatGatewayEcsMetricRequest, runtime *util.RuntimeOptions) (_result *ListNatGatewayEcsMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListNatGatewayEcsMetricResponse{}
	_body, _err := client.DoRequest(tea.String("ListNatGatewayEcsMetric"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNatGatewayEcsMetric(request *ListNatGatewayEcsMetricRequest) (_result *ListNatGatewayEcsMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNatGatewayEcsMetricResponse{}
	_body, _err := client.ListNatGatewayEcsMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableNatGatewayEcsMetricWithOptions(request *DisableNatGatewayEcsMetricRequest, runtime *util.RuntimeOptions) (_result *DisableNatGatewayEcsMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableNatGatewayEcsMetricResponse{}
	_body, _err := client.DoRequest(tea.String("DisableNatGatewayEcsMetric"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableNatGatewayEcsMetric(request *DisableNatGatewayEcsMetricRequest) (_result *DisableNatGatewayEcsMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableNatGatewayEcsMetricResponse{}
	_body, _err := client.DisableNatGatewayEcsMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableNatGatewayEcsMetricWithOptions(request *EnableNatGatewayEcsMetricRequest, runtime *util.RuntimeOptions) (_result *EnableNatGatewayEcsMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableNatGatewayEcsMetricResponse{}
	_body, _err := client.DoRequest(tea.String("EnableNatGatewayEcsMetric"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableNatGatewayEcsMetric(request *EnableNatGatewayEcsMetricRequest) (_result *EnableNatGatewayEcsMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableNatGatewayEcsMetricResponse{}
	_body, _err := client.EnableNatGatewayEcsMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDhcpOptionsSetWithOptions(request *CreateDhcpOptionsSetRequest, runtime *util.RuntimeOptions) (_result *CreateDhcpOptionsSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDhcpOptionsSetResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDhcpOptionsSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDhcpOptionsSet(request *CreateDhcpOptionsSetRequest) (_result *CreateDhcpOptionsSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDhcpOptionsSetResponse{}
	_body, _err := client.CreateDhcpOptionsSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceVpcDhcpOptionsSetWithOptions(request *ReplaceVpcDhcpOptionsSetRequest, runtime *util.RuntimeOptions) (_result *ReplaceVpcDhcpOptionsSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReplaceVpcDhcpOptionsSetResponse{}
	_body, _err := client.DoRequest(tea.String("ReplaceVpcDhcpOptionsSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceVpcDhcpOptionsSet(request *ReplaceVpcDhcpOptionsSetRequest) (_result *ReplaceVpcDhcpOptionsSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceVpcDhcpOptionsSetResponse{}
	_body, _err := client.ReplaceVpcDhcpOptionsSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDhcpOptionsSetAttributeWithOptions(request *UpdateDhcpOptionsSetAttributeRequest, runtime *util.RuntimeOptions) (_result *UpdateDhcpOptionsSetAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDhcpOptionsSetAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateDhcpOptionsSetAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDhcpOptionsSetAttribute(request *UpdateDhcpOptionsSetAttributeRequest) (_result *UpdateDhcpOptionsSetAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDhcpOptionsSetAttributeResponse{}
	_body, _err := client.UpdateDhcpOptionsSetAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDhcpOptionsSetWithOptions(request *GetDhcpOptionsSetRequest, runtime *util.RuntimeOptions) (_result *GetDhcpOptionsSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDhcpOptionsSetResponse{}
	_body, _err := client.DoRequest(tea.String("GetDhcpOptionsSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDhcpOptionsSet(request *GetDhcpOptionsSetRequest) (_result *GetDhcpOptionsSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDhcpOptionsSetResponse{}
	_body, _err := client.GetDhcpOptionsSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDhcpOptionsSetsWithOptions(request *ListDhcpOptionsSetsRequest, runtime *util.RuntimeOptions) (_result *ListDhcpOptionsSetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDhcpOptionsSetsResponse{}
	_body, _err := client.DoRequest(tea.String("ListDhcpOptionsSets"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDhcpOptionsSets(request *ListDhcpOptionsSetsRequest) (_result *ListDhcpOptionsSetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDhcpOptionsSetsResponse{}
	_body, _err := client.ListDhcpOptionsSetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachDhcpOptionsSetFromVpcWithOptions(request *DetachDhcpOptionsSetFromVpcRequest, runtime *util.RuntimeOptions) (_result *DetachDhcpOptionsSetFromVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetachDhcpOptionsSetFromVpcResponse{}
	_body, _err := client.DoRequest(tea.String("DetachDhcpOptionsSetFromVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachDhcpOptionsSetFromVpc(request *DetachDhcpOptionsSetFromVpcRequest) (_result *DetachDhcpOptionsSetFromVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDhcpOptionsSetFromVpcResponse{}
	_body, _err := client.DetachDhcpOptionsSetFromVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachDhcpOptionsSetToVpcWithOptions(request *AttachDhcpOptionsSetToVpcRequest, runtime *util.RuntimeOptions) (_result *AttachDhcpOptionsSetToVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AttachDhcpOptionsSetToVpcResponse{}
	_body, _err := client.DoRequest(tea.String("AttachDhcpOptionsSetToVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachDhcpOptionsSetToVpc(request *AttachDhcpOptionsSetToVpcRequest) (_result *AttachDhcpOptionsSetToVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDhcpOptionsSetToVpcResponse{}
	_body, _err := client.AttachDhcpOptionsSetToVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDhcpOptionsSetWithOptions(request *DeleteDhcpOptionsSetRequest, runtime *util.RuntimeOptions) (_result *DeleteDhcpOptionsSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDhcpOptionsSetResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDhcpOptionsSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDhcpOptionsSet(request *DeleteDhcpOptionsSetRequest) (_result *DeleteDhcpOptionsSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDhcpOptionsSetResponse{}
	_body, _err := client.DeleteDhcpOptionsSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RenewInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttributeWithOptions(request *DescribeInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceAutoRenewAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttribute(request *DescribeInstanceAutoRenewAttributeRequest) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DescribeInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewalAttributeWithOptions(request *ModifyInstanceAutoRenewalAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRenewalAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceAutoRenewalAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewalAttribute(request *ModifyInstanceAutoRenewalAttributeRequest) (_result *ModifyInstanceAutoRenewalAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.ModifyInstanceAutoRenewalAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseEipSegmentAddressWithOptions(request *ReleaseEipSegmentAddressRequest, runtime *util.RuntimeOptions) (_result *ReleaseEipSegmentAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseEipSegmentAddressResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseEipSegmentAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseEipSegmentAddress(request *ReleaseEipSegmentAddressRequest) (_result *ReleaseEipSegmentAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseEipSegmentAddressResponse{}
	_body, _err := client.ReleaseEipSegmentAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipSegmentWithOptions(request *DescribeEipSegmentRequest, runtime *util.RuntimeOptions) (_result *DescribeEipSegmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEipSegmentResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEipSegment"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipSegment(request *DescribeEipSegmentRequest) (_result *DescribeEipSegmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipSegmentResponse{}
	_body, _err := client.DescribeEipSegmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateEipSegmentAddressWithOptions(request *AllocateEipSegmentAddressRequest, runtime *util.RuntimeOptions) (_result *AllocateEipSegmentAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateEipSegmentAddressResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateEipSegmentAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateEipSegmentAddress(request *AllocateEipSegmentAddressRequest) (_result *AllocateEipSegmentAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateEipSegmentAddressResponse{}
	_body, _err := client.AllocateEipSegmentAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateVpcCidrBlockWithOptions(request *UnassociateVpcCidrBlockRequest, runtime *util.RuntimeOptions) (_result *UnassociateVpcCidrBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateVpcCidrBlockResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateVpcCidrBlock"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateVpcCidrBlock(request *UnassociateVpcCidrBlockRequest) (_result *UnassociateVpcCidrBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateVpcCidrBlockResponse{}
	_body, _err := client.UnassociateVpcCidrBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateVpcCidrBlockWithOptions(request *AssociateVpcCidrBlockRequest, runtime *util.RuntimeOptions) (_result *AssociateVpcCidrBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateVpcCidrBlockResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateVpcCidrBlock"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateVpcCidrBlock(request *AssociateVpcCidrBlockRequest) (_result *AssociateVpcCidrBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateVpcCidrBlockResponse{}
	_body, _err := client.AssociateVpcCidrBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouterInterfaceAttributeWithOptions(request *DescribeRouterInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeRouterInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRouterInterfaceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRouterInterfaceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouterInterfaceAttribute(request *DescribeRouterInterfaceAttributeRequest) (_result *DescribeRouterInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouterInterfaceAttributeResponse{}
	_body, _err := client.DescribeRouterInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteExpressCloudConnectionWithOptions(request *DeleteExpressCloudConnectionRequest, runtime *util.RuntimeOptions) (_result *DeleteExpressCloudConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteExpressCloudConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteExpressCloudConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteExpressCloudConnection(request *DeleteExpressCloudConnectionRequest) (_result *DeleteExpressCloudConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExpressCloudConnectionResponse{}
	_body, _err := client.DeleteExpressCloudConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelExpressCloudConnectionWithOptions(request *CancelExpressCloudConnectionRequest, runtime *util.RuntimeOptions) (_result *CancelExpressCloudConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelExpressCloudConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("CancelExpressCloudConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelExpressCloudConnection(request *CancelExpressCloudConnectionRequest) (_result *CancelExpressCloudConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelExpressCloudConnectionResponse{}
	_body, _err := client.CancelExpressCloudConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletionProtectionWithOptions(request *DeletionProtectionRequest, runtime *util.RuntimeOptions) (_result *DeletionProtectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeletionProtectionResponse{}
	_body, _err := client.DoRequest(tea.String("DeletionProtection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletionProtection(request *DeletionProtectionRequest) (_result *DeletionProtectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletionProtectionResponse{}
	_body, _err := client.DeletionProtectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipGatewayInfoWithOptions(request *DescribeEipGatewayInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeEipGatewayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEipGatewayInfoResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEipGatewayInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipGatewayInfo(request *DescribeEipGatewayInfoRequest) (_result *DescribeEipGatewayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipGatewayInfoResponse{}
	_body, _err := client.DescribeEipGatewayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBgpPeerAttributeWithOptions(request *ModifyBgpPeerAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyBgpPeerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyBgpPeerAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyBgpPeerAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBgpPeerAttribute(request *ModifyBgpPeerAttributeRequest) (_result *ModifyBgpPeerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBgpPeerAttributeResponse{}
	_body, _err := client.ModifyBgpPeerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpnSslServerLogsWithOptions(request *DescribeVpnSslServerLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeVpnSslServerLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpnSslServerLogsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpnSslServerLogs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpnSslServerLogs(request *DescribeVpnSslServerLogsRequest) (_result *DescribeVpnSslServerLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpnSslServerLogsResponse{}
	_body, _err := client.DescribeVpnSslServerLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyExpressCloudConnectionBandwidthWithOptions(request *ModifyExpressCloudConnectionBandwidthRequest, runtime *util.RuntimeOptions) (_result *ModifyExpressCloudConnectionBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyExpressCloudConnectionBandwidthResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyExpressCloudConnectionBandwidth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyExpressCloudConnectionBandwidth(request *ModifyExpressCloudConnectionBandwidthRequest) (_result *ModifyExpressCloudConnectionBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyExpressCloudConnectionBandwidthResponse{}
	_body, _err := client.ModifyExpressCloudConnectionBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyExpressCloudConnectionAttributeWithOptions(request *ModifyExpressCloudConnectionAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyExpressCloudConnectionAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyExpressCloudConnectionAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyExpressCloudConnectionAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyExpressCloudConnectionAttribute(request *ModifyExpressCloudConnectionAttributeRequest) (_result *ModifyExpressCloudConnectionAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyExpressCloudConnectionAttributeResponse{}
	_body, _err := client.ModifyExpressCloudConnectionAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExpressCloudConnectionsWithOptions(request *DescribeExpressCloudConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribeExpressCloudConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeExpressCloudConnectionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeExpressCloudConnections"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExpressCloudConnections(request *DescribeExpressCloudConnectionsRequest) (_result *DescribeExpressCloudConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExpressCloudConnectionsResponse{}
	_body, _err := client.DescribeExpressCloudConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateExpressCloudConnectionWithOptions(request *CreateExpressCloudConnectionRequest, runtime *util.RuntimeOptions) (_result *CreateExpressCloudConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateExpressCloudConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("CreateExpressCloudConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateExpressCloudConnection(request *CreateExpressCloudConnectionRequest) (_result *CreateExpressCloudConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateExpressCloudConnectionResponse{}
	_body, _err := client.CreateExpressCloudConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateNetworkAclEntriesWithOptions(request *UpdateNetworkAclEntriesRequest, runtime *util.RuntimeOptions) (_result *UpdateNetworkAclEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateNetworkAclEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateNetworkAclEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateNetworkAclEntries(request *UpdateNetworkAclEntriesRequest) (_result *UpdateNetworkAclEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateNetworkAclEntriesResponse{}
	_body, _err := client.UpdateNetworkAclEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateNetworkAclWithOptions(request *UnassociateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *UnassociateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateNetworkAclResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateNetworkAcl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateNetworkAcl(request *UnassociateNetworkAclRequest) (_result *UnassociateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateNetworkAclResponse{}
	_body, _err := client.UnassociateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyNetworkAclAttributesWithOptions(request *ModifyNetworkAclAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkAclAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyNetworkAclAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyNetworkAclAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyNetworkAclAttributes(request *ModifyNetworkAclAttributesRequest) (_result *ModifyNetworkAclAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkAclAttributesResponse{}
	_body, _err := client.ModifyNetworkAclAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkAclsWithOptions(request *DescribeNetworkAclsRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkAclsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNetworkAclsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNetworkAcls"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkAcls(request *DescribeNetworkAclsRequest) (_result *DescribeNetworkAclsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkAclsResponse{}
	_body, _err := client.DescribeNetworkAclsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkAclAttributesWithOptions(request *DescribeNetworkAclAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkAclAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNetworkAclAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNetworkAclAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkAclAttributes(request *DescribeNetworkAclAttributesRequest) (_result *DescribeNetworkAclAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkAclAttributesResponse{}
	_body, _err := client.DescribeNetworkAclAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkAclWithOptions(request *DeleteNetworkAclRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteNetworkAclResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteNetworkAcl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkAcl(request *DeleteNetworkAclRequest) (_result *DeleteNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkAclResponse{}
	_body, _err := client.DeleteNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkAclWithOptions(request *CreateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNetworkAclResponse{}
	_body, _err := client.DoRequest(tea.String("CreateNetworkAcl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkAcl(request *CreateNetworkAclRequest) (_result *CreateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkAclResponse{}
	_body, _err := client.CreateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyNetworkAclEntriesWithOptions(request *CopyNetworkAclEntriesRequest, runtime *util.RuntimeOptions) (_result *CopyNetworkAclEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CopyNetworkAclEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("CopyNetworkAclEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyNetworkAclEntries(request *CopyNetworkAclEntriesRequest) (_result *CopyNetworkAclEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyNetworkAclEntriesResponse{}
	_body, _err := client.CopyNetworkAclEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateNetworkAclWithOptions(request *AssociateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *AssociateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateNetworkAclResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateNetworkAcl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateNetworkAcl(request *AssociateNetworkAclRequest) (_result *AssociateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateNetworkAclResponse{}
	_body, _err := client.AssociateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackageIpBandwidthWithOptions(request *ModifyCommonBandwidthPackageIpBandwidthRequest, runtime *util.RuntimeOptions) (_result *ModifyCommonBandwidthPackageIpBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyCommonBandwidthPackageIpBandwidthResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyCommonBandwidthPackageIpBandwidth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackageIpBandwidth(request *ModifyCommonBandwidthPackageIpBandwidthRequest) (_result *ModifyCommonBandwidthPackageIpBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCommonBandwidthPackageIpBandwidthResponse{}
	_body, _err := client.ModifyCommonBandwidthPackageIpBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelCommonBandwidthPackageIpBandwidthWithOptions(request *CancelCommonBandwidthPackageIpBandwidthRequest, runtime *util.RuntimeOptions) (_result *CancelCommonBandwidthPackageIpBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelCommonBandwidthPackageIpBandwidthResponse{}
	_body, _err := client.DoRequest(tea.String("CancelCommonBandwidthPackageIpBandwidth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelCommonBandwidthPackageIpBandwidth(request *CancelCommonBandwidthPackageIpBandwidthRequest) (_result *CancelCommonBandwidthPackageIpBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelCommonBandwidthPackageIpBandwidthResponse{}
	_body, _err := client.CancelCommonBandwidthPackageIpBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVpnPbrRouteEntryWithOptions(request *CreateVpnPbrRouteEntryRequest, runtime *util.RuntimeOptions) (_result *CreateVpnPbrRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpnPbrRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVpnPbrRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVpnPbrRouteEntry(request *CreateVpnPbrRouteEntryRequest) (_result *CreateVpnPbrRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVpnPbrRouteEntryResponse{}
	_body, _err := client.CreateVpnPbrRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVpnRouteEntryWithOptions(request *CreateVpnRouteEntryRequest, runtime *util.RuntimeOptions) (_result *CreateVpnRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpnRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVpnRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVpnRouteEntry(request *CreateVpnRouteEntryRequest) (_result *CreateVpnRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVpnRouteEntryResponse{}
	_body, _err := client.CreateVpnRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpnPbrRouteEntryWithOptions(request *DeleteVpnPbrRouteEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteVpnPbrRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpnPbrRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVpnPbrRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpnPbrRouteEntry(request *DeleteVpnPbrRouteEntryRequest) (_result *DeleteVpnPbrRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpnPbrRouteEntryResponse{}
	_body, _err := client.DeleteVpnPbrRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpnRouteEntryWithOptions(request *DeleteVpnRouteEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteVpnRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpnRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVpnRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpnRouteEntry(request *DeleteVpnRouteEntryRequest) (_result *DeleteVpnRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpnRouteEntryResponse{}
	_body, _err := client.DeleteVpnRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpnRouteEntriesWithOptions(request *DescribeVpnRouteEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeVpnRouteEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpnRouteEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpnRouteEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpnRouteEntries(request *DescribeVpnRouteEntriesRequest) (_result *DescribeVpnRouteEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpnRouteEntriesResponse{}
	_body, _err := client.DescribeVpnRouteEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpnPbrRouteEntriesWithOptions(request *DescribeVpnPbrRouteEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeVpnPbrRouteEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpnPbrRouteEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpnPbrRouteEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpnPbrRouteEntries(request *DescribeVpnPbrRouteEntriesRequest) (_result *DescribeVpnPbrRouteEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpnPbrRouteEntriesResponse{}
	_body, _err := client.DescribeVpnPbrRouteEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishVpnRouteEntryWithOptions(request *PublishVpnRouteEntryRequest, runtime *util.RuntimeOptions) (_result *PublishVpnRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PublishVpnRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("PublishVpnRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishVpnRouteEntry(request *PublishVpnRouteEntryRequest) (_result *PublishVpnRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishVpnRouteEntryResponse{}
	_body, _err := client.PublishVpnRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpnRouteEntryWeightWithOptions(request *ModifyVpnRouteEntryWeightRequest, runtime *util.RuntimeOptions) (_result *ModifyVpnRouteEntryWeightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVpnRouteEntryWeightResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVpnRouteEntryWeight"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpnRouteEntryWeight(request *ModifyVpnRouteEntryWeightRequest) (_result *ModifyVpnRouteEntryWeightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpnRouteEntryWeightResponse{}
	_body, _err := client.ModifyVpnRouteEntryWeightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpnPbrRouteEntryWeightWithOptions(request *ModifyVpnPbrRouteEntryWeightRequest, runtime *util.RuntimeOptions) (_result *ModifyVpnPbrRouteEntryWeightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVpnPbrRouteEntryWeightResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVpnPbrRouteEntryWeight"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpnPbrRouteEntryWeight(request *ModifyVpnPbrRouteEntryWeightRequest) (_result *ModifyVpnPbrRouteEntryWeightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpnPbrRouteEntryWeightResponse{}
	_body, _err := client.ModifyVpnPbrRouteEntryWeightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribePhysicalConnectionLOA Query LOA information about the physical connection.
 * request demo:   * http(s)://[Endpoint]/?InstanceId=pc-bp1ca4wca27exxxxxxxx
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) DescribePhysicalConnectionLOAWithOptions(request *DescribePhysicalConnectionLOARequest, runtime *util.RuntimeOptions) (_result *DescribePhysicalConnectionLOAResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribePhysicalConnectionLOAResponse{}
	_body, _err := client.DoRequest(tea.String("DescribePhysicalConnectionLOA"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribePhysicalConnectionLOA Query LOA information about the physical connection.
 * request demo:   * http(s)://[Endpoint]/?InstanceId=pc-bp1ca4wca27exxxxxxxx
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) DescribePhysicalConnectionLOA(request *DescribePhysicalConnectionLOARequest) (_result *DescribePhysicalConnectionLOAResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePhysicalConnectionLOAResponse{}
	_body, _err := client.DescribePhysicalConnectionLOAWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* CreatePhysicalConnectionSetupOrder Create an order for the resource fee.
 * request demo:   * http(s)://[Endpoint]/?AccessPointId=ap-cn-beijing-ft-A
 * &LineOperator=CT
 * &RegionId=cn-shanghai
 * &<CommonParameters>
 * description:
*/
func (client *Client) CreatePhysicalConnectionSetupOrderWithOptions(request *CreatePhysicalConnectionSetupOrderRequest, runtime *util.RuntimeOptions) (_result *CreatePhysicalConnectionSetupOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePhysicalConnectionSetupOrderResponse{}
	_body, _err := client.DoRequest(tea.String("CreatePhysicalConnectionSetupOrder"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* CreatePhysicalConnectionSetupOrder Create an order for the resource fee.
 * request demo:   * http(s)://[Endpoint]/?AccessPointId=ap-cn-beijing-ft-A
 * &LineOperator=CT
 * &RegionId=cn-shanghai
 * &<CommonParameters>
 * description:
*/
func (client *Client) CreatePhysicalConnectionSetupOrder(request *CreatePhysicalConnectionSetupOrderRequest) (_result *CreatePhysicalConnectionSetupOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePhysicalConnectionSetupOrderResponse{}
	_body, _err := client.CreatePhysicalConnectionSetupOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* CreatePhysicalConnectionOccupancyOrder Create an order for the initial installation fee.
 * request demo:   * http(s)://[Endpoint]/?PhysicalConnectionId=pc-bp1hp0wr072f6ambni141
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) CreatePhysicalConnectionOccupancyOrderWithOptions(request *CreatePhysicalConnectionOccupancyOrderRequest, runtime *util.RuntimeOptions) (_result *CreatePhysicalConnectionOccupancyOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePhysicalConnectionOccupancyOrderResponse{}
	_body, _err := client.DoRequest(tea.String("CreatePhysicalConnectionOccupancyOrder"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* CreatePhysicalConnectionOccupancyOrder Create an order for the initial installation fee.
 * request demo:   * http(s)://[Endpoint]/?PhysicalConnectionId=pc-bp1hp0wr072f6ambni141
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) CreatePhysicalConnectionOccupancyOrder(request *CreatePhysicalConnectionOccupancyOrderRequest) (_result *CreatePhysicalConnectionOccupancyOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePhysicalConnectionOccupancyOrderResponse{}
	_body, _err := client.CreatePhysicalConnectionOccupancyOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* CompletePhysicalConnectionLOA Report information about the completed installation of the leased line.
 * request demo:   * http(s)://[Endpoint]/?InstanceId=pc-bp10tvlhnwkwxxxxxxxxxx
 * &LineCode=aaa111
 * &LineLabel=bbb222
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) CompletePhysicalConnectionLOAWithOptions(request *CompletePhysicalConnectionLOARequest, runtime *util.RuntimeOptions) (_result *CompletePhysicalConnectionLOAResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CompletePhysicalConnectionLOAResponse{}
	_body, _err := client.DoRequest(tea.String("CompletePhysicalConnectionLOA"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* CompletePhysicalConnectionLOA Report information about the completed installation of the leased line.
 * request demo:   * http(s)://[Endpoint]/?InstanceId=pc-bp10tvlhnwkwxxxxxxxxxx
 * &LineCode=aaa111
 * &LineLabel=bbb222
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) CompletePhysicalConnectionLOA(request *CompletePhysicalConnectionLOARequest) (_result *CompletePhysicalConnectionLOAResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CompletePhysicalConnectionLOAResponse{}
	_body, _err := client.CompletePhysicalConnectionLOAWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* ApplyPhysicalConnectionLOA Apply for the LOA.
 * request demo:   * http(s)://[Endpoint]/?CompanyName=company
 * &ConstructionTime=2019-02-28T16:00:00.000Z
 * &InstanceId=pc-bp1qrb3044eqixxxxxxxx
 * &LineType=SDH
 * &PeerLocation=Hangzhou
 * &RegionId=cn-hangzhou
 * &Si=Alibaba Cloud
 * &<CommonParameters>
 * description:
*/
func (client *Client) ApplyPhysicalConnectionLOAWithOptions(request *ApplyPhysicalConnectionLOARequest, runtime *util.RuntimeOptions) (_result *ApplyPhysicalConnectionLOAResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyPhysicalConnectionLOAResponse{}
	_body, _err := client.DoRequest(tea.String("ApplyPhysicalConnectionLOA"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* ApplyPhysicalConnectionLOA Apply for the LOA.
 * request demo:   * http(s)://[Endpoint]/?CompanyName=company
 * &ConstructionTime=2019-02-28T16:00:00.000Z
 * &InstanceId=pc-bp1qrb3044eqixxxxxxxx
 * &LineType=SDH
 * &PeerLocation=Hangzhou
 * &RegionId=cn-hangzhou
 * &Si=Alibaba Cloud
 * &<CommonParameters>
 * description:
*/
func (client *Client) ApplyPhysicalConnectionLOA(request *ApplyPhysicalConnectionLOARequest) (_result *ApplyPhysicalConnectionLOAResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyPhysicalConnectionLOAResponse{}
	_body, _err := client.ApplyPhysicalConnectionLOAWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConvertBandwidthPackageWithOptions(request *ConvertBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *ConvertBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConvertBandwidthPackageResponse{}
	_body, _err := client.DoRequest(tea.String("ConvertBandwidthPackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConvertBandwidthPackage(request *ConvertBandwidthPackageRequest) (_result *ConvertBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConvertBandwidthPackageResponse{}
	_body, _err := client.ConvertBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouteEntryWithOptions(request *ModifyRouteEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouteEntry(request *ModifyRouteEntryRequest) (_result *ModifyRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouteEntryResponse{}
	_body, _err := client.ModifyRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouteEntryListWithOptions(request *DescribeRouteEntryListRequest, runtime *util.RuntimeOptions) (_result *DescribeRouteEntryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRouteEntryListResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRouteEntryList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouteEntryList(request *DescribeRouteEntryListRequest) (_result *DescribeRouteEntryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouteEntryListResponse{}
	_body, _err := client.DescribeRouteEntryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIPv6TranslatorAclListWithOptions(request *CreateIPv6TranslatorAclListRequest, runtime *util.RuntimeOptions) (_result *CreateIPv6TranslatorAclListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIPv6TranslatorAclListResponse{}
	_body, _err := client.DoRequest(tea.String("CreateIPv6TranslatorAclList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIPv6TranslatorAclList(request *CreateIPv6TranslatorAclListRequest) (_result *CreateIPv6TranslatorAclListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIPv6TranslatorAclListResponse{}
	_body, _err := client.CreateIPv6TranslatorAclListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIPv6TranslatorAclListWithOptions(request *DeleteIPv6TranslatorAclListRequest, runtime *util.RuntimeOptions) (_result *DeleteIPv6TranslatorAclListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteIPv6TranslatorAclListResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteIPv6TranslatorAclList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIPv6TranslatorAclList(request *DeleteIPv6TranslatorAclListRequest) (_result *DeleteIPv6TranslatorAclListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIPv6TranslatorAclListResponse{}
	_body, _err := client.DeleteIPv6TranslatorAclListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddIPv6TranslatorAclListEntryWithOptions(request *AddIPv6TranslatorAclListEntryRequest, runtime *util.RuntimeOptions) (_result *AddIPv6TranslatorAclListEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddIPv6TranslatorAclListEntryResponse{}
	_body, _err := client.DoRequest(tea.String("AddIPv6TranslatorAclListEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddIPv6TranslatorAclListEntry(request *AddIPv6TranslatorAclListEntryRequest) (_result *AddIPv6TranslatorAclListEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddIPv6TranslatorAclListEntryResponse{}
	_body, _err := client.AddIPv6TranslatorAclListEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIPv6TranslatorAclListsWithOptions(request *DescribeIPv6TranslatorAclListsRequest, runtime *util.RuntimeOptions) (_result *DescribeIPv6TranslatorAclListsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIPv6TranslatorAclListsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIPv6TranslatorAclLists"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIPv6TranslatorAclLists(request *DescribeIPv6TranslatorAclListsRequest) (_result *DescribeIPv6TranslatorAclListsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIPv6TranslatorAclListsResponse{}
	_body, _err := client.DescribeIPv6TranslatorAclListsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorAclAttributeWithOptions(request *ModifyIPv6TranslatorAclAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyIPv6TranslatorAclAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIPv6TranslatorAclAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIPv6TranslatorAclAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorAclAttribute(request *ModifyIPv6TranslatorAclAttributeRequest) (_result *ModifyIPv6TranslatorAclAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIPv6TranslatorAclAttributeResponse{}
	_body, _err := client.ModifyIPv6TranslatorAclAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveIPv6TranslatorAclListEntryWithOptions(request *RemoveIPv6TranslatorAclListEntryRequest, runtime *util.RuntimeOptions) (_result *RemoveIPv6TranslatorAclListEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveIPv6TranslatorAclListEntryResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveIPv6TranslatorAclListEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveIPv6TranslatorAclListEntry(request *RemoveIPv6TranslatorAclListEntryRequest) (_result *RemoveIPv6TranslatorAclListEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveIPv6TranslatorAclListEntryResponse{}
	_body, _err := client.RemoveIPv6TranslatorAclListEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIPv6TranslatorAclListAttributesWithOptions(request *DescribeIPv6TranslatorAclListAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeIPv6TranslatorAclListAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIPv6TranslatorAclListAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIPv6TranslatorAclListAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIPv6TranslatorAclListAttributes(request *DescribeIPv6TranslatorAclListAttributesRequest) (_result *DescribeIPv6TranslatorAclListAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIPv6TranslatorAclListAttributesResponse{}
	_body, _err := client.DescribeIPv6TranslatorAclListAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorAclListEntryWithOptions(request *ModifyIPv6TranslatorAclListEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyIPv6TranslatorAclListEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIPv6TranslatorAclListEntryResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIPv6TranslatorAclListEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorAclListEntry(request *ModifyIPv6TranslatorAclListEntryRequest) (_result *ModifyIPv6TranslatorAclListEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIPv6TranslatorAclListEntryResponse{}
	_body, _err := client.ModifyIPv6TranslatorAclListEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnTagResourcesWithOptions(request *UnTagResourcesRequest, runtime *util.RuntimeOptions) (_result *UnTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnTagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("UnTagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnTagResources(request *UnTagResourcesRequest) (_result *UnTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnTagResourcesResponse{}
	_body, _err := client.UnTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("TagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("ListTagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIpv6InternetBandwidthWithOptions(request *ModifyIpv6InternetBandwidthRequest, runtime *util.RuntimeOptions) (_result *ModifyIpv6InternetBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIpv6InternetBandwidthResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIpv6InternetBandwidth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIpv6InternetBandwidth(request *ModifyIpv6InternetBandwidthRequest) (_result *ModifyIpv6InternetBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpv6InternetBandwidthResponse{}
	_body, _err := client.ModifyIpv6InternetBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIpv6GatewaySpecWithOptions(request *ModifyIpv6GatewaySpecRequest, runtime *util.RuntimeOptions) (_result *ModifyIpv6GatewaySpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIpv6GatewaySpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIpv6GatewaySpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIpv6GatewaySpec(request *ModifyIpv6GatewaySpecRequest) (_result *ModifyIpv6GatewaySpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpv6GatewaySpecResponse{}
	_body, _err := client.ModifyIpv6GatewaySpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIpv6GatewayAttributeWithOptions(request *ModifyIpv6GatewayAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyIpv6GatewayAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIpv6GatewayAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIpv6GatewayAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIpv6GatewayAttribute(request *ModifyIpv6GatewayAttributeRequest) (_result *ModifyIpv6GatewayAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpv6GatewayAttributeResponse{}
	_body, _err := client.ModifyIpv6GatewayAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIpv6AddressAttributeWithOptions(request *ModifyIpv6AddressAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyIpv6AddressAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIpv6AddressAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIpv6AddressAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIpv6AddressAttribute(request *ModifyIpv6AddressAttributeRequest) (_result *ModifyIpv6AddressAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpv6AddressAttributeResponse{}
	_body, _err := client.ModifyIpv6AddressAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIpv6GatewaysWithOptions(request *DescribeIpv6GatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeIpv6GatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIpv6GatewaysResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIpv6Gateways"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIpv6Gateways(request *DescribeIpv6GatewaysRequest) (_result *DescribeIpv6GatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpv6GatewaysResponse{}
	_body, _err := client.DescribeIpv6GatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIpv6GatewayAttributeWithOptions(request *DescribeIpv6GatewayAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeIpv6GatewayAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIpv6GatewayAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIpv6GatewayAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIpv6GatewayAttribute(request *DescribeIpv6GatewayAttributeRequest) (_result *DescribeIpv6GatewayAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpv6GatewayAttributeResponse{}
	_body, _err := client.DescribeIpv6GatewayAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIpv6EgressOnlyRulesWithOptions(request *DescribeIpv6EgressOnlyRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeIpv6EgressOnlyRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIpv6EgressOnlyRulesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIpv6EgressOnlyRules"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIpv6EgressOnlyRules(request *DescribeIpv6EgressOnlyRulesRequest) (_result *DescribeIpv6EgressOnlyRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpv6EgressOnlyRulesResponse{}
	_body, _err := client.DescribeIpv6EgressOnlyRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIpv6AddressesWithOptions(request *DescribeIpv6AddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeIpv6AddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIpv6AddressesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIpv6Addresses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIpv6Addresses(request *DescribeIpv6AddressesRequest) (_result *DescribeIpv6AddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpv6AddressesResponse{}
	_body, _err := client.DescribeIpv6AddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIpv6InternetBandwidthWithOptions(request *DeleteIpv6InternetBandwidthRequest, runtime *util.RuntimeOptions) (_result *DeleteIpv6InternetBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteIpv6InternetBandwidthResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteIpv6InternetBandwidth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIpv6InternetBandwidth(request *DeleteIpv6InternetBandwidthRequest) (_result *DeleteIpv6InternetBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIpv6InternetBandwidthResponse{}
	_body, _err := client.DeleteIpv6InternetBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIpv6GatewayWithOptions(request *DeleteIpv6GatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteIpv6GatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteIpv6GatewayResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteIpv6Gateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIpv6Gateway(request *DeleteIpv6GatewayRequest) (_result *DeleteIpv6GatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIpv6GatewayResponse{}
	_body, _err := client.DeleteIpv6GatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIpv6EgressOnlyRuleWithOptions(request *DeleteIpv6EgressOnlyRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteIpv6EgressOnlyRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteIpv6EgressOnlyRuleResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteIpv6EgressOnlyRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIpv6EgressOnlyRule(request *DeleteIpv6EgressOnlyRuleRequest) (_result *DeleteIpv6EgressOnlyRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIpv6EgressOnlyRuleResponse{}
	_body, _err := client.DeleteIpv6EgressOnlyRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIpv6GatewayWithOptions(request *CreateIpv6GatewayRequest, runtime *util.RuntimeOptions) (_result *CreateIpv6GatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIpv6GatewayResponse{}
	_body, _err := client.DoRequest(tea.String("CreateIpv6Gateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIpv6Gateway(request *CreateIpv6GatewayRequest) (_result *CreateIpv6GatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIpv6GatewayResponse{}
	_body, _err := client.CreateIpv6GatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIpv6EgressOnlyRuleWithOptions(request *CreateIpv6EgressOnlyRuleRequest, runtime *util.RuntimeOptions) (_result *CreateIpv6EgressOnlyRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIpv6EgressOnlyRuleResponse{}
	_body, _err := client.DoRequest(tea.String("CreateIpv6EgressOnlyRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIpv6EgressOnlyRule(request *CreateIpv6EgressOnlyRuleRequest) (_result *CreateIpv6EgressOnlyRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIpv6EgressOnlyRuleResponse{}
	_body, _err := client.CreateIpv6EgressOnlyRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateIpv6InternetBandwidthWithOptions(request *AllocateIpv6InternetBandwidthRequest, runtime *util.RuntimeOptions) (_result *AllocateIpv6InternetBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateIpv6InternetBandwidthResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateIpv6InternetBandwidth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateIpv6InternetBandwidth(request *AllocateIpv6InternetBandwidthRequest) (_result *AllocateIpv6InternetBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateIpv6InternetBandwidthResponse{}
	_body, _err := client.AllocateIpv6InternetBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteExpressConnectWithOptions(request *DeleteExpressConnectRequest, runtime *util.RuntimeOptions) (_result *DeleteExpressConnectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteExpressConnectResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteExpressConnect"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteExpressConnect(request *DeleteExpressConnectRequest) (_result *DeleteExpressConnectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExpressConnectResponse{}
	_body, _err := client.DeleteExpressConnectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIPv6TranslatorWithOptions(request *CreateIPv6TranslatorRequest, runtime *util.RuntimeOptions) (_result *CreateIPv6TranslatorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIPv6TranslatorResponse{}
	_body, _err := client.DoRequest(tea.String("CreateIPv6Translator"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIPv6Translator(request *CreateIPv6TranslatorRequest) (_result *CreateIPv6TranslatorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIPv6TranslatorResponse{}
	_body, _err := client.CreateIPv6TranslatorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIPv6TranslatorsWithOptions(request *DescribeIPv6TranslatorsRequest, runtime *util.RuntimeOptions) (_result *DescribeIPv6TranslatorsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIPv6TranslatorsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIPv6Translators"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIPv6Translators(request *DescribeIPv6TranslatorsRequest) (_result *DescribeIPv6TranslatorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIPv6TranslatorsResponse{}
	_body, _err := client.DescribeIPv6TranslatorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorAttributeWithOptions(request *ModifyIPv6TranslatorAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyIPv6TranslatorAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIPv6TranslatorAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIPv6TranslatorAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorAttribute(request *ModifyIPv6TranslatorAttributeRequest) (_result *ModifyIPv6TranslatorAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIPv6TranslatorAttributeResponse{}
	_body, _err := client.ModifyIPv6TranslatorAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorBandwidthWithOptions(request *ModifyIPv6TranslatorBandwidthRequest, runtime *util.RuntimeOptions) (_result *ModifyIPv6TranslatorBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIPv6TranslatorBandwidthResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIPv6TranslatorBandwidth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorBandwidth(request *ModifyIPv6TranslatorBandwidthRequest) (_result *ModifyIPv6TranslatorBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIPv6TranslatorBandwidthResponse{}
	_body, _err := client.ModifyIPv6TranslatorBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIPv6TranslatorEntryWithOptions(request *CreateIPv6TranslatorEntryRequest, runtime *util.RuntimeOptions) (_result *CreateIPv6TranslatorEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIPv6TranslatorEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateIPv6TranslatorEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIPv6TranslatorEntry(request *CreateIPv6TranslatorEntryRequest) (_result *CreateIPv6TranslatorEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIPv6TranslatorEntryResponse{}
	_body, _err := client.CreateIPv6TranslatorEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIPv6TranslatorEntryWithOptions(request *DeleteIPv6TranslatorEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteIPv6TranslatorEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteIPv6TranslatorEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteIPv6TranslatorEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIPv6TranslatorEntry(request *DeleteIPv6TranslatorEntryRequest) (_result *DeleteIPv6TranslatorEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIPv6TranslatorEntryResponse{}
	_body, _err := client.DeleteIPv6TranslatorEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorEntryWithOptions(request *ModifyIPv6TranslatorEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyIPv6TranslatorEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyIPv6TranslatorEntryResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyIPv6TranslatorEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIPv6TranslatorEntry(request *ModifyIPv6TranslatorEntryRequest) (_result *ModifyIPv6TranslatorEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIPv6TranslatorEntryResponse{}
	_body, _err := client.ModifyIPv6TranslatorEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIPv6TranslatorEntriesWithOptions(request *DescribeIPv6TranslatorEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeIPv6TranslatorEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeIPv6TranslatorEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeIPv6TranslatorEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIPv6TranslatorEntries(request *DescribeIPv6TranslatorEntriesRequest) (_result *DescribeIPv6TranslatorEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIPv6TranslatorEntriesResponse{}
	_body, _err := client.DescribeIPv6TranslatorEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIPv6TranslatorWithOptions(request *DeleteIPv6TranslatorRequest, runtime *util.RuntimeOptions) (_result *DeleteIPv6TranslatorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteIPv6TranslatorResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteIPv6Translator"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIPv6Translator(request *DeleteIPv6TranslatorRequest) (_result *DeleteIPv6TranslatorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIPv6TranslatorResponse{}
	_body, _err := client.DeleteIPv6TranslatorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateEipAddressProWithOptions(request *AllocateEipAddressProRequest, runtime *util.RuntimeOptions) (_result *AllocateEipAddressProResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateEipAddressProResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateEipAddressPro"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateEipAddressPro(request *AllocateEipAddressProRequest) (_result *AllocateEipAddressProResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateEipAddressProResponse{}
	_body, _err := client.AllocateEipAddressProWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHighDefinitionMonitorLogAttributeWithOptions(request *DescribeHighDefinitionMonitorLogAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeHighDefinitionMonitorLogAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeHighDefinitionMonitorLogAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeHighDefinitionMonitorLogAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHighDefinitionMonitorLogAttribute(request *DescribeHighDefinitionMonitorLogAttributeRequest) (_result *DescribeHighDefinitionMonitorLogAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHighDefinitionMonitorLogAttributeResponse{}
	_body, _err := client.DescribeHighDefinitionMonitorLogAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowLogAttributeWithOptions(request *ModifyFlowLogAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowLogAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyFlowLogAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyFlowLogAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowLogAttribute(request *ModifyFlowLogAttributeRequest) (_result *ModifyFlowLogAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowLogAttributeResponse{}
	_body, _err := client.ModifyFlowLogAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowLogsWithOptions(request *DescribeFlowLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeFlowLogsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeFlowLogs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowLogs(request *DescribeFlowLogsRequest) (_result *DescribeFlowLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowLogsResponse{}
	_body, _err := client.DescribeFlowLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowLogWithOptions(request *DeleteFlowLogRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowLogResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteFlowLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowLog(request *DeleteFlowLogRequest) (_result *DeleteFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowLogResponse{}
	_body, _err := client.DeleteFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeactiveFlowLogWithOptions(request *DeactiveFlowLogRequest, runtime *util.RuntimeOptions) (_result *DeactiveFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeactiveFlowLogResponse{}
	_body, _err := client.DoRequest(tea.String("DeactiveFlowLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeactiveFlowLog(request *DeactiveFlowLogRequest) (_result *DeactiveFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeactiveFlowLogResponse{}
	_body, _err := client.DeactiveFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowLogWithOptions(request *CreateFlowLogRequest, runtime *util.RuntimeOptions) (_result *CreateFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFlowLogResponse{}
	_body, _err := client.DoRequest(tea.String("CreateFlowLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowLog(request *CreateFlowLogRequest) (_result *CreateFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowLogResponse{}
	_body, _err := client.CreateFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ActiveFlowLogWithOptions(request *ActiveFlowLogRequest, runtime *util.RuntimeOptions) (_result *ActiveFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ActiveFlowLogResponse{}
	_body, _err := client.DoRequest(tea.String("ActiveFlowLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ActiveFlowLog(request *ActiveFlowLogRequest) (_result *ActiveFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActiveFlowLogResponse{}
	_body, _err := client.ActiveFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateRouteTableWithOptions(request *UnassociateRouteTableRequest, runtime *util.RuntimeOptions) (_result *UnassociateRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateRouteTable(request *UnassociateRouteTableRequest) (_result *UnassociateRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateRouteTableResponse{}
	_body, _err := client.UnassociateRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouteTableWithOptions(request *DeleteRouteTableRequest, runtime *util.RuntimeOptions) (_result *DeleteRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouteTable(request *DeleteRouteTableRequest) (_result *DeleteRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouteTableResponse{}
	_body, _err := client.DeleteRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRouteTableWithOptions(request *CreateRouteTableRequest, runtime *util.RuntimeOptions) (_result *CreateRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRouteTable(request *CreateRouteTableRequest) (_result *CreateRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouteTableResponse{}
	_body, _err := client.CreateRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateRouteTableWithOptions(request *AssociateRouteTableRequest, runtime *util.RuntimeOptions) (_result *AssociateRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateRouteTable(request *AssociateRouteTableRequest) (_result *AssociateRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateRouteTableResponse{}
	_body, _err := client.AssociateRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVpnGatewayWithOptions(request *CreateVpnGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateVpnGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpnGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVpnGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVpnGateway(request *CreateVpnGatewayRequest) (_result *CreateVpnGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVpnGatewayResponse{}
	_body, _err := client.CreateVpnGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MoveResourceGroupWithOptions(request *MoveResourceGroupRequest, runtime *util.RuntimeOptions) (_result *MoveResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MoveResourceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("MoveResourceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MoveResourceGroup(request *MoveResourceGroupRequest) (_result *MoveResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveResourceGroupResponse{}
	_body, _err := client.MoveResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeInstanceFromCenWithOptions(request *RevokeInstanceFromCenRequest, runtime *util.RuntimeOptions) (_result *RevokeInstanceFromCenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RevokeInstanceFromCenResponse{}
	_body, _err := client.DoRequest(tea.String("RevokeInstanceFromCen"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeInstanceFromCen(request *RevokeInstanceFromCenRequest) (_result *RevokeInstanceFromCenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeInstanceFromCenResponse{}
	_body, _err := client.RevokeInstanceFromCenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantInstanceToCenWithOptions(request *GrantInstanceToCenRequest, runtime *util.RuntimeOptions) (_result *GrantInstanceToCenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GrantInstanceToCenResponse{}
	_body, _err := client.DoRequest(tea.String("GrantInstanceToCen"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantInstanceToCen(request *GrantInstanceToCenRequest) (_result *GrantInstanceToCenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantInstanceToCenResponse{}
	_body, _err := client.GrantInstanceToCenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGrantRulesToCenWithOptions(request *DescribeGrantRulesToCenRequest, runtime *util.RuntimeOptions) (_result *DescribeGrantRulesToCenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeGrantRulesToCenResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeGrantRulesToCen"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGrantRulesToCen(request *DescribeGrantRulesToCenRequest) (_result *DescribeGrantRulesToCenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGrantRulesToCenResponse{}
	_body, _err := client.DescribeGrantRulesToCenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySslVpnServerWithOptions(request *ModifySslVpnServerRequest, runtime *util.RuntimeOptions) (_result *ModifySslVpnServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySslVpnServerResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySslVpnServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySslVpnServer(request *ModifySslVpnServerRequest) (_result *ModifySslVpnServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySslVpnServerResponse{}
	_body, _err := client.ModifySslVpnServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySslVpnClientCertWithOptions(request *ModifySslVpnClientCertRequest, runtime *util.RuntimeOptions) (_result *ModifySslVpnClientCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySslVpnClientCertResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySslVpnClientCert"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySslVpnClientCert(request *ModifySslVpnClientCertRequest) (_result *ModifySslVpnClientCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySslVpnClientCertResponse{}
	_body, _err := client.ModifySslVpnClientCertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSslVpnServersWithOptions(request *DescribeSslVpnServersRequest, runtime *util.RuntimeOptions) (_result *DescribeSslVpnServersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSslVpnServersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSslVpnServers"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSslVpnServers(request *DescribeSslVpnServersRequest) (_result *DescribeSslVpnServersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSslVpnServersResponse{}
	_body, _err := client.DescribeSslVpnServersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSslVpnClientCertsWithOptions(request *DescribeSslVpnClientCertsRequest, runtime *util.RuntimeOptions) (_result *DescribeSslVpnClientCertsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSslVpnClientCertsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSslVpnClientCerts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSslVpnClientCerts(request *DescribeSslVpnClientCertsRequest) (_result *DescribeSslVpnClientCertsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSslVpnClientCertsResponse{}
	_body, _err := client.DescribeSslVpnClientCertsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSslVpnClientCertWithOptions(request *DescribeSslVpnClientCertRequest, runtime *util.RuntimeOptions) (_result *DescribeSslVpnClientCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSslVpnClientCertResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSslVpnClientCert"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSslVpnClientCert(request *DescribeSslVpnClientCertRequest) (_result *DescribeSslVpnClientCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSslVpnClientCertResponse{}
	_body, _err := client.DescribeSslVpnClientCertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSslVpnServerWithOptions(request *DeleteSslVpnServerRequest, runtime *util.RuntimeOptions) (_result *DeleteSslVpnServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSslVpnServerResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteSslVpnServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSslVpnServer(request *DeleteSslVpnServerRequest) (_result *DeleteSslVpnServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSslVpnServerResponse{}
	_body, _err := client.DeleteSslVpnServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSslVpnClientCertWithOptions(request *DeleteSslVpnClientCertRequest, runtime *util.RuntimeOptions) (_result *DeleteSslVpnClientCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSslVpnClientCertResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteSslVpnClientCert"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSslVpnClientCert(request *DeleteSslVpnClientCertRequest) (_result *DeleteSslVpnClientCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSslVpnClientCertResponse{}
	_body, _err := client.DeleteSslVpnClientCertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSslVpnServerWithOptions(request *CreateSslVpnServerRequest, runtime *util.RuntimeOptions) (_result *CreateSslVpnServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSslVpnServerResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSslVpnServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSslVpnServer(request *CreateSslVpnServerRequest) (_result *CreateSslVpnServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSslVpnServerResponse{}
	_body, _err := client.CreateSslVpnServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSslVpnClientCertWithOptions(request *CreateSslVpnClientCertRequest, runtime *util.RuntimeOptions) (_result *CreateSslVpnClientCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSslVpnClientCertResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSslVpnClientCert"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSslVpnClientCert(request *CreateSslVpnClientCertRequest) (_result *CreateSslVpnClientCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSslVpnClientCertResponse{}
	_body, _err := client.CreateSslVpnClientCertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveGlobalAccelerationInstanceIpWithOptions(request *RemoveGlobalAccelerationInstanceIpRequest, runtime *util.RuntimeOptions) (_result *RemoveGlobalAccelerationInstanceIpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveGlobalAccelerationInstanceIpResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveGlobalAccelerationInstanceIp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveGlobalAccelerationInstanceIp(request *RemoveGlobalAccelerationInstanceIpRequest) (_result *RemoveGlobalAccelerationInstanceIpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveGlobalAccelerationInstanceIpResponse{}
	_body, _err := client.RemoveGlobalAccelerationInstanceIpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddGlobalAccelerationInstanceIpWithOptions(request *AddGlobalAccelerationInstanceIpRequest, runtime *util.RuntimeOptions) (_result *AddGlobalAccelerationInstanceIpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddGlobalAccelerationInstanceIpResponse{}
	_body, _err := client.DoRequest(tea.String("AddGlobalAccelerationInstanceIp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddGlobalAccelerationInstanceIp(request *AddGlobalAccelerationInstanceIpRequest) (_result *AddGlobalAccelerationInstanceIpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddGlobalAccelerationInstanceIpResponse{}
	_body, _err := client.AddGlobalAccelerationInstanceIpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouteTableListWithOptions(request *DescribeRouteTableListRequest, runtime *util.RuntimeOptions) (_result *DescribeRouteTableListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRouteTableListResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRouteTableList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouteTableList(request *DescribeRouteTableListRequest) (_result *DescribeRouteTableListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouteTableListResponse{}
	_body, _err := client.DescribeRouteTableListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouteTableAttributesWithOptions(request *ModifyRouteTableAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyRouteTableAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyRouteTableAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyRouteTableAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouteTableAttributes(request *ModifyRouteTableAttributesRequest) (_result *ModifyRouteTableAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouteTableAttributesResponse{}
	_body, _err := client.ModifyRouteTableAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBgpNetworksWithOptions(request *DescribeBgpNetworksRequest, runtime *util.RuntimeOptions) (_result *DescribeBgpNetworksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBgpNetworksResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBgpNetworks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBgpNetworks(request *DescribeBgpNetworksRequest) (_result *DescribeBgpNetworksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBgpNetworksResponse{}
	_body, _err := client.DescribeBgpNetworksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackagePayTypeWithOptions(request *ModifyCommonBandwidthPackagePayTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyCommonBandwidthPackagePayTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyCommonBandwidthPackagePayTypeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyCommonBandwidthPackagePayType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackagePayType(request *ModifyCommonBandwidthPackagePayTypeRequest) (_result *ModifyCommonBandwidthPackagePayTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCommonBandwidthPackagePayTypeResponse{}
	_body, _err := client.ModifyCommonBandwidthPackagePayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateGlobalAccelerationInstanceWithOptions(request *UnassociateGlobalAccelerationInstanceRequest, runtime *util.RuntimeOptions) (_result *UnassociateGlobalAccelerationInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateGlobalAccelerationInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateGlobalAccelerationInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateGlobalAccelerationInstance(request *UnassociateGlobalAccelerationInstanceRequest) (_result *UnassociateGlobalAccelerationInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateGlobalAccelerationInstanceResponse{}
	_body, _err := client.UnassociateGlobalAccelerationInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyGlobalAccelerationInstanceSpecWithOptions(request *ModifyGlobalAccelerationInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyGlobalAccelerationInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyGlobalAccelerationInstanceSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyGlobalAccelerationInstanceSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyGlobalAccelerationInstanceSpec(request *ModifyGlobalAccelerationInstanceSpecRequest) (_result *ModifyGlobalAccelerationInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyGlobalAccelerationInstanceSpecResponse{}
	_body, _err := client.ModifyGlobalAccelerationInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyGlobalAccelerationInstanceAttributesWithOptions(request *ModifyGlobalAccelerationInstanceAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyGlobalAccelerationInstanceAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyGlobalAccelerationInstanceAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyGlobalAccelerationInstanceAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyGlobalAccelerationInstanceAttributes(request *ModifyGlobalAccelerationInstanceAttributesRequest) (_result *ModifyGlobalAccelerationInstanceAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyGlobalAccelerationInstanceAttributesResponse{}
	_body, _err := client.ModifyGlobalAccelerationInstanceAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeServerRelatedGlobalAccelerationInstancesWithOptions(request *DescribeServerRelatedGlobalAccelerationInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeServerRelatedGlobalAccelerationInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeServerRelatedGlobalAccelerationInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeServerRelatedGlobalAccelerationInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeServerRelatedGlobalAccelerationInstances(request *DescribeServerRelatedGlobalAccelerationInstancesRequest) (_result *DescribeServerRelatedGlobalAccelerationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServerRelatedGlobalAccelerationInstancesResponse{}
	_body, _err := client.DescribeServerRelatedGlobalAccelerationInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGlobalAccelerationInstancesWithOptions(request *DescribeGlobalAccelerationInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeGlobalAccelerationInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeGlobalAccelerationInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeGlobalAccelerationInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGlobalAccelerationInstances(request *DescribeGlobalAccelerationInstancesRequest) (_result *DescribeGlobalAccelerationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGlobalAccelerationInstancesResponse{}
	_body, _err := client.DescribeGlobalAccelerationInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteGlobalAccelerationInstanceWithOptions(request *DeleteGlobalAccelerationInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteGlobalAccelerationInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteGlobalAccelerationInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteGlobalAccelerationInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteGlobalAccelerationInstance(request *DeleteGlobalAccelerationInstanceRequest) (_result *DeleteGlobalAccelerationInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGlobalAccelerationInstanceResponse{}
	_body, _err := client.DeleteGlobalAccelerationInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateGlobalAccelerationInstanceWithOptions(request *CreateGlobalAccelerationInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateGlobalAccelerationInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateGlobalAccelerationInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateGlobalAccelerationInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateGlobalAccelerationInstance(request *CreateGlobalAccelerationInstanceRequest) (_result *CreateGlobalAccelerationInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGlobalAccelerationInstanceResponse{}
	_body, _err := client.CreateGlobalAccelerationInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateGlobalAccelerationInstanceWithOptions(request *AssociateGlobalAccelerationInstanceRequest, runtime *util.RuntimeOptions) (_result *AssociateGlobalAccelerationInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateGlobalAccelerationInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateGlobalAccelerationInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateGlobalAccelerationInstance(request *AssociateGlobalAccelerationInstanceRequest) (_result *AssociateGlobalAccelerationInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateGlobalAccelerationInstanceResponse{}
	_body, _err := client.AssociateGlobalAccelerationInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVSwitchAttributesWithOptions(request *DescribeVSwitchAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeVSwitchAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVSwitchAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVSwitchAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVSwitchAttributes(request *DescribeVSwitchAttributesRequest) (_result *DescribeVSwitchAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVSwitchAttributesResponse{}
	_body, _err := client.DescribeVSwitchAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveCommonBandwidthPackageIpWithOptions(request *RemoveCommonBandwidthPackageIpRequest, runtime *util.RuntimeOptions) (_result *RemoveCommonBandwidthPackageIpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveCommonBandwidthPackageIpResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveCommonBandwidthPackageIp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveCommonBandwidthPackageIp(request *RemoveCommonBandwidthPackageIpRequest) (_result *RemoveCommonBandwidthPackageIpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveCommonBandwidthPackageIpResponse{}
	_body, _err := client.RemoveCommonBandwidthPackageIpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackageSpecWithOptions(request *ModifyCommonBandwidthPackageSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyCommonBandwidthPackageSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyCommonBandwidthPackageSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyCommonBandwidthPackageSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackageSpec(request *ModifyCommonBandwidthPackageSpecRequest) (_result *ModifyCommonBandwidthPackageSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCommonBandwidthPackageSpecResponse{}
	_body, _err := client.ModifyCommonBandwidthPackageSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackageAttributeWithOptions(request *ModifyCommonBandwidthPackageAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyCommonBandwidthPackageAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyCommonBandwidthPackageAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyCommonBandwidthPackageAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCommonBandwidthPackageAttribute(request *ModifyCommonBandwidthPackageAttributeRequest) (_result *ModifyCommonBandwidthPackageAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCommonBandwidthPackageAttributeResponse{}
	_body, _err := client.ModifyCommonBandwidthPackageAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCommonBandwidthPackagesWithOptions(request *DescribeCommonBandwidthPackagesRequest, runtime *util.RuntimeOptions) (_result *DescribeCommonBandwidthPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCommonBandwidthPackagesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCommonBandwidthPackages"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCommonBandwidthPackages(request *DescribeCommonBandwidthPackagesRequest) (_result *DescribeCommonBandwidthPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCommonBandwidthPackagesResponse{}
	_body, _err := client.DescribeCommonBandwidthPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCommonBandwidthPackageWithOptions(request *DeleteCommonBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *DeleteCommonBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCommonBandwidthPackageResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteCommonBandwidthPackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCommonBandwidthPackage(request *DeleteCommonBandwidthPackageRequest) (_result *DeleteCommonBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCommonBandwidthPackageResponse{}
	_body, _err := client.DeleteCommonBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCommonBandwidthPackageWithOptions(request *CreateCommonBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *CreateCommonBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCommonBandwidthPackageResponse{}
	_body, _err := client.DoRequest(tea.String("CreateCommonBandwidthPackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCommonBandwidthPackage(request *CreateCommonBandwidthPackageRequest) (_result *CreateCommonBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCommonBandwidthPackageResponse{}
	_body, _err := client.CreateCommonBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCommonBandwidthPackageIpWithOptions(request *AddCommonBandwidthPackageIpRequest, runtime *util.RuntimeOptions) (_result *AddCommonBandwidthPackageIpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddCommonBandwidthPackageIpResponse{}
	_body, _err := client.DoRequest(tea.String("AddCommonBandwidthPackageIp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCommonBandwidthPackageIp(request *AddCommonBandwidthPackageIpRequest) (_result *AddCommonBandwidthPackageIpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCommonBandwidthPackageIpResponse{}
	_body, _err := client.AddCommonBandwidthPackageIpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpnGatewayAttributeWithOptions(request *ModifyVpnGatewayAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVpnGatewayAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVpnGatewayAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVpnGatewayAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpnGatewayAttribute(request *ModifyVpnGatewayAttributeRequest) (_result *ModifyVpnGatewayAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpnGatewayAttributeResponse{}
	_body, _err := client.ModifyVpnGatewayAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpnConnectionAttributeWithOptions(request *ModifyVpnConnectionAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVpnConnectionAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVpnConnectionAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVpnConnectionAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpnConnectionAttribute(request *ModifyVpnConnectionAttributeRequest) (_result *ModifyVpnConnectionAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpnConnectionAttributeResponse{}
	_body, _err := client.ModifyVpnConnectionAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCustomerGatewayAttributeWithOptions(request *ModifyCustomerGatewayAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyCustomerGatewayAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyCustomerGatewayAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyCustomerGatewayAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCustomerGatewayAttribute(request *ModifyCustomerGatewayAttributeRequest) (_result *ModifyCustomerGatewayAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCustomerGatewayAttributeResponse{}
	_body, _err := client.ModifyCustomerGatewayAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DownloadVpnConnectionConfigWithOptions(request *DownloadVpnConnectionConfigRequest, runtime *util.RuntimeOptions) (_result *DownloadVpnConnectionConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DownloadVpnConnectionConfigResponse{}
	_body, _err := client.DoRequest(tea.String("DownloadVpnConnectionConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DownloadVpnConnectionConfig(request *DownloadVpnConnectionConfigRequest) (_result *DownloadVpnConnectionConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadVpnConnectionConfigResponse{}
	_body, _err := client.DownloadVpnConnectionConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpnGatewaysWithOptions(request *DescribeVpnGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeVpnGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpnGatewaysResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpnGateways"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpnGateways(request *DescribeVpnGatewaysRequest) (_result *DescribeVpnGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpnGatewaysResponse{}
	_body, _err := client.DescribeVpnGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpnGatewayWithOptions(request *DescribeVpnGatewayRequest, runtime *util.RuntimeOptions) (_result *DescribeVpnGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpnGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpnGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpnGateway(request *DescribeVpnGatewayRequest) (_result *DescribeVpnGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpnGatewayResponse{}
	_body, _err := client.DescribeVpnGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpnConnectionsWithOptions(request *DescribeVpnConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribeVpnConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpnConnectionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpnConnections"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpnConnections(request *DescribeVpnConnectionsRequest) (_result *DescribeVpnConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpnConnectionsResponse{}
	_body, _err := client.DescribeVpnConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpnConnectionWithOptions(request *DescribeVpnConnectionRequest, runtime *util.RuntimeOptions) (_result *DescribeVpnConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpnConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpnConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpnConnection(request *DescribeVpnConnectionRequest) (_result *DescribeVpnConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpnConnectionResponse{}
	_body, _err := client.DescribeVpnConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCustomerGatewaysWithOptions(request *DescribeCustomerGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomerGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCustomerGatewaysResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCustomerGateways"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCustomerGateways(request *DescribeCustomerGatewaysRequest) (_result *DescribeCustomerGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomerGatewaysResponse{}
	_body, _err := client.DescribeCustomerGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCustomerGatewayWithOptions(request *DescribeCustomerGatewayRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomerGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCustomerGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCustomerGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCustomerGateway(request *DescribeCustomerGatewayRequest) (_result *DescribeCustomerGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomerGatewayResponse{}
	_body, _err := client.DescribeCustomerGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpnGatewayWithOptions(request *DeleteVpnGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteVpnGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpnGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVpnGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpnGateway(request *DeleteVpnGatewayRequest) (_result *DeleteVpnGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpnGatewayResponse{}
	_body, _err := client.DeleteVpnGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpnConnectionWithOptions(request *DeleteVpnConnectionRequest, runtime *util.RuntimeOptions) (_result *DeleteVpnConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpnConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVpnConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpnConnection(request *DeleteVpnConnectionRequest) (_result *DeleteVpnConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpnConnectionResponse{}
	_body, _err := client.DeleteVpnConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCustomerGatewayWithOptions(request *DeleteCustomerGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomerGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCustomerGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteCustomerGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCustomerGateway(request *DeleteCustomerGatewayRequest) (_result *DeleteCustomerGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomerGatewayResponse{}
	_body, _err := client.DeleteCustomerGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVpnConnectionWithOptions(request *CreateVpnConnectionRequest, runtime *util.RuntimeOptions) (_result *CreateVpnConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpnConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVpnConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVpnConnection(request *CreateVpnConnectionRequest) (_result *CreateVpnConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVpnConnectionResponse{}
	_body, _err := client.CreateVpnConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCustomerGatewayWithOptions(request *CreateCustomerGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateCustomerGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCustomerGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("CreateCustomerGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCustomerGateway(request *CreateCustomerGatewayRequest) (_result *CreateCustomerGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomerGatewayResponse{}
	_body, _err := client.CreateCustomerGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBgpGroupAttributeWithOptions(request *ModifyBgpGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyBgpGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyBgpGroupAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyBgpGroupAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBgpGroupAttribute(request *ModifyBgpGroupAttributeRequest) (_result *ModifyBgpGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBgpGroupAttributeResponse{}
	_body, _err := client.ModifyBgpGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBgpPeersWithOptions(request *DescribeBgpPeersRequest, runtime *util.RuntimeOptions) (_result *DescribeBgpPeersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBgpPeersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBgpPeers"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBgpPeers(request *DescribeBgpPeersRequest) (_result *DescribeBgpPeersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBgpPeersResponse{}
	_body, _err := client.DescribeBgpPeersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBgpGroupsWithOptions(request *DescribeBgpGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeBgpGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBgpGroupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBgpGroups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBgpGroups(request *DescribeBgpGroupsRequest) (_result *DescribeBgpGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBgpGroupsResponse{}
	_body, _err := client.DescribeBgpGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBgpPeerWithOptions(request *DeleteBgpPeerRequest, runtime *util.RuntimeOptions) (_result *DeleteBgpPeerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBgpPeerResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteBgpPeer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBgpPeer(request *DeleteBgpPeerRequest) (_result *DeleteBgpPeerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBgpPeerResponse{}
	_body, _err := client.DeleteBgpPeerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBgpNetworkWithOptions(request *DeleteBgpNetworkRequest, runtime *util.RuntimeOptions) (_result *DeleteBgpNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBgpNetworkResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteBgpNetwork"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBgpNetwork(request *DeleteBgpNetworkRequest) (_result *DeleteBgpNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBgpNetworkResponse{}
	_body, _err := client.DeleteBgpNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBgpGroupWithOptions(request *DeleteBgpGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteBgpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBgpGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteBgpGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBgpGroup(request *DeleteBgpGroupRequest) (_result *DeleteBgpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBgpGroupResponse{}
	_body, _err := client.DeleteBgpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBgpPeerWithOptions(request *CreateBgpPeerRequest, runtime *util.RuntimeOptions) (_result *CreateBgpPeerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBgpPeerResponse{}
	_body, _err := client.DoRequest(tea.String("CreateBgpPeer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBgpPeer(request *CreateBgpPeerRequest) (_result *CreateBgpPeerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBgpPeerResponse{}
	_body, _err := client.CreateBgpPeerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBgpGroupWithOptions(request *CreateBgpGroupRequest, runtime *util.RuntimeOptions) (_result *CreateBgpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBgpGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateBgpGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBgpGroup(request *CreateBgpGroupRequest) (_result *CreateBgpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBgpGroupResponse{}
	_body, _err := client.CreateBgpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBgpNetworkWithOptions(request *AddBgpNetworkRequest, runtime *util.RuntimeOptions) (_result *AddBgpNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddBgpNetworkResponse{}
	_body, _err := client.DoRequest(tea.String("AddBgpNetwork"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBgpNetwork(request *AddBgpNetworkRequest) (_result *AddBgpNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBgpNetworkResponse{}
	_body, _err := client.AddBgpNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableVpcClassicLinkWithOptions(request *EnableVpcClassicLinkRequest, runtime *util.RuntimeOptions) (_result *EnableVpcClassicLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableVpcClassicLinkResponse{}
	_body, _err := client.DoRequest(tea.String("EnableVpcClassicLink"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableVpcClassicLink(request *EnableVpcClassicLinkRequest) (_result *EnableVpcClassicLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableVpcClassicLinkResponse{}
	_body, _err := client.EnableVpcClassicLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableVpcClassicLinkWithOptions(request *DisableVpcClassicLinkRequest, runtime *util.RuntimeOptions) (_result *DisableVpcClassicLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableVpcClassicLinkResponse{}
	_body, _err := client.DoRequest(tea.String("DisableVpcClassicLink"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableVpcClassicLink(request *DisableVpcClassicLinkRequest) (_result *DisableVpcClassicLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableVpcClassicLinkResponse{}
	_body, _err := client.DisableVpcClassicLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcAttributeWithOptions(request *DescribeVpcAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpcAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpcAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcAttribute(request *DescribeVpcAttributeRequest) (_result *DescribeVpcAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcAttributeResponse{}
	_body, _err := client.DescribeVpcAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociatePhysicalConnectionFromVirtualBorderRouterWithOptions(request *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *UnassociatePhysicalConnectionFromVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociatePhysicalConnectionFromVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociatePhysicalConnectionFromVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociatePhysicalConnectionFromVirtualBorderRouter(request *UnassociatePhysicalConnectionFromVirtualBorderRouterRequest) (_result *UnassociatePhysicalConnectionFromVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociatePhysicalConnectionFromVirtualBorderRouterResponse{}
	_body, _err := client.UnassociatePhysicalConnectionFromVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociatePhysicalConnectionToVirtualBorderRouterWithOptions(request *AssociatePhysicalConnectionToVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *AssociatePhysicalConnectionToVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociatePhysicalConnectionToVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("AssociatePhysicalConnectionToVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociatePhysicalConnectionToVirtualBorderRouter(request *AssociatePhysicalConnectionToVirtualBorderRouterRequest) (_result *AssociatePhysicalConnectionToVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociatePhysicalConnectionToVirtualBorderRouterResponse{}
	_body, _err := client.AssociatePhysicalConnectionToVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySnatEntryWithOptions(request *ModifySnatEntryRequest, runtime *util.RuntimeOptions) (_result *ModifySnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySnatEntryResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySnatEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySnatEntry(request *ModifySnatEntryRequest) (_result *ModifySnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySnatEntryResponse{}
	_body, _err := client.ModifySnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyNatGatewaySpecWithOptions(request *ModifyNatGatewaySpecRequest, runtime *util.RuntimeOptions) (_result *ModifyNatGatewaySpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyNatGatewaySpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyNatGatewaySpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyNatGatewaySpec(request *ModifyNatGatewaySpecRequest) (_result *ModifyNatGatewaySpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNatGatewaySpecResponse{}
	_body, _err := client.ModifyNatGatewaySpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyNatGatewayAttributeWithOptions(request *ModifyNatGatewayAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyNatGatewayAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyNatGatewayAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyNatGatewayAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyNatGatewayAttribute(request *ModifyNatGatewayAttributeRequest) (_result *ModifyNatGatewayAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNatGatewayAttributeResponse{}
	_body, _err := client.ModifyNatGatewayAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageAttributeWithOptions(request *ModifyBandwidthPackageAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyBandwidthPackageAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyBandwidthPackageAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyBandwidthPackageAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageAttribute(request *ModifyBandwidthPackageAttributeRequest) (_result *ModifyBandwidthPackageAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBandwidthPackageAttributeResponse{}
	_body, _err := client.ModifyBandwidthPackageAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnatTableEntriesWithOptions(request *DescribeSnatTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeSnatTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSnatTableEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSnatTableEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnatTableEntries(request *DescribeSnatTableEntriesRequest) (_result *DescribeSnatTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnatTableEntriesResponse{}
	_body, _err := client.DescribeSnatTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSnatEntryWithOptions(request *DeleteSnatEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSnatEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteSnatEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSnatEntry(request *DeleteSnatEntryRequest) (_result *DeleteSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnatEntryResponse{}
	_body, _err := client.DeleteSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSnatEntryWithOptions(request *CreateSnatEntryRequest, runtime *util.RuntimeOptions) (_result *CreateSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSnatEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSnatEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSnatEntry(request *CreateSnatEntryRequest) (_result *CreateSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSnatEntryResponse{}
	_body, _err := client.CreateSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBandwidthPackageWithOptions(request *CreateBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *CreateBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBandwidthPackageResponse{}
	_body, _err := client.DoRequest(tea.String("CreateBandwidthPackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBandwidthPackage(request *CreateBandwidthPackageRequest) (_result *CreateBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBandwidthPackageResponse{}
	_body, _err := client.CreateBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateHaVipWithOptions(request *UnassociateHaVipRequest, runtime *util.RuntimeOptions) (_result *UnassociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateHaVip(request *UnassociateHaVipRequest) (_result *UnassociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateHaVipResponse{}
	_body, _err := client.UnassociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateEipAddressWithOptions(request *UnassociateEipAddressRequest, runtime *util.RuntimeOptions) (_result *UnassociateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateEipAddress(request *UnassociateEipAddressRequest) (_result *UnassociateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateEipAddressResponse{}
	_body, _err := client.UnassociateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminateVirtualBorderRouterWithOptions(request *TerminateVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *TerminateVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TerminateVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("TerminateVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminateVirtualBorderRouter(request *TerminateVirtualBorderRouterRequest) (_result *TerminateVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateVirtualBorderRouterResponse{}
	_body, _err := client.TerminateVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminatePhysicalConnectionWithOptions(request *TerminatePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *TerminatePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TerminatePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("TerminatePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminatePhysicalConnection(request *TerminatePhysicalConnectionRequest) (_result *TerminatePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminatePhysicalConnectionResponse{}
	_body, _err := client.TerminatePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveBandwidthPackageIpsWithOptions(request *RemoveBandwidthPackageIpsRequest, runtime *util.RuntimeOptions) (_result *RemoveBandwidthPackageIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveBandwidthPackageIpsResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveBandwidthPackageIps"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveBandwidthPackageIps(request *RemoveBandwidthPackageIpsRequest) (_result *RemoveBandwidthPackageIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveBandwidthPackageIpsResponse{}
	_body, _err := client.RemoveBandwidthPackageIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseEipAddressWithOptions(request *ReleaseEipAddressRequest, runtime *util.RuntimeOptions) (_result *ReleaseEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseEipAddress(request *ReleaseEipAddressRequest) (_result *ReleaseEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseEipAddressResponse{}
	_body, _err := client.ReleaseEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecoverVirtualBorderRouterWithOptions(request *RecoverVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *RecoverVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RecoverVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("RecoverVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecoverVirtualBorderRouter(request *RecoverVirtualBorderRouterRequest) (_result *RecoverVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecoverVirtualBorderRouterResponse{}
	_body, _err := client.RecoverVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVSwitchAttributeWithOptions(request *ModifyVSwitchAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVSwitchAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVSwitchAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVSwitchAttribute(request *ModifyVSwitchAttributeRequest) (_result *ModifyVSwitchAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.ModifyVSwitchAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVRouterAttributeWithOptions(request *ModifyVRouterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVRouterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVRouterAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVRouterAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVRouterAttribute(request *ModifyVRouterAttributeRequest) (_result *ModifyVRouterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVRouterAttributeResponse{}
	_body, _err := client.ModifyVRouterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpcAttributeWithOptions(request *ModifyVpcAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVpcAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVpcAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVpcAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpcAttribute(request *ModifyVpcAttributeRequest) (_result *ModifyVpcAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpcAttributeResponse{}
	_body, _err := client.ModifyVpcAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVirtualBorderRouterAttributeWithOptions(request *ModifyVirtualBorderRouterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVirtualBorderRouterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVirtualBorderRouterAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVirtualBorderRouterAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVirtualBorderRouterAttribute(request *ModifyVirtualBorderRouterAttributeRequest) (_result *ModifyVirtualBorderRouterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVirtualBorderRouterAttributeResponse{}
	_body, _err := client.ModifyVirtualBorderRouterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceSpecWithOptions(request *ModifyRouterInterfaceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyRouterInterfaceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyRouterInterfaceSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyRouterInterfaceSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceSpec(request *ModifyRouterInterfaceSpecRequest) (_result *ModifyRouterInterfaceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouterInterfaceSpecResponse{}
	_body, _err := client.ModifyRouterInterfaceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceAttributeWithOptions(request *ModifyRouterInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyRouterInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyRouterInterfaceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyRouterInterfaceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceAttribute(request *ModifyRouterInterfaceAttributeRequest) (_result *ModifyRouterInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouterInterfaceAttributeResponse{}
	_body, _err := client.ModifyRouterInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPhysicalConnectionAttributeWithOptions(request *ModifyPhysicalConnectionAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyPhysicalConnectionAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyPhysicalConnectionAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyPhysicalConnectionAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPhysicalConnectionAttribute(request *ModifyPhysicalConnectionAttributeRequest) (_result *ModifyPhysicalConnectionAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPhysicalConnectionAttributeResponse{}
	_body, _err := client.ModifyPhysicalConnectionAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHaVipAttributeWithOptions(request *ModifyHaVipAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyHaVipAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyHaVipAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyHaVipAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHaVipAttribute(request *ModifyHaVipAttributeRequest) (_result *ModifyHaVipAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHaVipAttributeResponse{}
	_body, _err := client.ModifyHaVipAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyForwardEntryWithOptions(request *ModifyForwardEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyForwardEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyForwardEntry(request *ModifyForwardEntryRequest) (_result *ModifyForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.ModifyForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEipAddressAttributeWithOptions(request *ModifyEipAddressAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyEipAddressAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyEipAddressAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyEipAddressAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEipAddressAttribute(request *ModifyEipAddressAttributeRequest) (_result *ModifyEipAddressAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEipAddressAttributeResponse{}
	_body, _err := client.ModifyEipAddressAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageSpecWithOptions(request *ModifyBandwidthPackageSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyBandwidthPackageSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyBandwidthPackageSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyBandwidthPackageSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageSpec(request *ModifyBandwidthPackageSpecRequest) (_result *ModifyBandwidthPackageSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBandwidthPackageSpecResponse{}
	_body, _err := client.ModifyBandwidthPackageSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnablePhysicalConnectionWithOptions(request *EnablePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *EnablePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnablePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("EnablePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnablePhysicalConnection(request *EnablePhysicalConnectionRequest) (_result *EnablePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnablePhysicalConnectionResponse{}
	_body, _err := client.EnablePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeZonesWithOptions(request *DescribeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeZones"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeZones(request *DescribeZonesRequest) (_result *DescribeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DescribeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVSwitchesWithOptions(request *DescribeVSwitchesRequest, runtime *util.RuntimeOptions) (_result *DescribeVSwitchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVSwitches"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVSwitches(request *DescribeVSwitchesRequest) (_result *DescribeVSwitchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DescribeVSwitchesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVRoutersWithOptions(request *DescribeVRoutersRequest, runtime *util.RuntimeOptions) (_result *DescribeVRoutersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVRoutersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVRouters"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVRouters(request *DescribeVRoutersRequest) (_result *DescribeVRoutersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVRoutersResponse{}
	_body, _err := client.DescribeVRoutersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcsWithOptions(request *DescribeVpcsRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpcsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpcs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcs(request *DescribeVpcsRequest) (_result *DescribeVpcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcsResponse{}
	_body, _err := client.DescribeVpcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersForPhysicalConnectionWithOptions(request *DescribeVirtualBorderRoutersForPhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *DescribeVirtualBorderRoutersForPhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVirtualBorderRoutersForPhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVirtualBorderRoutersForPhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersForPhysicalConnection(request *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) (_result *DescribeVirtualBorderRoutersForPhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVirtualBorderRoutersForPhysicalConnectionResponse{}
	_body, _err := client.DescribeVirtualBorderRoutersForPhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersWithOptions(request *DescribeVirtualBorderRoutersRequest, runtime *util.RuntimeOptions) (_result *DescribeVirtualBorderRoutersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVirtualBorderRoutersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVirtualBorderRouters"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRouters(request *DescribeVirtualBorderRoutersRequest) (_result *DescribeVirtualBorderRoutersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVirtualBorderRoutersResponse{}
	_body, _err := client.DescribeVirtualBorderRoutersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouteTablesWithOptions(request *DescribeRouteTablesRequest, runtime *util.RuntimeOptions) (_result *DescribeRouteTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRouteTablesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRouteTables"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouteTables(request *DescribeRouteTablesRequest) (_result *DescribeRouteTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouteTablesResponse{}
	_body, _err := client.DescribeRouteTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouterInterfacesWithOptions(request *DescribeRouterInterfacesRequest, runtime *util.RuntimeOptions) (_result *DescribeRouterInterfacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRouterInterfacesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRouterInterfaces"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouterInterfaces(request *DescribeRouterInterfacesRequest) (_result *DescribeRouterInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouterInterfacesResponse{}
	_body, _err := client.DescribeRouterInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRegions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribePhysicalConnections Query physical connections in a region.
 * request demo:   * https://vpc.aliyuncs.com/?Action=DescribePhysicalConnections
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) DescribePhysicalConnectionsWithOptions(request *DescribePhysicalConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribePhysicalConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribePhysicalConnectionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribePhysicalConnections"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribePhysicalConnections Query physical connections in a region.
 * request demo:   * https://vpc.aliyuncs.com/?Action=DescribePhysicalConnections
 * &RegionId=cn-hangzhou
 * &<CommonParameters>
 * description:
*/
func (client *Client) DescribePhysicalConnections(request *DescribePhysicalConnectionsRequest) (_result *DescribePhysicalConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePhysicalConnectionsResponse{}
	_body, _err := client.DescribePhysicalConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNewProjectEipMonitorDataWithOptions(request *DescribeNewProjectEipMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeNewProjectEipMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNewProjectEipMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNewProjectEipMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNewProjectEipMonitorData(request *DescribeNewProjectEipMonitorDataRequest) (_result *DescribeNewProjectEipMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNewProjectEipMonitorDataResponse{}
	_body, _err := client.DescribeNewProjectEipMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNatGatewaysWithOptions(request *DescribeNatGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeNatGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNatGateways"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNatGateways(request *DescribeNatGatewaysRequest) (_result *DescribeNatGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DescribeNatGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHaVipsWithOptions(request *DescribeHaVipsRequest, runtime *util.RuntimeOptions) (_result *DescribeHaVipsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeHaVipsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeHaVips"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHaVips(request *DescribeHaVipsRequest) (_result *DescribeHaVipsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHaVipsResponse{}
	_body, _err := client.DescribeHaVipsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeForwardTableEntriesWithOptions(request *DescribeForwardTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeForwardTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeForwardTableEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeForwardTableEntries(request *DescribeForwardTableEntriesRequest) (_result *DescribeForwardTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DescribeForwardTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipMonitorDataWithOptions(request *DescribeEipMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEipMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEipMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEipMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipMonitorData(request *DescribeEipMonitorDataRequest) (_result *DescribeEipMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipMonitorDataResponse{}
	_body, _err := client.DescribeEipMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipAddressesWithOptions(request *DescribeEipAddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeEipAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEipAddresses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipAddresses(request *DescribeEipAddressesRequest) (_result *DescribeEipAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.DescribeEipAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandwidthPackagesWithOptions(request *DescribeBandwidthPackagesRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwidthPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBandwidthPackagesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBandwidthPackages"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandwidthPackages(request *DescribeBandwidthPackagesRequest) (_result *DescribeBandwidthPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwidthPackagesResponse{}
	_body, _err := client.DescribeBandwidthPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccessPointsWithOptions(request *DescribeAccessPointsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessPointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAccessPointsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAccessPoints"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccessPoints(request *DescribeAccessPointsRequest) (_result *DescribeAccessPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessPointsResponse{}
	_body, _err := client.DescribeAccessPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVSwitchWithOptions(request *DeleteVSwitchRequest, runtime *util.RuntimeOptions) (_result *DeleteVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVSwitch"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVSwitch(request *DeleteVSwitchRequest) (_result *DeleteVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DeleteVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpcWithOptions(request *DeleteVpcRequest, runtime *util.RuntimeOptions) (_result *DeleteVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpcResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpc(request *DeleteVpcRequest) (_result *DeleteVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpcResponse{}
	_body, _err := client.DeleteVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVirtualBorderRouterWithOptions(request *DeleteVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *DeleteVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVirtualBorderRouter(request *DeleteVirtualBorderRouterRequest) (_result *DeleteVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVirtualBorderRouterResponse{}
	_body, _err := client.DeleteVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouterInterfaceWithOptions(request *DeleteRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeleteRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouterInterface(request *DeleteRouterInterfaceRequest) (_result *DeleteRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouterInterfaceResponse{}
	_body, _err := client.DeleteRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouteEntryWithOptions(request *DeleteRouteEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouteEntry(request *DeleteRouteEntryRequest) (_result *DeleteRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouteEntryResponse{}
	_body, _err := client.DeleteRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePhysicalConnectionWithOptions(request *DeletePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *DeletePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeletePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("DeletePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePhysicalConnection(request *DeletePhysicalConnectionRequest) (_result *DeletePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePhysicalConnectionResponse{}
	_body, _err := client.DeletePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNatGatewayWithOptions(request *DeleteNatGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteNatGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNatGateway(request *DeleteNatGatewayRequest) (_result *DeleteNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DeleteNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHaVipWithOptions(request *DeleteHaVipRequest, runtime *util.RuntimeOptions) (_result *DeleteHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHaVip(request *DeleteHaVipRequest) (_result *DeleteHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHaVipResponse{}
	_body, _err := client.DeleteHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteForwardEntryWithOptions(request *DeleteForwardEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteForwardEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteForwardEntry(request *DeleteForwardEntryRequest) (_result *DeleteForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DeleteForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBandwidthPackageWithOptions(request *DeleteBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *DeleteBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBandwidthPackageResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteBandwidthPackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBandwidthPackage(request *DeleteBandwidthPackageRequest) (_result *DeleteBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBandwidthPackageResponse{}
	_body, _err := client.DeleteBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeactivateRouterInterfaceWithOptions(request *DeactivateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeactivateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeactivateRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("DeactivateRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeactivateRouterInterface(request *DeactivateRouterInterfaceRequest) (_result *DeactivateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeactivateRouterInterfaceResponse{}
	_body, _err := client.DeactivateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVSwitchWithOptions(request *CreateVSwitchRequest, runtime *util.RuntimeOptions) (_result *CreateVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVSwitch"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVSwitch(request *CreateVSwitchRequest) (_result *CreateVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.CreateVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVpcWithOptions(request *CreateVpcRequest, runtime *util.RuntimeOptions) (_result *CreateVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpcResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVpc(request *CreateVpcRequest) (_result *CreateVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVpcResponse{}
	_body, _err := client.CreateVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVirtualBorderRouterWithOptions(request *CreateVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *CreateVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVirtualBorderRouter(request *CreateVirtualBorderRouterRequest) (_result *CreateVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVirtualBorderRouterResponse{}
	_body, _err := client.CreateVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRouterInterfaceWithOptions(request *CreateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *CreateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRouterInterface(request *CreateRouterInterfaceRequest) (_result *CreateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouterInterfaceResponse{}
	_body, _err := client.CreateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRouteEntryWithOptions(request *CreateRouteEntryRequest, runtime *util.RuntimeOptions) (_result *CreateRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRouteEntry(request *CreateRouteEntryRequest) (_result *CreateRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouteEntryResponse{}
	_body, _err := client.CreateRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreatePhysicalConnectionWithOptions(request *CreatePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *CreatePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("CreatePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreatePhysicalConnection(request *CreatePhysicalConnectionRequest) (_result *CreatePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePhysicalConnectionResponse{}
	_body, _err := client.CreatePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNatGatewayWithOptions(request *CreateNatGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("CreateNatGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNatGateway(request *CreateNatGatewayRequest) (_result *CreateNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.CreateNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHaVipWithOptions(request *CreateHaVipRequest, runtime *util.RuntimeOptions) (_result *CreateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("CreateHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHaVip(request *CreateHaVipRequest) (_result *CreateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHaVipResponse{}
	_body, _err := client.CreateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateForwardEntryWithOptions(request *CreateForwardEntryRequest, runtime *util.RuntimeOptions) (_result *CreateForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateForwardEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateForwardEntry(request *CreateForwardEntryRequest) (_result *CreateForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.CreateForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConnectRouterInterfaceWithOptions(request *ConnectRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *ConnectRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConnectRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("ConnectRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConnectRouterInterface(request *ConnectRouterInterfaceRequest) (_result *ConnectRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConnectRouterInterfaceResponse{}
	_body, _err := client.ConnectRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelPhysicalConnectionWithOptions(request *CancelPhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *CancelPhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelPhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("CancelPhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelPhysicalConnection(request *CancelPhysicalConnectionRequest) (_result *CancelPhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelPhysicalConnectionResponse{}
	_body, _err := client.CancelPhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateHaVipWithOptions(request *AssociateHaVipRequest, runtime *util.RuntimeOptions) (_result *AssociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateHaVip(request *AssociateHaVipRequest) (_result *AssociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateHaVipResponse{}
	_body, _err := client.AssociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateEipAddressWithOptions(request *AssociateEipAddressRequest, runtime *util.RuntimeOptions) (_result *AssociateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateEipAddress(request *AssociateEipAddressRequest) (_result *AssociateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateEipAddressResponse{}
	_body, _err := client.AssociateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateEipAddressWithOptions(request *AllocateEipAddressRequest, runtime *util.RuntimeOptions) (_result *AllocateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateEipAddress(request *AllocateEipAddressRequest) (_result *AllocateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateEipAddressResponse{}
	_body, _err := client.AllocateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBandwidthPackageIpsWithOptions(request *AddBandwidthPackageIpsRequest, runtime *util.RuntimeOptions) (_result *AddBandwidthPackageIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddBandwidthPackageIpsResponse{}
	_body, _err := client.DoRequest(tea.String("AddBandwidthPackageIps"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBandwidthPackageIps(request *AddBandwidthPackageIpsRequest) (_result *AddBandwidthPackageIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBandwidthPackageIpsResponse{}
	_body, _err := client.AddBandwidthPackageIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ActivateRouterInterfaceWithOptions(request *ActivateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *ActivateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ActivateRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("ActivateRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2016-04-28"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ActivateRouterInterface(request *ActivateRouterInterfaceRequest) (_result *ActivateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActivateRouterInterfaceResponse{}
	_body, _err := client.ActivateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
