// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddVsPullStreamInfoConfigRequest struct {
	Always *string `json:"Always,omitempty" xml:"Always,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2017-08-28T09:30:30Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// up.******.com.cn
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	// example:
	//
	// 2017-08-28T07:30:30Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s AddVsPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddVsPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *AddVsPullStreamInfoConfigRequest) SetAlways(v string) *AddVsPullStreamInfoConfigRequest {
	s.Always = &v
	return s
}

func (s *AddVsPullStreamInfoConfigRequest) SetAppName(v string) *AddVsPullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddVsPullStreamInfoConfigRequest) SetDomainName(v string) *AddVsPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddVsPullStreamInfoConfigRequest) SetEndTime(v string) *AddVsPullStreamInfoConfigRequest {
	s.EndTime = &v
	return s
}

func (s *AddVsPullStreamInfoConfigRequest) SetOwnerId(v int64) *AddVsPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddVsPullStreamInfoConfigRequest) SetSourceUrl(v string) *AddVsPullStreamInfoConfigRequest {
	s.SourceUrl = &v
	return s
}

func (s *AddVsPullStreamInfoConfigRequest) SetStartTime(v string) *AddVsPullStreamInfoConfigRequest {
	s.StartTime = &v
	return s
}

func (s *AddVsPullStreamInfoConfigRequest) SetStreamName(v string) *AddVsPullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

type AddVsPullStreamInfoConfigResponseBody struct {
	// example:
	//
	// 3CB843A9-DD34-4881-B8D6-B0D539D111E4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddVsPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddVsPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddVsPullStreamInfoConfigResponseBody) SetRequestId(v string) *AddVsPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddVsPullStreamInfoConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddVsPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddVsPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddVsPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *AddVsPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *AddVsPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *AddVsPullStreamInfoConfigResponse) SetStatusCode(v int32) *AddVsPullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddVsPullStreamInfoConfigResponse) SetBody(v *AddVsPullStreamInfoConfigResponseBody) *AddVsPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type BatchBindDirectoriesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchBindDirectoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDirectoriesRequest) GoString() string {
	return s.String()
}

func (s *BatchBindDirectoriesRequest) SetDeviceId(v string) *BatchBindDirectoriesRequest {
	s.DeviceId = &v
	return s
}

func (s *BatchBindDirectoriesRequest) SetDirectoryId(v string) *BatchBindDirectoriesRequest {
	s.DirectoryId = &v
	return s
}

func (s *BatchBindDirectoriesRequest) SetOwnerId(v int64) *BatchBindDirectoriesRequest {
	s.OwnerId = &v
	return s
}

type BatchBindDirectoriesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchBindDirectoriesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchBindDirectoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDirectoriesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchBindDirectoriesResponseBody) SetRequestId(v string) *BatchBindDirectoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchBindDirectoriesResponseBody) SetResults(v []*BatchBindDirectoriesResponseBodyResults) *BatchBindDirectoriesResponseBody {
	s.Results = v
	return s
}

type BatchBindDirectoriesResponseBodyResults struct {
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// example:
	//
	// An error occurred while processing your request.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
}

func (s BatchBindDirectoriesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDirectoriesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchBindDirectoriesResponseBodyResults) SetDeviceId(v string) *BatchBindDirectoriesResponseBodyResults {
	s.DeviceId = &v
	return s
}

func (s *BatchBindDirectoriesResponseBodyResults) SetDirectoryId(v string) *BatchBindDirectoriesResponseBodyResults {
	s.DirectoryId = &v
	return s
}

func (s *BatchBindDirectoriesResponseBodyResults) SetError(v string) *BatchBindDirectoriesResponseBodyResults {
	s.Error = &v
	return s
}

type BatchBindDirectoriesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchBindDirectoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchBindDirectoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDirectoriesResponse) GoString() string {
	return s.String()
}

func (s *BatchBindDirectoriesResponse) SetHeaders(v map[string]*string) *BatchBindDirectoriesResponse {
	s.Headers = v
	return s
}

func (s *BatchBindDirectoriesResponse) SetStatusCode(v int32) *BatchBindDirectoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchBindDirectoriesResponse) SetBody(v *BatchBindDirectoriesResponseBody) *BatchBindDirectoriesResponse {
	s.Body = v
	return s
}

type BatchBindParentPlatformDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 361*****212-cn-qingdao
	ParentPlatformId *string `json:"ParentPlatformId,omitempty" xml:"ParentPlatformId,omitempty"`
}

func (s BatchBindParentPlatformDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindParentPlatformDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchBindParentPlatformDevicesRequest) SetDeviceId(v string) *BatchBindParentPlatformDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *BatchBindParentPlatformDevicesRequest) SetOwnerId(v int64) *BatchBindParentPlatformDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchBindParentPlatformDevicesRequest) SetParentPlatformId(v string) *BatchBindParentPlatformDevicesRequest {
	s.ParentPlatformId = &v
	return s
}

type BatchBindParentPlatformDevicesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchBindParentPlatformDevicesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchBindParentPlatformDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchBindParentPlatformDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchBindParentPlatformDevicesResponseBody) SetRequestId(v string) *BatchBindParentPlatformDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchBindParentPlatformDevicesResponseBody) SetResults(v []*BatchBindParentPlatformDevicesResponseBodyResults) *BatchBindParentPlatformDevicesResponseBody {
	s.Results = v
	return s
}

type BatchBindParentPlatformDevicesResponseBodyResults struct {
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 361*****212-cn-qingdao
	ParentPlatformId *string `json:"ParentPlatformId,omitempty" xml:"ParentPlatformId,omitempty"`
}

func (s BatchBindParentPlatformDevicesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchBindParentPlatformDevicesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchBindParentPlatformDevicesResponseBodyResults) SetDeviceId(v string) *BatchBindParentPlatformDevicesResponseBodyResults {
	s.DeviceId = &v
	return s
}

func (s *BatchBindParentPlatformDevicesResponseBodyResults) SetError(v string) *BatchBindParentPlatformDevicesResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchBindParentPlatformDevicesResponseBodyResults) SetParentPlatformId(v string) *BatchBindParentPlatformDevicesResponseBodyResults {
	s.ParentPlatformId = &v
	return s
}

type BatchBindParentPlatformDevicesResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchBindParentPlatformDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchBindParentPlatformDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindParentPlatformDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchBindParentPlatformDevicesResponse) SetHeaders(v map[string]*string) *BatchBindParentPlatformDevicesResponse {
	s.Headers = v
	return s
}

func (s *BatchBindParentPlatformDevicesResponse) SetStatusCode(v int32) *BatchBindParentPlatformDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchBindParentPlatformDevicesResponse) SetBody(v *BatchBindParentPlatformDevicesResponseBody) *BatchBindParentPlatformDevicesResponse {
	s.Body = v
	return s
}

type BatchBindPurchasedDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s BatchBindPurchasedDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindPurchasedDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchBindPurchasedDevicesRequest) SetDeviceId(v string) *BatchBindPurchasedDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *BatchBindPurchasedDevicesRequest) SetGroupId(v string) *BatchBindPurchasedDevicesRequest {
	s.GroupId = &v
	return s
}

func (s *BatchBindPurchasedDevicesRequest) SetOwnerId(v int64) *BatchBindPurchasedDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchBindPurchasedDevicesRequest) SetRegion(v string) *BatchBindPurchasedDevicesRequest {
	s.Region = &v
	return s
}

type BatchBindPurchasedDevicesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchBindPurchasedDevicesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchBindPurchasedDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchBindPurchasedDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchBindPurchasedDevicesResponseBody) SetRequestId(v string) *BatchBindPurchasedDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchBindPurchasedDevicesResponseBody) SetResults(v []*BatchBindPurchasedDevicesResponseBodyResults) *BatchBindPurchasedDevicesResponseBody {
	s.Results = v
	return s
}

type BatchBindPurchasedDevicesResponseBodyResults struct {
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 238*****380-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s BatchBindPurchasedDevicesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchBindPurchasedDevicesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchBindPurchasedDevicesResponseBodyResults) SetDeviceId(v string) *BatchBindPurchasedDevicesResponseBodyResults {
	s.DeviceId = &v
	return s
}

func (s *BatchBindPurchasedDevicesResponseBodyResults) SetError(v string) *BatchBindPurchasedDevicesResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchBindPurchasedDevicesResponseBodyResults) SetGroupId(v string) *BatchBindPurchasedDevicesResponseBodyResults {
	s.GroupId = &v
	return s
}

func (s *BatchBindPurchasedDevicesResponseBodyResults) SetRegion(v string) *BatchBindPurchasedDevicesResponseBodyResults {
	s.Region = &v
	return s
}

type BatchBindPurchasedDevicesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchBindPurchasedDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchBindPurchasedDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindPurchasedDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchBindPurchasedDevicesResponse) SetHeaders(v map[string]*string) *BatchBindPurchasedDevicesResponse {
	s.Headers = v
	return s
}

func (s *BatchBindPurchasedDevicesResponse) SetStatusCode(v int32) *BatchBindPurchasedDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchBindPurchasedDevicesResponse) SetBody(v *BatchBindPurchasedDevicesResponseBody) *BatchBindPurchasedDevicesResponse {
	s.Body = v
	return s
}

type BatchBindTemplateRequest struct {
	// example:
	//
	// false
	ApplyAll *bool `json:"ApplyAll,omitempty" xml:"ApplyAll,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// false
	Replace *bool `json:"Replace,omitempty" xml:"Replace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s BatchBindTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplateRequest) GoString() string {
	return s.String()
}

func (s *BatchBindTemplateRequest) SetApplyAll(v bool) *BatchBindTemplateRequest {
	s.ApplyAll = &v
	return s
}

func (s *BatchBindTemplateRequest) SetInstanceId(v string) *BatchBindTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchBindTemplateRequest) SetInstanceType(v string) *BatchBindTemplateRequest {
	s.InstanceType = &v
	return s
}

func (s *BatchBindTemplateRequest) SetOwnerId(v int64) *BatchBindTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchBindTemplateRequest) SetReplace(v bool) *BatchBindTemplateRequest {
	s.Replace = &v
	return s
}

func (s *BatchBindTemplateRequest) SetTemplateId(v string) *BatchBindTemplateRequest {
	s.TemplateId = &v
	return s
}

type BatchBindTemplateResponseBody struct {
	Bindings []*BatchBindTemplateResponseBodyBindings `json:"Bindings,omitempty" xml:"Bindings,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchBindTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *BatchBindTemplateResponseBody) SetBindings(v []*BatchBindTemplateResponseBodyBindings) *BatchBindTemplateResponseBody {
	s.Bindings = v
	return s
}

func (s *BatchBindTemplateResponseBody) SetRequestId(v string) *BatchBindTemplateResponseBody {
	s.RequestId = &v
	return s
}

type BatchBindTemplateResponseBodyBindings struct {
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s BatchBindTemplateResponseBodyBindings) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplateResponseBodyBindings) GoString() string {
	return s.String()
}

func (s *BatchBindTemplateResponseBodyBindings) SetError(v string) *BatchBindTemplateResponseBodyBindings {
	s.Error = &v
	return s
}

func (s *BatchBindTemplateResponseBodyBindings) SetInstanceId(v string) *BatchBindTemplateResponseBodyBindings {
	s.InstanceId = &v
	return s
}

func (s *BatchBindTemplateResponseBodyBindings) SetInstanceType(v string) *BatchBindTemplateResponseBodyBindings {
	s.InstanceType = &v
	return s
}

func (s *BatchBindTemplateResponseBodyBindings) SetTemplateId(v string) *BatchBindTemplateResponseBodyBindings {
	s.TemplateId = &v
	return s
}

type BatchBindTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchBindTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchBindTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplateResponse) GoString() string {
	return s.String()
}

func (s *BatchBindTemplateResponse) SetHeaders(v map[string]*string) *BatchBindTemplateResponse {
	s.Headers = v
	return s
}

func (s *BatchBindTemplateResponse) SetStatusCode(v int32) *BatchBindTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchBindTemplateResponse) SetBody(v *BatchBindTemplateResponseBody) *BatchBindTemplateResponse {
	s.Body = v
	return s
}

type BatchBindTemplatesRequest struct {
	// example:
	//
	// false
	ApplyAll *bool `json:"ApplyAll,omitempty" xml:"ApplyAll,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stream
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// true
	Replace *bool `json:"Replace,omitempty" xml:"Replace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// timeshift
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s BatchBindTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplatesRequest) GoString() string {
	return s.String()
}

func (s *BatchBindTemplatesRequest) SetApplyAll(v bool) *BatchBindTemplatesRequest {
	s.ApplyAll = &v
	return s
}

func (s *BatchBindTemplatesRequest) SetInstanceId(v string) *BatchBindTemplatesRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchBindTemplatesRequest) SetInstanceType(v string) *BatchBindTemplatesRequest {
	s.InstanceType = &v
	return s
}

func (s *BatchBindTemplatesRequest) SetOwnerId(v int64) *BatchBindTemplatesRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchBindTemplatesRequest) SetReplace(v bool) *BatchBindTemplatesRequest {
	s.Replace = &v
	return s
}

func (s *BatchBindTemplatesRequest) SetTemplateId(v string) *BatchBindTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *BatchBindTemplatesRequest) SetTemplateType(v string) *BatchBindTemplatesRequest {
	s.TemplateType = &v
	return s
}

type BatchBindTemplatesResponseBody struct {
	// example:
	//
	// 20D0DFCE-5DB7-5D83-BD82-8482F2327636
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchBindTemplatesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchBindTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchBindTemplatesResponseBody) SetRequestId(v string) *BatchBindTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchBindTemplatesResponseBody) SetResults(v []*BatchBindTemplatesResponseBodyResults) *BatchBindTemplatesResponseBody {
	s.Results = v
	return s
}

type BatchBindTemplatesResponseBodyResults struct {
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s BatchBindTemplatesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplatesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchBindTemplatesResponseBodyResults) SetError(v string) *BatchBindTemplatesResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchBindTemplatesResponseBodyResults) SetInstanceId(v string) *BatchBindTemplatesResponseBodyResults {
	s.InstanceId = &v
	return s
}

func (s *BatchBindTemplatesResponseBodyResults) SetInstanceType(v string) *BatchBindTemplatesResponseBodyResults {
	s.InstanceType = &v
	return s
}

func (s *BatchBindTemplatesResponseBodyResults) SetTemplateId(v string) *BatchBindTemplatesResponseBodyResults {
	s.TemplateId = &v
	return s
}

type BatchBindTemplatesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchBindTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchBindTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindTemplatesResponse) GoString() string {
	return s.String()
}

func (s *BatchBindTemplatesResponse) SetHeaders(v map[string]*string) *BatchBindTemplatesResponse {
	s.Headers = v
	return s
}

func (s *BatchBindTemplatesResponse) SetStatusCode(v int32) *BatchBindTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchBindTemplatesResponse) SetBody(v *BatchBindTemplatesResponseBody) *BatchBindTemplatesResponse {
	s.Body = v
	return s
}

type BatchDeleteDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 32388****39092996
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchDeleteDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteDevicesRequest) SetId(v string) *BatchDeleteDevicesRequest {
	s.Id = &v
	return s
}

func (s *BatchDeleteDevicesRequest) SetOwnerId(v int64) *BatchDeleteDevicesRequest {
	s.OwnerId = &v
	return s
}

type BatchDeleteDevicesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchDeleteDevicesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchDeleteDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteDevicesResponseBody) SetRequestId(v string) *BatchDeleteDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteDevicesResponseBody) SetResults(v []*BatchDeleteDevicesResponseBodyResults) *BatchDeleteDevicesResponseBody {
	s.Results = v
	return s
}

type BatchDeleteDevicesResponseBodyResults struct {
	// example:
	//
	// Device not found
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323884****9092996
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s BatchDeleteDevicesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDevicesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchDeleteDevicesResponseBodyResults) SetError(v string) *BatchDeleteDevicesResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchDeleteDevicesResponseBodyResults) SetId(v string) *BatchDeleteDevicesResponseBodyResults {
	s.Id = &v
	return s
}

type BatchDeleteDevicesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchDeleteDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchDeleteDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteDevicesResponse) SetHeaders(v map[string]*string) *BatchDeleteDevicesResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteDevicesResponse) SetStatusCode(v int32) *BatchDeleteDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchDeleteDevicesResponse) SetBody(v *BatchDeleteDevicesResponseBody) *BatchDeleteDevicesResponse {
	s.Body = v
	return s
}

type BatchDeleteVsDomainConfigsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainNames *string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https_force
	FunctionNames *string `json:"FunctionNames,omitempty" xml:"FunctionNames,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchDeleteVsDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteVsDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteVsDomainConfigsRequest) SetDomainNames(v string) *BatchDeleteVsDomainConfigsRequest {
	s.DomainNames = &v
	return s
}

func (s *BatchDeleteVsDomainConfigsRequest) SetFunctionNames(v string) *BatchDeleteVsDomainConfigsRequest {
	s.FunctionNames = &v
	return s
}

func (s *BatchDeleteVsDomainConfigsRequest) SetOwnerId(v int64) *BatchDeleteVsDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

type BatchDeleteVsDomainConfigsResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchDeleteVsDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteVsDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteVsDomainConfigsResponseBody) SetRequestId(v string) *BatchDeleteVsDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type BatchDeleteVsDomainConfigsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchDeleteVsDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchDeleteVsDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteVsDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteVsDomainConfigsResponse) SetHeaders(v map[string]*string) *BatchDeleteVsDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteVsDomainConfigsResponse) SetStatusCode(v int32) *BatchDeleteVsDomainConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchDeleteVsDomainConfigsResponse) SetBody(v *BatchDeleteVsDomainConfigsResponseBody) *BatchDeleteVsDomainConfigsResponse {
	s.Body = v
	return s
}

type BatchForbidVsStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// live/stream1,live/stream2
	Channel             *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ControlStreamAction *string `json:"ControlStreamAction,omitempty" xml:"ControlStreamAction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// publisher
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	// example:
	//
	// yes
	Oneshot *string `json:"Oneshot,omitempty" xml:"Oneshot,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2015-12-01T17:37:00Z
	ResumeTime *string `json:"ResumeTime,omitempty" xml:"ResumeTime,omitempty"`
}

func (s BatchForbidVsStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchForbidVsStreamRequest) GoString() string {
	return s.String()
}

func (s *BatchForbidVsStreamRequest) SetChannel(v string) *BatchForbidVsStreamRequest {
	s.Channel = &v
	return s
}

func (s *BatchForbidVsStreamRequest) SetControlStreamAction(v string) *BatchForbidVsStreamRequest {
	s.ControlStreamAction = &v
	return s
}

func (s *BatchForbidVsStreamRequest) SetDomainName(v string) *BatchForbidVsStreamRequest {
	s.DomainName = &v
	return s
}

func (s *BatchForbidVsStreamRequest) SetLiveStreamType(v string) *BatchForbidVsStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *BatchForbidVsStreamRequest) SetOneshot(v string) *BatchForbidVsStreamRequest {
	s.Oneshot = &v
	return s
}

func (s *BatchForbidVsStreamRequest) SetOwnerId(v int64) *BatchForbidVsStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchForbidVsStreamRequest) SetResumeTime(v string) *BatchForbidVsStreamRequest {
	s.ResumeTime = &v
	return s
}

type BatchForbidVsStreamResponseBody struct {
	ForbidResult *BatchForbidVsStreamResponseBodyForbidResult `json:"ForbidResult,omitempty" xml:"ForbidResult,omitempty" type:"Struct"`
	// example:
	//
	// B058D71B-76EA-5DF6-ACAF-A617C1E7937F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchForbidVsStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchForbidVsStreamResponseBody) GoString() string {
	return s.String()
}

func (s *BatchForbidVsStreamResponseBody) SetForbidResult(v *BatchForbidVsStreamResponseBodyForbidResult) *BatchForbidVsStreamResponseBody {
	s.ForbidResult = v
	return s
}

func (s *BatchForbidVsStreamResponseBody) SetRequestId(v string) *BatchForbidVsStreamResponseBody {
	s.RequestId = &v
	return s
}

type BatchForbidVsStreamResponseBodyForbidResult struct {
	ForbidResultInfo []*BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo `json:"ForbidResultInfo,omitempty" xml:"ForbidResultInfo,omitempty" type:"Repeated"`
}

func (s BatchForbidVsStreamResponseBodyForbidResult) String() string {
	return tea.Prettify(s)
}

func (s BatchForbidVsStreamResponseBodyForbidResult) GoString() string {
	return s.String()
}

func (s *BatchForbidVsStreamResponseBodyForbidResult) SetForbidResultInfo(v []*BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo) *BatchForbidVsStreamResponseBodyForbidResult {
	s.ForbidResultInfo = v
	return s
}

type BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo struct {
	Channels *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfoChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Struct"`
	// example:
	//
	// 2
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// ok
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// example:
	//
	// success
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo) GoString() string {
	return s.String()
}

func (s *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo) SetChannels(v *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfoChannels) *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo {
	s.Channels = v
	return s
}

func (s *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo) SetCount(v int32) *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo {
	s.Count = &v
	return s
}

func (s *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo) SetDetail(v string) *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo {
	s.Detail = &v
	return s
}

func (s *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo) SetResult(v string) *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfo {
	s.Result = &v
	return s
}

type BatchForbidVsStreamResponseBodyForbidResultForbidResultInfoChannels struct {
	Channel []*string `json:"Channel,omitempty" xml:"Channel,omitempty" type:"Repeated"`
}

func (s BatchForbidVsStreamResponseBodyForbidResultForbidResultInfoChannels) String() string {
	return tea.Prettify(s)
}

func (s BatchForbidVsStreamResponseBodyForbidResultForbidResultInfoChannels) GoString() string {
	return s.String()
}

func (s *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfoChannels) SetChannel(v []*string) *BatchForbidVsStreamResponseBodyForbidResultForbidResultInfoChannels {
	s.Channel = v
	return s
}

type BatchForbidVsStreamResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchForbidVsStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchForbidVsStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchForbidVsStreamResponse) GoString() string {
	return s.String()
}

func (s *BatchForbidVsStreamResponse) SetHeaders(v map[string]*string) *BatchForbidVsStreamResponse {
	s.Headers = v
	return s
}

func (s *BatchForbidVsStreamResponse) SetStatusCode(v int32) *BatchForbidVsStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchForbidVsStreamResponse) SetBody(v *BatchForbidVsStreamResponseBody) *BatchForbidVsStreamResponse {
	s.Body = v
	return s
}

type BatchResumeVsStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// live/stream1
	Channel             *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ControlStreamAction *string `json:"ControlStreamAction,omitempty" xml:"ControlStreamAction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// publisher
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchResumeVsStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchResumeVsStreamRequest) GoString() string {
	return s.String()
}

func (s *BatchResumeVsStreamRequest) SetChannel(v string) *BatchResumeVsStreamRequest {
	s.Channel = &v
	return s
}

func (s *BatchResumeVsStreamRequest) SetControlStreamAction(v string) *BatchResumeVsStreamRequest {
	s.ControlStreamAction = &v
	return s
}

func (s *BatchResumeVsStreamRequest) SetDomainName(v string) *BatchResumeVsStreamRequest {
	s.DomainName = &v
	return s
}

func (s *BatchResumeVsStreamRequest) SetLiveStreamType(v string) *BatchResumeVsStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *BatchResumeVsStreamRequest) SetOwnerId(v int64) *BatchResumeVsStreamRequest {
	s.OwnerId = &v
	return s
}

type BatchResumeVsStreamResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResumeResult *BatchResumeVsStreamResponseBodyResumeResult `json:"ResumeResult,omitempty" xml:"ResumeResult,omitempty" type:"Struct"`
}

func (s BatchResumeVsStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchResumeVsStreamResponseBody) GoString() string {
	return s.String()
}

func (s *BatchResumeVsStreamResponseBody) SetRequestId(v string) *BatchResumeVsStreamResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchResumeVsStreamResponseBody) SetResumeResult(v *BatchResumeVsStreamResponseBodyResumeResult) *BatchResumeVsStreamResponseBody {
	s.ResumeResult = v
	return s
}

type BatchResumeVsStreamResponseBodyResumeResult struct {
	ResumeResultInfo []*BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo `json:"ResumeResultInfo,omitempty" xml:"ResumeResultInfo,omitempty" type:"Repeated"`
}

func (s BatchResumeVsStreamResponseBodyResumeResult) String() string {
	return tea.Prettify(s)
}

func (s BatchResumeVsStreamResponseBodyResumeResult) GoString() string {
	return s.String()
}

func (s *BatchResumeVsStreamResponseBodyResumeResult) SetResumeResultInfo(v []*BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo) *BatchResumeVsStreamResponseBodyResumeResult {
	s.ResumeResultInfo = v
	return s
}

type BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo struct {
	Channels *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfoChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Struct"`
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// ok
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// example:
	//
	// success
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo) GoString() string {
	return s.String()
}

func (s *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo) SetChannels(v *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfoChannels) *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo {
	s.Channels = v
	return s
}

func (s *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo) SetCount(v int32) *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo {
	s.Count = &v
	return s
}

func (s *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo) SetDetail(v string) *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo {
	s.Detail = &v
	return s
}

func (s *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo) SetResult(v string) *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfo {
	s.Result = &v
	return s
}

type BatchResumeVsStreamResponseBodyResumeResultResumeResultInfoChannels struct {
	Channel []*string `json:"Channel,omitempty" xml:"Channel,omitempty" type:"Repeated"`
}

func (s BatchResumeVsStreamResponseBodyResumeResultResumeResultInfoChannels) String() string {
	return tea.Prettify(s)
}

func (s BatchResumeVsStreamResponseBodyResumeResultResumeResultInfoChannels) GoString() string {
	return s.String()
}

func (s *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfoChannels) SetChannel(v []*string) *BatchResumeVsStreamResponseBodyResumeResultResumeResultInfoChannels {
	s.Channel = v
	return s
}

type BatchResumeVsStreamResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchResumeVsStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchResumeVsStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchResumeVsStreamResponse) GoString() string {
	return s.String()
}

func (s *BatchResumeVsStreamResponse) SetHeaders(v map[string]*string) *BatchResumeVsStreamResponse {
	s.Headers = v
	return s
}

func (s *BatchResumeVsStreamResponse) SetStatusCode(v int32) *BatchResumeVsStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchResumeVsStreamResponse) SetBody(v *BatchResumeVsStreamResponseBody) *BatchResumeVsStreamResponse {
	s.Body = v
	return s
}

type BatchSetVsDomainConfigsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainNames *string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{“functionArgs”:[{“argName”:”domain_name”,”argValue”:”api.hellodtworld.com”}],”functionName”:”set_req_host_header”}]
	Functions *string `json:"Functions,omitempty" xml:"Functions,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchSetVsDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSetVsDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchSetVsDomainConfigsRequest) SetDomainNames(v string) *BatchSetVsDomainConfigsRequest {
	s.DomainNames = &v
	return s
}

func (s *BatchSetVsDomainConfigsRequest) SetFunctions(v string) *BatchSetVsDomainConfigsRequest {
	s.Functions = &v
	return s
}

func (s *BatchSetVsDomainConfigsRequest) SetOwnerId(v int64) *BatchSetVsDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

type BatchSetVsDomainConfigsResponseBody struct {
	// example:
	//
	// 9BEC5E85-C76B-56EF-A922-860EFDB8B64B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchSetVsDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchSetVsDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchSetVsDomainConfigsResponseBody) SetRequestId(v string) *BatchSetVsDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type BatchSetVsDomainConfigsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchSetVsDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchSetVsDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSetVsDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchSetVsDomainConfigsResponse) SetHeaders(v map[string]*string) *BatchSetVsDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *BatchSetVsDomainConfigsResponse) SetStatusCode(v int32) *BatchSetVsDomainConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchSetVsDomainConfigsResponse) SetBody(v *BatchSetVsDomainConfigsResponseBody) *BatchSetVsDomainConfigsResponse {
	s.Body = v
	return s
}

type BatchStartDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 32388487****92996-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchStartDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchStartDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchStartDevicesRequest) SetId(v string) *BatchStartDevicesRequest {
	s.Id = &v
	return s
}

func (s *BatchStartDevicesRequest) SetOwnerId(v int64) *BatchStartDevicesRequest {
	s.OwnerId = &v
	return s
}

type BatchStartDevicesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchStartDevicesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchStartDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchStartDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchStartDevicesResponseBody) SetRequestId(v string) *BatchStartDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchStartDevicesResponseBody) SetResults(v []*BatchStartDevicesResponseBodyResults) *BatchStartDevicesResponseBody {
	s.Results = v
	return s
}

type BatchStartDevicesResponseBodyResults struct {
	// example:
	//
	// 32388487****92996-cn-qingdao
	Id      *string                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	Streams []*BatchStartDevicesResponseBodyResultsStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Repeated"`
}

func (s BatchStartDevicesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchStartDevicesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchStartDevicesResponseBodyResults) SetId(v string) *BatchStartDevicesResponseBodyResults {
	s.Id = &v
	return s
}

func (s *BatchStartDevicesResponseBodyResults) SetStreams(v []*BatchStartDevicesResponseBodyResultsStreams) *BatchStartDevicesResponseBodyResults {
	s.Streams = v
	return s
}

type BatchStartDevicesResponseBodyResultsStreams struct {
	// example:
	//
	// Stream not found
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 3238848****092997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 310101*****187542126
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s BatchStartDevicesResponseBodyResultsStreams) String() string {
	return tea.Prettify(s)
}

func (s BatchStartDevicesResponseBodyResultsStreams) GoString() string {
	return s.String()
}

func (s *BatchStartDevicesResponseBodyResultsStreams) SetError(v string) *BatchStartDevicesResponseBodyResultsStreams {
	s.Error = &v
	return s
}

func (s *BatchStartDevicesResponseBodyResultsStreams) SetId(v string) *BatchStartDevicesResponseBodyResultsStreams {
	s.Id = &v
	return s
}

func (s *BatchStartDevicesResponseBodyResultsStreams) SetName(v string) *BatchStartDevicesResponseBodyResultsStreams {
	s.Name = &v
	return s
}

type BatchStartDevicesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchStartDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchStartDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchStartDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchStartDevicesResponse) SetHeaders(v map[string]*string) *BatchStartDevicesResponse {
	s.Headers = v
	return s
}

func (s *BatchStartDevicesResponse) SetStatusCode(v int32) *BatchStartDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchStartDevicesResponse) SetBody(v *BatchStartDevicesResponseBody) *BatchStartDevicesResponse {
	s.Body = v
	return s
}

type BatchStartStreamsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****997-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchStartStreamsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchStartStreamsRequest) GoString() string {
	return s.String()
}

func (s *BatchStartStreamsRequest) SetId(v string) *BatchStartStreamsRequest {
	s.Id = &v
	return s
}

func (s *BatchStartStreamsRequest) SetOwnerId(v int64) *BatchStartStreamsRequest {
	s.OwnerId = &v
	return s
}

type BatchStartStreamsResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchStartStreamsResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchStartStreamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchStartStreamsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchStartStreamsResponseBody) SetRequestId(v string) *BatchStartStreamsResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchStartStreamsResponseBody) SetResults(v []*BatchStartStreamsResponseBodyResults) *BatchStartStreamsResponseBody {
	s.Results = v
	return s
}

type BatchStartStreamsResponseBodyResults struct {
	// example:
	//
	// stream not found
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 31000000*****0000002
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s BatchStartStreamsResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchStartStreamsResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchStartStreamsResponseBodyResults) SetError(v string) *BatchStartStreamsResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchStartStreamsResponseBodyResults) SetId(v string) *BatchStartStreamsResponseBodyResults {
	s.Id = &v
	return s
}

func (s *BatchStartStreamsResponseBodyResults) SetName(v string) *BatchStartStreamsResponseBodyResults {
	s.Name = &v
	return s
}

type BatchStartStreamsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchStartStreamsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchStartStreamsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchStartStreamsResponse) GoString() string {
	return s.String()
}

func (s *BatchStartStreamsResponse) SetHeaders(v map[string]*string) *BatchStartStreamsResponse {
	s.Headers = v
	return s
}

func (s *BatchStartStreamsResponse) SetStatusCode(v int32) *BatchStartStreamsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchStartStreamsResponse) SetBody(v *BatchStartStreamsResponseBody) *BatchStartStreamsResponse {
	s.Body = v
	return s
}

type BatchStopDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 32388487****92996
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-10-14T23:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s BatchStopDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchStopDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchStopDevicesRequest) SetId(v string) *BatchStopDevicesRequest {
	s.Id = &v
	return s
}

func (s *BatchStopDevicesRequest) SetOwnerId(v int64) *BatchStopDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchStopDevicesRequest) SetStartTime(v string) *BatchStopDevicesRequest {
	s.StartTime = &v
	return s
}

type BatchStopDevicesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchStopDevicesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchStopDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchStopDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchStopDevicesResponseBody) SetRequestId(v string) *BatchStopDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchStopDevicesResponseBody) SetResults(v []*BatchStopDevicesResponseBodyResults) *BatchStopDevicesResponseBody {
	s.Results = v
	return s
}

type BatchStopDevicesResponseBodyResults struct {
	// example:
	//
	// 32388487****92996
	Id      *string                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	Streams []*BatchStopDevicesResponseBodyResultsStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Repeated"`
}

func (s BatchStopDevicesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchStopDevicesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchStopDevicesResponseBodyResults) SetId(v string) *BatchStopDevicesResponseBodyResults {
	s.Id = &v
	return s
}

func (s *BatchStopDevicesResponseBodyResults) SetStreams(v []*BatchStopDevicesResponseBodyResultsStreams) *BatchStopDevicesResponseBodyResults {
	s.Streams = v
	return s
}

type BatchStopDevicesResponseBodyResultsStreams struct {
	// example:
	//
	// Stream not found
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323884****9092997
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 32388*****39092997
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s BatchStopDevicesResponseBodyResultsStreams) String() string {
	return tea.Prettify(s)
}

func (s BatchStopDevicesResponseBodyResultsStreams) GoString() string {
	return s.String()
}

func (s *BatchStopDevicesResponseBodyResultsStreams) SetError(v string) *BatchStopDevicesResponseBodyResultsStreams {
	s.Error = &v
	return s
}

func (s *BatchStopDevicesResponseBodyResultsStreams) SetId(v string) *BatchStopDevicesResponseBodyResultsStreams {
	s.Id = &v
	return s
}

func (s *BatchStopDevicesResponseBodyResultsStreams) SetName(v string) *BatchStopDevicesResponseBodyResultsStreams {
	s.Name = &v
	return s
}

type BatchStopDevicesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchStopDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchStopDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchStopDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchStopDevicesResponse) SetHeaders(v map[string]*string) *BatchStopDevicesResponse {
	s.Headers = v
	return s
}

func (s *BatchStopDevicesResponse) SetStatusCode(v int32) *BatchStopDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchStopDevicesResponse) SetBody(v *BatchStopDevicesResponseBody) *BatchStopDevicesResponse {
	s.Body = v
	return s
}

type BatchStopStreamsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****997-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-12-10T10:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s BatchStopStreamsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchStopStreamsRequest) GoString() string {
	return s.String()
}

func (s *BatchStopStreamsRequest) SetId(v string) *BatchStopStreamsRequest {
	s.Id = &v
	return s
}

func (s *BatchStopStreamsRequest) SetOwnerId(v int64) *BatchStopStreamsRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchStopStreamsRequest) SetStartTime(v string) *BatchStopStreamsRequest {
	s.StartTime = &v
	return s
}

type BatchStopStreamsResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchStopStreamsResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchStopStreamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchStopStreamsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchStopStreamsResponseBody) SetRequestId(v string) *BatchStopStreamsResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchStopStreamsResponseBody) SetResults(v []*BatchStopStreamsResponseBodyResults) *BatchStopStreamsResponseBody {
	s.Results = v
	return s
}

type BatchStopStreamsResponseBodyResults struct {
	// example:
	//
	// stream not found
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 3100000*****00000002
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s BatchStopStreamsResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchStopStreamsResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchStopStreamsResponseBodyResults) SetError(v string) *BatchStopStreamsResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchStopStreamsResponseBodyResults) SetId(v string) *BatchStopStreamsResponseBodyResults {
	s.Id = &v
	return s
}

func (s *BatchStopStreamsResponseBodyResults) SetName(v string) *BatchStopStreamsResponseBodyResults {
	s.Name = &v
	return s
}

type BatchStopStreamsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchStopStreamsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchStopStreamsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchStopStreamsResponse) GoString() string {
	return s.String()
}

func (s *BatchStopStreamsResponse) SetHeaders(v map[string]*string) *BatchStopStreamsResponse {
	s.Headers = v
	return s
}

func (s *BatchStopStreamsResponse) SetStatusCode(v int32) *BatchStopStreamsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchStopStreamsResponse) SetBody(v *BatchStopStreamsResponseBody) *BatchStopStreamsResponse {
	s.Body = v
	return s
}

type BatchUnbindDirectoriesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchUnbindDirectoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDirectoriesRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindDirectoriesRequest) SetDeviceId(v string) *BatchUnbindDirectoriesRequest {
	s.DeviceId = &v
	return s
}

func (s *BatchUnbindDirectoriesRequest) SetDirectoryId(v string) *BatchUnbindDirectoriesRequest {
	s.DirectoryId = &v
	return s
}

func (s *BatchUnbindDirectoriesRequest) SetOwnerId(v int64) *BatchUnbindDirectoriesRequest {
	s.OwnerId = &v
	return s
}

type BatchUnbindDirectoriesResponseBody struct {
	// example:
	//
	// 64DB7F34-11A8-45DC-A421-40ACF446282C
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchUnbindDirectoriesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchUnbindDirectoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDirectoriesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUnbindDirectoriesResponseBody) SetRequestId(v string) *BatchUnbindDirectoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindDirectoriesResponseBody) SetResults(v []*BatchUnbindDirectoriesResponseBodyResults) *BatchUnbindDirectoriesResponseBody {
	s.Results = v
	return s
}

type BatchUnbindDirectoriesResponseBodyResults struct {
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// example:
	//
	// An error occurred while processing your request.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
}

func (s BatchUnbindDirectoriesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDirectoriesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchUnbindDirectoriesResponseBodyResults) SetDeviceId(v string) *BatchUnbindDirectoriesResponseBodyResults {
	s.DeviceId = &v
	return s
}

func (s *BatchUnbindDirectoriesResponseBodyResults) SetDirectoryId(v string) *BatchUnbindDirectoriesResponseBodyResults {
	s.DirectoryId = &v
	return s
}

func (s *BatchUnbindDirectoriesResponseBodyResults) SetError(v string) *BatchUnbindDirectoriesResponseBodyResults {
	s.Error = &v
	return s
}

type BatchUnbindDirectoriesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUnbindDirectoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUnbindDirectoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDirectoriesResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindDirectoriesResponse) SetHeaders(v map[string]*string) *BatchUnbindDirectoriesResponse {
	s.Headers = v
	return s
}

func (s *BatchUnbindDirectoriesResponse) SetStatusCode(v int32) *BatchUnbindDirectoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUnbindDirectoriesResponse) SetBody(v *BatchUnbindDirectoriesResponseBody) *BatchUnbindDirectoriesResponse {
	s.Body = v
	return s
}

type BatchUnbindParentPlatformDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 361*****212-cn-qingdao
	ParentPlatformId *string `json:"ParentPlatformId,omitempty" xml:"ParentPlatformId,omitempty"`
}

func (s BatchUnbindParentPlatformDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindParentPlatformDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindParentPlatformDevicesRequest) SetDeviceId(v string) *BatchUnbindParentPlatformDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *BatchUnbindParentPlatformDevicesRequest) SetOwnerId(v int64) *BatchUnbindParentPlatformDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchUnbindParentPlatformDevicesRequest) SetParentPlatformId(v string) *BatchUnbindParentPlatformDevicesRequest {
	s.ParentPlatformId = &v
	return s
}

type BatchUnbindParentPlatformDevicesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchUnbindParentPlatformDevicesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchUnbindParentPlatformDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindParentPlatformDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUnbindParentPlatformDevicesResponseBody) SetRequestId(v string) *BatchUnbindParentPlatformDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindParentPlatformDevicesResponseBody) SetResults(v []*BatchUnbindParentPlatformDevicesResponseBodyResults) *BatchUnbindParentPlatformDevicesResponseBody {
	s.Results = v
	return s
}

type BatchUnbindParentPlatformDevicesResponseBodyResults struct {
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 361*****212-cn-qingdao
	ParentPlatformId *string `json:"ParentPlatformId,omitempty" xml:"ParentPlatformId,omitempty"`
}

func (s BatchUnbindParentPlatformDevicesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindParentPlatformDevicesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchUnbindParentPlatformDevicesResponseBodyResults) SetDeviceId(v string) *BatchUnbindParentPlatformDevicesResponseBodyResults {
	s.DeviceId = &v
	return s
}

func (s *BatchUnbindParentPlatformDevicesResponseBodyResults) SetError(v string) *BatchUnbindParentPlatformDevicesResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchUnbindParentPlatformDevicesResponseBodyResults) SetParentPlatformId(v string) *BatchUnbindParentPlatformDevicesResponseBodyResults {
	s.ParentPlatformId = &v
	return s
}

type BatchUnbindParentPlatformDevicesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUnbindParentPlatformDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUnbindParentPlatformDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindParentPlatformDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindParentPlatformDevicesResponse) SetHeaders(v map[string]*string) *BatchUnbindParentPlatformDevicesResponse {
	s.Headers = v
	return s
}

func (s *BatchUnbindParentPlatformDevicesResponse) SetStatusCode(v int32) *BatchUnbindParentPlatformDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUnbindParentPlatformDevicesResponse) SetBody(v *BatchUnbindParentPlatformDevicesResponseBody) *BatchUnbindParentPlatformDevicesResponse {
	s.Body = v
	return s
}

type BatchUnbindPurchasedDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BatchUnbindPurchasedDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindPurchasedDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindPurchasedDevicesRequest) SetDeviceId(v string) *BatchUnbindPurchasedDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *BatchUnbindPurchasedDevicesRequest) SetOwnerId(v int64) *BatchUnbindPurchasedDevicesRequest {
	s.OwnerId = &v
	return s
}

type BatchUnbindPurchasedDevicesResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchUnbindPurchasedDevicesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchUnbindPurchasedDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindPurchasedDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUnbindPurchasedDevicesResponseBody) SetRequestId(v string) *BatchUnbindPurchasedDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindPurchasedDevicesResponseBody) SetResults(v []*BatchUnbindPurchasedDevicesResponseBodyResults) *BatchUnbindPurchasedDevicesResponseBody {
	s.Results = v
	return s
}

type BatchUnbindPurchasedDevicesResponseBodyResults struct {
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
}

func (s BatchUnbindPurchasedDevicesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindPurchasedDevicesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchUnbindPurchasedDevicesResponseBodyResults) SetDeviceId(v string) *BatchUnbindPurchasedDevicesResponseBodyResults {
	s.DeviceId = &v
	return s
}

func (s *BatchUnbindPurchasedDevicesResponseBodyResults) SetError(v string) *BatchUnbindPurchasedDevicesResponseBodyResults {
	s.Error = &v
	return s
}

type BatchUnbindPurchasedDevicesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUnbindPurchasedDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUnbindPurchasedDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindPurchasedDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindPurchasedDevicesResponse) SetHeaders(v map[string]*string) *BatchUnbindPurchasedDevicesResponse {
	s.Headers = v
	return s
}

func (s *BatchUnbindPurchasedDevicesResponse) SetStatusCode(v int32) *BatchUnbindPurchasedDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUnbindPurchasedDevicesResponse) SetBody(v *BatchUnbindPurchasedDevicesResponseBody) *BatchUnbindPurchasedDevicesResponse {
	s.Body = v
	return s
}

type BatchUnbindTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// record
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s BatchUnbindTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplateRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplateRequest) SetInstanceId(v string) *BatchUnbindTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchUnbindTemplateRequest) SetInstanceType(v string) *BatchUnbindTemplateRequest {
	s.InstanceType = &v
	return s
}

func (s *BatchUnbindTemplateRequest) SetOwnerId(v int64) *BatchUnbindTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchUnbindTemplateRequest) SetTemplateId(v string) *BatchUnbindTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *BatchUnbindTemplateRequest) SetTemplateType(v string) *BatchUnbindTemplateRequest {
	s.TemplateType = &v
	return s
}

type BatchUnbindTemplateResponseBody struct {
	Bindings []*BatchUnbindTemplateResponseBodyBindings `json:"Bindings,omitempty" xml:"Bindings,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchUnbindTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplateResponseBody) SetBindings(v []*BatchUnbindTemplateResponseBodyBindings) *BatchUnbindTemplateResponseBody {
	s.Bindings = v
	return s
}

func (s *BatchUnbindTemplateResponseBody) SetRequestId(v string) *BatchUnbindTemplateResponseBody {
	s.RequestId = &v
	return s
}

type BatchUnbindTemplateResponseBodyBindings struct {
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s BatchUnbindTemplateResponseBodyBindings) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplateResponseBodyBindings) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplateResponseBodyBindings) SetError(v string) *BatchUnbindTemplateResponseBodyBindings {
	s.Error = &v
	return s
}

func (s *BatchUnbindTemplateResponseBodyBindings) SetInstanceId(v string) *BatchUnbindTemplateResponseBodyBindings {
	s.InstanceId = &v
	return s
}

func (s *BatchUnbindTemplateResponseBodyBindings) SetInstanceType(v string) *BatchUnbindTemplateResponseBodyBindings {
	s.InstanceType = &v
	return s
}

func (s *BatchUnbindTemplateResponseBodyBindings) SetTemplateId(v string) *BatchUnbindTemplateResponseBodyBindings {
	s.TemplateId = &v
	return s
}

type BatchUnbindTemplateResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUnbindTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUnbindTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplateResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplateResponse) SetHeaders(v map[string]*string) *BatchUnbindTemplateResponse {
	s.Headers = v
	return s
}

func (s *BatchUnbindTemplateResponse) SetStatusCode(v int32) *BatchUnbindTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUnbindTemplateResponse) SetBody(v *BatchUnbindTemplateResponseBody) *BatchUnbindTemplateResponse {
	s.Body = v
	return s
}

type BatchUnbindTemplatesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 400941290881239938-cn-beijing
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stream
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// record
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s BatchUnbindTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplatesRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplatesRequest) SetInstanceId(v string) *BatchUnbindTemplatesRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchUnbindTemplatesRequest) SetInstanceType(v string) *BatchUnbindTemplatesRequest {
	s.InstanceType = &v
	return s
}

func (s *BatchUnbindTemplatesRequest) SetOwnerId(v int64) *BatchUnbindTemplatesRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchUnbindTemplatesRequest) SetTemplateId(v string) *BatchUnbindTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *BatchUnbindTemplatesRequest) SetTemplateType(v string) *BatchUnbindTemplatesRequest {
	s.TemplateType = &v
	return s
}

type BatchUnbindTemplatesResponseBody struct {
	// example:
	//
	// 90B377DF-C874-5BBD-B957-42C4C06AFECE
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   []*BatchUnbindTemplatesResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s BatchUnbindTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplatesResponseBody) SetRequestId(v string) *BatchUnbindTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindTemplatesResponseBody) SetResults(v []*BatchUnbindTemplatesResponseBodyResults) *BatchUnbindTemplatesResponseBody {
	s.Results = v
	return s
}

type BatchUnbindTemplatesResponseBodyResults struct {
	// example:
	//
	// some error
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// snapshot
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s BatchUnbindTemplatesResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplatesResponseBodyResults) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplatesResponseBodyResults) SetError(v string) *BatchUnbindTemplatesResponseBodyResults {
	s.Error = &v
	return s
}

func (s *BatchUnbindTemplatesResponseBodyResults) SetInstanceId(v string) *BatchUnbindTemplatesResponseBodyResults {
	s.InstanceId = &v
	return s
}

func (s *BatchUnbindTemplatesResponseBodyResults) SetInstanceType(v string) *BatchUnbindTemplatesResponseBodyResults {
	s.InstanceType = &v
	return s
}

func (s *BatchUnbindTemplatesResponseBodyResults) SetTemplateId(v string) *BatchUnbindTemplatesResponseBodyResults {
	s.TemplateId = &v
	return s
}

func (s *BatchUnbindTemplatesResponseBodyResults) SetTemplateType(v string) *BatchUnbindTemplatesResponseBodyResults {
	s.TemplateType = &v
	return s
}

type BatchUnbindTemplatesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUnbindTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUnbindTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindTemplatesResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindTemplatesResponse) SetHeaders(v map[string]*string) *BatchUnbindTemplatesResponse {
	s.Headers = v
	return s
}

func (s *BatchUnbindTemplatesResponse) SetStatusCode(v int32) *BatchUnbindTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUnbindTemplatesResponse) SetBody(v *BatchUnbindTemplatesResponseBody) *BatchUnbindTemplatesResponse {
	s.Body = v
	return s
}

type BindDirectoryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s BindDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDirectoryRequest) GoString() string {
	return s.String()
}

func (s *BindDirectoryRequest) SetDeviceId(v string) *BindDirectoryRequest {
	s.DeviceId = &v
	return s
}

func (s *BindDirectoryRequest) SetDirectoryId(v string) *BindDirectoryRequest {
	s.DirectoryId = &v
	return s
}

func (s *BindDirectoryRequest) SetOwnerId(v int64) *BindDirectoryRequest {
	s.OwnerId = &v
	return s
}

type BindDirectoryResponseBody struct {
	// example:
	//
	// 3CB843A9-DD34-4881-B8D6-B0D539D111E4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *BindDirectoryResponseBody) SetRequestId(v string) *BindDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type BindDirectoryResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s BindDirectoryResponse) GoString() string {
	return s.String()
}

func (s *BindDirectoryResponse) SetHeaders(v map[string]*string) *BindDirectoryResponse {
	s.Headers = v
	return s
}

func (s *BindDirectoryResponse) SetStatusCode(v int32) *BindDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *BindDirectoryResponse) SetBody(v *BindDirectoryResponseBody) *BindDirectoryResponse {
	s.Body = v
	return s
}

type BindParentPlatformDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 361*****212-cn-qingdao
	ParentPlatformId *string `json:"ParentPlatformId,omitempty" xml:"ParentPlatformId,omitempty"`
}

func (s BindParentPlatformDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindParentPlatformDeviceRequest) GoString() string {
	return s.String()
}

func (s *BindParentPlatformDeviceRequest) SetDeviceId(v string) *BindParentPlatformDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *BindParentPlatformDeviceRequest) SetOwnerId(v int64) *BindParentPlatformDeviceRequest {
	s.OwnerId = &v
	return s
}

func (s *BindParentPlatformDeviceRequest) SetParentPlatformId(v string) *BindParentPlatformDeviceRequest {
	s.ParentPlatformId = &v
	return s
}

type BindParentPlatformDeviceResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindParentPlatformDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindParentPlatformDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *BindParentPlatformDeviceResponseBody) SetRequestId(v string) *BindParentPlatformDeviceResponseBody {
	s.RequestId = &v
	return s
}

type BindParentPlatformDeviceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindParentPlatformDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindParentPlatformDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindParentPlatformDeviceResponse) GoString() string {
	return s.String()
}

func (s *BindParentPlatformDeviceResponse) SetHeaders(v map[string]*string) *BindParentPlatformDeviceResponse {
	s.Headers = v
	return s
}

func (s *BindParentPlatformDeviceResponse) SetStatusCode(v int32) *BindParentPlatformDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *BindParentPlatformDeviceResponse) SetBody(v *BindParentPlatformDeviceResponseBody) *BindParentPlatformDeviceResponse {
	s.Body = v
	return s
}

type BindPurchasedDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3939*****6580539-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3484*****8732174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s BindPurchasedDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindPurchasedDeviceRequest) GoString() string {
	return s.String()
}

func (s *BindPurchasedDeviceRequest) SetDeviceId(v string) *BindPurchasedDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *BindPurchasedDeviceRequest) SetGroupId(v string) *BindPurchasedDeviceRequest {
	s.GroupId = &v
	return s
}

func (s *BindPurchasedDeviceRequest) SetOwnerId(v int64) *BindPurchasedDeviceRequest {
	s.OwnerId = &v
	return s
}

func (s *BindPurchasedDeviceRequest) SetRegion(v string) *BindPurchasedDeviceRequest {
	s.Region = &v
	return s
}

type BindPurchasedDeviceResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindPurchasedDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindPurchasedDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *BindPurchasedDeviceResponseBody) SetRequestId(v string) *BindPurchasedDeviceResponseBody {
	s.RequestId = &v
	return s
}

type BindPurchasedDeviceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindPurchasedDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindPurchasedDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindPurchasedDeviceResponse) GoString() string {
	return s.String()
}

func (s *BindPurchasedDeviceResponse) SetHeaders(v map[string]*string) *BindPurchasedDeviceResponse {
	s.Headers = v
	return s
}

func (s *BindPurchasedDeviceResponse) SetStatusCode(v int32) *BindPurchasedDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *BindPurchasedDeviceResponse) SetBody(v *BindPurchasedDeviceResponseBody) *BindPurchasedDeviceResponse {
	s.Body = v
	return s
}

type BindTemplateRequest struct {
	// example:
	//
	// false
	ApplyAll *bool `json:"ApplyAll,omitempty" xml:"ApplyAll,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// false
	Replace *bool `json:"Replace,omitempty" xml:"Replace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// record
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s BindTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s BindTemplateRequest) GoString() string {
	return s.String()
}

func (s *BindTemplateRequest) SetApplyAll(v bool) *BindTemplateRequest {
	s.ApplyAll = &v
	return s
}

func (s *BindTemplateRequest) SetInstanceId(v string) *BindTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *BindTemplateRequest) SetInstanceType(v string) *BindTemplateRequest {
	s.InstanceType = &v
	return s
}

func (s *BindTemplateRequest) SetOwnerId(v int64) *BindTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *BindTemplateRequest) SetReplace(v bool) *BindTemplateRequest {
	s.Replace = &v
	return s
}

func (s *BindTemplateRequest) SetTemplateId(v string) *BindTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *BindTemplateRequest) SetTemplateType(v string) *BindTemplateRequest {
	s.TemplateType = &v
	return s
}

type BindTemplateResponseBody struct {
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s BindTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *BindTemplateResponseBody) SetInstanceId(v string) *BindTemplateResponseBody {
	s.InstanceId = &v
	return s
}

func (s *BindTemplateResponseBody) SetInstanceType(v string) *BindTemplateResponseBody {
	s.InstanceType = &v
	return s
}

func (s *BindTemplateResponseBody) SetRequestId(v string) *BindTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindTemplateResponseBody) SetTemplateId(v string) *BindTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type BindTemplateResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s BindTemplateResponse) GoString() string {
	return s.String()
}

func (s *BindTemplateResponse) SetHeaders(v map[string]*string) *BindTemplateResponse {
	s.Headers = v
	return s
}

func (s *BindTemplateResponse) SetStatusCode(v int32) *BindTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *BindTemplateResponse) SetBody(v *BindTemplateResponseBody) *BindTemplateResponse {
	s.Body = v
	return s
}

type ContinuousAdjustRequest struct {
	// example:
	//
	// 0.5
	Focus *string `json:"Focus,omitempty" xml:"Focus,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 0.5
	Iris    *string `json:"Iris,omitempty" xml:"Iris,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ContinuousAdjustRequest) String() string {
	return tea.Prettify(s)
}

func (s ContinuousAdjustRequest) GoString() string {
	return s.String()
}

func (s *ContinuousAdjustRequest) SetFocus(v string) *ContinuousAdjustRequest {
	s.Focus = &v
	return s
}

func (s *ContinuousAdjustRequest) SetId(v string) *ContinuousAdjustRequest {
	s.Id = &v
	return s
}

func (s *ContinuousAdjustRequest) SetIris(v string) *ContinuousAdjustRequest {
	s.Iris = &v
	return s
}

func (s *ContinuousAdjustRequest) SetOwnerId(v int64) *ContinuousAdjustRequest {
	s.OwnerId = &v
	return s
}

type ContinuousAdjustResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ContinuousAdjustResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ContinuousAdjustResponseBody) GoString() string {
	return s.String()
}

func (s *ContinuousAdjustResponseBody) SetId(v string) *ContinuousAdjustResponseBody {
	s.Id = &v
	return s
}

func (s *ContinuousAdjustResponseBody) SetRequestId(v string) *ContinuousAdjustResponseBody {
	s.RequestId = &v
	return s
}

type ContinuousAdjustResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ContinuousAdjustResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ContinuousAdjustResponse) String() string {
	return tea.Prettify(s)
}

func (s ContinuousAdjustResponse) GoString() string {
	return s.String()
}

func (s *ContinuousAdjustResponse) SetHeaders(v map[string]*string) *ContinuousAdjustResponse {
	s.Headers = v
	return s
}

func (s *ContinuousAdjustResponse) SetStatusCode(v int32) *ContinuousAdjustResponse {
	s.StatusCode = &v
	return s
}

func (s *ContinuousAdjustResponse) SetBody(v *ContinuousAdjustResponseBody) *ContinuousAdjustResponse {
	s.Body = v
	return s
}

type ContinuousMoveRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 0.5
	Pan *string `json:"Pan,omitempty" xml:"Pan,omitempty"`
	// example:
	//
	// 0.5
	Tilt *string `json:"Tilt,omitempty" xml:"Tilt,omitempty"`
	// example:
	//
	// 0.5
	Zoom *string `json:"Zoom,omitempty" xml:"Zoom,omitempty"`
}

func (s ContinuousMoveRequest) String() string {
	return tea.Prettify(s)
}

func (s ContinuousMoveRequest) GoString() string {
	return s.String()
}

func (s *ContinuousMoveRequest) SetId(v string) *ContinuousMoveRequest {
	s.Id = &v
	return s
}

func (s *ContinuousMoveRequest) SetOwnerId(v int64) *ContinuousMoveRequest {
	s.OwnerId = &v
	return s
}

func (s *ContinuousMoveRequest) SetPan(v string) *ContinuousMoveRequest {
	s.Pan = &v
	return s
}

func (s *ContinuousMoveRequest) SetTilt(v string) *ContinuousMoveRequest {
	s.Tilt = &v
	return s
}

func (s *ContinuousMoveRequest) SetZoom(v string) *ContinuousMoveRequest {
	s.Zoom = &v
	return s
}

type ContinuousMoveResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ContinuousMoveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ContinuousMoveResponseBody) GoString() string {
	return s.String()
}

func (s *ContinuousMoveResponseBody) SetId(v string) *ContinuousMoveResponseBody {
	s.Id = &v
	return s
}

func (s *ContinuousMoveResponseBody) SetRequestId(v string) *ContinuousMoveResponseBody {
	s.RequestId = &v
	return s
}

type ContinuousMoveResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ContinuousMoveResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ContinuousMoveResponse) String() string {
	return tea.Prettify(s)
}

func (s ContinuousMoveResponse) GoString() string {
	return s.String()
}

func (s *ContinuousMoveResponse) SetHeaders(v map[string]*string) *ContinuousMoveResponse {
	s.Headers = v
	return s
}

func (s *ContinuousMoveResponse) SetStatusCode(v int32) *ContinuousMoveResponse {
	s.StatusCode = &v
	return s
}

func (s *ContinuousMoveResponse) SetBody(v *ContinuousMoveResponseBody) *ContinuousMoveResponse {
	s.Body = v
	return s
}

type CreateClusterRequest struct {
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InternalPorts *string `json:"InternalPorts,omitempty" xml:"InternalPorts,omitempty"`
	MaintainTime  *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	// This parameter is required.
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s CreateClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterRequest) SetDescription(v string) *CreateClusterRequest {
	s.Description = &v
	return s
}

func (s *CreateClusterRequest) SetInternalPorts(v string) *CreateClusterRequest {
	s.InternalPorts = &v
	return s
}

func (s *CreateClusterRequest) SetMaintainTime(v string) *CreateClusterRequest {
	s.MaintainTime = &v
	return s
}

func (s *CreateClusterRequest) SetName(v string) *CreateClusterRequest {
	s.Name = &v
	return s
}

func (s *CreateClusterRequest) SetOwnerId(v int64) *CreateClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateClusterRequest) SetSecurityGroupId(v string) *CreateClusterRequest {
	s.SecurityGroupId = &v
	return s
}

type CreateClusterResponseBody struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterResponseBody) SetClusterId(v string) *CreateClusterResponseBody {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterResponseBody) SetRequestId(v string) *CreateClusterResponseBody {
	s.RequestId = &v
	return s
}

type CreateClusterResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterResponse) SetHeaders(v map[string]*string) *CreateClusterResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterResponse) SetStatusCode(v int32) *CreateClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateClusterResponse) SetBody(v *CreateClusterResponseBody) *CreateClusterResponse {
	s.Body = v
	return s
}

type CreateDeviceRequest struct {
	// example:
	//
	// 0
	AlarmMethod   *string `json:"AlarmMethod,omitempty" xml:"AlarmMethod,omitempty"`
	AutoDirectory *bool   `json:"AutoDirectory,omitempty" xml:"AutoDirectory,omitempty"`
	// example:
	//
	// false
	AutoPos *bool `json:"AutoPos,omitempty" xml:"AutoPos,omitempty"`
	// example:
	//
	// false
	AutoStart   *bool   `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// example:
	//
	// 7D0*****4C0
	Dsn *string `json:"Dsn,omitempty" xml:"Dsn,omitempty"`
	// example:
	//
	// 31000000****00000002
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 10.10.10.10
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// example:
	//
	// 119.20
	Latitude *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	// example:
	//
	// 45.00
	Longitude *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// {}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// admin
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// 8080
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// 300
	PosInterval *int64 `json:"PosInterval,omitempty" xml:"PosInterval,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ipc
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://xxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// admin
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Vendor   *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s CreateDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceRequest) GoString() string {
	return s.String()
}

func (s *CreateDeviceRequest) SetAlarmMethod(v string) *CreateDeviceRequest {
	s.AlarmMethod = &v
	return s
}

func (s *CreateDeviceRequest) SetAutoDirectory(v bool) *CreateDeviceRequest {
	s.AutoDirectory = &v
	return s
}

func (s *CreateDeviceRequest) SetAutoPos(v bool) *CreateDeviceRequest {
	s.AutoPos = &v
	return s
}

func (s *CreateDeviceRequest) SetAutoStart(v bool) *CreateDeviceRequest {
	s.AutoStart = &v
	return s
}

func (s *CreateDeviceRequest) SetDescription(v string) *CreateDeviceRequest {
	s.Description = &v
	return s
}

func (s *CreateDeviceRequest) SetDirectoryId(v string) *CreateDeviceRequest {
	s.DirectoryId = &v
	return s
}

func (s *CreateDeviceRequest) SetDsn(v string) *CreateDeviceRequest {
	s.Dsn = &v
	return s
}

func (s *CreateDeviceRequest) SetGbId(v string) *CreateDeviceRequest {
	s.GbId = &v
	return s
}

func (s *CreateDeviceRequest) SetGroupId(v string) *CreateDeviceRequest {
	s.GroupId = &v
	return s
}

func (s *CreateDeviceRequest) SetIp(v string) *CreateDeviceRequest {
	s.Ip = &v
	return s
}

func (s *CreateDeviceRequest) SetLatitude(v string) *CreateDeviceRequest {
	s.Latitude = &v
	return s
}

func (s *CreateDeviceRequest) SetLongitude(v string) *CreateDeviceRequest {
	s.Longitude = &v
	return s
}

func (s *CreateDeviceRequest) SetName(v string) *CreateDeviceRequest {
	s.Name = &v
	return s
}

func (s *CreateDeviceRequest) SetOwnerId(v int64) *CreateDeviceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDeviceRequest) SetParams(v string) *CreateDeviceRequest {
	s.Params = &v
	return s
}

func (s *CreateDeviceRequest) SetParentId(v string) *CreateDeviceRequest {
	s.ParentId = &v
	return s
}

func (s *CreateDeviceRequest) SetPassword(v string) *CreateDeviceRequest {
	s.Password = &v
	return s
}

func (s *CreateDeviceRequest) SetPort(v int64) *CreateDeviceRequest {
	s.Port = &v
	return s
}

func (s *CreateDeviceRequest) SetPosInterval(v int64) *CreateDeviceRequest {
	s.PosInterval = &v
	return s
}

func (s *CreateDeviceRequest) SetType(v string) *CreateDeviceRequest {
	s.Type = &v
	return s
}

func (s *CreateDeviceRequest) SetUrl(v string) *CreateDeviceRequest {
	s.Url = &v
	return s
}

func (s *CreateDeviceRequest) SetUsername(v string) *CreateDeviceRequest {
	s.Username = &v
	return s
}

func (s *CreateDeviceRequest) SetVendor(v string) *CreateDeviceRequest {
	s.Vendor = &v
	return s
}

type CreateDeviceResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeviceResponseBody) SetId(v string) *CreateDeviceResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDeviceResponseBody) SetRequestId(v string) *CreateDeviceResponseBody {
	s.RequestId = &v
	return s
}

type CreateDeviceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceResponse) GoString() string {
	return s.String()
}

func (s *CreateDeviceResponse) SetHeaders(v map[string]*string) *CreateDeviceResponse {
	s.Headers = v
	return s
}

func (s *CreateDeviceResponse) SetStatusCode(v int32) *CreateDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDeviceResponse) SetBody(v *CreateDeviceResponseBody) *CreateDeviceResponse {
	s.Body = v
	return s
}

type CreateDeviceAlarmRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Alarm *int32 `json:"Alarm,omitempty" xml:"Alarm,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 12
	ChannelId *int32 `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1632314789000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 3600
	Expire *int64 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	ObjectType *int32 `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	OwnerId    *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1632121707000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	SubAlarm *int32 `json:"SubAlarm,omitempty" xml:"SubAlarm,omitempty"`
}

func (s CreateDeviceAlarmRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceAlarmRequest) GoString() string {
	return s.String()
}

func (s *CreateDeviceAlarmRequest) SetAlarm(v int32) *CreateDeviceAlarmRequest {
	s.Alarm = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetChannelId(v int32) *CreateDeviceAlarmRequest {
	s.ChannelId = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetEndTime(v int64) *CreateDeviceAlarmRequest {
	s.EndTime = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetExpire(v int64) *CreateDeviceAlarmRequest {
	s.Expire = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetId(v string) *CreateDeviceAlarmRequest {
	s.Id = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetObjectType(v int32) *CreateDeviceAlarmRequest {
	s.ObjectType = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetOwnerId(v int64) *CreateDeviceAlarmRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetStartTime(v int64) *CreateDeviceAlarmRequest {
	s.StartTime = &v
	return s
}

func (s *CreateDeviceAlarmRequest) SetSubAlarm(v int32) *CreateDeviceAlarmRequest {
	s.SubAlarm = &v
	return s
}

type CreateDeviceAlarmResponseBody struct {
	// example:
	//
	// 60
	AlarmDelay *int64 `json:"AlarmDelay,omitempty" xml:"AlarmDelay,omitempty"`
	// example:
	//
	// 0hyNgTdgv2D000195842
	AlarmId *string `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
	// example:
	//
	// 3600
	Expire *int64 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// example:
	//
	// 76E11E6A-4441-51C9-AF60-D354362257A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// rtmp://demo.aliyundoc.com/live/310101*****7542007?auth_key=1639130258-0-0-b2b04fe85ece6*****a6b1a42bc7e
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateDeviceAlarmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceAlarmResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeviceAlarmResponseBody) SetAlarmDelay(v int64) *CreateDeviceAlarmResponseBody {
	s.AlarmDelay = &v
	return s
}

func (s *CreateDeviceAlarmResponseBody) SetAlarmId(v string) *CreateDeviceAlarmResponseBody {
	s.AlarmId = &v
	return s
}

func (s *CreateDeviceAlarmResponseBody) SetExpire(v int64) *CreateDeviceAlarmResponseBody {
	s.Expire = &v
	return s
}

func (s *CreateDeviceAlarmResponseBody) SetRequestId(v string) *CreateDeviceAlarmResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDeviceAlarmResponseBody) SetUrl(v string) *CreateDeviceAlarmResponseBody {
	s.Url = &v
	return s
}

type CreateDeviceAlarmResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDeviceAlarmResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDeviceAlarmResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceAlarmResponse) GoString() string {
	return s.String()
}

func (s *CreateDeviceAlarmResponse) SetHeaders(v map[string]*string) *CreateDeviceAlarmResponse {
	s.Headers = v
	return s
}

func (s *CreateDeviceAlarmResponse) SetStatusCode(v int32) *CreateDeviceAlarmResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDeviceAlarmResponse) SetBody(v *CreateDeviceAlarmResponseBody) *CreateDeviceAlarmResponse {
	s.Body = v
	return s
}

type CreateDirectoryRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// This parameter is required.
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s CreateDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDirectoryRequest) GoString() string {
	return s.String()
}

func (s *CreateDirectoryRequest) SetDescription(v string) *CreateDirectoryRequest {
	s.Description = &v
	return s
}

func (s *CreateDirectoryRequest) SetGroupId(v string) *CreateDirectoryRequest {
	s.GroupId = &v
	return s
}

func (s *CreateDirectoryRequest) SetName(v string) *CreateDirectoryRequest {
	s.Name = &v
	return s
}

func (s *CreateDirectoryRequest) SetOwnerId(v int64) *CreateDirectoryRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDirectoryRequest) SetParentId(v string) *CreateDirectoryRequest {
	s.ParentId = &v
	return s
}

type CreateDirectoryResponseBody struct {
	// example:
	//
	// 399*****488-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDirectoryResponseBody) SetId(v string) *CreateDirectoryResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDirectoryResponseBody) SetRequestId(v string) *CreateDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type CreateDirectoryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDirectoryResponse) GoString() string {
	return s.String()
}

func (s *CreateDirectoryResponse) SetHeaders(v map[string]*string) *CreateDirectoryResponse {
	s.Headers = v
	return s
}

func (s *CreateDirectoryResponse) SetStatusCode(v int32) *CreateDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDirectoryResponse) SetBody(v *CreateDirectoryResponseBody) *CreateDirectoryResponse {
	s.Body = v
	return s
}

type CreateGroupRequest struct {
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// http://example.com/callback
	Callback    *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	InProtocol *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	// example:
	//
	// false
	LazyPull *bool `json:"LazyPull,omitempty" xml:"LazyPull,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// flv,rtmp
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// demo.aliyundoc.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	PushDomain *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s CreateGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateGroupRequest) SetApp(v string) *CreateGroupRequest {
	s.App = &v
	return s
}

func (s *CreateGroupRequest) SetCallback(v string) *CreateGroupRequest {
	s.Callback = &v
	return s
}

func (s *CreateGroupRequest) SetDescription(v string) *CreateGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateGroupRequest) SetInProtocol(v string) *CreateGroupRequest {
	s.InProtocol = &v
	return s
}

func (s *CreateGroupRequest) SetLazyPull(v bool) *CreateGroupRequest {
	s.LazyPull = &v
	return s
}

func (s *CreateGroupRequest) SetName(v string) *CreateGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateGroupRequest) SetOutProtocol(v string) *CreateGroupRequest {
	s.OutProtocol = &v
	return s
}

func (s *CreateGroupRequest) SetOwnerId(v int64) *CreateGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateGroupRequest) SetPlayDomain(v string) *CreateGroupRequest {
	s.PlayDomain = &v
	return s
}

func (s *CreateGroupRequest) SetPushDomain(v string) *CreateGroupRequest {
	s.PushDomain = &v
	return s
}

func (s *CreateGroupRequest) SetRegion(v string) *CreateGroupRequest {
	s.Region = &v
	return s
}

type CreateGroupResponseBody struct {
	// example:
	//
	// 31000000****00000001
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 10.10.10.10
	GbIp *string `json:"GbIp,omitempty" xml:"GbIp,omitempty"`
	// example:
	//
	// 5060
	GbPort *int64 `json:"GbPort,omitempty" xml:"GbPort,omitempty"`
	// example:
	//
	// 33763****77224964-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGroupResponseBody) SetGbId(v string) *CreateGroupResponseBody {
	s.GbId = &v
	return s
}

func (s *CreateGroupResponseBody) SetGbIp(v string) *CreateGroupResponseBody {
	s.GbIp = &v
	return s
}

func (s *CreateGroupResponseBody) SetGbPort(v int64) *CreateGroupResponseBody {
	s.GbPort = &v
	return s
}

func (s *CreateGroupResponseBody) SetId(v string) *CreateGroupResponseBody {
	s.Id = &v
	return s
}

func (s *CreateGroupResponseBody) SetRequestId(v string) *CreateGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateGroupResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateGroupResponse) SetHeaders(v map[string]*string) *CreateGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateGroupResponse) SetStatusCode(v int32) *CreateGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGroupResponse) SetBody(v *CreateGroupResponseBody) *CreateGroupResponse {
	s.Body = v
	return s
}

type CreateParentPlatformRequest struct {
	// example:
	//
	// false
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// example:
	//
	// true
	ClientAuth *bool `json:"ClientAuth,omitempty" xml:"ClientAuth,omitempty"`
	// example:
	//
	// admin123
	ClientPassword *string `json:"ClientPassword,omitempty" xml:"ClientPassword,omitempty"`
	// example:
	//
	// user01
	ClientUsername *string `json:"ClientUsername,omitempty" xml:"ClientUsername,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 31000*****2170123451
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10.10.10.10
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// This parameter is required.
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5060
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s CreateParentPlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateParentPlatformRequest) GoString() string {
	return s.String()
}

func (s *CreateParentPlatformRequest) SetAutoStart(v bool) *CreateParentPlatformRequest {
	s.AutoStart = &v
	return s
}

func (s *CreateParentPlatformRequest) SetClientAuth(v bool) *CreateParentPlatformRequest {
	s.ClientAuth = &v
	return s
}

func (s *CreateParentPlatformRequest) SetClientPassword(v string) *CreateParentPlatformRequest {
	s.ClientPassword = &v
	return s
}

func (s *CreateParentPlatformRequest) SetClientUsername(v string) *CreateParentPlatformRequest {
	s.ClientUsername = &v
	return s
}

func (s *CreateParentPlatformRequest) SetDescription(v string) *CreateParentPlatformRequest {
	s.Description = &v
	return s
}

func (s *CreateParentPlatformRequest) SetGbId(v string) *CreateParentPlatformRequest {
	s.GbId = &v
	return s
}

func (s *CreateParentPlatformRequest) SetIp(v string) *CreateParentPlatformRequest {
	s.Ip = &v
	return s
}

func (s *CreateParentPlatformRequest) SetName(v string) *CreateParentPlatformRequest {
	s.Name = &v
	return s
}

func (s *CreateParentPlatformRequest) SetOwnerId(v int64) *CreateParentPlatformRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateParentPlatformRequest) SetPort(v int64) *CreateParentPlatformRequest {
	s.Port = &v
	return s
}

func (s *CreateParentPlatformRequest) SetProtocol(v string) *CreateParentPlatformRequest {
	s.Protocol = &v
	return s
}

type CreateParentPlatformResponseBody struct {
	// example:
	//
	// 359*****374-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateParentPlatformResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateParentPlatformResponseBody) GoString() string {
	return s.String()
}

func (s *CreateParentPlatformResponseBody) SetId(v string) *CreateParentPlatformResponseBody {
	s.Id = &v
	return s
}

func (s *CreateParentPlatformResponseBody) SetRequestId(v string) *CreateParentPlatformResponseBody {
	s.RequestId = &v
	return s
}

type CreateParentPlatformResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateParentPlatformResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateParentPlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateParentPlatformResponse) GoString() string {
	return s.String()
}

func (s *CreateParentPlatformResponse) SetHeaders(v map[string]*string) *CreateParentPlatformResponse {
	s.Headers = v
	return s
}

func (s *CreateParentPlatformResponse) SetStatusCode(v int32) *CreateParentPlatformResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateParentPlatformResponse) SetBody(v *CreateParentPlatformResponseBody) *CreateParentPlatformResponse {
	s.Body = v
	return s
}

type CreateRenderingInstanceRequest struct {
	// example:
	//
	// true
	AutoRenew  *bool                                     `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ClientInfo *CreateRenderingInstanceRequestClientInfo `json:"ClientInfo,omitempty" xml:"ClientInfo,omitempty" type:"Struct"`
	// example:
	//
	// PrePaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// example:
	//
	// 10
	InternetMaxBandwidth *int64 `json:"InternetMaxBandwidth,omitempty" xml:"InternetMaxBandwidth,omitempty"`
	// example:
	//
	// 1
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// crs.cp.l1
	RenderingSpec *string `json:"RenderingSpec,omitempty" xml:"RenderingSpec,omitempty"`
}

func (s CreateRenderingInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRenderingInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateRenderingInstanceRequest) SetAutoRenew(v bool) *CreateRenderingInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateRenderingInstanceRequest) SetClientInfo(v *CreateRenderingInstanceRequestClientInfo) *CreateRenderingInstanceRequest {
	s.ClientInfo = v
	return s
}

func (s *CreateRenderingInstanceRequest) SetInstanceChargeType(v string) *CreateRenderingInstanceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateRenderingInstanceRequest) SetInternetChargeType(v string) *CreateRenderingInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateRenderingInstanceRequest) SetInternetMaxBandwidth(v int64) *CreateRenderingInstanceRequest {
	s.InternetMaxBandwidth = &v
	return s
}

func (s *CreateRenderingInstanceRequest) SetPeriod(v string) *CreateRenderingInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateRenderingInstanceRequest) SetRenderingSpec(v string) *CreateRenderingInstanceRequest {
	s.RenderingSpec = &v
	return s
}

type CreateRenderingInstanceRequestClientInfo struct {
	// example:
	//
	// 172.21.128.110
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
}

func (s CreateRenderingInstanceRequestClientInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateRenderingInstanceRequestClientInfo) GoString() string {
	return s.String()
}

func (s *CreateRenderingInstanceRequestClientInfo) SetClientIp(v string) *CreateRenderingInstanceRequestClientInfo {
	s.ClientIp = &v
	return s
}

type CreateRenderingInstanceShrinkRequest struct {
	// example:
	//
	// true
	AutoRenew        *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ClientInfoShrink *string `json:"ClientInfo,omitempty" xml:"ClientInfo,omitempty"`
	// example:
	//
	// PrePaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// example:
	//
	// 10
	InternetMaxBandwidth *int64 `json:"InternetMaxBandwidth,omitempty" xml:"InternetMaxBandwidth,omitempty"`
	// example:
	//
	// 1
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// crs.cp.l1
	RenderingSpec *string `json:"RenderingSpec,omitempty" xml:"RenderingSpec,omitempty"`
}

func (s CreateRenderingInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRenderingInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateRenderingInstanceShrinkRequest) SetAutoRenew(v bool) *CreateRenderingInstanceShrinkRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateRenderingInstanceShrinkRequest) SetClientInfoShrink(v string) *CreateRenderingInstanceShrinkRequest {
	s.ClientInfoShrink = &v
	return s
}

func (s *CreateRenderingInstanceShrinkRequest) SetInstanceChargeType(v string) *CreateRenderingInstanceShrinkRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateRenderingInstanceShrinkRequest) SetInternetChargeType(v string) *CreateRenderingInstanceShrinkRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateRenderingInstanceShrinkRequest) SetInternetMaxBandwidth(v int64) *CreateRenderingInstanceShrinkRequest {
	s.InternetMaxBandwidth = &v
	return s
}

func (s *CreateRenderingInstanceShrinkRequest) SetPeriod(v string) *CreateRenderingInstanceShrinkRequest {
	s.Period = &v
	return s
}

func (s *CreateRenderingInstanceShrinkRequest) SetRenderingSpec(v string) *CreateRenderingInstanceShrinkRequest {
	s.RenderingSpec = &v
	return s
}

type CreateRenderingInstanceResponseBody struct {
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateRenderingInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRenderingInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRenderingInstanceResponseBody) SetRenderingInstanceId(v string) *CreateRenderingInstanceResponseBody {
	s.RenderingInstanceId = &v
	return s
}

func (s *CreateRenderingInstanceResponseBody) SetRequestId(v string) *CreateRenderingInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateRenderingInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRenderingInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRenderingInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRenderingInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateRenderingInstanceResponse) SetHeaders(v map[string]*string) *CreateRenderingInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateRenderingInstanceResponse) SetStatusCode(v int32) *CreateRenderingInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRenderingInstanceResponse) SetBody(v *CreateRenderingInstanceResponseBody) *CreateRenderingInstanceResponse {
	s.Body = v
	return s
}

type CreateStreamSnapshotRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// device
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CreateStreamSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamSnapshotRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamSnapshotRequest) SetId(v string) *CreateStreamSnapshotRequest {
	s.Id = &v
	return s
}

func (s *CreateStreamSnapshotRequest) SetLocation(v string) *CreateStreamSnapshotRequest {
	s.Location = &v
	return s
}

func (s *CreateStreamSnapshotRequest) SetOwnerId(v int64) *CreateStreamSnapshotRequest {
	s.OwnerId = &v
	return s
}

type CreateStreamSnapshotResponseBody struct {
	// example:
	//
	// jpg
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// example:
	//
	// 720
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// examplebucket
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// example:
	//
	// oss-cn-qingdao.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// example:
	//
	// photos/live/340200*****100049/ondemand-1639126601767.jpg
	OssObject *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1639126601767
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// http://examplebucket.oss-*****.aliyuncs.com/photos/live/340200*****100049/ondemand-1639126601767.jpg
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 1280
	Width *int64 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s CreateStreamSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStreamSnapshotResponseBody) SetFormat(v string) *CreateStreamSnapshotResponseBody {
	s.Format = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetHeight(v int64) *CreateStreamSnapshotResponseBody {
	s.Height = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetId(v string) *CreateStreamSnapshotResponseBody {
	s.Id = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetOssBucket(v string) *CreateStreamSnapshotResponseBody {
	s.OssBucket = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetOssEndpoint(v string) *CreateStreamSnapshotResponseBody {
	s.OssEndpoint = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetOssObject(v string) *CreateStreamSnapshotResponseBody {
	s.OssObject = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetRequestId(v string) *CreateStreamSnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetTimestamp(v int64) *CreateStreamSnapshotResponseBody {
	s.Timestamp = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetUrl(v string) *CreateStreamSnapshotResponseBody {
	s.Url = &v
	return s
}

func (s *CreateStreamSnapshotResponseBody) SetWidth(v int64) *CreateStreamSnapshotResponseBody {
	s.Width = &v
	return s
}

type CreateStreamSnapshotResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStreamSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStreamSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamSnapshotResponse) GoString() string {
	return s.String()
}

func (s *CreateStreamSnapshotResponse) SetHeaders(v map[string]*string) *CreateStreamSnapshotResponse {
	s.Headers = v
	return s
}

func (s *CreateStreamSnapshotResponse) SetStatusCode(v int32) *CreateStreamSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStreamSnapshotResponse) SetBody(v *CreateStreamSnapshotResponseBody) *CreateStreamSnapshotResponse {
	s.Body = v
	return s
}

type CreateTemplateRequest struct {
	// example:
	//
	// http://example.com/callback
	Callback    *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// hls
	FileFormat *string `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Flv *string `json:"Flv,omitempty" xml:"Flv,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	HlsM3u8 *string `json:"HlsM3u8,omitempty" xml:"HlsM3u8,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}
	HlsTs *string `json:"HlsTs,omitempty" xml:"HlsTs,omitempty"`
	// example:
	//
	// 3600
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg
	JpgOnDemand *string `json:"JpgOnDemand,omitempty" xml:"JpgOnDemand,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}.jpg
	JpgOverwrite *string `json:"JpgOverwrite,omitempty" xml:"JpgOverwrite,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg
	JpgSequence *string `json:"JpgSequence,omitempty" xml:"JpgSequence,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Mp4 *string `json:"Mp4,omitempty" xml:"Mp4,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// bucketname
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// example:
	//
	// oss-cn-qingdao.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// example:
	//
	// oss-prefix
	OssFilePrefix *string `json:"OssFilePrefix,omitempty" xml:"OssFilePrefix,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 3
	Retention *int64 `json:"Retention,omitempty" xml:"Retention,omitempty"`
	// example:
	//
	// [{"Fps":25,"Gop":50,"Height":720,"VideoCodec":"h264","Width":1280,"Name":"sd","VideoBitrate":800}]
	TransConfigsJSON *string `json:"TransConfigsJSON,omitempty" xml:"TransConfigsJSON,omitempty"`
	// example:
	//
	// auto
	Trigger *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// record
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateTemplateRequest) SetCallback(v string) *CreateTemplateRequest {
	s.Callback = &v
	return s
}

func (s *CreateTemplateRequest) SetDescription(v string) *CreateTemplateRequest {
	s.Description = &v
	return s
}

func (s *CreateTemplateRequest) SetFileFormat(v string) *CreateTemplateRequest {
	s.FileFormat = &v
	return s
}

func (s *CreateTemplateRequest) SetFlv(v string) *CreateTemplateRequest {
	s.Flv = &v
	return s
}

func (s *CreateTemplateRequest) SetHlsM3u8(v string) *CreateTemplateRequest {
	s.HlsM3u8 = &v
	return s
}

func (s *CreateTemplateRequest) SetHlsTs(v string) *CreateTemplateRequest {
	s.HlsTs = &v
	return s
}

func (s *CreateTemplateRequest) SetInterval(v int64) *CreateTemplateRequest {
	s.Interval = &v
	return s
}

func (s *CreateTemplateRequest) SetJpgOnDemand(v string) *CreateTemplateRequest {
	s.JpgOnDemand = &v
	return s
}

func (s *CreateTemplateRequest) SetJpgOverwrite(v string) *CreateTemplateRequest {
	s.JpgOverwrite = &v
	return s
}

func (s *CreateTemplateRequest) SetJpgSequence(v string) *CreateTemplateRequest {
	s.JpgSequence = &v
	return s
}

func (s *CreateTemplateRequest) SetMp4(v string) *CreateTemplateRequest {
	s.Mp4 = &v
	return s
}

func (s *CreateTemplateRequest) SetName(v string) *CreateTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateTemplateRequest) SetOssBucket(v string) *CreateTemplateRequest {
	s.OssBucket = &v
	return s
}

func (s *CreateTemplateRequest) SetOssEndpoint(v string) *CreateTemplateRequest {
	s.OssEndpoint = &v
	return s
}

func (s *CreateTemplateRequest) SetOssFilePrefix(v string) *CreateTemplateRequest {
	s.OssFilePrefix = &v
	return s
}

func (s *CreateTemplateRequest) SetOwnerId(v int64) *CreateTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateTemplateRequest) SetRegion(v string) *CreateTemplateRequest {
	s.Region = &v
	return s
}

func (s *CreateTemplateRequest) SetRetention(v int64) *CreateTemplateRequest {
	s.Retention = &v
	return s
}

func (s *CreateTemplateRequest) SetTransConfigsJSON(v string) *CreateTemplateRequest {
	s.TransConfigsJSON = &v
	return s
}

func (s *CreateTemplateRequest) SetTrigger(v string) *CreateTemplateRequest {
	s.Trigger = &v
	return s
}

func (s *CreateTemplateRequest) SetType(v string) *CreateTemplateRequest {
	s.Type = &v
	return s
}

type CreateTemplateResponseBody struct {
	// example:
	//
	// 399*****735-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTemplateResponseBody) SetId(v string) *CreateTemplateResponseBody {
	s.Id = &v
	return s
}

func (s *CreateTemplateResponseBody) SetRequestId(v string) *CreateTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateTemplateResponse) SetHeaders(v map[string]*string) *CreateTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateTemplateResponse) SetStatusCode(v int32) *CreateTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTemplateResponse) SetBody(v *CreateTemplateResponseBody) *CreateTemplateResponse {
	s.Body = v
	return s
}

type DeleteCloudAppRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DeleteCloudAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteCloudAppRequest) SetAppId(v string) *DeleteCloudAppRequest {
	s.AppId = &v
	return s
}

type DeleteCloudAppResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCloudAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCloudAppResponseBody) SetRequestId(v string) *DeleteCloudAppResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCloudAppResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCloudAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCloudAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteCloudAppResponse) SetHeaders(v map[string]*string) *DeleteCloudAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteCloudAppResponse) SetStatusCode(v int32) *DeleteCloudAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCloudAppResponse) SetBody(v *DeleteCloudAppResponseBody) *DeleteCloudAppResponse {
	s.Body = v
	return s
}

type DeleteClusterRequest struct {
	// This parameter is required.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterRequest) SetClusterId(v string) *DeleteClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteClusterRequest) SetOwnerId(v int64) *DeleteClusterRequest {
	s.OwnerId = &v
	return s
}

type DeleteClusterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClusterResponseBody) SetRequestId(v string) *DeleteClusterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClusterResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterResponse) SetHeaders(v map[string]*string) *DeleteClusterResponse {
	s.Headers = v
	return s
}

func (s *DeleteClusterResponse) SetStatusCode(v int32) *DeleteClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteClusterResponse) SetBody(v *DeleteClusterResponseBody) *DeleteClusterResponse {
	s.Body = v
	return s
}

type DeleteDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3238848****092996
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceRequest) SetId(v string) *DeleteDeviceRequest {
	s.Id = &v
	return s
}

func (s *DeleteDeviceRequest) SetOwnerId(v int64) *DeleteDeviceRequest {
	s.OwnerId = &v
	return s
}

type DeleteDeviceResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceResponseBody) SetRequestId(v string) *DeleteDeviceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDeviceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceResponse) SetHeaders(v map[string]*string) *DeleteDeviceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceResponse) SetStatusCode(v int32) *DeleteDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDeviceResponse) SetBody(v *DeleteDeviceResponseBody) *DeleteDeviceResponse {
	s.Body = v
	return s
}

type DeleteDirectoryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****174-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDirectoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteDirectoryRequest) SetId(v string) *DeleteDirectoryRequest {
	s.Id = &v
	return s
}

func (s *DeleteDirectoryRequest) SetOwnerId(v int64) *DeleteDirectoryRequest {
	s.OwnerId = &v
	return s
}

type DeleteDirectoryResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDirectoryResponseBody) SetRequestId(v string) *DeleteDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDirectoryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDirectoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteDirectoryResponse) SetHeaders(v map[string]*string) *DeleteDirectoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteDirectoryResponse) SetStatusCode(v int32) *DeleteDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDirectoryResponse) SetBody(v *DeleteDirectoryResponseBody) *DeleteDirectoryResponse {
	s.Body = v
	return s
}

type DeleteFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// f-167131acd45omat771813f7141d28db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s DeleteFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteFileRequest) SetFileId(v string) *DeleteFileRequest {
	s.FileId = &v
	return s
}

type DeleteFileResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFileResponseBody) SetRequestId(v string) *DeleteFileResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteFileResponse) SetHeaders(v map[string]*string) *DeleteFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteFileResponse) SetStatusCode(v int32) *DeleteFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFileResponse) SetBody(v *DeleteFileResponseBody) *DeleteFileResponse {
	s.Body = v
	return s
}

type DeleteGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 33763950751395843
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 123456
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteGroupRequest) SetId(v string) *DeleteGroupRequest {
	s.Id = &v
	return s
}

func (s *DeleteGroupRequest) SetOwnerId(v int64) *DeleteGroupRequest {
	s.OwnerId = &v
	return s
}

type DeleteGroupResponseBody struct {
	// Request Id
	//
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGroupResponseBody) SetRequestId(v string) *DeleteGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteGroupResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteGroupResponse) SetHeaders(v map[string]*string) *DeleteGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteGroupResponse) SetStatusCode(v int32) *DeleteGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGroupResponse) SetBody(v *DeleteGroupResponseBody) *DeleteGroupResponse {
	s.Body = v
	return s
}

type DeleteParentPlatformRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 359*****374-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteParentPlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteParentPlatformRequest) GoString() string {
	return s.String()
}

func (s *DeleteParentPlatformRequest) SetId(v string) *DeleteParentPlatformRequest {
	s.Id = &v
	return s
}

func (s *DeleteParentPlatformRequest) SetOwnerId(v int64) *DeleteParentPlatformRequest {
	s.OwnerId = &v
	return s
}

type DeleteParentPlatformResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteParentPlatformResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteParentPlatformResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteParentPlatformResponseBody) SetRequestId(v string) *DeleteParentPlatformResponseBody {
	s.RequestId = &v
	return s
}

type DeleteParentPlatformResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteParentPlatformResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteParentPlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteParentPlatformResponse) GoString() string {
	return s.String()
}

func (s *DeleteParentPlatformResponse) SetHeaders(v map[string]*string) *DeleteParentPlatformResponse {
	s.Headers = v
	return s
}

func (s *DeleteParentPlatformResponse) SetStatusCode(v int32) *DeleteParentPlatformResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteParentPlatformResponse) SetBody(v *DeleteParentPlatformResponseBody) *DeleteParentPlatformResponse {
	s.Body = v
	return s
}

type DeletePresetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	PresetId *string `json:"PresetId,omitempty" xml:"PresetId,omitempty"`
}

func (s DeletePresetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePresetRequest) GoString() string {
	return s.String()
}

func (s *DeletePresetRequest) SetId(v string) *DeletePresetRequest {
	s.Id = &v
	return s
}

func (s *DeletePresetRequest) SetOwnerId(v int64) *DeletePresetRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePresetRequest) SetPresetId(v string) *DeletePresetRequest {
	s.PresetId = &v
	return s
}

type DeletePresetResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// F18FD685-B194-4489-9609-F80A9490A258
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePresetResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePresetResponseBody) SetId(v string) *DeletePresetResponseBody {
	s.Id = &v
	return s
}

func (s *DeletePresetResponseBody) SetRequestId(v string) *DeletePresetResponseBody {
	s.RequestId = &v
	return s
}

type DeletePresetResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePresetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePresetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePresetResponse) GoString() string {
	return s.String()
}

func (s *DeletePresetResponse) SetHeaders(v map[string]*string) *DeletePresetResponse {
	s.Headers = v
	return s
}

func (s *DeletePresetResponse) SetStatusCode(v int32) *DeletePresetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePresetResponse) SetBody(v *DeletePresetResponseBody) *DeletePresetResponse {
	s.Body = v
	return s
}

type DeletePublicKeyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// appKey
	KeyName *string `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
}

func (s DeletePublicKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePublicKeyRequest) GoString() string {
	return s.String()
}

func (s *DeletePublicKeyRequest) SetKeyName(v string) *DeletePublicKeyRequest {
	s.KeyName = &v
	return s
}

type DeletePublicKeyResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePublicKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePublicKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePublicKeyResponseBody) SetRequestId(v string) *DeletePublicKeyResponseBody {
	s.RequestId = &v
	return s
}

type DeletePublicKeyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePublicKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePublicKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePublicKeyResponse) GoString() string {
	return s.String()
}

func (s *DeletePublicKeyResponse) SetHeaders(v map[string]*string) *DeletePublicKeyResponse {
	s.Headers = v
	return s
}

func (s *DeletePublicKeyResponse) SetStatusCode(v int32) *DeletePublicKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePublicKeyResponse) SetBody(v *DeletePublicKeyResponseBody) *DeletePublicKeyResponse {
	s.Body = v
	return s
}

type DeleteRenderingInstanceConfigurationRequest struct {
	Configuration []*DeleteRenderingInstanceConfigurationRequestConfiguration `json:"Configuration,omitempty" xml:"Configuration,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s DeleteRenderingInstanceConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRenderingInstanceConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DeleteRenderingInstanceConfigurationRequest) SetConfiguration(v []*DeleteRenderingInstanceConfigurationRequestConfiguration) *DeleteRenderingInstanceConfigurationRequest {
	s.Configuration = v
	return s
}

func (s *DeleteRenderingInstanceConfigurationRequest) SetRenderingInstanceId(v string) *DeleteRenderingInstanceConfigurationRequest {
	s.RenderingInstanceId = &v
	return s
}

type DeleteRenderingInstanceConfigurationRequestConfiguration struct {
	AttributeNames []*string `json:"AttributeNames,omitempty" xml:"AttributeNames,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// location
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s DeleteRenderingInstanceConfigurationRequestConfiguration) String() string {
	return tea.Prettify(s)
}

func (s DeleteRenderingInstanceConfigurationRequestConfiguration) GoString() string {
	return s.String()
}

func (s *DeleteRenderingInstanceConfigurationRequestConfiguration) SetAttributeNames(v []*string) *DeleteRenderingInstanceConfigurationRequestConfiguration {
	s.AttributeNames = v
	return s
}

func (s *DeleteRenderingInstanceConfigurationRequestConfiguration) SetModuleName(v string) *DeleteRenderingInstanceConfigurationRequestConfiguration {
	s.ModuleName = &v
	return s
}

type DeleteRenderingInstanceConfigurationShrinkRequest struct {
	ConfigurationShrink *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s DeleteRenderingInstanceConfigurationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRenderingInstanceConfigurationShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteRenderingInstanceConfigurationShrinkRequest) SetConfigurationShrink(v string) *DeleteRenderingInstanceConfigurationShrinkRequest {
	s.ConfigurationShrink = &v
	return s
}

func (s *DeleteRenderingInstanceConfigurationShrinkRequest) SetRenderingInstanceId(v string) *DeleteRenderingInstanceConfigurationShrinkRequest {
	s.RenderingInstanceId = &v
	return s
}

type DeleteRenderingInstanceConfigurationResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRenderingInstanceConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRenderingInstanceConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRenderingInstanceConfigurationResponseBody) SetRequestId(v string) *DeleteRenderingInstanceConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRenderingInstanceConfigurationResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRenderingInstanceConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRenderingInstanceConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRenderingInstanceConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DeleteRenderingInstanceConfigurationResponse) SetHeaders(v map[string]*string) *DeleteRenderingInstanceConfigurationResponse {
	s.Headers = v
	return s
}

func (s *DeleteRenderingInstanceConfigurationResponse) SetStatusCode(v int32) *DeleteRenderingInstanceConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRenderingInstanceConfigurationResponse) SetBody(v *DeleteRenderingInstanceConfigurationResponseBody) *DeleteRenderingInstanceConfigurationResponse {
	s.Body = v
	return s
}

type DeleteTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****998-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteTemplateRequest) SetId(v string) *DeleteTemplateRequest {
	s.Id = &v
	return s
}

func (s *DeleteTemplateRequest) SetOwnerId(v int64) *DeleteTemplateRequest {
	s.OwnerId = &v
	return s
}

type DeleteTemplateResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponseBody) SetRequestId(v string) *DeleteTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponse) SetHeaders(v map[string]*string) *DeleteTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteTemplateResponse) SetStatusCode(v int32) *DeleteTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTemplateResponse) SetBody(v *DeleteTemplateResponseBody) *DeleteTemplateResponse {
	s.Body = v
	return s
}

type DeleteVsPullStreamInfoConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteVsPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVsPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteVsPullStreamInfoConfigRequest) SetAppName(v string) *DeleteVsPullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteVsPullStreamInfoConfigRequest) SetDomainName(v string) *DeleteVsPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteVsPullStreamInfoConfigRequest) SetOwnerId(v int64) *DeleteVsPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVsPullStreamInfoConfigRequest) SetStreamName(v string) *DeleteVsPullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteVsPullStreamInfoConfigResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVsPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVsPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVsPullStreamInfoConfigResponseBody) SetRequestId(v string) *DeleteVsPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVsPullStreamInfoConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVsPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVsPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVsPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteVsPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *DeleteVsPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteVsPullStreamInfoConfigResponse) SetStatusCode(v int32) *DeleteVsPullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVsPullStreamInfoConfigResponse) SetBody(v *DeleteVsPullStreamInfoConfigResponseBody) *DeleteVsPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type DeleteVsStreamsNotifyUrlConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteVsStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVsStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteVsStreamsNotifyUrlConfigRequest) SetDomainName(v string) *DeleteVsStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteVsStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *DeleteVsStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

type DeleteVsStreamsNotifyUrlConfigResponseBody struct {
	// example:
	//
	// 4C747C97-7ECD-4C61-8A92-67AD806331FF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVsStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVsStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVsStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *DeleteVsStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVsStreamsNotifyUrlConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVsStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVsStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVsStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteVsStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *DeleteVsStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteVsStreamsNotifyUrlConfigResponse) SetStatusCode(v int32) *DeleteVsStreamsNotifyUrlConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVsStreamsNotifyUrlConfigResponse) SetBody(v *DeleteVsStreamsNotifyUrlConfigResponseBody) *DeleteVsStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type DescribeAccountStatRequest struct {
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeAccountStatRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountStatRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountStatRequest) SetId(v string) *DescribeAccountStatRequest {
	s.Id = &v
	return s
}

func (s *DescribeAccountStatRequest) SetOwnerId(v int64) *DescribeAccountStatRequest {
	s.OwnerId = &v
	return s
}

type DescribeAccountStatResponseBody struct {
	// example:
	//
	// 100
	GroupLimit *int64 `json:"GroupLimit,omitempty" xml:"GroupLimit,omitempty"`
	// example:
	//
	// 6
	GroupNum *int64 `json:"GroupNum,omitempty" xml:"GroupNum,omitempty"`
	// ID
	//
	// example:
	//
	// 3238848****092996
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 20
	TemplateLimit *int64 `json:"TemplateLimit,omitempty" xml:"TemplateLimit,omitempty"`
	// example:
	//
	// 10
	TemplateNum *int64 `json:"TemplateNum,omitempty" xml:"TemplateNum,omitempty"`
}

func (s DescribeAccountStatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountStatResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountStatResponseBody) SetGroupLimit(v int64) *DescribeAccountStatResponseBody {
	s.GroupLimit = &v
	return s
}

func (s *DescribeAccountStatResponseBody) SetGroupNum(v int64) *DescribeAccountStatResponseBody {
	s.GroupNum = &v
	return s
}

func (s *DescribeAccountStatResponseBody) SetId(v string) *DescribeAccountStatResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeAccountStatResponseBody) SetRequestId(v string) *DescribeAccountStatResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccountStatResponseBody) SetTemplateLimit(v int64) *DescribeAccountStatResponseBody {
	s.TemplateLimit = &v
	return s
}

func (s *DescribeAccountStatResponseBody) SetTemplateNum(v int64) *DescribeAccountStatResponseBody {
	s.TemplateNum = &v
	return s
}

type DescribeAccountStatResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAccountStatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAccountStatResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountStatResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountStatResponse) SetHeaders(v map[string]*string) *DescribeAccountStatResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountStatResponse) SetStatusCode(v int32) *DescribeAccountStatResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccountStatResponse) SetBody(v *DescribeAccountStatResponseBody) *DescribeAccountStatResponse {
	s.Body = v
	return s
}

type DescribeClusterRequest struct {
	// This parameter is required.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterRequest) SetClusterId(v string) *DescribeClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterRequest) SetOwnerId(v int64) *DescribeClusterRequest {
	s.OwnerId = &v
	return s
}

type DescribeClusterResponseBody struct {
	ClusterId     *string                                     `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Description   *string                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	InternalPorts []*DescribeClusterResponseBodyInternalPorts `json:"InternalPorts,omitempty" xml:"InternalPorts,omitempty" type:"Repeated"`
	MaintainTime  *string                                     `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	Name          *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status        *string                                     `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterResponseBody) SetClusterId(v string) *DescribeClusterResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterResponseBody) SetDescription(v string) *DescribeClusterResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeClusterResponseBody) SetInternalPorts(v []*DescribeClusterResponseBodyInternalPorts) *DescribeClusterResponseBody {
	s.InternalPorts = v
	return s
}

func (s *DescribeClusterResponseBody) SetMaintainTime(v string) *DescribeClusterResponseBody {
	s.MaintainTime = &v
	return s
}

func (s *DescribeClusterResponseBody) SetName(v string) *DescribeClusterResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeClusterResponseBody) SetRequestId(v string) *DescribeClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterResponseBody) SetStatus(v string) *DescribeClusterResponseBody {
	s.Status = &v
	return s
}

type DescribeClusterResponseBodyInternalPorts struct {
	IpProtocol *string   `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Platform   *string   `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Port       []*string `json:"Port,omitempty" xml:"Port,omitempty" type:"Repeated"`
}

func (s DescribeClusterResponseBodyInternalPorts) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResponseBodyInternalPorts) GoString() string {
	return s.String()
}

func (s *DescribeClusterResponseBodyInternalPorts) SetIpProtocol(v string) *DescribeClusterResponseBodyInternalPorts {
	s.IpProtocol = &v
	return s
}

func (s *DescribeClusterResponseBodyInternalPorts) SetPlatform(v string) *DescribeClusterResponseBodyInternalPorts {
	s.Platform = &v
	return s
}

func (s *DescribeClusterResponseBodyInternalPorts) SetPort(v []*string) *DescribeClusterResponseBodyInternalPorts {
	s.Port = v
	return s
}

type DescribeClusterResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterResponse) SetHeaders(v map[string]*string) *DescribeClusterResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterResponse) SetStatusCode(v int32) *DescribeClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterResponse) SetBody(v *DescribeClusterResponseBody) *DescribeClusterResponse {
	s.Body = v
	return s
}

type DescribeClusterDevicesRequest struct {
	// This parameter is required.
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EdgeNodeName *string `json:"EdgeNodeName,omitempty" xml:"EdgeNodeName,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo       *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize     *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	Platform      *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
}

func (s DescribeClusterDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterDevicesRequest) SetClusterId(v string) *DescribeClusterDevicesRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterDevicesRequest) SetDescription(v string) *DescribeClusterDevicesRequest {
	s.Description = &v
	return s
}

func (s *DescribeClusterDevicesRequest) SetEdgeNodeName(v string) *DescribeClusterDevicesRequest {
	s.EdgeNodeName = &v
	return s
}

func (s *DescribeClusterDevicesRequest) SetOwnerId(v int64) *DescribeClusterDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeClusterDevicesRequest) SetPageNo(v int64) *DescribeClusterDevicesRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeClusterDevicesRequest) SetPageSize(v int64) *DescribeClusterDevicesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeClusterDevicesRequest) SetPlatform(v string) *DescribeClusterDevicesRequest {
	s.Platform = &v
	return s
}

func (s *DescribeClusterDevicesRequest) SetSpecification(v string) *DescribeClusterDevicesRequest {
	s.Specification = &v
	return s
}

type DescribeClusterDevicesResponseBody struct {
	Devices   []*DescribeClusterDevicesResponseBodyDevices `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Repeated"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeClusterDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterDevicesResponseBody) SetDevices(v []*DescribeClusterDevicesResponseBodyDevices) *DescribeClusterDevicesResponseBody {
	s.Devices = v
	return s
}

func (s *DescribeClusterDevicesResponseBody) SetRequestId(v string) *DescribeClusterDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterDevicesResponseBody) SetTotal(v int64) *DescribeClusterDevicesResponseBody {
	s.Total = &v
	return s
}

type DescribeClusterDevicesResponseBodyDevices struct {
	AutoRenew          *bool                                                `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod    *int32                                               `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	Description        *string                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	EdgeNodeName       *string                                              `json:"EdgeNodeName,omitempty" xml:"EdgeNodeName,omitempty"`
	HostRom            *string                                              `json:"HostRom,omitempty" xml:"HostRom,omitempty"`
	ImageId            *string                                              `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceChargeType *string                                              `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceId         *string                                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName       *string                                              `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	IpInfos            []*DescribeClusterDevicesResponseBodyDevicesIpInfos  `json:"IpInfos,omitempty" xml:"IpInfos,omitempty" type:"Repeated"`
	MacAddress         *string                                              `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	Period             *int32                                               `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit         *string                                              `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PlatformType       *string                                              `json:"PlatformType,omitempty" xml:"PlatformType,omitempty"`
	PodInfos           []*DescribeClusterDevicesResponseBodyDevicesPodInfos `json:"PodInfos,omitempty" xml:"PodInfos,omitempty" type:"Repeated"`
	Server             *string                                              `json:"Server,omitempty" xml:"Server,omitempty"`
	Status             *string                                              `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterDevicesResponseBodyDevices) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterDevicesResponseBodyDevices) GoString() string {
	return s.String()
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetAutoRenew(v bool) *DescribeClusterDevicesResponseBodyDevices {
	s.AutoRenew = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetAutoRenewPeriod(v int32) *DescribeClusterDevicesResponseBodyDevices {
	s.AutoRenewPeriod = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetDescription(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.Description = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetEdgeNodeName(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.EdgeNodeName = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetHostRom(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.HostRom = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetImageId(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.ImageId = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetInstanceChargeType(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetInstanceId(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.InstanceId = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetInstanceName(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.InstanceName = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetIpInfos(v []*DescribeClusterDevicesResponseBodyDevicesIpInfos) *DescribeClusterDevicesResponseBodyDevices {
	s.IpInfos = v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetMacAddress(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.MacAddress = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetPeriod(v int32) *DescribeClusterDevicesResponseBodyDevices {
	s.Period = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetPeriodUnit(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetPlatformType(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.PlatformType = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetPodInfos(v []*DescribeClusterDevicesResponseBodyDevicesPodInfos) *DescribeClusterDevicesResponseBodyDevices {
	s.PodInfos = v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetServer(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.Server = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevices) SetStatus(v string) *DescribeClusterDevicesResponseBodyDevices {
	s.Status = &v
	return s
}

type DescribeClusterDevicesResponseBodyDevicesIpInfos struct {
	ExternalIp   *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	ISP          *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	InternalIp   *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol   *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	NatType      *string `json:"NatType,omitempty" xml:"NatType,omitempty"`
}

func (s DescribeClusterDevicesResponseBodyDevicesIpInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterDevicesResponseBodyDevicesIpInfos) GoString() string {
	return s.String()
}

func (s *DescribeClusterDevicesResponseBodyDevicesIpInfos) SetExternalIp(v string) *DescribeClusterDevicesResponseBodyDevicesIpInfos {
	s.ExternalIp = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesIpInfos) SetExternalPort(v string) *DescribeClusterDevicesResponseBodyDevicesIpInfos {
	s.ExternalPort = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesIpInfos) SetISP(v string) *DescribeClusterDevicesResponseBodyDevicesIpInfos {
	s.ISP = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesIpInfos) SetInternalIp(v string) *DescribeClusterDevicesResponseBodyDevicesIpInfos {
	s.InternalIp = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesIpInfos) SetInternalPort(v string) *DescribeClusterDevicesResponseBodyDevicesIpInfos {
	s.InternalPort = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesIpInfos) SetIpProtocol(v string) *DescribeClusterDevicesResponseBodyDevicesIpInfos {
	s.IpProtocol = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesIpInfos) SetNatType(v string) *DescribeClusterDevicesResponseBodyDevicesIpInfos {
	s.NatType = &v
	return s
}

type DescribeClusterDevicesResponseBodyDevicesPodInfos struct {
	Network []*DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork `json:"Network,omitempty" xml:"Network,omitempty" type:"Repeated"`
	PodId   *string                                                     `json:"PodId,omitempty" xml:"PodId,omitempty"`
	PodIp   *string                                                     `json:"PodIp,omitempty" xml:"PodIp,omitempty"`
	Status  *string                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterDevicesResponseBodyDevicesPodInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterDevicesResponseBodyDevicesPodInfos) GoString() string {
	return s.String()
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfos) SetNetwork(v []*DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) *DescribeClusterDevicesResponseBodyDevicesPodInfos {
	s.Network = v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfos) SetPodId(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfos {
	s.PodId = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfos) SetPodIp(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfos {
	s.PodIp = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfos) SetStatus(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfos {
	s.Status = &v
	return s
}

type DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork struct {
	ContainerPorts *string `json:"ContainerPorts,omitempty" xml:"ContainerPorts,omitempty"`
	ExternalIp     *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalIsp    *string `json:"ExternalIsp,omitempty" xml:"ExternalIsp,omitempty"`
	ExternalPorts  *string `json:"ExternalPorts,omitempty" xml:"ExternalPorts,omitempty"`
	OutgoingIp     *string `json:"OutgoingIp,omitempty" xml:"OutgoingIp,omitempty"`
	OutgoingIsp    *string `json:"OutgoingIsp,omitempty" xml:"OutgoingIsp,omitempty"`
}

func (s DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) GoString() string {
	return s.String()
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) SetContainerPorts(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork {
	s.ContainerPorts = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) SetExternalIp(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork {
	s.ExternalIp = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) SetExternalIsp(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork {
	s.ExternalIsp = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) SetExternalPorts(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork {
	s.ExternalPorts = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) SetOutgoingIp(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork {
	s.OutgoingIp = &v
	return s
}

func (s *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork) SetOutgoingIsp(v string) *DescribeClusterDevicesResponseBodyDevicesPodInfosNetwork {
	s.OutgoingIsp = &v
	return s
}

type DescribeClusterDevicesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterDevicesResponse) SetHeaders(v map[string]*string) *DescribeClusterDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterDevicesResponse) SetStatusCode(v int32) *DescribeClusterDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterDevicesResponse) SetBody(v *DescribeClusterDevicesResponseBody) *DescribeClusterDevicesResponse {
	s.Body = v
	return s
}

type DescribeClustersRequest struct {
	OwnerId  *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo   *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersRequest) GoString() string {
	return s.String()
}

func (s *DescribeClustersRequest) SetOwnerId(v int64) *DescribeClustersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeClustersRequest) SetPageNo(v int64) *DescribeClustersRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeClustersRequest) SetPageSize(v int64) *DescribeClustersRequest {
	s.PageSize = &v
	return s
}

type DescribeClustersResponseBody struct {
	Clusters  []*DescribeClustersResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Repeated"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeClustersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponseBody) SetClusters(v []*DescribeClustersResponseBodyClusters) *DescribeClustersResponseBody {
	s.Clusters = v
	return s
}

func (s *DescribeClustersResponseBody) SetRequestId(v string) *DescribeClustersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClustersResponseBody) SetTotal(v int64) *DescribeClustersResponseBody {
	s.Total = &v
	return s
}

type DescribeClustersResponseBodyClusters struct {
	ClusterId     *string                                              `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Description   *string                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	InternalPorts []*DescribeClustersResponseBodyClustersInternalPorts `json:"InternalPorts,omitempty" xml:"InternalPorts,omitempty" type:"Repeated"`
	MaintainTime  *string                                              `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	Name          *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Status        *string                                              `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClustersResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponseBodyClusters) SetClusterId(v string) *DescribeClustersResponseBodyClusters {
	s.ClusterId = &v
	return s
}

func (s *DescribeClustersResponseBodyClusters) SetDescription(v string) *DescribeClustersResponseBodyClusters {
	s.Description = &v
	return s
}

func (s *DescribeClustersResponseBodyClusters) SetInternalPorts(v []*DescribeClustersResponseBodyClustersInternalPorts) *DescribeClustersResponseBodyClusters {
	s.InternalPorts = v
	return s
}

func (s *DescribeClustersResponseBodyClusters) SetMaintainTime(v string) *DescribeClustersResponseBodyClusters {
	s.MaintainTime = &v
	return s
}

func (s *DescribeClustersResponseBodyClusters) SetName(v string) *DescribeClustersResponseBodyClusters {
	s.Name = &v
	return s
}

func (s *DescribeClustersResponseBodyClusters) SetStatus(v string) *DescribeClustersResponseBodyClusters {
	s.Status = &v
	return s
}

type DescribeClustersResponseBodyClustersInternalPorts struct {
	IpProtocol *string   `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Platform   *string   `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Port       []*string `json:"Port,omitempty" xml:"Port,omitempty" type:"Repeated"`
}

func (s DescribeClustersResponseBodyClustersInternalPorts) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponseBodyClustersInternalPorts) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponseBodyClustersInternalPorts) SetIpProtocol(v string) *DescribeClustersResponseBodyClustersInternalPorts {
	s.IpProtocol = &v
	return s
}

func (s *DescribeClustersResponseBodyClustersInternalPorts) SetPlatform(v string) *DescribeClustersResponseBodyClustersInternalPorts {
	s.Platform = &v
	return s
}

func (s *DescribeClustersResponseBodyClustersInternalPorts) SetPort(v []*string) *DescribeClustersResponseBodyClustersInternalPorts {
	s.Port = v
	return s
}

type DescribeClustersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClustersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponse) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponse) SetHeaders(v map[string]*string) *DescribeClustersResponse {
	s.Headers = v
	return s
}

func (s *DescribeClustersResponse) SetStatusCode(v int32) *DescribeClustersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClustersResponse) SetBody(v *DescribeClustersResponseBody) *DescribeClustersResponse {
	s.Body = v
	return s
}

type DescribeContainerInstanceIdRequest struct {
	// This parameter is required.
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PodIndex *int32 `json:"PodIndex,omitempty" xml:"PodIndex,omitempty"`
}

func (s DescribeContainerInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstanceIdRequest) SetNodeName(v string) *DescribeContainerInstanceIdRequest {
	s.NodeName = &v
	return s
}

func (s *DescribeContainerInstanceIdRequest) SetOwnerId(v int64) *DescribeContainerInstanceIdRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeContainerInstanceIdRequest) SetPodIndex(v int32) *DescribeContainerInstanceIdRequest {
	s.PodIndex = &v
	return s
}

type DescribeContainerInstanceIdResponseBody struct {
	InstanceDetail *DescribeContainerInstanceIdResponseBodyInstanceDetail `json:"InstanceDetail,omitempty" xml:"InstanceDetail,omitempty" type:"Struct"`
	RequestId      *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeContainerInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstanceIdResponseBody) SetInstanceDetail(v *DescribeContainerInstanceIdResponseBodyInstanceDetail) *DescribeContainerInstanceIdResponseBody {
	s.InstanceDetail = v
	return s
}

func (s *DescribeContainerInstanceIdResponseBody) SetRequestId(v string) *DescribeContainerInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

type DescribeContainerInstanceIdResponseBodyInstanceDetail struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeContainerInstanceIdResponseBodyInstanceDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstanceIdResponseBodyInstanceDetail) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstanceIdResponseBodyInstanceDetail) SetInstanceId(v string) *DescribeContainerInstanceIdResponseBodyInstanceDetail {
	s.InstanceId = &v
	return s
}

type DescribeContainerInstanceIdResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeContainerInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeContainerInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstanceIdResponse) SetHeaders(v map[string]*string) *DescribeContainerInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeContainerInstanceIdResponse) SetStatusCode(v int32) *DescribeContainerInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContainerInstanceIdResponse) SetBody(v *DescribeContainerInstanceIdResponseBody) *DescribeContainerInstanceIdResponse {
	s.Body = v
	return s
}

type DescribeDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3238848****092996-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// false
	IncludeDirectory *bool `json:"IncludeDirectory,omitempty" xml:"IncludeDirectory,omitempty"`
	// example:
	//
	// false
	IncludeStats *bool  `json:"IncludeStats,omitempty" xml:"IncludeStats,omitempty"`
	OwnerId      *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeviceRequest) SetId(v string) *DescribeDeviceRequest {
	s.Id = &v
	return s
}

func (s *DescribeDeviceRequest) SetIncludeDirectory(v bool) *DescribeDeviceRequest {
	s.IncludeDirectory = &v
	return s
}

func (s *DescribeDeviceRequest) SetIncludeStats(v bool) *DescribeDeviceRequest {
	s.IncludeStats = &v
	return s
}

func (s *DescribeDeviceRequest) SetOwnerId(v int64) *DescribeDeviceRequest {
	s.OwnerId = &v
	return s
}

type DescribeDeviceResponseBody struct {
	// example:
	//
	// 5
	AlarmMethod   *string `json:"AlarmMethod,omitempty" xml:"AlarmMethod,omitempty"`
	AutoDirectory *bool   `json:"AutoDirectory,omitempty" xml:"AutoDirectory,omitempty"`
	// example:
	//
	// false
	AutoPos *bool `json:"AutoPos,omitempty" xml:"AutoPos,omitempty"`
	// example:
	//
	// false
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// example:
	//
	// 2019-02-28T17:01:17Z
	ChannelSyncTime *string `json:"ChannelSyncTime,omitempty" xml:"ChannelSyncTime,omitempty"`
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string                              `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string                              `json:"Description,omitempty" xml:"Description,omitempty"`
	Directory   *DescribeDeviceResponseBodyDirectory `json:"Directory,omitempty" xml:"Directory,omitempty" type:"Struct"`
	// example:
	//
	// 3238848****092994-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// example:
	//
	// 7D0*****4C0
	Dsn *string `json:"Dsn,omitempty" xml:"Dsn,omitempty"`
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// example:
	//
	// 31000000****00000002
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 3238848****092994-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 3238848****092996-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 10.10.10.10
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// example:
	//
	// 119.20
	Latitude *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	// example:
	//
	// 45.00
	Longitude *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// {}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 3238848****092995-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// admin
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// 8080
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// 300
	PosInterval *int64 `json:"PosInterval,omitempty" xml:"PosInterval,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// example:
	//
	// 2019-02-28T17:00:17Z
	RegisteredTime *string `json:"RegisteredTime,omitempty" xml:"RegisteredTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Stats     *DescribeDeviceResponseBodyStats `json:"Stats,omitempty" xml:"Stats,omitempty" type:"Struct"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ipc
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://xxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// admin
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Vendor   *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeviceResponseBody) SetAlarmMethod(v string) *DescribeDeviceResponseBody {
	s.AlarmMethod = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetAutoDirectory(v bool) *DescribeDeviceResponseBody {
	s.AutoDirectory = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetAutoPos(v bool) *DescribeDeviceResponseBody {
	s.AutoPos = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetAutoStart(v bool) *DescribeDeviceResponseBody {
	s.AutoStart = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetChannelSyncTime(v string) *DescribeDeviceResponseBody {
	s.ChannelSyncTime = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetCreatedTime(v string) *DescribeDeviceResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetDescription(v string) *DescribeDeviceResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetDirectory(v *DescribeDeviceResponseBodyDirectory) *DescribeDeviceResponseBody {
	s.Directory = v
	return s
}

func (s *DescribeDeviceResponseBody) SetDirectoryId(v string) *DescribeDeviceResponseBody {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetDsn(v string) *DescribeDeviceResponseBody {
	s.Dsn = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetEnabled(v bool) *DescribeDeviceResponseBody {
	s.Enabled = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetGbId(v string) *DescribeDeviceResponseBody {
	s.GbId = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetGroupId(v string) *DescribeDeviceResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetId(v string) *DescribeDeviceResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetIp(v string) *DescribeDeviceResponseBody {
	s.Ip = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetLatitude(v string) *DescribeDeviceResponseBody {
	s.Latitude = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetLongitude(v string) *DescribeDeviceResponseBody {
	s.Longitude = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetName(v string) *DescribeDeviceResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetParams(v string) *DescribeDeviceResponseBody {
	s.Params = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetParentId(v string) *DescribeDeviceResponseBody {
	s.ParentId = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetPassword(v string) *DescribeDeviceResponseBody {
	s.Password = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetPort(v int64) *DescribeDeviceResponseBody {
	s.Port = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetPosInterval(v int64) *DescribeDeviceResponseBody {
	s.PosInterval = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetProtocol(v string) *DescribeDeviceResponseBody {
	s.Protocol = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetRegisteredTime(v string) *DescribeDeviceResponseBody {
	s.RegisteredTime = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetRequestId(v string) *DescribeDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetStats(v *DescribeDeviceResponseBodyStats) *DescribeDeviceResponseBody {
	s.Stats = v
	return s
}

func (s *DescribeDeviceResponseBody) SetStatus(v string) *DescribeDeviceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetType(v string) *DescribeDeviceResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetUrl(v string) *DescribeDeviceResponseBody {
	s.Url = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetUsername(v string) *DescribeDeviceResponseBody {
	s.Username = &v
	return s
}

func (s *DescribeDeviceResponseBody) SetVendor(v string) *DescribeDeviceResponseBody {
	s.Vendor = &v
	return s
}

type DescribeDeviceResponseBodyDirectory struct {
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 3238848****092994-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 3238848****092994-cn-qingdao
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 3238848****092995-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s DescribeDeviceResponseBodyDirectory) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceResponseBodyDirectory) GoString() string {
	return s.String()
}

func (s *DescribeDeviceResponseBodyDirectory) SetCreatedTime(v string) *DescribeDeviceResponseBodyDirectory {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDeviceResponseBodyDirectory) SetDescription(v string) *DescribeDeviceResponseBodyDirectory {
	s.Description = &v
	return s
}

func (s *DescribeDeviceResponseBodyDirectory) SetGroupId(v string) *DescribeDeviceResponseBodyDirectory {
	s.GroupId = &v
	return s
}

func (s *DescribeDeviceResponseBodyDirectory) SetId(v string) *DescribeDeviceResponseBodyDirectory {
	s.Id = &v
	return s
}

func (s *DescribeDeviceResponseBodyDirectory) SetName(v string) *DescribeDeviceResponseBodyDirectory {
	s.Name = &v
	return s
}

func (s *DescribeDeviceResponseBodyDirectory) SetParentId(v string) *DescribeDeviceResponseBodyDirectory {
	s.ParentId = &v
	return s
}

type DescribeDeviceResponseBodyStats struct {
	// example:
	//
	// 1
	ChannelNum *int64 `json:"ChannelNum,omitempty" xml:"ChannelNum,omitempty"`
	// example:
	//
	// 1
	FailedNum *int64 `json:"FailedNum,omitempty" xml:"FailedNum,omitempty"`
	// example:
	//
	// 1
	OfflineNum *int64 `json:"OfflineNum,omitempty" xml:"OfflineNum,omitempty"`
	// example:
	//
	// 1
	OnlineNum *int64 `json:"OnlineNum,omitempty" xml:"OnlineNum,omitempty"`
	// example:
	//
	// 1
	StreamNum *int64 `json:"StreamNum,omitempty" xml:"StreamNum,omitempty"`
}

func (s DescribeDeviceResponseBodyStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceResponseBodyStats) GoString() string {
	return s.String()
}

func (s *DescribeDeviceResponseBodyStats) SetChannelNum(v int64) *DescribeDeviceResponseBodyStats {
	s.ChannelNum = &v
	return s
}

func (s *DescribeDeviceResponseBodyStats) SetFailedNum(v int64) *DescribeDeviceResponseBodyStats {
	s.FailedNum = &v
	return s
}

func (s *DescribeDeviceResponseBodyStats) SetOfflineNum(v int64) *DescribeDeviceResponseBodyStats {
	s.OfflineNum = &v
	return s
}

func (s *DescribeDeviceResponseBodyStats) SetOnlineNum(v int64) *DescribeDeviceResponseBodyStats {
	s.OnlineNum = &v
	return s
}

func (s *DescribeDeviceResponseBodyStats) SetStreamNum(v int64) *DescribeDeviceResponseBodyStats {
	s.StreamNum = &v
	return s
}

type DescribeDeviceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeviceResponse) SetHeaders(v map[string]*string) *DescribeDeviceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeviceResponse) SetStatusCode(v int32) *DescribeDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeviceResponse) SetBody(v *DescribeDeviceResponseBody) *DescribeDeviceResponse {
	s.Body = v
	return s
}

type DescribeDeviceChannelsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDeviceChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceChannelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeviceChannelsRequest) SetId(v string) *DescribeDeviceChannelsRequest {
	s.Id = &v
	return s
}

func (s *DescribeDeviceChannelsRequest) SetOwnerId(v int64) *DescribeDeviceChannelsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDeviceChannelsRequest) SetPageNum(v int64) *DescribeDeviceChannelsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeDeviceChannelsRequest) SetPageSize(v int64) *DescribeDeviceChannelsRequest {
	s.PageSize = &v
	return s
}

type DescribeDeviceChannelsResponseBody struct {
	Channels []*DescribeDeviceChannelsResponseBodyChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 4641C72D-462E-4AEA-8485-FC267AF90B0A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDeviceChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeviceChannelsResponseBody) SetChannels(v []*DescribeDeviceChannelsResponseBodyChannels) *DescribeDeviceChannelsResponseBody {
	s.Channels = v
	return s
}

func (s *DescribeDeviceChannelsResponseBody) SetPageCount(v int64) *DescribeDeviceChannelsResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBody) SetPageNum(v int64) *DescribeDeviceChannelsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBody) SetPageSize(v int64) *DescribeDeviceChannelsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBody) SetRequestId(v string) *DescribeDeviceChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBody) SetTotalCount(v int64) *DescribeDeviceChannelsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDeviceChannelsResponseBodyChannels struct {
	// example:
	//
	// 0
	ChannelId *int64 `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// on
	DeviceStatus *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	// example:
	//
	// 3100000****000000002
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// {}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	StreamId *string `json:"StreamId,omitempty" xml:"StreamId,omitempty"`
	// example:
	//
	// off
	StreamStatus *string `json:"StreamStatus,omitempty" xml:"StreamStatus,omitempty"`
}

func (s DescribeDeviceChannelsResponseBodyChannels) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceChannelsResponseBodyChannels) GoString() string {
	return s.String()
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetChannelId(v int64) *DescribeDeviceChannelsResponseBodyChannels {
	s.ChannelId = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetDeviceId(v string) *DescribeDeviceChannelsResponseBodyChannels {
	s.DeviceId = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetDeviceStatus(v string) *DescribeDeviceChannelsResponseBodyChannels {
	s.DeviceStatus = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetGbId(v string) *DescribeDeviceChannelsResponseBodyChannels {
	s.GbId = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetName(v string) *DescribeDeviceChannelsResponseBodyChannels {
	s.Name = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetParams(v string) *DescribeDeviceChannelsResponseBodyChannels {
	s.Params = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetStreamId(v string) *DescribeDeviceChannelsResponseBodyChannels {
	s.StreamId = &v
	return s
}

func (s *DescribeDeviceChannelsResponseBodyChannels) SetStreamStatus(v string) *DescribeDeviceChannelsResponseBodyChannels {
	s.StreamStatus = &v
	return s
}

type DescribeDeviceChannelsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeviceChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeviceChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceChannelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeviceChannelsResponse) SetHeaders(v map[string]*string) *DescribeDeviceChannelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeviceChannelsResponse) SetStatusCode(v int32) *DescribeDeviceChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeviceChannelsResponse) SetBody(v *DescribeDeviceChannelsResponseBody) *DescribeDeviceChannelsResponse {
	s.Body = v
	return s
}

type DescribeDeviceGatewayRequest struct {
	// example:
	//
	// 192.168.0.1
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// example:
	//
	// 3600
	Expire *int64 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 24611****70597051-cn-beijing
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDeviceGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceGatewayRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeviceGatewayRequest) SetClientIp(v string) *DescribeDeviceGatewayRequest {
	s.ClientIp = &v
	return s
}

func (s *DescribeDeviceGatewayRequest) SetExpire(v int64) *DescribeDeviceGatewayRequest {
	s.Expire = &v
	return s
}

func (s *DescribeDeviceGatewayRequest) SetId(v string) *DescribeDeviceGatewayRequest {
	s.Id = &v
	return s
}

func (s *DescribeDeviceGatewayRequest) SetOwnerId(v int64) *DescribeDeviceGatewayRequest {
	s.OwnerId = &v
	return s
}

type DescribeDeviceGatewayResponseBody struct {
	// example:
	//
	// 192.168.0.1
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// example:
	//
	// 8080
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// f5578fbc-694c-461d-a2a2-eb090775cef0
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s DescribeDeviceGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeviceGatewayResponseBody) SetHost(v string) *DescribeDeviceGatewayResponseBody {
	s.Host = &v
	return s
}

func (s *DescribeDeviceGatewayResponseBody) SetPort(v int64) *DescribeDeviceGatewayResponseBody {
	s.Port = &v
	return s
}

func (s *DescribeDeviceGatewayResponseBody) SetProtocol(v string) *DescribeDeviceGatewayResponseBody {
	s.Protocol = &v
	return s
}

func (s *DescribeDeviceGatewayResponseBody) SetRequestId(v string) *DescribeDeviceGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeviceGatewayResponseBody) SetToken(v string) *DescribeDeviceGatewayResponseBody {
	s.Token = &v
	return s
}

type DescribeDeviceGatewayResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeviceGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeviceGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceGatewayResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeviceGatewayResponse) SetHeaders(v map[string]*string) *DescribeDeviceGatewayResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeviceGatewayResponse) SetStatusCode(v int32) *DescribeDeviceGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeviceGatewayResponse) SetBody(v *DescribeDeviceGatewayResponseBody) *DescribeDeviceGatewayResponse {
	s.Body = v
	return s
}

type DescribeDeviceURLRequest struct {
	Auth *bool `json:"Auth,omitempty" xml:"Auth,omitempty"`
	// example:
	//
	// 3600
	Expire *int64 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// push
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// live001
	Stream *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDeviceURLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceURLRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeviceURLRequest) SetAuth(v bool) *DescribeDeviceURLRequest {
	s.Auth = &v
	return s
}

func (s *DescribeDeviceURLRequest) SetExpire(v int64) *DescribeDeviceURLRequest {
	s.Expire = &v
	return s
}

func (s *DescribeDeviceURLRequest) SetId(v string) *DescribeDeviceURLRequest {
	s.Id = &v
	return s
}

func (s *DescribeDeviceURLRequest) SetMode(v string) *DescribeDeviceURLRequest {
	s.Mode = &v
	return s
}

func (s *DescribeDeviceURLRequest) SetOutProtocol(v string) *DescribeDeviceURLRequest {
	s.OutProtocol = &v
	return s
}

func (s *DescribeDeviceURLRequest) SetOwnerId(v int64) *DescribeDeviceURLRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDeviceURLRequest) SetStream(v string) *DescribeDeviceURLRequest {
	s.Stream = &v
	return s
}

func (s *DescribeDeviceURLRequest) SetType(v string) *DescribeDeviceURLRequest {
	s.Type = &v
	return s
}

type DescribeDeviceURLResponseBody struct {
	// example:
	//
	// 1639130258
	ExpireTime *int64 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// rtmp://demo.aliyundoc.com/live/live001?auth_key=1639130258-0-0-b2b04fe85ece6*****a6b1a42bc7e
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeDeviceURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceURLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeviceURLResponseBody) SetExpireTime(v int64) *DescribeDeviceURLResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDeviceURLResponseBody) SetRequestId(v string) *DescribeDeviceURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeviceURLResponseBody) SetUrl(v string) *DescribeDeviceURLResponseBody {
	s.Url = &v
	return s
}

type DescribeDeviceURLResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeviceURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeviceURLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceURLResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeviceURLResponse) SetHeaders(v map[string]*string) *DescribeDeviceURLResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeviceURLResponse) SetStatusCode(v int32) *DescribeDeviceURLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeviceURLResponse) SetBody(v *DescribeDeviceURLResponseBody) *DescribeDeviceURLResponse {
	s.Body = v
	return s
}

type DescribeDevicesRequest struct {
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// example:
	//
	// 7D0*****4C0
	Dsn *string `json:"Dsn,omitempty" xml:"Dsn,omitempty"`
	// example:
	//
	// 310000000****0000002
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// false
	IncludeDirectory *bool `json:"IncludeDirectory,omitempty" xml:"IncludeDirectory,omitempty"`
	// example:
	//
	// false
	IncludeStats *bool   `json:"IncludeStats,omitempty" xml:"IncludeStats,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	SortBy   *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ipc
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 8yd*****qem
	Vendor *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDevicesRequest) SetDirectoryId(v string) *DescribeDevicesRequest {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDevicesRequest) SetDsn(v string) *DescribeDevicesRequest {
	s.Dsn = &v
	return s
}

func (s *DescribeDevicesRequest) SetGbId(v string) *DescribeDevicesRequest {
	s.GbId = &v
	return s
}

func (s *DescribeDevicesRequest) SetGroupId(v string) *DescribeDevicesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDevicesRequest) SetId(v string) *DescribeDevicesRequest {
	s.Id = &v
	return s
}

func (s *DescribeDevicesRequest) SetIncludeDirectory(v bool) *DescribeDevicesRequest {
	s.IncludeDirectory = &v
	return s
}

func (s *DescribeDevicesRequest) SetIncludeStats(v bool) *DescribeDevicesRequest {
	s.IncludeStats = &v
	return s
}

func (s *DescribeDevicesRequest) SetName(v string) *DescribeDevicesRequest {
	s.Name = &v
	return s
}

func (s *DescribeDevicesRequest) SetOwnerId(v int64) *DescribeDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDevicesRequest) SetPageNum(v int64) *DescribeDevicesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeDevicesRequest) SetPageSize(v int64) *DescribeDevicesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDevicesRequest) SetParentId(v string) *DescribeDevicesRequest {
	s.ParentId = &v
	return s
}

func (s *DescribeDevicesRequest) SetSortBy(v string) *DescribeDevicesRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeDevicesRequest) SetSortDirection(v string) *DescribeDevicesRequest {
	s.SortDirection = &v
	return s
}

func (s *DescribeDevicesRequest) SetStatus(v string) *DescribeDevicesRequest {
	s.Status = &v
	return s
}

func (s *DescribeDevicesRequest) SetType(v string) *DescribeDevicesRequest {
	s.Type = &v
	return s
}

func (s *DescribeDevicesRequest) SetVendor(v string) *DescribeDevicesRequest {
	s.Vendor = &v
	return s
}

type DescribeDevicesResponseBody struct {
	Devices []*DescribeDevicesResponseBodyDevices `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Repeated"`
	// example:
	//
	// 5
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 77
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBody) SetDevices(v []*DescribeDevicesResponseBodyDevices) *DescribeDevicesResponseBody {
	s.Devices = v
	return s
}

func (s *DescribeDevicesResponseBody) SetPageCount(v int64) *DescribeDevicesResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeDevicesResponseBody) SetPageNum(v int64) *DescribeDevicesResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeDevicesResponseBody) SetPageSize(v int64) *DescribeDevicesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDevicesResponseBody) SetRequestId(v string) *DescribeDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDevicesResponseBody) SetTotalCount(v int64) *DescribeDevicesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDevicesResponseBodyDevices struct {
	// example:
	//
	// 0
	AlarmMethod *string `json:"AlarmMethod,omitempty" xml:"AlarmMethod,omitempty"`
	// example:
	//
	// true
	AutoDirectory *bool `json:"AutoDirectory,omitempty" xml:"AutoDirectory,omitempty"`
	// example:
	//
	// false
	AutoPos *bool `json:"AutoPos,omitempty" xml:"AutoPos,omitempty"`
	// example:
	//
	// false
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// example:
	//
	// 2019-02-28T17:01:17Z
	ChannelSyncTime *string `json:"ChannelSyncTime,omitempty" xml:"ChannelSyncTime,omitempty"`
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string                                      `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string                                      `json:"Description,omitempty" xml:"Description,omitempty"`
	Directory   *DescribeDevicesResponseBodyDevicesDirectory `json:"Directory,omitempty" xml:"Directory,omitempty" type:"Struct"`
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// example:
	//
	// 7D0*****4C0
	Dsn *string `json:"Dsn,omitempty" xml:"Dsn,omitempty"`
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// example:
	//
	// 310000000****0000002
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 10.10.10.10
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// example:
	//
	// 119.20
	Latitude *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	// example:
	//
	// 45.00
	Longitude *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// {}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 3238848****092995
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// admin
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// 8080
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// 300
	PosInterval *int64 `json:"PosInterval,omitempty" xml:"PosInterval,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// example:
	//
	// 2019-02-28T17:00:17Z
	RegisteredTime *string                                  `json:"RegisteredTime,omitempty" xml:"RegisteredTime,omitempty"`
	Stats          *DescribeDevicesResponseBodyDevicesStats `json:"Stats,omitempty" xml:"Stats,omitempty" type:"Struct"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ipc
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://xxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// admin
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Vendor   *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeDevicesResponseBodyDevices) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBodyDevices) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBodyDevices) SetAlarmMethod(v string) *DescribeDevicesResponseBodyDevices {
	s.AlarmMethod = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetAutoDirectory(v bool) *DescribeDevicesResponseBodyDevices {
	s.AutoDirectory = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetAutoPos(v bool) *DescribeDevicesResponseBodyDevices {
	s.AutoPos = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetAutoStart(v bool) *DescribeDevicesResponseBodyDevices {
	s.AutoStart = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetChannelSyncTime(v string) *DescribeDevicesResponseBodyDevices {
	s.ChannelSyncTime = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetCreatedTime(v string) *DescribeDevicesResponseBodyDevices {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetDescription(v string) *DescribeDevicesResponseBodyDevices {
	s.Description = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetDirectory(v *DescribeDevicesResponseBodyDevicesDirectory) *DescribeDevicesResponseBodyDevices {
	s.Directory = v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetDirectoryId(v string) *DescribeDevicesResponseBodyDevices {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetDsn(v string) *DescribeDevicesResponseBodyDevices {
	s.Dsn = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetEnabled(v bool) *DescribeDevicesResponseBodyDevices {
	s.Enabled = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetGbId(v string) *DescribeDevicesResponseBodyDevices {
	s.GbId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetGroupId(v string) *DescribeDevicesResponseBodyDevices {
	s.GroupId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetId(v string) *DescribeDevicesResponseBodyDevices {
	s.Id = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetIp(v string) *DescribeDevicesResponseBodyDevices {
	s.Ip = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetLatitude(v string) *DescribeDevicesResponseBodyDevices {
	s.Latitude = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetLongitude(v string) *DescribeDevicesResponseBodyDevices {
	s.Longitude = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetName(v string) *DescribeDevicesResponseBodyDevices {
	s.Name = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetParams(v string) *DescribeDevicesResponseBodyDevices {
	s.Params = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetParentId(v string) *DescribeDevicesResponseBodyDevices {
	s.ParentId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetPassword(v string) *DescribeDevicesResponseBodyDevices {
	s.Password = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetPort(v int64) *DescribeDevicesResponseBodyDevices {
	s.Port = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetPosInterval(v int64) *DescribeDevicesResponseBodyDevices {
	s.PosInterval = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetProtocol(v string) *DescribeDevicesResponseBodyDevices {
	s.Protocol = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetRegisteredTime(v string) *DescribeDevicesResponseBodyDevices {
	s.RegisteredTime = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetStats(v *DescribeDevicesResponseBodyDevicesStats) *DescribeDevicesResponseBodyDevices {
	s.Stats = v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetStatus(v string) *DescribeDevicesResponseBodyDevices {
	s.Status = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetType(v string) *DescribeDevicesResponseBodyDevices {
	s.Type = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetUrl(v string) *DescribeDevicesResponseBodyDevices {
	s.Url = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetUsername(v string) *DescribeDevicesResponseBodyDevices {
	s.Username = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetVendor(v string) *DescribeDevicesResponseBodyDevices {
	s.Vendor = &v
	return s
}

type DescribeDevicesResponseBodyDevicesDirectory struct {
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 399*****488-cn-qingdao
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s DescribeDevicesResponseBodyDevicesDirectory) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBodyDevicesDirectory) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBodyDevicesDirectory) SetCreatedTime(v string) *DescribeDevicesResponseBodyDevicesDirectory {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesDirectory) SetDescription(v string) *DescribeDevicesResponseBodyDevicesDirectory {
	s.Description = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesDirectory) SetGroupId(v string) *DescribeDevicesResponseBodyDevicesDirectory {
	s.GroupId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesDirectory) SetId(v string) *DescribeDevicesResponseBodyDevicesDirectory {
	s.Id = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesDirectory) SetName(v string) *DescribeDevicesResponseBodyDevicesDirectory {
	s.Name = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesDirectory) SetParentId(v string) *DescribeDevicesResponseBodyDevicesDirectory {
	s.ParentId = &v
	return s
}

type DescribeDevicesResponseBodyDevicesStats struct {
	// example:
	//
	// 0
	ChannelNum *int64 `json:"ChannelNum,omitempty" xml:"ChannelNum,omitempty"`
	// example:
	//
	// 0
	FailedNum *int64 `json:"FailedNum,omitempty" xml:"FailedNum,omitempty"`
	// example:
	//
	// 0
	OfflineNum *int64 `json:"OfflineNum,omitempty" xml:"OfflineNum,omitempty"`
	// example:
	//
	// 0
	OnlineNum *int64 `json:"OnlineNum,omitempty" xml:"OnlineNum,omitempty"`
	// example:
	//
	// 0
	StreamNum *int64 `json:"StreamNum,omitempty" xml:"StreamNum,omitempty"`
}

func (s DescribeDevicesResponseBodyDevicesStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBodyDevicesStats) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBodyDevicesStats) SetChannelNum(v int64) *DescribeDevicesResponseBodyDevicesStats {
	s.ChannelNum = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesStats) SetFailedNum(v int64) *DescribeDevicesResponseBodyDevicesStats {
	s.FailedNum = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesStats) SetOfflineNum(v int64) *DescribeDevicesResponseBodyDevicesStats {
	s.OfflineNum = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesStats) SetOnlineNum(v int64) *DescribeDevicesResponseBodyDevicesStats {
	s.OnlineNum = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesStats) SetStreamNum(v int64) *DescribeDevicesResponseBodyDevicesStats {
	s.StreamNum = &v
	return s
}

type DescribeDevicesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponse) SetHeaders(v map[string]*string) *DescribeDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDevicesResponse) SetStatusCode(v int32) *DescribeDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDevicesResponse) SetBody(v *DescribeDevicesResponseBody) *DescribeDevicesResponse {
	s.Body = v
	return s
}

type DescribeDirectoriesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// false
	NoPagination *bool  `json:"NoPagination,omitempty" xml:"NoPagination,omitempty"`
	OwnerId      *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// ID
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
}

func (s DescribeDirectoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesRequest) SetGroupId(v string) *DescribeDirectoriesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetNoPagination(v bool) *DescribeDirectoriesRequest {
	s.NoPagination = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetOwnerId(v int64) *DescribeDirectoriesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetPageNum(v int64) *DescribeDirectoriesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetPageSize(v int64) *DescribeDirectoriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetParentId(v string) *DescribeDirectoriesRequest {
	s.ParentId = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetSortBy(v string) *DescribeDirectoriesRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetSortDirection(v string) *DescribeDirectoriesRequest {
	s.SortDirection = &v
	return s
}

type DescribeDirectoriesResponseBody struct {
	Directories []*DescribeDirectoriesResponseBodyDirectories `json:"Directories,omitempty" xml:"Directories,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDirectoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponseBody) SetDirectories(v []*DescribeDirectoriesResponseBodyDirectories) *DescribeDirectoriesResponseBody {
	s.Directories = v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetPageCount(v int64) *DescribeDirectoriesResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetPageNum(v int64) *DescribeDirectoriesResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetPageSize(v int64) *DescribeDirectoriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetRequestId(v string) *DescribeDirectoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetTotalCount(v int64) *DescribeDirectoriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDirectoriesResponseBodyDirectories struct {
	// example:
	//
	// 2021-09-10T10:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 399*****488-cn-qingdao
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s DescribeDirectoriesResponseBodyDirectories) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponseBodyDirectories) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetCreatedTime(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDescription(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.Description = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetGroupId(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.GroupId = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetId(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.Id = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetName(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.Name = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetParentId(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.ParentId = &v
	return s
}

type DescribeDirectoriesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDirectoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDirectoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponse) SetHeaders(v map[string]*string) *DescribeDirectoriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDirectoriesResponse) SetStatusCode(v int32) *DescribeDirectoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDirectoriesResponse) SetBody(v *DescribeDirectoriesResponseBody) *DescribeDirectoriesResponse {
	s.Body = v
	return s
}

type DescribeDirectoryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 399*****488-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeDirectoryRequest) SetId(v string) *DescribeDirectoryRequest {
	s.Id = &v
	return s
}

func (s *DescribeDirectoryRequest) SetOwnerId(v int64) *DescribeDirectoryRequest {
	s.OwnerId = &v
	return s
}

type DescribeDirectoryResponseBody struct {
	// example:
	//
	// 2021-09-10T10:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 399*****488-cn-qingdao
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDirectoryResponseBody) SetCreatedTime(v string) *DescribeDirectoryResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDirectoryResponseBody) SetDescription(v string) *DescribeDirectoryResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeDirectoryResponseBody) SetGroupId(v string) *DescribeDirectoryResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDirectoryResponseBody) SetId(v string) *DescribeDirectoryResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeDirectoryResponseBody) SetName(v string) *DescribeDirectoryResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeDirectoryResponseBody) SetParentId(v string) *DescribeDirectoryResponseBody {
	s.ParentId = &v
	return s
}

func (s *DescribeDirectoryResponseBody) SetRequestId(v string) *DescribeDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDirectoryResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeDirectoryResponse) SetHeaders(v map[string]*string) *DescribeDirectoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeDirectoryResponse) SetStatusCode(v int32) *DescribeDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDirectoryResponse) SetBody(v *DescribeDirectoryResponseBody) *DescribeDirectoryResponse {
	s.Body = v
	return s
}

type DescribeGroupRequest struct {
	// This parameter is required.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// false
	IncludeStats *bool  `json:"IncludeStats,omitempty" xml:"IncludeStats,omitempty"`
	OwnerId      *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupRequest) SetId(v string) *DescribeGroupRequest {
	s.Id = &v
	return s
}

func (s *DescribeGroupRequest) SetIncludeStats(v bool) *DescribeGroupRequest {
	s.IncludeStats = &v
	return s
}

func (s *DescribeGroupRequest) SetOwnerId(v int64) *DescribeGroupRequest {
	s.OwnerId = &v
	return s
}

type DescribeGroupResponseBody struct {
	// example:
	//
	// 337639*****24964-cn-qingdao
	AliasId *string `json:"AliasId,omitempty" xml:"AliasId,omitempty"`
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// http://example.com/callback
	Callback *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// example:
	//
	// 3100000*****0000001
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 10.10.10.10
	GbIp *string `json:"GbIp,omitempty" xml:"GbIp,omitempty"`
	// example:
	//
	// 5060
	GbPort     *int64    `json:"GbPort,omitempty" xml:"GbPort,omitempty"`
	GbTcpPorts []*string `json:"GbTcpPorts,omitempty" xml:"GbTcpPorts,omitempty" type:"Repeated"`
	GbUdpPorts []*string `json:"GbUdpPorts,omitempty" xml:"GbUdpPorts,omitempty" type:"Repeated"`
	// example:
	//
	// 337639****224964-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// gb28181
	InProtocol *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	// example:
	//
	// false
	LazyPull *bool   `json:"LazyPull,omitempty" xml:"LazyPull,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// flv,hls,rtmp
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	// example:
	//
	// demo.aliyundoc.com
	PushDomain *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Stats     *DescribeGroupResponseBodyStats `json:"Stats,omitempty" xml:"Stats,omitempty" type:"Struct"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupResponseBody) SetAliasId(v string) *DescribeGroupResponseBody {
	s.AliasId = &v
	return s
}

func (s *DescribeGroupResponseBody) SetApp(v string) *DescribeGroupResponseBody {
	s.App = &v
	return s
}

func (s *DescribeGroupResponseBody) SetCallback(v string) *DescribeGroupResponseBody {
	s.Callback = &v
	return s
}

func (s *DescribeGroupResponseBody) SetCreatedTime(v string) *DescribeGroupResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeGroupResponseBody) SetDescription(v string) *DescribeGroupResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeGroupResponseBody) SetEnabled(v bool) *DescribeGroupResponseBody {
	s.Enabled = &v
	return s
}

func (s *DescribeGroupResponseBody) SetGbId(v string) *DescribeGroupResponseBody {
	s.GbId = &v
	return s
}

func (s *DescribeGroupResponseBody) SetGbIp(v string) *DescribeGroupResponseBody {
	s.GbIp = &v
	return s
}

func (s *DescribeGroupResponseBody) SetGbPort(v int64) *DescribeGroupResponseBody {
	s.GbPort = &v
	return s
}

func (s *DescribeGroupResponseBody) SetGbTcpPorts(v []*string) *DescribeGroupResponseBody {
	s.GbTcpPorts = v
	return s
}

func (s *DescribeGroupResponseBody) SetGbUdpPorts(v []*string) *DescribeGroupResponseBody {
	s.GbUdpPorts = v
	return s
}

func (s *DescribeGroupResponseBody) SetId(v string) *DescribeGroupResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeGroupResponseBody) SetInProtocol(v string) *DescribeGroupResponseBody {
	s.InProtocol = &v
	return s
}

func (s *DescribeGroupResponseBody) SetLazyPull(v bool) *DescribeGroupResponseBody {
	s.LazyPull = &v
	return s
}

func (s *DescribeGroupResponseBody) SetName(v string) *DescribeGroupResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeGroupResponseBody) SetOutProtocol(v string) *DescribeGroupResponseBody {
	s.OutProtocol = &v
	return s
}

func (s *DescribeGroupResponseBody) SetPlayDomain(v string) *DescribeGroupResponseBody {
	s.PlayDomain = &v
	return s
}

func (s *DescribeGroupResponseBody) SetPushDomain(v string) *DescribeGroupResponseBody {
	s.PushDomain = &v
	return s
}

func (s *DescribeGroupResponseBody) SetRegion(v string) *DescribeGroupResponseBody {
	s.Region = &v
	return s
}

func (s *DescribeGroupResponseBody) SetRequestId(v string) *DescribeGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupResponseBody) SetStats(v *DescribeGroupResponseBodyStats) *DescribeGroupResponseBody {
	s.Stats = v
	return s
}

func (s *DescribeGroupResponseBody) SetStatus(v string) *DescribeGroupResponseBody {
	s.Status = &v
	return s
}

type DescribeGroupResponseBodyStats struct {
	// example:
	//
	// 200
	DeviceNum *int64 `json:"DeviceNum,omitempty" xml:"DeviceNum,omitempty"`
	// example:
	//
	// 0
	IedNum *int64 `json:"IedNum,omitempty" xml:"IedNum,omitempty"`
	// example:
	//
	// 100
	IpcNum *int64 `json:"IpcNum,omitempty" xml:"IpcNum,omitempty"`
	// example:
	//
	// 100
	PlatformNum *int64 `json:"PlatformNum,omitempty" xml:"PlatformNum,omitempty"`
}

func (s DescribeGroupResponseBodyStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupResponseBodyStats) GoString() string {
	return s.String()
}

func (s *DescribeGroupResponseBodyStats) SetDeviceNum(v int64) *DescribeGroupResponseBodyStats {
	s.DeviceNum = &v
	return s
}

func (s *DescribeGroupResponseBodyStats) SetIedNum(v int64) *DescribeGroupResponseBodyStats {
	s.IedNum = &v
	return s
}

func (s *DescribeGroupResponseBodyStats) SetIpcNum(v int64) *DescribeGroupResponseBodyStats {
	s.IpcNum = &v
	return s
}

func (s *DescribeGroupResponseBodyStats) SetPlatformNum(v int64) *DescribeGroupResponseBodyStats {
	s.PlatformNum = &v
	return s
}

type DescribeGroupResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupResponse) SetHeaders(v map[string]*string) *DescribeGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupResponse) SetStatusCode(v int32) *DescribeGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupResponse) SetBody(v *DescribeGroupResponseBody) *DescribeGroupResponse {
	s.Body = v
	return s
}

type DescribeGroupsRequest struct {
	// example:
	//
	// 33763950877224964-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// rtmp
	InProtocol *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	// example:
	//
	// false
	IncludeStats *bool   `json:"IncludeStats,omitempty" xml:"IncludeStats,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupsRequest) SetId(v string) *DescribeGroupsRequest {
	s.Id = &v
	return s
}

func (s *DescribeGroupsRequest) SetInProtocol(v string) *DescribeGroupsRequest {
	s.InProtocol = &v
	return s
}

func (s *DescribeGroupsRequest) SetIncludeStats(v bool) *DescribeGroupsRequest {
	s.IncludeStats = &v
	return s
}

func (s *DescribeGroupsRequest) SetName(v string) *DescribeGroupsRequest {
	s.Name = &v
	return s
}

func (s *DescribeGroupsRequest) SetOwnerId(v int64) *DescribeGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeGroupsRequest) SetPageNum(v int64) *DescribeGroupsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeGroupsRequest) SetPageSize(v int64) *DescribeGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupsRequest) SetRegion(v string) *DescribeGroupsRequest {
	s.Region = &v
	return s
}

func (s *DescribeGroupsRequest) SetSortBy(v string) *DescribeGroupsRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeGroupsRequest) SetSortDirection(v string) *DescribeGroupsRequest {
	s.SortDirection = &v
	return s
}

func (s *DescribeGroupsRequest) SetStatus(v string) *DescribeGroupsRequest {
	s.Status = &v
	return s
}

type DescribeGroupsResponseBody struct {
	Groups []*DescribeGroupsResponseBodyGroups `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 5
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupsResponseBody) SetGroups(v []*DescribeGroupsResponseBodyGroups) *DescribeGroupsResponseBody {
	s.Groups = v
	return s
}

func (s *DescribeGroupsResponseBody) SetPageCount(v int64) *DescribeGroupsResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeGroupsResponseBody) SetPageNum(v int64) *DescribeGroupsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeGroupsResponseBody) SetPageSize(v int64) *DescribeGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupsResponseBody) SetRequestId(v string) *DescribeGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupsResponseBody) SetTotalCount(v int64) *DescribeGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeGroupsResponseBodyGroups struct {
	// example:
	//
	// 337639*****24964-cn-qingdao
	AliasId *string `json:"AliasId,omitempty" xml:"AliasId,omitempty"`
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// http://example.com/callback
	Callback *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// example:
	//
	// 31000000000000000001
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 10.10.10.10
	GbIp *string `json:"GbIp,omitempty" xml:"GbIp,omitempty"`
	// example:
	//
	// 5060
	GbPort     *int64    `json:"GbPort,omitempty" xml:"GbPort,omitempty"`
	GbTcpPorts []*string `json:"GbTcpPorts,omitempty" xml:"GbTcpPorts,omitempty" type:"Repeated"`
	GbUdpPorts []*string `json:"GbUdpPorts,omitempty" xml:"GbUdpPorts,omitempty" type:"Repeated"`
	// example:
	//
	// 33763950877224964-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// gb28181
	InProtocol *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	// example:
	//
	// false
	LazyPull *bool   `json:"LazyPull,omitempty" xml:"LazyPull,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// rtmp,flv,hls
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	// example:
	//
	// demo.aliyundoc.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	PushDomain *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string                                `json:"Region,omitempty" xml:"Region,omitempty"`
	Stats  *DescribeGroupsResponseBodyGroupsStats `json:"Stats,omitempty" xml:"Stats,omitempty" type:"Struct"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeGroupsResponseBodyGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupsResponseBodyGroups) GoString() string {
	return s.String()
}

func (s *DescribeGroupsResponseBodyGroups) SetAliasId(v string) *DescribeGroupsResponseBodyGroups {
	s.AliasId = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetApp(v string) *DescribeGroupsResponseBodyGroups {
	s.App = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetCallback(v string) *DescribeGroupsResponseBodyGroups {
	s.Callback = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetCreatedTime(v string) *DescribeGroupsResponseBodyGroups {
	s.CreatedTime = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetDescription(v string) *DescribeGroupsResponseBodyGroups {
	s.Description = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetEnabled(v bool) *DescribeGroupsResponseBodyGroups {
	s.Enabled = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetGbId(v string) *DescribeGroupsResponseBodyGroups {
	s.GbId = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetGbIp(v string) *DescribeGroupsResponseBodyGroups {
	s.GbIp = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetGbPort(v int64) *DescribeGroupsResponseBodyGroups {
	s.GbPort = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetGbTcpPorts(v []*string) *DescribeGroupsResponseBodyGroups {
	s.GbTcpPorts = v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetGbUdpPorts(v []*string) *DescribeGroupsResponseBodyGroups {
	s.GbUdpPorts = v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetId(v string) *DescribeGroupsResponseBodyGroups {
	s.Id = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetInProtocol(v string) *DescribeGroupsResponseBodyGroups {
	s.InProtocol = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetLazyPull(v bool) *DescribeGroupsResponseBodyGroups {
	s.LazyPull = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetName(v string) *DescribeGroupsResponseBodyGroups {
	s.Name = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetOutProtocol(v string) *DescribeGroupsResponseBodyGroups {
	s.OutProtocol = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetPlayDomain(v string) *DescribeGroupsResponseBodyGroups {
	s.PlayDomain = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetPushDomain(v string) *DescribeGroupsResponseBodyGroups {
	s.PushDomain = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetRegion(v string) *DescribeGroupsResponseBodyGroups {
	s.Region = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetStats(v *DescribeGroupsResponseBodyGroupsStats) *DescribeGroupsResponseBodyGroups {
	s.Stats = v
	return s
}

func (s *DescribeGroupsResponseBodyGroups) SetStatus(v string) *DescribeGroupsResponseBodyGroups {
	s.Status = &v
	return s
}

type DescribeGroupsResponseBodyGroupsStats struct {
	// example:
	//
	// 200
	DeviceNum *int64 `json:"DeviceNum,omitempty" xml:"DeviceNum,omitempty"`
	// example:
	//
	// 0
	IedNum *int64 `json:"IedNum,omitempty" xml:"IedNum,omitempty"`
	// example:
	//
	// 200
	IpcNum *int64 `json:"IpcNum,omitempty" xml:"IpcNum,omitempty"`
	// example:
	//
	// 0
	PlatformNum *int64 `json:"PlatformNum,omitempty" xml:"PlatformNum,omitempty"`
}

func (s DescribeGroupsResponseBodyGroupsStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupsResponseBodyGroupsStats) GoString() string {
	return s.String()
}

func (s *DescribeGroupsResponseBodyGroupsStats) SetDeviceNum(v int64) *DescribeGroupsResponseBodyGroupsStats {
	s.DeviceNum = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroupsStats) SetIedNum(v int64) *DescribeGroupsResponseBodyGroupsStats {
	s.IedNum = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroupsStats) SetIpcNum(v int64) *DescribeGroupsResponseBodyGroupsStats {
	s.IpcNum = &v
	return s
}

func (s *DescribeGroupsResponseBodyGroupsStats) SetPlatformNum(v int64) *DescribeGroupsResponseBodyGroupsStats {
	s.PlatformNum = &v
	return s
}

type DescribeGroupsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupsResponse) SetHeaders(v map[string]*string) *DescribeGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupsResponse) SetStatusCode(v int32) *DescribeGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupsResponse) SetBody(v *DescribeGroupsResponseBody) *DescribeGroupsResponse {
	s.Body = v
	return s
}

type DescribeParentPlatformRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 359*****374-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeParentPlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformRequest) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformRequest) SetId(v string) *DescribeParentPlatformRequest {
	s.Id = &v
	return s
}

func (s *DescribeParentPlatformRequest) SetOwnerId(v int64) *DescribeParentPlatformRequest {
	s.OwnerId = &v
	return s
}

type DescribeParentPlatformResponseBody struct {
	// example:
	//
	// false
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// example:
	//
	// true
	ClientAuth *bool `json:"ClientAuth,omitempty" xml:"ClientAuth,omitempty"`
	// example:
	//
	// 31010*****317542006
	ClientGbId *string `json:"ClientGbId,omitempty" xml:"ClientGbId,omitempty"`
	// example:
	//
	// 192.168.0.1
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// example:
	//
	// admin123
	ClientPassword *string `json:"ClientPassword,omitempty" xml:"ClientPassword,omitempty"`
	// example:
	//
	// 5160
	ClientPort *int64 `json:"ClientPort,omitempty" xml:"ClientPort,omitempty"`
	// example:
	//
	// user01
	ClientUsername *string `json:"ClientUsername,omitempty" xml:"ClientUsername,omitempty"`
	// example:
	//
	// 2018-12-10T21:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 31000*****2170123451
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 359*****374-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 10.10.10.10
	Ip   *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 5060
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeParentPlatformResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformResponseBody) SetAutoStart(v bool) *DescribeParentPlatformResponseBody {
	s.AutoStart = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetClientAuth(v bool) *DescribeParentPlatformResponseBody {
	s.ClientAuth = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetClientGbId(v string) *DescribeParentPlatformResponseBody {
	s.ClientGbId = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetClientIp(v string) *DescribeParentPlatformResponseBody {
	s.ClientIp = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetClientPassword(v string) *DescribeParentPlatformResponseBody {
	s.ClientPassword = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetClientPort(v int64) *DescribeParentPlatformResponseBody {
	s.ClientPort = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetClientUsername(v string) *DescribeParentPlatformResponseBody {
	s.ClientUsername = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetCreatedTime(v string) *DescribeParentPlatformResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetDescription(v string) *DescribeParentPlatformResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetGbId(v string) *DescribeParentPlatformResponseBody {
	s.GbId = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetId(v string) *DescribeParentPlatformResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetIp(v string) *DescribeParentPlatformResponseBody {
	s.Ip = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetName(v string) *DescribeParentPlatformResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetPort(v int64) *DescribeParentPlatformResponseBody {
	s.Port = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetProtocol(v string) *DescribeParentPlatformResponseBody {
	s.Protocol = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetRequestId(v string) *DescribeParentPlatformResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParentPlatformResponseBody) SetStatus(v string) *DescribeParentPlatformResponseBody {
	s.Status = &v
	return s
}

type DescribeParentPlatformResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParentPlatformResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParentPlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformResponse) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformResponse) SetHeaders(v map[string]*string) *DescribeParentPlatformResponse {
	s.Headers = v
	return s
}

func (s *DescribeParentPlatformResponse) SetStatusCode(v int32) *DescribeParentPlatformResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParentPlatformResponse) SetBody(v *DescribeParentPlatformResponseBody) *DescribeParentPlatformResponse {
	s.Body = v
	return s
}

type DescribeParentPlatformDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 359*****374-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
}

func (s DescribeParentPlatformDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformDevicesRequest) SetId(v string) *DescribeParentPlatformDevicesRequest {
	s.Id = &v
	return s
}

func (s *DescribeParentPlatformDevicesRequest) SetOwnerId(v int64) *DescribeParentPlatformDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeParentPlatformDevicesRequest) SetPageNum(v int64) *DescribeParentPlatformDevicesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeParentPlatformDevicesRequest) SetPageSize(v int64) *DescribeParentPlatformDevicesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeParentPlatformDevicesRequest) SetSortBy(v string) *DescribeParentPlatformDevicesRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeParentPlatformDevicesRequest) SetSortDirection(v string) *DescribeParentPlatformDevicesRequest {
	s.SortDirection = &v
	return s
}

type DescribeParentPlatformDevicesResponseBody struct {
	Devices []*DescribeParentPlatformDevicesResponseBodyDevices `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeParentPlatformDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformDevicesResponseBody) SetDevices(v []*DescribeParentPlatformDevicesResponseBodyDevices) *DescribeParentPlatformDevicesResponseBody {
	s.Devices = v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBody) SetPageCount(v int64) *DescribeParentPlatformDevicesResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBody) SetPageNum(v int64) *DescribeParentPlatformDevicesResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBody) SetPageSize(v int64) *DescribeParentPlatformDevicesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBody) SetRequestId(v string) *DescribeParentPlatformDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBody) SetTotalCount(v int64) *DescribeParentPlatformDevicesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeParentPlatformDevicesResponseBodyDevices struct {
	// example:
	//
	// 310101*****7542007
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 3484*****8732174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 3487*****323380-cn-qingdao
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 3614*****766212-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s DescribeParentPlatformDevicesResponseBodyDevices) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformDevicesResponseBodyDevices) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformDevicesResponseBodyDevices) SetGbId(v string) *DescribeParentPlatformDevicesResponseBodyDevices {
	s.GbId = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBodyDevices) SetGroupId(v string) *DescribeParentPlatformDevicesResponseBodyDevices {
	s.GroupId = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBodyDevices) SetId(v string) *DescribeParentPlatformDevicesResponseBodyDevices {
	s.Id = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBodyDevices) SetName(v string) *DescribeParentPlatformDevicesResponseBodyDevices {
	s.Name = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponseBodyDevices) SetParentId(v string) *DescribeParentPlatformDevicesResponseBodyDevices {
	s.ParentId = &v
	return s
}

type DescribeParentPlatformDevicesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParentPlatformDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParentPlatformDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformDevicesResponse) SetHeaders(v map[string]*string) *DescribeParentPlatformDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeParentPlatformDevicesResponse) SetStatusCode(v int32) *DescribeParentPlatformDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParentPlatformDevicesResponse) SetBody(v *DescribeParentPlatformDevicesResponseBody) *DescribeParentPlatformDevicesResponse {
	s.Body = v
	return s
}

type DescribeParentPlatformsRequest struct {
	// example:
	//
	// 31000*****2170123451
	GbId    *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeParentPlatformsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformsRequest) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformsRequest) SetGbId(v string) *DescribeParentPlatformsRequest {
	s.GbId = &v
	return s
}

func (s *DescribeParentPlatformsRequest) SetOwnerId(v int64) *DescribeParentPlatformsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeParentPlatformsRequest) SetPageNum(v int64) *DescribeParentPlatformsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeParentPlatformsRequest) SetPageSize(v int64) *DescribeParentPlatformsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeParentPlatformsRequest) SetSortBy(v string) *DescribeParentPlatformsRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeParentPlatformsRequest) SetSortDirection(v string) *DescribeParentPlatformsRequest {
	s.SortDirection = &v
	return s
}

func (s *DescribeParentPlatformsRequest) SetStatus(v string) *DescribeParentPlatformsRequest {
	s.Status = &v
	return s
}

type DescribeParentPlatformsResponseBody struct {
	// example:
	//
	// 1
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize  *int64                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Platforms []*DescribeParentPlatformsResponseBodyPlatforms `json:"Platforms,omitempty" xml:"Platforms,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeParentPlatformsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformsResponseBody) SetPageCount(v int64) *DescribeParentPlatformsResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeParentPlatformsResponseBody) SetPageNum(v int64) *DescribeParentPlatformsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeParentPlatformsResponseBody) SetPageSize(v int64) *DescribeParentPlatformsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeParentPlatformsResponseBody) SetPlatforms(v []*DescribeParentPlatformsResponseBodyPlatforms) *DescribeParentPlatformsResponseBody {
	s.Platforms = v
	return s
}

func (s *DescribeParentPlatformsResponseBody) SetRequestId(v string) *DescribeParentPlatformsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParentPlatformsResponseBody) SetTotalCount(v int64) *DescribeParentPlatformsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeParentPlatformsResponseBodyPlatforms struct {
	// example:
	//
	// false
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// example:
	//
	// true
	ClientAuth *bool `json:"ClientAuth,omitempty" xml:"ClientAuth,omitempty"`
	// example:
	//
	// 31010*****317542006
	ClientGbId *string `json:"ClientGbId,omitempty" xml:"ClientGbId,omitempty"`
	// example:
	//
	// 192.168.0.1
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// example:
	//
	// admin123
	ClientPassword *string `json:"ClientPassword,omitempty" xml:"ClientPassword,omitempty"`
	// example:
	//
	// 5160
	ClientPort *int64 `json:"ClientPort,omitempty" xml:"ClientPort,omitempty"`
	// example:
	//
	// user01
	ClientUsername *string `json:"ClientUsername,omitempty" xml:"ClientUsername,omitempty"`
	// example:
	//
	// 2018-12-10T21:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 31000*****2170123451
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 359*****374-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 10.10.10.10
	Ip   *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 5060
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeParentPlatformsResponseBodyPlatforms) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformsResponseBodyPlatforms) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetAutoStart(v bool) *DescribeParentPlatformsResponseBodyPlatforms {
	s.AutoStart = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetClientAuth(v bool) *DescribeParentPlatformsResponseBodyPlatforms {
	s.ClientAuth = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetClientGbId(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.ClientGbId = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetClientIp(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.ClientIp = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetClientPassword(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.ClientPassword = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetClientPort(v int64) *DescribeParentPlatformsResponseBodyPlatforms {
	s.ClientPort = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetClientUsername(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.ClientUsername = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetCreatedTime(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.CreatedTime = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetDescription(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.Description = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetGbId(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.GbId = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetId(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.Id = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetIp(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.Ip = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetName(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.Name = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetPort(v int64) *DescribeParentPlatformsResponseBodyPlatforms {
	s.Port = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetProtocol(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.Protocol = &v
	return s
}

func (s *DescribeParentPlatformsResponseBodyPlatforms) SetStatus(v string) *DescribeParentPlatformsResponseBodyPlatforms {
	s.Status = &v
	return s
}

type DescribeParentPlatformsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParentPlatformsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParentPlatformsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParentPlatformsResponse) GoString() string {
	return s.String()
}

func (s *DescribeParentPlatformsResponse) SetHeaders(v map[string]*string) *DescribeParentPlatformsResponse {
	s.Headers = v
	return s
}

func (s *DescribeParentPlatformsResponse) SetStatusCode(v int32) *DescribeParentPlatformsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParentPlatformsResponse) SetBody(v *DescribeParentPlatformsResponseBody) *DescribeParentPlatformsResponse {
	s.Body = v
	return s
}

type DescribePresetsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribePresetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePresetsRequest) GoString() string {
	return s.String()
}

func (s *DescribePresetsRequest) SetId(v string) *DescribePresetsRequest {
	s.Id = &v
	return s
}

func (s *DescribePresetsRequest) SetOwnerId(v int64) *DescribePresetsRequest {
	s.OwnerId = &v
	return s
}

type DescribePresetsResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string                               `json:"Id,omitempty" xml:"Id,omitempty"`
	Presets []*DescribePresetsResponseBodyPresets `json:"Presets,omitempty" xml:"Presets,omitempty" type:"Repeated"`
	// example:
	//
	// 9FE0CA83-BFD3-4EBD-A429-FABB9B9AE772
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePresetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePresetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePresetsResponseBody) SetId(v string) *DescribePresetsResponseBody {
	s.Id = &v
	return s
}

func (s *DescribePresetsResponseBody) SetPresets(v []*DescribePresetsResponseBodyPresets) *DescribePresetsResponseBody {
	s.Presets = v
	return s
}

func (s *DescribePresetsResponseBody) SetRequestId(v string) *DescribePresetsResponseBody {
	s.RequestId = &v
	return s
}

type DescribePresetsResponseBodyPresets struct {
	// example:
	//
	// 2
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribePresetsResponseBodyPresets) String() string {
	return tea.Prettify(s)
}

func (s DescribePresetsResponseBodyPresets) GoString() string {
	return s.String()
}

func (s *DescribePresetsResponseBodyPresets) SetId(v string) *DescribePresetsResponseBodyPresets {
	s.Id = &v
	return s
}

func (s *DescribePresetsResponseBodyPresets) SetName(v string) *DescribePresetsResponseBodyPresets {
	s.Name = &v
	return s
}

type DescribePresetsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePresetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePresetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePresetsResponse) GoString() string {
	return s.String()
}

func (s *DescribePresetsResponse) SetHeaders(v map[string]*string) *DescribePresetsResponse {
	s.Headers = v
	return s
}

func (s *DescribePresetsResponse) SetStatusCode(v int32) *DescribePresetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePresetsResponse) SetBody(v *DescribePresetsResponseBody) *DescribePresetsResponse {
	s.Body = v
	return s
}

type DescribePublishStreamStatusRequest struct {
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribePublishStreamStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePublishStreamStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribePublishStreamStatusRequest) SetInstanceId(v string) *DescribePublishStreamStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribePublishStreamStatusRequest) SetOwnerId(v int64) *DescribePublishStreamStatusRequest {
	s.OwnerId = &v
	return s
}

type DescribePublishStreamStatusResponseBody struct {
	Code      *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *int64  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePublishStreamStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePublishStreamStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePublishStreamStatusResponseBody) SetCode(v int64) *DescribePublishStreamStatusResponseBody {
	s.Code = &v
	return s
}

func (s *DescribePublishStreamStatusResponseBody) SetMessage(v int64) *DescribePublishStreamStatusResponseBody {
	s.Message = &v
	return s
}

func (s *DescribePublishStreamStatusResponseBody) SetRequestId(v string) *DescribePublishStreamStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribePublishStreamStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePublishStreamStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePublishStreamStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePublishStreamStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribePublishStreamStatusResponse) SetHeaders(v map[string]*string) *DescribePublishStreamStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribePublishStreamStatusResponse) SetStatusCode(v int32) *DescribePublishStreamStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePublishStreamStatusResponse) SetBody(v *DescribePublishStreamStatusResponseBody) *DescribePublishStreamStatusResponse {
	s.Body = v
	return s
}

type DescribePurchasedDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3614*****66212-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribePurchasedDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedDeviceRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedDeviceRequest) SetId(v string) *DescribePurchasedDeviceRequest {
	s.Id = &v
	return s
}

func (s *DescribePurchasedDeviceRequest) SetOwnerId(v int64) *DescribePurchasedDeviceRequest {
	s.OwnerId = &v
	return s
}

type DescribePurchasedDeviceResponseBody struct {
	// example:
	//
	// 2018-12-10T21:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// 33763****77224964-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2117*****0447
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 12345*****67890
	RegisterCode *string `json:"RegisterCode,omitempty" xml:"RegisterCode,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// dome
	SubType *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	// example:
	//
	// ipc
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 8yd*****qem
	Vendor *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribePurchasedDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedDeviceResponseBody) SetCreatedTime(v string) *DescribePurchasedDeviceResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetDescription(v string) *DescribePurchasedDeviceResponseBody {
	s.Description = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetGroupId(v string) *DescribePurchasedDeviceResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetGroupName(v string) *DescribePurchasedDeviceResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetId(v string) *DescribePurchasedDeviceResponseBody {
	s.Id = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetName(v string) *DescribePurchasedDeviceResponseBody {
	s.Name = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetOrderId(v string) *DescribePurchasedDeviceResponseBody {
	s.OrderId = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetRegion(v string) *DescribePurchasedDeviceResponseBody {
	s.Region = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetRegisterCode(v string) *DescribePurchasedDeviceResponseBody {
	s.RegisterCode = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetRequestId(v string) *DescribePurchasedDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetSubType(v string) *DescribePurchasedDeviceResponseBody {
	s.SubType = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetType(v string) *DescribePurchasedDeviceResponseBody {
	s.Type = &v
	return s
}

func (s *DescribePurchasedDeviceResponseBody) SetVendor(v string) *DescribePurchasedDeviceResponseBody {
	s.Vendor = &v
	return s
}

type DescribePurchasedDeviceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePurchasedDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePurchasedDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedDeviceResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedDeviceResponse) SetHeaders(v map[string]*string) *DescribePurchasedDeviceResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedDeviceResponse) SetStatusCode(v int32) *DescribePurchasedDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedDeviceResponse) SetBody(v *DescribePurchasedDeviceResponseBody) *DescribePurchasedDeviceResponse {
	s.Body = v
	return s
}

type DescribePurchasedDevicesRequest struct {
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 4070*****1132-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
	// example:
	//
	// dome
	SubType *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	// example:
	//
	// ipc
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Vendor *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribePurchasedDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedDevicesRequest) SetGroupId(v string) *DescribePurchasedDevicesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetId(v string) *DescribePurchasedDevicesRequest {
	s.Id = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetName(v string) *DescribePurchasedDevicesRequest {
	s.Name = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetOwnerId(v int64) *DescribePurchasedDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetPageNum(v int64) *DescribePurchasedDevicesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetPageSize(v int64) *DescribePurchasedDevicesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetSortBy(v string) *DescribePurchasedDevicesRequest {
	s.SortBy = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetSortDirection(v string) *DescribePurchasedDevicesRequest {
	s.SortDirection = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetSubType(v string) *DescribePurchasedDevicesRequest {
	s.SubType = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetType(v string) *DescribePurchasedDevicesRequest {
	s.Type = &v
	return s
}

func (s *DescribePurchasedDevicesRequest) SetVendor(v string) *DescribePurchasedDevicesRequest {
	s.Vendor = &v
	return s
}

type DescribePurchasedDevicesResponseBody struct {
	Devices []*DescribePurchasedDevicesResponseBodyDevices `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePurchasedDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedDevicesResponseBody) SetDevices(v []*DescribePurchasedDevicesResponseBodyDevices) *DescribePurchasedDevicesResponseBody {
	s.Devices = v
	return s
}

func (s *DescribePurchasedDevicesResponseBody) SetPageCount(v int64) *DescribePurchasedDevicesResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBody) SetPageNum(v int64) *DescribePurchasedDevicesResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBody) SetPageSize(v int64) *DescribePurchasedDevicesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBody) SetRequestId(v string) *DescribePurchasedDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBody) SetTotalCount(v int64) *DescribePurchasedDevicesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePurchasedDevicesResponseBodyDevices struct {
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// 348*****380-cn-qingdao
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2117*****0447
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 1234*****67890
	RegisterCode *string `json:"RegisterCode,omitempty" xml:"RegisterCode,omitempty"`
	// example:
	//
	// dome
	SubType *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	// example:
	//
	// ipc
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Vendor *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribePurchasedDevicesResponseBodyDevices) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedDevicesResponseBodyDevices) GoString() string {
	return s.String()
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetCreatedTime(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.CreatedTime = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetDescription(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.Description = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetGroupId(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetGroupName(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetId(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.Id = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetName(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.Name = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetOrderId(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.OrderId = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetRegion(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.Region = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetRegisterCode(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.RegisterCode = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetSubType(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.SubType = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetType(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.Type = &v
	return s
}

func (s *DescribePurchasedDevicesResponseBodyDevices) SetVendor(v string) *DescribePurchasedDevicesResponseBodyDevices {
	s.Vendor = &v
	return s
}

type DescribePurchasedDevicesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePurchasedDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePurchasedDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedDevicesResponse) SetHeaders(v map[string]*string) *DescribePurchasedDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedDevicesResponse) SetStatusCode(v int32) *DescribePurchasedDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedDevicesResponse) SetBody(v *DescribePurchasedDevicesResponseBody) *DescribePurchasedDevicesResponse {
	s.Body = v
	return s
}

type DescribeRecordsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2021-11-24T00:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// true
	PrivateBucket *bool `json:"PrivateBucket,omitempty" xml:"PrivateBucket,omitempty"`
	// example:
	//
	// Id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2021-11-22T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****997-cn-qingdao
	StreamId *string `json:"StreamId,omitempty" xml:"StreamId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// record
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecordsRequest) SetEndTime(v string) *DescribeRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRecordsRequest) SetOwnerId(v int64) *DescribeRecordsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRecordsRequest) SetPageNum(v int64) *DescribeRecordsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeRecordsRequest) SetPageSize(v int64) *DescribeRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRecordsRequest) SetPrivateBucket(v bool) *DescribeRecordsRequest {
	s.PrivateBucket = &v
	return s
}

func (s *DescribeRecordsRequest) SetSortBy(v string) *DescribeRecordsRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeRecordsRequest) SetSortDirection(v string) *DescribeRecordsRequest {
	s.SortDirection = &v
	return s
}

func (s *DescribeRecordsRequest) SetStartTime(v string) *DescribeRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeRecordsRequest) SetStreamId(v string) *DescribeRecordsRequest {
	s.StreamId = &v
	return s
}

func (s *DescribeRecordsRequest) SetType(v string) *DescribeRecordsRequest {
	s.Type = &v
	return s
}

type DescribeRecordsResponseBody struct {
	// example:
	//
	// 2018-12-10T11:00:00Z
	NextStartTime *string `json:"NextStartTime,omitempty" xml:"NextStartTime,omitempty"`
	// example:
	//
	// 5
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records  []*DescribeRecordsResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecordsResponseBody) SetNextStartTime(v string) *DescribeRecordsResponseBody {
	s.NextStartTime = &v
	return s
}

func (s *DescribeRecordsResponseBody) SetPageCount(v int64) *DescribeRecordsResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeRecordsResponseBody) SetPageNum(v int64) *DescribeRecordsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeRecordsResponseBody) SetPageSize(v int64) *DescribeRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeRecordsResponseBody) SetRecords(v []*DescribeRecordsResponseBodyRecords) *DescribeRecordsResponseBody {
	s.Records = v
	return s
}

func (s *DescribeRecordsResponseBody) SetRequestId(v string) *DescribeRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecordsResponseBody) SetTotalCount(v int64) *DescribeRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeRecordsResponseBodyRecords struct {
	// example:
	//
	// 2021-11-23T18:33:48
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// hls
	FileFormat *string `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	// example:
	//
	// 1080
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2be2a673-6033-4874-b6f2-f2bc0a1*****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// my_oss_bucket
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// example:
	//
	// oss-cn-qingdao.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// example:
	//
	// record/live/310*****007/2021-11-23-18-19-38_2021-11-23-18-33-48.m3u8
	OssObject *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	// example:
	//
	// 2021-11-23T18:19:32
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	StreamId *string `json:"StreamId,omitempty" xml:"StreamId,omitempty"`
	// example:
	//
	// 388*****204-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// record
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// http://my_oss_bucket.oss-cn-qingdao.aliyuncs.com/record/live/310*****007/2021-11-23-18-19-38_2021-11-23-18-33-48.m3u8
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 1920
	Width *int64 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeRecordsResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeRecordsResponseBodyRecords) SetEndTime(v string) *DescribeRecordsResponseBodyRecords {
	s.EndTime = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetFileFormat(v string) *DescribeRecordsResponseBodyRecords {
	s.FileFormat = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetHeight(v int64) *DescribeRecordsResponseBodyRecords {
	s.Height = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetId(v string) *DescribeRecordsResponseBodyRecords {
	s.Id = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetOssBucket(v string) *DescribeRecordsResponseBodyRecords {
	s.OssBucket = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetOssEndpoint(v string) *DescribeRecordsResponseBodyRecords {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetOssObject(v string) *DescribeRecordsResponseBodyRecords {
	s.OssObject = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetStartTime(v string) *DescribeRecordsResponseBodyRecords {
	s.StartTime = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetStreamId(v string) *DescribeRecordsResponseBodyRecords {
	s.StreamId = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetTemplateId(v string) *DescribeRecordsResponseBodyRecords {
	s.TemplateId = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetType(v string) *DescribeRecordsResponseBodyRecords {
	s.Type = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetUrl(v string) *DescribeRecordsResponseBodyRecords {
	s.Url = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetWidth(v int64) *DescribeRecordsResponseBodyRecords {
	s.Width = &v
	return s
}

type DescribeRecordsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecordsResponse) SetHeaders(v map[string]*string) *DescribeRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecordsResponse) SetStatusCode(v int32) *DescribeRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecordsResponse) SetBody(v *DescribeRecordsResponseBody) *DescribeRecordsResponse {
	s.Body = v
	return s
}

type DescribeRenderingInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s DescribeRenderingInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceRequest) SetRenderingInstanceId(v string) *DescribeRenderingInstanceRequest {
	s.RenderingInstanceId = &v
	return s
}

type DescribeRenderingInstanceResponseBody struct {
	ConfigInfo *DescribeRenderingInstanceResponseBodyConfigInfo `json:"ConfigInfo,omitempty" xml:"ConfigInfo,omitempty" type:"Struct"`
	// example:
	//
	// 2024-05-07T02:27:06Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// cn-xxx.ecr.aliyuncs.com
	Hostname     *string                                              `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	PortMappings []*DescribeRenderingInstanceResponseBodyPortMappings `json:"PortMappings,omitempty" xml:"PortMappings,omitempty" type:"Repeated"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string                                               `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
	RenderingStatus     *DescribeRenderingInstanceResponseBodyRenderingStatus `json:"RenderingStatus,omitempty" xml:"RenderingStatus,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId  *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SystemInfo *DescribeRenderingInstanceResponseBodySystemInfo `json:"SystemInfo,omitempty" xml:"SystemInfo,omitempty" type:"Struct"`
}

func (s DescribeRenderingInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBody) SetConfigInfo(v *DescribeRenderingInstanceResponseBodyConfigInfo) *DescribeRenderingInstanceResponseBody {
	s.ConfigInfo = v
	return s
}

func (s *DescribeRenderingInstanceResponseBody) SetCreationTime(v string) *DescribeRenderingInstanceResponseBody {
	s.CreationTime = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBody) SetHostname(v string) *DescribeRenderingInstanceResponseBody {
	s.Hostname = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBody) SetPortMappings(v []*DescribeRenderingInstanceResponseBodyPortMappings) *DescribeRenderingInstanceResponseBody {
	s.PortMappings = v
	return s
}

func (s *DescribeRenderingInstanceResponseBody) SetRenderingInstanceId(v string) *DescribeRenderingInstanceResponseBody {
	s.RenderingInstanceId = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBody) SetRenderingStatus(v *DescribeRenderingInstanceResponseBodyRenderingStatus) *DescribeRenderingInstanceResponseBody {
	s.RenderingStatus = v
	return s
}

func (s *DescribeRenderingInstanceResponseBody) SetRequestId(v string) *DescribeRenderingInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBody) SetSystemInfo(v *DescribeRenderingInstanceResponseBodySystemInfo) *DescribeRenderingInstanceResponseBody {
	s.SystemInfo = v
	return s
}

type DescribeRenderingInstanceResponseBodyConfigInfo struct {
	Configuration []*DescribeRenderingInstanceResponseBodyConfigInfoConfiguration `json:"Configuration,omitempty" xml:"Configuration,omitempty" type:"Repeated"`
	NetworkConfig *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig   `json:"NetworkConfig,omitempty" xml:"NetworkConfig,omitempty" type:"Struct"`
}

func (s DescribeRenderingInstanceResponseBodyConfigInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBodyConfigInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfo) SetConfiguration(v []*DescribeRenderingInstanceResponseBodyConfigInfoConfiguration) *DescribeRenderingInstanceResponseBodyConfigInfo {
	s.Configuration = v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfo) SetNetworkConfig(v *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig) *DescribeRenderingInstanceResponseBodyConfigInfo {
	s.NetworkConfig = v
	return s
}

type DescribeRenderingInstanceResponseBodyConfigInfoConfiguration struct {
	Attributes []*DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes `json:"Attributes,omitempty" xml:"Attributes,omitempty" type:"Repeated"`
	// example:
	//
	// location
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s DescribeRenderingInstanceResponseBodyConfigInfoConfiguration) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBodyConfigInfoConfiguration) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoConfiguration) SetAttributes(v []*DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes) *DescribeRenderingInstanceResponseBodyConfigInfoConfiguration {
	s.Attributes = v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoConfiguration) SetModuleName(v string) *DescribeRenderingInstanceResponseBodyConfigInfoConfiguration {
	s.ModuleName = &v
	return s
}

type DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes struct {
	// example:
	//
	// lon
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 100
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes) SetName(v string) *DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes {
	s.Name = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes) SetValue(v interface{}) *DescribeRenderingInstanceResponseBodyConfigInfoConfigurationAttributes {
	s.Value = v
	return s
}

type DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig struct {
	// example:
	//
	// success
	BandwidthStatus *string `json:"BandwidthStatus,omitempty" xml:"BandwidthStatus,omitempty"`
	// example:
	//
	// 100
	MaxEgressBandwidth *int32 `json:"MaxEgressBandwidth,omitempty" xml:"MaxEgressBandwidth,omitempty"`
	// example:
	//
	// 100
	MaxIngressBandwidth *int32 `json:"MaxIngressBandwidth,omitempty" xml:"MaxIngressBandwidth,omitempty"`
	// example:
	//
	// 2023-08-17T09:54:35Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig) SetBandwidthStatus(v string) *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig {
	s.BandwidthStatus = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig) SetMaxEgressBandwidth(v int32) *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig {
	s.MaxEgressBandwidth = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig) SetMaxIngressBandwidth(v int32) *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig {
	s.MaxIngressBandwidth = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig) SetUpdateTime(v string) *DescribeRenderingInstanceResponseBodyConfigInfoNetworkConfig {
	s.UpdateTime = &v
	return s
}

type DescribeRenderingInstanceResponseBodyPortMappings struct {
	// example:
	//
	// 10013/10020
	ExternalPort *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	// example:
	//
	// 49008/49015
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
}

func (s DescribeRenderingInstanceResponseBodyPortMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBodyPortMappings) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBodyPortMappings) SetExternalPort(v string) *DescribeRenderingInstanceResponseBodyPortMappings {
	s.ExternalPort = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyPortMappings) SetInternalPort(v string) *DescribeRenderingInstanceResponseBodyPortMappings {
	s.InternalPort = &v
	return s
}

type DescribeRenderingInstanceResponseBodyRenderingStatus struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// MigrateLocalData
	LatestAction *string `json:"LatestAction,omitempty" xml:"LatestAction,omitempty"`
	// example:
	//
	// Working
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRenderingInstanceResponseBodyRenderingStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBodyRenderingStatus) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBodyRenderingStatus) SetDescription(v string) *DescribeRenderingInstanceResponseBodyRenderingStatus {
	s.Description = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyRenderingStatus) SetLatestAction(v string) *DescribeRenderingInstanceResponseBodyRenderingStatus {
	s.LatestAction = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodyRenderingStatus) SetStatus(v string) *DescribeRenderingInstanceResponseBodyRenderingStatus {
	s.Status = &v
	return s
}

type DescribeRenderingInstanceResponseBodySystemInfo struct {
	// example:
	//
	// 60
	Frequency *int32 `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// example:
	//
	// 1920*1080
	Resolution *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
}

func (s DescribeRenderingInstanceResponseBodySystemInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponseBodySystemInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponseBodySystemInfo) SetFrequency(v int32) *DescribeRenderingInstanceResponseBodySystemInfo {
	s.Frequency = &v
	return s
}

func (s *DescribeRenderingInstanceResponseBodySystemInfo) SetResolution(v string) *DescribeRenderingInstanceResponseBodySystemInfo {
	s.Resolution = &v
	return s
}

type DescribeRenderingInstanceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRenderingInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRenderingInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceResponse) SetHeaders(v map[string]*string) *DescribeRenderingInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeRenderingInstanceResponse) SetStatusCode(v int32) *DescribeRenderingInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRenderingInstanceResponse) SetBody(v *DescribeRenderingInstanceResponseBody) *DescribeRenderingInstanceResponse {
	s.Body = v
	return s
}

type DescribeRenderingInstanceConfigurationRequest struct {
	Configuration []*DescribeRenderingInstanceConfigurationRequestConfiguration `json:"Configuration,omitempty" xml:"Configuration,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s DescribeRenderingInstanceConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceConfigurationRequest) SetConfiguration(v []*DescribeRenderingInstanceConfigurationRequestConfiguration) *DescribeRenderingInstanceConfigurationRequest {
	s.Configuration = v
	return s
}

func (s *DescribeRenderingInstanceConfigurationRequest) SetRenderingInstanceId(v string) *DescribeRenderingInstanceConfigurationRequest {
	s.RenderingInstanceId = &v
	return s
}

type DescribeRenderingInstanceConfigurationRequestConfiguration struct {
	AttributeNames []*string `json:"AttributeNames,omitempty" xml:"AttributeNames,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// location
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s DescribeRenderingInstanceConfigurationRequestConfiguration) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceConfigurationRequestConfiguration) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceConfigurationRequestConfiguration) SetAttributeNames(v []*string) *DescribeRenderingInstanceConfigurationRequestConfiguration {
	s.AttributeNames = v
	return s
}

func (s *DescribeRenderingInstanceConfigurationRequestConfiguration) SetModuleName(v string) *DescribeRenderingInstanceConfigurationRequestConfiguration {
	s.ModuleName = &v
	return s
}

type DescribeRenderingInstanceConfigurationShrinkRequest struct {
	ConfigurationShrink *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s DescribeRenderingInstanceConfigurationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceConfigurationShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceConfigurationShrinkRequest) SetConfigurationShrink(v string) *DescribeRenderingInstanceConfigurationShrinkRequest {
	s.ConfigurationShrink = &v
	return s
}

func (s *DescribeRenderingInstanceConfigurationShrinkRequest) SetRenderingInstanceId(v string) *DescribeRenderingInstanceConfigurationShrinkRequest {
	s.RenderingInstanceId = &v
	return s
}

type DescribeRenderingInstanceConfigurationResponseBody struct {
	Configuration []*DescribeRenderingInstanceConfigurationResponseBodyConfiguration `json:"Configuration,omitempty" xml:"Configuration,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRenderingInstanceConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceConfigurationResponseBody) SetConfiguration(v []*DescribeRenderingInstanceConfigurationResponseBodyConfiguration) *DescribeRenderingInstanceConfigurationResponseBody {
	s.Configuration = v
	return s
}

func (s *DescribeRenderingInstanceConfigurationResponseBody) SetRequestId(v string) *DescribeRenderingInstanceConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRenderingInstanceConfigurationResponseBodyConfiguration struct {
	Attributes []*DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes `json:"Attributes,omitempty" xml:"Attributes,omitempty" type:"Repeated"`
	// example:
	//
	// location
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s DescribeRenderingInstanceConfigurationResponseBodyConfiguration) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceConfigurationResponseBodyConfiguration) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceConfigurationResponseBodyConfiguration) SetAttributes(v []*DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes) *DescribeRenderingInstanceConfigurationResponseBodyConfiguration {
	s.Attributes = v
	return s
}

func (s *DescribeRenderingInstanceConfigurationResponseBodyConfiguration) SetModuleName(v string) *DescribeRenderingInstanceConfigurationResponseBodyConfiguration {
	s.ModuleName = &v
	return s
}

type DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes struct {
	// example:
	//
	// lon
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 100
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes) SetName(v string) *DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes {
	s.Name = &v
	return s
}

func (s *DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes) SetValue(v interface{}) *DescribeRenderingInstanceConfigurationResponseBodyConfigurationAttributes {
	s.Value = v
	return s
}

type DescribeRenderingInstanceConfigurationResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRenderingInstanceConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRenderingInstanceConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenderingInstanceConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeRenderingInstanceConfigurationResponse) SetHeaders(v map[string]*string) *DescribeRenderingInstanceConfigurationResponse {
	s.Headers = v
	return s
}

func (s *DescribeRenderingInstanceConfigurationResponse) SetStatusCode(v int32) *DescribeRenderingInstanceConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRenderingInstanceConfigurationResponse) SetBody(v *DescribeRenderingInstanceConfigurationResponseBody) *DescribeRenderingInstanceConfigurationResponse {
	s.Body = v
	return s
}

type DescribeStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****997-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamRequest) SetId(v string) *DescribeStreamRequest {
	s.Id = &v
	return s
}

func (s *DescribeStreamRequest) SetOwnerId(v int64) *DescribeStreamRequest {
	s.OwnerId = &v
	return s
}

type DescribeStreamResponseBody struct {
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// 2019-02-28T17:00:17Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 31000000*****0000002
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// example:
	//
	// demo.aliyundoc.com
	PushDomain *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1280
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamResponseBody) SetApp(v string) *DescribeStreamResponseBody {
	s.App = &v
	return s
}

func (s *DescribeStreamResponseBody) SetCreatedTime(v string) *DescribeStreamResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeStreamResponseBody) SetDeviceId(v string) *DescribeStreamResponseBody {
	s.DeviceId = &v
	return s
}

func (s *DescribeStreamResponseBody) SetEnabled(v bool) *DescribeStreamResponseBody {
	s.Enabled = &v
	return s
}

func (s *DescribeStreamResponseBody) SetGroupId(v string) *DescribeStreamResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeStreamResponseBody) SetHeight(v int32) *DescribeStreamResponseBody {
	s.Height = &v
	return s
}

func (s *DescribeStreamResponseBody) SetId(v string) *DescribeStreamResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeStreamResponseBody) SetName(v string) *DescribeStreamResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeStreamResponseBody) SetPlayDomain(v string) *DescribeStreamResponseBody {
	s.PlayDomain = &v
	return s
}

func (s *DescribeStreamResponseBody) SetProtocol(v string) *DescribeStreamResponseBody {
	s.Protocol = &v
	return s
}

func (s *DescribeStreamResponseBody) SetPushDomain(v string) *DescribeStreamResponseBody {
	s.PushDomain = &v
	return s
}

func (s *DescribeStreamResponseBody) SetRequestId(v string) *DescribeStreamResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamResponseBody) SetStatus(v string) *DescribeStreamResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeStreamResponseBody) SetWidth(v int32) *DescribeStreamResponseBody {
	s.Width = &v
	return s
}

type DescribeStreamResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamResponse) SetHeaders(v map[string]*string) *DescribeStreamResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamResponse) SetStatusCode(v int32) *DescribeStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamResponse) SetBody(v *DescribeStreamResponseBody) *DescribeStreamResponse {
	s.Body = v
	return s
}

type DescribeStreamURLRequest struct {
	// example:
	//
	// true
	Auth *bool `json:"Auth,omitempty" xml:"Auth,omitempty"`
	// example:
	//
	// ocs*****ace
	AuthKey *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	// example:
	//
	// 1571649499
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 3600
	Expire *int64 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1571639499
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// sd
	Transcode *string `json:"Transcode,omitempty" xml:"Transcode,omitempty"`
	// example:
	//
	// live
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeStreamURLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamURLRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamURLRequest) SetAuth(v bool) *DescribeStreamURLRequest {
	s.Auth = &v
	return s
}

func (s *DescribeStreamURLRequest) SetAuthKey(v string) *DescribeStreamURLRequest {
	s.AuthKey = &v
	return s
}

func (s *DescribeStreamURLRequest) SetEndTime(v int64) *DescribeStreamURLRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeStreamURLRequest) SetExpire(v int64) *DescribeStreamURLRequest {
	s.Expire = &v
	return s
}

func (s *DescribeStreamURLRequest) SetId(v string) *DescribeStreamURLRequest {
	s.Id = &v
	return s
}

func (s *DescribeStreamURLRequest) SetOutProtocol(v string) *DescribeStreamURLRequest {
	s.OutProtocol = &v
	return s
}

func (s *DescribeStreamURLRequest) SetOwnerId(v int64) *DescribeStreamURLRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStreamURLRequest) SetStartTime(v int64) *DescribeStreamURLRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeStreamURLRequest) SetTranscode(v string) *DescribeStreamURLRequest {
	s.Transcode = &v
	return s
}

func (s *DescribeStreamURLRequest) SetType(v string) *DescribeStreamURLRequest {
	s.Type = &v
	return s
}

type DescribeStreamURLResponseBody struct {
	// example:
	//
	// 1557977029
	ExpireTime *int64 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// rtmp://demo.aliyundoc.com/live/310101*****7542007?auth_key=1639130258-0-0-b2b04fe85ece6*****a6b1a42bc7e
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeStreamURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamURLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamURLResponseBody) SetExpireTime(v int64) *DescribeStreamURLResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *DescribeStreamURLResponseBody) SetRequestId(v string) *DescribeStreamURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamURLResponseBody) SetUrl(v string) *DescribeStreamURLResponseBody {
	s.Url = &v
	return s
}

type DescribeStreamURLResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamURLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamURLResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamURLResponse) SetHeaders(v map[string]*string) *DescribeStreamURLResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamURLResponse) SetStatusCode(v int32) *DescribeStreamURLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamURLResponse) SetBody(v *DescribeStreamURLResponseBody) *DescribeStreamURLResponse {
	s.Body = v
	return s
}

type DescribeStreamVodListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1634873413
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 18526049*****219118918-cn-beijing
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1639077653
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeStreamVodListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamVodListRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamVodListRequest) SetEndTime(v int64) *DescribeStreamVodListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeStreamVodListRequest) SetId(v string) *DescribeStreamVodListRequest {
	s.Id = &v
	return s
}

func (s *DescribeStreamVodListRequest) SetOwnerId(v int64) *DescribeStreamVodListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStreamVodListRequest) SetStartTime(v int64) *DescribeStreamVodListRequest {
	s.StartTime = &v
	return s
}

type DescribeStreamVodListResponseBody struct {
	Records []*DescribeStreamVodListResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeStreamVodListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamVodListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamVodListResponseBody) SetRecords(v []*DescribeStreamVodListResponseBodyRecords) *DescribeStreamVodListResponseBody {
	s.Records = v
	return s
}

func (s *DescribeStreamVodListResponseBody) SetRequestId(v string) *DescribeStreamVodListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeStreamVodListResponseBodyRecords struct {
	// example:
	//
	// 1634873413
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1639077653
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeStreamVodListResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamVodListResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeStreamVodListResponseBodyRecords) SetEndTime(v int64) *DescribeStreamVodListResponseBodyRecords {
	s.EndTime = &v
	return s
}

func (s *DescribeStreamVodListResponseBodyRecords) SetStartTime(v int64) *DescribeStreamVodListResponseBodyRecords {
	s.StartTime = &v
	return s
}

type DescribeStreamVodListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamVodListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamVodListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamVodListResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamVodListResponse) SetHeaders(v map[string]*string) *DescribeStreamVodListResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamVodListResponse) SetStatusCode(v int32) *DescribeStreamVodListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamVodListResponse) SetBody(v *DescribeStreamVodListResponseBody) *DescribeStreamVodListResponse {
	s.Body = v
	return s
}

type DescribeStreamsRequest struct {
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 3100000*****00000002
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// Id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
}

func (s DescribeStreamsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamsRequest) SetApp(v string) *DescribeStreamsRequest {
	s.App = &v
	return s
}

func (s *DescribeStreamsRequest) SetDeviceId(v string) *DescribeStreamsRequest {
	s.DeviceId = &v
	return s
}

func (s *DescribeStreamsRequest) SetDomain(v string) *DescribeStreamsRequest {
	s.Domain = &v
	return s
}

func (s *DescribeStreamsRequest) SetGroupId(v string) *DescribeStreamsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeStreamsRequest) SetId(v string) *DescribeStreamsRequest {
	s.Id = &v
	return s
}

func (s *DescribeStreamsRequest) SetName(v string) *DescribeStreamsRequest {
	s.Name = &v
	return s
}

func (s *DescribeStreamsRequest) SetOwnerId(v int64) *DescribeStreamsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStreamsRequest) SetPageNum(v int64) *DescribeStreamsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeStreamsRequest) SetPageSize(v int64) *DescribeStreamsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStreamsRequest) SetParentId(v string) *DescribeStreamsRequest {
	s.ParentId = &v
	return s
}

func (s *DescribeStreamsRequest) SetSortBy(v string) *DescribeStreamsRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeStreamsRequest) SetSortDirection(v string) *DescribeStreamsRequest {
	s.SortDirection = &v
	return s
}

type DescribeStreamsResponseBody struct {
	// example:
	//
	// 5
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Streams   []*DescribeStreamsResponseBodyStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeStreamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamsResponseBody) SetPageCount(v int64) *DescribeStreamsResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeStreamsResponseBody) SetPageNum(v int64) *DescribeStreamsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeStreamsResponseBody) SetPageSize(v int64) *DescribeStreamsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStreamsResponseBody) SetRequestId(v string) *DescribeStreamsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamsResponseBody) SetStreams(v []*DescribeStreamsResponseBodyStreams) *DescribeStreamsResponseBody {
	s.Streams = v
	return s
}

func (s *DescribeStreamsResponseBody) SetTotalCount(v int64) *DescribeStreamsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeStreamsResponseBodyStreams struct {
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// 2018-12-10T17:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 31000000*****0000002
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// demo.aliyundoc.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	// example:
	//
	// gb28181
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	PushDomain *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	// example:
	//
	// on
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1280
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeStreamsResponseBodyStreams) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamsResponseBodyStreams) GoString() string {
	return s.String()
}

func (s *DescribeStreamsResponseBodyStreams) SetApp(v string) *DescribeStreamsResponseBodyStreams {
	s.App = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetCreatedTime(v string) *DescribeStreamsResponseBodyStreams {
	s.CreatedTime = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetDeviceId(v string) *DescribeStreamsResponseBodyStreams {
	s.DeviceId = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetEnabled(v bool) *DescribeStreamsResponseBodyStreams {
	s.Enabled = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetGroupId(v string) *DescribeStreamsResponseBodyStreams {
	s.GroupId = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetHeight(v int32) *DescribeStreamsResponseBodyStreams {
	s.Height = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetId(v string) *DescribeStreamsResponseBodyStreams {
	s.Id = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetName(v string) *DescribeStreamsResponseBodyStreams {
	s.Name = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetPlayDomain(v string) *DescribeStreamsResponseBodyStreams {
	s.PlayDomain = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetProtocol(v string) *DescribeStreamsResponseBodyStreams {
	s.Protocol = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetPushDomain(v string) *DescribeStreamsResponseBodyStreams {
	s.PushDomain = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetStatus(v string) *DescribeStreamsResponseBodyStreams {
	s.Status = &v
	return s
}

func (s *DescribeStreamsResponseBodyStreams) SetWidth(v int32) *DescribeStreamsResponseBodyStreams {
	s.Width = &v
	return s
}

type DescribeStreamsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamsResponse) SetHeaders(v map[string]*string) *DescribeStreamsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamsResponse) SetStatusCode(v int32) *DescribeStreamsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamsResponse) SetBody(v *DescribeStreamsResponseBody) *DescribeStreamsResponse {
	s.Body = v
	return s
}

type DescribeTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****998-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateRequest) GoString() string {
	return s.String()
}

func (s *DescribeTemplateRequest) SetId(v string) *DescribeTemplateRequest {
	s.Id = &v
	return s
}

func (s *DescribeTemplateRequest) SetOwnerId(v int64) *DescribeTemplateRequest {
	s.OwnerId = &v
	return s
}

type DescribeTemplateResponseBody struct {
	// example:
	//
	// http://example.com/callback
	Callback *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	// example:
	//
	// 2020-12-10T10:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// hls
	FileFormat *string `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Flv *string `json:"Flv,omitempty" xml:"Flv,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	HlsM3u8 *string `json:"HlsM3u8,omitempty" xml:"HlsM3u8,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}
	HlsTs *string `json:"HlsTs,omitempty" xml:"HlsTs,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 3600
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg
	JpgOnDemand *string `json:"JpgOnDemand,omitempty" xml:"JpgOnDemand,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}.jpg
	JpgOverwrite *string `json:"JpgOverwrite,omitempty" xml:"JpgOverwrite,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg
	JpgSequence *string `json:"JpgSequence,omitempty" xml:"JpgSequence,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Mp4  *string `json:"Mp4,omitempty" xml:"Mp4,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// my_oss_bucket
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// example:
	//
	// oss-cn-qingdao.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// example:
	//
	// oss-prefix
	OssFilePrefix *string `json:"OssFilePrefix,omitempty" xml:"OssFilePrefix,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 3
	Retention    *int64                                      `json:"Retention,omitempty" xml:"Retention,omitempty"`
	TransConfigs []*DescribeTemplateResponseBodyTransConfigs `json:"TransConfigs,omitempty" xml:"TransConfigs,omitempty" type:"Repeated"`
	// example:
	//
	// auto
	Trigger *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
	// example:
	//
	// record
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTemplateResponseBody) SetCallback(v string) *DescribeTemplateResponseBody {
	s.Callback = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetCreatedTime(v string) *DescribeTemplateResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetDescription(v string) *DescribeTemplateResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetFileFormat(v string) *DescribeTemplateResponseBody {
	s.FileFormat = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetFlv(v string) *DescribeTemplateResponseBody {
	s.Flv = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetHlsM3u8(v string) *DescribeTemplateResponseBody {
	s.HlsM3u8 = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetHlsTs(v string) *DescribeTemplateResponseBody {
	s.HlsTs = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetId(v string) *DescribeTemplateResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetInterval(v int64) *DescribeTemplateResponseBody {
	s.Interval = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetJpgOnDemand(v string) *DescribeTemplateResponseBody {
	s.JpgOnDemand = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetJpgOverwrite(v string) *DescribeTemplateResponseBody {
	s.JpgOverwrite = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetJpgSequence(v string) *DescribeTemplateResponseBody {
	s.JpgSequence = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetMp4(v string) *DescribeTemplateResponseBody {
	s.Mp4 = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetName(v string) *DescribeTemplateResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetOssBucket(v string) *DescribeTemplateResponseBody {
	s.OssBucket = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetOssEndpoint(v string) *DescribeTemplateResponseBody {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetOssFilePrefix(v string) *DescribeTemplateResponseBody {
	s.OssFilePrefix = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetRegion(v string) *DescribeTemplateResponseBody {
	s.Region = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetRequestId(v string) *DescribeTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetRetention(v int64) *DescribeTemplateResponseBody {
	s.Retention = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetTransConfigs(v []*DescribeTemplateResponseBodyTransConfigs) *DescribeTemplateResponseBody {
	s.TransConfigs = v
	return s
}

func (s *DescribeTemplateResponseBody) SetTrigger(v string) *DescribeTemplateResponseBody {
	s.Trigger = &v
	return s
}

func (s *DescribeTemplateResponseBody) SetType(v string) *DescribeTemplateResponseBody {
	s.Type = &v
	return s
}

type DescribeTemplateResponseBodyTransConfigs struct {
	// example:
	//
	// 25
	Fps *int64 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 50
	Gop *int64 `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 720
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 399*****430-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// sd
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 800
	VideoBitrate *int64 `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	// example:
	//
	// h264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
	// example:
	//
	// 1280
	Width *int64 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeTemplateResponseBodyTransConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateResponseBodyTransConfigs) GoString() string {
	return s.String()
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetFps(v int64) *DescribeTemplateResponseBodyTransConfigs {
	s.Fps = &v
	return s
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetGop(v int64) *DescribeTemplateResponseBodyTransConfigs {
	s.Gop = &v
	return s
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetHeight(v int64) *DescribeTemplateResponseBodyTransConfigs {
	s.Height = &v
	return s
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetId(v string) *DescribeTemplateResponseBodyTransConfigs {
	s.Id = &v
	return s
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetName(v string) *DescribeTemplateResponseBodyTransConfigs {
	s.Name = &v
	return s
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetVideoBitrate(v int64) *DescribeTemplateResponseBodyTransConfigs {
	s.VideoBitrate = &v
	return s
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetVideoCodec(v string) *DescribeTemplateResponseBodyTransConfigs {
	s.VideoCodec = &v
	return s
}

func (s *DescribeTemplateResponseBodyTransConfigs) SetWidth(v int64) *DescribeTemplateResponseBodyTransConfigs {
	s.Width = &v
	return s
}

type DescribeTemplateResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateResponse) GoString() string {
	return s.String()
}

func (s *DescribeTemplateResponse) SetHeaders(v map[string]*string) *DescribeTemplateResponse {
	s.Headers = v
	return s
}

func (s *DescribeTemplateResponse) SetStatusCode(v int32) *DescribeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTemplateResponse) SetBody(v *DescribeTemplateResponseBody) *DescribeTemplateResponse {
	s.Body = v
	return s
}

type DescribeTemplatesRequest struct {
	// example:
	//
	// 323434****83423432
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// asc
	SortDirection *string `json:"SortDirection,omitempty" xml:"SortDirection,omitempty"`
	// example:
	//
	// record
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesRequest) SetId(v string) *DescribeTemplatesRequest {
	s.Id = &v
	return s
}

func (s *DescribeTemplatesRequest) SetInstanceId(v string) *DescribeTemplatesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTemplatesRequest) SetOwnerId(v int64) *DescribeTemplatesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTemplatesRequest) SetPageNum(v int64) *DescribeTemplatesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeTemplatesRequest) SetPageSize(v int64) *DescribeTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTemplatesRequest) SetSortBy(v string) *DescribeTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *DescribeTemplatesRequest) SetSortDirection(v string) *DescribeTemplatesRequest {
	s.SortDirection = &v
	return s
}

func (s *DescribeTemplatesRequest) SetType(v string) *DescribeTemplatesRequest {
	s.Type = &v
	return s
}

type DescribeTemplatesResponseBody struct {
	// example:
	//
	// 5
	PageCount *int64 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// F3F88C96-CA6E-573E-B8F7-5BE83A1A0BCF
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Templates []*DescribeTemplatesResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponseBody) SetPageCount(v int64) *DescribeTemplatesResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeTemplatesResponseBody) SetPageNum(v int64) *DescribeTemplatesResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeTemplatesResponseBody) SetPageSize(v int64) *DescribeTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTemplatesResponseBody) SetRequestId(v string) *DescribeTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTemplatesResponseBody) SetTemplates(v []*DescribeTemplatesResponseBodyTemplates) *DescribeTemplatesResponseBody {
	s.Templates = v
	return s
}

func (s *DescribeTemplatesResponseBody) SetTotalCount(v int64) *DescribeTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTemplatesResponseBodyTemplates struct {
	// example:
	//
	// http://example.com/callback
	Callback *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	// example:
	//
	// 2018-12-10T10:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// hls
	FileFormat *string `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Flv *string `json:"Flv,omitempty" xml:"Flv,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	HlsM3u8 *string `json:"HlsM3u8,omitempty" xml:"HlsM3u8,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}
	HlsTs *string `json:"HlsTs,omitempty" xml:"HlsTs,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 3600
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg
	JpgOnDemand *string `json:"JpgOnDemand,omitempty" xml:"JpgOnDemand,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}.jpg
	JpgOverwrite *string `json:"JpgOverwrite,omitempty" xml:"JpgOverwrite,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg
	JpgSequence *string `json:"JpgSequence,omitempty" xml:"JpgSequence,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Mp4  *string `json:"Mp4,omitempty" xml:"Mp4,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// my_oss_bucket
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// example:
	//
	// oss-cn-qingdao.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// example:
	//
	// my_prefix
	OssFilePrefix *string `json:"OssFilePrefix,omitempty" xml:"OssFilePrefix,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 3
	Retention    *int64                                                `json:"Retention,omitempty" xml:"Retention,omitempty"`
	TransConfigs []*DescribeTemplatesResponseBodyTemplatesTransConfigs `json:"TransConfigs,omitempty" xml:"TransConfigs,omitempty" type:"Repeated"`
	// example:
	//
	// auto
	Trigger *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
	// example:
	//
	// record
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTemplatesResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponseBodyTemplates) SetCallback(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Callback = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetCreatedTime(v string) *DescribeTemplatesResponseBodyTemplates {
	s.CreatedTime = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetDescription(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Description = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetFileFormat(v string) *DescribeTemplatesResponseBodyTemplates {
	s.FileFormat = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetFlv(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Flv = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetHlsM3u8(v string) *DescribeTemplatesResponseBodyTemplates {
	s.HlsM3u8 = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetHlsTs(v string) *DescribeTemplatesResponseBodyTemplates {
	s.HlsTs = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetId(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Id = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetInterval(v int64) *DescribeTemplatesResponseBodyTemplates {
	s.Interval = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetJpgOnDemand(v string) *DescribeTemplatesResponseBodyTemplates {
	s.JpgOnDemand = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetJpgOverwrite(v string) *DescribeTemplatesResponseBodyTemplates {
	s.JpgOverwrite = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetJpgSequence(v string) *DescribeTemplatesResponseBodyTemplates {
	s.JpgSequence = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetMp4(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Mp4 = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetName(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Name = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetOssBucket(v string) *DescribeTemplatesResponseBodyTemplates {
	s.OssBucket = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetOssEndpoint(v string) *DescribeTemplatesResponseBodyTemplates {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetOssFilePrefix(v string) *DescribeTemplatesResponseBodyTemplates {
	s.OssFilePrefix = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetRegion(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Region = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetRetention(v int64) *DescribeTemplatesResponseBodyTemplates {
	s.Retention = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetTransConfigs(v []*DescribeTemplatesResponseBodyTemplatesTransConfigs) *DescribeTemplatesResponseBodyTemplates {
	s.TransConfigs = v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetTrigger(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Trigger = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplates) SetType(v string) *DescribeTemplatesResponseBodyTemplates {
	s.Type = &v
	return s
}

type DescribeTemplatesResponseBodyTemplatesTransConfigs struct {
	// example:
	//
	// 25
	Fps *int64 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 50
	Gop *int64 `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 720
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// sd
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 800
	VideoBitrate *int64 `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	// example:
	//
	// h264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
	// example:
	//
	// 1280
	Width *int64 `json:"Width,omitempty" xml:"Width,omitempty"`
	// example:
	//
	// 399788187729597430-cn-qingdao
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s DescribeTemplatesResponseBodyTemplatesTransConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponseBodyTemplatesTransConfigs) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetFps(v int64) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.Fps = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetGop(v int64) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.Gop = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetHeight(v int64) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.Height = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetName(v string) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.Name = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetVideoBitrate(v int64) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.VideoBitrate = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetVideoCodec(v string) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.VideoCodec = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetWidth(v int64) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.Width = &v
	return s
}

func (s *DescribeTemplatesResponseBodyTemplatesTransConfigs) SetId(v string) *DescribeTemplatesResponseBodyTemplatesTransConfigs {
	s.Id = &v
	return s
}

type DescribeTemplatesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponse) SetHeaders(v map[string]*string) *DescribeTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribeTemplatesResponse) SetStatusCode(v int32) *DescribeTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTemplatesResponse) SetBody(v *DescribeTemplatesResponseBody) *DescribeTemplatesResponse {
	s.Body = v
	return s
}

type DescribeUserDevicesRequest struct {
	EnsInstanceIds *string `json:"EnsInstanceIds,omitempty" xml:"EnsInstanceIds,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ServerName     *string `json:"ServerName,omitempty" xml:"ServerName,omitempty"`
}

func (s DescribeUserDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserDevicesRequest) SetEnsInstanceIds(v string) *DescribeUserDevicesRequest {
	s.EnsInstanceIds = &v
	return s
}

func (s *DescribeUserDevicesRequest) SetOwnerId(v int64) *DescribeUserDevicesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserDevicesRequest) SetServerName(v string) *DescribeUserDevicesRequest {
	s.ServerName = &v
	return s
}

type DescribeUserDevicesResponseBody struct {
	List      []*DescribeUserDevicesResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserDevicesResponseBody) SetList(v []*DescribeUserDevicesResponseBodyList) *DescribeUserDevicesResponseBody {
	s.List = v
	return s
}

func (s *DescribeUserDevicesResponseBody) SetRequestId(v string) *DescribeUserDevicesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserDevicesResponseBodyList struct {
	AliUid        *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	EdgeNodeName  *string `json:"EdgeNodeName,omitempty" xml:"EdgeNodeName,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MacAddress    *string `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	MatrixId      *string `json:"MatrixId,omitempty" xml:"MatrixId,omitempty"`
	Server        *string `json:"Server,omitempty" xml:"Server,omitempty"`
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeUserDevicesResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDevicesResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeUserDevicesResponseBodyList) SetAliUid(v string) *DescribeUserDevicesResponseBodyList {
	s.AliUid = &v
	return s
}

func (s *DescribeUserDevicesResponseBodyList) SetEdgeNodeName(v string) *DescribeUserDevicesResponseBodyList {
	s.EdgeNodeName = &v
	return s
}

func (s *DescribeUserDevicesResponseBodyList) SetInstanceId(v string) *DescribeUserDevicesResponseBodyList {
	s.InstanceId = &v
	return s
}

func (s *DescribeUserDevicesResponseBodyList) SetMacAddress(v string) *DescribeUserDevicesResponseBodyList {
	s.MacAddress = &v
	return s
}

func (s *DescribeUserDevicesResponseBodyList) SetMatrixId(v string) *DescribeUserDevicesResponseBodyList {
	s.MatrixId = &v
	return s
}

func (s *DescribeUserDevicesResponseBodyList) SetServer(v string) *DescribeUserDevicesResponseBodyList {
	s.Server = &v
	return s
}

func (s *DescribeUserDevicesResponseBodyList) SetSpecification(v string) *DescribeUserDevicesResponseBodyList {
	s.Specification = &v
	return s
}

func (s *DescribeUserDevicesResponseBodyList) SetStatus(v string) *DescribeUserDevicesResponseBodyList {
	s.Status = &v
	return s
}

type DescribeUserDevicesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserDevicesResponse) SetHeaders(v map[string]*string) *DescribeUserDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserDevicesResponse) SetStatusCode(v int32) *DescribeUserDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserDevicesResponse) SetBody(v *DescribeUserDevicesResponseBody) *DescribeUserDevicesResponse {
	s.Body = v
	return s
}

type DescribeVodStreamURLRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// http://xxx/xxx.mp4
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeVodStreamURLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVodStreamURLRequest) GoString() string {
	return s.String()
}

func (s *DescribeVodStreamURLRequest) SetOwnerId(v int64) *DescribeVodStreamURLRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVodStreamURLRequest) SetUrl(v string) *DescribeVodStreamURLRequest {
	s.Url = &v
	return s
}

type DescribeVodStreamURLResponseBody struct {
	// example:
	//
	// rtsp
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	// example:
	//
	// 8080
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// rtsp://domain/live/stream?sign=xxxxxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeVodStreamURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVodStreamURLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVodStreamURLResponseBody) SetOutProtocol(v string) *DescribeVodStreamURLResponseBody {
	s.OutProtocol = &v
	return s
}

func (s *DescribeVodStreamURLResponseBody) SetPort(v int64) *DescribeVodStreamURLResponseBody {
	s.Port = &v
	return s
}

func (s *DescribeVodStreamURLResponseBody) SetRequestId(v string) *DescribeVodStreamURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVodStreamURLResponseBody) SetUrl(v string) *DescribeVodStreamURLResponseBody {
	s.Url = &v
	return s
}

type DescribeVodStreamURLResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVodStreamURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVodStreamURLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVodStreamURLResponse) GoString() string {
	return s.String()
}

func (s *DescribeVodStreamURLResponse) SetHeaders(v map[string]*string) *DescribeVodStreamURLResponse {
	s.Headers = v
	return s
}

func (s *DescribeVodStreamURLResponse) SetStatusCode(v int32) *DescribeVodStreamURLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVodStreamURLResponse) SetBody(v *DescribeVodStreamURLResponseBody) *DescribeVodStreamURLResponse {
	s.Body = v
	return s
}

type DescribeVsCertificateDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cert-539xxxx
	CertName *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsCertificateDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateDetailRequest) SetCertName(v string) *DescribeVsCertificateDetailRequest {
	s.CertName = &v
	return s
}

func (s *DescribeVsCertificateDetailRequest) SetOwnerId(v int64) *DescribeVsCertificateDetailRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsCertificateDetailResponseBody struct {
	// example:
	//
	// -----BEGIN CERTIFICATE-----xxxxx-----END CERTIFICATE-----
	Cert *string `json:"Cert,omitempty" xml:"Cert,omitempty"`
	// example:
	//
	// 63000000
	CertId *int64 `json:"CertId,omitempty" xml:"CertId,omitempty"`
	// example:
	//
	// cert-539xxxxx
	CertName *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	// example:
	//
	// xxxxx
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// D94D0E1E-E71B-562D-8C18-969BB3653FBD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsCertificateDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateDetailResponseBody) SetCert(v string) *DescribeVsCertificateDetailResponseBody {
	s.Cert = &v
	return s
}

func (s *DescribeVsCertificateDetailResponseBody) SetCertId(v int64) *DescribeVsCertificateDetailResponseBody {
	s.CertId = &v
	return s
}

func (s *DescribeVsCertificateDetailResponseBody) SetCertName(v string) *DescribeVsCertificateDetailResponseBody {
	s.CertName = &v
	return s
}

func (s *DescribeVsCertificateDetailResponseBody) SetKey(v string) *DescribeVsCertificateDetailResponseBody {
	s.Key = &v
	return s
}

func (s *DescribeVsCertificateDetailResponseBody) SetRequestId(v string) *DescribeVsCertificateDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsCertificateDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsCertificateDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsCertificateDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateDetailResponse) SetHeaders(v map[string]*string) *DescribeVsCertificateDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsCertificateDetailResponse) SetStatusCode(v int32) *DescribeVsCertificateDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsCertificateDetailResponse) SetBody(v *DescribeVsCertificateDetailResponseBody) *DescribeVsCertificateDetailResponse {
	s.Body = v
	return s
}

type DescribeVsCertificateListRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsCertificateListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateListRequest) SetDomainName(v string) *DescribeVsCertificateListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsCertificateListRequest) SetOwnerId(v int64) *DescribeVsCertificateListRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsCertificateListResponseBody struct {
	CertificateListModel *DescribeVsCertificateListResponseBodyCertificateListModel `json:"CertificateListModel,omitempty" xml:"CertificateListModel,omitempty" type:"Struct"`
	// example:
	//
	// 6E310519-E035-51AB-80D4-C1CBECD39EB5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsCertificateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateListResponseBody) SetCertificateListModel(v *DescribeVsCertificateListResponseBodyCertificateListModel) *DescribeVsCertificateListResponseBody {
	s.CertificateListModel = v
	return s
}

func (s *DescribeVsCertificateListResponseBody) SetRequestId(v string) *DescribeVsCertificateListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsCertificateListResponseBodyCertificateListModel struct {
	CertList []*DescribeVsCertificateListResponseBodyCertificateListModelCertList `json:"CertList,omitempty" xml:"CertList,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s DescribeVsCertificateListResponseBodyCertificateListModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateListResponseBodyCertificateListModel) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModel) SetCertList(v []*DescribeVsCertificateListResponseBodyCertificateListModelCertList) *DescribeVsCertificateListResponseBodyCertificateListModel {
	s.CertList = v
	return s
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModel) SetCount(v int32) *DescribeVsCertificateListResponseBodyCertificateListModel {
	s.Count = &v
	return s
}

type DescribeVsCertificateListResponseBodyCertificateListModelCertList struct {
	// example:
	//
	// 6338888
	CertId *int64 `json:"CertId,omitempty" xml:"CertId,omitempty"`
	// example:
	//
	// cert-5391062
	CertName *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	Common *string `json:"Common,omitempty" xml:"Common,omitempty"`
	// example:
	//
	// 3EB2585309AE5C8F369****7CDA6A8F5CEC8B2D4
	Fingerprint *string `json:"Fingerprint,omitempty" xml:"Fingerprint,omitempty"`
	// example:
	//
	// xxxxCert Inc
	Issuer *string `json:"Issuer,omitempty" xml:"Issuer,omitempty"`
	// example:
	//
	// 1632462708
	LastTime *int64 `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
}

func (s DescribeVsCertificateListResponseBodyCertificateListModelCertList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateListResponseBodyCertificateListModelCertList) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModelCertList) SetCertId(v int64) *DescribeVsCertificateListResponseBodyCertificateListModelCertList {
	s.CertId = &v
	return s
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModelCertList) SetCertName(v string) *DescribeVsCertificateListResponseBodyCertificateListModelCertList {
	s.CertName = &v
	return s
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModelCertList) SetCommon(v string) *DescribeVsCertificateListResponseBodyCertificateListModelCertList {
	s.Common = &v
	return s
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModelCertList) SetFingerprint(v string) *DescribeVsCertificateListResponseBodyCertificateListModelCertList {
	s.Fingerprint = &v
	return s
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModelCertList) SetIssuer(v string) *DescribeVsCertificateListResponseBodyCertificateListModelCertList {
	s.Issuer = &v
	return s
}

func (s *DescribeVsCertificateListResponseBodyCertificateListModelCertList) SetLastTime(v int64) *DescribeVsCertificateListResponseBodyCertificateListModelCertList {
	s.LastTime = &v
	return s
}

type DescribeVsCertificateListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsCertificateListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsCertificateListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsCertificateListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsCertificateListResponse) SetHeaders(v map[string]*string) *DescribeVsCertificateListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsCertificateListResponse) SetStatusCode(v int32) *DescribeVsCertificateListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsCertificateListResponse) SetBody(v *DescribeVsCertificateListResponseBody) *DescribeVsCertificateListResponse {
	s.Body = v
	return s
}

type DescribeVsDevicesDataRequest struct {
	// example:
	//
	// 2022-01-30T16:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2022-01-04T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDevicesDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDevicesDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDevicesDataRequest) SetEndTime(v string) *DescribeVsDevicesDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDevicesDataRequest) SetGroupId(v string) *DescribeVsDevicesDataRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeVsDevicesDataRequest) SetOwnerId(v int64) *DescribeVsDevicesDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDevicesDataRequest) SetStartTime(v string) *DescribeVsDevicesDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDevicesDataResponseBody struct {
	DevicesDataPerInterval *DescribeVsDevicesDataResponseBodyDevicesDataPerInterval `json:"DevicesDataPerInterval,omitempty" xml:"DevicesDataPerInterval,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsDevicesDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDevicesDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDevicesDataResponseBody) SetDevicesDataPerInterval(v *DescribeVsDevicesDataResponseBodyDevicesDataPerInterval) *DescribeVsDevicesDataResponseBody {
	s.DevicesDataPerInterval = v
	return s
}

func (s *DescribeVsDevicesDataResponseBody) SetRequestId(v string) *DescribeVsDevicesDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsDevicesDataResponseBodyDevicesDataPerInterval struct {
	DataModule []*DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeVsDevicesDataResponseBodyDevicesDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDevicesDataResponseBodyDevicesDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDevicesDataResponseBodyDevicesDataPerInterval) SetDataModule(v []*DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule) *DescribeVsDevicesDataResponseBodyDevicesDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule struct {
	// example:
	//
	// 128
	DevicesDataValue *string `json:"DevicesDataValue,omitempty" xml:"DevicesDataValue,omitempty"`
	// example:
	//
	// 2022-01-04T16:00:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule) SetDevicesDataValue(v string) *DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule {
	s.DevicesDataValue = &v
	return s
}

func (s *DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVsDevicesDataResponseBodyDevicesDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeVsDevicesDataResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDevicesDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDevicesDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDevicesDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDevicesDataResponse) SetHeaders(v map[string]*string) *DescribeVsDevicesDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDevicesDataResponse) SetStatusCode(v int32) *DescribeVsDevicesDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDevicesDataResponse) SetBody(v *DescribeVsDevicesDataResponseBody) *DescribeVsDevicesDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainBpsDataRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-02T02:30:48Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 300
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// unicom
	IspNameEn *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	// example:
	//
	// guangdong
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-12-26T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainBpsDataRequest) SetDomainName(v string) *DescribeVsDomainBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainBpsDataRequest) SetEndTime(v string) *DescribeVsDomainBpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainBpsDataRequest) SetInterval(v string) *DescribeVsDomainBpsDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeVsDomainBpsDataRequest) SetIspNameEn(v string) *DescribeVsDomainBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeVsDomainBpsDataRequest) SetLocationNameEn(v string) *DescribeVsDomainBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeVsDomainBpsDataRequest) SetOwnerId(v int64) *DescribeVsDomainBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainBpsDataRequest) SetStartTime(v string) *DescribeVsDomainBpsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainBpsDataResponseBody struct {
	BpsDataPerInterval *DescribeVsDomainBpsDataResponseBodyBpsDataPerInterval `json:"BpsDataPerInterval,omitempty" xml:"BpsDataPerInterval,omitempty" type:"Struct"`
	// example:
	//
	// 2100
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-01T07:10:48Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-09-18T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainBpsDataResponseBody) SetBpsDataPerInterval(v *DescribeVsDomainBpsDataResponseBodyBpsDataPerInterval) *DescribeVsDomainBpsDataResponseBody {
	s.BpsDataPerInterval = v
	return s
}

func (s *DescribeVsDomainBpsDataResponseBody) SetDataInterval(v string) *DescribeVsDomainBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainBpsDataResponseBody) SetDomainName(v string) *DescribeVsDomainBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainBpsDataResponseBody) SetEndTime(v string) *DescribeVsDomainBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainBpsDataResponseBody) SetRequestId(v string) *DescribeVsDomainBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainBpsDataResponseBody) SetStartTime(v string) *DescribeVsDomainBpsDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeVsDomainBpsDataResponseBodyBpsDataPerInterval struct {
	DataModule []*DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainBpsDataResponseBodyBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainBpsDataResponseBodyBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainBpsDataResponseBodyBpsDataPerInterval) SetDataModule(v []*DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) *DescribeVsDomainBpsDataResponseBodyBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule struct {
	// example:
	//
	// 1000
	BpsValue *string `json:"BpsValue,omitempty" xml:"BpsValue,omitempty"`
	// example:
	//
	// 2015-12-10T20:00:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetBpsValue(v string) *DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.BpsValue = &v
	return s
}

func (s *DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVsDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeVsDomainBpsDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainBpsDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainBpsDataResponse) SetStatusCode(v int32) *DescribeVsDomainBpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainBpsDataResponse) SetBody(v *DescribeVsDomainBpsDataResponseBody) *DescribeVsDomainBpsDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainCertificateInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsDomainCertificateInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainCertificateInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainCertificateInfoRequest) SetDomainName(v string) *DescribeVsDomainCertificateInfoRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoRequest) SetOwnerId(v int64) *DescribeVsDomainCertificateInfoRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsDomainCertificateInfoResponseBody struct {
	CertInfos *DescribeVsDomainCertificateInfoResponseBodyCertInfos `json:"CertInfos,omitempty" xml:"CertInfos,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsDomainCertificateInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainCertificateInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainCertificateInfoResponseBody) SetCertInfos(v *DescribeVsDomainCertificateInfoResponseBodyCertInfos) *DescribeVsDomainCertificateInfoResponseBody {
	s.CertInfos = v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBody) SetRequestId(v string) *DescribeVsDomainCertificateInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsDomainCertificateInfoResponseBodyCertInfos struct {
	CertInfo []*DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo `json:"CertInfo,omitempty" xml:"CertInfo,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainCertificateInfoResponseBodyCertInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainCertificateInfoResponseBodyCertInfos) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfos) SetCertInfo(v []*DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) *DescribeVsDomainCertificateInfoResponseBodyCertInfos {
	s.CertInfo = v
	return s
}

type DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo struct {
	// example:
	//
	// example.com
	CertDomainName *string `json:"CertDomainName,omitempty" xml:"CertDomainName,omitempty"`
	// example:
	//
	// 2018-06-03T22:03:39Z
	CertExpireTime *string `json:"CertExpireTime,omitempty" xml:"CertExpireTime,omitempty"`
	// example:
	//
	// months
	CertLife *string `json:"CertLife,omitempty" xml:"CertLife,omitempty"`
	// example:
	//
	// myname
	CertName *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	// example:
	//
	// Let\\"s Encrypt
	CertOrg *string `json:"CertOrg,omitempty" xml:"CertOrg,omitempty"`
	// example:
	//
	// free
	CertType *string `json:"CertType,omitempty" xml:"CertType,omitempty"`
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// asdadaxxxx
	SSLPub *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
	// example:
	//
	// on
	ServerCertificateStatus *string `json:"ServerCertificateStatus,omitempty" xml:"ServerCertificateStatus,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertDomainName(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertDomainName = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertExpireTime(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertExpireTime = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertLife(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertLife = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertName(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertName = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertOrg(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertOrg = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertType(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertType = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetDomainName(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetSSLPub(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.SSLPub = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetServerCertificateStatus(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.ServerCertificateStatus = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo) SetStatus(v string) *DescribeVsDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.Status = &v
	return s
}

type DescribeVsDomainCertificateInfoResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainCertificateInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainCertificateInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainCertificateInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainCertificateInfoResponse) SetHeaders(v map[string]*string) *DescribeVsDomainCertificateInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponse) SetStatusCode(v int32) *DescribeVsDomainCertificateInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainCertificateInfoResponse) SetBody(v *DescribeVsDomainCertificateInfoResponseBody) *DescribeVsDomainCertificateInfoResponse {
	s.Body = v
	return s
}

type DescribeVsDomainConfigsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// path_based_ttl_set,oss_auth
	FunctionNames *string `json:"FunctionNames,omitempty" xml:"FunctionNames,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainConfigsRequest) SetDomainName(v string) *DescribeVsDomainConfigsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainConfigsRequest) SetFunctionNames(v string) *DescribeVsDomainConfigsRequest {
	s.FunctionNames = &v
	return s
}

func (s *DescribeVsDomainConfigsRequest) SetOwnerId(v int64) *DescribeVsDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsDomainConfigsResponseBody struct {
	DomainConfigs []*DescribeVsDomainConfigsResponseBodyDomainConfigs `json:"DomainConfigs,omitempty" xml:"DomainConfigs,omitempty" type:"Repeated"`
	// example:
	//
	// D94D0E1E-E71B-562D-8C18-969BB3653FBD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainConfigsResponseBody) SetDomainConfigs(v []*DescribeVsDomainConfigsResponseBodyDomainConfigs) *DescribeVsDomainConfigsResponseBody {
	s.DomainConfigs = v
	return s
}

func (s *DescribeVsDomainConfigsResponseBody) SetRequestId(v string) *DescribeVsDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsDomainConfigsResponseBodyDomainConfigs struct {
	// example:
	//
	// 6295
	ConfigId     *string                                                         `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	FunctionArgs []*DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs `json:"FunctionArgs,omitempty" xml:"FunctionArgs,omitempty" type:"Repeated"`
	// example:
	//
	// aliauth
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeVsDomainConfigsResponseBodyDomainConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainConfigsResponseBodyDomainConfigs) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainConfigsResponseBodyDomainConfigs) SetConfigId(v string) *DescribeVsDomainConfigsResponseBodyDomainConfigs {
	s.ConfigId = &v
	return s
}

func (s *DescribeVsDomainConfigsResponseBodyDomainConfigs) SetFunctionArgs(v []*DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs) *DescribeVsDomainConfigsResponseBodyDomainConfigs {
	s.FunctionArgs = v
	return s
}

func (s *DescribeVsDomainConfigsResponseBodyDomainConfigs) SetFunctionName(v string) *DescribeVsDomainConfigsResponseBodyDomainConfigs {
	s.FunctionName = &v
	return s
}

func (s *DescribeVsDomainConfigsResponseBodyDomainConfigs) SetStatus(v string) *DescribeVsDomainConfigsResponseBodyDomainConfigs {
	s.Status = &v
	return s
}

type DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs struct {
	// example:
	//
	// auth_type
	ArgName *string `json:"ArgName,omitempty" xml:"ArgName,omitempty"`
	// example:
	//
	// req_auth
	ArgValue *string `json:"ArgValue,omitempty" xml:"ArgValue,omitempty"`
}

func (s DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs) SetArgName(v string) *DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs {
	s.ArgName = &v
	return s
}

func (s *DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs) SetArgValue(v string) *DescribeVsDomainConfigsResponseBodyDomainConfigsFunctionArgs {
	s.ArgValue = &v
	return s
}

type DescribeVsDomainConfigsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainConfigsResponse) SetHeaders(v map[string]*string) *DescribeVsDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainConfigsResponse) SetStatusCode(v int32) *DescribeVsDomainConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainConfigsResponse) SetBody(v *DescribeVsDomainConfigsResponseBody) *DescribeVsDomainConfigsResponse {
	s.Body = v
	return s
}

type DescribeVsDomainDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsDomainDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainDetailRequest) SetDomainName(v string) *DescribeVsDomainDetailRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainDetailRequest) SetOwnerId(v int64) *DescribeVsDomainDetailRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsDomainDetailResponseBody struct {
	DomainConfig *DescribeVsDomainDetailResponseBodyDomainConfig `json:"DomainConfig,omitempty" xml:"DomainConfig,omitempty" type:"Struct"`
	// example:
	//
	// 9BEC5E85-C76B-56EF-A922-860EFDB8B64B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsDomainDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainDetailResponseBody) SetDomainConfig(v *DescribeVsDomainDetailResponseBodyDomainConfig) *DescribeVsDomainDetailResponseBody {
	s.DomainConfig = v
	return s
}

func (s *DescribeVsDomainDetailResponseBody) SetRequestId(v string) *DescribeVsDomainDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsDomainDetailResponseBodyDomainConfig struct {
	// example:
	//
	// example.aliyundoc.com.*****.com
	Cname       *string `json:"Cname,omitempty" xml:"Cname,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// online
	DomainStatus *string `json:"DomainStatus,omitempty" xml:"DomainStatus,omitempty"`
	// example:
	//
	// vs
	DomainType *string `json:"DomainType,omitempty" xml:"DomainType,omitempty"`
	// example:
	//
	// 2021-07-19T10:27:23Z
	GmtCreated *string `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	// example:
	//
	// 2021-07-19T10:27:23Z
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// off
	SSLProtocol *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	// example:
	//
	// domestic
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s DescribeVsDomainDetailResponseBodyDomainConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainDetailResponseBodyDomainConfig) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetCname(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.Cname = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetDescription(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.Description = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetDomainName(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetDomainStatus(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.DomainStatus = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetDomainType(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.DomainType = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetGmtCreated(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.GmtCreated = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetGmtModified(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.GmtModified = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetRegion(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.Region = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetSSLProtocol(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.SSLProtocol = &v
	return s
}

func (s *DescribeVsDomainDetailResponseBodyDomainConfig) SetScope(v string) *DescribeVsDomainDetailResponseBodyDomainConfig {
	s.Scope = &v
	return s
}

type DescribeVsDomainDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainDetailResponse) SetHeaders(v map[string]*string) *DescribeVsDomainDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainDetailResponse) SetStatusCode(v int32) *DescribeVsDomainDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainDetailResponse) SetBody(v *DescribeVsDomainDetailResponseBody) *DescribeVsDomainDetailResponse {
	s.Body = v
	return s
}

type DescribeVsDomainPvDataRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-15T15:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-10-10T17:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainPvDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvDataRequest) SetDomainName(v string) *DescribeVsDomainPvDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainPvDataRequest) SetEndTime(v string) *DescribeVsDomainPvDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainPvDataRequest) SetOwnerId(v int64) *DescribeVsDomainPvDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainPvDataRequest) SetStartTime(v string) *DescribeVsDomainPvDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainPvDataResponseBody struct {
	// example:
	//
	// 3600
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-11-12T15:59:59Z
	EndTime        *string                                           `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PvDataInterval *DescribeVsDomainPvDataResponseBodyPvDataInterval `json:"PvDataInterval,omitempty" xml:"PvDataInterval,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-11-22T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainPvDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvDataResponseBody) SetDataInterval(v string) *DescribeVsDomainPvDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainPvDataResponseBody) SetDomainName(v string) *DescribeVsDomainPvDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainPvDataResponseBody) SetEndTime(v string) *DescribeVsDomainPvDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainPvDataResponseBody) SetPvDataInterval(v *DescribeVsDomainPvDataResponseBodyPvDataInterval) *DescribeVsDomainPvDataResponseBody {
	s.PvDataInterval = v
	return s
}

func (s *DescribeVsDomainPvDataResponseBody) SetRequestId(v string) *DescribeVsDomainPvDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainPvDataResponseBody) SetStartTime(v string) *DescribeVsDomainPvDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeVsDomainPvDataResponseBodyPvDataInterval struct {
	UsageData []*DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData `json:"UsageData,omitempty" xml:"UsageData,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainPvDataResponseBodyPvDataInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvDataResponseBodyPvDataInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvDataResponseBodyPvDataInterval) SetUsageData(v []*DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData) *DescribeVsDomainPvDataResponseBodyPvDataInterval {
	s.UsageData = v
	return s
}

type DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData struct {
	// example:
	//
	// 2021-11-22T00:00:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// example:
	//
	// 100
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData) SetTimeStamp(v string) *DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData) SetValue(v string) *DescribeVsDomainPvDataResponseBodyPvDataIntervalUsageData {
	s.Value = &v
	return s
}

type DescribeVsDomainPvDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainPvDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainPvDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainPvDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainPvDataResponse) SetStatusCode(v int32) *DescribeVsDomainPvDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainPvDataResponse) SetBody(v *DescribeVsDomainPvDataResponseBody) *DescribeVsDomainPvDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainPvUvDataRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-11-24T00:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-10-14T23:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainPvUvDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvUvDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvUvDataRequest) SetDomainName(v string) *DescribeVsDomainPvUvDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainPvUvDataRequest) SetEndTime(v string) *DescribeVsDomainPvUvDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainPvUvDataRequest) SetOwnerId(v int64) *DescribeVsDomainPvUvDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainPvUvDataRequest) SetStartTime(v string) *DescribeVsDomainPvUvDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainPvUvDataResponseBody struct {
	// example:
	//
	// 3600
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-11-24T00:00:00Z
	EndTime       *string                                            `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PvUvDataInfos *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfos `json:"PvUvDataInfos,omitempty" xml:"PvUvDataInfos,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-12-12T10:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainPvUvDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvUvDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvUvDataResponseBody) SetDataInterval(v string) *DescribeVsDomainPvUvDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainPvUvDataResponseBody) SetDomainName(v string) *DescribeVsDomainPvUvDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainPvUvDataResponseBody) SetEndTime(v string) *DescribeVsDomainPvUvDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainPvUvDataResponseBody) SetPvUvDataInfos(v *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfos) *DescribeVsDomainPvUvDataResponseBody {
	s.PvUvDataInfos = v
	return s
}

func (s *DescribeVsDomainPvUvDataResponseBody) SetRequestId(v string) *DescribeVsDomainPvUvDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainPvUvDataResponseBody) SetStartTime(v string) *DescribeVsDomainPvUvDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeVsDomainPvUvDataResponseBodyPvUvDataInfos struct {
	PvUvDataInfo []*DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo `json:"PvUvDataInfo,omitempty" xml:"PvUvDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainPvUvDataResponseBodyPvUvDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvUvDataResponseBodyPvUvDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfos) SetPvUvDataInfo(v []*DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfos {
	s.PvUvDataInfo = v
	return s
}

type DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo struct {
	// example:
	//
	// 100
	PV *string `json:"PV,omitempty" xml:"PV,omitempty"`
	// example:
	//
	// 2021-10-14T23:00:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// example:
	//
	// 100
	UV *string `json:"UV,omitempty" xml:"UV,omitempty"`
}

func (s DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetPV(v string) *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.PV = &v
	return s
}

func (s *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetTimeStamp(v string) *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.TimeStamp = &v
	return s
}

func (s *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetUV(v string) *DescribeVsDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.UV = &v
	return s
}

type DescribeVsDomainPvUvDataResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainPvUvDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainPvUvDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainPvUvDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainPvUvDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainPvUvDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainPvUvDataResponse) SetStatusCode(v int32) *DescribeVsDomainPvUvDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainPvUvDataResponse) SetBody(v *DescribeVsDomainPvUvDataResponseBody) *DescribeVsDomainPvUvDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainRecordDataRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-11-19T15:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 2021-09-29T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainRecordDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRecordDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRecordDataRequest) SetDomainName(v string) *DescribeVsDomainRecordDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainRecordDataRequest) SetEndTime(v string) *DescribeVsDomainRecordDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainRecordDataRequest) SetOwnerId(v int64) *DescribeVsDomainRecordDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainRecordDataRequest) SetRegion(v string) *DescribeVsDomainRecordDataRequest {
	s.Region = &v
	return s
}

func (s *DescribeVsDomainRecordDataRequest) SetStartTime(v string) *DescribeVsDomainRecordDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainRecordDataResponseBody struct {
	RecordDataPerInterval *DescribeVsDomainRecordDataResponseBodyRecordDataPerInterval `json:"RecordDataPerInterval,omitempty" xml:"RecordDataPerInterval,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsDomainRecordDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRecordDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRecordDataResponseBody) SetRecordDataPerInterval(v *DescribeVsDomainRecordDataResponseBodyRecordDataPerInterval) *DescribeVsDomainRecordDataResponseBody {
	s.RecordDataPerInterval = v
	return s
}

func (s *DescribeVsDomainRecordDataResponseBody) SetRequestId(v string) *DescribeVsDomainRecordDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsDomainRecordDataResponseBodyRecordDataPerInterval struct {
	DataModule []*DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainRecordDataResponseBodyRecordDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRecordDataResponseBodyRecordDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRecordDataResponseBodyRecordDataPerInterval) SetDataModule(v []*DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule) *DescribeVsDomainRecordDataResponseBodyRecordDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule struct {
	// example:
	//
	// 100
	RecordValue *string `json:"RecordValue,omitempty" xml:"RecordValue,omitempty"`
	// example:
	//
	// 1
	StreamCountValue *string `json:"StreamCountValue,omitempty" xml:"StreamCountValue,omitempty"`
	// example:
	//
	// 2021-11-19T15:59:59Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule) SetRecordValue(v string) *DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule {
	s.RecordValue = &v
	return s
}

func (s *DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule) SetStreamCountValue(v string) *DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule {
	s.StreamCountValue = &v
	return s
}

func (s *DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVsDomainRecordDataResponseBodyRecordDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeVsDomainRecordDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainRecordDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainRecordDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRecordDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRecordDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainRecordDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainRecordDataResponse) SetStatusCode(v int32) *DescribeVsDomainRecordDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainRecordDataResponse) SetBody(v *DescribeVsDomainRecordDataResponseBody) *DescribeVsDomainRecordDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainRegionDataRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-31T15:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-10-30T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainRegionDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRegionDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRegionDataRequest) SetDomainName(v string) *DescribeVsDomainRegionDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainRegionDataRequest) SetEndTime(v string) *DescribeVsDomainRegionDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainRegionDataRequest) SetOwnerId(v int64) *DescribeVsDomainRegionDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainRegionDataRequest) SetStartTime(v string) *DescribeVsDomainRegionDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainRegionDataResponseBody struct {
	// example:
	//
	// 3600
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-31T15:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-10-30T16:00:00Z
	StartTime *string                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Value     *DescribeVsDomainRegionDataResponseBodyValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Struct"`
}

func (s DescribeVsDomainRegionDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRegionDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRegionDataResponseBody) SetDataInterval(v string) *DescribeVsDomainRegionDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBody) SetDomainName(v string) *DescribeVsDomainRegionDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBody) SetEndTime(v string) *DescribeVsDomainRegionDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBody) SetRequestId(v string) *DescribeVsDomainRegionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBody) SetStartTime(v string) *DescribeVsDomainRegionDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBody) SetValue(v *DescribeVsDomainRegionDataResponseBodyValue) *DescribeVsDomainRegionDataResponseBody {
	s.Value = v
	return s
}

type DescribeVsDomainRegionDataResponseBodyValue struct {
	RegionProportionData []*DescribeVsDomainRegionDataResponseBodyValueRegionProportionData `json:"RegionProportionData,omitempty" xml:"RegionProportionData,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainRegionDataResponseBodyValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRegionDataResponseBodyValue) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRegionDataResponseBodyValue) SetRegionProportionData(v []*DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) *DescribeVsDomainRegionDataResponseBodyValue {
	s.RegionProportionData = v
	return s
}

type DescribeVsDomainRegionDataResponseBodyValueRegionProportionData struct {
	// example:
	//
	// 2888253.7875
	AvgObjectSize *string `json:"AvgObjectSize,omitempty" xml:"AvgObjectSize,omitempty"`
	// example:
	//
	// 154.3345765545624
	AvgResponseRate *string `json:"AvgResponseRate,omitempty" xml:"AvgResponseRate,omitempty"`
	// example:
	//
	// 5183.666666666667
	AvgResponseTime *string `json:"AvgResponseTime,omitempty" xml:"AvgResponseTime,omitempty"`
	// example:
	//
	// 380.9614285714286
	Bps *string `json:"Bps,omitempty" xml:"Bps,omitempty"`
	// example:
	//
	// 0.003544181046236794
	BytesProportion *string `json:"BytesProportion,omitempty" xml:"BytesProportion,omitempty"`
	// example:
	//
	// 0.01155980271270037
	Proportion *string `json:"Proportion,omitempty" xml:"Proportion,omitempty"`
	// example:
	//
	// 0.001746031746031746
	Qps    *string `json:"Qps,omitempty" xml:"Qps,omitempty"`
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// chongqing
	RegionEname *string `json:"RegionEname,omitempty" xml:"RegionEname,omitempty"`
	// example:
	//
	// 0
	ReqErrRate *string `json:"ReqErrRate,omitempty" xml:"ReqErrRate,omitempty"`
	// example:
	//
	// 2400057
	TotalBytes *string `json:"TotalBytes,omitempty" xml:"TotalBytes,omitempty"`
	// example:
	//
	// 3
	TotalQuery *string `json:"TotalQuery,omitempty" xml:"TotalQuery,omitempty"`
}

func (s DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetAvgObjectSize(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.AvgObjectSize = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetAvgResponseRate(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.AvgResponseRate = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetAvgResponseTime(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.AvgResponseTime = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetBps(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.Bps = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetBytesProportion(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.BytesProportion = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetProportion(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.Proportion = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetQps(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.Qps = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetRegion(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.Region = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetRegionEname(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.RegionEname = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetReqErrRate(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.ReqErrRate = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetTotalBytes(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.TotalBytes = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData) SetTotalQuery(v string) *DescribeVsDomainRegionDataResponseBodyValueRegionProportionData {
	s.TotalQuery = &v
	return s
}

type DescribeVsDomainRegionDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainRegionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainRegionDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainRegionDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainRegionDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainRegionDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainRegionDataResponse) SetStatusCode(v int32) *DescribeVsDomainRegionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainRegionDataResponse) SetBody(v *DescribeVsDomainRegionDataResponseBody) *DescribeVsDomainRegionDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainReqBpsDataRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-16T07:00:46Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 300
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// telecom
	IspNameEn *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	// example:
	//
	// beijing
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2022-01-15T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainReqBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqBpsDataRequest) SetDomainName(v string) *DescribeVsDomainReqBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataRequest) SetEndTime(v string) *DescribeVsDomainReqBpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataRequest) SetInterval(v string) *DescribeVsDomainReqBpsDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataRequest) SetIspNameEn(v string) *DescribeVsDomainReqBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataRequest) SetLocationNameEn(v string) *DescribeVsDomainReqBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataRequest) SetOwnerId(v int64) *DescribeVsDomainReqBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataRequest) SetStartTime(v string) *DescribeVsDomainReqBpsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainReqBpsDataResponseBody struct {
	// example:
	//
	// 3600
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-09-24T03:30:46Z
	EndTime               *string                                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ReqBpsDataPerInterval *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerInterval `json:"ReqBpsDataPerInterval,omitempty" xml:"ReqBpsDataPerInterval,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-12-24T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainReqBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqBpsDataResponseBody) SetDataInterval(v string) *DescribeVsDomainReqBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponseBody) SetDomainName(v string) *DescribeVsDomainReqBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponseBody) SetEndTime(v string) *DescribeVsDomainReqBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponseBody) SetReqBpsDataPerInterval(v *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerInterval) *DescribeVsDomainReqBpsDataResponseBody {
	s.ReqBpsDataPerInterval = v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponseBody) SetRequestId(v string) *DescribeVsDomainReqBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponseBody) SetStartTime(v string) *DescribeVsDomainReqBpsDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerInterval struct {
	DataModule []*DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerInterval) SetDataModule(v []*DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule) *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule struct {
	// example:
	//
	// 1000
	ReqBpsValue *string `json:"ReqBpsValue,omitempty" xml:"ReqBpsValue,omitempty"`
	// example:
	//
	// 2021-12-24T16:00:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule) SetReqBpsValue(v string) *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule {
	s.ReqBpsValue = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVsDomainReqBpsDataResponseBodyReqBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeVsDomainReqBpsDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainReqBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainReqBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqBpsDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainReqBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponse) SetStatusCode(v int32) *DescribeVsDomainReqBpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainReqBpsDataResponse) SetBody(v *DescribeVsDomainReqBpsDataResponseBody) *DescribeVsDomainReqBpsDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainReqTrafficDataRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-13T10:00:41Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 3600
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// unicom
	IspNameEn *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	// example:
	//
	// shanghai
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-09-30T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainReqTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqTrafficDataRequest) SetDomainName(v string) *DescribeVsDomainReqTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataRequest) SetEndTime(v string) *DescribeVsDomainReqTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataRequest) SetInterval(v string) *DescribeVsDomainReqTrafficDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataRequest) SetIspNameEn(v string) *DescribeVsDomainReqTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataRequest) SetLocationNameEn(v string) *DescribeVsDomainReqTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataRequest) SetOwnerId(v int64) *DescribeVsDomainReqTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataRequest) SetStartTime(v string) *DescribeVsDomainReqTrafficDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainReqTrafficDataResponseBody struct {
	// example:
	//
	// 3600
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-09-22T03:40:41Z
	EndTime                   *string                                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ReqTrafficDataPerInterval *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerInterval `json:"ReqTrafficDataPerInterval,omitempty" xml:"ReqTrafficDataPerInterval,omitempty" type:"Struct"`
	// example:
	//
	// 9BEC5E85-C76B-56EF-A922-860EFDB8B64B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-09-21T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainReqTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqTrafficDataResponseBody) SetDataInterval(v string) *DescribeVsDomainReqTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponseBody) SetDomainName(v string) *DescribeVsDomainReqTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponseBody) SetEndTime(v string) *DescribeVsDomainReqTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponseBody) SetReqTrafficDataPerInterval(v *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerInterval) *DescribeVsDomainReqTrafficDataResponseBody {
	s.ReqTrafficDataPerInterval = v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponseBody) SetRequestId(v string) *DescribeVsDomainReqTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponseBody) SetStartTime(v string) *DescribeVsDomainReqTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerInterval struct {
	DataModule []*DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerInterval) SetDataModule(v []*DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule) *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule struct {
	// example:
	//
	// 10000
	ReqTrafficValue *string `json:"ReqTrafficValue,omitempty" xml:"ReqTrafficValue,omitempty"`
	// example:
	//
	// 2021-09-22T03:40:41Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule) SetReqTrafficValue(v string) *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule {
	s.ReqTrafficValue = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVsDomainReqTrafficDataResponseBodyReqTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeVsDomainReqTrafficDataResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainReqTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainReqTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainReqTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainReqTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainReqTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponse) SetStatusCode(v int32) *DescribeVsDomainReqTrafficDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainReqTrafficDataResponse) SetBody(v *DescribeVsDomainReqTrafficDataResponseBody) *DescribeVsDomainReqTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainSnapshotDataRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-10-18T16:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-10-05T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainSnapshotDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainSnapshotDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainSnapshotDataRequest) SetDomainName(v string) *DescribeVsDomainSnapshotDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainSnapshotDataRequest) SetEndTime(v string) *DescribeVsDomainSnapshotDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainSnapshotDataRequest) SetOwnerId(v int64) *DescribeVsDomainSnapshotDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainSnapshotDataRequest) SetStartTime(v string) *DescribeVsDomainSnapshotDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainSnapshotDataResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId               *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotDataPerInterval *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerInterval `json:"SnapshotDataPerInterval,omitempty" xml:"SnapshotDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeVsDomainSnapshotDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainSnapshotDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainSnapshotDataResponseBody) SetRequestId(v string) *DescribeVsDomainSnapshotDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainSnapshotDataResponseBody) SetSnapshotDataPerInterval(v *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerInterval) *DescribeVsDomainSnapshotDataResponseBody {
	s.SnapshotDataPerInterval = v
	return s
}

type DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerInterval struct {
	DataModule []*DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerInterval) SetDataModule(v []*DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule) *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule struct {
	// example:
	//
	// 1
	SnapshotValue *string `json:"SnapshotValue,omitempty" xml:"SnapshotValue,omitempty"`
	// example:
	//
	// 2015-12-10T20:00:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule) SetSnapshotValue(v string) *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule {
	s.SnapshotValue = &v
	return s
}

func (s *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVsDomainSnapshotDataResponseBodySnapshotDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeVsDomainSnapshotDataResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainSnapshotDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainSnapshotDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainSnapshotDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainSnapshotDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainSnapshotDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainSnapshotDataResponse) SetStatusCode(v int32) *DescribeVsDomainSnapshotDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainSnapshotDataResponse) SetBody(v *DescribeVsDomainSnapshotDataResponseBody) *DescribeVsDomainSnapshotDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainTrafficDataRequest struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-09-21T02:50:42Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 3600
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// telecom
	IspNameEn *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	// example:
	//
	// beijing
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-08-18T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainTrafficDataRequest) SetDomainName(v string) *DescribeVsDomainTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainTrafficDataRequest) SetEndTime(v string) *DescribeVsDomainTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainTrafficDataRequest) SetInterval(v string) *DescribeVsDomainTrafficDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeVsDomainTrafficDataRequest) SetIspNameEn(v string) *DescribeVsDomainTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeVsDomainTrafficDataRequest) SetLocationNameEn(v string) *DescribeVsDomainTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeVsDomainTrafficDataRequest) SetOwnerId(v int64) *DescribeVsDomainTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainTrafficDataRequest) SetStartTime(v string) *DescribeVsDomainTrafficDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainTrafficDataResponseBody struct {
	// example:
	//
	// 3600
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-09-20T07:10:42Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-10-25T16:00:00Z
	StartTime              *string                                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TrafficDataPerInterval *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerInterval `json:"TrafficDataPerInterval,omitempty" xml:"TrafficDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeVsDomainTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainTrafficDataResponseBody) SetDataInterval(v string) *DescribeVsDomainTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainTrafficDataResponseBody) SetDomainName(v string) *DescribeVsDomainTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainTrafficDataResponseBody) SetEndTime(v string) *DescribeVsDomainTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainTrafficDataResponseBody) SetRequestId(v string) *DescribeVsDomainTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainTrafficDataResponseBody) SetStartTime(v string) *DescribeVsDomainTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeVsDomainTrafficDataResponseBody) SetTrafficDataPerInterval(v *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerInterval) *DescribeVsDomainTrafficDataResponseBody {
	s.TrafficDataPerInterval = v
	return s
}

type DescribeVsDomainTrafficDataResponseBodyTrafficDataPerInterval struct {
	DataModule []*DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainTrafficDataResponseBodyTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainTrafficDataResponseBodyTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerInterval) SetDataModule(v []*DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule struct {
	// example:
	//
	// 2021-09-20T07:10:42Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// example:
	//
	// 100
	TrafficValue *string `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
}

func (s DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTrafficValue(v string) *DescribeVsDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TrafficValue = &v
	return s
}

type DescribeVsDomainTrafficDataResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainTrafficDataResponse) SetStatusCode(v int32) *DescribeVsDomainTrafficDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainTrafficDataResponse) SetBody(v *DescribeVsDomainTrafficDataResponseBody) *DescribeVsDomainTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeVsDomainUvDataRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2021-11-24T00:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-10-12T10:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsDomainUvDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainUvDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainUvDataRequest) SetDomainName(v string) *DescribeVsDomainUvDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainUvDataRequest) SetEndTime(v string) *DescribeVsDomainUvDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainUvDataRequest) SetOwnerId(v int64) *DescribeVsDomainUvDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsDomainUvDataRequest) SetStartTime(v string) *DescribeVsDomainUvDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsDomainUvDataResponseBody struct {
	// example:
	//
	// 3600
	DataInterval *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2015-11-30T00:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2015-11-29T00:00:00Z
	StartTime      *string                                           `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	UvDataInterval *DescribeVsDomainUvDataResponseBodyUvDataInterval `json:"UvDataInterval,omitempty" xml:"UvDataInterval,omitempty" type:"Struct"`
}

func (s DescribeVsDomainUvDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainUvDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainUvDataResponseBody) SetDataInterval(v string) *DescribeVsDomainUvDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeVsDomainUvDataResponseBody) SetDomainName(v string) *DescribeVsDomainUvDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeVsDomainUvDataResponseBody) SetEndTime(v string) *DescribeVsDomainUvDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsDomainUvDataResponseBody) SetRequestId(v string) *DescribeVsDomainUvDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsDomainUvDataResponseBody) SetStartTime(v string) *DescribeVsDomainUvDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeVsDomainUvDataResponseBody) SetUvDataInterval(v *DescribeVsDomainUvDataResponseBodyUvDataInterval) *DescribeVsDomainUvDataResponseBody {
	s.UvDataInterval = v
	return s
}

type DescribeVsDomainUvDataResponseBodyUvDataInterval struct {
	UsageData []*DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData `json:"UsageData,omitempty" xml:"UsageData,omitempty" type:"Repeated"`
}

func (s DescribeVsDomainUvDataResponseBodyUvDataInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainUvDataResponseBodyUvDataInterval) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainUvDataResponseBodyUvDataInterval) SetUsageData(v []*DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData) *DescribeVsDomainUvDataResponseBodyUvDataInterval {
	s.UsageData = v
	return s
}

type DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData struct {
	// example:
	//
	// 2015-11-29T15:00:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// example:
	//
	// 100
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData) SetTimeStamp(v string) *DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData) SetValue(v string) *DescribeVsDomainUvDataResponseBodyUvDataIntervalUsageData {
	s.Value = &v
	return s
}

type DescribeVsDomainUvDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsDomainUvDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsDomainUvDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsDomainUvDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsDomainUvDataResponse) SetHeaders(v map[string]*string) *DescribeVsDomainUvDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsDomainUvDataResponse) SetStatusCode(v int32) *DescribeVsDomainUvDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsDomainUvDataResponse) SetBody(v *DescribeVsDomainUvDataResponseBody) *DescribeVsDomainUvDataResponse {
	s.Body = v
	return s
}

type DescribeVsPullStreamInfoConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsPullStreamInfoConfigRequest) SetDomainName(v string) *DescribeVsPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsPullStreamInfoConfigRequest) SetOwnerId(v int64) *DescribeVsPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsPullStreamInfoConfigResponseBody struct {
	LiveAppRecordList *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordList `json:"LiveAppRecordList,omitempty" xml:"LiveAppRecordList,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsPullStreamInfoConfigResponseBody) SetLiveAppRecordList(v *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordList) *DescribeVsPullStreamInfoConfigResponseBody {
	s.LiveAppRecordList = v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponseBody) SetRequestId(v string) *DescribeVsPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordList struct {
	LiveAppRecord []*DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord `json:"LiveAppRecord,omitempty" xml:"LiveAppRecord,omitempty" type:"Repeated"`
}

func (s DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordList) GoString() string {
	return s.String()
}

func (s *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordList) SetLiveAppRecord(v []*DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordList {
	s.LiveAppRecord = v
	return s
}

type DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord struct {
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2016-05-15T07:30:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// http://test
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	// example:
	//
	// 2016-05-15T01:30:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) GoString() string {
	return s.String()
}

func (s *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) SetAppName(v string) *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.AppName = &v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) SetDomainName(v string) *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.DomainName = &v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) SetEndTime(v string) *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.EndTime = &v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) SetSourceUrl(v string) *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.SourceUrl = &v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStartTime(v string) *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StartTime = &v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStreamName(v string) *DescribeVsPullStreamInfoConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StreamName = &v
	return s
}

type DescribeVsPullStreamInfoConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *DescribeVsPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponse) SetStatusCode(v int32) *DescribeVsPullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsPullStreamInfoConfigResponse) SetBody(v *DescribeVsPullStreamInfoConfigResponseBody) *DescribeVsPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type DescribeVsStreamsNotifyUrlConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsNotifyUrlConfigRequest) SetDomainName(v string) *DescribeVsStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *DescribeVsStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsStreamsNotifyUrlConfigResponseBody struct {
	LiveStreamsNotifyConfig *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig `json:"LiveStreamsNotifyConfig,omitempty" xml:"LiveStreamsNotifyConfig,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsNotifyUrlConfigResponseBody) SetLiveStreamsNotifyConfig(v *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) *DescribeVsStreamsNotifyUrlConfigResponseBody {
	s.LiveStreamsNotifyConfig = v
	return s
}

func (s *DescribeVsStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *DescribeVsStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig struct {
	AuthKey  *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl  *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
}

func (s DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetAuthKey(v string) *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.AuthKey = &v
	return s
}

func (s *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetAuthType(v string) *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.AuthType = &v
	return s
}

func (s *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetDomainName(v string) *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetNotifyUrl(v string) *DescribeVsStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.NotifyUrl = &v
	return s
}

type DescribeVsStreamsNotifyUrlConfigResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *DescribeVsStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsStreamsNotifyUrlConfigResponse) SetStatusCode(v int32) *DescribeVsStreamsNotifyUrlConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsStreamsNotifyUrlConfigResponse) SetBody(v *DescribeVsStreamsNotifyUrlConfigResponseBody) *DescribeVsStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type DescribeVsStreamsOnlineListRequest struct {
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2016-06-30T19:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// publish_time_asc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// fuzzy
	QueryType *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	// example:
	//
	// 2016-06-29T19:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	// example:
	//
	// all
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
}

func (s DescribeVsStreamsOnlineListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsOnlineListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsOnlineListRequest) SetAppName(v string) *DescribeVsStreamsOnlineListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetDomainName(v string) *DescribeVsStreamsOnlineListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetEndTime(v string) *DescribeVsStreamsOnlineListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetOrderBy(v string) *DescribeVsStreamsOnlineListRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetOwnerId(v int64) *DescribeVsStreamsOnlineListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetPageNum(v int32) *DescribeVsStreamsOnlineListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetPageSize(v int32) *DescribeVsStreamsOnlineListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetQueryType(v string) *DescribeVsStreamsOnlineListRequest {
	s.QueryType = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetStartTime(v string) *DescribeVsStreamsOnlineListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetStreamName(v string) *DescribeVsStreamsOnlineListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeVsStreamsOnlineListRequest) SetStreamType(v string) *DescribeVsStreamsOnlineListRequest {
	s.StreamType = &v
	return s
}

type DescribeVsStreamsOnlineListResponseBody struct {
	OnlineInfo *DescribeVsStreamsOnlineListResponseBodyOnlineInfo `json:"OnlineInfo,omitempty" xml:"OnlineInfo,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// B31FC4AD-3592-573E-8063-878F722B322A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 10
	TotalNum *int32 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	// example:
	//
	// 1
	TotalPage *int32 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeVsStreamsOnlineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsOnlineListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsOnlineListResponseBody) SetOnlineInfo(v *DescribeVsStreamsOnlineListResponseBodyOnlineInfo) *DescribeVsStreamsOnlineListResponseBody {
	s.OnlineInfo = v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBody) SetPageNum(v int32) *DescribeVsStreamsOnlineListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBody) SetPageSize(v int32) *DescribeVsStreamsOnlineListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBody) SetRequestId(v string) *DescribeVsStreamsOnlineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBody) SetTotalNum(v int32) *DescribeVsStreamsOnlineListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBody) SetTotalPage(v int32) *DescribeVsStreamsOnlineListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeVsStreamsOnlineListResponseBodyOnlineInfo struct {
	LiveStreamOnlineInfo []*DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo `json:"LiveStreamOnlineInfo,omitempty" xml:"LiveStreamOnlineInfo,omitempty" type:"Repeated"`
}

func (s DescribeVsStreamsOnlineListResponseBodyOnlineInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsOnlineListResponseBodyOnlineInfo) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfo) SetLiveStreamOnlineInfo(v []*DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) *DescribeVsStreamsOnlineListResponseBodyOnlineInfo {
	s.LiveStreamOnlineInfo = v
	return s
}

type DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo struct {
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// push.example.com
	PublishDomain *string `json:"PublishDomain,omitempty" xml:"PublishDomain,omitempty"`
	// example:
	//
	// 2015-12-02T06:58:04Z
	PublishTime *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
	// example:
	//
	// edge
	PublishType *string `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	// example:
	//
	// rtmp://example.com/xchen
	PublishUrl *string `json:"PublishUrl,omitempty" xml:"PublishUrl,omitempty"`
	// example:
	//
	// testxchen_small
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	// example:
	//
	// 123
	TranscodeId *string `json:"TranscodeId,omitempty" xml:"TranscodeId,omitempty"`
	// example:
	//
	// no
	Transcoded *string `json:"Transcoded,omitempty" xml:"Transcoded,omitempty"`
}

func (s DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetAppName(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.AppName = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetDomainName(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishDomain(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishDomain = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishTime(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishTime = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishType(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishType = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishUrl(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishUrl = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetStreamName(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetTranscodeId(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.TranscodeId = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetTranscoded(v string) *DescribeVsStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.Transcoded = &v
	return s
}

type DescribeVsStreamsOnlineListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsStreamsOnlineListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsStreamsOnlineListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsOnlineListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsOnlineListResponse) SetHeaders(v map[string]*string) *DescribeVsStreamsOnlineListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsStreamsOnlineListResponse) SetStatusCode(v int32) *DescribeVsStreamsOnlineListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsStreamsOnlineListResponse) SetBody(v *DescribeVsStreamsOnlineListResponseBody) *DescribeVsStreamsOnlineListResponse {
	s.Body = v
	return s
}

type DescribeVsStreamsPublishListRequest struct {
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2016-06-30T19:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// publish_time_asc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 3000
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// fuzzy
	QueryType *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2016-06-29T19:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	// example:
	//
	// all
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
}

func (s DescribeVsStreamsPublishListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsPublishListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsPublishListRequest) SetAppName(v string) *DescribeVsStreamsPublishListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetDomainName(v string) *DescribeVsStreamsPublishListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetEndTime(v string) *DescribeVsStreamsPublishListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetOrderBy(v string) *DescribeVsStreamsPublishListRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetOwnerId(v int64) *DescribeVsStreamsPublishListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetPageNumber(v int32) *DescribeVsStreamsPublishListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetPageSize(v int32) *DescribeVsStreamsPublishListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetQueryType(v string) *DescribeVsStreamsPublishListRequest {
	s.QueryType = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetStartTime(v string) *DescribeVsStreamsPublishListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetStreamName(v string) *DescribeVsStreamsPublishListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeVsStreamsPublishListRequest) SetStreamType(v string) *DescribeVsStreamsPublishListRequest {
	s.StreamType = &v
	return s
}

type DescribeVsStreamsPublishListResponseBody struct {
	// example:
	//
	// 1
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 3000
	PageSize    *int32                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PublishInfo *DescribeVsStreamsPublishListResponseBodyPublishInfo `json:"PublishInfo,omitempty" xml:"PublishInfo,omitempty" type:"Struct"`
	// example:
	//
	// 119F7639-4646-51A4-B6C1-300D391C0104
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	TotalNum *int32 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	// example:
	//
	// 1
	TotalPage *int32 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeVsStreamsPublishListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsPublishListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsPublishListResponseBody) SetPageNum(v int32) *DescribeVsStreamsPublishListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBody) SetPageSize(v int32) *DescribeVsStreamsPublishListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBody) SetPublishInfo(v *DescribeVsStreamsPublishListResponseBodyPublishInfo) *DescribeVsStreamsPublishListResponseBody {
	s.PublishInfo = v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBody) SetRequestId(v string) *DescribeVsStreamsPublishListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBody) SetTotalNum(v int32) *DescribeVsStreamsPublishListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBody) SetTotalPage(v int32) *DescribeVsStreamsPublishListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeVsStreamsPublishListResponseBodyPublishInfo struct {
	LiveStreamPublishInfo []*DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo `json:"LiveStreamPublishInfo,omitempty" xml:"LiveStreamPublishInfo,omitempty" type:"Repeated"`
}

func (s DescribeVsStreamsPublishListResponseBodyPublishInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsPublishListResponseBodyPublishInfo) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfo) SetLiveStreamPublishInfo(v []*DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) *DescribeVsStreamsPublishListResponseBodyPublishInfo {
	s.LiveStreamPublishInfo = v
	return s
}

type DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo struct {
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// 192.168.0.1
	ClientAddr *string `json:"ClientAddr,omitempty" xml:"ClientAddr,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 192.168.0.1
	EdgeNodeAddr *string `json:"EdgeNodeAddr,omitempty" xml:"EdgeNodeAddr,omitempty"`
	// example:
	//
	// example.aliyundoc.com
	PublishDomain *string `json:"PublishDomain,omitempty" xml:"PublishDomain,omitempty"`
	// example:
	//
	// 2016-06-29T19:00:00Z
	PublishTime *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
	// example:
	//
	// center
	PublishType *string `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	// example:
	//
	// https://example.aliyundoc.com/xxxApp/3402000****320000001.m3u8
	PublishUrl *string `json:"PublishUrl,omitempty" xml:"PublishUrl,omitempty"`
	// example:
	//
	// 2016-06-29T19:00:00Z
	StopTime *string `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	// example:
	//
	// https://example.aliyundoc.com/xxxApp/3402000****320000001.m3u8
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	// example:
	//
	// 3888920****8138204-cn-qingdao
	TranscodeId *string `json:"TranscodeId,omitempty" xml:"TranscodeId,omitempty"`
	// example:
	//
	// yes
	Transcoded *string `json:"Transcoded,omitempty" xml:"Transcoded,omitempty"`
}

func (s DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetAppName(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.AppName = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetClientAddr(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.ClientAddr = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetDomainName(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetEdgeNodeAddr(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.EdgeNodeAddr = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishDomain(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishDomain = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishTime(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishTime = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishType(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishType = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishUrl(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishUrl = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStopTime(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StopTime = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStreamName(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStreamUrl(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StreamUrl = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetTranscodeId(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.TranscodeId = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetTranscoded(v string) *DescribeVsStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.Transcoded = &v
	return s
}

type DescribeVsStreamsPublishListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsStreamsPublishListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsStreamsPublishListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsStreamsPublishListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsStreamsPublishListResponse) SetHeaders(v map[string]*string) *DescribeVsStreamsPublishListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsStreamsPublishListResponse) SetStatusCode(v int32) *DescribeVsStreamsPublishListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsStreamsPublishListResponse) SetBody(v *DescribeVsStreamsPublishListResponseBody) *DescribeVsStreamsPublishListResponse {
	s.Body = v
	return s
}

type DescribeVsTopDomainsByFlowRequest struct {
	// example:
	//
	// 2018-12-10T18:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 3
	Limit   *int64 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-12-12T10:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsTopDomainsByFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsTopDomainsByFlowRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsTopDomainsByFlowRequest) SetEndTime(v string) *DescribeVsTopDomainsByFlowRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowRequest) SetLimit(v int64) *DescribeVsTopDomainsByFlowRequest {
	s.Limit = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowRequest) SetOwnerId(v int64) *DescribeVsTopDomainsByFlowRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowRequest) SetStartTime(v string) *DescribeVsTopDomainsByFlowRequest {
	s.StartTime = &v
	return s
}

type DescribeVsTopDomainsByFlowResponseBody struct {
	// example:
	//
	// 20
	DomainCount *int64 `json:"DomainCount,omitempty" xml:"DomainCount,omitempty"`
	// example:
	//
	// 12
	DomainOnlineCount *int64 `json:"DomainOnlineCount,omitempty" xml:"DomainOnlineCount,omitempty"`
	// example:
	//
	// 2018-12-10T18:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2021-12-10T10:00:00Z
	StartTime  *string                                           `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TopDomains *DescribeVsTopDomainsByFlowResponseBodyTopDomains `json:"TopDomains,omitempty" xml:"TopDomains,omitempty" type:"Struct"`
}

func (s DescribeVsTopDomainsByFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsTopDomainsByFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsTopDomainsByFlowResponseBody) SetDomainCount(v int64) *DescribeVsTopDomainsByFlowResponseBody {
	s.DomainCount = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBody) SetDomainOnlineCount(v int64) *DescribeVsTopDomainsByFlowResponseBody {
	s.DomainOnlineCount = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBody) SetEndTime(v string) *DescribeVsTopDomainsByFlowResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBody) SetRequestId(v string) *DescribeVsTopDomainsByFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBody) SetStartTime(v string) *DescribeVsTopDomainsByFlowResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBody) SetTopDomains(v *DescribeVsTopDomainsByFlowResponseBodyTopDomains) *DescribeVsTopDomainsByFlowResponseBody {
	s.TopDomains = v
	return s
}

type DescribeVsTopDomainsByFlowResponseBodyTopDomains struct {
	TopDomain []*DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain `json:"TopDomain,omitempty" xml:"TopDomain,omitempty" type:"Repeated"`
}

func (s DescribeVsTopDomainsByFlowResponseBodyTopDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsTopDomainsByFlowResponseBodyTopDomains) GoString() string {
	return s.String()
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomains) SetTopDomain(v []*DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) *DescribeVsTopDomainsByFlowResponseBodyTopDomains {
	s.TopDomain = v
	return s
}

type DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain struct {
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 100
	MaxBps *int64 `json:"MaxBps,omitempty" xml:"MaxBps,omitempty"`
	// example:
	//
	// 1457111400
	MaxBpsTime *string `json:"MaxBpsTime,omitempty" xml:"MaxBpsTime,omitempty"`
	// example:
	//
	// 1
	Rank *int64 `json:"Rank,omitempty" xml:"Rank,omitempty"`
	// example:
	//
	// 100
	TotalAccess *int64 `json:"TotalAccess,omitempty" xml:"TotalAccess,omitempty"`
	// example:
	//
	// 100
	TotalTraffic *string `json:"TotalTraffic,omitempty" xml:"TotalTraffic,omitempty"`
	// example:
	//
	// 30.64191989360235
	TrafficPercent *string `json:"TrafficPercent,omitempty" xml:"TrafficPercent,omitempty"`
}

func (s DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) GoString() string {
	return s.String()
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetDomainName(v string) *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.DomainName = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetMaxBps(v int64) *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.MaxBps = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetMaxBpsTime(v string) *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.MaxBpsTime = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetRank(v int64) *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.Rank = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTotalAccess(v int64) *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TotalAccess = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTotalTraffic(v string) *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TotalTraffic = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTrafficPercent(v string) *DescribeVsTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TrafficPercent = &v
	return s
}

type DescribeVsTopDomainsByFlowResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsTopDomainsByFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsTopDomainsByFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsTopDomainsByFlowResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsTopDomainsByFlowResponse) SetHeaders(v map[string]*string) *DescribeVsTopDomainsByFlowResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponse) SetStatusCode(v int32) *DescribeVsTopDomainsByFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsTopDomainsByFlowResponse) SetBody(v *DescribeVsTopDomainsByFlowResponseBody) *DescribeVsTopDomainsByFlowResponse {
	s.Body = v
	return s
}

type DescribeVsUpPeakPublishStreamDataRequest struct {
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// on
	DomainSwitch *string `json:"DomainSwitch,omitempty" xml:"DomainSwitch,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2017-12-10T21:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2017-12-10T20:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeVsUpPeakPublishStreamDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUpPeakPublishStreamDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsUpPeakPublishStreamDataRequest) SetDomainName(v string) *DescribeVsUpPeakPublishStreamDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataRequest) SetDomainSwitch(v string) *DescribeVsUpPeakPublishStreamDataRequest {
	s.DomainSwitch = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataRequest) SetEndTime(v string) *DescribeVsUpPeakPublishStreamDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataRequest) SetOwnerId(v int64) *DescribeVsUpPeakPublishStreamDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataRequest) SetStartTime(v string) *DescribeVsUpPeakPublishStreamDataRequest {
	s.StartTime = &v
	return s
}

type DescribeVsUpPeakPublishStreamDataResponseBody struct {
	DescribeVsUpPeakPublishStreamDatas *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatas `json:"DescribeVsUpPeakPublishStreamDatas,omitempty" xml:"DescribeVsUpPeakPublishStreamDatas,omitempty" type:"Struct"`
	// example:
	//
	// 27A3C548-A699-48F9-97CD-F35D81075AF3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsUpPeakPublishStreamDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUpPeakPublishStreamDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBody) SetDescribeVsUpPeakPublishStreamDatas(v *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatas) *DescribeVsUpPeakPublishStreamDataResponseBody {
	s.DescribeVsUpPeakPublishStreamDatas = v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBody) SetRequestId(v string) *DescribeVsUpPeakPublishStreamDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatas struct {
	DescribeVsUpPeakPublishStreamData []*DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData `json:"DescribeVsUpPeakPublishStreamData,omitempty" xml:"DescribeVsUpPeakPublishStreamData,omitempty" type:"Repeated"`
}

func (s DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatas) GoString() string {
	return s.String()
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatas) SetDescribeVsUpPeakPublishStreamData(v []*DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatas {
	s.DescribeVsUpPeakPublishStreamData = v
	return s
}

type DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData struct {
	BandWidth *string `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	// example:
	//
	// 1522252320000
	PeakTime *string `json:"PeakTime,omitempty" xml:"PeakTime,omitempty"`
	// example:
	//
	// 31
	PublishStreamNum *int32 `json:"PublishStreamNum,omitempty" xml:"PublishStreamNum,omitempty"`
	// example:
	//
	// 1522166400000
	QueryTime *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	// example:
	//
	// example.com
	StatName *string `json:"StatName,omitempty" xml:"StatName,omitempty"`
}

func (s DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) GoString() string {
	return s.String()
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) SetBandWidth(v string) *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData {
	s.BandWidth = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) SetPeakTime(v string) *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData {
	s.PeakTime = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) SetPublishStreamNum(v int32) *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData {
	s.PublishStreamNum = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) SetQueryTime(v string) *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData {
	s.QueryTime = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData) SetStatName(v string) *DescribeVsUpPeakPublishStreamDataResponseBodyDescribeVsUpPeakPublishStreamDatasDescribeVsUpPeakPublishStreamData {
	s.StatName = &v
	return s
}

type DescribeVsUpPeakPublishStreamDataResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsUpPeakPublishStreamDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsUpPeakPublishStreamDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUpPeakPublishStreamDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsUpPeakPublishStreamDataResponse) SetHeaders(v map[string]*string) *DescribeVsUpPeakPublishStreamDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataResponse) SetStatusCode(v int32) *DescribeVsUpPeakPublishStreamDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsUpPeakPublishStreamDataResponse) SetBody(v *DescribeVsUpPeakPublishStreamDataResponseBody) *DescribeVsUpPeakPublishStreamDataResponse {
	s.Body = v
	return s
}

type DescribeVsUserResourcePackageRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeVsUserResourcePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUserResourcePackageRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsUserResourcePackageRequest) SetOwnerId(v int64) *DescribeVsUserResourcePackageRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVsUserResourcePackageRequest) SetSecurityToken(v string) *DescribeVsUserResourcePackageRequest {
	s.SecurityToken = &v
	return s
}

type DescribeVsUserResourcePackageResponseBody struct {
	RequestId            *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourcePackageInfos *DescribeVsUserResourcePackageResponseBodyResourcePackageInfos `json:"ResourcePackageInfos,omitempty" xml:"ResourcePackageInfos,omitempty" type:"Struct"`
}

func (s DescribeVsUserResourcePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUserResourcePackageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsUserResourcePackageResponseBody) SetRequestId(v string) *DescribeVsUserResourcePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVsUserResourcePackageResponseBody) SetResourcePackageInfos(v *DescribeVsUserResourcePackageResponseBodyResourcePackageInfos) *DescribeVsUserResourcePackageResponseBody {
	s.ResourcePackageInfos = v
	return s
}

type DescribeVsUserResourcePackageResponseBodyResourcePackageInfos struct {
	ResourcePackageInfo []*DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo `json:"ResourcePackageInfo,omitempty" xml:"ResourcePackageInfo,omitempty" type:"Repeated"`
}

func (s DescribeVsUserResourcePackageResponseBodyResourcePackageInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUserResourcePackageResponseBodyResourcePackageInfos) GoString() string {
	return s.String()
}

func (s *DescribeVsUserResourcePackageResponseBodyResourcePackageInfos) SetResourcePackageInfo(v []*DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) *DescribeVsUserResourcePackageResponseBodyResourcePackageInfos {
	s.ResourcePackageInfo = v
	return s
}

type DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo struct {
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CurrCapacity  *string `json:"CurrCapacity,omitempty" xml:"CurrCapacity,omitempty"`
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	InitCapacity  *string `json:"InitCapacity,omitempty" xml:"InitCapacity,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) GoString() string {
	return s.String()
}

func (s *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetCommodityCode(v string) *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.CommodityCode = &v
	return s
}

func (s *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetCurrCapacity(v string) *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.CurrCapacity = &v
	return s
}

func (s *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetDisplayName(v string) *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.DisplayName = &v
	return s
}

func (s *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetInitCapacity(v string) *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.InitCapacity = &v
	return s
}

func (s *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetInstanceId(v string) *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.InstanceId = &v
	return s
}

func (s *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetStatus(v string) *DescribeVsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.Status = &v
	return s
}

type DescribeVsUserResourcePackageResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsUserResourcePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsUserResourcePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsUserResourcePackageResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsUserResourcePackageResponse) SetHeaders(v map[string]*string) *DescribeVsUserResourcePackageResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsUserResourcePackageResponse) SetStatusCode(v int32) *DescribeVsUserResourcePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsUserResourcePackageResponse) SetBody(v *DescribeVsUserResourcePackageResponseBody) *DescribeVsUserResourcePackageResponse {
	s.Body = v
	return s
}

type DescribeVsVerifyContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeVsVerifyContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsVerifyContentRequest) GoString() string {
	return s.String()
}

func (s *DescribeVsVerifyContentRequest) SetDomainName(v string) *DescribeVsVerifyContentRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeVsVerifyContentRequest) SetOwnerId(v int64) *DescribeVsVerifyContentRequest {
	s.OwnerId = &v
	return s
}

type DescribeVsVerifyContentResponseBody struct {
	// example:
	//
	// verify_dffeb6610035dcb77b413a59c3*****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVsVerifyContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsVerifyContentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVsVerifyContentResponseBody) SetContent(v string) *DescribeVsVerifyContentResponseBody {
	s.Content = &v
	return s
}

func (s *DescribeVsVerifyContentResponseBody) SetRequestId(v string) *DescribeVsVerifyContentResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVsVerifyContentResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVsVerifyContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVsVerifyContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVsVerifyContentResponse) GoString() string {
	return s.String()
}

func (s *DescribeVsVerifyContentResponse) SetHeaders(v map[string]*string) *DescribeVsVerifyContentResponse {
	s.Headers = v
	return s
}

func (s *DescribeVsVerifyContentResponse) SetStatusCode(v int32) *DescribeVsVerifyContentResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVsVerifyContentResponse) SetBody(v *DescribeVsVerifyContentResponseBody) *DescribeVsVerifyContentResponse {
	s.Body = v
	return s
}

type ForbidVsStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxApp
	AppName             *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ControlStreamAction *string `json:"ControlStreamAction,omitempty" xml:"ControlStreamAction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// publisher
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	// example:
	//
	// yes
	Oneshot *string `json:"Oneshot,omitempty" xml:"Oneshot,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2015-12-01T17:37:00Z
	ResumeTime *string `json:"ResumeTime,omitempty" xml:"ResumeTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s ForbidVsStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ForbidVsStreamRequest) GoString() string {
	return s.String()
}

func (s *ForbidVsStreamRequest) SetAppName(v string) *ForbidVsStreamRequest {
	s.AppName = &v
	return s
}

func (s *ForbidVsStreamRequest) SetControlStreamAction(v string) *ForbidVsStreamRequest {
	s.ControlStreamAction = &v
	return s
}

func (s *ForbidVsStreamRequest) SetDomainName(v string) *ForbidVsStreamRequest {
	s.DomainName = &v
	return s
}

func (s *ForbidVsStreamRequest) SetLiveStreamType(v string) *ForbidVsStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *ForbidVsStreamRequest) SetOneshot(v string) *ForbidVsStreamRequest {
	s.Oneshot = &v
	return s
}

func (s *ForbidVsStreamRequest) SetOwnerId(v int64) *ForbidVsStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ForbidVsStreamRequest) SetResumeTime(v string) *ForbidVsStreamRequest {
	s.ResumeTime = &v
	return s
}

func (s *ForbidVsStreamRequest) SetStreamName(v string) *ForbidVsStreamRequest {
	s.StreamName = &v
	return s
}

type ForbidVsStreamResponseBody struct {
	// example:
	//
	// 119F7639-4646-51A4-B6C1-300D391C0104
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ForbidVsStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ForbidVsStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ForbidVsStreamResponseBody) SetRequestId(v string) *ForbidVsStreamResponseBody {
	s.RequestId = &v
	return s
}

type ForbidVsStreamResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ForbidVsStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ForbidVsStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ForbidVsStreamResponse) GoString() string {
	return s.String()
}

func (s *ForbidVsStreamResponse) SetHeaders(v map[string]*string) *ForbidVsStreamResponse {
	s.Headers = v
	return s
}

func (s *ForbidVsStreamResponse) SetStatusCode(v int32) *ForbidVsStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *ForbidVsStreamResponse) SetBody(v *ForbidVsStreamResponseBody) *ForbidVsStreamResponse {
	s.Body = v
	return s
}

type GetRenderingInstanceStreamingInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s GetRenderingInstanceStreamingInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRenderingInstanceStreamingInfoRequest) GoString() string {
	return s.String()
}

func (s *GetRenderingInstanceStreamingInfoRequest) SetRenderingInstanceId(v string) *GetRenderingInstanceStreamingInfoRequest {
	s.RenderingInstanceId = &v
	return s
}

type GetRenderingInstanceStreamingInfoResponseBody struct {
	// example:
	//
	// 792fy125-594c-4dde-ab35-9ff8hrf0a86f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// example:
	//
	// 10.178.208.22
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// example:
	//
	// 10.18.20.2
	Hostname *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// example:
	//
	// 10003
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetRenderingInstanceStreamingInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRenderingInstanceStreamingInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetRenderingInstanceStreamingInfoResponseBody) SetFlowId(v string) *GetRenderingInstanceStreamingInfoResponseBody {
	s.FlowId = &v
	return s
}

func (s *GetRenderingInstanceStreamingInfoResponseBody) SetGateway(v string) *GetRenderingInstanceStreamingInfoResponseBody {
	s.Gateway = &v
	return s
}

func (s *GetRenderingInstanceStreamingInfoResponseBody) SetHostname(v string) *GetRenderingInstanceStreamingInfoResponseBody {
	s.Hostname = &v
	return s
}

func (s *GetRenderingInstanceStreamingInfoResponseBody) SetPort(v string) *GetRenderingInstanceStreamingInfoResponseBody {
	s.Port = &v
	return s
}

func (s *GetRenderingInstanceStreamingInfoResponseBody) SetRenderingInstanceId(v string) *GetRenderingInstanceStreamingInfoResponseBody {
	s.RenderingInstanceId = &v
	return s
}

func (s *GetRenderingInstanceStreamingInfoResponseBody) SetRequestId(v string) *GetRenderingInstanceStreamingInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetRenderingInstanceStreamingInfoResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRenderingInstanceStreamingInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRenderingInstanceStreamingInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRenderingInstanceStreamingInfoResponse) GoString() string {
	return s.String()
}

func (s *GetRenderingInstanceStreamingInfoResponse) SetHeaders(v map[string]*string) *GetRenderingInstanceStreamingInfoResponse {
	s.Headers = v
	return s
}

func (s *GetRenderingInstanceStreamingInfoResponse) SetStatusCode(v int32) *GetRenderingInstanceStreamingInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRenderingInstanceStreamingInfoResponse) SetBody(v *GetRenderingInstanceStreamingInfoResponseBody) *GetRenderingInstanceStreamingInfoResponse {
	s.Body = v
	return s
}

type GotoPresetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	PresetId *string `json:"PresetId,omitempty" xml:"PresetId,omitempty"`
}

func (s GotoPresetRequest) String() string {
	return tea.Prettify(s)
}

func (s GotoPresetRequest) GoString() string {
	return s.String()
}

func (s *GotoPresetRequest) SetId(v string) *GotoPresetRequest {
	s.Id = &v
	return s
}

func (s *GotoPresetRequest) SetOwnerId(v int64) *GotoPresetRequest {
	s.OwnerId = &v
	return s
}

func (s *GotoPresetRequest) SetPresetId(v string) *GotoPresetRequest {
	s.PresetId = &v
	return s
}

type GotoPresetResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 30295DF1-1DC7-48BA-BE5A-D58E61EB2375
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GotoPresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GotoPresetResponseBody) GoString() string {
	return s.String()
}

func (s *GotoPresetResponseBody) SetId(v string) *GotoPresetResponseBody {
	s.Id = &v
	return s
}

func (s *GotoPresetResponseBody) SetRequestId(v string) *GotoPresetResponseBody {
	s.RequestId = &v
	return s
}

type GotoPresetResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GotoPresetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GotoPresetResponse) String() string {
	return tea.Prettify(s)
}

func (s GotoPresetResponse) GoString() string {
	return s.String()
}

func (s *GotoPresetResponse) SetHeaders(v map[string]*string) *GotoPresetResponse {
	s.Headers = v
	return s
}

func (s *GotoPresetResponse) SetStatusCode(v int32) *GotoPresetResponse {
	s.StatusCode = &v
	return s
}

func (s *GotoPresetResponse) SetBody(v *GotoPresetResponseBody) *GotoPresetResponse {
	s.Body = v
	return s
}

type InstallCloudAppRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s InstallCloudAppRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAppRequest) GoString() string {
	return s.String()
}

func (s *InstallCloudAppRequest) SetAppId(v string) *InstallCloudAppRequest {
	s.AppId = &v
	return s
}

func (s *InstallCloudAppRequest) SetRenderingInstanceId(v string) *InstallCloudAppRequest {
	s.RenderingInstanceId = &v
	return s
}

type InstallCloudAppResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallCloudAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAppResponseBody) GoString() string {
	return s.String()
}

func (s *InstallCloudAppResponseBody) SetRequestId(v string) *InstallCloudAppResponseBody {
	s.RequestId = &v
	return s
}

type InstallCloudAppResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallCloudAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallCloudAppResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAppResponse) GoString() string {
	return s.String()
}

func (s *InstallCloudAppResponse) SetHeaders(v map[string]*string) *InstallCloudAppResponse {
	s.Headers = v
	return s
}

func (s *InstallCloudAppResponse) SetStatusCode(v int32) *InstallCloudAppResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallCloudAppResponse) SetBody(v *InstallCloudAppResponseBody) *InstallCloudAppResponse {
	s.Body = v
	return s
}

type ListCloudAppInstallationsRequest struct {
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// com.aaa.bbb
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// 1.0
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s ListCloudAppInstallationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppInstallationsRequest) GoString() string {
	return s.String()
}

func (s *ListCloudAppInstallationsRequest) SetAppId(v string) *ListCloudAppInstallationsRequest {
	s.AppId = &v
	return s
}

func (s *ListCloudAppInstallationsRequest) SetAppName(v string) *ListCloudAppInstallationsRequest {
	s.AppName = &v
	return s
}

func (s *ListCloudAppInstallationsRequest) SetAppVersion(v string) *ListCloudAppInstallationsRequest {
	s.AppVersion = &v
	return s
}

func (s *ListCloudAppInstallationsRequest) SetPageNumber(v int64) *ListCloudAppInstallationsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCloudAppInstallationsRequest) SetPageSize(v int64) *ListCloudAppInstallationsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCloudAppInstallationsRequest) SetRenderingInstanceId(v string) *ListCloudAppInstallationsRequest {
	s.RenderingInstanceId = &v
	return s
}

type ListCloudAppInstallationsResponseBody struct {
	InstallationInfos []*ListCloudAppInstallationsResponseBodyInstallationInfos `json:"InstallationInfos,omitempty" xml:"InstallationInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCloudAppInstallationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppInstallationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCloudAppInstallationsResponseBody) SetInstallationInfos(v []*ListCloudAppInstallationsResponseBodyInstallationInfos) *ListCloudAppInstallationsResponseBody {
	s.InstallationInfos = v
	return s
}

func (s *ListCloudAppInstallationsResponseBody) SetPageNumber(v int64) *ListCloudAppInstallationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBody) SetPageSize(v int64) *ListCloudAppInstallationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBody) SetRequestId(v string) *ListCloudAppInstallationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBody) SetTotalCount(v int64) *ListCloudAppInstallationsResponseBody {
	s.TotalCount = &v
	return s
}

type ListCloudAppInstallationsResponseBodyInstallationInfos struct {
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// com.aaa.bbb
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// 1.5.0
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// example:
	//
	// 2024-05-28T14:48:34+08:00
	InstallationTime *string `json:"InstallationTime,omitempty" xml:"InstallationTime,omitempty"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
	// example:
	//
	// installed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// install success
	StatusDescription *string `json:"StatusDescription,omitempty" xml:"StatusDescription,omitempty"`
	// example:
	//
	// 2024-05-28T14:50:04+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListCloudAppInstallationsResponseBodyInstallationInfos) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppInstallationsResponseBodyInstallationInfos) GoString() string {
	return s.String()
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetAppId(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.AppId = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetAppName(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.AppName = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetAppVersion(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.AppVersion = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetInstallationTime(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.InstallationTime = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetRenderingInstanceId(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.RenderingInstanceId = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetStatus(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.Status = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetStatusDescription(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.StatusDescription = &v
	return s
}

func (s *ListCloudAppInstallationsResponseBodyInstallationInfos) SetUpdateTime(v string) *ListCloudAppInstallationsResponseBodyInstallationInfos {
	s.UpdateTime = &v
	return s
}

type ListCloudAppInstallationsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCloudAppInstallationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCloudAppInstallationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppInstallationsResponse) GoString() string {
	return s.String()
}

func (s *ListCloudAppInstallationsResponse) SetHeaders(v map[string]*string) *ListCloudAppInstallationsResponse {
	s.Headers = v
	return s
}

func (s *ListCloudAppInstallationsResponse) SetStatusCode(v int32) *ListCloudAppInstallationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCloudAppInstallationsResponse) SetBody(v *ListCloudAppInstallationsResponseBody) *ListCloudAppInstallationsResponse {
	s.Body = v
	return s
}

type ListCloudAppsRequest struct {
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// com.aaa.bbb
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// 1.0
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListCloudAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppsRequest) GoString() string {
	return s.String()
}

func (s *ListCloudAppsRequest) SetAppId(v string) *ListCloudAppsRequest {
	s.AppId = &v
	return s
}

func (s *ListCloudAppsRequest) SetAppName(v string) *ListCloudAppsRequest {
	s.AppName = &v
	return s
}

func (s *ListCloudAppsRequest) SetAppVersion(v string) *ListCloudAppsRequest {
	s.AppVersion = &v
	return s
}

func (s *ListCloudAppsRequest) SetPageNumber(v int64) *ListCloudAppsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCloudAppsRequest) SetPageSize(v int64) *ListCloudAppsRequest {
	s.PageSize = &v
	return s
}

type ListCloudAppsResponseBody struct {
	CloudApps []*ListCloudAppsResponseBodyCloudApps `json:"CloudApps,omitempty" xml:"CloudApps,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCloudAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCloudAppsResponseBody) SetCloudApps(v []*ListCloudAppsResponseBodyCloudApps) *ListCloudAppsResponseBody {
	s.CloudApps = v
	return s
}

func (s *ListCloudAppsResponseBody) SetPageNumber(v int64) *ListCloudAppsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCloudAppsResponseBody) SetPageSize(v int64) *ListCloudAppsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCloudAppsResponseBody) SetRequestId(v string) *ListCloudAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCloudAppsResponseBody) SetTotalCount(v int64) *ListCloudAppsResponseBody {
	s.TotalCount = &v
	return s
}

type ListCloudAppsResponseBodyCloudApps struct {
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// com.aaa.bbb
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// 1.5.0
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// example:
	//
	// demo
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// upload success
	StatusDescription *string `json:"StatusDescription,omitempty" xml:"StatusDescription,omitempty"`
	// example:
	//
	// 2024-05-28T14:48:34+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 2024-05-28T14:28:14+08:00
	UploadTime *string `json:"UploadTime,omitempty" xml:"UploadTime,omitempty"`
}

func (s ListCloudAppsResponseBodyCloudApps) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppsResponseBodyCloudApps) GoString() string {
	return s.String()
}

func (s *ListCloudAppsResponseBodyCloudApps) SetAppId(v string) *ListCloudAppsResponseBodyCloudApps {
	s.AppId = &v
	return s
}

func (s *ListCloudAppsResponseBodyCloudApps) SetAppName(v string) *ListCloudAppsResponseBodyCloudApps {
	s.AppName = &v
	return s
}

func (s *ListCloudAppsResponseBodyCloudApps) SetAppVersion(v string) *ListCloudAppsResponseBodyCloudApps {
	s.AppVersion = &v
	return s
}

func (s *ListCloudAppsResponseBodyCloudApps) SetDescription(v string) *ListCloudAppsResponseBodyCloudApps {
	s.Description = &v
	return s
}

func (s *ListCloudAppsResponseBodyCloudApps) SetStatus(v string) *ListCloudAppsResponseBodyCloudApps {
	s.Status = &v
	return s
}

func (s *ListCloudAppsResponseBodyCloudApps) SetStatusDescription(v string) *ListCloudAppsResponseBodyCloudApps {
	s.StatusDescription = &v
	return s
}

func (s *ListCloudAppsResponseBodyCloudApps) SetUpdateTime(v string) *ListCloudAppsResponseBodyCloudApps {
	s.UpdateTime = &v
	return s
}

func (s *ListCloudAppsResponseBodyCloudApps) SetUploadTime(v string) *ListCloudAppsResponseBodyCloudApps {
	s.UploadTime = &v
	return s
}

type ListCloudAppsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCloudAppsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCloudAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCloudAppsResponse) GoString() string {
	return s.String()
}

func (s *ListCloudAppsResponse) SetHeaders(v map[string]*string) *ListCloudAppsResponse {
	s.Headers = v
	return s
}

func (s *ListCloudAppsResponse) SetStatusCode(v int32) *ListCloudAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCloudAppsResponse) SetBody(v *ListCloudAppsResponseBody) *ListCloudAppsResponse {
	s.Body = v
	return s
}

type ListFilePushStatusesRequest struct {
	// example:
	//
	// f-1671accd4dafdag3er256cvgewt13f7141db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// myfile
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s ListFilePushStatusesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFilePushStatusesRequest) GoString() string {
	return s.String()
}

func (s *ListFilePushStatusesRequest) SetFileId(v string) *ListFilePushStatusesRequest {
	s.FileId = &v
	return s
}

func (s *ListFilePushStatusesRequest) SetFileName(v string) *ListFilePushStatusesRequest {
	s.FileName = &v
	return s
}

func (s *ListFilePushStatusesRequest) SetPageNumber(v int64) *ListFilePushStatusesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFilePushStatusesRequest) SetPageSize(v int64) *ListFilePushStatusesRequest {
	s.PageSize = &v
	return s
}

func (s *ListFilePushStatusesRequest) SetRenderingInstanceId(v string) *ListFilePushStatusesRequest {
	s.RenderingInstanceId = &v
	return s
}

type ListFilePushStatusesResponseBody struct {
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize     *int64                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PushStatuses []*ListFilePushStatusesResponseBodyPushStatuses `json:"PushStatuses,omitempty" xml:"PushStatuses,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFilePushStatusesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFilePushStatusesResponseBody) GoString() string {
	return s.String()
}

func (s *ListFilePushStatusesResponseBody) SetPageNumber(v int64) *ListFilePushStatusesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFilePushStatusesResponseBody) SetPageSize(v int64) *ListFilePushStatusesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFilePushStatusesResponseBody) SetPushStatuses(v []*ListFilePushStatusesResponseBodyPushStatuses) *ListFilePushStatusesResponseBody {
	s.PushStatuses = v
	return s
}

func (s *ListFilePushStatusesResponseBody) SetRequestId(v string) *ListFilePushStatusesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFilePushStatusesResponseBody) SetTotalCount(v int64) *ListFilePushStatusesResponseBody {
	s.TotalCount = &v
	return s
}

type ListFilePushStatusesResponseBodyPushStatuses struct {
	// example:
	//
	// f-1671accd4dafdag3er256cvgewt13f7141db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// myfile
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 2024-03-26T16:32:20+08:00
	PushTime *string `json:"PushTime,omitempty" xml:"PushTime,omitempty"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// push success
	StatusDescription *string `json:"StatusDescription,omitempty" xml:"StatusDescription,omitempty"`
	// example:
	//
	// 2024-03-26T17:02:10+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListFilePushStatusesResponseBodyPushStatuses) String() string {
	return tea.Prettify(s)
}

func (s ListFilePushStatusesResponseBodyPushStatuses) GoString() string {
	return s.String()
}

func (s *ListFilePushStatusesResponseBodyPushStatuses) SetFileId(v string) *ListFilePushStatusesResponseBodyPushStatuses {
	s.FileId = &v
	return s
}

func (s *ListFilePushStatusesResponseBodyPushStatuses) SetFileName(v string) *ListFilePushStatusesResponseBodyPushStatuses {
	s.FileName = &v
	return s
}

func (s *ListFilePushStatusesResponseBodyPushStatuses) SetPushTime(v string) *ListFilePushStatusesResponseBodyPushStatuses {
	s.PushTime = &v
	return s
}

func (s *ListFilePushStatusesResponseBodyPushStatuses) SetRenderingInstanceId(v string) *ListFilePushStatusesResponseBodyPushStatuses {
	s.RenderingInstanceId = &v
	return s
}

func (s *ListFilePushStatusesResponseBodyPushStatuses) SetStatus(v string) *ListFilePushStatusesResponseBodyPushStatuses {
	s.Status = &v
	return s
}

func (s *ListFilePushStatusesResponseBodyPushStatuses) SetStatusDescription(v string) *ListFilePushStatusesResponseBodyPushStatuses {
	s.StatusDescription = &v
	return s
}

func (s *ListFilePushStatusesResponseBodyPushStatuses) SetUpdateTime(v string) *ListFilePushStatusesResponseBodyPushStatuses {
	s.UpdateTime = &v
	return s
}

type ListFilePushStatusesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFilePushStatusesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFilePushStatusesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFilePushStatusesResponse) GoString() string {
	return s.String()
}

func (s *ListFilePushStatusesResponse) SetHeaders(v map[string]*string) *ListFilePushStatusesResponse {
	s.Headers = v
	return s
}

func (s *ListFilePushStatusesResponse) SetStatusCode(v int32) *ListFilePushStatusesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFilePushStatusesResponse) SetBody(v *ListFilePushStatusesResponseBody) *ListFilePushStatusesResponse {
	s.Body = v
	return s
}

type ListFilesRequest struct {
	// example:
	//
	// f-1671accd4dafdag3er256cvgewt13f7141db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// myfile
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFilesRequest) GoString() string {
	return s.String()
}

func (s *ListFilesRequest) SetFileId(v string) *ListFilesRequest {
	s.FileId = &v
	return s
}

func (s *ListFilesRequest) SetFileName(v string) *ListFilesRequest {
	s.FileName = &v
	return s
}

func (s *ListFilesRequest) SetPageNumber(v int64) *ListFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFilesRequest) SetPageSize(v int64) *ListFilesRequest {
	s.PageSize = &v
	return s
}

type ListFilesResponseBody struct {
	Files []*ListFilesResponseBodyFiles `json:"Files,omitempty" xml:"Files,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBody) SetFiles(v []*ListFilesResponseBodyFiles) *ListFilesResponseBody {
	s.Files = v
	return s
}

func (s *ListFilesResponseBody) SetPageNumber(v int64) *ListFilesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFilesResponseBody) SetPageSize(v int64) *ListFilesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFilesResponseBody) SetRequestId(v string) *ListFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFilesResponseBody) SetTotalCount(v int64) *ListFilesResponseBody {
	s.TotalCount = &v
	return s
}

type ListFilesResponseBodyFiles struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// f-1671accd4dafdag3er256cvgewt13f7141db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// myfile
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// upload success
	StatusDescription *string `json:"StatusDescription,omitempty" xml:"StatusDescription,omitempty"`
	// example:
	//
	// /data/tmp/test/xxx.tar
	TargetPath *string `json:"TargetPath,omitempty" xml:"TargetPath,omitempty"`
	// example:
	//
	// 2024-03-28T14:15:08+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 2024-03-28T14:10:12+08:00
	UploadTime *string `json:"UploadTime,omitempty" xml:"UploadTime,omitempty"`
}

func (s ListFilesResponseBodyFiles) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBodyFiles) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBodyFiles) SetDescription(v string) *ListFilesResponseBodyFiles {
	s.Description = &v
	return s
}

func (s *ListFilesResponseBodyFiles) SetFileId(v string) *ListFilesResponseBodyFiles {
	s.FileId = &v
	return s
}

func (s *ListFilesResponseBodyFiles) SetFileName(v string) *ListFilesResponseBodyFiles {
	s.FileName = &v
	return s
}

func (s *ListFilesResponseBodyFiles) SetStatus(v string) *ListFilesResponseBodyFiles {
	s.Status = &v
	return s
}

func (s *ListFilesResponseBodyFiles) SetStatusDescription(v string) *ListFilesResponseBodyFiles {
	s.StatusDescription = &v
	return s
}

func (s *ListFilesResponseBodyFiles) SetTargetPath(v string) *ListFilesResponseBodyFiles {
	s.TargetPath = &v
	return s
}

func (s *ListFilesResponseBodyFiles) SetUpdateTime(v string) *ListFilesResponseBodyFiles {
	s.UpdateTime = &v
	return s
}

func (s *ListFilesResponseBodyFiles) SetUploadTime(v string) *ListFilesResponseBodyFiles {
	s.UploadTime = &v
	return s
}

type ListFilesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponse) GoString() string {
	return s.String()
}

func (s *ListFilesResponse) SetHeaders(v map[string]*string) *ListFilesResponse {
	s.Headers = v
	return s
}

func (s *ListFilesResponse) SetStatusCode(v int32) *ListFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFilesResponse) SetBody(v *ListFilesResponseBody) *ListFilesResponse {
	s.Body = v
	return s
}

type ListPublicKeysRequest struct {
	// example:
	//
	// g-test
	KeyGroup *string `json:"KeyGroup,omitempty" xml:"KeyGroup,omitempty"`
	// example:
	//
	// mykey
	KeyName *string `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListPublicKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPublicKeysRequest) GoString() string {
	return s.String()
}

func (s *ListPublicKeysRequest) SetKeyGroup(v string) *ListPublicKeysRequest {
	s.KeyGroup = &v
	return s
}

func (s *ListPublicKeysRequest) SetKeyName(v string) *ListPublicKeysRequest {
	s.KeyName = &v
	return s
}

func (s *ListPublicKeysRequest) SetKeyType(v string) *ListPublicKeysRequest {
	s.KeyType = &v
	return s
}

func (s *ListPublicKeysRequest) SetPageNumber(v int64) *ListPublicKeysRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPublicKeysRequest) SetPageSize(v int64) *ListPublicKeysRequest {
	s.PageSize = &v
	return s
}

type ListPublicKeysResponseBody struct {
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize   *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PublicKeys []*ListPublicKeysResponseBodyPublicKeys `json:"PublicKeys,omitempty" xml:"PublicKeys,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPublicKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPublicKeysResponseBody) GoString() string {
	return s.String()
}

func (s *ListPublicKeysResponseBody) SetPageNumber(v int64) *ListPublicKeysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListPublicKeysResponseBody) SetPageSize(v int64) *ListPublicKeysResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListPublicKeysResponseBody) SetPublicKeys(v []*ListPublicKeysResponseBodyPublicKeys) *ListPublicKeysResponseBody {
	s.PublicKeys = v
	return s
}

func (s *ListPublicKeysResponseBody) SetRequestId(v string) *ListPublicKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPublicKeysResponseBody) SetTotalCount(v int64) *ListPublicKeysResponseBody {
	s.TotalCount = &v
	return s
}

type ListPublicKeysResponseBodyPublicKeys struct {
	// example:
	//
	// verify_30d89ccb0905c8c7882c1d14a991954b
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// mygroup
	KeyGroup *string `json:"KeyGroup,omitempty" xml:"KeyGroup,omitempty"`
	// example:
	//
	// mykey
	KeyName *string `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// example:
	//
	// 2024-06-11T14:26:48+08:00
	UploadTime *string `json:"UploadTime,omitempty" xml:"UploadTime,omitempty"`
}

func (s ListPublicKeysResponseBodyPublicKeys) String() string {
	return tea.Prettify(s)
}

func (s ListPublicKeysResponseBodyPublicKeys) GoString() string {
	return s.String()
}

func (s *ListPublicKeysResponseBodyPublicKeys) SetContent(v string) *ListPublicKeysResponseBodyPublicKeys {
	s.Content = &v
	return s
}

func (s *ListPublicKeysResponseBodyPublicKeys) SetDescription(v string) *ListPublicKeysResponseBodyPublicKeys {
	s.Description = &v
	return s
}

func (s *ListPublicKeysResponseBodyPublicKeys) SetKeyGroup(v string) *ListPublicKeysResponseBodyPublicKeys {
	s.KeyGroup = &v
	return s
}

func (s *ListPublicKeysResponseBodyPublicKeys) SetKeyName(v string) *ListPublicKeysResponseBodyPublicKeys {
	s.KeyName = &v
	return s
}

func (s *ListPublicKeysResponseBodyPublicKeys) SetKeyType(v string) *ListPublicKeysResponseBodyPublicKeys {
	s.KeyType = &v
	return s
}

func (s *ListPublicKeysResponseBodyPublicKeys) SetUploadTime(v string) *ListPublicKeysResponseBodyPublicKeys {
	s.UploadTime = &v
	return s
}

type ListPublicKeysResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPublicKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPublicKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPublicKeysResponse) GoString() string {
	return s.String()
}

func (s *ListPublicKeysResponse) SetHeaders(v map[string]*string) *ListPublicKeysResponse {
	s.Headers = v
	return s
}

func (s *ListPublicKeysResponse) SetStatusCode(v int32) *ListPublicKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPublicKeysResponse) SetBody(v *ListPublicKeysResponseBody) *ListPublicKeysResponse {
	s.Body = v
	return s
}

type ListRenderingInstancesRequest struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
	// example:
	//
	// crs.cp.l1
	RenderingSpec *string `json:"RenderingSpec,omitempty" xml:"RenderingSpec,omitempty"`
}

func (s ListRenderingInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRenderingInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListRenderingInstancesRequest) SetPageNumber(v int32) *ListRenderingInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRenderingInstancesRequest) SetPageSize(v int32) *ListRenderingInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRenderingInstancesRequest) SetRenderingInstanceId(v string) *ListRenderingInstancesRequest {
	s.RenderingInstanceId = &v
	return s
}

func (s *ListRenderingInstancesRequest) SetRenderingSpec(v string) *ListRenderingInstancesRequest {
	s.RenderingSpec = &v
	return s
}

type ListRenderingInstancesResponseBody struct {
	RenderingInstances []*ListRenderingInstancesResponseBodyRenderingInstances `json:"RenderingInstances,omitempty" xml:"RenderingInstances,omitempty" type:"Repeated"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRenderingInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRenderingInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRenderingInstancesResponseBody) SetRenderingInstances(v []*ListRenderingInstancesResponseBodyRenderingInstances) *ListRenderingInstancesResponseBody {
	s.RenderingInstances = v
	return s
}

func (s *ListRenderingInstancesResponseBody) SetRequestId(v string) *ListRenderingInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRenderingInstancesResponseBody) SetTotalCount(v int64) *ListRenderingInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type ListRenderingInstancesResponseBodyRenderingInstances struct {
	// example:
	//
	// 2023-11-17T02:18:04Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
	// example:
	//
	// crs.cp.l1
	RenderingSpec *string `json:"RenderingSpec,omitempty" xml:"RenderingSpec,omitempty"`
}

func (s ListRenderingInstancesResponseBodyRenderingInstances) String() string {
	return tea.Prettify(s)
}

func (s ListRenderingInstancesResponseBodyRenderingInstances) GoString() string {
	return s.String()
}

func (s *ListRenderingInstancesResponseBodyRenderingInstances) SetCreationTime(v string) *ListRenderingInstancesResponseBodyRenderingInstances {
	s.CreationTime = &v
	return s
}

func (s *ListRenderingInstancesResponseBodyRenderingInstances) SetRenderingInstanceId(v string) *ListRenderingInstancesResponseBodyRenderingInstances {
	s.RenderingInstanceId = &v
	return s
}

func (s *ListRenderingInstancesResponseBodyRenderingInstances) SetRenderingSpec(v string) *ListRenderingInstancesResponseBodyRenderingInstances {
	s.RenderingSpec = &v
	return s
}

type ListRenderingInstancesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRenderingInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRenderingInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRenderingInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListRenderingInstancesResponse) SetHeaders(v map[string]*string) *ListRenderingInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListRenderingInstancesResponse) SetStatusCode(v int32) *ListRenderingInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRenderingInstancesResponse) SetBody(v *ListRenderingInstancesResponseBody) *ListRenderingInstancesResponse {
	s.Body = v
	return s
}

type ManageLoginRequest struct {
	// example:
	//
	// open
	ActionName *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	// example:
	//
	// mygroup
	KeyGroup *string `json:"KeyGroup,omitempty" xml:"KeyGroup,omitempty"`
	// example:
	//
	// mykey
	KeyName *string `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s ManageLoginRequest) String() string {
	return tea.Prettify(s)
}

func (s ManageLoginRequest) GoString() string {
	return s.String()
}

func (s *ManageLoginRequest) SetActionName(v string) *ManageLoginRequest {
	s.ActionName = &v
	return s
}

func (s *ManageLoginRequest) SetKeyGroup(v string) *ManageLoginRequest {
	s.KeyGroup = &v
	return s
}

func (s *ManageLoginRequest) SetKeyName(v string) *ManageLoginRequest {
	s.KeyName = &v
	return s
}

func (s *ManageLoginRequest) SetRenderingInstanceId(v string) *ManageLoginRequest {
	s.RenderingInstanceId = &v
	return s
}

type ManageLoginResponseBody struct {
	LoginInfo *ManageLoginResponseBodyLoginInfo `json:"LoginInfo,omitempty" xml:"LoginInfo,omitempty" type:"Struct"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ManageLoginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ManageLoginResponseBody) GoString() string {
	return s.String()
}

func (s *ManageLoginResponseBody) SetLoginInfo(v *ManageLoginResponseBodyLoginInfo) *ManageLoginResponseBody {
	s.LoginInfo = v
	return s
}

func (s *ManageLoginResponseBody) SetRequestId(v string) *ManageLoginResponseBody {
	s.RequestId = &v
	return s
}

type ManageLoginResponseBodyLoginInfo struct {
	AdbLoginPort *int32 `json:"AdbLoginPort,omitempty" xml:"AdbLoginPort,omitempty"`
	// example:
	//
	// 12.10.4.10
	LoginHostname *string `json:"LoginHostname,omitempty" xml:"LoginHostname,omitempty"`
	// example:
	//
	// 10004
	LoginPort *int32 `json:"LoginPort,omitempty" xml:"LoginPort,omitempty"`
}

func (s ManageLoginResponseBodyLoginInfo) String() string {
	return tea.Prettify(s)
}

func (s ManageLoginResponseBodyLoginInfo) GoString() string {
	return s.String()
}

func (s *ManageLoginResponseBodyLoginInfo) SetAdbLoginPort(v int32) *ManageLoginResponseBodyLoginInfo {
	s.AdbLoginPort = &v
	return s
}

func (s *ManageLoginResponseBodyLoginInfo) SetLoginHostname(v string) *ManageLoginResponseBodyLoginInfo {
	s.LoginHostname = &v
	return s
}

func (s *ManageLoginResponseBodyLoginInfo) SetLoginPort(v int32) *ManageLoginResponseBodyLoginInfo {
	s.LoginPort = &v
	return s
}

type ManageLoginResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ManageLoginResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ManageLoginResponse) String() string {
	return tea.Prettify(s)
}

func (s ManageLoginResponse) GoString() string {
	return s.String()
}

func (s *ManageLoginResponse) SetHeaders(v map[string]*string) *ManageLoginResponse {
	s.Headers = v
	return s
}

func (s *ManageLoginResponse) SetStatusCode(v int32) *ManageLoginResponse {
	s.StatusCode = &v
	return s
}

func (s *ManageLoginResponse) SetBody(v *ManageLoginResponseBody) *ManageLoginResponse {
	s.Body = v
	return s
}

type ModifyDeviceRequest struct {
	// example:
	//
	// 0
	AlarmMethod   *string `json:"AlarmMethod,omitempty" xml:"AlarmMethod,omitempty"`
	AutoDirectory *bool   `json:"AutoDirectory,omitempty" xml:"AutoDirectory,omitempty"`
	// example:
	//
	// false
	AutoPos *bool `json:"AutoPos,omitempty" xml:"AutoPos,omitempty"`
	// example:
	//
	// false
	AutoStart   *bool   `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 399*****488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// example:
	//
	// 3100000****000000002
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// example:
	//
	// 348*****174-cn-qingdao
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 10.10.10.10
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// example:
	//
	// 119.20
	Latitude *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	// example:
	//
	// 45.00
	Longitude *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// {}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 399*****774-cn-qingdao
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// admin
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// 8080
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// 300
	PosInterval *int64 `json:"PosInterval,omitempty" xml:"PosInterval,omitempty"`
	// example:
	//
	// ipc
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://xxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// admin
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Vendor   *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s ModifyDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeviceRequest) SetAlarmMethod(v string) *ModifyDeviceRequest {
	s.AlarmMethod = &v
	return s
}

func (s *ModifyDeviceRequest) SetAutoDirectory(v bool) *ModifyDeviceRequest {
	s.AutoDirectory = &v
	return s
}

func (s *ModifyDeviceRequest) SetAutoPos(v bool) *ModifyDeviceRequest {
	s.AutoPos = &v
	return s
}

func (s *ModifyDeviceRequest) SetAutoStart(v bool) *ModifyDeviceRequest {
	s.AutoStart = &v
	return s
}

func (s *ModifyDeviceRequest) SetDescription(v string) *ModifyDeviceRequest {
	s.Description = &v
	return s
}

func (s *ModifyDeviceRequest) SetDirectoryId(v string) *ModifyDeviceRequest {
	s.DirectoryId = &v
	return s
}

func (s *ModifyDeviceRequest) SetGbId(v string) *ModifyDeviceRequest {
	s.GbId = &v
	return s
}

func (s *ModifyDeviceRequest) SetGroupId(v string) *ModifyDeviceRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyDeviceRequest) SetId(v string) *ModifyDeviceRequest {
	s.Id = &v
	return s
}

func (s *ModifyDeviceRequest) SetIp(v string) *ModifyDeviceRequest {
	s.Ip = &v
	return s
}

func (s *ModifyDeviceRequest) SetLatitude(v string) *ModifyDeviceRequest {
	s.Latitude = &v
	return s
}

func (s *ModifyDeviceRequest) SetLongitude(v string) *ModifyDeviceRequest {
	s.Longitude = &v
	return s
}

func (s *ModifyDeviceRequest) SetName(v string) *ModifyDeviceRequest {
	s.Name = &v
	return s
}

func (s *ModifyDeviceRequest) SetOwnerId(v int64) *ModifyDeviceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDeviceRequest) SetParams(v string) *ModifyDeviceRequest {
	s.Params = &v
	return s
}

func (s *ModifyDeviceRequest) SetParentId(v string) *ModifyDeviceRequest {
	s.ParentId = &v
	return s
}

func (s *ModifyDeviceRequest) SetPassword(v string) *ModifyDeviceRequest {
	s.Password = &v
	return s
}

func (s *ModifyDeviceRequest) SetPort(v int64) *ModifyDeviceRequest {
	s.Port = &v
	return s
}

func (s *ModifyDeviceRequest) SetPosInterval(v int64) *ModifyDeviceRequest {
	s.PosInterval = &v
	return s
}

func (s *ModifyDeviceRequest) SetType(v string) *ModifyDeviceRequest {
	s.Type = &v
	return s
}

func (s *ModifyDeviceRequest) SetUrl(v string) *ModifyDeviceRequest {
	s.Url = &v
	return s
}

func (s *ModifyDeviceRequest) SetUsername(v string) *ModifyDeviceRequest {
	s.Username = &v
	return s
}

func (s *ModifyDeviceRequest) SetVendor(v string) *ModifyDeviceRequest {
	s.Vendor = &v
	return s
}

type ModifyDeviceResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDeviceResponseBody) SetId(v string) *ModifyDeviceResponseBody {
	s.Id = &v
	return s
}

func (s *ModifyDeviceResponseBody) SetRequestId(v string) *ModifyDeviceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDeviceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeviceResponse) SetHeaders(v map[string]*string) *ModifyDeviceResponse {
	s.Headers = v
	return s
}

func (s *ModifyDeviceResponse) SetStatusCode(v int32) *ModifyDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDeviceResponse) SetBody(v *ModifyDeviceResponseBody) *ModifyDeviceResponse {
	s.Body = v
	return s
}

type ModifyDeviceAlarmRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0dGo7jLwwf1000296232
	AlarmId *string `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	ChannelId *int32 `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyDeviceAlarmRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceAlarmRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeviceAlarmRequest) SetAlarmId(v string) *ModifyDeviceAlarmRequest {
	s.AlarmId = &v
	return s
}

func (s *ModifyDeviceAlarmRequest) SetChannelId(v int32) *ModifyDeviceAlarmRequest {
	s.ChannelId = &v
	return s
}

func (s *ModifyDeviceAlarmRequest) SetId(v string) *ModifyDeviceAlarmRequest {
	s.Id = &v
	return s
}

func (s *ModifyDeviceAlarmRequest) SetOwnerId(v int64) *ModifyDeviceAlarmRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDeviceAlarmRequest) SetStatus(v int32) *ModifyDeviceAlarmRequest {
	s.Status = &v
	return s
}

type ModifyDeviceAlarmResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDeviceAlarmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceAlarmResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDeviceAlarmResponseBody) SetRequestId(v string) *ModifyDeviceAlarmResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDeviceAlarmResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDeviceAlarmResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDeviceAlarmResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceAlarmResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeviceAlarmResponse) SetHeaders(v map[string]*string) *ModifyDeviceAlarmResponse {
	s.Headers = v
	return s
}

func (s *ModifyDeviceAlarmResponse) SetStatusCode(v int32) *ModifyDeviceAlarmResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDeviceAlarmResponse) SetBody(v *ModifyDeviceAlarmResponseBody) *ModifyDeviceAlarmResponse {
	s.Body = v
	return s
}

type ModifyDeviceCaptureRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 0
	Image   *int32 `json:"Image,omitempty" xml:"Image,omitempty"`
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1
	Video *int32 `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s ModifyDeviceCaptureRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceCaptureRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeviceCaptureRequest) SetId(v string) *ModifyDeviceCaptureRequest {
	s.Id = &v
	return s
}

func (s *ModifyDeviceCaptureRequest) SetImage(v int32) *ModifyDeviceCaptureRequest {
	s.Image = &v
	return s
}

func (s *ModifyDeviceCaptureRequest) SetOwnerId(v int64) *ModifyDeviceCaptureRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDeviceCaptureRequest) SetVideo(v int32) *ModifyDeviceCaptureRequest {
	s.Video = &v
	return s
}

type ModifyDeviceCaptureResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDeviceCaptureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceCaptureResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDeviceCaptureResponseBody) SetRequestId(v string) *ModifyDeviceCaptureResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDeviceCaptureResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDeviceCaptureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDeviceCaptureResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceCaptureResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeviceCaptureResponse) SetHeaders(v map[string]*string) *ModifyDeviceCaptureResponse {
	s.Headers = v
	return s
}

func (s *ModifyDeviceCaptureResponse) SetStatusCode(v int32) *ModifyDeviceCaptureResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDeviceCaptureResponse) SetBody(v *ModifyDeviceCaptureResponseBody) *ModifyDeviceCaptureResponse {
	s.Body = v
	return s
}

type ModifyDeviceChannelsRequest struct {
	// This parameter is required.
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// on
	DeviceStatus *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	// example:
	//
	// 210235C3GN32090008286cf17e130d
	Dsn *string `json:"Dsn,omitempty" xml:"Dsn,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ModifyDeviceChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceChannelsRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeviceChannelsRequest) SetChannels(v string) *ModifyDeviceChannelsRequest {
	s.Channels = &v
	return s
}

func (s *ModifyDeviceChannelsRequest) SetDeviceStatus(v string) *ModifyDeviceChannelsRequest {
	s.DeviceStatus = &v
	return s
}

func (s *ModifyDeviceChannelsRequest) SetDsn(v string) *ModifyDeviceChannelsRequest {
	s.Dsn = &v
	return s
}

func (s *ModifyDeviceChannelsRequest) SetId(v string) *ModifyDeviceChannelsRequest {
	s.Id = &v
	return s
}

func (s *ModifyDeviceChannelsRequest) SetOwnerId(v int64) *ModifyDeviceChannelsRequest {
	s.OwnerId = &v
	return s
}

type ModifyDeviceChannelsResponseBody struct {
	// example:
	//
	// 8F4D95B6-EB19-5245-AD77-95EDA83E53B7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDeviceChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDeviceChannelsResponseBody) SetRequestId(v string) *ModifyDeviceChannelsResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDeviceChannelsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDeviceChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDeviceChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceChannelsResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeviceChannelsResponse) SetHeaders(v map[string]*string) *ModifyDeviceChannelsResponse {
	s.Headers = v
	return s
}

func (s *ModifyDeviceChannelsResponse) SetStatusCode(v int32) *ModifyDeviceChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDeviceChannelsResponse) SetBody(v *ModifyDeviceChannelsResponseBody) *ModifyDeviceChannelsResponse {
	s.Body = v
	return s
}

type ModifyDirectoryRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 399*****488-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ModifyDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDirectoryRequest) GoString() string {
	return s.String()
}

func (s *ModifyDirectoryRequest) SetDescription(v string) *ModifyDirectoryRequest {
	s.Description = &v
	return s
}

func (s *ModifyDirectoryRequest) SetId(v string) *ModifyDirectoryRequest {
	s.Id = &v
	return s
}

func (s *ModifyDirectoryRequest) SetName(v string) *ModifyDirectoryRequest {
	s.Name = &v
	return s
}

func (s *ModifyDirectoryRequest) SetOwnerId(v int64) *ModifyDirectoryRequest {
	s.OwnerId = &v
	return s
}

type ModifyDirectoryResponseBody struct {
	// example:
	//
	// 399*****488-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDirectoryResponseBody) SetId(v string) *ModifyDirectoryResponseBody {
	s.Id = &v
	return s
}

func (s *ModifyDirectoryResponseBody) SetRequestId(v string) *ModifyDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDirectoryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDirectoryResponse) GoString() string {
	return s.String()
}

func (s *ModifyDirectoryResponse) SetHeaders(v map[string]*string) *ModifyDirectoryResponse {
	s.Headers = v
	return s
}

func (s *ModifyDirectoryResponse) SetStatusCode(v int32) *ModifyDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDirectoryResponse) SetBody(v *ModifyDirectoryResponseBody) *ModifyDirectoryResponse {
	s.Body = v
	return s
}

type ModifyGroupRequest struct {
	// example:
	//
	// http://example.com/callback
	Callback    *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 32388487739092994-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// gb28181
	InProtocol *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	// example:
	//
	// false
	LazyPull *bool `json:"LazyPull,omitempty" xml:"LazyPull,omitempty"`
	// example:
	//
	// myGroup
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// flv,rtmp,hls
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// myplay.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	// example:
	//
	// mypush.com
	PushDomain *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s ModifyGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyGroupRequest) SetCallback(v string) *ModifyGroupRequest {
	s.Callback = &v
	return s
}

func (s *ModifyGroupRequest) SetDescription(v string) *ModifyGroupRequest {
	s.Description = &v
	return s
}

func (s *ModifyGroupRequest) SetEnabled(v bool) *ModifyGroupRequest {
	s.Enabled = &v
	return s
}

func (s *ModifyGroupRequest) SetId(v string) *ModifyGroupRequest {
	s.Id = &v
	return s
}

func (s *ModifyGroupRequest) SetInProtocol(v string) *ModifyGroupRequest {
	s.InProtocol = &v
	return s
}

func (s *ModifyGroupRequest) SetLazyPull(v bool) *ModifyGroupRequest {
	s.LazyPull = &v
	return s
}

func (s *ModifyGroupRequest) SetName(v string) *ModifyGroupRequest {
	s.Name = &v
	return s
}

func (s *ModifyGroupRequest) SetOutProtocol(v string) *ModifyGroupRequest {
	s.OutProtocol = &v
	return s
}

func (s *ModifyGroupRequest) SetOwnerId(v int64) *ModifyGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyGroupRequest) SetPlayDomain(v string) *ModifyGroupRequest {
	s.PlayDomain = &v
	return s
}

func (s *ModifyGroupRequest) SetPushDomain(v string) *ModifyGroupRequest {
	s.PushDomain = &v
	return s
}

func (s *ModifyGroupRequest) SetRegion(v string) *ModifyGroupRequest {
	s.Region = &v
	return s
}

type ModifyGroupResponseBody struct {
	// example:
	//
	// 32388487739092994-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyGroupResponseBody) SetId(v string) *ModifyGroupResponseBody {
	s.Id = &v
	return s
}

func (s *ModifyGroupResponseBody) SetRequestId(v string) *ModifyGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyGroupResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyGroupResponse) SetHeaders(v map[string]*string) *ModifyGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyGroupResponse) SetStatusCode(v int32) *ModifyGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyGroupResponse) SetBody(v *ModifyGroupResponseBody) *ModifyGroupResponse {
	s.Body = v
	return s
}

type ModifyParentPlatformRequest struct {
	// example:
	//
	// false
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// example:
	//
	// true
	ClientAuth *bool `json:"ClientAuth,omitempty" xml:"ClientAuth,omitempty"`
	// example:
	//
	// admin123
	ClientPassword *string `json:"ClientPassword,omitempty" xml:"ClientPassword,omitempty"`
	// example:
	//
	// user01
	ClientUsername *string `json:"ClientUsername,omitempty" xml:"ClientUsername,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 31000*****2170123451
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 359*****374-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 10.10.10.10
	Ip      *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 5060
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s ModifyParentPlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyParentPlatformRequest) GoString() string {
	return s.String()
}

func (s *ModifyParentPlatformRequest) SetAutoStart(v bool) *ModifyParentPlatformRequest {
	s.AutoStart = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetClientAuth(v bool) *ModifyParentPlatformRequest {
	s.ClientAuth = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetClientPassword(v string) *ModifyParentPlatformRequest {
	s.ClientPassword = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetClientUsername(v string) *ModifyParentPlatformRequest {
	s.ClientUsername = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetDescription(v string) *ModifyParentPlatformRequest {
	s.Description = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetGbId(v string) *ModifyParentPlatformRequest {
	s.GbId = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetId(v string) *ModifyParentPlatformRequest {
	s.Id = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetIp(v string) *ModifyParentPlatformRequest {
	s.Ip = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetName(v string) *ModifyParentPlatformRequest {
	s.Name = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetOwnerId(v int64) *ModifyParentPlatformRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyParentPlatformRequest) SetPort(v int64) *ModifyParentPlatformRequest {
	s.Port = &v
	return s
}

type ModifyParentPlatformResponseBody struct {
	// example:
	//
	// 359*****374-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyParentPlatformResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyParentPlatformResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyParentPlatformResponseBody) SetId(v string) *ModifyParentPlatformResponseBody {
	s.Id = &v
	return s
}

func (s *ModifyParentPlatformResponseBody) SetRequestId(v string) *ModifyParentPlatformResponseBody {
	s.RequestId = &v
	return s
}

type ModifyParentPlatformResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyParentPlatformResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyParentPlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyParentPlatformResponse) GoString() string {
	return s.String()
}

func (s *ModifyParentPlatformResponse) SetHeaders(v map[string]*string) *ModifyParentPlatformResponse {
	s.Headers = v
	return s
}

func (s *ModifyParentPlatformResponse) SetStatusCode(v int32) *ModifyParentPlatformResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyParentPlatformResponse) SetBody(v *ModifyParentPlatformResponseBody) *ModifyParentPlatformResponse {
	s.Body = v
	return s
}

type ModifyRenderingInstanceBandwidthRequest struct {
	// example:
	//
	// 100
	MaxEgressBandwidth *int32 `json:"MaxEgressBandwidth,omitempty" xml:"MaxEgressBandwidth,omitempty"`
	// example:
	//
	// 100
	MaxIngressBandwidth *int32 `json:"MaxIngressBandwidth,omitempty" xml:"MaxIngressBandwidth,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s ModifyRenderingInstanceBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRenderingInstanceBandwidthRequest) GoString() string {
	return s.String()
}

func (s *ModifyRenderingInstanceBandwidthRequest) SetMaxEgressBandwidth(v int32) *ModifyRenderingInstanceBandwidthRequest {
	s.MaxEgressBandwidth = &v
	return s
}

func (s *ModifyRenderingInstanceBandwidthRequest) SetMaxIngressBandwidth(v int32) *ModifyRenderingInstanceBandwidthRequest {
	s.MaxIngressBandwidth = &v
	return s
}

func (s *ModifyRenderingInstanceBandwidthRequest) SetRenderingInstanceId(v string) *ModifyRenderingInstanceBandwidthRequest {
	s.RenderingInstanceId = &v
	return s
}

type ModifyRenderingInstanceBandwidthResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyRenderingInstanceBandwidthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRenderingInstanceBandwidthResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRenderingInstanceBandwidthResponseBody) SetRequestId(v string) *ModifyRenderingInstanceBandwidthResponseBody {
	s.RequestId = &v
	return s
}

type ModifyRenderingInstanceBandwidthResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyRenderingInstanceBandwidthResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyRenderingInstanceBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRenderingInstanceBandwidthResponse) GoString() string {
	return s.String()
}

func (s *ModifyRenderingInstanceBandwidthResponse) SetHeaders(v map[string]*string) *ModifyRenderingInstanceBandwidthResponse {
	s.Headers = v
	return s
}

func (s *ModifyRenderingInstanceBandwidthResponse) SetStatusCode(v int32) *ModifyRenderingInstanceBandwidthResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRenderingInstanceBandwidthResponse) SetBody(v *ModifyRenderingInstanceBandwidthResponseBody) *ModifyRenderingInstanceBandwidthResponse {
	s.Body = v
	return s
}

type ModifyTemplateRequest struct {
	// example:
	//
	// http://example.com/callback
	Callback    *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// hls
	FileFormat *string `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Flv *string `json:"Flv,omitempty" xml:"Flv,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	HlsM3u8 *string `json:"HlsM3u8,omitempty" xml:"HlsM3u8,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{UnixTimestamp}_{Sequence}
	HlsTs *string `json:"HlsTs,omitempty" xml:"HlsTs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****998-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 3600
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}_ondemand.jpg
	JpgOnDemand *string `json:"JpgOnDemand,omitempty" xml:"JpgOnDemand,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}.jpg
	JpgOverwrite *string `json:"JpgOverwrite,omitempty" xml:"JpgOverwrite,omitempty"`
	// example:
	//
	// osspath/snapshot/{AppName}/{StreamName}/{UnixTimestamp}.jpg
	JpgSequence *string `json:"JpgSequence,omitempty" xml:"JpgSequence,omitempty"`
	// example:
	//
	// osspath/record/{StreamName}/{EscapedStartTime}_{EscapedEndTime}
	Mp4  *string `json:"Mp4,omitempty" xml:"Mp4,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// bucketname
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// example:
	//
	// oss-cn-qingdao.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// example:
	//
	// oss-prefix
	OssFilePrefix *string `json:"OssFilePrefix,omitempty" xml:"OssFilePrefix,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 3
	Retention *int64 `json:"Retention,omitempty" xml:"Retention,omitempty"`
	// example:
	//
	// [{"Fps":25,"Gop":50,"Height":720,"VideoCodec":"h264","Width":1280,"Name":"sd","VideoBitrate":800}]
	TransConfigsJSON *string `json:"TransConfigsJSON,omitempty" xml:"TransConfigsJSON,omitempty"`
	// example:
	//
	// auto
	Trigger *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
}

func (s ModifyTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateRequest) GoString() string {
	return s.String()
}

func (s *ModifyTemplateRequest) SetCallback(v string) *ModifyTemplateRequest {
	s.Callback = &v
	return s
}

func (s *ModifyTemplateRequest) SetDescription(v string) *ModifyTemplateRequest {
	s.Description = &v
	return s
}

func (s *ModifyTemplateRequest) SetFileFormat(v string) *ModifyTemplateRequest {
	s.FileFormat = &v
	return s
}

func (s *ModifyTemplateRequest) SetFlv(v string) *ModifyTemplateRequest {
	s.Flv = &v
	return s
}

func (s *ModifyTemplateRequest) SetHlsM3u8(v string) *ModifyTemplateRequest {
	s.HlsM3u8 = &v
	return s
}

func (s *ModifyTemplateRequest) SetHlsTs(v string) *ModifyTemplateRequest {
	s.HlsTs = &v
	return s
}

func (s *ModifyTemplateRequest) SetId(v string) *ModifyTemplateRequest {
	s.Id = &v
	return s
}

func (s *ModifyTemplateRequest) SetInterval(v int64) *ModifyTemplateRequest {
	s.Interval = &v
	return s
}

func (s *ModifyTemplateRequest) SetJpgOnDemand(v string) *ModifyTemplateRequest {
	s.JpgOnDemand = &v
	return s
}

func (s *ModifyTemplateRequest) SetJpgOverwrite(v string) *ModifyTemplateRequest {
	s.JpgOverwrite = &v
	return s
}

func (s *ModifyTemplateRequest) SetJpgSequence(v string) *ModifyTemplateRequest {
	s.JpgSequence = &v
	return s
}

func (s *ModifyTemplateRequest) SetMp4(v string) *ModifyTemplateRequest {
	s.Mp4 = &v
	return s
}

func (s *ModifyTemplateRequest) SetName(v string) *ModifyTemplateRequest {
	s.Name = &v
	return s
}

func (s *ModifyTemplateRequest) SetOssBucket(v string) *ModifyTemplateRequest {
	s.OssBucket = &v
	return s
}

func (s *ModifyTemplateRequest) SetOssEndpoint(v string) *ModifyTemplateRequest {
	s.OssEndpoint = &v
	return s
}

func (s *ModifyTemplateRequest) SetOssFilePrefix(v string) *ModifyTemplateRequest {
	s.OssFilePrefix = &v
	return s
}

func (s *ModifyTemplateRequest) SetOwnerId(v int64) *ModifyTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyTemplateRequest) SetRegion(v string) *ModifyTemplateRequest {
	s.Region = &v
	return s
}

func (s *ModifyTemplateRequest) SetRetention(v int64) *ModifyTemplateRequest {
	s.Retention = &v
	return s
}

func (s *ModifyTemplateRequest) SetTransConfigsJSON(v string) *ModifyTemplateRequest {
	s.TransConfigsJSON = &v
	return s
}

func (s *ModifyTemplateRequest) SetTrigger(v string) *ModifyTemplateRequest {
	s.Trigger = &v
	return s
}

type ModifyTemplateResponseBody struct {
	// example:
	//
	// 323*****998-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTemplateResponseBody) SetId(v string) *ModifyTemplateResponseBody {
	s.Id = &v
	return s
}

func (s *ModifyTemplateResponseBody) SetRequestId(v string) *ModifyTemplateResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateResponse) GoString() string {
	return s.String()
}

func (s *ModifyTemplateResponse) SetHeaders(v map[string]*string) *ModifyTemplateResponse {
	s.Headers = v
	return s
}

func (s *ModifyTemplateResponse) SetStatusCode(v int32) *ModifyTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTemplateResponse) SetBody(v *ModifyTemplateResponseBody) *ModifyTemplateResponse {
	s.Body = v
	return s
}

type OpenVsServiceResponseBody struct {
	// example:
	//
	// 150275784
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenVsServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenVsServiceResponseBody) GoString() string {
	return s.String()
}

func (s *OpenVsServiceResponseBody) SetOrderId(v string) *OpenVsServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *OpenVsServiceResponseBody) SetRequestId(v string) *OpenVsServiceResponseBody {
	s.RequestId = &v
	return s
}

type OpenVsServiceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenVsServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenVsServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenVsServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenVsServiceResponse) SetHeaders(v map[string]*string) *OpenVsServiceResponse {
	s.Headers = v
	return s
}

func (s *OpenVsServiceResponse) SetStatusCode(v int32) *OpenVsServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenVsServiceResponse) SetBody(v *OpenVsServiceResponseBody) *OpenVsServiceResponse {
	s.Body = v
	return s
}

type PushFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// f-1671accd4dafdag3er256cvgewt13f7141db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s PushFileRequest) String() string {
	return tea.Prettify(s)
}

func (s PushFileRequest) GoString() string {
	return s.String()
}

func (s *PushFileRequest) SetFileId(v string) *PushFileRequest {
	s.FileId = &v
	return s
}

func (s *PushFileRequest) SetRenderingInstanceId(v string) *PushFileRequest {
	s.RenderingInstanceId = &v
	return s
}

type PushFileResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PushFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushFileResponseBody) GoString() string {
	return s.String()
}

func (s *PushFileResponseBody) SetRequestId(v string) *PushFileResponseBody {
	s.RequestId = &v
	return s
}

type PushFileResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PushFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PushFileResponse) String() string {
	return tea.Prettify(s)
}

func (s PushFileResponse) GoString() string {
	return s.String()
}

func (s *PushFileResponse) SetHeaders(v map[string]*string) *PushFileResponse {
	s.Headers = v
	return s
}

func (s *PushFileResponse) SetStatusCode(v int32) *PushFileResponse {
	s.StatusCode = &v
	return s
}

func (s *PushFileResponse) SetBody(v *PushFileResponseBody) *PushFileResponse {
	s.Body = v
	return s
}

type RebootRenderingInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s RebootRenderingInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootRenderingInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootRenderingInstanceRequest) SetRenderingInstanceId(v string) *RebootRenderingInstanceRequest {
	s.RenderingInstanceId = &v
	return s
}

type RebootRenderingInstanceResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootRenderingInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootRenderingInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootRenderingInstanceResponseBody) SetRequestId(v string) *RebootRenderingInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootRenderingInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootRenderingInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootRenderingInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootRenderingInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootRenderingInstanceResponse) SetHeaders(v map[string]*string) *RebootRenderingInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootRenderingInstanceResponse) SetStatusCode(v int32) *RebootRenderingInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootRenderingInstanceResponse) SetBody(v *RebootRenderingInstanceResponseBody) *RebootRenderingInstanceResponse {
	s.Body = v
	return s
}

type ReleaseRenderingInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s ReleaseRenderingInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseRenderingInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseRenderingInstanceRequest) SetRenderingInstanceId(v string) *ReleaseRenderingInstanceRequest {
	s.RenderingInstanceId = &v
	return s
}

type ReleaseRenderingInstanceResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseRenderingInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseRenderingInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseRenderingInstanceResponseBody) SetRequestId(v string) *ReleaseRenderingInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseRenderingInstanceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseRenderingInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseRenderingInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseRenderingInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseRenderingInstanceResponse) SetHeaders(v map[string]*string) *ReleaseRenderingInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseRenderingInstanceResponse) SetStatusCode(v int32) *ReleaseRenderingInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseRenderingInstanceResponse) SetBody(v *ReleaseRenderingInstanceResponseBody) *ReleaseRenderingInstanceResponse {
	s.Body = v
	return s
}

type RenewRenderingInstanceRequest struct {
	// example:
	//
	// true
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// example:
	//
	// 1
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s RenewRenderingInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewRenderingInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewRenderingInstanceRequest) SetAutoRenew(v bool) *RenewRenderingInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *RenewRenderingInstanceRequest) SetPeriod(v string) *RenewRenderingInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewRenderingInstanceRequest) SetRenderingInstanceId(v string) *RenewRenderingInstanceRequest {
	s.RenderingInstanceId = &v
	return s
}

type RenewRenderingInstanceResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewRenderingInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewRenderingInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewRenderingInstanceResponseBody) SetRequestId(v string) *RenewRenderingInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RenewRenderingInstanceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewRenderingInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewRenderingInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewRenderingInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewRenderingInstanceResponse) SetHeaders(v map[string]*string) *RenewRenderingInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewRenderingInstanceResponse) SetStatusCode(v int32) *RenewRenderingInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewRenderingInstanceResponse) SetBody(v *RenewRenderingInstanceResponseBody) *RenewRenderingInstanceResponse {
	s.Body = v
	return s
}

type ResumeVsStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxApp
	AppName             *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ControlStreamAction *string `json:"ControlStreamAction,omitempty" xml:"ControlStreamAction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// publisher
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s ResumeVsStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeVsStreamRequest) GoString() string {
	return s.String()
}

func (s *ResumeVsStreamRequest) SetAppName(v string) *ResumeVsStreamRequest {
	s.AppName = &v
	return s
}

func (s *ResumeVsStreamRequest) SetControlStreamAction(v string) *ResumeVsStreamRequest {
	s.ControlStreamAction = &v
	return s
}

func (s *ResumeVsStreamRequest) SetDomainName(v string) *ResumeVsStreamRequest {
	s.DomainName = &v
	return s
}

func (s *ResumeVsStreamRequest) SetLiveStreamType(v string) *ResumeVsStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *ResumeVsStreamRequest) SetOwnerId(v int64) *ResumeVsStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ResumeVsStreamRequest) SetStreamName(v string) *ResumeVsStreamRequest {
	s.StreamName = &v
	return s
}

type ResumeVsStreamResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeVsStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeVsStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeVsStreamResponseBody) SetRequestId(v string) *ResumeVsStreamResponseBody {
	s.RequestId = &v
	return s
}

type ResumeVsStreamResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeVsStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeVsStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeVsStreamResponse) GoString() string {
	return s.String()
}

func (s *ResumeVsStreamResponse) SetHeaders(v map[string]*string) *ResumeVsStreamResponse {
	s.Headers = v
	return s
}

func (s *ResumeVsStreamResponse) SetStatusCode(v int32) *ResumeVsStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeVsStreamResponse) SetBody(v *ResumeVsStreamResponseBody) *ResumeVsStreamResponse {
	s.Body = v
	return s
}

type SendRenderingInstanceCommandsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// date;ls -l /tmp
	Commands *string `json:"Commands,omitempty" xml:"Commands,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s SendRenderingInstanceCommandsRequest) String() string {
	return tea.Prettify(s)
}

func (s SendRenderingInstanceCommandsRequest) GoString() string {
	return s.String()
}

func (s *SendRenderingInstanceCommandsRequest) SetCommands(v string) *SendRenderingInstanceCommandsRequest {
	s.Commands = &v
	return s
}

func (s *SendRenderingInstanceCommandsRequest) SetRenderingInstanceId(v string) *SendRenderingInstanceCommandsRequest {
	s.RenderingInstanceId = &v
	return s
}

type SendRenderingInstanceCommandsResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Thu Jun 27 16:06:26 CST 2024
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s SendRenderingInstanceCommandsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendRenderingInstanceCommandsResponseBody) GoString() string {
	return s.String()
}

func (s *SendRenderingInstanceCommandsResponseBody) SetRequestId(v string) *SendRenderingInstanceCommandsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendRenderingInstanceCommandsResponseBody) SetResult(v string) *SendRenderingInstanceCommandsResponseBody {
	s.Result = &v
	return s
}

type SendRenderingInstanceCommandsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendRenderingInstanceCommandsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendRenderingInstanceCommandsResponse) String() string {
	return tea.Prettify(s)
}

func (s SendRenderingInstanceCommandsResponse) GoString() string {
	return s.String()
}

func (s *SendRenderingInstanceCommandsResponse) SetHeaders(v map[string]*string) *SendRenderingInstanceCommandsResponse {
	s.Headers = v
	return s
}

func (s *SendRenderingInstanceCommandsResponse) SetStatusCode(v int32) *SendRenderingInstanceCommandsResponse {
	s.StatusCode = &v
	return s
}

func (s *SendRenderingInstanceCommandsResponse) SetBody(v *SendRenderingInstanceCommandsResponseBody) *SendRenderingInstanceCommandsResponse {
	s.Body = v
	return s
}

type SetPresetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	PresetId *string `json:"PresetId,omitempty" xml:"PresetId,omitempty"`
}

func (s SetPresetRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPresetRequest) GoString() string {
	return s.String()
}

func (s *SetPresetRequest) SetId(v string) *SetPresetRequest {
	s.Id = &v
	return s
}

func (s *SetPresetRequest) SetOwnerId(v int64) *SetPresetRequest {
	s.OwnerId = &v
	return s
}

func (s *SetPresetRequest) SetPresetId(v string) *SetPresetRequest {
	s.PresetId = &v
	return s
}

type SetPresetResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 30295DF1-1DC7-48BA-BE5A-D58E61EB2375
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPresetResponseBody) GoString() string {
	return s.String()
}

func (s *SetPresetResponseBody) SetId(v string) *SetPresetResponseBody {
	s.Id = &v
	return s
}

func (s *SetPresetResponseBody) SetRequestId(v string) *SetPresetResponseBody {
	s.RequestId = &v
	return s
}

type SetPresetResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPresetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPresetResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPresetResponse) GoString() string {
	return s.String()
}

func (s *SetPresetResponse) SetHeaders(v map[string]*string) *SetPresetResponse {
	s.Headers = v
	return s
}

func (s *SetPresetResponse) SetStatusCode(v int32) *SetPresetResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPresetResponse) SetBody(v *SetPresetResponseBody) *SetPresetResponse {
	s.Body = v
	return s
}

type SetVsDomainCertificateRequest struct {
	// example:
	//
	// Cert-77****7
	CertName *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	// example:
	//
	// free
	CertType *string `json:"CertType,omitempty" xml:"CertType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 1
	ForceSet *string `json:"ForceSet,omitempty" xml:"ForceSet,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// xxxxxxx
	SSLPri *string `json:"SSLPri,omitempty" xml:"SSLPri,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// on
	SSLProtocol *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	// example:
	//
	// 328uiuii28****82dsada81
	SSLPub *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
}

func (s SetVsDomainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetVsDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *SetVsDomainCertificateRequest) SetCertName(v string) *SetVsDomainCertificateRequest {
	s.CertName = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetCertType(v string) *SetVsDomainCertificateRequest {
	s.CertType = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetDomainName(v string) *SetVsDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetForceSet(v string) *SetVsDomainCertificateRequest {
	s.ForceSet = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetOwnerId(v int64) *SetVsDomainCertificateRequest {
	s.OwnerId = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetRegion(v string) *SetVsDomainCertificateRequest {
	s.Region = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetSSLPri(v string) *SetVsDomainCertificateRequest {
	s.SSLPri = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetSSLProtocol(v string) *SetVsDomainCertificateRequest {
	s.SSLProtocol = &v
	return s
}

func (s *SetVsDomainCertificateRequest) SetSSLPub(v string) *SetVsDomainCertificateRequest {
	s.SSLPub = &v
	return s
}

type SetVsDomainCertificateResponseBody struct {
	// example:
	//
	// 119F7639-4646-51A4-B6C1-300D391C0104
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetVsDomainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetVsDomainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *SetVsDomainCertificateResponseBody) SetRequestId(v string) *SetVsDomainCertificateResponseBody {
	s.RequestId = &v
	return s
}

type SetVsDomainCertificateResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetVsDomainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetVsDomainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetVsDomainCertificateResponse) GoString() string {
	return s.String()
}

func (s *SetVsDomainCertificateResponse) SetHeaders(v map[string]*string) *SetVsDomainCertificateResponse {
	s.Headers = v
	return s
}

func (s *SetVsDomainCertificateResponse) SetStatusCode(v int32) *SetVsDomainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetVsDomainCertificateResponse) SetBody(v *SetVsDomainCertificateResponseBody) *SetVsDomainCertificateResponse {
	s.Body = v
	return s
}

type SetVsStreamsNotifyUrlConfigRequest struct {
	// example:
	//
	// ocs*****ace
	AuthKey *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	// example:
	//
	// type_a
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// http://xxx.com/xx
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SetVsStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetVsStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *SetVsStreamsNotifyUrlConfigRequest) SetAuthKey(v string) *SetVsStreamsNotifyUrlConfigRequest {
	s.AuthKey = &v
	return s
}

func (s *SetVsStreamsNotifyUrlConfigRequest) SetAuthType(v string) *SetVsStreamsNotifyUrlConfigRequest {
	s.AuthType = &v
	return s
}

func (s *SetVsStreamsNotifyUrlConfigRequest) SetDomainName(v string) *SetVsStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetVsStreamsNotifyUrlConfigRequest) SetNotifyUrl(v string) *SetVsStreamsNotifyUrlConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SetVsStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *SetVsStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

type SetVsStreamsNotifyUrlConfigResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetVsStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetVsStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetVsStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *SetVsStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetVsStreamsNotifyUrlConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetVsStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetVsStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetVsStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *SetVsStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *SetVsStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *SetVsStreamsNotifyUrlConfigResponse) SetStatusCode(v int32) *SetVsStreamsNotifyUrlConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetVsStreamsNotifyUrlConfigResponse) SetBody(v *SetVsStreamsNotifyUrlConfigResponseBody) *SetVsStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type StartDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323884****9092996
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StartDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDeviceRequest) GoString() string {
	return s.String()
}

func (s *StartDeviceRequest) SetId(v string) *StartDeviceRequest {
	s.Id = &v
	return s
}

func (s *StartDeviceRequest) SetOwnerId(v int64) *StartDeviceRequest {
	s.OwnerId = &v
	return s
}

type StartDeviceResponseBody struct {
	// example:
	//
	// 323884****9092996
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *StartDeviceResponseBody) SetId(v string) *StartDeviceResponseBody {
	s.Id = &v
	return s
}

func (s *StartDeviceResponseBody) SetRequestId(v string) *StartDeviceResponseBody {
	s.RequestId = &v
	return s
}

type StartDeviceResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDeviceResponse) GoString() string {
	return s.String()
}

func (s *StartDeviceResponse) SetHeaders(v map[string]*string) *StartDeviceResponse {
	s.Headers = v
	return s
}

func (s *StartDeviceResponse) SetStatusCode(v int32) *StartDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartDeviceResponse) SetBody(v *StartDeviceResponseBody) *StartDeviceResponse {
	s.Body = v
	return s
}

type StartParentPlatformRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 359*****374-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StartParentPlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s StartParentPlatformRequest) GoString() string {
	return s.String()
}

func (s *StartParentPlatformRequest) SetId(v string) *StartParentPlatformRequest {
	s.Id = &v
	return s
}

func (s *StartParentPlatformRequest) SetOwnerId(v int64) *StartParentPlatformRequest {
	s.OwnerId = &v
	return s
}

type StartParentPlatformResponseBody struct {
	// example:
	//
	// 359*****374-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartParentPlatformResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartParentPlatformResponseBody) GoString() string {
	return s.String()
}

func (s *StartParentPlatformResponseBody) SetId(v string) *StartParentPlatformResponseBody {
	s.Id = &v
	return s
}

func (s *StartParentPlatformResponseBody) SetRequestId(v string) *StartParentPlatformResponseBody {
	s.RequestId = &v
	return s
}

type StartParentPlatformResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartParentPlatformResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartParentPlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s StartParentPlatformResponse) GoString() string {
	return s.String()
}

func (s *StartParentPlatformResponse) SetHeaders(v map[string]*string) *StartParentPlatformResponse {
	s.Headers = v
	return s
}

func (s *StartParentPlatformResponse) SetStatusCode(v int32) *StartParentPlatformResponse {
	s.StatusCode = &v
	return s
}

func (s *StartParentPlatformResponse) SetBody(v *StartParentPlatformResponseBody) *StartParentPlatformResponse {
	s.Body = v
	return s
}

type StartPublishStreamRequest struct {
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PublishUrl *string `json:"PublishUrl,omitempty" xml:"PublishUrl,omitempty"`
}

func (s StartPublishStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StartPublishStreamRequest) GoString() string {
	return s.String()
}

func (s *StartPublishStreamRequest) SetInstanceId(v string) *StartPublishStreamRequest {
	s.InstanceId = &v
	return s
}

func (s *StartPublishStreamRequest) SetOwnerId(v int64) *StartPublishStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *StartPublishStreamRequest) SetPublishUrl(v string) *StartPublishStreamRequest {
	s.PublishUrl = &v
	return s
}

type StartPublishStreamResponseBody struct {
	Code      *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *int64  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartPublishStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartPublishStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StartPublishStreamResponseBody) SetCode(v int64) *StartPublishStreamResponseBody {
	s.Code = &v
	return s
}

func (s *StartPublishStreamResponseBody) SetMessage(v int64) *StartPublishStreamResponseBody {
	s.Message = &v
	return s
}

func (s *StartPublishStreamResponseBody) SetRequestId(v string) *StartPublishStreamResponseBody {
	s.RequestId = &v
	return s
}

type StartPublishStreamResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartPublishStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartPublishStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StartPublishStreamResponse) GoString() string {
	return s.String()
}

func (s *StartPublishStreamResponse) SetHeaders(v map[string]*string) *StartPublishStreamResponse {
	s.Headers = v
	return s
}

func (s *StartPublishStreamResponse) SetStatusCode(v int32) *StartPublishStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StartPublishStreamResponse) SetBody(v *StartPublishStreamResponseBody) *StartPublishStreamResponse {
	s.Body = v
	return s
}

type StartRecordStreamRequest struct {
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 310000*****000002
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// example.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
}

func (s StartRecordStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StartRecordStreamRequest) GoString() string {
	return s.String()
}

func (s *StartRecordStreamRequest) SetApp(v string) *StartRecordStreamRequest {
	s.App = &v
	return s
}

func (s *StartRecordStreamRequest) SetId(v string) *StartRecordStreamRequest {
	s.Id = &v
	return s
}

func (s *StartRecordStreamRequest) SetName(v string) *StartRecordStreamRequest {
	s.Name = &v
	return s
}

func (s *StartRecordStreamRequest) SetOwnerId(v int64) *StartRecordStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *StartRecordStreamRequest) SetPlayDomain(v string) *StartRecordStreamRequest {
	s.PlayDomain = &v
	return s
}

type StartRecordStreamResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartRecordStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartRecordStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StartRecordStreamResponseBody) SetRequestId(v string) *StartRecordStreamResponseBody {
	s.RequestId = &v
	return s
}

type StartRecordStreamResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartRecordStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartRecordStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StartRecordStreamResponse) GoString() string {
	return s.String()
}

func (s *StartRecordStreamResponse) SetHeaders(v map[string]*string) *StartRecordStreamResponse {
	s.Headers = v
	return s
}

func (s *StartRecordStreamResponse) SetStatusCode(v int32) *StartRecordStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StartRecordStreamResponse) SetBody(v *StartRecordStreamResponseBody) *StartRecordStreamResponse {
	s.Body = v
	return s
}

type StartStreamRequest struct {
	// example:
	//
	// 1599336385
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 323*****997-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 1589336385
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s StartStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StartStreamRequest) GoString() string {
	return s.String()
}

func (s *StartStreamRequest) SetEndTime(v int64) *StartStreamRequest {
	s.EndTime = &v
	return s
}

func (s *StartStreamRequest) SetId(v string) *StartStreamRequest {
	s.Id = &v
	return s
}

func (s *StartStreamRequest) SetOwnerId(v int64) *StartStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *StartStreamRequest) SetStartTime(v int64) *StartStreamRequest {
	s.StartTime = &v
	return s
}

type StartStreamResponseBody struct {
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 31000000000000000002
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StartStreamResponseBody) SetId(v string) *StartStreamResponseBody {
	s.Id = &v
	return s
}

func (s *StartStreamResponseBody) SetName(v string) *StartStreamResponseBody {
	s.Name = &v
	return s
}

func (s *StartStreamResponseBody) SetRequestId(v string) *StartStreamResponseBody {
	s.RequestId = &v
	return s
}

type StartStreamResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StartStreamResponse) GoString() string {
	return s.String()
}

func (s *StartStreamResponse) SetHeaders(v map[string]*string) *StartStreamResponse {
	s.Headers = v
	return s
}

func (s *StartStreamResponse) SetStatusCode(v int32) *StartStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StartStreamResponse) SetBody(v *StartStreamResponseBody) *StartStreamResponse {
	s.Body = v
	return s
}

type StartTransferStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****998-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// sd
	Transcode *string `json:"Transcode,omitempty" xml:"Transcode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s StartTransferStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StartTransferStreamRequest) GoString() string {
	return s.String()
}

func (s *StartTransferStreamRequest) SetId(v string) *StartTransferStreamRequest {
	s.Id = &v
	return s
}

func (s *StartTransferStreamRequest) SetOwnerId(v int64) *StartTransferStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *StartTransferStreamRequest) SetTranscode(v string) *StartTransferStreamRequest {
	s.Transcode = &v
	return s
}

func (s *StartTransferStreamRequest) SetUrl(v string) *StartTransferStreamRequest {
	s.Url = &v
	return s
}

type StartTransferStreamResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartTransferStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartTransferStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StartTransferStreamResponseBody) SetRequestId(v string) *StartTransferStreamResponseBody {
	s.RequestId = &v
	return s
}

type StartTransferStreamResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartTransferStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartTransferStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StartTransferStreamResponse) GoString() string {
	return s.String()
}

func (s *StartTransferStreamResponse) SetHeaders(v map[string]*string) *StartTransferStreamResponse {
	s.Headers = v
	return s
}

func (s *StartTransferStreamResponse) SetStatusCode(v int32) *StartTransferStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StartTransferStreamResponse) SetBody(v *StartTransferStreamResponseBody) *StartTransferStreamResponse {
	s.Body = v
	return s
}

type StopAdjustRequest struct {
	// example:
	//
	// true
	Focus *bool `json:"Focus,omitempty" xml:"Focus,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// true
	Iris    *bool  `json:"Iris,omitempty" xml:"Iris,omitempty"`
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StopAdjustRequest) String() string {
	return tea.Prettify(s)
}

func (s StopAdjustRequest) GoString() string {
	return s.String()
}

func (s *StopAdjustRequest) SetFocus(v bool) *StopAdjustRequest {
	s.Focus = &v
	return s
}

func (s *StopAdjustRequest) SetId(v string) *StopAdjustRequest {
	s.Id = &v
	return s
}

func (s *StopAdjustRequest) SetIris(v bool) *StopAdjustRequest {
	s.Iris = &v
	return s
}

func (s *StopAdjustRequest) SetOwnerId(v int64) *StopAdjustRequest {
	s.OwnerId = &v
	return s
}

type StopAdjustResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopAdjustResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopAdjustResponseBody) GoString() string {
	return s.String()
}

func (s *StopAdjustResponseBody) SetId(v string) *StopAdjustResponseBody {
	s.Id = &v
	return s
}

func (s *StopAdjustResponseBody) SetRequestId(v string) *StopAdjustResponseBody {
	s.RequestId = &v
	return s
}

type StopAdjustResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopAdjustResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopAdjustResponse) String() string {
	return tea.Prettify(s)
}

func (s StopAdjustResponse) GoString() string {
	return s.String()
}

func (s *StopAdjustResponse) SetHeaders(v map[string]*string) *StopAdjustResponse {
	s.Headers = v
	return s
}

func (s *StopAdjustResponse) SetStatusCode(v int32) *StopAdjustResponse {
	s.StatusCode = &v
	return s
}

func (s *StopAdjustResponse) SetBody(v *StopAdjustResponseBody) *StopAdjustResponse {
	s.Body = v
	return s
}

type StopDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-12-10T10:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s StopDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDeviceRequest) GoString() string {
	return s.String()
}

func (s *StopDeviceRequest) SetId(v string) *StopDeviceRequest {
	s.Id = &v
	return s
}

func (s *StopDeviceRequest) SetOwnerId(v int64) *StopDeviceRequest {
	s.OwnerId = &v
	return s
}

func (s *StopDeviceRequest) SetStartTime(v string) *StopDeviceRequest {
	s.StartTime = &v
	return s
}

type StopDeviceResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *StopDeviceResponseBody) SetId(v string) *StopDeviceResponseBody {
	s.Id = &v
	return s
}

func (s *StopDeviceResponseBody) SetRequestId(v string) *StopDeviceResponseBody {
	s.RequestId = &v
	return s
}

type StopDeviceResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDeviceResponse) GoString() string {
	return s.String()
}

func (s *StopDeviceResponse) SetHeaders(v map[string]*string) *StopDeviceResponse {
	s.Headers = v
	return s
}

func (s *StopDeviceResponse) SetStatusCode(v int32) *StopDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopDeviceResponse) SetBody(v *StopDeviceResponseBody) *StopDeviceResponse {
	s.Body = v
	return s
}

type StopMoveRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// true
	Pan *bool `json:"Pan,omitempty" xml:"Pan,omitempty"`
	// example:
	//
	// true
	Tilt *bool `json:"Tilt,omitempty" xml:"Tilt,omitempty"`
	// example:
	//
	// true
	Zoom *bool `json:"Zoom,omitempty" xml:"Zoom,omitempty"`
}

func (s StopMoveRequest) String() string {
	return tea.Prettify(s)
}

func (s StopMoveRequest) GoString() string {
	return s.String()
}

func (s *StopMoveRequest) SetId(v string) *StopMoveRequest {
	s.Id = &v
	return s
}

func (s *StopMoveRequest) SetOwnerId(v int64) *StopMoveRequest {
	s.OwnerId = &v
	return s
}

func (s *StopMoveRequest) SetPan(v bool) *StopMoveRequest {
	s.Pan = &v
	return s
}

func (s *StopMoveRequest) SetTilt(v bool) *StopMoveRequest {
	s.Tilt = &v
	return s
}

func (s *StopMoveRequest) SetZoom(v bool) *StopMoveRequest {
	s.Zoom = &v
	return s
}

type StopMoveResponseBody struct {
	// example:
	//
	// 348*****380-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopMoveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopMoveResponseBody) GoString() string {
	return s.String()
}

func (s *StopMoveResponseBody) SetId(v string) *StopMoveResponseBody {
	s.Id = &v
	return s
}

func (s *StopMoveResponseBody) SetRequestId(v string) *StopMoveResponseBody {
	s.RequestId = &v
	return s
}

type StopMoveResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopMoveResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopMoveResponse) String() string {
	return tea.Prettify(s)
}

func (s StopMoveResponse) GoString() string {
	return s.String()
}

func (s *StopMoveResponse) SetHeaders(v map[string]*string) *StopMoveResponse {
	s.Headers = v
	return s
}

func (s *StopMoveResponse) SetStatusCode(v int32) *StopMoveResponse {
	s.StatusCode = &v
	return s
}

func (s *StopMoveResponse) SetBody(v *StopMoveResponseBody) *StopMoveResponse {
	s.Body = v
	return s
}

type StopPublishStreamRequest struct {
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StopPublishStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StopPublishStreamRequest) GoString() string {
	return s.String()
}

func (s *StopPublishStreamRequest) SetInstanceId(v string) *StopPublishStreamRequest {
	s.InstanceId = &v
	return s
}

func (s *StopPublishStreamRequest) SetOwnerId(v int64) *StopPublishStreamRequest {
	s.OwnerId = &v
	return s
}

type StopPublishStreamResponseBody struct {
	Code      *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *int64  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopPublishStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopPublishStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StopPublishStreamResponseBody) SetCode(v int64) *StopPublishStreamResponseBody {
	s.Code = &v
	return s
}

func (s *StopPublishStreamResponseBody) SetMessage(v int64) *StopPublishStreamResponseBody {
	s.Message = &v
	return s
}

func (s *StopPublishStreamResponseBody) SetRequestId(v string) *StopPublishStreamResponseBody {
	s.RequestId = &v
	return s
}

type StopPublishStreamResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopPublishStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopPublishStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StopPublishStreamResponse) GoString() string {
	return s.String()
}

func (s *StopPublishStreamResponse) SetHeaders(v map[string]*string) *StopPublishStreamResponse {
	s.Headers = v
	return s
}

func (s *StopPublishStreamResponse) SetStatusCode(v int32) *StopPublishStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StopPublishStreamResponse) SetBody(v *StopPublishStreamResponseBody) *StopPublishStreamResponse {
	s.Body = v
	return s
}

type StopRecordStreamRequest struct {
	// example:
	//
	// live
	App *string `json:"App,omitempty" xml:"App,omitempty"`
	// example:
	//
	// 323*****997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// test
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// example.com
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
}

func (s StopRecordStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StopRecordStreamRequest) GoString() string {
	return s.String()
}

func (s *StopRecordStreamRequest) SetApp(v string) *StopRecordStreamRequest {
	s.App = &v
	return s
}

func (s *StopRecordStreamRequest) SetId(v string) *StopRecordStreamRequest {
	s.Id = &v
	return s
}

func (s *StopRecordStreamRequest) SetName(v string) *StopRecordStreamRequest {
	s.Name = &v
	return s
}

func (s *StopRecordStreamRequest) SetOwnerId(v int64) *StopRecordStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *StopRecordStreamRequest) SetPlayDomain(v string) *StopRecordStreamRequest {
	s.PlayDomain = &v
	return s
}

type StopRecordStreamResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopRecordStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopRecordStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StopRecordStreamResponseBody) SetRequestId(v string) *StopRecordStreamResponseBody {
	s.RequestId = &v
	return s
}

type StopRecordStreamResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopRecordStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopRecordStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StopRecordStreamResponse) GoString() string {
	return s.String()
}

func (s *StopRecordStreamResponse) SetHeaders(v map[string]*string) *StopRecordStreamResponse {
	s.Headers = v
	return s
}

func (s *StopRecordStreamResponse) SetStatusCode(v int32) *StopRecordStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StopRecordStreamResponse) SetBody(v *StopRecordStreamResponseBody) *StopRecordStreamResponse {
	s.Body = v
	return s
}

type StopStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 32388487****92997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 31000000*****0000002
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 2021-12-12T10:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s StopStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StopStreamRequest) GoString() string {
	return s.String()
}

func (s *StopStreamRequest) SetId(v string) *StopStreamRequest {
	s.Id = &v
	return s
}

func (s *StopStreamRequest) SetName(v string) *StopStreamRequest {
	s.Name = &v
	return s
}

func (s *StopStreamRequest) SetOwnerId(v int64) *StopStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *StopStreamRequest) SetStartTime(v string) *StopStreamRequest {
	s.StartTime = &v
	return s
}

type StopStreamResponseBody struct {
	// example:
	//
	// 32388487****92997-cn-qingdao
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StopStreamResponseBody) SetId(v string) *StopStreamResponseBody {
	s.Id = &v
	return s
}

func (s *StopStreamResponseBody) SetRequestId(v string) *StopStreamResponseBody {
	s.RequestId = &v
	return s
}

type StopStreamResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StopStreamResponse) GoString() string {
	return s.String()
}

func (s *StopStreamResponse) SetHeaders(v map[string]*string) *StopStreamResponse {
	s.Headers = v
	return s
}

func (s *StopStreamResponse) SetStatusCode(v int32) *StopStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StopStreamResponse) SetBody(v *StopStreamResponseBody) *StopStreamResponse {
	s.Body = v
	return s
}

type StopTransferStreamRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323434****83423432
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// sd
	Transcode *string `json:"Transcode,omitempty" xml:"Transcode,omitempty"`
}

func (s StopTransferStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s StopTransferStreamRequest) GoString() string {
	return s.String()
}

func (s *StopTransferStreamRequest) SetId(v string) *StopTransferStreamRequest {
	s.Id = &v
	return s
}

func (s *StopTransferStreamRequest) SetOwnerId(v int64) *StopTransferStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *StopTransferStreamRequest) SetTranscode(v string) *StopTransferStreamRequest {
	s.Transcode = &v
	return s
}

type StopTransferStreamResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopTransferStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopTransferStreamResponseBody) GoString() string {
	return s.String()
}

func (s *StopTransferStreamResponseBody) SetRequestId(v string) *StopTransferStreamResponseBody {
	s.RequestId = &v
	return s
}

type StopTransferStreamResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopTransferStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopTransferStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s StopTransferStreamResponse) GoString() string {
	return s.String()
}

func (s *StopTransferStreamResponse) SetHeaders(v map[string]*string) *StopTransferStreamResponse {
	s.Headers = v
	return s
}

func (s *StopTransferStreamResponse) SetStatusCode(v int32) *StopTransferStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *StopTransferStreamResponse) SetBody(v *StopTransferStreamResponseBody) *StopTransferStreamResponse {
	s.Body = v
	return s
}

type SyncCatalogsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3238****739092996
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SyncCatalogsRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncCatalogsRequest) GoString() string {
	return s.String()
}

func (s *SyncCatalogsRequest) SetId(v string) *SyncCatalogsRequest {
	s.Id = &v
	return s
}

func (s *SyncCatalogsRequest) SetOwnerId(v int64) *SyncCatalogsRequest {
	s.OwnerId = &v
	return s
}

type SyncCatalogsResponseBody struct {
	// example:
	//
	// 3238****739092996
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SyncCatalogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncCatalogsResponseBody) GoString() string {
	return s.String()
}

func (s *SyncCatalogsResponseBody) SetId(v string) *SyncCatalogsResponseBody {
	s.Id = &v
	return s
}

func (s *SyncCatalogsResponseBody) SetRequestId(v string) *SyncCatalogsResponseBody {
	s.RequestId = &v
	return s
}

type SyncCatalogsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SyncCatalogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SyncCatalogsResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncCatalogsResponse) GoString() string {
	return s.String()
}

func (s *SyncCatalogsResponse) SetHeaders(v map[string]*string) *SyncCatalogsResponse {
	s.Headers = v
	return s
}

func (s *SyncCatalogsResponse) SetStatusCode(v int32) *SyncCatalogsResponse {
	s.StatusCode = &v
	return s
}

func (s *SyncCatalogsResponse) SetBody(v *SyncCatalogsResponseBody) *SyncCatalogsResponse {
	s.Body = v
	return s
}

type UnbindDirectoryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 34871************3380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3998**************9488-cn-qingdao
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UnbindDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindDirectoryRequest) GoString() string {
	return s.String()
}

func (s *UnbindDirectoryRequest) SetDeviceId(v string) *UnbindDirectoryRequest {
	s.DeviceId = &v
	return s
}

func (s *UnbindDirectoryRequest) SetDirectoryId(v string) *UnbindDirectoryRequest {
	s.DirectoryId = &v
	return s
}

func (s *UnbindDirectoryRequest) SetOwnerId(v int64) *UnbindDirectoryRequest {
	s.OwnerId = &v
	return s
}

type UnbindDirectoryResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindDirectoryResponseBody) SetRequestId(v string) *UnbindDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type UnbindDirectoryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindDirectoryResponse) GoString() string {
	return s.String()
}

func (s *UnbindDirectoryResponse) SetHeaders(v map[string]*string) *UnbindDirectoryResponse {
	s.Headers = v
	return s
}

func (s *UnbindDirectoryResponse) SetStatusCode(v int32) *UnbindDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindDirectoryResponse) SetBody(v *UnbindDirectoryResponseBody) *UnbindDirectoryResponse {
	s.Body = v
	return s
}

type UnbindParentPlatformDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 348*****380-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 361*****212-cn-qingdao
	ParentPlatformId *string `json:"ParentPlatformId,omitempty" xml:"ParentPlatformId,omitempty"`
}

func (s UnbindParentPlatformDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindParentPlatformDeviceRequest) GoString() string {
	return s.String()
}

func (s *UnbindParentPlatformDeviceRequest) SetDeviceId(v string) *UnbindParentPlatformDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *UnbindParentPlatformDeviceRequest) SetOwnerId(v int64) *UnbindParentPlatformDeviceRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindParentPlatformDeviceRequest) SetParentPlatformId(v string) *UnbindParentPlatformDeviceRequest {
	s.ParentPlatformId = &v
	return s
}

type UnbindParentPlatformDeviceResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindParentPlatformDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindParentPlatformDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindParentPlatformDeviceResponseBody) SetRequestId(v string) *UnbindParentPlatformDeviceResponseBody {
	s.RequestId = &v
	return s
}

type UnbindParentPlatformDeviceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindParentPlatformDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindParentPlatformDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindParentPlatformDeviceResponse) GoString() string {
	return s.String()
}

func (s *UnbindParentPlatformDeviceResponse) SetHeaders(v map[string]*string) *UnbindParentPlatformDeviceResponse {
	s.Headers = v
	return s
}

func (s *UnbindParentPlatformDeviceResponse) SetStatusCode(v int32) *UnbindParentPlatformDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindParentPlatformDeviceResponse) SetBody(v *UnbindParentPlatformDeviceResponseBody) *UnbindParentPlatformDeviceResponse {
	s.Body = v
	return s
}

type UnbindPurchasedDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3939*****6580539-cn-qingdao
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UnbindPurchasedDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindPurchasedDeviceRequest) GoString() string {
	return s.String()
}

func (s *UnbindPurchasedDeviceRequest) SetDeviceId(v string) *UnbindPurchasedDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *UnbindPurchasedDeviceRequest) SetOwnerId(v int64) *UnbindPurchasedDeviceRequest {
	s.OwnerId = &v
	return s
}

type UnbindPurchasedDeviceResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindPurchasedDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindPurchasedDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindPurchasedDeviceResponseBody) SetRequestId(v string) *UnbindPurchasedDeviceResponseBody {
	s.RequestId = &v
	return s
}

type UnbindPurchasedDeviceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindPurchasedDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindPurchasedDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindPurchasedDeviceResponse) GoString() string {
	return s.String()
}

func (s *UnbindPurchasedDeviceResponse) SetHeaders(v map[string]*string) *UnbindPurchasedDeviceResponse {
	s.Headers = v
	return s
}

func (s *UnbindPurchasedDeviceResponse) SetStatusCode(v int32) *UnbindPurchasedDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindPurchasedDeviceResponse) SetBody(v *UnbindPurchasedDeviceResponseBody) *UnbindPurchasedDeviceResponse {
	s.Body = v
	return s
}

type UnbindTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// record
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s UnbindTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindTemplateRequest) GoString() string {
	return s.String()
}

func (s *UnbindTemplateRequest) SetInstanceId(v string) *UnbindTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *UnbindTemplateRequest) SetInstanceType(v string) *UnbindTemplateRequest {
	s.InstanceType = &v
	return s
}

func (s *UnbindTemplateRequest) SetOwnerId(v int64) *UnbindTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindTemplateRequest) SetTemplateId(v string) *UnbindTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UnbindTemplateRequest) SetTemplateType(v string) *UnbindTemplateRequest {
	s.TemplateType = &v
	return s
}

type UnbindTemplateResponseBody struct {
	// example:
	//
	// 323*****994-cn-qingdao
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// group
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 323*****998-cn-qingdao
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// record
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s UnbindTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindTemplateResponseBody) SetInstanceId(v string) *UnbindTemplateResponseBody {
	s.InstanceId = &v
	return s
}

func (s *UnbindTemplateResponseBody) SetInstanceType(v string) *UnbindTemplateResponseBody {
	s.InstanceType = &v
	return s
}

func (s *UnbindTemplateResponseBody) SetRequestId(v string) *UnbindTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindTemplateResponseBody) SetTemplateId(v string) *UnbindTemplateResponseBody {
	s.TemplateId = &v
	return s
}

func (s *UnbindTemplateResponseBody) SetTemplateType(v string) *UnbindTemplateResponseBody {
	s.TemplateType = &v
	return s
}

type UnbindTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindTemplateResponse) GoString() string {
	return s.String()
}

func (s *UnbindTemplateResponse) SetHeaders(v map[string]*string) *UnbindTemplateResponse {
	s.Headers = v
	return s
}

func (s *UnbindTemplateResponse) SetStatusCode(v int32) *UnbindTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindTemplateResponse) SetBody(v *UnbindTemplateResponseBody) *UnbindTemplateResponse {
	s.Body = v
	return s
}

type UninstallCloudAppRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s UninstallCloudAppRequest) String() string {
	return tea.Prettify(s)
}

func (s UninstallCloudAppRequest) GoString() string {
	return s.String()
}

func (s *UninstallCloudAppRequest) SetAppId(v string) *UninstallCloudAppRequest {
	s.AppId = &v
	return s
}

func (s *UninstallCloudAppRequest) SetRenderingInstanceId(v string) *UninstallCloudAppRequest {
	s.RenderingInstanceId = &v
	return s
}

type UninstallCloudAppResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UninstallCloudAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UninstallCloudAppResponseBody) GoString() string {
	return s.String()
}

func (s *UninstallCloudAppResponseBody) SetRequestId(v string) *UninstallCloudAppResponseBody {
	s.RequestId = &v
	return s
}

type UninstallCloudAppResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UninstallCloudAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UninstallCloudAppResponse) String() string {
	return tea.Prettify(s)
}

func (s UninstallCloudAppResponse) GoString() string {
	return s.String()
}

func (s *UninstallCloudAppResponse) SetHeaders(v map[string]*string) *UninstallCloudAppResponse {
	s.Headers = v
	return s
}

func (s *UninstallCloudAppResponse) SetStatusCode(v int32) *UninstallCloudAppResponse {
	s.StatusCode = &v
	return s
}

func (s *UninstallCloudAppResponse) SetBody(v *UninstallCloudAppResponseBody) *UninstallCloudAppResponse {
	s.Body = v
	return s
}

type UnlockDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 323884****9092996
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UnlockDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnlockDeviceRequest) GoString() string {
	return s.String()
}

func (s *UnlockDeviceRequest) SetId(v string) *UnlockDeviceRequest {
	s.Id = &v
	return s
}

func (s *UnlockDeviceRequest) SetOwnerId(v int64) *UnlockDeviceRequest {
	s.OwnerId = &v
	return s
}

type UnlockDeviceResponseBody struct {
	// example:
	//
	// 323884****9092996
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnlockDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnlockDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *UnlockDeviceResponseBody) SetId(v string) *UnlockDeviceResponseBody {
	s.Id = &v
	return s
}

func (s *UnlockDeviceResponseBody) SetRequestId(v string) *UnlockDeviceResponseBody {
	s.RequestId = &v
	return s
}

type UnlockDeviceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnlockDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnlockDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnlockDeviceResponse) GoString() string {
	return s.String()
}

func (s *UnlockDeviceResponse) SetHeaders(v map[string]*string) *UnlockDeviceResponse {
	s.Headers = v
	return s
}

func (s *UnlockDeviceResponse) SetStatusCode(v int32) *UnlockDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *UnlockDeviceResponse) SetBody(v *UnlockDeviceResponseBody) *UnlockDeviceResponse {
	s.Body = v
	return s
}

type UpdateCloudAppInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s UpdateCloudAppInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCloudAppInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateCloudAppInfoRequest) SetAppId(v string) *UpdateCloudAppInfoRequest {
	s.AppId = &v
	return s
}

func (s *UpdateCloudAppInfoRequest) SetDescription(v string) *UpdateCloudAppInfoRequest {
	s.Description = &v
	return s
}

type UpdateCloudAppInfoResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCloudAppInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCloudAppInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCloudAppInfoResponseBody) SetRequestId(v string) *UpdateCloudAppInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCloudAppInfoResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCloudAppInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCloudAppInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCloudAppInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateCloudAppInfoResponse) SetHeaders(v map[string]*string) *UpdateCloudAppInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateCloudAppInfoResponse) SetStatusCode(v int32) *UpdateCloudAppInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCloudAppInfoResponse) SetBody(v *UpdateCloudAppInfoResponseBody) *UpdateCloudAppInfoResponse {
	s.Body = v
	return s
}

type UpdateClusterRequest struct {
	// This parameter is required.
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EffectiveTime   *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	InternalPorts   *string `json:"InternalPorts,omitempty" xml:"InternalPorts,omitempty"`
	MaintainTime    *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s UpdateClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateClusterRequest) GoString() string {
	return s.String()
}

func (s *UpdateClusterRequest) SetClusterId(v string) *UpdateClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateClusterRequest) SetDescription(v string) *UpdateClusterRequest {
	s.Description = &v
	return s
}

func (s *UpdateClusterRequest) SetEffectiveTime(v string) *UpdateClusterRequest {
	s.EffectiveTime = &v
	return s
}

func (s *UpdateClusterRequest) SetInternalPorts(v string) *UpdateClusterRequest {
	s.InternalPorts = &v
	return s
}

func (s *UpdateClusterRequest) SetMaintainTime(v string) *UpdateClusterRequest {
	s.MaintainTime = &v
	return s
}

func (s *UpdateClusterRequest) SetName(v string) *UpdateClusterRequest {
	s.Name = &v
	return s
}

func (s *UpdateClusterRequest) SetOwnerId(v int64) *UpdateClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateClusterRequest) SetSecurityGroupId(v string) *UpdateClusterRequest {
	s.SecurityGroupId = &v
	return s
}

type UpdateClusterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateClusterResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateClusterResponseBody) SetRequestId(v string) *UpdateClusterResponseBody {
	s.RequestId = &v
	return s
}

type UpdateClusterResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateClusterResponse) GoString() string {
	return s.String()
}

func (s *UpdateClusterResponse) SetHeaders(v map[string]*string) *UpdateClusterResponse {
	s.Headers = v
	return s
}

func (s *UpdateClusterResponse) SetStatusCode(v int32) *UpdateClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateClusterResponse) SetBody(v *UpdateClusterResponseBody) *UpdateClusterResponse {
	s.Body = v
	return s
}

type UpdateFileInfoRequest struct {
	// This parameter is required.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// f-16713accddtgtj6340jgnclhwsg1813f718db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s UpdateFileInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateFileInfoRequest) SetDescription(v string) *UpdateFileInfoRequest {
	s.Description = &v
	return s
}

func (s *UpdateFileInfoRequest) SetFileId(v string) *UpdateFileInfoRequest {
	s.FileId = &v
	return s
}

type UpdateFileInfoResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateFileInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFileInfoResponseBody) SetRequestId(v string) *UpdateFileInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateFileInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFileInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFileInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateFileInfoResponse) SetHeaders(v map[string]*string) *UpdateFileInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateFileInfoResponse) SetStatusCode(v int32) *UpdateFileInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFileInfoResponse) SetBody(v *UpdateFileInfoResponseBody) *UpdateFileInfoResponse {
	s.Body = v
	return s
}

type UpdateRenderingInstanceConfigurationRequest struct {
	// This parameter is required.
	Configuration []*UpdateRenderingInstanceConfigurationRequestConfiguration `json:"Configuration,omitempty" xml:"Configuration,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s UpdateRenderingInstanceConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRenderingInstanceConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateRenderingInstanceConfigurationRequest) SetConfiguration(v []*UpdateRenderingInstanceConfigurationRequestConfiguration) *UpdateRenderingInstanceConfigurationRequest {
	s.Configuration = v
	return s
}

func (s *UpdateRenderingInstanceConfigurationRequest) SetRenderingInstanceId(v string) *UpdateRenderingInstanceConfigurationRequest {
	s.RenderingInstanceId = &v
	return s
}

type UpdateRenderingInstanceConfigurationRequestConfiguration struct {
	// This parameter is required.
	Attributes []*UpdateRenderingInstanceConfigurationRequestConfigurationAttributes `json:"Attributes,omitempty" xml:"Attributes,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// location
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s UpdateRenderingInstanceConfigurationRequestConfiguration) String() string {
	return tea.Prettify(s)
}

func (s UpdateRenderingInstanceConfigurationRequestConfiguration) GoString() string {
	return s.String()
}

func (s *UpdateRenderingInstanceConfigurationRequestConfiguration) SetAttributes(v []*UpdateRenderingInstanceConfigurationRequestConfigurationAttributes) *UpdateRenderingInstanceConfigurationRequestConfiguration {
	s.Attributes = v
	return s
}

func (s *UpdateRenderingInstanceConfigurationRequestConfiguration) SetModuleName(v string) *UpdateRenderingInstanceConfigurationRequestConfiguration {
	s.ModuleName = &v
	return s
}

type UpdateRenderingInstanceConfigurationRequestConfigurationAttributes struct {
	// This parameter is required.
	//
	// example:
	//
	// lon
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateRenderingInstanceConfigurationRequestConfigurationAttributes) String() string {
	return tea.Prettify(s)
}

func (s UpdateRenderingInstanceConfigurationRequestConfigurationAttributes) GoString() string {
	return s.String()
}

func (s *UpdateRenderingInstanceConfigurationRequestConfigurationAttributes) SetName(v string) *UpdateRenderingInstanceConfigurationRequestConfigurationAttributes {
	s.Name = &v
	return s
}

func (s *UpdateRenderingInstanceConfigurationRequestConfigurationAttributes) SetValue(v interface{}) *UpdateRenderingInstanceConfigurationRequestConfigurationAttributes {
	s.Value = v
	return s
}

type UpdateRenderingInstanceConfigurationShrinkRequest struct {
	// This parameter is required.
	ConfigurationShrink *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// render-9f8c57355d224ad7beaf95e145f22111
	RenderingInstanceId *string `json:"RenderingInstanceId,omitempty" xml:"RenderingInstanceId,omitempty"`
}

func (s UpdateRenderingInstanceConfigurationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRenderingInstanceConfigurationShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateRenderingInstanceConfigurationShrinkRequest) SetConfigurationShrink(v string) *UpdateRenderingInstanceConfigurationShrinkRequest {
	s.ConfigurationShrink = &v
	return s
}

func (s *UpdateRenderingInstanceConfigurationShrinkRequest) SetRenderingInstanceId(v string) *UpdateRenderingInstanceConfigurationShrinkRequest {
	s.RenderingInstanceId = &v
	return s
}

type UpdateRenderingInstanceConfigurationResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateRenderingInstanceConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRenderingInstanceConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRenderingInstanceConfigurationResponseBody) SetRequestId(v string) *UpdateRenderingInstanceConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type UpdateRenderingInstanceConfigurationResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRenderingInstanceConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRenderingInstanceConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRenderingInstanceConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateRenderingInstanceConfigurationResponse) SetHeaders(v map[string]*string) *UpdateRenderingInstanceConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateRenderingInstanceConfigurationResponse) SetStatusCode(v int32) *UpdateRenderingInstanceConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRenderingInstanceConfigurationResponse) SetBody(v *UpdateRenderingInstanceConfigurationResponseBody) *UpdateRenderingInstanceConfigurationResponse {
	s.Body = v
	return s
}

type UpdateVsPullStreamInfoConfigRequest struct {
	Always *string `json:"Always,omitempty" xml:"Always,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2018-12-10T18:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// up.xxx.com.cn
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	// example:
	//
	// 2021-12-10T10:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxStream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s UpdateVsPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateVsPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetAlways(v string) *UpdateVsPullStreamInfoConfigRequest {
	s.Always = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetAppName(v string) *UpdateVsPullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetDomainName(v string) *UpdateVsPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetEndTime(v string) *UpdateVsPullStreamInfoConfigRequest {
	s.EndTime = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetOwnerId(v int64) *UpdateVsPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetSourceUrl(v string) *UpdateVsPullStreamInfoConfigRequest {
	s.SourceUrl = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetStartTime(v string) *UpdateVsPullStreamInfoConfigRequest {
	s.StartTime = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigRequest) SetStreamName(v string) *UpdateVsPullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

type UpdateVsPullStreamInfoConfigResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateVsPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateVsPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateVsPullStreamInfoConfigResponseBody) SetRequestId(v string) *UpdateVsPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateVsPullStreamInfoConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateVsPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateVsPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateVsPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateVsPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *UpdateVsPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateVsPullStreamInfoConfigResponse) SetStatusCode(v int32) *UpdateVsPullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateVsPullStreamInfoConfigResponse) SetBody(v *UpdateVsPullStreamInfoConfigResponseBody) *UpdateVsPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type UploadCloudAppRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// com.aaa.bbb
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1.1.1
	AppVersion  *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://xxx.xxx.xxx.apk
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0CFBB7BD10CDD7279642ADAB8FEF3DEE
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
}

func (s UploadCloudAppRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadCloudAppRequest) GoString() string {
	return s.String()
}

func (s *UploadCloudAppRequest) SetAppName(v string) *UploadCloudAppRequest {
	s.AppName = &v
	return s
}

func (s *UploadCloudAppRequest) SetAppVersion(v string) *UploadCloudAppRequest {
	s.AppVersion = &v
	return s
}

func (s *UploadCloudAppRequest) SetDescription(v string) *UploadCloudAppRequest {
	s.Description = &v
	return s
}

func (s *UploadCloudAppRequest) SetDownloadUrl(v string) *UploadCloudAppRequest {
	s.DownloadUrl = &v
	return s
}

func (s *UploadCloudAppRequest) SetMd5(v string) *UploadCloudAppRequest {
	s.Md5 = &v
	return s
}

type UploadCloudAppResponseBody struct {
	// example:
	//
	// cap-b06b26edfhytbn b94a75ae1a79efc90eb
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadCloudAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadCloudAppResponseBody) GoString() string {
	return s.String()
}

func (s *UploadCloudAppResponseBody) SetAppId(v string) *UploadCloudAppResponseBody {
	s.AppId = &v
	return s
}

func (s *UploadCloudAppResponseBody) SetRequestId(v string) *UploadCloudAppResponseBody {
	s.RequestId = &v
	return s
}

type UploadCloudAppResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadCloudAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadCloudAppResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadCloudAppResponse) GoString() string {
	return s.String()
}

func (s *UploadCloudAppResponse) SetHeaders(v map[string]*string) *UploadCloudAppResponse {
	s.Headers = v
	return s
}

func (s *UploadCloudAppResponse) SetStatusCode(v int32) *UploadCloudAppResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadCloudAppResponse) SetBody(v *UploadCloudAppResponseBody) *UploadCloudAppResponse {
	s.Body = v
	return s
}

type UploadFileRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mytest
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 150b6083f50dd08159d45a0d5e4b56f9
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://xxx.xxx.xxx.tar
	OriginUrl *string `json:"OriginUrl,omitempty" xml:"OriginUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// /data/tmp/test/xxx.tar
	TargetPath *string `json:"TargetPath,omitempty" xml:"TargetPath,omitempty"`
}

func (s UploadFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadFileRequest) GoString() string {
	return s.String()
}

func (s *UploadFileRequest) SetDescription(v string) *UploadFileRequest {
	s.Description = &v
	return s
}

func (s *UploadFileRequest) SetFileName(v string) *UploadFileRequest {
	s.FileName = &v
	return s
}

func (s *UploadFileRequest) SetMd5(v string) *UploadFileRequest {
	s.Md5 = &v
	return s
}

func (s *UploadFileRequest) SetOriginUrl(v string) *UploadFileRequest {
	s.OriginUrl = &v
	return s
}

func (s *UploadFileRequest) SetTargetPath(v string) *UploadFileRequest {
	s.TargetPath = &v
	return s
}

type UploadFileResponseBody struct {
	// example:
	//
	// f-1671330gr7934d4771813f7141d28db2f7
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadFileResponseBody) GoString() string {
	return s.String()
}

func (s *UploadFileResponseBody) SetFileId(v string) *UploadFileResponseBody {
	s.FileId = &v
	return s
}

func (s *UploadFileResponseBody) SetRequestId(v string) *UploadFileResponseBody {
	s.RequestId = &v
	return s
}

type UploadFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadFileResponse) GoString() string {
	return s.String()
}

func (s *UploadFileResponse) SetHeaders(v map[string]*string) *UploadFileResponse {
	s.Headers = v
	return s
}

func (s *UploadFileResponse) SetStatusCode(v int32) *UploadFileResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadFileResponse) SetBody(v *UploadFileResponseBody) *UploadFileResponse {
	s.Body = v
	return s
}

type UploadPublicKeyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// verify_dffeb6610035dcb77b413a59c3*****
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// g-test
	KeyGroup *string `json:"KeyGroup,omitempty" xml:"KeyGroup,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mykey-v1.0
	KeyName *string `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
}

func (s UploadPublicKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadPublicKeyRequest) GoString() string {
	return s.String()
}

func (s *UploadPublicKeyRequest) SetContent(v string) *UploadPublicKeyRequest {
	s.Content = &v
	return s
}

func (s *UploadPublicKeyRequest) SetDescription(v string) *UploadPublicKeyRequest {
	s.Description = &v
	return s
}

func (s *UploadPublicKeyRequest) SetKeyGroup(v string) *UploadPublicKeyRequest {
	s.KeyGroup = &v
	return s
}

func (s *UploadPublicKeyRequest) SetKeyName(v string) *UploadPublicKeyRequest {
	s.KeyName = &v
	return s
}

func (s *UploadPublicKeyRequest) SetKeyType(v string) *UploadPublicKeyRequest {
	s.KeyType = &v
	return s
}

type UploadPublicKeyResponseBody struct {
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadPublicKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadPublicKeyResponseBody) GoString() string {
	return s.String()
}

func (s *UploadPublicKeyResponseBody) SetRequestId(v string) *UploadPublicKeyResponseBody {
	s.RequestId = &v
	return s
}

type UploadPublicKeyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadPublicKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadPublicKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadPublicKeyResponse) GoString() string {
	return s.String()
}

func (s *UploadPublicKeyResponse) SetHeaders(v map[string]*string) *UploadPublicKeyResponse {
	s.Headers = v
	return s
}

func (s *UploadPublicKeyResponse) SetStatusCode(v int32) *UploadPublicKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadPublicKeyResponse) SetBody(v *UploadPublicKeyResponseBody) *UploadPublicKeyResponse {
	s.Body = v
	return s
}

type VerifyVsDomainOwnerRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// example.aliyundoc.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dnsCheck
	VerifyType *string `json:"VerifyType,omitempty" xml:"VerifyType,omitempty"`
}

func (s VerifyVsDomainOwnerRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyVsDomainOwnerRequest) GoString() string {
	return s.String()
}

func (s *VerifyVsDomainOwnerRequest) SetDomainName(v string) *VerifyVsDomainOwnerRequest {
	s.DomainName = &v
	return s
}

func (s *VerifyVsDomainOwnerRequest) SetOwnerId(v int64) *VerifyVsDomainOwnerRequest {
	s.OwnerId = &v
	return s
}

func (s *VerifyVsDomainOwnerRequest) SetVerifyType(v string) *VerifyVsDomainOwnerRequest {
	s.VerifyType = &v
	return s
}

type VerifyVsDomainOwnerResponseBody struct {
	// example:
	//
	// verify_dffeb6610035dcb77b413a59c32c****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// BEA5625F-8FCF-48F4-851B-CA63946DA664
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s VerifyVsDomainOwnerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyVsDomainOwnerResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyVsDomainOwnerResponseBody) SetContent(v string) *VerifyVsDomainOwnerResponseBody {
	s.Content = &v
	return s
}

func (s *VerifyVsDomainOwnerResponseBody) SetRequestId(v string) *VerifyVsDomainOwnerResponseBody {
	s.RequestId = &v
	return s
}

type VerifyVsDomainOwnerResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *VerifyVsDomainOwnerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s VerifyVsDomainOwnerResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyVsDomainOwnerResponse) GoString() string {
	return s.String()
}

func (s *VerifyVsDomainOwnerResponse) SetHeaders(v map[string]*string) *VerifyVsDomainOwnerResponse {
	s.Headers = v
	return s
}

func (s *VerifyVsDomainOwnerResponse) SetStatusCode(v int32) *VerifyVsDomainOwnerResponse {
	s.StatusCode = &v
	return s
}

func (s *VerifyVsDomainOwnerResponse) SetBody(v *VerifyVsDomainOwnerResponseBody) *VerifyVsDomainOwnerResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("regional")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("vs"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddVsPullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddVsPullStreamInfoConfigResponse
func (client *Client) AddVsPullStreamInfoConfigWithOptions(request *AddVsPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *AddVsPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Always)) {
		query["Always"] = request.Always
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceUrl)) {
		query["SourceUrl"] = request.SourceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddVsPullStreamInfoConfig"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddVsPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddVsPullStreamInfoConfigRequest
//
// @return AddVsPullStreamInfoConfigResponse
func (client *Client) AddVsPullStreamInfoConfig(request *AddVsPullStreamInfoConfigRequest) (_result *AddVsPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddVsPullStreamInfoConfigResponse{}
	_body, _err := client.AddVsPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchBindDirectoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchBindDirectoriesResponse
func (client *Client) BatchBindDirectoriesWithOptions(request *BatchBindDirectoriesRequest, runtime *util.RuntimeOptions) (_result *BatchBindDirectoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchBindDirectories"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchBindDirectoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchBindDirectoriesRequest
//
// @return BatchBindDirectoriesResponse
func (client *Client) BatchBindDirectories(request *BatchBindDirectoriesRequest) (_result *BatchBindDirectoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindDirectoriesResponse{}
	_body, _err := client.BatchBindDirectoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchBindParentPlatformDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchBindParentPlatformDevicesResponse
func (client *Client) BatchBindParentPlatformDevicesWithOptions(request *BatchBindParentPlatformDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchBindParentPlatformDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentPlatformId)) {
		query["ParentPlatformId"] = request.ParentPlatformId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchBindParentPlatformDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchBindParentPlatformDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchBindParentPlatformDevicesRequest
//
// @return BatchBindParentPlatformDevicesResponse
func (client *Client) BatchBindParentPlatformDevices(request *BatchBindParentPlatformDevicesRequest) (_result *BatchBindParentPlatformDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindParentPlatformDevicesResponse{}
	_body, _err := client.BatchBindParentPlatformDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchBindPurchasedDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchBindPurchasedDevicesResponse
func (client *Client) BatchBindPurchasedDevicesWithOptions(request *BatchBindPurchasedDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchBindPurchasedDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchBindPurchasedDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchBindPurchasedDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchBindPurchasedDevicesRequest
//
// @return BatchBindPurchasedDevicesResponse
func (client *Client) BatchBindPurchasedDevices(request *BatchBindPurchasedDevicesRequest) (_result *BatchBindPurchasedDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindPurchasedDevicesResponse{}
	_body, _err := client.BatchBindPurchasedDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchBindTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchBindTemplateResponse
func (client *Client) BatchBindTemplateWithOptions(request *BatchBindTemplateRequest, runtime *util.RuntimeOptions) (_result *BatchBindTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyAll)) {
		query["ApplyAll"] = request.ApplyAll
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Replace)) {
		query["Replace"] = request.Replace
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchBindTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchBindTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchBindTemplateRequest
//
// @return BatchBindTemplateResponse
func (client *Client) BatchBindTemplate(request *BatchBindTemplateRequest) (_result *BatchBindTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindTemplateResponse{}
	_body, _err := client.BatchBindTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchBindTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchBindTemplatesResponse
func (client *Client) BatchBindTemplatesWithOptions(request *BatchBindTemplatesRequest, runtime *util.RuntimeOptions) (_result *BatchBindTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyAll)) {
		query["ApplyAll"] = request.ApplyAll
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Replace)) {
		query["Replace"] = request.Replace
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchBindTemplates"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchBindTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchBindTemplatesRequest
//
// @return BatchBindTemplatesResponse
func (client *Client) BatchBindTemplates(request *BatchBindTemplatesRequest) (_result *BatchBindTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindTemplatesResponse{}
	_body, _err := client.BatchBindTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchDeleteDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchDeleteDevicesResponse
func (client *Client) BatchDeleteDevicesWithOptions(request *BatchDeleteDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeleteDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeleteDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchDeleteDevicesRequest
//
// @return BatchDeleteDevicesResponse
func (client *Client) BatchDeleteDevices(request *BatchDeleteDevicesRequest) (_result *BatchDeleteDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteDevicesResponse{}
	_body, _err := client.BatchDeleteDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchDeleteVsDomainConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchDeleteVsDomainConfigsResponse
func (client *Client) BatchDeleteVsDomainConfigsWithOptions(request *BatchDeleteVsDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteVsDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainNames)) {
		query["DomainNames"] = request.DomainNames
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionNames)) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeleteVsDomainConfigs"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeleteVsDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchDeleteVsDomainConfigsRequest
//
// @return BatchDeleteVsDomainConfigsResponse
func (client *Client) BatchDeleteVsDomainConfigs(request *BatchDeleteVsDomainConfigsRequest) (_result *BatchDeleteVsDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteVsDomainConfigsResponse{}
	_body, _err := client.BatchDeleteVsDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchForbidVsStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchForbidVsStreamResponse
func (client *Client) BatchForbidVsStreamWithOptions(request *BatchForbidVsStreamRequest, runtime *util.RuntimeOptions) (_result *BatchForbidVsStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.ControlStreamAction)) {
		query["ControlStreamAction"] = request.ControlStreamAction
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamType)) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !tea.BoolValue(util.IsUnset(request.Oneshot)) {
		query["Oneshot"] = request.Oneshot
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResumeTime)) {
		query["ResumeTime"] = request.ResumeTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchForbidVsStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchForbidVsStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchForbidVsStreamRequest
//
// @return BatchForbidVsStreamResponse
func (client *Client) BatchForbidVsStream(request *BatchForbidVsStreamRequest) (_result *BatchForbidVsStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchForbidVsStreamResponse{}
	_body, _err := client.BatchForbidVsStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchResumeVsStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchResumeVsStreamResponse
func (client *Client) BatchResumeVsStreamWithOptions(request *BatchResumeVsStreamRequest, runtime *util.RuntimeOptions) (_result *BatchResumeVsStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.ControlStreamAction)) {
		query["ControlStreamAction"] = request.ControlStreamAction
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamType)) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchResumeVsStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchResumeVsStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchResumeVsStreamRequest
//
// @return BatchResumeVsStreamResponse
func (client *Client) BatchResumeVsStream(request *BatchResumeVsStreamRequest) (_result *BatchResumeVsStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchResumeVsStreamResponse{}
	_body, _err := client.BatchResumeVsStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchSetVsDomainConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchSetVsDomainConfigsResponse
func (client *Client) BatchSetVsDomainConfigsWithOptions(request *BatchSetVsDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchSetVsDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainNames)) {
		query["DomainNames"] = request.DomainNames
	}

	if !tea.BoolValue(util.IsUnset(request.Functions)) {
		query["Functions"] = request.Functions
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchSetVsDomainConfigs"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchSetVsDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchSetVsDomainConfigsRequest
//
// @return BatchSetVsDomainConfigsResponse
func (client *Client) BatchSetVsDomainConfigs(request *BatchSetVsDomainConfigsRequest) (_result *BatchSetVsDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchSetVsDomainConfigsResponse{}
	_body, _err := client.BatchSetVsDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchStartDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchStartDevicesResponse
func (client *Client) BatchStartDevicesWithOptions(request *BatchStartDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchStartDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchStartDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchStartDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchStartDevicesRequest
//
// @return BatchStartDevicesResponse
func (client *Client) BatchStartDevices(request *BatchStartDevicesRequest) (_result *BatchStartDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchStartDevicesResponse{}
	_body, _err := client.BatchStartDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchStartStreamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchStartStreamsResponse
func (client *Client) BatchStartStreamsWithOptions(request *BatchStartStreamsRequest, runtime *util.RuntimeOptions) (_result *BatchStartStreamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchStartStreams"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchStartStreamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchStartStreamsRequest
//
// @return BatchStartStreamsResponse
func (client *Client) BatchStartStreams(request *BatchStartStreamsRequest) (_result *BatchStartStreamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchStartStreamsResponse{}
	_body, _err := client.BatchStartStreamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchStopDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchStopDevicesResponse
func (client *Client) BatchStopDevicesWithOptions(request *BatchStopDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchStopDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchStopDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchStopDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchStopDevicesRequest
//
// @return BatchStopDevicesResponse
func (client *Client) BatchStopDevices(request *BatchStopDevicesRequest) (_result *BatchStopDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchStopDevicesResponse{}
	_body, _err := client.BatchStopDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchStopStreamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchStopStreamsResponse
func (client *Client) BatchStopStreamsWithOptions(request *BatchStopStreamsRequest, runtime *util.RuntimeOptions) (_result *BatchStopStreamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchStopStreams"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchStopStreamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchStopStreamsRequest
//
// @return BatchStopStreamsResponse
func (client *Client) BatchStopStreams(request *BatchStopStreamsRequest) (_result *BatchStopStreamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchStopStreamsResponse{}
	_body, _err := client.BatchStopStreamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchUnbindDirectoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUnbindDirectoriesResponse
func (client *Client) BatchUnbindDirectoriesWithOptions(request *BatchUnbindDirectoriesRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindDirectoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUnbindDirectories"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUnbindDirectoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchUnbindDirectoriesRequest
//
// @return BatchUnbindDirectoriesResponse
func (client *Client) BatchUnbindDirectories(request *BatchUnbindDirectoriesRequest) (_result *BatchUnbindDirectoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindDirectoriesResponse{}
	_body, _err := client.BatchUnbindDirectoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchUnbindParentPlatformDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUnbindParentPlatformDevicesResponse
func (client *Client) BatchUnbindParentPlatformDevicesWithOptions(request *BatchUnbindParentPlatformDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindParentPlatformDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentPlatformId)) {
		query["ParentPlatformId"] = request.ParentPlatformId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUnbindParentPlatformDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUnbindParentPlatformDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchUnbindParentPlatformDevicesRequest
//
// @return BatchUnbindParentPlatformDevicesResponse
func (client *Client) BatchUnbindParentPlatformDevices(request *BatchUnbindParentPlatformDevicesRequest) (_result *BatchUnbindParentPlatformDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindParentPlatformDevicesResponse{}
	_body, _err := client.BatchUnbindParentPlatformDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchUnbindPurchasedDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUnbindPurchasedDevicesResponse
func (client *Client) BatchUnbindPurchasedDevicesWithOptions(request *BatchUnbindPurchasedDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindPurchasedDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUnbindPurchasedDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUnbindPurchasedDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchUnbindPurchasedDevicesRequest
//
// @return BatchUnbindPurchasedDevicesResponse
func (client *Client) BatchUnbindPurchasedDevices(request *BatchUnbindPurchasedDevicesRequest) (_result *BatchUnbindPurchasedDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindPurchasedDevicesResponse{}
	_body, _err := client.BatchUnbindPurchasedDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchUnbindTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUnbindTemplateResponse
func (client *Client) BatchUnbindTemplateWithOptions(request *BatchUnbindTemplateRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUnbindTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUnbindTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchUnbindTemplateRequest
//
// @return BatchUnbindTemplateResponse
func (client *Client) BatchUnbindTemplate(request *BatchUnbindTemplateRequest) (_result *BatchUnbindTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindTemplateResponse{}
	_body, _err := client.BatchUnbindTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchUnbindTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUnbindTemplatesResponse
func (client *Client) BatchUnbindTemplatesWithOptions(request *BatchUnbindTemplatesRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUnbindTemplates"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUnbindTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchUnbindTemplatesRequest
//
// @return BatchUnbindTemplatesResponse
func (client *Client) BatchUnbindTemplates(request *BatchUnbindTemplatesRequest) (_result *BatchUnbindTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindTemplatesResponse{}
	_body, _err := client.BatchUnbindTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindDirectoryResponse
func (client *Client) BindDirectoryWithOptions(request *BindDirectoryRequest, runtime *util.RuntimeOptions) (_result *BindDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindDirectory"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindDirectoryRequest
//
// @return BindDirectoryResponse
func (client *Client) BindDirectory(request *BindDirectoryRequest) (_result *BindDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindDirectoryResponse{}
	_body, _err := client.BindDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindParentPlatformDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindParentPlatformDeviceResponse
func (client *Client) BindParentPlatformDeviceWithOptions(request *BindParentPlatformDeviceRequest, runtime *util.RuntimeOptions) (_result *BindParentPlatformDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentPlatformId)) {
		query["ParentPlatformId"] = request.ParentPlatformId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindParentPlatformDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindParentPlatformDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindParentPlatformDeviceRequest
//
// @return BindParentPlatformDeviceResponse
func (client *Client) BindParentPlatformDevice(request *BindParentPlatformDeviceRequest) (_result *BindParentPlatformDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindParentPlatformDeviceResponse{}
	_body, _err := client.BindParentPlatformDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindPurchasedDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindPurchasedDeviceResponse
func (client *Client) BindPurchasedDeviceWithOptions(request *BindPurchasedDeviceRequest, runtime *util.RuntimeOptions) (_result *BindPurchasedDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindPurchasedDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindPurchasedDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindPurchasedDeviceRequest
//
// @return BindPurchasedDeviceResponse
func (client *Client) BindPurchasedDevice(request *BindPurchasedDeviceRequest) (_result *BindPurchasedDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindPurchasedDeviceResponse{}
	_body, _err := client.BindPurchasedDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindTemplateResponse
func (client *Client) BindTemplateWithOptions(request *BindTemplateRequest, runtime *util.RuntimeOptions) (_result *BindTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyAll)) {
		query["ApplyAll"] = request.ApplyAll
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Replace)) {
		query["Replace"] = request.Replace
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindTemplateRequest
//
// @return BindTemplateResponse
func (client *Client) BindTemplate(request *BindTemplateRequest) (_result *BindTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindTemplateResponse{}
	_body, _err := client.BindTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ContinuousAdjustRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ContinuousAdjustResponse
func (client *Client) ContinuousAdjustWithOptions(request *ContinuousAdjustRequest, runtime *util.RuntimeOptions) (_result *ContinuousAdjustResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Focus)) {
		query["Focus"] = request.Focus
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Iris)) {
		query["Iris"] = request.Iris
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ContinuousAdjust"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ContinuousAdjustResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ContinuousAdjustRequest
//
// @return ContinuousAdjustResponse
func (client *Client) ContinuousAdjust(request *ContinuousAdjustRequest) (_result *ContinuousAdjustResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ContinuousAdjustResponse{}
	_body, _err := client.ContinuousAdjustWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ContinuousMoveRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ContinuousMoveResponse
func (client *Client) ContinuousMoveWithOptions(request *ContinuousMoveRequest, runtime *util.RuntimeOptions) (_result *ContinuousMoveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Pan)) {
		query["Pan"] = request.Pan
	}

	if !tea.BoolValue(util.IsUnset(request.Tilt)) {
		query["Tilt"] = request.Tilt
	}

	if !tea.BoolValue(util.IsUnset(request.Zoom)) {
		query["Zoom"] = request.Zoom
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ContinuousMove"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ContinuousMoveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ContinuousMoveRequest
//
// @return ContinuousMoveResponse
func (client *Client) ContinuousMove(request *ContinuousMoveRequest) (_result *ContinuousMoveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ContinuousMoveResponse{}
	_body, _err := client.ContinuousMoveWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateClusterResponse
func (client *Client) CreateClusterWithOptions(request *CreateClusterRequest, runtime *util.RuntimeOptions) (_result *CreateClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InternalPorts)) {
		query["InternalPorts"] = request.InternalPorts
	}

	if !tea.BoolValue(util.IsUnset(request.MaintainTime)) {
		query["MaintainTime"] = request.MaintainTime
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCluster"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateClusterRequest
//
// @return CreateClusterResponse
func (client *Client) CreateCluster(request *CreateClusterRequest) (_result *CreateClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterResponse{}
	_body, _err := client.CreateClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDeviceResponse
func (client *Client) CreateDeviceWithOptions(request *CreateDeviceRequest, runtime *util.RuntimeOptions) (_result *CreateDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmMethod)) {
		query["AlarmMethod"] = request.AlarmMethod
	}

	if !tea.BoolValue(util.IsUnset(request.AutoDirectory)) {
		query["AutoDirectory"] = request.AutoDirectory
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPos)) {
		query["AutoPos"] = request.AutoPos
	}

	if !tea.BoolValue(util.IsUnset(request.AutoStart)) {
		query["AutoStart"] = request.AutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Dsn)) {
		query["Dsn"] = request.Dsn
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		query["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Latitude)) {
		query["Latitude"] = request.Latitude
	}

	if !tea.BoolValue(util.IsUnset(request.Longitude)) {
		query["Longitude"] = request.Longitude
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.PosInterval)) {
		query["PosInterval"] = request.PosInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateDeviceRequest
//
// @return CreateDeviceResponse
func (client *Client) CreateDevice(request *CreateDeviceRequest) (_result *CreateDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeviceResponse{}
	_body, _err := client.CreateDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateDeviceAlarmRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDeviceAlarmResponse
func (client *Client) CreateDeviceAlarmWithOptions(request *CreateDeviceAlarmRequest, runtime *util.RuntimeOptions) (_result *CreateDeviceAlarmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Alarm)) {
		query["Alarm"] = request.Alarm
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Expire)) {
		query["Expire"] = request.Expire
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectType)) {
		query["ObjectType"] = request.ObjectType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SubAlarm)) {
		query["SubAlarm"] = request.SubAlarm
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDeviceAlarm"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDeviceAlarmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateDeviceAlarmRequest
//
// @return CreateDeviceAlarmResponse
func (client *Client) CreateDeviceAlarm(request *CreateDeviceAlarmRequest) (_result *CreateDeviceAlarmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeviceAlarmResponse{}
	_body, _err := client.CreateDeviceAlarmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDirectoryResponse
func (client *Client) CreateDirectoryWithOptions(request *CreateDirectoryRequest, runtime *util.RuntimeOptions) (_result *CreateDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDirectory"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateDirectoryRequest
//
// @return CreateDirectoryResponse
func (client *Client) CreateDirectory(request *CreateDirectoryRequest) (_result *CreateDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDirectoryResponse{}
	_body, _err := client.CreateDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateGroupResponse
func (client *Client) CreateGroupWithOptions(request *CreateGroupRequest, runtime *util.RuntimeOptions) (_result *CreateGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InProtocol)) {
		query["InProtocol"] = request.InProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LazyPull)) {
		query["LazyPull"] = request.LazyPull
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutProtocol)) {
		query["OutProtocol"] = request.OutProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlayDomain)) {
		query["PlayDomain"] = request.PlayDomain
	}

	if !tea.BoolValue(util.IsUnset(request.PushDomain)) {
		query["PushDomain"] = request.PushDomain
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGroup"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateGroupRequest
//
// @return CreateGroupResponse
func (client *Client) CreateGroup(request *CreateGroupRequest) (_result *CreateGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGroupResponse{}
	_body, _err := client.CreateGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateParentPlatformRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateParentPlatformResponse
func (client *Client) CreateParentPlatformWithOptions(request *CreateParentPlatformRequest, runtime *util.RuntimeOptions) (_result *CreateParentPlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoStart)) {
		query["AutoStart"] = request.AutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.ClientAuth)) {
		query["ClientAuth"] = request.ClientAuth
	}

	if !tea.BoolValue(util.IsUnset(request.ClientPassword)) {
		query["ClientPassword"] = request.ClientPassword
	}

	if !tea.BoolValue(util.IsUnset(request.ClientUsername)) {
		query["ClientUsername"] = request.ClientUsername
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		query["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateParentPlatform"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateParentPlatformResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateParentPlatformRequest
//
// @return CreateParentPlatformResponse
func (client *Client) CreateParentPlatform(request *CreateParentPlatformRequest) (_result *CreateParentPlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateParentPlatformResponse{}
	_body, _err := client.CreateParentPlatformWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 申请云渲染资源实例
//
// @param tmpReq - CreateRenderingInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRenderingInstanceResponse
func (client *Client) CreateRenderingInstanceWithOptions(tmpReq *CreateRenderingInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateRenderingInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateRenderingInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ClientInfo)) {
		request.ClientInfoShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ClientInfo, tea.String("ClientInfo"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.ClientInfoShrink)) {
		query["ClientInfo"] = request.ClientInfoShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidth)) {
		query["InternetMaxBandwidth"] = request.InternetMaxBandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RenderingSpec)) {
		query["RenderingSpec"] = request.RenderingSpec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRenderingInstance"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRenderingInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 申请云渲染资源实例
//
// @param request - CreateRenderingInstanceRequest
//
// @return CreateRenderingInstanceResponse
func (client *Client) CreateRenderingInstance(request *CreateRenderingInstanceRequest) (_result *CreateRenderingInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRenderingInstanceResponse{}
	_body, _err := client.CreateRenderingInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateStreamSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStreamSnapshotResponse
func (client *Client) CreateStreamSnapshotWithOptions(request *CreateStreamSnapshotRequest, runtime *util.RuntimeOptions) (_result *CreateStreamSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		query["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStreamSnapshot"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateStreamSnapshotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateStreamSnapshotRequest
//
// @return CreateStreamSnapshotResponse
func (client *Client) CreateStreamSnapshot(request *CreateStreamSnapshotRequest) (_result *CreateStreamSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStreamSnapshotResponse{}
	_body, _err := client.CreateStreamSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTemplateResponse
func (client *Client) CreateTemplateWithOptions(request *CreateTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FileFormat)) {
		query["FileFormat"] = request.FileFormat
	}

	if !tea.BoolValue(util.IsUnset(request.Flv)) {
		query["Flv"] = request.Flv
	}

	if !tea.BoolValue(util.IsUnset(request.HlsM3u8)) {
		query["HlsM3u8"] = request.HlsM3u8
	}

	if !tea.BoolValue(util.IsUnset(request.HlsTs)) {
		query["HlsTs"] = request.HlsTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.JpgOnDemand)) {
		query["JpgOnDemand"] = request.JpgOnDemand
	}

	if !tea.BoolValue(util.IsUnset(request.JpgOverwrite)) {
		query["JpgOverwrite"] = request.JpgOverwrite
	}

	if !tea.BoolValue(util.IsUnset(request.JpgSequence)) {
		query["JpgSequence"] = request.JpgSequence
	}

	if !tea.BoolValue(util.IsUnset(request.Mp4)) {
		query["Mp4"] = request.Mp4
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OssFilePrefix)) {
		query["OssFilePrefix"] = request.OssFilePrefix
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Retention)) {
		query["Retention"] = request.Retention
	}

	if !tea.BoolValue(util.IsUnset(request.TransConfigsJSON)) {
		query["TransConfigsJSON"] = request.TransConfigsJSON
	}

	if !tea.BoolValue(util.IsUnset(request.Trigger)) {
		query["Trigger"] = request.Trigger
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateTemplateRequest
//
// @return CreateTemplateResponse
func (client *Client) CreateTemplate(request *CreateTemplateRequest) (_result *CreateTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTemplateResponse{}
	_body, _err := client.CreateTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除云应用
//
// @param request - DeleteCloudAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCloudAppResponse
func (client *Client) DeleteCloudAppWithOptions(request *DeleteCloudAppRequest, runtime *util.RuntimeOptions) (_result *DeleteCloudAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCloudApp"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCloudAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除云应用
//
// @param request - DeleteCloudAppRequest
//
// @return DeleteCloudAppResponse
func (client *Client) DeleteCloudApp(request *DeleteCloudAppRequest) (_result *DeleteCloudAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCloudAppResponse{}
	_body, _err := client.DeleteCloudAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteClusterResponse
func (client *Client) DeleteClusterWithOptions(request *DeleteClusterRequest, runtime *util.RuntimeOptions) (_result *DeleteClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCluster"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteClusterRequest
//
// @return DeleteClusterResponse
func (client *Client) DeleteCluster(request *DeleteClusterRequest) (_result *DeleteClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteClusterResponse{}
	_body, _err := client.DeleteClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDeviceResponse
func (client *Client) DeleteDeviceWithOptions(request *DeleteDeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteDeviceRequest
//
// @return DeleteDeviceResponse
func (client *Client) DeleteDevice(request *DeleteDeviceRequest) (_result *DeleteDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.DeleteDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDirectoryResponse
func (client *Client) DeleteDirectoryWithOptions(request *DeleteDirectoryRequest, runtime *util.RuntimeOptions) (_result *DeleteDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDirectory"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteDirectoryRequest
//
// @return DeleteDirectoryResponse
func (client *Client) DeleteDirectory(request *DeleteDirectoryRequest) (_result *DeleteDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDirectoryResponse{}
	_body, _err := client.DeleteDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除文件对象。
//
// @param request - DeleteFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFileResponse
func (client *Client) DeleteFileWithOptions(request *DeleteFileRequest, runtime *util.RuntimeOptions) (_result *DeleteFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFile"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除文件对象。
//
// @param request - DeleteFileRequest
//
// @return DeleteFileResponse
func (client *Client) DeleteFile(request *DeleteFileRequest) (_result *DeleteFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFileResponse{}
	_body, _err := client.DeleteFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGroupResponse
func (client *Client) DeleteGroupWithOptions(request *DeleteGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGroup"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteGroupRequest
//
// @return DeleteGroupResponse
func (client *Client) DeleteGroup(request *DeleteGroupRequest) (_result *DeleteGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGroupResponse{}
	_body, _err := client.DeleteGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteParentPlatformRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteParentPlatformResponse
func (client *Client) DeleteParentPlatformWithOptions(request *DeleteParentPlatformRequest, runtime *util.RuntimeOptions) (_result *DeleteParentPlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteParentPlatform"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteParentPlatformResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteParentPlatformRequest
//
// @return DeleteParentPlatformResponse
func (client *Client) DeleteParentPlatform(request *DeleteParentPlatformRequest) (_result *DeleteParentPlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteParentPlatformResponse{}
	_body, _err := client.DeleteParentPlatformWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeletePresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePresetResponse
func (client *Client) DeletePresetWithOptions(request *DeletePresetRequest, runtime *util.RuntimeOptions) (_result *DeletePresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PresetId)) {
		query["PresetId"] = request.PresetId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePreset"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeletePresetRequest
//
// @return DeletePresetResponse
func (client *Client) DeletePreset(request *DeletePresetRequest) (_result *DeletePresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePresetResponse{}
	_body, _err := client.DeletePresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除公钥信息
//
// @param request - DeletePublicKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePublicKeyResponse
func (client *Client) DeletePublicKeyWithOptions(request *DeletePublicKeyRequest, runtime *util.RuntimeOptions) (_result *DeletePublicKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyName)) {
		query["KeyName"] = request.KeyName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePublicKey"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePublicKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除公钥信息
//
// @param request - DeletePublicKeyRequest
//
// @return DeletePublicKeyResponse
func (client *Client) DeletePublicKey(request *DeletePublicKeyRequest) (_result *DeletePublicKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePublicKeyResponse{}
	_body, _err := client.DeletePublicKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除云渲染实例配置参数
//
// @param tmpReq - DeleteRenderingInstanceConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRenderingInstanceConfigurationResponse
func (client *Client) DeleteRenderingInstanceConfigurationWithOptions(tmpReq *DeleteRenderingInstanceConfigurationRequest, runtime *util.RuntimeOptions) (_result *DeleteRenderingInstanceConfigurationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteRenderingInstanceConfigurationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Configuration)) {
		request.ConfigurationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Configuration, tea.String("Configuration"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigurationShrink)) {
		body["Configuration"] = request.ConfigurationShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRenderingInstanceConfiguration"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRenderingInstanceConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除云渲染实例配置参数
//
// @param request - DeleteRenderingInstanceConfigurationRequest
//
// @return DeleteRenderingInstanceConfigurationResponse
func (client *Client) DeleteRenderingInstanceConfiguration(request *DeleteRenderingInstanceConfigurationRequest) (_result *DeleteRenderingInstanceConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRenderingInstanceConfigurationResponse{}
	_body, _err := client.DeleteRenderingInstanceConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplateWithOptions(request *DeleteTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteTemplateRequest
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplate(request *DeleteTemplateRequest) (_result *DeleteTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.DeleteTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteVsPullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVsPullStreamInfoConfigResponse
func (client *Client) DeleteVsPullStreamInfoConfigWithOptions(request *DeleteVsPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteVsPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVsPullStreamInfoConfig"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVsPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteVsPullStreamInfoConfigRequest
//
// @return DeleteVsPullStreamInfoConfigResponse
func (client *Client) DeleteVsPullStreamInfoConfig(request *DeleteVsPullStreamInfoConfigRequest) (_result *DeleteVsPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVsPullStreamInfoConfigResponse{}
	_body, _err := client.DeleteVsPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteVsStreamsNotifyUrlConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVsStreamsNotifyUrlConfigResponse
func (client *Client) DeleteVsStreamsNotifyUrlConfigWithOptions(request *DeleteVsStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteVsStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVsStreamsNotifyUrlConfig"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVsStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteVsStreamsNotifyUrlConfigRequest
//
// @return DeleteVsStreamsNotifyUrlConfigResponse
func (client *Client) DeleteVsStreamsNotifyUrlConfig(request *DeleteVsStreamsNotifyUrlConfigRequest) (_result *DeleteVsStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVsStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DeleteVsStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAccountStatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAccountStatResponse
func (client *Client) DescribeAccountStatWithOptions(request *DescribeAccountStatRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountStatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccountStat"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccountStatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAccountStatRequest
//
// @return DescribeAccountStatResponse
func (client *Client) DescribeAccountStat(request *DescribeAccountStatRequest) (_result *DescribeAccountStatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountStatResponse{}
	_body, _err := client.DescribeAccountStatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterResponse
func (client *Client) DescribeClusterWithOptions(request *DescribeClusterRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCluster"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeClusterRequest
//
// @return DescribeClusterResponse
func (client *Client) DescribeCluster(request *DescribeClusterRequest) (_result *DescribeClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterResponse{}
	_body, _err := client.DescribeClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeClusterDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterDevicesResponse
func (client *Client) DescribeClusterDevicesWithOptions(request *DescribeClusterDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EdgeNodeName)) {
		query["EdgeNodeName"] = request.EdgeNodeName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeClusterDevicesRequest
//
// @return DescribeClusterDevicesResponse
func (client *Client) DescribeClusterDevices(request *DescribeClusterDevicesRequest) (_result *DescribeClusterDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterDevicesResponse{}
	_body, _err := client.DescribeClusterDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeClustersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClustersResponse
func (client *Client) DescribeClustersWithOptions(request *DescribeClustersRequest, runtime *util.RuntimeOptions) (_result *DescribeClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusters"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClustersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeClustersRequest
//
// @return DescribeClustersResponse
func (client *Client) DescribeClusters(request *DescribeClustersRequest) (_result *DescribeClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClustersResponse{}
	_body, _err := client.DescribeClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeContainerInstanceIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerInstanceIdResponse
func (client *Client) DescribeContainerInstanceIdWithOptions(request *DescribeContainerInstanceIdRequest, runtime *util.RuntimeOptions) (_result *DescribeContainerInstanceIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		query["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PodIndex)) {
		query["PodIndex"] = request.PodIndex
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContainerInstanceId"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContainerInstanceIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeContainerInstanceIdRequest
//
// @return DescribeContainerInstanceIdResponse
func (client *Client) DescribeContainerInstanceId(request *DescribeContainerInstanceIdRequest) (_result *DescribeContainerInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContainerInstanceIdResponse{}
	_body, _err := client.DescribeContainerInstanceIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeviceResponse
func (client *Client) DescribeDeviceWithOptions(request *DescribeDeviceRequest, runtime *util.RuntimeOptions) (_result *DescribeDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeDirectory)) {
		query["IncludeDirectory"] = request.IncludeDirectory
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeStats)) {
		query["IncludeStats"] = request.IncludeStats
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDeviceRequest
//
// @return DescribeDeviceResponse
func (client *Client) DescribeDevice(request *DescribeDeviceRequest) (_result *DescribeDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeviceResponse{}
	_body, _err := client.DescribeDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDeviceChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeviceChannelsResponse
func (client *Client) DescribeDeviceChannelsWithOptions(request *DescribeDeviceChannelsRequest, runtime *util.RuntimeOptions) (_result *DescribeDeviceChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeviceChannels"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeviceChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDeviceChannelsRequest
//
// @return DescribeDeviceChannelsResponse
func (client *Client) DescribeDeviceChannels(request *DescribeDeviceChannelsRequest) (_result *DescribeDeviceChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeviceChannelsResponse{}
	_body, _err := client.DescribeDeviceChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDeviceGatewayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeviceGatewayResponse
func (client *Client) DescribeDeviceGatewayWithOptions(request *DescribeDeviceGatewayRequest, runtime *util.RuntimeOptions) (_result *DescribeDeviceGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	if !tea.BoolValue(util.IsUnset(request.Expire)) {
		query["Expire"] = request.Expire
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeviceGateway"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeviceGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDeviceGatewayRequest
//
// @return DescribeDeviceGatewayResponse
func (client *Client) DescribeDeviceGateway(request *DescribeDeviceGatewayRequest) (_result *DescribeDeviceGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeviceGatewayResponse{}
	_body, _err := client.DescribeDeviceGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDeviceURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeviceURLResponse
func (client *Client) DescribeDeviceURLWithOptions(request *DescribeDeviceURLRequest, runtime *util.RuntimeOptions) (_result *DescribeDeviceURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Auth)) {
		query["Auth"] = request.Auth
	}

	if !tea.BoolValue(util.IsUnset(request.Expire)) {
		query["Expire"] = request.Expire
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.OutProtocol)) {
		query["OutProtocol"] = request.OutProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeviceURL"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeviceURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDeviceURLRequest
//
// @return DescribeDeviceURLResponse
func (client *Client) DescribeDeviceURL(request *DescribeDeviceURLRequest) (_result *DescribeDeviceURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeviceURLResponse{}
	_body, _err := client.DescribeDeviceURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDevicesResponse
func (client *Client) DescribeDevicesWithOptions(request *DescribeDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Dsn)) {
		query["Dsn"] = request.Dsn
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		query["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeDirectory)) {
		query["IncludeDirectory"] = request.IncludeDirectory
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeStats)) {
		query["IncludeStats"] = request.IncludeStats
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDevicesRequest
//
// @return DescribeDevicesResponse
func (client *Client) DescribeDevices(request *DescribeDevicesRequest) (_result *DescribeDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDevicesResponse{}
	_body, _err := client.DescribeDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDirectoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDirectoriesResponse
func (client *Client) DescribeDirectoriesWithOptions(request *DescribeDirectoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeDirectoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.NoPagination)) {
		query["NoPagination"] = request.NoPagination
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDirectories"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDirectoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDirectoriesRequest
//
// @return DescribeDirectoriesResponse
func (client *Client) DescribeDirectories(request *DescribeDirectoriesRequest) (_result *DescribeDirectoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDirectoriesResponse{}
	_body, _err := client.DescribeDirectoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDirectoryResponse
func (client *Client) DescribeDirectoryWithOptions(request *DescribeDirectoryRequest, runtime *util.RuntimeOptions) (_result *DescribeDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDirectory"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDirectoryRequest
//
// @return DescribeDirectoryResponse
func (client *Client) DescribeDirectory(request *DescribeDirectoryRequest) (_result *DescribeDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDirectoryResponse{}
	_body, _err := client.DescribeDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupResponse
func (client *Client) DescribeGroupWithOptions(request *DescribeGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeStats)) {
		query["IncludeStats"] = request.IncludeStats
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroup"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeGroupRequest
//
// @return DescribeGroupResponse
func (client *Client) DescribeGroup(request *DescribeGroupRequest) (_result *DescribeGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupResponse{}
	_body, _err := client.DescribeGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupsResponse
func (client *Client) DescribeGroupsWithOptions(request *DescribeGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InProtocol)) {
		query["InProtocol"] = request.InProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeStats)) {
		query["IncludeStats"] = request.IncludeStats
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroups"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeGroupsRequest
//
// @return DescribeGroupsResponse
func (client *Client) DescribeGroups(request *DescribeGroupsRequest) (_result *DescribeGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupsResponse{}
	_body, _err := client.DescribeGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeParentPlatformRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeParentPlatformResponse
func (client *Client) DescribeParentPlatformWithOptions(request *DescribeParentPlatformRequest, runtime *util.RuntimeOptions) (_result *DescribeParentPlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParentPlatform"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeParentPlatformResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeParentPlatformRequest
//
// @return DescribeParentPlatformResponse
func (client *Client) DescribeParentPlatform(request *DescribeParentPlatformRequest) (_result *DescribeParentPlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParentPlatformResponse{}
	_body, _err := client.DescribeParentPlatformWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeParentPlatformDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeParentPlatformDevicesResponse
func (client *Client) DescribeParentPlatformDevicesWithOptions(request *DescribeParentPlatformDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeParentPlatformDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParentPlatformDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeParentPlatformDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeParentPlatformDevicesRequest
//
// @return DescribeParentPlatformDevicesResponse
func (client *Client) DescribeParentPlatformDevices(request *DescribeParentPlatformDevicesRequest) (_result *DescribeParentPlatformDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParentPlatformDevicesResponse{}
	_body, _err := client.DescribeParentPlatformDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeParentPlatformsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeParentPlatformsResponse
func (client *Client) DescribeParentPlatformsWithOptions(request *DescribeParentPlatformsRequest, runtime *util.RuntimeOptions) (_result *DescribeParentPlatformsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		query["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParentPlatforms"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeParentPlatformsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeParentPlatformsRequest
//
// @return DescribeParentPlatformsResponse
func (client *Client) DescribeParentPlatforms(request *DescribeParentPlatformsRequest) (_result *DescribeParentPlatformsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParentPlatformsResponse{}
	_body, _err := client.DescribeParentPlatformsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePresetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePresetsResponse
func (client *Client) DescribePresetsWithOptions(request *DescribePresetsRequest, runtime *util.RuntimeOptions) (_result *DescribePresetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePresets"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePresetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePresetsRequest
//
// @return DescribePresetsResponse
func (client *Client) DescribePresets(request *DescribePresetsRequest) (_result *DescribePresetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePresetsResponse{}
	_body, _err := client.DescribePresetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePublishStreamStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePublishStreamStatusResponse
func (client *Client) DescribePublishStreamStatusWithOptions(request *DescribePublishStreamStatusRequest, runtime *util.RuntimeOptions) (_result *DescribePublishStreamStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePublishStreamStatus"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePublishStreamStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePublishStreamStatusRequest
//
// @return DescribePublishStreamStatusResponse
func (client *Client) DescribePublishStreamStatus(request *DescribePublishStreamStatusRequest) (_result *DescribePublishStreamStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePublishStreamStatusResponse{}
	_body, _err := client.DescribePublishStreamStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePurchasedDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePurchasedDeviceResponse
func (client *Client) DescribePurchasedDeviceWithOptions(request *DescribePurchasedDeviceRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePurchasedDeviceRequest
//
// @return DescribePurchasedDeviceResponse
func (client *Client) DescribePurchasedDevice(request *DescribePurchasedDeviceRequest) (_result *DescribePurchasedDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedDeviceResponse{}
	_body, _err := client.DescribePurchasedDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePurchasedDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePurchasedDevicesResponse
func (client *Client) DescribePurchasedDevicesWithOptions(request *DescribePurchasedDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SubType)) {
		query["SubType"] = request.SubType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePurchasedDevicesRequest
//
// @return DescribePurchasedDevicesResponse
func (client *Client) DescribePurchasedDevices(request *DescribePurchasedDevicesRequest) (_result *DescribePurchasedDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedDevicesResponse{}
	_body, _err := client.DescribePurchasedDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRecordsResponse
func (client *Client) DescribeRecordsWithOptions(request *DescribeRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateBucket)) {
		query["PrivateBucket"] = request.PrivateBucket
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamId)) {
		query["StreamId"] = request.StreamId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecords"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeRecordsRequest
//
// @return DescribeRecordsResponse
func (client *Client) DescribeRecords(request *DescribeRecordsRequest) (_result *DescribeRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecordsResponse{}
	_body, _err := client.DescribeRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询云渲染实例详细信息。
//
// @param request - DescribeRenderingInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRenderingInstanceResponse
func (client *Client) DescribeRenderingInstanceWithOptions(request *DescribeRenderingInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeRenderingInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRenderingInstance"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRenderingInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询云渲染实例详细信息。
//
// @param request - DescribeRenderingInstanceRequest
//
// @return DescribeRenderingInstanceResponse
func (client *Client) DescribeRenderingInstance(request *DescribeRenderingInstanceRequest) (_result *DescribeRenderingInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRenderingInstanceResponse{}
	_body, _err := client.DescribeRenderingInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询云渲染实例模块配置参数
//
// @param tmpReq - DescribeRenderingInstanceConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRenderingInstanceConfigurationResponse
func (client *Client) DescribeRenderingInstanceConfigurationWithOptions(tmpReq *DescribeRenderingInstanceConfigurationRequest, runtime *util.RuntimeOptions) (_result *DescribeRenderingInstanceConfigurationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRenderingInstanceConfigurationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Configuration)) {
		request.ConfigurationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Configuration, tea.String("Configuration"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRenderingInstanceConfiguration"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRenderingInstanceConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询云渲染实例模块配置参数
//
// @param request - DescribeRenderingInstanceConfigurationRequest
//
// @return DescribeRenderingInstanceConfigurationResponse
func (client *Client) DescribeRenderingInstanceConfiguration(request *DescribeRenderingInstanceConfigurationRequest) (_result *DescribeRenderingInstanceConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRenderingInstanceConfigurationResponse{}
	_body, _err := client.DescribeRenderingInstanceConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamResponse
func (client *Client) DescribeStreamWithOptions(request *DescribeStreamRequest, runtime *util.RuntimeOptions) (_result *DescribeStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeStreamRequest
//
// @return DescribeStreamResponse
func (client *Client) DescribeStream(request *DescribeStreamRequest) (_result *DescribeStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStreamResponse{}
	_body, _err := client.DescribeStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeStreamURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamURLResponse
func (client *Client) DescribeStreamURLWithOptions(request *DescribeStreamURLRequest, runtime *util.RuntimeOptions) (_result *DescribeStreamURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Auth)) {
		query["Auth"] = request.Auth
	}

	if !tea.BoolValue(util.IsUnset(request.AuthKey)) {
		query["AuthKey"] = request.AuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Expire)) {
		query["Expire"] = request.Expire
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OutProtocol)) {
		query["OutProtocol"] = request.OutProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Transcode)) {
		query["Transcode"] = request.Transcode
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStreamURL"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStreamURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeStreamURLRequest
//
// @return DescribeStreamURLResponse
func (client *Client) DescribeStreamURL(request *DescribeStreamURLRequest) (_result *DescribeStreamURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStreamURLResponse{}
	_body, _err := client.DescribeStreamURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeStreamVodListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamVodListResponse
func (client *Client) DescribeStreamVodListWithOptions(request *DescribeStreamVodListRequest, runtime *util.RuntimeOptions) (_result *DescribeStreamVodListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStreamVodList"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStreamVodListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeStreamVodListRequest
//
// @return DescribeStreamVodListResponse
func (client *Client) DescribeStreamVodList(request *DescribeStreamVodListRequest) (_result *DescribeStreamVodListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStreamVodListResponse{}
	_body, _err := client.DescribeStreamVodListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeStreamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamsResponse
func (client *Client) DescribeStreamsWithOptions(request *DescribeStreamsRequest, runtime *util.RuntimeOptions) (_result *DescribeStreamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStreams"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStreamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeStreamsRequest
//
// @return DescribeStreamsResponse
func (client *Client) DescribeStreams(request *DescribeStreamsRequest) (_result *DescribeStreamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStreamsResponse{}
	_body, _err := client.DescribeStreamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTemplateResponse
func (client *Client) DescribeTemplateWithOptions(request *DescribeTemplateRequest, runtime *util.RuntimeOptions) (_result *DescribeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTemplateRequest
//
// @return DescribeTemplateResponse
func (client *Client) DescribeTemplate(request *DescribeTemplateRequest) (_result *DescribeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTemplateResponse{}
	_body, _err := client.DescribeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTemplatesResponse
func (client *Client) DescribeTemplatesWithOptions(request *DescribeTemplatesRequest, runtime *util.RuntimeOptions) (_result *DescribeTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortDirection)) {
		query["SortDirection"] = request.SortDirection
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTemplates"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTemplatesRequest
//
// @return DescribeTemplatesResponse
func (client *Client) DescribeTemplates(request *DescribeTemplatesRequest) (_result *DescribeTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTemplatesResponse{}
	_body, _err := client.DescribeTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeUserDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserDevicesResponse
func (client *Client) DescribeUserDevicesWithOptions(request *DescribeUserDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeUserDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsInstanceIds)) {
		query["EnsInstanceIds"] = request.EnsInstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServerName)) {
		query["ServerName"] = request.ServerName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserDevices"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeUserDevicesRequest
//
// @return DescribeUserDevicesResponse
func (client *Client) DescribeUserDevices(request *DescribeUserDevicesRequest) (_result *DescribeUserDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserDevicesResponse{}
	_body, _err := client.DescribeUserDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVodStreamURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVodStreamURLResponse
func (client *Client) DescribeVodStreamURLWithOptions(request *DescribeVodStreamURLRequest, runtime *util.RuntimeOptions) (_result *DescribeVodStreamURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVodStreamURL"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVodStreamURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVodStreamURLRequest
//
// @return DescribeVodStreamURLResponse
func (client *Client) DescribeVodStreamURL(request *DescribeVodStreamURLRequest) (_result *DescribeVodStreamURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVodStreamURLResponse{}
	_body, _err := client.DescribeVodStreamURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsCertificateDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsCertificateDetailResponse
func (client *Client) DescribeVsCertificateDetailWithOptions(request *DescribeVsCertificateDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeVsCertificateDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertName)) {
		query["CertName"] = request.CertName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsCertificateDetail"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsCertificateDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsCertificateDetailRequest
//
// @return DescribeVsCertificateDetailResponse
func (client *Client) DescribeVsCertificateDetail(request *DescribeVsCertificateDetailRequest) (_result *DescribeVsCertificateDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsCertificateDetailResponse{}
	_body, _err := client.DescribeVsCertificateDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsCertificateListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsCertificateListResponse
func (client *Client) DescribeVsCertificateListWithOptions(request *DescribeVsCertificateListRequest, runtime *util.RuntimeOptions) (_result *DescribeVsCertificateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsCertificateList"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsCertificateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsCertificateListRequest
//
// @return DescribeVsCertificateListResponse
func (client *Client) DescribeVsCertificateList(request *DescribeVsCertificateListRequest) (_result *DescribeVsCertificateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsCertificateListResponse{}
	_body, _err := client.DescribeVsCertificateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDevicesDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDevicesDataResponse
func (client *Client) DescribeVsDevicesDataWithOptions(request *DescribeVsDevicesDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDevicesDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDevicesData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDevicesDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDevicesDataRequest
//
// @return DescribeVsDevicesDataResponse
func (client *Client) DescribeVsDevicesData(request *DescribeVsDevicesDataRequest) (_result *DescribeVsDevicesDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDevicesDataResponse{}
	_body, _err := client.DescribeVsDevicesDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainBpsDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainBpsDataResponse
func (client *Client) DescribeVsDomainBpsDataWithOptions(request *DescribeVsDomainBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainBpsData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainBpsDataRequest
//
// @return DescribeVsDomainBpsDataResponse
func (client *Client) DescribeVsDomainBpsData(request *DescribeVsDomainBpsDataRequest) (_result *DescribeVsDomainBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainBpsDataResponse{}
	_body, _err := client.DescribeVsDomainBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainCertificateInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainCertificateInfoResponse
func (client *Client) DescribeVsDomainCertificateInfoWithOptions(request *DescribeVsDomainCertificateInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainCertificateInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainCertificateInfo"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainCertificateInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainCertificateInfoRequest
//
// @return DescribeVsDomainCertificateInfoResponse
func (client *Client) DescribeVsDomainCertificateInfo(request *DescribeVsDomainCertificateInfoRequest) (_result *DescribeVsDomainCertificateInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainCertificateInfoResponse{}
	_body, _err := client.DescribeVsDomainCertificateInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainConfigsResponse
func (client *Client) DescribeVsDomainConfigsWithOptions(request *DescribeVsDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionNames)) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainConfigs"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainConfigsRequest
//
// @return DescribeVsDomainConfigsResponse
func (client *Client) DescribeVsDomainConfigs(request *DescribeVsDomainConfigsRequest) (_result *DescribeVsDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainConfigsResponse{}
	_body, _err := client.DescribeVsDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainDetailResponse
func (client *Client) DescribeVsDomainDetailWithOptions(request *DescribeVsDomainDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainDetail"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainDetailRequest
//
// @return DescribeVsDomainDetailResponse
func (client *Client) DescribeVsDomainDetail(request *DescribeVsDomainDetailRequest) (_result *DescribeVsDomainDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainDetailResponse{}
	_body, _err := client.DescribeVsDomainDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainPvDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainPvDataResponse
func (client *Client) DescribeVsDomainPvDataWithOptions(request *DescribeVsDomainPvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainPvDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainPvData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainPvDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainPvDataRequest
//
// @return DescribeVsDomainPvDataResponse
func (client *Client) DescribeVsDomainPvData(request *DescribeVsDomainPvDataRequest) (_result *DescribeVsDomainPvDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainPvDataResponse{}
	_body, _err := client.DescribeVsDomainPvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainPvUvDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainPvUvDataResponse
func (client *Client) DescribeVsDomainPvUvDataWithOptions(request *DescribeVsDomainPvUvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainPvUvDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainPvUvData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainPvUvDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainPvUvDataRequest
//
// @return DescribeVsDomainPvUvDataResponse
func (client *Client) DescribeVsDomainPvUvData(request *DescribeVsDomainPvUvDataRequest) (_result *DescribeVsDomainPvUvDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainPvUvDataResponse{}
	_body, _err := client.DescribeVsDomainPvUvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainRecordDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainRecordDataResponse
func (client *Client) DescribeVsDomainRecordDataWithOptions(request *DescribeVsDomainRecordDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainRecordDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainRecordData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainRecordDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainRecordDataRequest
//
// @return DescribeVsDomainRecordDataResponse
func (client *Client) DescribeVsDomainRecordData(request *DescribeVsDomainRecordDataRequest) (_result *DescribeVsDomainRecordDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainRecordDataResponse{}
	_body, _err := client.DescribeVsDomainRecordDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainRegionDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainRegionDataResponse
func (client *Client) DescribeVsDomainRegionDataWithOptions(request *DescribeVsDomainRegionDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainRegionDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainRegionData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainRegionDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainRegionDataRequest
//
// @return DescribeVsDomainRegionDataResponse
func (client *Client) DescribeVsDomainRegionData(request *DescribeVsDomainRegionDataRequest) (_result *DescribeVsDomainRegionDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainRegionDataResponse{}
	_body, _err := client.DescribeVsDomainRegionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainReqBpsDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainReqBpsDataResponse
func (client *Client) DescribeVsDomainReqBpsDataWithOptions(request *DescribeVsDomainReqBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainReqBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainReqBpsData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainReqBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainReqBpsDataRequest
//
// @return DescribeVsDomainReqBpsDataResponse
func (client *Client) DescribeVsDomainReqBpsData(request *DescribeVsDomainReqBpsDataRequest) (_result *DescribeVsDomainReqBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainReqBpsDataResponse{}
	_body, _err := client.DescribeVsDomainReqBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainReqTrafficDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainReqTrafficDataResponse
func (client *Client) DescribeVsDomainReqTrafficDataWithOptions(request *DescribeVsDomainReqTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainReqTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainReqTrafficData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainReqTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainReqTrafficDataRequest
//
// @return DescribeVsDomainReqTrafficDataResponse
func (client *Client) DescribeVsDomainReqTrafficData(request *DescribeVsDomainReqTrafficDataRequest) (_result *DescribeVsDomainReqTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainReqTrafficDataResponse{}
	_body, _err := client.DescribeVsDomainReqTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainSnapshotDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainSnapshotDataResponse
func (client *Client) DescribeVsDomainSnapshotDataWithOptions(request *DescribeVsDomainSnapshotDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainSnapshotDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainSnapshotData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainSnapshotDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainSnapshotDataRequest
//
// @return DescribeVsDomainSnapshotDataResponse
func (client *Client) DescribeVsDomainSnapshotData(request *DescribeVsDomainSnapshotDataRequest) (_result *DescribeVsDomainSnapshotDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainSnapshotDataResponse{}
	_body, _err := client.DescribeVsDomainSnapshotDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainTrafficDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainTrafficDataResponse
func (client *Client) DescribeVsDomainTrafficDataWithOptions(request *DescribeVsDomainTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainTrafficData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainTrafficDataRequest
//
// @return DescribeVsDomainTrafficDataResponse
func (client *Client) DescribeVsDomainTrafficData(request *DescribeVsDomainTrafficDataRequest) (_result *DescribeVsDomainTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainTrafficDataResponse{}
	_body, _err := client.DescribeVsDomainTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsDomainUvDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsDomainUvDataResponse
func (client *Client) DescribeVsDomainUvDataWithOptions(request *DescribeVsDomainUvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsDomainUvDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsDomainUvData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsDomainUvDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsDomainUvDataRequest
//
// @return DescribeVsDomainUvDataResponse
func (client *Client) DescribeVsDomainUvData(request *DescribeVsDomainUvDataRequest) (_result *DescribeVsDomainUvDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsDomainUvDataResponse{}
	_body, _err := client.DescribeVsDomainUvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsPullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsPullStreamInfoConfigResponse
func (client *Client) DescribeVsPullStreamInfoConfigWithOptions(request *DescribeVsPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeVsPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsPullStreamInfoConfig"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsPullStreamInfoConfigRequest
//
// @return DescribeVsPullStreamInfoConfigResponse
func (client *Client) DescribeVsPullStreamInfoConfig(request *DescribeVsPullStreamInfoConfigRequest) (_result *DescribeVsPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsPullStreamInfoConfigResponse{}
	_body, _err := client.DescribeVsPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsStreamsNotifyUrlConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsStreamsNotifyUrlConfigResponse
func (client *Client) DescribeVsStreamsNotifyUrlConfigWithOptions(request *DescribeVsStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeVsStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsStreamsNotifyUrlConfig"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsStreamsNotifyUrlConfigRequest
//
// @return DescribeVsStreamsNotifyUrlConfigResponse
func (client *Client) DescribeVsStreamsNotifyUrlConfig(request *DescribeVsStreamsNotifyUrlConfigRequest) (_result *DescribeVsStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DescribeVsStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsStreamsOnlineListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsStreamsOnlineListResponse
func (client *Client) DescribeVsStreamsOnlineListWithOptions(request *DescribeVsStreamsOnlineListRequest, runtime *util.RuntimeOptions) (_result *DescribeVsStreamsOnlineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryType)) {
		query["QueryType"] = request.QueryType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.StreamType)) {
		query["StreamType"] = request.StreamType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsStreamsOnlineList"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsStreamsOnlineListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsStreamsOnlineListRequest
//
// @return DescribeVsStreamsOnlineListResponse
func (client *Client) DescribeVsStreamsOnlineList(request *DescribeVsStreamsOnlineListRequest) (_result *DescribeVsStreamsOnlineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsStreamsOnlineListResponse{}
	_body, _err := client.DescribeVsStreamsOnlineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsStreamsPublishListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsStreamsPublishListResponse
func (client *Client) DescribeVsStreamsPublishListWithOptions(request *DescribeVsStreamsPublishListRequest, runtime *util.RuntimeOptions) (_result *DescribeVsStreamsPublishListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryType)) {
		query["QueryType"] = request.QueryType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.StreamType)) {
		query["StreamType"] = request.StreamType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsStreamsPublishList"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsStreamsPublishListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsStreamsPublishListRequest
//
// @return DescribeVsStreamsPublishListResponse
func (client *Client) DescribeVsStreamsPublishList(request *DescribeVsStreamsPublishListRequest) (_result *DescribeVsStreamsPublishListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsStreamsPublishListResponse{}
	_body, _err := client.DescribeVsStreamsPublishListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsTopDomainsByFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsTopDomainsByFlowResponse
func (client *Client) DescribeVsTopDomainsByFlowWithOptions(request *DescribeVsTopDomainsByFlowRequest, runtime *util.RuntimeOptions) (_result *DescribeVsTopDomainsByFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsTopDomainsByFlow"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsTopDomainsByFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsTopDomainsByFlowRequest
//
// @return DescribeVsTopDomainsByFlowResponse
func (client *Client) DescribeVsTopDomainsByFlow(request *DescribeVsTopDomainsByFlowRequest) (_result *DescribeVsTopDomainsByFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsTopDomainsByFlowResponse{}
	_body, _err := client.DescribeVsTopDomainsByFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsUpPeakPublishStreamDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsUpPeakPublishStreamDataResponse
func (client *Client) DescribeVsUpPeakPublishStreamDataWithOptions(request *DescribeVsUpPeakPublishStreamDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVsUpPeakPublishStreamDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainSwitch)) {
		query["DomainSwitch"] = request.DomainSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsUpPeakPublishStreamData"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsUpPeakPublishStreamDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsUpPeakPublishStreamDataRequest
//
// @return DescribeVsUpPeakPublishStreamDataResponse
func (client *Client) DescribeVsUpPeakPublishStreamData(request *DescribeVsUpPeakPublishStreamDataRequest) (_result *DescribeVsUpPeakPublishStreamDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsUpPeakPublishStreamDataResponse{}
	_body, _err := client.DescribeVsUpPeakPublishStreamDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsUserResourcePackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsUserResourcePackageResponse
func (client *Client) DescribeVsUserResourcePackageWithOptions(request *DescribeVsUserResourcePackageRequest, runtime *util.RuntimeOptions) (_result *DescribeVsUserResourcePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsUserResourcePackage"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsUserResourcePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsUserResourcePackageRequest
//
// @return DescribeVsUserResourcePackageResponse
func (client *Client) DescribeVsUserResourcePackage(request *DescribeVsUserResourcePackageRequest) (_result *DescribeVsUserResourcePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsUserResourcePackageResponse{}
	_body, _err := client.DescribeVsUserResourcePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeVsVerifyContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVsVerifyContentResponse
func (client *Client) DescribeVsVerifyContentWithOptions(request *DescribeVsVerifyContentRequest, runtime *util.RuntimeOptions) (_result *DescribeVsVerifyContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVsVerifyContent"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVsVerifyContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeVsVerifyContentRequest
//
// @return DescribeVsVerifyContentResponse
func (client *Client) DescribeVsVerifyContent(request *DescribeVsVerifyContentRequest) (_result *DescribeVsVerifyContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVsVerifyContentResponse{}
	_body, _err := client.DescribeVsVerifyContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ForbidVsStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ForbidVsStreamResponse
func (client *Client) ForbidVsStreamWithOptions(request *ForbidVsStreamRequest, runtime *util.RuntimeOptions) (_result *ForbidVsStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ControlStreamAction)) {
		query["ControlStreamAction"] = request.ControlStreamAction
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamType)) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !tea.BoolValue(util.IsUnset(request.Oneshot)) {
		query["Oneshot"] = request.Oneshot
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResumeTime)) {
		query["ResumeTime"] = request.ResumeTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ForbidVsStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ForbidVsStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ForbidVsStreamRequest
//
// @return ForbidVsStreamResponse
func (client *Client) ForbidVsStream(request *ForbidVsStreamRequest) (_result *ForbidVsStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ForbidVsStreamResponse{}
	_body, _err := client.ForbidVsStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取云渲染实例流连接信息，每次流化建联前都需要调用此接口获取最新连接信息
//
// @param request - GetRenderingInstanceStreamingInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRenderingInstanceStreamingInfoResponse
func (client *Client) GetRenderingInstanceStreamingInfoWithOptions(request *GetRenderingInstanceStreamingInfoRequest, runtime *util.RuntimeOptions) (_result *GetRenderingInstanceStreamingInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRenderingInstanceStreamingInfo"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRenderingInstanceStreamingInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取云渲染实例流连接信息，每次流化建联前都需要调用此接口获取最新连接信息
//
// @param request - GetRenderingInstanceStreamingInfoRequest
//
// @return GetRenderingInstanceStreamingInfoResponse
func (client *Client) GetRenderingInstanceStreamingInfo(request *GetRenderingInstanceStreamingInfoRequest) (_result *GetRenderingInstanceStreamingInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRenderingInstanceStreamingInfoResponse{}
	_body, _err := client.GetRenderingInstanceStreamingInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GotoPresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GotoPresetResponse
func (client *Client) GotoPresetWithOptions(request *GotoPresetRequest, runtime *util.RuntimeOptions) (_result *GotoPresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PresetId)) {
		query["PresetId"] = request.PresetId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GotoPreset"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GotoPresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GotoPresetRequest
//
// @return GotoPresetResponse
func (client *Client) GotoPreset(request *GotoPresetRequest) (_result *GotoPresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GotoPresetResponse{}
	_body, _err := client.GotoPresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 安装云应用
//
// @param request - InstallCloudAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallCloudAppResponse
func (client *Client) InstallCloudAppWithOptions(request *InstallCloudAppRequest, runtime *util.RuntimeOptions) (_result *InstallCloudAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallCloudApp"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallCloudAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 安装云应用
//
// @param request - InstallCloudAppRequest
//
// @return InstallCloudAppResponse
func (client *Client) InstallCloudApp(request *InstallCloudAppRequest) (_result *InstallCloudAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallCloudAppResponse{}
	_body, _err := client.InstallCloudAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询云应用安装信息列表
//
// @param request - ListCloudAppInstallationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCloudAppInstallationsResponse
func (client *Client) ListCloudAppInstallationsWithOptions(request *ListCloudAppInstallationsRequest, runtime *util.RuntimeOptions) (_result *ListCloudAppInstallationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCloudAppInstallations"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCloudAppInstallationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询云应用安装信息列表
//
// @param request - ListCloudAppInstallationsRequest
//
// @return ListCloudAppInstallationsResponse
func (client *Client) ListCloudAppInstallations(request *ListCloudAppInstallationsRequest) (_result *ListCloudAppInstallationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCloudAppInstallationsResponse{}
	_body, _err := client.ListCloudAppInstallationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询云应用列表
//
// @param request - ListCloudAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCloudAppsResponse
func (client *Client) ListCloudAppsWithOptions(request *ListCloudAppsRequest, runtime *util.RuntimeOptions) (_result *ListCloudAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCloudApps"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCloudAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询云应用列表
//
// @param request - ListCloudAppsRequest
//
// @return ListCloudAppsResponse
func (client *Client) ListCloudApps(request *ListCloudAppsRequest) (_result *ListCloudAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCloudAppsResponse{}
	_body, _err := client.ListCloudAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询文件的实例推送状态信息列表。
//
// @param request - ListFilePushStatusesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFilePushStatusesResponse
func (client *Client) ListFilePushStatusesWithOptions(request *ListFilePushStatusesRequest, runtime *util.RuntimeOptions) (_result *ListFilePushStatusesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFilePushStatuses"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFilePushStatusesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询文件的实例推送状态信息列表。
//
// @param request - ListFilePushStatusesRequest
//
// @return ListFilePushStatusesResponse
func (client *Client) ListFilePushStatuses(request *ListFilePushStatusesRequest) (_result *ListFilePushStatusesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFilePushStatusesResponse{}
	_body, _err := client.ListFilePushStatusesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询可用文件列表。
//
// @param request - ListFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFilesResponse
func (client *Client) ListFilesWithOptions(request *ListFilesRequest, runtime *util.RuntimeOptions) (_result *ListFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFiles"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询可用文件列表。
//
// @param request - ListFilesRequest
//
// @return ListFilesResponse
func (client *Client) ListFiles(request *ListFilesRequest) (_result *ListFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFilesResponse{}
	_body, _err := client.ListFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询公钥信息
//
// @param request - ListPublicKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPublicKeysResponse
func (client *Client) ListPublicKeysWithOptions(request *ListPublicKeysRequest, runtime *util.RuntimeOptions) (_result *ListPublicKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPublicKeys"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPublicKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询公钥信息
//
// @param request - ListPublicKeysRequest
//
// @return ListPublicKeysResponse
func (client *Client) ListPublicKeys(request *ListPublicKeysRequest) (_result *ListPublicKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPublicKeysResponse{}
	_body, _err := client.ListPublicKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询所有云渲染实例信息，支持分页查询。
//
// @param request - ListRenderingInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRenderingInstancesResponse
func (client *Client) ListRenderingInstancesWithOptions(request *ListRenderingInstancesRequest, runtime *util.RuntimeOptions) (_result *ListRenderingInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRenderingInstances"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRenderingInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询所有云渲染实例信息，支持分页查询。
//
// @param request - ListRenderingInstancesRequest
//
// @return ListRenderingInstancesResponse
func (client *Client) ListRenderingInstances(request *ListRenderingInstancesRequest) (_result *ListRenderingInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRenderingInstancesResponse{}
	_body, _err := client.ListRenderingInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 安全登陆管理
//
// @param request - ManageLoginRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ManageLoginResponse
func (client *Client) ManageLoginWithOptions(request *ManageLoginRequest, runtime *util.RuntimeOptions) (_result *ManageLoginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionName)) {
		query["ActionName"] = request.ActionName
	}

	if !tea.BoolValue(util.IsUnset(request.KeyGroup)) {
		query["KeyGroup"] = request.KeyGroup
	}

	if !tea.BoolValue(util.IsUnset(request.KeyName)) {
		query["KeyName"] = request.KeyName
	}

	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ManageLogin"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ManageLoginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 安全登陆管理
//
// @param request - ManageLoginRequest
//
// @return ManageLoginResponse
func (client *Client) ManageLogin(request *ManageLoginRequest) (_result *ManageLoginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ManageLoginResponse{}
	_body, _err := client.ManageLoginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDeviceResponse
func (client *Client) ModifyDeviceWithOptions(request *ModifyDeviceRequest, runtime *util.RuntimeOptions) (_result *ModifyDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmMethod)) {
		query["AlarmMethod"] = request.AlarmMethod
	}

	if !tea.BoolValue(util.IsUnset(request.AutoDirectory)) {
		query["AutoDirectory"] = request.AutoDirectory
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPos)) {
		query["AutoPos"] = request.AutoPos
	}

	if !tea.BoolValue(util.IsUnset(request.AutoStart)) {
		query["AutoStart"] = request.AutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		query["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Latitude)) {
		query["Latitude"] = request.Latitude
	}

	if !tea.BoolValue(util.IsUnset(request.Longitude)) {
		query["Longitude"] = request.Longitude
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.PosInterval)) {
		query["PosInterval"] = request.PosInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyDeviceRequest
//
// @return ModifyDeviceResponse
func (client *Client) ModifyDevice(request *ModifyDeviceRequest) (_result *ModifyDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeviceResponse{}
	_body, _err := client.ModifyDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyDeviceAlarmRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDeviceAlarmResponse
func (client *Client) ModifyDeviceAlarmWithOptions(request *ModifyDeviceAlarmRequest, runtime *util.RuntimeOptions) (_result *ModifyDeviceAlarmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmId)) {
		query["AlarmId"] = request.AlarmId
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDeviceAlarm"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDeviceAlarmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyDeviceAlarmRequest
//
// @return ModifyDeviceAlarmResponse
func (client *Client) ModifyDeviceAlarm(request *ModifyDeviceAlarmRequest) (_result *ModifyDeviceAlarmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeviceAlarmResponse{}
	_body, _err := client.ModifyDeviceAlarmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyDeviceCaptureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDeviceCaptureResponse
func (client *Client) ModifyDeviceCaptureWithOptions(request *ModifyDeviceCaptureRequest, runtime *util.RuntimeOptions) (_result *ModifyDeviceCaptureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Image)) {
		query["Image"] = request.Image
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Video)) {
		query["Video"] = request.Video
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDeviceCapture"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDeviceCaptureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyDeviceCaptureRequest
//
// @return ModifyDeviceCaptureResponse
func (client *Client) ModifyDeviceCapture(request *ModifyDeviceCaptureRequest) (_result *ModifyDeviceCaptureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeviceCaptureResponse{}
	_body, _err := client.ModifyDeviceCaptureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyDeviceChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDeviceChannelsResponse
func (client *Client) ModifyDeviceChannelsWithOptions(request *ModifyDeviceChannelsRequest, runtime *util.RuntimeOptions) (_result *ModifyDeviceChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channels)) {
		query["Channels"] = request.Channels
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceStatus)) {
		query["DeviceStatus"] = request.DeviceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Dsn)) {
		query["Dsn"] = request.Dsn
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDeviceChannels"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDeviceChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyDeviceChannelsRequest
//
// @return ModifyDeviceChannelsResponse
func (client *Client) ModifyDeviceChannels(request *ModifyDeviceChannelsRequest) (_result *ModifyDeviceChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeviceChannelsResponse{}
	_body, _err := client.ModifyDeviceChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDirectoryResponse
func (client *Client) ModifyDirectoryWithOptions(request *ModifyDirectoryRequest, runtime *util.RuntimeOptions) (_result *ModifyDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDirectory"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyDirectoryRequest
//
// @return ModifyDirectoryResponse
func (client *Client) ModifyDirectory(request *ModifyDirectoryRequest) (_result *ModifyDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDirectoryResponse{}
	_body, _err := client.ModifyDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyGroupResponse
func (client *Client) ModifyGroupWithOptions(request *ModifyGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Enabled)) {
		query["Enabled"] = request.Enabled
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InProtocol)) {
		query["InProtocol"] = request.InProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LazyPull)) {
		query["LazyPull"] = request.LazyPull
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutProtocol)) {
		query["OutProtocol"] = request.OutProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlayDomain)) {
		query["PlayDomain"] = request.PlayDomain
	}

	if !tea.BoolValue(util.IsUnset(request.PushDomain)) {
		query["PushDomain"] = request.PushDomain
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyGroup"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyGroupRequest
//
// @return ModifyGroupResponse
func (client *Client) ModifyGroup(request *ModifyGroupRequest) (_result *ModifyGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyGroupResponse{}
	_body, _err := client.ModifyGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyParentPlatformRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyParentPlatformResponse
func (client *Client) ModifyParentPlatformWithOptions(request *ModifyParentPlatformRequest, runtime *util.RuntimeOptions) (_result *ModifyParentPlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoStart)) {
		query["AutoStart"] = request.AutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.ClientAuth)) {
		query["ClientAuth"] = request.ClientAuth
	}

	if !tea.BoolValue(util.IsUnset(request.ClientPassword)) {
		query["ClientPassword"] = request.ClientPassword
	}

	if !tea.BoolValue(util.IsUnset(request.ClientUsername)) {
		query["ClientUsername"] = request.ClientUsername
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		query["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyParentPlatform"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyParentPlatformResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyParentPlatformRequest
//
// @return ModifyParentPlatformResponse
func (client *Client) ModifyParentPlatform(request *ModifyParentPlatformRequest) (_result *ModifyParentPlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyParentPlatformResponse{}
	_body, _err := client.ModifyParentPlatformWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改云渲染实例限速带宽
//
// @param request - ModifyRenderingInstanceBandwidthRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyRenderingInstanceBandwidthResponse
func (client *Client) ModifyRenderingInstanceBandwidthWithOptions(request *ModifyRenderingInstanceBandwidthRequest, runtime *util.RuntimeOptions) (_result *ModifyRenderingInstanceBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxEgressBandwidth)) {
		query["MaxEgressBandwidth"] = request.MaxEgressBandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.MaxIngressBandwidth)) {
		query["MaxIngressBandwidth"] = request.MaxIngressBandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRenderingInstanceBandwidth"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyRenderingInstanceBandwidthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改云渲染实例限速带宽
//
// @param request - ModifyRenderingInstanceBandwidthRequest
//
// @return ModifyRenderingInstanceBandwidthResponse
func (client *Client) ModifyRenderingInstanceBandwidth(request *ModifyRenderingInstanceBandwidthRequest) (_result *ModifyRenderingInstanceBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRenderingInstanceBandwidthResponse{}
	_body, _err := client.ModifyRenderingInstanceBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyTemplateResponse
func (client *Client) ModifyTemplateWithOptions(request *ModifyTemplateRequest, runtime *util.RuntimeOptions) (_result *ModifyTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FileFormat)) {
		query["FileFormat"] = request.FileFormat
	}

	if !tea.BoolValue(util.IsUnset(request.Flv)) {
		query["Flv"] = request.Flv
	}

	if !tea.BoolValue(util.IsUnset(request.HlsM3u8)) {
		query["HlsM3u8"] = request.HlsM3u8
	}

	if !tea.BoolValue(util.IsUnset(request.HlsTs)) {
		query["HlsTs"] = request.HlsTs
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.JpgOnDemand)) {
		query["JpgOnDemand"] = request.JpgOnDemand
	}

	if !tea.BoolValue(util.IsUnset(request.JpgOverwrite)) {
		query["JpgOverwrite"] = request.JpgOverwrite
	}

	if !tea.BoolValue(util.IsUnset(request.JpgSequence)) {
		query["JpgSequence"] = request.JpgSequence
	}

	if !tea.BoolValue(util.IsUnset(request.Mp4)) {
		query["Mp4"] = request.Mp4
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OssFilePrefix)) {
		query["OssFilePrefix"] = request.OssFilePrefix
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Retention)) {
		query["Retention"] = request.Retention
	}

	if !tea.BoolValue(util.IsUnset(request.TransConfigsJSON)) {
		query["TransConfigsJSON"] = request.TransConfigsJSON
	}

	if !tea.BoolValue(util.IsUnset(request.Trigger)) {
		query["Trigger"] = request.Trigger
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyTemplateRequest
//
// @return ModifyTemplateResponse
func (client *Client) ModifyTemplate(request *ModifyTemplateRequest) (_result *ModifyTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTemplateResponse{}
	_body, _err := client.ModifyTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - OpenVsServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenVsServiceResponse
func (client *Client) OpenVsServiceWithOptions(runtime *util.RuntimeOptions) (_result *OpenVsServiceResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("OpenVsService"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenVsServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return OpenVsServiceResponse
func (client *Client) OpenVsService() (_result *OpenVsServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenVsServiceResponse{}
	_body, _err := client.OpenVsServiceWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 预推文件到云渲染实例。
//
// @param request - PushFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PushFileResponse
func (client *Client) PushFileWithOptions(request *PushFileRequest, runtime *util.RuntimeOptions) (_result *PushFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PushFile"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 预推文件到云渲染实例。
//
// @param request - PushFileRequest
//
// @return PushFileResponse
func (client *Client) PushFile(request *PushFileRequest) (_result *PushFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushFileResponse{}
	_body, _err := client.PushFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 重启云渲染实例
//
// @param request - RebootRenderingInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootRenderingInstanceResponse
func (client *Client) RebootRenderingInstanceWithOptions(request *RebootRenderingInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootRenderingInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootRenderingInstance"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebootRenderingInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 重启云渲染实例
//
// @param request - RebootRenderingInstanceRequest
//
// @return RebootRenderingInstanceResponse
func (client *Client) RebootRenderingInstance(request *RebootRenderingInstanceRequest) (_result *RebootRenderingInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootRenderingInstanceResponse{}
	_body, _err := client.RebootRenderingInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 释放云渲染实例
//
// @param request - ReleaseRenderingInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseRenderingInstanceResponse
func (client *Client) ReleaseRenderingInstanceWithOptions(request *ReleaseRenderingInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseRenderingInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseRenderingInstance"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseRenderingInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 释放云渲染实例
//
// @param request - ReleaseRenderingInstanceRequest
//
// @return ReleaseRenderingInstanceResponse
func (client *Client) ReleaseRenderingInstance(request *ReleaseRenderingInstanceRequest) (_result *ReleaseRenderingInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseRenderingInstanceResponse{}
	_body, _err := client.ReleaseRenderingInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 续费云渲染资源实例
//
// @param request - RenewRenderingInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewRenderingInstanceResponse
func (client *Client) RenewRenderingInstanceWithOptions(request *RenewRenderingInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewRenderingInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewRenderingInstance"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewRenderingInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 续费云渲染资源实例
//
// @param request - RenewRenderingInstanceRequest
//
// @return RenewRenderingInstanceResponse
func (client *Client) RenewRenderingInstance(request *RenewRenderingInstanceRequest) (_result *RenewRenderingInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewRenderingInstanceResponse{}
	_body, _err := client.RenewRenderingInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResumeVsStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeVsStreamResponse
func (client *Client) ResumeVsStreamWithOptions(request *ResumeVsStreamRequest, runtime *util.RuntimeOptions) (_result *ResumeVsStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ControlStreamAction)) {
		query["ControlStreamAction"] = request.ControlStreamAction
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamType)) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeVsStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeVsStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResumeVsStreamRequest
//
// @return ResumeVsStreamResponse
func (client *Client) ResumeVsStream(request *ResumeVsStreamRequest) (_result *ResumeVsStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeVsStreamResponse{}
	_body, _err := client.ResumeVsStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 下发shell命令，同步响应。不适用于耗时命令。
//
// @param request - SendRenderingInstanceCommandsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendRenderingInstanceCommandsResponse
func (client *Client) SendRenderingInstanceCommandsWithOptions(request *SendRenderingInstanceCommandsRequest, runtime *util.RuntimeOptions) (_result *SendRenderingInstanceCommandsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Commands)) {
		body["Commands"] = request.Commands
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendRenderingInstanceCommands"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendRenderingInstanceCommandsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 下发shell命令，同步响应。不适用于耗时命令。
//
// @param request - SendRenderingInstanceCommandsRequest
//
// @return SendRenderingInstanceCommandsResponse
func (client *Client) SendRenderingInstanceCommands(request *SendRenderingInstanceCommandsRequest) (_result *SendRenderingInstanceCommandsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendRenderingInstanceCommandsResponse{}
	_body, _err := client.SendRenderingInstanceCommandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SetPresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPresetResponse
func (client *Client) SetPresetWithOptions(request *SetPresetRequest, runtime *util.RuntimeOptions) (_result *SetPresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PresetId)) {
		query["PresetId"] = request.PresetId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPreset"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetPresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SetPresetRequest
//
// @return SetPresetResponse
func (client *Client) SetPreset(request *SetPresetRequest) (_result *SetPresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPresetResponse{}
	_body, _err := client.SetPresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SetVsDomainCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetVsDomainCertificateResponse
func (client *Client) SetVsDomainCertificateWithOptions(request *SetVsDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *SetVsDomainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertName)) {
		query["CertName"] = request.CertName
	}

	if !tea.BoolValue(util.IsUnset(request.CertType)) {
		query["CertType"] = request.CertType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ForceSet)) {
		query["ForceSet"] = request.ForceSet
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.SSLPri)) {
		query["SSLPri"] = request.SSLPri
	}

	if !tea.BoolValue(util.IsUnset(request.SSLProtocol)) {
		query["SSLProtocol"] = request.SSLProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SSLPub)) {
		query["SSLPub"] = request.SSLPub
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetVsDomainCertificate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetVsDomainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SetVsDomainCertificateRequest
//
// @return SetVsDomainCertificateResponse
func (client *Client) SetVsDomainCertificate(request *SetVsDomainCertificateRequest) (_result *SetVsDomainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetVsDomainCertificateResponse{}
	_body, _err := client.SetVsDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SetVsStreamsNotifyUrlConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetVsStreamsNotifyUrlConfigResponse
func (client *Client) SetVsStreamsNotifyUrlConfigWithOptions(request *SetVsStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *SetVsStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthKey)) {
		query["AuthKey"] = request.AuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetVsStreamsNotifyUrlConfig"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetVsStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SetVsStreamsNotifyUrlConfigRequest
//
// @return SetVsStreamsNotifyUrlConfigResponse
func (client *Client) SetVsStreamsNotifyUrlConfig(request *SetVsStreamsNotifyUrlConfigRequest) (_result *SetVsStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetVsStreamsNotifyUrlConfigResponse{}
	_body, _err := client.SetVsStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartDeviceResponse
func (client *Client) StartDeviceWithOptions(request *StartDeviceRequest, runtime *util.RuntimeOptions) (_result *StartDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartDeviceRequest
//
// @return StartDeviceResponse
func (client *Client) StartDevice(request *StartDeviceRequest) (_result *StartDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDeviceResponse{}
	_body, _err := client.StartDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartParentPlatformRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartParentPlatformResponse
func (client *Client) StartParentPlatformWithOptions(request *StartParentPlatformRequest, runtime *util.RuntimeOptions) (_result *StartParentPlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartParentPlatform"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartParentPlatformResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartParentPlatformRequest
//
// @return StartParentPlatformResponse
func (client *Client) StartParentPlatform(request *StartParentPlatformRequest) (_result *StartParentPlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartParentPlatformResponse{}
	_body, _err := client.StartParentPlatformWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartPublishStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartPublishStreamResponse
func (client *Client) StartPublishStreamWithOptions(request *StartPublishStreamRequest, runtime *util.RuntimeOptions) (_result *StartPublishStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PublishUrl)) {
		query["PublishUrl"] = request.PublishUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartPublishStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartPublishStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartPublishStreamRequest
//
// @return StartPublishStreamResponse
func (client *Client) StartPublishStream(request *StartPublishStreamRequest) (_result *StartPublishStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartPublishStreamResponse{}
	_body, _err := client.StartPublishStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartRecordStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartRecordStreamResponse
func (client *Client) StartRecordStreamWithOptions(request *StartRecordStreamRequest, runtime *util.RuntimeOptions) (_result *StartRecordStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlayDomain)) {
		query["PlayDomain"] = request.PlayDomain
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartRecordStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartRecordStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartRecordStreamRequest
//
// @return StartRecordStreamResponse
func (client *Client) StartRecordStream(request *StartRecordStreamRequest) (_result *StartRecordStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartRecordStreamResponse{}
	_body, _err := client.StartRecordStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartStreamResponse
func (client *Client) StartStreamWithOptions(request *StartStreamRequest, runtime *util.RuntimeOptions) (_result *StartStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartStreamRequest
//
// @return StartStreamResponse
func (client *Client) StartStream(request *StartStreamRequest) (_result *StartStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartStreamResponse{}
	_body, _err := client.StartStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartTransferStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartTransferStreamResponse
func (client *Client) StartTransferStreamWithOptions(request *StartTransferStreamRequest, runtime *util.RuntimeOptions) (_result *StartTransferStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Transcode)) {
		query["Transcode"] = request.Transcode
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartTransferStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartTransferStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartTransferStreamRequest
//
// @return StartTransferStreamResponse
func (client *Client) StartTransferStream(request *StartTransferStreamRequest) (_result *StartTransferStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartTransferStreamResponse{}
	_body, _err := client.StartTransferStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StopAdjustRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopAdjustResponse
func (client *Client) StopAdjustWithOptions(request *StopAdjustRequest, runtime *util.RuntimeOptions) (_result *StopAdjustResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Focus)) {
		query["Focus"] = request.Focus
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Iris)) {
		query["Iris"] = request.Iris
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopAdjust"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopAdjustResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StopAdjustRequest
//
// @return StopAdjustResponse
func (client *Client) StopAdjust(request *StopAdjustRequest) (_result *StopAdjustResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopAdjustResponse{}
	_body, _err := client.StopAdjustWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StopDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopDeviceResponse
func (client *Client) StopDeviceWithOptions(request *StopDeviceRequest, runtime *util.RuntimeOptions) (_result *StopDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StopDeviceRequest
//
// @return StopDeviceResponse
func (client *Client) StopDevice(request *StopDeviceRequest) (_result *StopDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDeviceResponse{}
	_body, _err := client.StopDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StopMoveRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopMoveResponse
func (client *Client) StopMoveWithOptions(request *StopMoveRequest, runtime *util.RuntimeOptions) (_result *StopMoveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Pan)) {
		query["Pan"] = request.Pan
	}

	if !tea.BoolValue(util.IsUnset(request.Tilt)) {
		query["Tilt"] = request.Tilt
	}

	if !tea.BoolValue(util.IsUnset(request.Zoom)) {
		query["Zoom"] = request.Zoom
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopMove"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopMoveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StopMoveRequest
//
// @return StopMoveResponse
func (client *Client) StopMove(request *StopMoveRequest) (_result *StopMoveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopMoveResponse{}
	_body, _err := client.StopMoveWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StopPublishStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopPublishStreamResponse
func (client *Client) StopPublishStreamWithOptions(request *StopPublishStreamRequest, runtime *util.RuntimeOptions) (_result *StopPublishStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopPublishStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopPublishStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StopPublishStreamRequest
//
// @return StopPublishStreamResponse
func (client *Client) StopPublishStream(request *StopPublishStreamRequest) (_result *StopPublishStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopPublishStreamResponse{}
	_body, _err := client.StopPublishStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StopRecordStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopRecordStreamResponse
func (client *Client) StopRecordStreamWithOptions(request *StopRecordStreamRequest, runtime *util.RuntimeOptions) (_result *StopRecordStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlayDomain)) {
		query["PlayDomain"] = request.PlayDomain
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopRecordStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopRecordStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StopRecordStreamRequest
//
// @return StopRecordStreamResponse
func (client *Client) StopRecordStream(request *StopRecordStreamRequest) (_result *StopRecordStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopRecordStreamResponse{}
	_body, _err := client.StopRecordStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StopStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopStreamResponse
func (client *Client) StopStreamWithOptions(request *StopStreamRequest, runtime *util.RuntimeOptions) (_result *StopStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StopStreamRequest
//
// @return StopStreamResponse
func (client *Client) StopStream(request *StopStreamRequest) (_result *StopStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopStreamResponse{}
	_body, _err := client.StopStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StopTransferStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopTransferStreamResponse
func (client *Client) StopTransferStreamWithOptions(request *StopTransferStreamRequest, runtime *util.RuntimeOptions) (_result *StopTransferStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Transcode)) {
		query["Transcode"] = request.Transcode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopTransferStream"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopTransferStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StopTransferStreamRequest
//
// @return StopTransferStreamResponse
func (client *Client) StopTransferStream(request *StopTransferStreamRequest) (_result *StopTransferStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopTransferStreamResponse{}
	_body, _err := client.StopTransferStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SyncCatalogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SyncCatalogsResponse
func (client *Client) SyncCatalogsWithOptions(request *SyncCatalogsRequest, runtime *util.RuntimeOptions) (_result *SyncCatalogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncCatalogs"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncCatalogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SyncCatalogsRequest
//
// @return SyncCatalogsResponse
func (client *Client) SyncCatalogs(request *SyncCatalogsRequest) (_result *SyncCatalogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SyncCatalogsResponse{}
	_body, _err := client.SyncCatalogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnbindDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindDirectoryResponse
func (client *Client) UnbindDirectoryWithOptions(request *UnbindDirectoryRequest, runtime *util.RuntimeOptions) (_result *UnbindDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindDirectory"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnbindDirectoryRequest
//
// @return UnbindDirectoryResponse
func (client *Client) UnbindDirectory(request *UnbindDirectoryRequest) (_result *UnbindDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindDirectoryResponse{}
	_body, _err := client.UnbindDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnbindParentPlatformDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindParentPlatformDeviceResponse
func (client *Client) UnbindParentPlatformDeviceWithOptions(request *UnbindParentPlatformDeviceRequest, runtime *util.RuntimeOptions) (_result *UnbindParentPlatformDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentPlatformId)) {
		query["ParentPlatformId"] = request.ParentPlatformId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindParentPlatformDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindParentPlatformDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnbindParentPlatformDeviceRequest
//
// @return UnbindParentPlatformDeviceResponse
func (client *Client) UnbindParentPlatformDevice(request *UnbindParentPlatformDeviceRequest) (_result *UnbindParentPlatformDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindParentPlatformDeviceResponse{}
	_body, _err := client.UnbindParentPlatformDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnbindPurchasedDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindPurchasedDeviceResponse
func (client *Client) UnbindPurchasedDeviceWithOptions(request *UnbindPurchasedDeviceRequest, runtime *util.RuntimeOptions) (_result *UnbindPurchasedDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindPurchasedDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindPurchasedDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnbindPurchasedDeviceRequest
//
// @return UnbindPurchasedDeviceResponse
func (client *Client) UnbindPurchasedDevice(request *UnbindPurchasedDeviceRequest) (_result *UnbindPurchasedDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindPurchasedDeviceResponse{}
	_body, _err := client.UnbindPurchasedDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnbindTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindTemplateResponse
func (client *Client) UnbindTemplateWithOptions(request *UnbindTemplateRequest, runtime *util.RuntimeOptions) (_result *UnbindTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindTemplate"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnbindTemplateRequest
//
// @return UnbindTemplateResponse
func (client *Client) UnbindTemplate(request *UnbindTemplateRequest) (_result *UnbindTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindTemplateResponse{}
	_body, _err := client.UnbindTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 卸载云应用
//
// @param request - UninstallCloudAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UninstallCloudAppResponse
func (client *Client) UninstallCloudAppWithOptions(request *UninstallCloudAppRequest, runtime *util.RuntimeOptions) (_result *UninstallCloudAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UninstallCloudApp"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UninstallCloudAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 卸载云应用
//
// @param request - UninstallCloudAppRequest
//
// @return UninstallCloudAppResponse
func (client *Client) UninstallCloudApp(request *UninstallCloudAppRequest) (_result *UninstallCloudAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UninstallCloudAppResponse{}
	_body, _err := client.UninstallCloudAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnlockDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnlockDeviceResponse
func (client *Client) UnlockDeviceWithOptions(request *UnlockDeviceRequest, runtime *util.RuntimeOptions) (_result *UnlockDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnlockDevice"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnlockDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnlockDeviceRequest
//
// @return UnlockDeviceResponse
func (client *Client) UnlockDevice(request *UnlockDeviceRequest) (_result *UnlockDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnlockDeviceResponse{}
	_body, _err := client.UnlockDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新云应用信息
//
// @param request - UpdateCloudAppInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCloudAppInfoResponse
func (client *Client) UpdateCloudAppInfoWithOptions(request *UpdateCloudAppInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateCloudAppInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCloudAppInfo"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCloudAppInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新云应用信息
//
// @param request - UpdateCloudAppInfoRequest
//
// @return UpdateCloudAppInfoResponse
func (client *Client) UpdateCloudAppInfo(request *UpdateCloudAppInfoRequest) (_result *UpdateCloudAppInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCloudAppInfoResponse{}
	_body, _err := client.UpdateCloudAppInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateClusterResponse
func (client *Client) UpdateClusterWithOptions(request *UpdateClusterRequest, runtime *util.RuntimeOptions) (_result *UpdateClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveTime)) {
		query["EffectiveTime"] = request.EffectiveTime
	}

	if !tea.BoolValue(util.IsUnset(request.InternalPorts)) {
		query["InternalPorts"] = request.InternalPorts
	}

	if !tea.BoolValue(util.IsUnset(request.MaintainTime)) {
		query["MaintainTime"] = request.MaintainTime
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCluster"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateClusterRequest
//
// @return UpdateClusterResponse
func (client *Client) UpdateCluster(request *UpdateClusterRequest) (_result *UpdateClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateClusterResponse{}
	_body, _err := client.UpdateClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新文件信息。
//
// @param request - UpdateFileInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFileInfoResponse
func (client *Client) UpdateFileInfoWithOptions(request *UpdateFileInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateFileInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFileInfo"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFileInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新文件信息。
//
// @param request - UpdateFileInfoRequest
//
// @return UpdateFileInfoResponse
func (client *Client) UpdateFileInfo(request *UpdateFileInfoRequest) (_result *UpdateFileInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFileInfoResponse{}
	_body, _err := client.UpdateFileInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新云渲染实例配置参数
//
// @param tmpReq - UpdateRenderingInstanceConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRenderingInstanceConfigurationResponse
func (client *Client) UpdateRenderingInstanceConfigurationWithOptions(tmpReq *UpdateRenderingInstanceConfigurationRequest, runtime *util.RuntimeOptions) (_result *UpdateRenderingInstanceConfigurationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateRenderingInstanceConfigurationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Configuration)) {
		request.ConfigurationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Configuration, tea.String("Configuration"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RenderingInstanceId)) {
		query["RenderingInstanceId"] = request.RenderingInstanceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigurationShrink)) {
		body["Configuration"] = request.ConfigurationShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRenderingInstanceConfiguration"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRenderingInstanceConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新云渲染实例配置参数
//
// @param request - UpdateRenderingInstanceConfigurationRequest
//
// @return UpdateRenderingInstanceConfigurationResponse
func (client *Client) UpdateRenderingInstanceConfiguration(request *UpdateRenderingInstanceConfigurationRequest) (_result *UpdateRenderingInstanceConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRenderingInstanceConfigurationResponse{}
	_body, _err := client.UpdateRenderingInstanceConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateVsPullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateVsPullStreamInfoConfigResponse
func (client *Client) UpdateVsPullStreamInfoConfigWithOptions(request *UpdateVsPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateVsPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Always)) {
		query["Always"] = request.Always
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceUrl)) {
		query["SourceUrl"] = request.SourceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateVsPullStreamInfoConfig"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateVsPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateVsPullStreamInfoConfigRequest
//
// @return UpdateVsPullStreamInfoConfigResponse
func (client *Client) UpdateVsPullStreamInfoConfig(request *UpdateVsPullStreamInfoConfigRequest) (_result *UpdateVsPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateVsPullStreamInfoConfigResponse{}
	_body, _err := client.UpdateVsPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 应用上架
//
// @param request - UploadCloudAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadCloudAppResponse
func (client *Client) UploadCloudAppWithOptions(request *UploadCloudAppRequest, runtime *util.RuntimeOptions) (_result *UploadCloudAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AppVersion)) {
		query["AppVersion"] = request.AppVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadUrl)) {
		query["DownloadUrl"] = request.DownloadUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Md5)) {
		query["Md5"] = request.Md5
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadCloudApp"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadCloudAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 应用上架
//
// @param request - UploadCloudAppRequest
//
// @return UploadCloudAppResponse
func (client *Client) UploadCloudApp(request *UploadCloudAppRequest) (_result *UploadCloudAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadCloudAppResponse{}
	_body, _err := client.UploadCloudAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文件上传
//
// @param request - UploadFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadFileResponse
func (client *Client) UploadFileWithOptions(request *UploadFileRequest, runtime *util.RuntimeOptions) (_result *UploadFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Md5)) {
		query["Md5"] = request.Md5
	}

	if !tea.BoolValue(util.IsUnset(request.OriginUrl)) {
		query["OriginUrl"] = request.OriginUrl
	}

	if !tea.BoolValue(util.IsUnset(request.TargetPath)) {
		query["TargetPath"] = request.TargetPath
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadFile"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文件上传
//
// @param request - UploadFileRequest
//
// @return UploadFileResponse
func (client *Client) UploadFile(request *UploadFileRequest) (_result *UploadFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadFileResponse{}
	_body, _err := client.UploadFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 上传公钥，用于安全登陆鉴权。
//
// @param request - UploadPublicKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadPublicKeyResponse
func (client *Client) UploadPublicKeyWithOptions(request *UploadPublicKeyRequest, runtime *util.RuntimeOptions) (_result *UploadPublicKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.KeyGroup)) {
		query["KeyGroup"] = request.KeyGroup
	}

	if !tea.BoolValue(util.IsUnset(request.KeyName)) {
		query["KeyName"] = request.KeyName
	}

	if !tea.BoolValue(util.IsUnset(request.KeyType)) {
		query["KeyType"] = request.KeyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadPublicKey"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadPublicKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 上传公钥，用于安全登陆鉴权。
//
// @param request - UploadPublicKeyRequest
//
// @return UploadPublicKeyResponse
func (client *Client) UploadPublicKey(request *UploadPublicKeyRequest) (_result *UploadPublicKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadPublicKeyResponse{}
	_body, _err := client.UploadPublicKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - VerifyVsDomainOwnerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyVsDomainOwnerResponse
func (client *Client) VerifyVsDomainOwnerWithOptions(request *VerifyVsDomainOwnerRequest, runtime *util.RuntimeOptions) (_result *VerifyVsDomainOwnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyType)) {
		query["VerifyType"] = request.VerifyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyVsDomainOwner"),
		Version:     tea.String("2018-12-12"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &VerifyVsDomainOwnerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - VerifyVsDomainOwnerRequest
//
// @return VerifyVsDomainOwnerResponse
func (client *Client) VerifyVsDomainOwner(request *VerifyVsDomainOwnerRequest) (_result *VerifyVsDomainOwnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyVsDomainOwnerResponse{}
	_body, _err := client.VerifyVsDomainOwnerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
