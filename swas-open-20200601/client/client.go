// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	openapiutil "github.com/alibabacloud-go/darabonba-openapi/v2/utils"
	"github.com/alibabacloud-go/tea/dara"
)

type iAddCustomImageShareAccountRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccount(v []*int64) *AddCustomImageShareAccountRequest
	GetAccount() []*int64
	SetClientToken(v string) *AddCustomImageShareAccountRequest
	GetClientToken() *string
	SetImageId(v string) *AddCustomImageShareAccountRequest
	GetImageId() *string
	SetRegionId(v string) *AddCustomImageShareAccountRequest
	GetRegionId() *string
}

type AddCustomImageShareAccountRequest struct {
	// The IDs of the Alibaba Cloud accounts with which you want to share the custom image.
	//
	// This parameter is required.
	Account []*int64 `json:"Account,omitempty" xml:"Account,omitempty" type:"Repeated"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the custom image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-saacssasc****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddCustomImageShareAccountRequest) String() string {
	return dara.Prettify(s)
}

func (s AddCustomImageShareAccountRequest) GoString() string {
	return s.String()
}

func (s *AddCustomImageShareAccountRequest) GetAccount() []*int64 {
	return s.Account
}

func (s *AddCustomImageShareAccountRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *AddCustomImageShareAccountRequest) GetImageId() *string {
	return s.ImageId
}

func (s *AddCustomImageShareAccountRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *AddCustomImageShareAccountRequest) SetAccount(v []*int64) *AddCustomImageShareAccountRequest {
	s.Account = v
	return s
}

func (s *AddCustomImageShareAccountRequest) SetClientToken(v string) *AddCustomImageShareAccountRequest {
	s.ClientToken = &v
	return s
}

func (s *AddCustomImageShareAccountRequest) SetImageId(v string) *AddCustomImageShareAccountRequest {
	s.ImageId = &v
	return s
}

func (s *AddCustomImageShareAccountRequest) SetRegionId(v string) *AddCustomImageShareAccountRequest {
	s.RegionId = &v
	return s
}

func (s *AddCustomImageShareAccountRequest) Validate() error {
	return dara.Validate(s)
}

type iAddCustomImageShareAccountResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *AddCustomImageShareAccountResponseBody
	GetRequestId() *string
}

type AddCustomImageShareAccountResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCustomImageShareAccountResponseBody) String() string {
	return dara.Prettify(s)
}

func (s AddCustomImageShareAccountResponseBody) GoString() string {
	return s.String()
}

func (s *AddCustomImageShareAccountResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *AddCustomImageShareAccountResponseBody) SetRequestId(v string) *AddCustomImageShareAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCustomImageShareAccountResponseBody) Validate() error {
	return dara.Validate(s)
}

type iAddCustomImageShareAccountResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *AddCustomImageShareAccountResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *AddCustomImageShareAccountResponse
	GetStatusCode() *int32
	SetBody(v *AddCustomImageShareAccountResponseBody) *AddCustomImageShareAccountResponse
	GetBody() *AddCustomImageShareAccountResponseBody
}

type AddCustomImageShareAccountResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddCustomImageShareAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddCustomImageShareAccountResponse) String() string {
	return dara.Prettify(s)
}

func (s AddCustomImageShareAccountResponse) GoString() string {
	return s.String()
}

func (s *AddCustomImageShareAccountResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *AddCustomImageShareAccountResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *AddCustomImageShareAccountResponse) GetBody() *AddCustomImageShareAccountResponseBody {
	return s.Body
}

func (s *AddCustomImageShareAccountResponse) SetHeaders(v map[string]*string) *AddCustomImageShareAccountResponse {
	s.Headers = v
	return s
}

func (s *AddCustomImageShareAccountResponse) SetStatusCode(v int32) *AddCustomImageShareAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCustomImageShareAccountResponse) SetBody(v *AddCustomImageShareAccountResponseBody) *AddCustomImageShareAccountResponse {
	s.Body = v
	return s
}

func (s *AddCustomImageShareAccountResponse) Validate() error {
	return dara.Validate(s)
}

type iAllocatePublicConnectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *AllocatePublicConnectionRequest
	GetClientToken() *string
	SetDatabaseInstanceId(v string) *AllocatePublicConnectionRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *AllocatePublicConnectionRequest
	GetRegionId() *string
}

type AllocatePublicConnectionRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AllocatePublicConnectionRequest) String() string {
	return dara.Prettify(s)
}

func (s AllocatePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *AllocatePublicConnectionRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *AllocatePublicConnectionRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *AllocatePublicConnectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *AllocatePublicConnectionRequest) SetClientToken(v string) *AllocatePublicConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *AllocatePublicConnectionRequest) SetDatabaseInstanceId(v string) *AllocatePublicConnectionRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *AllocatePublicConnectionRequest) SetRegionId(v string) *AllocatePublicConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *AllocatePublicConnectionRequest) Validate() error {
	return dara.Validate(s)
}

type iAllocatePublicConnectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetPublicConnection(v string) *AllocatePublicConnectionResponseBody
	GetPublicConnection() *string
	SetRequestId(v string) *AllocatePublicConnectionResponseBody
	GetRequestId() *string
}

type AllocatePublicConnectionResponseBody struct {
	// The public endpoint that is assigned to the Simple Database Service instance.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com
	PublicConnection *string `json:"PublicConnection,omitempty" xml:"PublicConnection,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AllocatePublicConnectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s AllocatePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *AllocatePublicConnectionResponseBody) GetPublicConnection() *string {
	return s.PublicConnection
}

func (s *AllocatePublicConnectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *AllocatePublicConnectionResponseBody) SetPublicConnection(v string) *AllocatePublicConnectionResponseBody {
	s.PublicConnection = &v
	return s
}

func (s *AllocatePublicConnectionResponseBody) SetRequestId(v string) *AllocatePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllocatePublicConnectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iAllocatePublicConnectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *AllocatePublicConnectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *AllocatePublicConnectionResponse
	GetStatusCode() *int32
	SetBody(v *AllocatePublicConnectionResponseBody) *AllocatePublicConnectionResponse
	GetBody() *AllocatePublicConnectionResponseBody
}

type AllocatePublicConnectionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AllocatePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AllocatePublicConnectionResponse) String() string {
	return dara.Prettify(s)
}

func (s AllocatePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *AllocatePublicConnectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *AllocatePublicConnectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *AllocatePublicConnectionResponse) GetBody() *AllocatePublicConnectionResponseBody {
	return s.Body
}

func (s *AllocatePublicConnectionResponse) SetHeaders(v map[string]*string) *AllocatePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *AllocatePublicConnectionResponse) SetStatusCode(v int32) *AllocatePublicConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *AllocatePublicConnectionResponse) SetBody(v *AllocatePublicConnectionResponseBody) *AllocatePublicConnectionResponse {
	s.Body = v
	return s
}

func (s *AllocatePublicConnectionResponse) Validate() error {
	return dara.Validate(s)
}

type iApplyFirewallTemplateRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ApplyFirewallTemplateRequest
	GetClientToken() *string
	SetFirewallTemplateId(v string) *ApplyFirewallTemplateRequest
	GetFirewallTemplateId() *string
	SetInstanceIds(v []*string) *ApplyFirewallTemplateRequest
	GetInstanceIds() []*string
	SetRegionId(v string) *ApplyFirewallTemplateRequest
	GetRegionId() *string
}

type ApplyFirewallTemplateRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the firewall template.
	//
	// This parameter is required.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The IDs of the simple application servers.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ApplyFirewallTemplateRequest) String() string {
	return dara.Prettify(s)
}

func (s ApplyFirewallTemplateRequest) GoString() string {
	return s.String()
}

func (s *ApplyFirewallTemplateRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ApplyFirewallTemplateRequest) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *ApplyFirewallTemplateRequest) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *ApplyFirewallTemplateRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ApplyFirewallTemplateRequest) SetClientToken(v string) *ApplyFirewallTemplateRequest {
	s.ClientToken = &v
	return s
}

func (s *ApplyFirewallTemplateRequest) SetFirewallTemplateId(v string) *ApplyFirewallTemplateRequest {
	s.FirewallTemplateId = &v
	return s
}

func (s *ApplyFirewallTemplateRequest) SetInstanceIds(v []*string) *ApplyFirewallTemplateRequest {
	s.InstanceIds = v
	return s
}

func (s *ApplyFirewallTemplateRequest) SetRegionId(v string) *ApplyFirewallTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyFirewallTemplateRequest) Validate() error {
	return dara.Validate(s)
}

type iApplyFirewallTemplateResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ApplyFirewallTemplateResponseBody
	GetRequestId() *string
	SetTaskId(v string) *ApplyFirewallTemplateResponseBody
	GetTaskId() *string
}

type ApplyFirewallTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the execution to apply the template.
	//
	// example:
	//
	// aft-ikgt0bynitvs3****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ApplyFirewallTemplateResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ApplyFirewallTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyFirewallTemplateResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ApplyFirewallTemplateResponseBody) GetTaskId() *string {
	return s.TaskId
}

func (s *ApplyFirewallTemplateResponseBody) SetRequestId(v string) *ApplyFirewallTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyFirewallTemplateResponseBody) SetTaskId(v string) *ApplyFirewallTemplateResponseBody {
	s.TaskId = &v
	return s
}

func (s *ApplyFirewallTemplateResponseBody) Validate() error {
	return dara.Validate(s)
}

type iApplyFirewallTemplateResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ApplyFirewallTemplateResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ApplyFirewallTemplateResponse
	GetStatusCode() *int32
	SetBody(v *ApplyFirewallTemplateResponseBody) *ApplyFirewallTemplateResponse
	GetBody() *ApplyFirewallTemplateResponseBody
}

type ApplyFirewallTemplateResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyFirewallTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyFirewallTemplateResponse) String() string {
	return dara.Prettify(s)
}

func (s ApplyFirewallTemplateResponse) GoString() string {
	return s.String()
}

func (s *ApplyFirewallTemplateResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ApplyFirewallTemplateResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ApplyFirewallTemplateResponse) GetBody() *ApplyFirewallTemplateResponseBody {
	return s.Body
}

func (s *ApplyFirewallTemplateResponse) SetHeaders(v map[string]*string) *ApplyFirewallTemplateResponse {
	s.Headers = v
	return s
}

func (s *ApplyFirewallTemplateResponse) SetStatusCode(v int32) *ApplyFirewallTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyFirewallTemplateResponse) SetBody(v *ApplyFirewallTemplateResponseBody) *ApplyFirewallTemplateResponse {
	s.Body = v
	return s
}

func (s *ApplyFirewallTemplateResponse) Validate() error {
	return dara.Validate(s)
}

type iAttachKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *AttachKeyPairRequest
	GetClientToken() *string
	SetInstanceIds(v []*string) *AttachKeyPairRequest
	GetInstanceIds() []*string
	SetKeyPairName(v string) *AttachKeyPairRequest
	GetKeyPairName() *string
	SetRegionId(v string) *AttachKeyPairRequest
	GetRegionId() *string
}

type AttachKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The IDs of simple application servers. You can specify a maximum of 50 IDs of simple application servers.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The name of the key pair that you want to bind to the simple application server. The name must be 2 to 64 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter but cannot start with http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// test_gin
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AttachKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s AttachKeyPairRequest) GoString() string {
	return s.String()
}

func (s *AttachKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *AttachKeyPairRequest) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *AttachKeyPairRequest) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *AttachKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *AttachKeyPairRequest) SetClientToken(v string) *AttachKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *AttachKeyPairRequest) SetInstanceIds(v []*string) *AttachKeyPairRequest {
	s.InstanceIds = v
	return s
}

func (s *AttachKeyPairRequest) SetKeyPairName(v string) *AttachKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *AttachKeyPairRequest) SetRegionId(v string) *AttachKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *AttachKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iAttachKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFailCount(v int32) *AttachKeyPairResponseBody
	GetFailCount() *int32
	SetRequestId(v string) *AttachKeyPairResponseBody
	GetRequestId() *string
	SetResults(v []*AttachKeyPairResponseBodyResults) *AttachKeyPairResponseBody
	GetResults() []*AttachKeyPairResponseBodyResults
	SetTotalCount(v int32) *AttachKeyPairResponseBody
	GetTotalCount() *int32
}

type AttachKeyPairResponseBody struct {
	// The total number of simple application servers to which the key pair failed to be bound.
	//
	// example:
	//
	// 2
	FailCount *int32 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The request results.
	Results []*AttachKeyPairResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	// The total number of simple application servers to which the key pair is bound.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s AttachKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s AttachKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponseBody) GetFailCount() *int32 {
	return s.FailCount
}

func (s *AttachKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *AttachKeyPairResponseBody) GetResults() []*AttachKeyPairResponseBodyResults {
	return s.Results
}

func (s *AttachKeyPairResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *AttachKeyPairResponseBody) SetFailCount(v int32) *AttachKeyPairResponseBody {
	s.FailCount = &v
	return s
}

func (s *AttachKeyPairResponseBody) SetRequestId(v string) *AttachKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachKeyPairResponseBody) SetResults(v []*AttachKeyPairResponseBodyResults) *AttachKeyPairResponseBody {
	s.Results = v
	return s
}

func (s *AttachKeyPairResponseBody) SetTotalCount(v int32) *AttachKeyPairResponseBody {
	s.TotalCount = &v
	return s
}

func (s *AttachKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type AttachKeyPairResponseBodyResults struct {
	// The HTTP status code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The simple application server ID.
	//
	// example:
	//
	// aa6e71ddb35c46679bc4753d6219d604
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The response message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Indicates whether the key pair is bound to the simple application server successfully. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AttachKeyPairResponseBodyResults) String() string {
	return dara.Prettify(s)
}

func (s AttachKeyPairResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponseBodyResults) GetCode() *string {
	return s.Code
}

func (s *AttachKeyPairResponseBodyResults) GetInstanceId() *string {
	return s.InstanceId
}

func (s *AttachKeyPairResponseBodyResults) GetMessage() *string {
	return s.Message
}

func (s *AttachKeyPairResponseBodyResults) GetSuccess() *string {
	return s.Success
}

func (s *AttachKeyPairResponseBodyResults) SetCode(v string) *AttachKeyPairResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachKeyPairResponseBodyResults) SetInstanceId(v string) *AttachKeyPairResponseBodyResults {
	s.InstanceId = &v
	return s
}

func (s *AttachKeyPairResponseBodyResults) SetMessage(v string) *AttachKeyPairResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachKeyPairResponseBodyResults) SetSuccess(v string) *AttachKeyPairResponseBodyResults {
	s.Success = &v
	return s
}

func (s *AttachKeyPairResponseBodyResults) Validate() error {
	return dara.Validate(s)
}

type iAttachKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *AttachKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *AttachKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *AttachKeyPairResponseBody) *AttachKeyPairResponse
	GetBody() *AttachKeyPairResponseBody
}

type AttachKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s AttachKeyPairResponse) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *AttachKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *AttachKeyPairResponse) GetBody() *AttachKeyPairResponseBody {
	return s.Body
}

func (s *AttachKeyPairResponse) SetHeaders(v map[string]*string) *AttachKeyPairResponse {
	s.Headers = v
	return s
}

func (s *AttachKeyPairResponse) SetStatusCode(v int32) *AttachKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachKeyPairResponse) SetBody(v *AttachKeyPairResponseBody) *AttachKeyPairResponse {
	s.Body = v
	return s
}

func (s *AttachKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateCommandRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandContent(v string) *CreateCommandRequest
	GetCommandContent() *string
	SetDescription(v string) *CreateCommandRequest
	GetDescription() *string
	SetEnableParameter(v bool) *CreateCommandRequest
	GetEnableParameter() *bool
	SetName(v string) *CreateCommandRequest
	GetName() *string
	SetRegionId(v string) *CreateCommandRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *CreateCommandRequest
	GetResourceGroupId() *string
	SetTag(v []*CreateCommandRequestTag) *CreateCommandRequest
	GetTag() []*CreateCommandRequestTag
	SetTimeout(v int64) *CreateCommandRequest
	GetTimeout() *int64
	SetType(v string) *CreateCommandRequest
	GetType() *string
	SetWorkingDir(v string) *CreateCommandRequest
	GetWorkingDir() *string
}

type CreateCommandRequest struct {
	// The command content. When you specify this parameter, take note of the following items:
	//
	// 	- When `EnableParameter` is set to true, the custom parameter feature is enabled, and you can configure custom parameters in the command based on the following rules:
	//
	// 	- Define custom parameters in the {{}} format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
	//
	// 	- You can specify up to 20 custom parameters.
	//
	// 	- The name of a custom parameter can contain only letters, digits, underscores (_), and hyphens (-). The name is case-insensitive.
	//
	// 	- The name of a custom parameter cannot exceed 64 bytes in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// ifconfig -s
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// The description of the command. The description supports all character sets and can be up to 512 characters in length.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to use custom parameters in the command.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	EnableParameter *bool `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
	// The name of the command. The name supports all character sets and can be up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags that you want to add to the command. You can specify up to 20 tags.
	Tag []*CreateCommandRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The timeout period for the command execution on the instance.
	//
	// If a command execution task times out, Command Assistant forcefully terminates the task process. Valid values: 10 to 86400. Unit: seconds. The period of 86400 seconds is equal to 24 hours.
	//
	// Default value: 60.
	//
	// example:
	//
	// 60
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The language type of the command. Valid values:
	//
	// 	- RunBatScript: batch command, applicable to Windows instances
	//
	// 	- RunPowerShellScript: PowerShell command, applicable to Windows instances
	//
	// 	- RunShellScript: shell command, applicable to Linux instances
	//
	// This parameter is required.
	//
	// example:
	//
	// RunShellScript
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The working directory of the command on the ECS instance.
	//
	// Default values:
	//
	// 	- For a Linux instance, the default value is the home directory of the root user, which is the `/root` directory.
	//
	// 	- For a Windows instance, the default value is the directory where the Cloud Assistant client process resides. Example: `C:\\Windows\\System32`.
	//
	// example:
	//
	// /root/
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
}

func (s CreateCommandRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateCommandRequest) GoString() string {
	return s.String()
}

func (s *CreateCommandRequest) GetCommandContent() *string {
	return s.CommandContent
}

func (s *CreateCommandRequest) GetDescription() *string {
	return s.Description
}

func (s *CreateCommandRequest) GetEnableParameter() *bool {
	return s.EnableParameter
}

func (s *CreateCommandRequest) GetName() *string {
	return s.Name
}

func (s *CreateCommandRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateCommandRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *CreateCommandRequest) GetTag() []*CreateCommandRequestTag {
	return s.Tag
}

func (s *CreateCommandRequest) GetTimeout() *int64 {
	return s.Timeout
}

func (s *CreateCommandRequest) GetType() *string {
	return s.Type
}

func (s *CreateCommandRequest) GetWorkingDir() *string {
	return s.WorkingDir
}

func (s *CreateCommandRequest) SetCommandContent(v string) *CreateCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *CreateCommandRequest) SetDescription(v string) *CreateCommandRequest {
	s.Description = &v
	return s
}

func (s *CreateCommandRequest) SetEnableParameter(v bool) *CreateCommandRequest {
	s.EnableParameter = &v
	return s
}

func (s *CreateCommandRequest) SetName(v string) *CreateCommandRequest {
	s.Name = &v
	return s
}

func (s *CreateCommandRequest) SetRegionId(v string) *CreateCommandRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCommandRequest) SetResourceGroupId(v string) *CreateCommandRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateCommandRequest) SetTag(v []*CreateCommandRequestTag) *CreateCommandRequest {
	s.Tag = v
	return s
}

func (s *CreateCommandRequest) SetTimeout(v int64) *CreateCommandRequest {
	s.Timeout = &v
	return s
}

func (s *CreateCommandRequest) SetType(v string) *CreateCommandRequest {
	s.Type = &v
	return s
}

func (s *CreateCommandRequest) SetWorkingDir(v string) *CreateCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *CreateCommandRequest) Validate() error {
	return dara.Validate(s)
}

type CreateCommandRequestTag struct {
	// The key of tag N that you want to add to the command. Valid values of N: 1 to 20.
	//
	// The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that you want to add to the command. Valid values of N: 1 to 20.
	//
	// The tag value can be an empty string. The tag value can be up to 64 characters in length and cannot contain http:// or https://.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateCommandRequestTag) String() string {
	return dara.Prettify(s)
}

func (s CreateCommandRequestTag) GoString() string {
	return s.String()
}

func (s *CreateCommandRequestTag) GetKey() *string {
	return s.Key
}

func (s *CreateCommandRequestTag) GetValue() *string {
	return s.Value
}

func (s *CreateCommandRequestTag) SetKey(v string) *CreateCommandRequestTag {
	s.Key = &v
	return s
}

func (s *CreateCommandRequestTag) SetValue(v string) *CreateCommandRequestTag {
	s.Value = &v
	return s
}

func (s *CreateCommandRequestTag) Validate() error {
	return dara.Validate(s)
}

type iCreateCommandResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCommandId(v string) *CreateCommandResponseBody
	GetCommandId() *string
	SetRequestId(v string) *CreateCommandResponseBody
	GetRequestId() *string
}

type CreateCommandResponseBody struct {
	// The command ID.
	//
	// example:
	//
	// c-sh02yh0932w****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCommandResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateCommandResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCommandResponseBody) GetCommandId() *string {
	return s.CommandId
}

func (s *CreateCommandResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateCommandResponseBody) SetCommandId(v string) *CreateCommandResponseBody {
	s.CommandId = &v
	return s
}

func (s *CreateCommandResponseBody) SetRequestId(v string) *CreateCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCommandResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateCommandResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateCommandResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateCommandResponse
	GetStatusCode() *int32
	SetBody(v *CreateCommandResponseBody) *CreateCommandResponse
	GetBody() *CreateCommandResponseBody
}

type CreateCommandResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCommandResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateCommandResponse) GoString() string {
	return s.String()
}

func (s *CreateCommandResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateCommandResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateCommandResponse) GetBody() *CreateCommandResponseBody {
	return s.Body
}

func (s *CreateCommandResponse) SetHeaders(v map[string]*string) *CreateCommandResponse {
	s.Headers = v
	return s
}

func (s *CreateCommandResponse) SetStatusCode(v int32) *CreateCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCommandResponse) SetBody(v *CreateCommandResponseBody) *CreateCommandResponse {
	s.Body = v
	return s
}

func (s *CreateCommandResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateCustomImageRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *CreateCustomImageRequest
	GetClientToken() *string
	SetDataSnapshotId(v string) *CreateCustomImageRequest
	GetDataSnapshotId() *string
	SetDescription(v string) *CreateCustomImageRequest
	GetDescription() *string
	SetImageName(v string) *CreateCustomImageRequest
	GetImageName() *string
	SetInstanceId(v string) *CreateCustomImageRequest
	GetInstanceId() *string
	SetRegionId(v string) *CreateCustomImageRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *CreateCustomImageRequest
	GetResourceGroupId() *string
	SetSystemSnapshotId(v string) *CreateCustomImageRequest
	GetSystemSnapshotId() *string
	SetTag(v []*CreateCustomImageRequestTag) *CreateCustomImageRequest
	GetTag() []*CreateCustomImageRequestTag
}

type CreateCustomImageRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data disk snapshot.
	//
	// example:
	//
	// s-acscasca****
	DataSnapshotId *string `json:"DataSnapshotId,omitempty" xml:"DataSnapshotId,omitempty"`
	// The description of the custom image.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the custom image. The name must be 2 to 128 characters in length, and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter or a digit. This parameter is empty by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// customImage-test
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the database. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the system disk snapshot.
	//
	// example:
	//
	// s-acscasca****
	SystemSnapshotId *string `json:"SystemSnapshotId,omitempty" xml:"SystemSnapshotId,omitempty"`
	// The tags that you want to add to the custom image. You can specify up to 20 tags.
	Tag []*CreateCustomImageRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateCustomImageRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateCustomImageRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomImageRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateCustomImageRequest) GetDataSnapshotId() *string {
	return s.DataSnapshotId
}

func (s *CreateCustomImageRequest) GetDescription() *string {
	return s.Description
}

func (s *CreateCustomImageRequest) GetImageName() *string {
	return s.ImageName
}

func (s *CreateCustomImageRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *CreateCustomImageRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateCustomImageRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *CreateCustomImageRequest) GetSystemSnapshotId() *string {
	return s.SystemSnapshotId
}

func (s *CreateCustomImageRequest) GetTag() []*CreateCustomImageRequestTag {
	return s.Tag
}

func (s *CreateCustomImageRequest) SetClientToken(v string) *CreateCustomImageRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateCustomImageRequest) SetDataSnapshotId(v string) *CreateCustomImageRequest {
	s.DataSnapshotId = &v
	return s
}

func (s *CreateCustomImageRequest) SetDescription(v string) *CreateCustomImageRequest {
	s.Description = &v
	return s
}

func (s *CreateCustomImageRequest) SetImageName(v string) *CreateCustomImageRequest {
	s.ImageName = &v
	return s
}

func (s *CreateCustomImageRequest) SetInstanceId(v string) *CreateCustomImageRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateCustomImageRequest) SetRegionId(v string) *CreateCustomImageRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCustomImageRequest) SetResourceGroupId(v string) *CreateCustomImageRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateCustomImageRequest) SetSystemSnapshotId(v string) *CreateCustomImageRequest {
	s.SystemSnapshotId = &v
	return s
}

func (s *CreateCustomImageRequest) SetTag(v []*CreateCustomImageRequestTag) *CreateCustomImageRequest {
	s.Tag = v
	return s
}

func (s *CreateCustomImageRequest) Validate() error {
	return dara.Validate(s)
}

type CreateCustomImageRequestTag struct {
	// The key of tag N that you want to add to the custom image. Valid values of N: 1 to 20.
	//
	// The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that you want to add to the custom image. Valid values of N: 1 to 20.
	//
	// The tag value can be an empty string. The tag value can be up to 64 characters in length and cannot contain http:// or https://.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateCustomImageRequestTag) String() string {
	return dara.Prettify(s)
}

func (s CreateCustomImageRequestTag) GoString() string {
	return s.String()
}

func (s *CreateCustomImageRequestTag) GetKey() *string {
	return s.Key
}

func (s *CreateCustomImageRequestTag) GetValue() *string {
	return s.Value
}

func (s *CreateCustomImageRequestTag) SetKey(v string) *CreateCustomImageRequestTag {
	s.Key = &v
	return s
}

func (s *CreateCustomImageRequestTag) SetValue(v string) *CreateCustomImageRequestTag {
	s.Value = &v
	return s
}

func (s *CreateCustomImageRequestTag) Validate() error {
	return dara.Validate(s)
}

type iCreateCustomImageResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetImageId(v string) *CreateCustomImageResponseBody
	GetImageId() *string
	SetRequestId(v string) *CreateCustomImageResponseBody
	GetRequestId() *string
}

type CreateCustomImageResponseBody struct {
	// The custom image ID.
	//
	// example:
	//
	// m-csaascsaccscs****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCustomImageResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateCustomImageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomImageResponseBody) GetImageId() *string {
	return s.ImageId
}

func (s *CreateCustomImageResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateCustomImageResponseBody) SetImageId(v string) *CreateCustomImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *CreateCustomImageResponseBody) SetRequestId(v string) *CreateCustomImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCustomImageResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateCustomImageResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateCustomImageResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateCustomImageResponse
	GetStatusCode() *int32
	SetBody(v *CreateCustomImageResponseBody) *CreateCustomImageResponse
	GetBody() *CreateCustomImageResponseBody
}

type CreateCustomImageResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCustomImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCustomImageResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateCustomImageResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomImageResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateCustomImageResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateCustomImageResponse) GetBody() *CreateCustomImageResponseBody {
	return s.Body
}

func (s *CreateCustomImageResponse) SetHeaders(v map[string]*string) *CreateCustomImageResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomImageResponse) SetStatusCode(v int32) *CreateCustomImageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomImageResponse) SetBody(v *CreateCustomImageResponseBody) *CreateCustomImageResponse {
	s.Body = v
	return s
}

func (s *CreateCustomImageResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallRuleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *CreateFirewallRuleRequest
	GetClientToken() *string
	SetInstanceId(v string) *CreateFirewallRuleRequest
	GetInstanceId() *string
	SetPort(v string) *CreateFirewallRuleRequest
	GetPort() *string
	SetRegionId(v string) *CreateFirewallRuleRequest
	GetRegionId() *string
	SetRemark(v string) *CreateFirewallRuleRequest
	GetRemark() *string
	SetRuleProtocol(v string) *CreateFirewallRuleRequest
	GetRuleProtocol() *string
}

type CreateFirewallRuleRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The port range.
	//
	// 	- When the transport layer protocol is TCP and/or UDP, the port range is 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: 1024/1055, which specifies the port range from 1024 to 1055.
	//
	// 	- When the transport layer protocol is ICMP, the port range is -1/-1, which indicates all ports.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3306
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The region ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// TEST
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP
	//
	// This parameter is required.
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
}

func (s CreateFirewallRuleRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateFirewallRuleRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateFirewallRuleRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *CreateFirewallRuleRequest) GetPort() *string {
	return s.Port
}

func (s *CreateFirewallRuleRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateFirewallRuleRequest) GetRemark() *string {
	return s.Remark
}

func (s *CreateFirewallRuleRequest) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *CreateFirewallRuleRequest) SetClientToken(v string) *CreateFirewallRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateFirewallRuleRequest) SetInstanceId(v string) *CreateFirewallRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateFirewallRuleRequest) SetPort(v string) *CreateFirewallRuleRequest {
	s.Port = &v
	return s
}

func (s *CreateFirewallRuleRequest) SetRegionId(v string) *CreateFirewallRuleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFirewallRuleRequest) SetRemark(v string) *CreateFirewallRuleRequest {
	s.Remark = &v
	return s
}

func (s *CreateFirewallRuleRequest) SetRuleProtocol(v string) *CreateFirewallRuleRequest {
	s.RuleProtocol = &v
	return s
}

func (s *CreateFirewallRuleRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallRuleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallId(v string) *CreateFirewallRuleResponseBody
	GetFirewallId() *string
	SetRequestId(v string) *CreateFirewallRuleResponseBody
	GetRequestId() *string
}

type CreateFirewallRuleResponseBody struct {
	// The ID of the firewall rule.
	//
	// example:
	//
	// 8007e18c61024aafbd776d52d0****
	FirewallId *string `json:"FirewallId,omitempty" xml:"FirewallId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFirewallRuleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFirewallRuleResponseBody) GetFirewallId() *string {
	return s.FirewallId
}

func (s *CreateFirewallRuleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateFirewallRuleResponseBody) SetFirewallId(v string) *CreateFirewallRuleResponseBody {
	s.FirewallId = &v
	return s
}

func (s *CreateFirewallRuleResponseBody) SetRequestId(v string) *CreateFirewallRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFirewallRuleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallRuleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateFirewallRuleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateFirewallRuleResponse
	GetStatusCode() *int32
	SetBody(v *CreateFirewallRuleResponseBody) *CreateFirewallRuleResponse
	GetBody() *CreateFirewallRuleResponseBody
}

type CreateFirewallRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFirewallRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFirewallRuleResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateFirewallRuleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateFirewallRuleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateFirewallRuleResponse) GetBody() *CreateFirewallRuleResponseBody {
	return s.Body
}

func (s *CreateFirewallRuleResponse) SetHeaders(v map[string]*string) *CreateFirewallRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateFirewallRuleResponse) SetStatusCode(v int32) *CreateFirewallRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFirewallRuleResponse) SetBody(v *CreateFirewallRuleResponseBody) *CreateFirewallRuleResponse {
	s.Body = v
	return s
}

func (s *CreateFirewallRuleResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallRulesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *CreateFirewallRulesRequest
	GetClientToken() *string
	SetFirewallRules(v []*CreateFirewallRulesRequestFirewallRules) *CreateFirewallRulesRequest
	GetFirewallRules() []*CreateFirewallRulesRequestFirewallRules
	SetInstanceId(v string) *CreateFirewallRulesRequest
	GetInstanceId() *string
	SetRegionId(v string) *CreateFirewallRulesRequest
	GetRegionId() *string
	SetTag(v []*CreateFirewallRulesRequestTag) *CreateFirewallRulesRequest
	GetTag() []*CreateFirewallRulesRequestTag
}

type CreateFirewallRulesRequest struct {
	// The client token.
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// Details about the firewall rules.
	FirewallRules []*CreateFirewallRulesRequestFirewallRules `json:"FirewallRules,omitempty" xml:"FirewallRules,omitempty" type:"Repeated"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags that you want to add to the firewall. You can specify up to 20 tags.
	Tag []*CreateFirewallRulesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateFirewallRulesRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRulesRequest) GoString() string {
	return s.String()
}

func (s *CreateFirewallRulesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateFirewallRulesRequest) GetFirewallRules() []*CreateFirewallRulesRequestFirewallRules {
	return s.FirewallRules
}

func (s *CreateFirewallRulesRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *CreateFirewallRulesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateFirewallRulesRequest) GetTag() []*CreateFirewallRulesRequestTag {
	return s.Tag
}

func (s *CreateFirewallRulesRequest) SetClientToken(v string) *CreateFirewallRulesRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateFirewallRulesRequest) SetFirewallRules(v []*CreateFirewallRulesRequestFirewallRules) *CreateFirewallRulesRequest {
	s.FirewallRules = v
	return s
}

func (s *CreateFirewallRulesRequest) SetInstanceId(v string) *CreateFirewallRulesRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateFirewallRulesRequest) SetRegionId(v string) *CreateFirewallRulesRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFirewallRulesRequest) SetTag(v []*CreateFirewallRulesRequestTag) *CreateFirewallRulesRequest {
	s.Tag = v
	return s
}

func (s *CreateFirewallRulesRequest) Validate() error {
	return dara.Validate(s)
}

type CreateFirewallRulesRequestFirewallRules struct {
	// The port number.
	//
	// 	- When the transport layer protocol is TCP and/or UDP, the port number range is 1 to 65535. Specify a port range in the format of \\<Start port number>/\\<End port number>. Example: 1/200.
	//
	// 	- When the transport layer protocol is ICMP, the port number range is -1/-1, which indicates all ports.
	//
	// example:
	//
	// 3306
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The description of the firewall rule.
	//
	// example:
	//
	// TEST
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The IP address or CIDR block that is allowed in the firewall rule.
	//
	// example:
	//
	// 47.101.XX.XX
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s CreateFirewallRulesRequestFirewallRules) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRulesRequestFirewallRules) GoString() string {
	return s.String()
}

func (s *CreateFirewallRulesRequestFirewallRules) GetPort() *string {
	return s.Port
}

func (s *CreateFirewallRulesRequestFirewallRules) GetRemark() *string {
	return s.Remark
}

func (s *CreateFirewallRulesRequestFirewallRules) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *CreateFirewallRulesRequestFirewallRules) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *CreateFirewallRulesRequestFirewallRules) SetPort(v string) *CreateFirewallRulesRequestFirewallRules {
	s.Port = &v
	return s
}

func (s *CreateFirewallRulesRequestFirewallRules) SetRemark(v string) *CreateFirewallRulesRequestFirewallRules {
	s.Remark = &v
	return s
}

func (s *CreateFirewallRulesRequestFirewallRules) SetRuleProtocol(v string) *CreateFirewallRulesRequestFirewallRules {
	s.RuleProtocol = &v
	return s
}

func (s *CreateFirewallRulesRequestFirewallRules) SetSourceCidrIp(v string) *CreateFirewallRulesRequestFirewallRules {
	s.SourceCidrIp = &v
	return s
}

func (s *CreateFirewallRulesRequestFirewallRules) Validate() error {
	return dara.Validate(s)
}

type CreateFirewallRulesRequestTag struct {
	// The tag key. Valid values of N: 1 to 20.
	//
	// The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value. Valid values of N: 1 to 20.
	//
	// The tag value can be an empty string. The tag value can be up to 64 characters in length and cannot contain http:// or https://.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateFirewallRulesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRulesRequestTag) GoString() string {
	return s.String()
}

func (s *CreateFirewallRulesRequestTag) GetKey() *string {
	return s.Key
}

func (s *CreateFirewallRulesRequestTag) GetValue() *string {
	return s.Value
}

func (s *CreateFirewallRulesRequestTag) SetKey(v string) *CreateFirewallRulesRequestTag {
	s.Key = &v
	return s
}

func (s *CreateFirewallRulesRequestTag) SetValue(v string) *CreateFirewallRulesRequestTag {
	s.Value = &v
	return s
}

func (s *CreateFirewallRulesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallRulesShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *CreateFirewallRulesShrinkRequest
	GetClientToken() *string
	SetFirewallRulesShrink(v string) *CreateFirewallRulesShrinkRequest
	GetFirewallRulesShrink() *string
	SetInstanceId(v string) *CreateFirewallRulesShrinkRequest
	GetInstanceId() *string
	SetRegionId(v string) *CreateFirewallRulesShrinkRequest
	GetRegionId() *string
	SetTag(v []*CreateFirewallRulesShrinkRequestTag) *CreateFirewallRulesShrinkRequest
	GetTag() []*CreateFirewallRulesShrinkRequestTag
}

type CreateFirewallRulesShrinkRequest struct {
	// The client token.
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// Details about the firewall rules.
	FirewallRulesShrink *string `json:"FirewallRules,omitempty" xml:"FirewallRules,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags that you want to add to the firewall. You can specify up to 20 tags.
	Tag []*CreateFirewallRulesShrinkRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateFirewallRulesShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRulesShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateFirewallRulesShrinkRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateFirewallRulesShrinkRequest) GetFirewallRulesShrink() *string {
	return s.FirewallRulesShrink
}

func (s *CreateFirewallRulesShrinkRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *CreateFirewallRulesShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateFirewallRulesShrinkRequest) GetTag() []*CreateFirewallRulesShrinkRequestTag {
	return s.Tag
}

func (s *CreateFirewallRulesShrinkRequest) SetClientToken(v string) *CreateFirewallRulesShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateFirewallRulesShrinkRequest) SetFirewallRulesShrink(v string) *CreateFirewallRulesShrinkRequest {
	s.FirewallRulesShrink = &v
	return s
}

func (s *CreateFirewallRulesShrinkRequest) SetInstanceId(v string) *CreateFirewallRulesShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateFirewallRulesShrinkRequest) SetRegionId(v string) *CreateFirewallRulesShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFirewallRulesShrinkRequest) SetTag(v []*CreateFirewallRulesShrinkRequestTag) *CreateFirewallRulesShrinkRequest {
	s.Tag = v
	return s
}

func (s *CreateFirewallRulesShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type CreateFirewallRulesShrinkRequestTag struct {
	// The tag key. Valid values of N: 1 to 20.
	//
	// The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value. Valid values of N: 1 to 20.
	//
	// The tag value can be an empty string. The tag value can be up to 64 characters in length and cannot contain http:// or https://.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateFirewallRulesShrinkRequestTag) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRulesShrinkRequestTag) GoString() string {
	return s.String()
}

func (s *CreateFirewallRulesShrinkRequestTag) GetKey() *string {
	return s.Key
}

func (s *CreateFirewallRulesShrinkRequestTag) GetValue() *string {
	return s.Value
}

func (s *CreateFirewallRulesShrinkRequestTag) SetKey(v string) *CreateFirewallRulesShrinkRequestTag {
	s.Key = &v
	return s
}

func (s *CreateFirewallRulesShrinkRequestTag) SetValue(v string) *CreateFirewallRulesShrinkRequestTag {
	s.Value = &v
	return s
}

func (s *CreateFirewallRulesShrinkRequestTag) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallRulesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallRuleIds(v []*string) *CreateFirewallRulesResponseBody
	GetFirewallRuleIds() []*string
	SetRequestId(v string) *CreateFirewallRulesResponseBody
	GetRequestId() *string
}

type CreateFirewallRulesResponseBody struct {
	// The IDs of the firewall rules that you created.
	FirewallRuleIds []*string `json:"FirewallRuleIds,omitempty" xml:"FirewallRuleIds,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFirewallRulesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRulesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFirewallRulesResponseBody) GetFirewallRuleIds() []*string {
	return s.FirewallRuleIds
}

func (s *CreateFirewallRulesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateFirewallRulesResponseBody) SetFirewallRuleIds(v []*string) *CreateFirewallRulesResponseBody {
	s.FirewallRuleIds = v
	return s
}

func (s *CreateFirewallRulesResponseBody) SetRequestId(v string) *CreateFirewallRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFirewallRulesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallRulesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateFirewallRulesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateFirewallRulesResponse
	GetStatusCode() *int32
	SetBody(v *CreateFirewallRulesResponseBody) *CreateFirewallRulesResponse
	GetBody() *CreateFirewallRulesResponseBody
}

type CreateFirewallRulesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFirewallRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFirewallRulesResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallRulesResponse) GoString() string {
	return s.String()
}

func (s *CreateFirewallRulesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateFirewallRulesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateFirewallRulesResponse) GetBody() *CreateFirewallRulesResponseBody {
	return s.Body
}

func (s *CreateFirewallRulesResponse) SetHeaders(v map[string]*string) *CreateFirewallRulesResponse {
	s.Headers = v
	return s
}

func (s *CreateFirewallRulesResponse) SetStatusCode(v int32) *CreateFirewallRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFirewallRulesResponse) SetBody(v *CreateFirewallRulesResponseBody) *CreateFirewallRulesResponse {
	s.Body = v
	return s
}

func (s *CreateFirewallRulesResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallTemplateRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDescription(v string) *CreateFirewallTemplateRequest
	GetDescription() *string
	SetFirewallRule(v []*CreateFirewallTemplateRequestFirewallRule) *CreateFirewallTemplateRequest
	GetFirewallRule() []*CreateFirewallTemplateRequestFirewallRule
	SetName(v string) *CreateFirewallTemplateRequest
	GetName() *string
	SetRegionId(v string) *CreateFirewallTemplateRequest
	GetRegionId() *string
}

type CreateFirewallTemplateRequest struct {
	// The description of the firewall template.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The details of the firewall rule.
	FirewallRule []*CreateFirewallTemplateRequestFirewallRule `json:"FirewallRule,omitempty" xml:"FirewallRule,omitempty" type:"Repeated"`
	// The name of the firewall template.
	//
	// This parameter is required.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID of the simple application server to which the firewall template belongs. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateFirewallTemplateRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateRequest) GetDescription() *string {
	return s.Description
}

func (s *CreateFirewallTemplateRequest) GetFirewallRule() []*CreateFirewallTemplateRequestFirewallRule {
	return s.FirewallRule
}

func (s *CreateFirewallTemplateRequest) GetName() *string {
	return s.Name
}

func (s *CreateFirewallTemplateRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateFirewallTemplateRequest) SetDescription(v string) *CreateFirewallTemplateRequest {
	s.Description = &v
	return s
}

func (s *CreateFirewallTemplateRequest) SetFirewallRule(v []*CreateFirewallTemplateRequestFirewallRule) *CreateFirewallTemplateRequest {
	s.FirewallRule = v
	return s
}

func (s *CreateFirewallTemplateRequest) SetName(v string) *CreateFirewallTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateFirewallTemplateRequest) SetRegionId(v string) *CreateFirewallTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFirewallTemplateRequest) Validate() error {
	return dara.Validate(s)
}

type CreateFirewallTemplateRequestFirewallRule struct {
	// The port range. Valid values: 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 1024 to 1055.
	//
	// >  If you set RuleProtocol to ICMP, you must set Port to -1/-1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The remarks of the firewall rule.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol that the rule supports. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP
	//
	// This parameter is required.
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The source address to which you want to grant access permissions. CIDR blocks and IPv4 addresses are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// 223.166.XX.XX
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s CreateFirewallTemplateRequestFirewallRule) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateRequestFirewallRule) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateRequestFirewallRule) GetPort() *string {
	return s.Port
}

func (s *CreateFirewallTemplateRequestFirewallRule) GetRemark() *string {
	return s.Remark
}

func (s *CreateFirewallTemplateRequestFirewallRule) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *CreateFirewallTemplateRequestFirewallRule) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *CreateFirewallTemplateRequestFirewallRule) SetPort(v string) *CreateFirewallTemplateRequestFirewallRule {
	s.Port = &v
	return s
}

func (s *CreateFirewallTemplateRequestFirewallRule) SetRemark(v string) *CreateFirewallTemplateRequestFirewallRule {
	s.Remark = &v
	return s
}

func (s *CreateFirewallTemplateRequestFirewallRule) SetRuleProtocol(v string) *CreateFirewallTemplateRequestFirewallRule {
	s.RuleProtocol = &v
	return s
}

func (s *CreateFirewallTemplateRequestFirewallRule) SetSourceCidrIp(v string) *CreateFirewallTemplateRequestFirewallRule {
	s.SourceCidrIp = &v
	return s
}

func (s *CreateFirewallTemplateRequestFirewallRule) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallTemplateResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallTemplateId(v string) *CreateFirewallTemplateResponseBody
	GetFirewallTemplateId() *string
	SetRequestId(v string) *CreateFirewallTemplateResponseBody
	GetRequestId() *string
}

type CreateFirewallTemplateResponseBody struct {
	// The ID of the firewall template.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFirewallTemplateResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateResponseBody) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *CreateFirewallTemplateResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateFirewallTemplateResponseBody) SetFirewallTemplateId(v string) *CreateFirewallTemplateResponseBody {
	s.FirewallTemplateId = &v
	return s
}

func (s *CreateFirewallTemplateResponseBody) SetRequestId(v string) *CreateFirewallTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFirewallTemplateResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallTemplateResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateFirewallTemplateResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateFirewallTemplateResponse
	GetStatusCode() *int32
	SetBody(v *CreateFirewallTemplateResponseBody) *CreateFirewallTemplateResponse
	GetBody() *CreateFirewallTemplateResponseBody
}

type CreateFirewallTemplateResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFirewallTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFirewallTemplateResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateFirewallTemplateResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateFirewallTemplateResponse) GetBody() *CreateFirewallTemplateResponseBody {
	return s.Body
}

func (s *CreateFirewallTemplateResponse) SetHeaders(v map[string]*string) *CreateFirewallTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateFirewallTemplateResponse) SetStatusCode(v int32) *CreateFirewallTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFirewallTemplateResponse) SetBody(v *CreateFirewallTemplateResponseBody) *CreateFirewallTemplateResponse {
	s.Body = v
	return s
}

func (s *CreateFirewallTemplateResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallTemplateRulesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallRule(v []*CreateFirewallTemplateRulesRequestFirewallRule) *CreateFirewallTemplateRulesRequest
	GetFirewallRule() []*CreateFirewallTemplateRulesRequestFirewallRule
	SetFirewallTemplateId(v string) *CreateFirewallTemplateRulesRequest
	GetFirewallTemplateId() *string
	SetRegionId(v string) *CreateFirewallTemplateRulesRequest
	GetRegionId() *string
}

type CreateFirewallTemplateRulesRequest struct {
	// The details of the firewall rule.
	//
	// This parameter is required.
	FirewallRule []*CreateFirewallTemplateRulesRequestFirewallRule `json:"FirewallRule,omitempty" xml:"FirewallRule,omitempty" type:"Repeated"`
	// The ID of the firewall template.
	//
	// This parameter is required.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The region ID of the simple application server to which the firewall template is applied. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateFirewallTemplateRulesRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateRulesRequest) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateRulesRequest) GetFirewallRule() []*CreateFirewallTemplateRulesRequestFirewallRule {
	return s.FirewallRule
}

func (s *CreateFirewallTemplateRulesRequest) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *CreateFirewallTemplateRulesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateFirewallTemplateRulesRequest) SetFirewallRule(v []*CreateFirewallTemplateRulesRequestFirewallRule) *CreateFirewallTemplateRulesRequest {
	s.FirewallRule = v
	return s
}

func (s *CreateFirewallTemplateRulesRequest) SetFirewallTemplateId(v string) *CreateFirewallTemplateRulesRequest {
	s.FirewallTemplateId = &v
	return s
}

func (s *CreateFirewallTemplateRulesRequest) SetRegionId(v string) *CreateFirewallTemplateRulesRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFirewallTemplateRulesRequest) Validate() error {
	return dara.Validate(s)
}

type CreateFirewallTemplateRulesRequestFirewallRule struct {
	// The port range. Valid values: 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 1024 to 1055.
	//
	// >  If you set RuleProtocol to ICMP, you must set Port to -1/-1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// test
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol that the rule supports. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP
	//
	// This parameter is required.
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The source address to which you want to grant access permissions. CIDR blocks and IPv4 addresses are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// 222.70.XX.XX
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s CreateFirewallTemplateRulesRequestFirewallRule) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateRulesRequestFirewallRule) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) GetPort() *string {
	return s.Port
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) GetRemark() *string {
	return s.Remark
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) SetPort(v string) *CreateFirewallTemplateRulesRequestFirewallRule {
	s.Port = &v
	return s
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) SetRemark(v string) *CreateFirewallTemplateRulesRequestFirewallRule {
	s.Remark = &v
	return s
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) SetRuleProtocol(v string) *CreateFirewallTemplateRulesRequestFirewallRule {
	s.RuleProtocol = &v
	return s
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) SetSourceCidrIp(v string) *CreateFirewallTemplateRulesRequestFirewallRule {
	s.SourceCidrIp = &v
	return s
}

func (s *CreateFirewallTemplateRulesRequestFirewallRule) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallTemplateRulesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallTemplateRules(v []*CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) *CreateFirewallTemplateRulesResponseBody
	GetFirewallTemplateRules() []*CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules
	SetRequestId(v string) *CreateFirewallTemplateRulesResponseBody
	GetRequestId() *string
}

type CreateFirewallTemplateRulesResponseBody struct {
	// The firewall template rules.
	FirewallTemplateRules []*CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules `json:"FirewallTemplateRules,omitempty" xml:"FirewallTemplateRules,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFirewallTemplateRulesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateRulesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateRulesResponseBody) GetFirewallTemplateRules() []*CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules {
	return s.FirewallTemplateRules
}

func (s *CreateFirewallTemplateRulesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateFirewallTemplateRulesResponseBody) SetFirewallTemplateRules(v []*CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) *CreateFirewallTemplateRulesResponseBody {
	s.FirewallTemplateRules = v
	return s
}

func (s *CreateFirewallTemplateRulesResponseBody) SetRequestId(v string) *CreateFirewallTemplateRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFirewallTemplateRulesResponseBody) Validate() error {
	return dara.Validate(s)
}

type CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules struct {
	// The ID of the firewall template rule.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateRuleId *string `json:"FirewallTemplateRuleId,omitempty" xml:"FirewallTemplateRuleId,omitempty"`
	// The port range. Valid values: 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 1024 to 1055.
	//
	// >  If you set RuleProtocol to ICMP, you must set Port to -1/-1.
	//
	// example:
	//
	// 8080
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// test
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol that the rule supports. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP: the ICMP protocol
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The source address to which you want to grant access permissions. CIDR blocks and IPv4 addresses are supported.
	//
	// example:
	//
	// 171.233.XX.XX
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) GetFirewallTemplateRuleId() *string {
	return s.FirewallTemplateRuleId
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) GetPort() *string {
	return s.Port
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) GetRemark() *string {
	return s.Remark
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) SetFirewallTemplateRuleId(v string) *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules {
	s.FirewallTemplateRuleId = &v
	return s
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) SetPort(v string) *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules {
	s.Port = &v
	return s
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) SetRemark(v string) *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules {
	s.Remark = &v
	return s
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) SetRuleProtocol(v string) *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules {
	s.RuleProtocol = &v
	return s
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) SetSourceCidrIp(v string) *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules {
	s.SourceCidrIp = &v
	return s
}

func (s *CreateFirewallTemplateRulesResponseBodyFirewallTemplateRules) Validate() error {
	return dara.Validate(s)
}

type iCreateFirewallTemplateRulesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateFirewallTemplateRulesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateFirewallTemplateRulesResponse
	GetStatusCode() *int32
	SetBody(v *CreateFirewallTemplateRulesResponseBody) *CreateFirewallTemplateRulesResponse
	GetBody() *CreateFirewallTemplateRulesResponseBody
}

type CreateFirewallTemplateRulesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFirewallTemplateRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFirewallTemplateRulesResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateFirewallTemplateRulesResponse) GoString() string {
	return s.String()
}

func (s *CreateFirewallTemplateRulesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateFirewallTemplateRulesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateFirewallTemplateRulesResponse) GetBody() *CreateFirewallTemplateRulesResponseBody {
	return s.Body
}

func (s *CreateFirewallTemplateRulesResponse) SetHeaders(v map[string]*string) *CreateFirewallTemplateRulesResponse {
	s.Headers = v
	return s
}

func (s *CreateFirewallTemplateRulesResponse) SetStatusCode(v int32) *CreateFirewallTemplateRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFirewallTemplateRulesResponse) SetBody(v *CreateFirewallTemplateRulesResponseBody) *CreateFirewallTemplateRulesResponse {
	s.Body = v
	return s
}

func (s *CreateFirewallTemplateRulesResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateInstanceKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *CreateInstanceKeyPairRequest
	GetClientToken() *string
	SetInstanceId(v string) *CreateInstanceKeyPairRequest
	GetInstanceId() *string
	SetKeyPairName(v string) *CreateInstanceKeyPairRequest
	GetKeyPairName() *string
	SetRegionId(v string) *CreateInstanceKeyPairRequest
	GetRegionId() *string
}

type CreateInstanceKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the key pair.
	//
	// This parameter is required.
	//
	// example:
	//
	// ceshi
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateInstanceKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateInstanceKeyPairRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateInstanceKeyPairRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *CreateInstanceKeyPairRequest) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *CreateInstanceKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateInstanceKeyPairRequest) SetClientToken(v string) *CreateInstanceKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateInstanceKeyPairRequest) SetInstanceId(v string) *CreateInstanceKeyPairRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceKeyPairRequest) SetKeyPairName(v string) *CreateInstanceKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateInstanceKeyPairRequest) SetRegionId(v string) *CreateInstanceKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *CreateInstanceKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateInstanceKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFingerprint(v string) *CreateInstanceKeyPairResponseBody
	GetFingerprint() *string
	SetKeyPairName(v string) *CreateInstanceKeyPairResponseBody
	GetKeyPairName() *string
	SetPrivateKey(v string) *CreateInstanceKeyPairResponseBody
	GetPrivateKey() *string
	SetRequestId(v string) *CreateInstanceKeyPairResponseBody
	GetRequestId() *string
}

type CreateInstanceKeyPairResponseBody struct {
	// The fingerprint of the key pair.
	//
	// example:
	//
	// If2K1ItazA4GlKkWCEhdRj8Wd6czAvK9*****
	Fingerprint *string `json:"Fingerprint,omitempty" xml:"Fingerprint,omitempty"`
	// The name of the key pair.
	//
	// example:
	//
	// ceshi
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The private key.
	//
	// example:
	//
	// ***
	PrivateKey *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInstanceKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateInstanceKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceKeyPairResponseBody) GetFingerprint() *string {
	return s.Fingerprint
}

func (s *CreateInstanceKeyPairResponseBody) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *CreateInstanceKeyPairResponseBody) GetPrivateKey() *string {
	return s.PrivateKey
}

func (s *CreateInstanceKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateInstanceKeyPairResponseBody) SetFingerprint(v string) *CreateInstanceKeyPairResponseBody {
	s.Fingerprint = &v
	return s
}

func (s *CreateInstanceKeyPairResponseBody) SetKeyPairName(v string) *CreateInstanceKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *CreateInstanceKeyPairResponseBody) SetPrivateKey(v string) *CreateInstanceKeyPairResponseBody {
	s.PrivateKey = &v
	return s
}

func (s *CreateInstanceKeyPairResponseBody) SetRequestId(v string) *CreateInstanceKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateInstanceKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateInstanceKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateInstanceKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *CreateInstanceKeyPairResponseBody) *CreateInstanceKeyPairResponse
	GetBody() *CreateInstanceKeyPairResponseBody
}

type CreateInstanceKeyPairResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstanceKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstanceKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateInstanceKeyPairResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateInstanceKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateInstanceKeyPairResponse) GetBody() *CreateInstanceKeyPairResponseBody {
	return s.Body
}

func (s *CreateInstanceKeyPairResponse) SetHeaders(v map[string]*string) *CreateInstanceKeyPairResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceKeyPairResponse) SetStatusCode(v int32) *CreateInstanceKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceKeyPairResponse) SetBody(v *CreateInstanceKeyPairResponseBody) *CreateInstanceKeyPairResponse {
	s.Body = v
	return s
}

func (s *CreateInstanceKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAmount(v int32) *CreateInstancesRequest
	GetAmount() *int32
	SetAutoRenew(v bool) *CreateInstancesRequest
	GetAutoRenew() *bool
	SetAutoRenewPeriod(v int32) *CreateInstancesRequest
	GetAutoRenewPeriod() *int32
	SetChargeType(v string) *CreateInstancesRequest
	GetChargeType() *string
	SetClientToken(v string) *CreateInstancesRequest
	GetClientToken() *string
	SetDataDiskSize(v int64) *CreateInstancesRequest
	GetDataDiskSize() *int64
	SetImageId(v string) *CreateInstancesRequest
	GetImageId() *string
	SetPeriod(v int32) *CreateInstancesRequest
	GetPeriod() *int32
	SetPlanId(v string) *CreateInstancesRequest
	GetPlanId() *string
	SetRegionId(v string) *CreateInstancesRequest
	GetRegionId() *string
}

type CreateInstancesRequest struct {
	// The number of simple application servers that you want to create. Valid values: 1 to 20.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Specifies whether to enable auto-renewal. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The auto-renewal period. This parameter is required only when you set `AutoRenew` to true. Unit: month. Valid values: 1, 3, 6, 12, 24, and 36.
	//
	// example:
	//
	// 1
	AutoRenewPeriod *int32 `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	// The billing method of the simple application servers. Set the value to PrePaid, which indicates the subscription billing method.
	//
	// Default value: PrePaid.
	//
	// example:
	//
	// PrePaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The size of the data disk that is attached to the server. Unit: GB. Valid values: 0 to 16380. The value must be an integral multiple of 20.
	//
	// 	- A value of 0 indicates that no data disk is attached.
	//
	// 	- If the disk included in the specified plan is a standard SSD, the data disk must be 20 GB or larger in size.
	//
	// Default value: 0.
	//
	// example:
	//
	// 20
	DataDiskSize *int64 `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The image ID. You can call the [ListImages](https://help.aliyun.com/document_detail/189313.html) operation to query the available images in the specified region.
	//
	// This parameter is required.
	//
	// example:
	//
	// e2c9c365024a44369c9b955a998a****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The subscription period of the servers. Unit: months. Valid values: 1, 3, 6, 12, 24, and 36.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The plan ID. You can call the [ListPlans](https://help.aliyun.com/document_detail/189314.html) operation to query all plans provided by Simple Application Server in the specified region.
	//
	// This parameter is required.
	//
	// example:
	//
	// swas.s1.c1m1s40b3t05
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateInstancesRequest) GoString() string {
	return s.String()
}

func (s *CreateInstancesRequest) GetAmount() *int32 {
	return s.Amount
}

func (s *CreateInstancesRequest) GetAutoRenew() *bool {
	return s.AutoRenew
}

func (s *CreateInstancesRequest) GetAutoRenewPeriod() *int32 {
	return s.AutoRenewPeriod
}

func (s *CreateInstancesRequest) GetChargeType() *string {
	return s.ChargeType
}

func (s *CreateInstancesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateInstancesRequest) GetDataDiskSize() *int64 {
	return s.DataDiskSize
}

func (s *CreateInstancesRequest) GetImageId() *string {
	return s.ImageId
}

func (s *CreateInstancesRequest) GetPeriod() *int32 {
	return s.Period
}

func (s *CreateInstancesRequest) GetPlanId() *string {
	return s.PlanId
}

func (s *CreateInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateInstancesRequest) SetAmount(v int32) *CreateInstancesRequest {
	s.Amount = &v
	return s
}

func (s *CreateInstancesRequest) SetAutoRenew(v bool) *CreateInstancesRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateInstancesRequest) SetAutoRenewPeriod(v int32) *CreateInstancesRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateInstancesRequest) SetChargeType(v string) *CreateInstancesRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateInstancesRequest) SetClientToken(v string) *CreateInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateInstancesRequest) SetDataDiskSize(v int64) *CreateInstancesRequest {
	s.DataDiskSize = &v
	return s
}

func (s *CreateInstancesRequest) SetImageId(v string) *CreateInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *CreateInstancesRequest) SetPeriod(v int32) *CreateInstancesRequest {
	s.Period = &v
	return s
}

func (s *CreateInstancesRequest) SetPlanId(v string) *CreateInstancesRequest {
	s.PlanId = &v
	return s
}

func (s *CreateInstancesRequest) SetRegionId(v string) *CreateInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *CreateInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIds(v []*string) *CreateInstancesResponseBody
	GetInstanceIds() []*string
	SetRequestId(v string) *CreateInstancesResponseBody
	GetRequestId() *string
}

type CreateInstancesResponseBody struct {
	// The IDs of the simple application servers.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E1FEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstancesResponseBody) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *CreateInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateInstancesResponseBody) SetInstanceIds(v []*string) *CreateInstancesResponseBody {
	s.InstanceIds = v
	return s
}

func (s *CreateInstancesResponseBody) SetRequestId(v string) *CreateInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateInstancesResponse
	GetStatusCode() *int32
	SetBody(v *CreateInstancesResponseBody) *CreateInstancesResponse
	GetBody() *CreateInstancesResponseBody
}

type CreateInstancesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateInstancesResponse) GoString() string {
	return s.String()
}

func (s *CreateInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateInstancesResponse) GetBody() *CreateInstancesResponseBody {
	return s.Body
}

func (s *CreateInstancesResponse) SetHeaders(v map[string]*string) *CreateInstancesResponse {
	s.Headers = v
	return s
}

func (s *CreateInstancesResponse) SetStatusCode(v int32) *CreateInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstancesResponse) SetBody(v *CreateInstancesResponseBody) *CreateInstancesResponse {
	s.Body = v
	return s
}

func (s *CreateInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *CreateKeyPairRequest
	GetClientToken() *string
	SetKeyPairName(v string) *CreateKeyPairRequest
	GetKeyPairName() *string
	SetRegionId(v string) *CreateKeyPairRequest
	GetRegionId() *string
}

type CreateKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The name of the key pair. The name must be 2 to 64 characters in length and can contain letters, digits, colons (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// KeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateKeyPairRequest) GoString() string {
	return s.String()
}

func (s *CreateKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateKeyPairRequest) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *CreateKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateKeyPairRequest) SetClientToken(v string) *CreateKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateKeyPairRequest) SetKeyPairName(v string) *CreateKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairRequest) SetRegionId(v string) *CreateKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *CreateKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetKeyPairName(v string) *CreateKeyPairResponseBody
	GetKeyPairName() *string
	SetPrivateKeyBody(v string) *CreateKeyPairResponseBody
	GetPrivateKeyBody() *string
	SetRequestId(v string) *CreateKeyPairResponseBody
	GetRequestId() *string
}

type CreateKeyPairResponseBody struct {
	// The name of the key pair. The name must be 2 to 64 characters in length and can contain letters, digits, colons (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// KeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The private key of the key pair. The PEM-encoded private key is in PKCS#8 format.
	//
	// example:
	//
	// MIIEpAIBAAKCAQEAtReyMzLIcBH78EV2zj****
	PrivateKeyBody *string `json:"PrivateKeyBody,omitempty" xml:"PrivateKeyBody,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponseBody) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *CreateKeyPairResponseBody) GetPrivateKeyBody() *string {
	return s.PrivateKeyBody
}

func (s *CreateKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateKeyPairResponseBody) SetKeyPairName(v string) *CreateKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetPrivateKeyBody(v string) *CreateKeyPairResponseBody {
	s.PrivateKeyBody = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetRequestId(v string) *CreateKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *CreateKeyPairResponseBody) *CreateKeyPairResponse
	GetBody() *CreateKeyPairResponseBody
}

type CreateKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateKeyPairResponse) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateKeyPairResponse) GetBody() *CreateKeyPairResponseBody {
	return s.Body
}

func (s *CreateKeyPairResponse) SetHeaders(v map[string]*string) *CreateKeyPairResponse {
	s.Headers = v
	return s
}

func (s *CreateKeyPairResponse) SetStatusCode(v int32) *CreateKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateKeyPairResponse) SetBody(v *CreateKeyPairResponseBody) *CreateKeyPairResponse {
	s.Body = v
	return s
}

func (s *CreateKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateSnapshotRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *CreateSnapshotRequest
	GetClientToken() *string
	SetDiskId(v string) *CreateSnapshotRequest
	GetDiskId() *string
	SetRegionId(v string) *CreateSnapshotRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *CreateSnapshotRequest
	GetResourceGroupId() *string
	SetSnapshotName(v string) *CreateSnapshotRequest
	GetSnapshotName() *string
	SetTag(v []*CreateSnapshotRequestTag) *CreateSnapshotRequest
	GetTag() []*CreateSnapshotRequestTag
}

type CreateSnapshotRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The disk ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-bp18kjxg9ebrhsgi****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The region ID of the simple application server to which the disk is attached.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The snapshot name. The name must be 2 to 50 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// test-SnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	// The tags that you want to add to the snapshot. You can specify up to 20 tags.
	Tag []*CreateSnapshotRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateSnapshotRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateSnapshotRequest) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateSnapshotRequest) GetDiskId() *string {
	return s.DiskId
}

func (s *CreateSnapshotRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateSnapshotRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *CreateSnapshotRequest) GetSnapshotName() *string {
	return s.SnapshotName
}

func (s *CreateSnapshotRequest) GetTag() []*CreateSnapshotRequestTag {
	return s.Tag
}

func (s *CreateSnapshotRequest) SetClientToken(v string) *CreateSnapshotRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSnapshotRequest) SetDiskId(v string) *CreateSnapshotRequest {
	s.DiskId = &v
	return s
}

func (s *CreateSnapshotRequest) SetRegionId(v string) *CreateSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSnapshotRequest) SetResourceGroupId(v string) *CreateSnapshotRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateSnapshotRequest) SetSnapshotName(v string) *CreateSnapshotRequest {
	s.SnapshotName = &v
	return s
}

func (s *CreateSnapshotRequest) SetTag(v []*CreateSnapshotRequestTag) *CreateSnapshotRequest {
	s.Tag = v
	return s
}

func (s *CreateSnapshotRequest) Validate() error {
	return dara.Validate(s)
}

type CreateSnapshotRequestTag struct {
	// The key of the tag to add to the snapshot. Valid values of N: 1 to 20.
	//
	// The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag to add to the snapshot. Valid values of N: 1 to 20.
	//
	// The tag value can be an empty string. The tag value can be up to 64 characters in length and cannot contain http:// or https://.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateSnapshotRequestTag) String() string {
	return dara.Prettify(s)
}

func (s CreateSnapshotRequestTag) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequestTag) GetKey() *string {
	return s.Key
}

func (s *CreateSnapshotRequestTag) GetValue() *string {
	return s.Value
}

func (s *CreateSnapshotRequestTag) SetKey(v string) *CreateSnapshotRequestTag {
	s.Key = &v
	return s
}

func (s *CreateSnapshotRequestTag) SetValue(v string) *CreateSnapshotRequestTag {
	s.Value = &v
	return s
}

func (s *CreateSnapshotRequestTag) Validate() error {
	return dara.Validate(s)
}

type iCreateSnapshotResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *CreateSnapshotResponseBody
	GetRequestId() *string
	SetSnapshotId(v string) *CreateSnapshotResponseBody
	GetSnapshotId() *string
}

type CreateSnapshotResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The snapshot ID.
	//
	// example:
	//
	// s-bp16oazlsold4dks****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s CreateSnapshotResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateSnapshotResponseBody) GetSnapshotId() *string {
	return s.SnapshotId
}

func (s *CreateSnapshotResponseBody) SetRequestId(v string) *CreateSnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSnapshotResponseBody) SetSnapshotId(v string) *CreateSnapshotResponseBody {
	s.SnapshotId = &v
	return s
}

func (s *CreateSnapshotResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateSnapshotResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateSnapshotResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateSnapshotResponse
	GetStatusCode() *int32
	SetBody(v *CreateSnapshotResponseBody) *CreateSnapshotResponse
	GetBody() *CreateSnapshotResponseBody
}

type CreateSnapshotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSnapshotResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateSnapshotResponse) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateSnapshotResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateSnapshotResponse) GetBody() *CreateSnapshotResponseBody {
	return s.Body
}

func (s *CreateSnapshotResponse) SetHeaders(v map[string]*string) *CreateSnapshotResponse {
	s.Headers = v
	return s
}

func (s *CreateSnapshotResponse) SetStatusCode(v int32) *CreateSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSnapshotResponse) SetBody(v *CreateSnapshotResponseBody) *CreateSnapshotResponse {
	s.Body = v
	return s
}

func (s *CreateSnapshotResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteCommandRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandId(v string) *DeleteCommandRequest
	GetCommandId() *string
	SetRegionId(v string) *DeleteCommandRequest
	GetRegionId() *string
}

type DeleteCommandRequest struct {
	// The command ID. You can call the [DescribeCommands](https://help.aliyun.com/document_detail/64843.html) operation to query all available command IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// c-sh02yh0932w****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteCommandRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteCommandRequest) GoString() string {
	return s.String()
}

func (s *DeleteCommandRequest) GetCommandId() *string {
	return s.CommandId
}

func (s *DeleteCommandRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteCommandRequest) SetCommandId(v string) *DeleteCommandRequest {
	s.CommandId = &v
	return s
}

func (s *DeleteCommandRequest) SetRegionId(v string) *DeleteCommandRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCommandRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteCommandResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteCommandResponseBody
	GetRequestId() *string
}

type DeleteCommandResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCommandResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteCommandResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCommandResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteCommandResponseBody) SetRequestId(v string) *DeleteCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCommandResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteCommandResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteCommandResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteCommandResponse
	GetStatusCode() *int32
	SetBody(v *DeleteCommandResponseBody) *DeleteCommandResponse
	GetBody() *DeleteCommandResponseBody
}

type DeleteCommandResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCommandResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteCommandResponse) GoString() string {
	return s.String()
}

func (s *DeleteCommandResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteCommandResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteCommandResponse) GetBody() *DeleteCommandResponseBody {
	return s.Body
}

func (s *DeleteCommandResponse) SetHeaders(v map[string]*string) *DeleteCommandResponse {
	s.Headers = v
	return s
}

func (s *DeleteCommandResponse) SetStatusCode(v int32) *DeleteCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCommandResponse) SetBody(v *DeleteCommandResponseBody) *DeleteCommandResponse {
	s.Body = v
	return s
}

func (s *DeleteCommandResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteCustomImageRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteCustomImageRequest
	GetClientToken() *string
	SetImageId(v string) *DeleteCustomImageRequest
	GetImageId() *string
	SetRegionId(v string) *DeleteCustomImageRequest
	GetRegionId() *string
}

type DeleteCustomImageRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The custom image ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-2zehv38jjmwva1ee****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The region ID of the custom image. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteCustomImageRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteCustomImageRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomImageRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteCustomImageRequest) GetImageId() *string {
	return s.ImageId
}

func (s *DeleteCustomImageRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteCustomImageRequest) SetClientToken(v string) *DeleteCustomImageRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteCustomImageRequest) SetImageId(v string) *DeleteCustomImageRequest {
	s.ImageId = &v
	return s
}

func (s *DeleteCustomImageRequest) SetRegionId(v string) *DeleteCustomImageRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCustomImageRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteCustomImageResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteCustomImageResponseBody
	GetRequestId() *string
}

type DeleteCustomImageResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCustomImageResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteCustomImageResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomImageResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteCustomImageResponseBody) SetRequestId(v string) *DeleteCustomImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomImageResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteCustomImageResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteCustomImageResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteCustomImageResponse
	GetStatusCode() *int32
	SetBody(v *DeleteCustomImageResponseBody) *DeleteCustomImageResponse
	GetBody() *DeleteCustomImageResponseBody
}

type DeleteCustomImageResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomImageResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteCustomImageResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomImageResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteCustomImageResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteCustomImageResponse) GetBody() *DeleteCustomImageResponseBody {
	return s.Body
}

func (s *DeleteCustomImageResponse) SetHeaders(v map[string]*string) *DeleteCustomImageResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomImageResponse) SetStatusCode(v int32) *DeleteCustomImageResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomImageResponse) SetBody(v *DeleteCustomImageResponseBody) *DeleteCustomImageResponse {
	s.Body = v
	return s
}

func (s *DeleteCustomImageResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteCustomImagesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteCustomImagesRequest
	GetClientToken() *string
	SetImageIds(v string) *DeleteCustomImagesRequest
	GetImageIds() *string
	SetRegionId(v string) *DeleteCustomImagesRequest
	GetRegionId() *string
}

type DeleteCustomImagesRequest struct {
	// The client token that you want to use to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [Ensure idempotence](https://help.aliyun.com/document_detail/25693.html)
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the custom image. The value can be a JSON array that consists of up to 15 image IDs. Separate multiple image IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["m-2zehv38jjmwva1ee****", "m-bp1hj0zhmheyq2kz****"]
	ImageIds *string `json:"ImageIds,omitempty" xml:"ImageIds,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteCustomImagesRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteCustomImagesRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomImagesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteCustomImagesRequest) GetImageIds() *string {
	return s.ImageIds
}

func (s *DeleteCustomImagesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteCustomImagesRequest) SetClientToken(v string) *DeleteCustomImagesRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteCustomImagesRequest) SetImageIds(v string) *DeleteCustomImagesRequest {
	s.ImageIds = &v
	return s
}

func (s *DeleteCustomImagesRequest) SetRegionId(v string) *DeleteCustomImagesRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCustomImagesRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteCustomImagesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteCustomImagesResponseBody
	GetRequestId() *string
}

type DeleteCustomImagesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCustomImagesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteCustomImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomImagesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteCustomImagesResponseBody) SetRequestId(v string) *DeleteCustomImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomImagesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteCustomImagesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteCustomImagesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteCustomImagesResponse
	GetStatusCode() *int32
	SetBody(v *DeleteCustomImagesResponseBody) *DeleteCustomImagesResponse
	GetBody() *DeleteCustomImagesResponseBody
}

type DeleteCustomImagesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomImagesResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteCustomImagesResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomImagesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteCustomImagesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteCustomImagesResponse) GetBody() *DeleteCustomImagesResponseBody {
	return s.Body
}

func (s *DeleteCustomImagesResponse) SetHeaders(v map[string]*string) *DeleteCustomImagesResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomImagesResponse) SetStatusCode(v int32) *DeleteCustomImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomImagesResponse) SetBody(v *DeleteCustomImagesResponseBody) *DeleteCustomImagesResponse {
	s.Body = v
	return s
}

func (s *DeleteCustomImagesResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallRuleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteFirewallRuleRequest
	GetClientToken() *string
	SetInstanceId(v string) *DeleteFirewallRuleRequest
	GetInstanceId() *string
	SetRegionId(v string) *DeleteFirewallRuleRequest
	GetRegionId() *string
	SetRuleId(v string) *DeleteFirewallRuleRequest
	GetRuleId() *string
}

type DeleteFirewallRuleRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the firewall rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// eeea34d9867b4d55a4ff8d5fcfbd****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteFirewallRuleRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteFirewallRuleRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteFirewallRuleRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DeleteFirewallRuleRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteFirewallRuleRequest) GetRuleId() *string {
	return s.RuleId
}

func (s *DeleteFirewallRuleRequest) SetClientToken(v string) *DeleteFirewallRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteFirewallRuleRequest) SetInstanceId(v string) *DeleteFirewallRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteFirewallRuleRequest) SetRegionId(v string) *DeleteFirewallRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFirewallRuleRequest) SetRuleId(v string) *DeleteFirewallRuleRequest {
	s.RuleId = &v
	return s
}

func (s *DeleteFirewallRuleRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallRuleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteFirewallRuleResponseBody
	GetRequestId() *string
}

type DeleteFirewallRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFirewallRuleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFirewallRuleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteFirewallRuleResponseBody) SetRequestId(v string) *DeleteFirewallRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFirewallRuleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallRuleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteFirewallRuleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteFirewallRuleResponse
	GetStatusCode() *int32
	SetBody(v *DeleteFirewallRuleResponseBody) *DeleteFirewallRuleResponse
	GetBody() *DeleteFirewallRuleResponseBody
}

type DeleteFirewallRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFirewallRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFirewallRuleResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteFirewallRuleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteFirewallRuleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteFirewallRuleResponse) GetBody() *DeleteFirewallRuleResponseBody {
	return s.Body
}

func (s *DeleteFirewallRuleResponse) SetHeaders(v map[string]*string) *DeleteFirewallRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteFirewallRuleResponse) SetStatusCode(v int32) *DeleteFirewallRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFirewallRuleResponse) SetBody(v *DeleteFirewallRuleResponseBody) *DeleteFirewallRuleResponse {
	s.Body = v
	return s
}

func (s *DeleteFirewallRuleResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallRulesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteFirewallRulesRequest
	GetClientToken() *string
	SetInstanceId(v string) *DeleteFirewallRulesRequest
	GetInstanceId() *string
	SetRegionId(v string) *DeleteFirewallRulesRequest
	GetRegionId() *string
	SetRuleIds(v []*string) *DeleteFirewallRulesRequest
	GetRuleIds() []*string
}

type DeleteFirewallRulesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the firewall rules that you want to delete.
	RuleIds []*string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
}

func (s DeleteFirewallRulesRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteFirewallRulesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteFirewallRulesRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DeleteFirewallRulesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteFirewallRulesRequest) GetRuleIds() []*string {
	return s.RuleIds
}

func (s *DeleteFirewallRulesRequest) SetClientToken(v string) *DeleteFirewallRulesRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteFirewallRulesRequest) SetInstanceId(v string) *DeleteFirewallRulesRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteFirewallRulesRequest) SetRegionId(v string) *DeleteFirewallRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFirewallRulesRequest) SetRuleIds(v []*string) *DeleteFirewallRulesRequest {
	s.RuleIds = v
	return s
}

func (s *DeleteFirewallRulesRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallRulesShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteFirewallRulesShrinkRequest
	GetClientToken() *string
	SetInstanceId(v string) *DeleteFirewallRulesShrinkRequest
	GetInstanceId() *string
	SetRegionId(v string) *DeleteFirewallRulesShrinkRequest
	GetRegionId() *string
	SetRuleIdsShrink(v string) *DeleteFirewallRulesShrinkRequest
	GetRuleIdsShrink() *string
}

type DeleteFirewallRulesShrinkRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the firewall rules that you want to delete.
	RuleIdsShrink *string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty"`
}

func (s DeleteFirewallRulesShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallRulesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteFirewallRulesShrinkRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteFirewallRulesShrinkRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DeleteFirewallRulesShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteFirewallRulesShrinkRequest) GetRuleIdsShrink() *string {
	return s.RuleIdsShrink
}

func (s *DeleteFirewallRulesShrinkRequest) SetClientToken(v string) *DeleteFirewallRulesShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteFirewallRulesShrinkRequest) SetInstanceId(v string) *DeleteFirewallRulesShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteFirewallRulesShrinkRequest) SetRegionId(v string) *DeleteFirewallRulesShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFirewallRulesShrinkRequest) SetRuleIdsShrink(v string) *DeleteFirewallRulesShrinkRequest {
	s.RuleIdsShrink = &v
	return s
}

func (s *DeleteFirewallRulesShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallRulesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteFirewallRulesResponseBody
	GetRequestId() *string
}

type DeleteFirewallRulesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFirewallRulesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFirewallRulesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteFirewallRulesResponseBody) SetRequestId(v string) *DeleteFirewallRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFirewallRulesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallRulesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteFirewallRulesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteFirewallRulesResponse
	GetStatusCode() *int32
	SetBody(v *DeleteFirewallRulesResponseBody) *DeleteFirewallRulesResponse
	GetBody() *DeleteFirewallRulesResponseBody
}

type DeleteFirewallRulesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFirewallRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFirewallRulesResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteFirewallRulesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteFirewallRulesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteFirewallRulesResponse) GetBody() *DeleteFirewallRulesResponseBody {
	return s.Body
}

func (s *DeleteFirewallRulesResponse) SetHeaders(v map[string]*string) *DeleteFirewallRulesResponse {
	s.Headers = v
	return s
}

func (s *DeleteFirewallRulesResponse) SetStatusCode(v int32) *DeleteFirewallRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFirewallRulesResponse) SetBody(v *DeleteFirewallRulesResponseBody) *DeleteFirewallRulesResponse {
	s.Body = v
	return s
}

func (s *DeleteFirewallRulesResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallTemplateRulesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteFirewallTemplateRulesRequest
	GetClientToken() *string
	SetFirewallTemplateId(v string) *DeleteFirewallTemplateRulesRequest
	GetFirewallTemplateId() *string
	SetFirewallTemplateRuleId(v []*string) *DeleteFirewallTemplateRulesRequest
	GetFirewallTemplateRuleId() []*string
	SetRegionId(v string) *DeleteFirewallTemplateRulesRequest
	GetRegionId() *string
}

type DeleteFirewallTemplateRulesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the firewall template.
	//
	// This parameter is required.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The IDs of the firewall template rules.
	//
	// This parameter is required.
	FirewallTemplateRuleId []*string `json:"FirewallTemplateRuleId,omitempty" xml:"FirewallTemplateRuleId,omitempty" type:"Repeated"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFirewallTemplateRulesRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallTemplateRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteFirewallTemplateRulesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteFirewallTemplateRulesRequest) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *DeleteFirewallTemplateRulesRequest) GetFirewallTemplateRuleId() []*string {
	return s.FirewallTemplateRuleId
}

func (s *DeleteFirewallTemplateRulesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteFirewallTemplateRulesRequest) SetClientToken(v string) *DeleteFirewallTemplateRulesRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteFirewallTemplateRulesRequest) SetFirewallTemplateId(v string) *DeleteFirewallTemplateRulesRequest {
	s.FirewallTemplateId = &v
	return s
}

func (s *DeleteFirewallTemplateRulesRequest) SetFirewallTemplateRuleId(v []*string) *DeleteFirewallTemplateRulesRequest {
	s.FirewallTemplateRuleId = v
	return s
}

func (s *DeleteFirewallTemplateRulesRequest) SetRegionId(v string) *DeleteFirewallTemplateRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFirewallTemplateRulesRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallTemplateRulesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteFirewallTemplateRulesResponseBody
	GetRequestId() *string
}

type DeleteFirewallTemplateRulesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFirewallTemplateRulesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallTemplateRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFirewallTemplateRulesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteFirewallTemplateRulesResponseBody) SetRequestId(v string) *DeleteFirewallTemplateRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFirewallTemplateRulesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallTemplateRulesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteFirewallTemplateRulesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteFirewallTemplateRulesResponse
	GetStatusCode() *int32
	SetBody(v *DeleteFirewallTemplateRulesResponseBody) *DeleteFirewallTemplateRulesResponse
	GetBody() *DeleteFirewallTemplateRulesResponseBody
}

type DeleteFirewallTemplateRulesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFirewallTemplateRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFirewallTemplateRulesResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallTemplateRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteFirewallTemplateRulesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteFirewallTemplateRulesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteFirewallTemplateRulesResponse) GetBody() *DeleteFirewallTemplateRulesResponseBody {
	return s.Body
}

func (s *DeleteFirewallTemplateRulesResponse) SetHeaders(v map[string]*string) *DeleteFirewallTemplateRulesResponse {
	s.Headers = v
	return s
}

func (s *DeleteFirewallTemplateRulesResponse) SetStatusCode(v int32) *DeleteFirewallTemplateRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFirewallTemplateRulesResponse) SetBody(v *DeleteFirewallTemplateRulesResponseBody) *DeleteFirewallTemplateRulesResponse {
	s.Body = v
	return s
}

func (s *DeleteFirewallTemplateRulesResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallTemplatesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteFirewallTemplatesRequest
	GetClientToken() *string
	SetFirewallTemplateId(v []*string) *DeleteFirewallTemplatesRequest
	GetFirewallTemplateId() []*string
	SetRegionId(v string) *DeleteFirewallTemplatesRequest
	GetRegionId() *string
}

type DeleteFirewallTemplatesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The IDs of the firewall templates.
	//
	// This parameter is required.
	FirewallTemplateId []*string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty" type:"Repeated"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFirewallTemplatesRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DeleteFirewallTemplatesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteFirewallTemplatesRequest) GetFirewallTemplateId() []*string {
	return s.FirewallTemplateId
}

func (s *DeleteFirewallTemplatesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteFirewallTemplatesRequest) SetClientToken(v string) *DeleteFirewallTemplatesRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteFirewallTemplatesRequest) SetFirewallTemplateId(v []*string) *DeleteFirewallTemplatesRequest {
	s.FirewallTemplateId = v
	return s
}

func (s *DeleteFirewallTemplatesRequest) SetRegionId(v string) *DeleteFirewallTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFirewallTemplatesRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallTemplatesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteFirewallTemplatesResponseBody
	GetRequestId() *string
}

type DeleteFirewallTemplatesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFirewallTemplatesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFirewallTemplatesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteFirewallTemplatesResponseBody) SetRequestId(v string) *DeleteFirewallTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFirewallTemplatesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteFirewallTemplatesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteFirewallTemplatesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteFirewallTemplatesResponse
	GetStatusCode() *int32
	SetBody(v *DeleteFirewallTemplatesResponseBody) *DeleteFirewallTemplatesResponse
	GetBody() *DeleteFirewallTemplatesResponseBody
}

type DeleteFirewallTemplatesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFirewallTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFirewallTemplatesResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteFirewallTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DeleteFirewallTemplatesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteFirewallTemplatesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteFirewallTemplatesResponse) GetBody() *DeleteFirewallTemplatesResponseBody {
	return s.Body
}

func (s *DeleteFirewallTemplatesResponse) SetHeaders(v map[string]*string) *DeleteFirewallTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DeleteFirewallTemplatesResponse) SetStatusCode(v int32) *DeleteFirewallTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFirewallTemplatesResponse) SetBody(v *DeleteFirewallTemplatesResponseBody) *DeleteFirewallTemplatesResponse {
	s.Body = v
	return s
}

func (s *DeleteFirewallTemplatesResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteInstanceKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteInstanceKeyPairRequest
	GetClientToken() *string
	SetInstanceId(v string) *DeleteInstanceKeyPairRequest
	GetInstanceId() *string
	SetRegionId(v string) *DeleteInstanceKeyPairRequest
	GetRegionId() *string
}

type DeleteInstanceKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteInstanceKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteInstanceKeyPairRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteInstanceKeyPairRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DeleteInstanceKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteInstanceKeyPairRequest) SetClientToken(v string) *DeleteInstanceKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteInstanceKeyPairRequest) SetInstanceId(v string) *DeleteInstanceKeyPairRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteInstanceKeyPairRequest) SetRegionId(v string) *DeleteInstanceKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteInstanceKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteInstanceKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteInstanceKeyPairResponseBody
	GetRequestId() *string
}

type DeleteInstanceKeyPairResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInstanceKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteInstanceKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstanceKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteInstanceKeyPairResponseBody) SetRequestId(v string) *DeleteInstanceKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteInstanceKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteInstanceKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteInstanceKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteInstanceKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *DeleteInstanceKeyPairResponseBody) *DeleteInstanceKeyPairResponse
	GetBody() *DeleteInstanceKeyPairResponseBody
}

type DeleteInstanceKeyPairResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteInstanceKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteInstanceKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteInstanceKeyPairResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteInstanceKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteInstanceKeyPairResponse) GetBody() *DeleteInstanceKeyPairResponseBody {
	return s.Body
}

func (s *DeleteInstanceKeyPairResponse) SetHeaders(v map[string]*string) *DeleteInstanceKeyPairResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstanceKeyPairResponse) SetStatusCode(v int32) *DeleteInstanceKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstanceKeyPairResponse) SetBody(v *DeleteInstanceKeyPairResponseBody) *DeleteInstanceKeyPairResponse {
	s.Body = v
	return s
}

func (s *DeleteInstanceKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteKeyPairsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteKeyPairsRequest
	GetClientToken() *string
	SetKeyPairNames(v []*string) *DeleteKeyPairsRequest
	GetKeyPairNames() []*string
	SetRegionId(v string) *DeleteKeyPairsRequest
	GetRegionId() *string
}

type DeleteKeyPairsRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The names of the SSH key pairs. The name must be 2 to 64 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter and cannot start with http:// or https://. You can specify the names of a maximum of 50 SSH key pairs.
	//
	// This parameter is required.
	KeyPairNames []*string `json:"KeyPairNames,omitempty" xml:"KeyPairNames,omitempty" type:"Repeated"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteKeyPairsRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteKeyPairsRequest) GetKeyPairNames() []*string {
	return s.KeyPairNames
}

func (s *DeleteKeyPairsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteKeyPairsRequest) SetClientToken(v string) *DeleteKeyPairsRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetKeyPairNames(v []*string) *DeleteKeyPairsRequest {
	s.KeyPairNames = v
	return s
}

func (s *DeleteKeyPairsRequest) SetRegionId(v string) *DeleteKeyPairsRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteKeyPairsRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteKeyPairsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteKeyPairsResponseBody
	GetRequestId() *string
}

type DeleteKeyPairsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteKeyPairsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteKeyPairsResponseBody) SetRequestId(v string) *DeleteKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteKeyPairsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteKeyPairsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteKeyPairsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteKeyPairsResponse
	GetStatusCode() *int32
	SetBody(v *DeleteKeyPairsResponseBody) *DeleteKeyPairsResponse
	GetBody() *DeleteKeyPairsResponseBody
}

type DeleteKeyPairsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteKeyPairsResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteKeyPairsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteKeyPairsResponse) GetBody() *DeleteKeyPairsResponseBody {
	return s.Body
}

func (s *DeleteKeyPairsResponse) SetHeaders(v map[string]*string) *DeleteKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *DeleteKeyPairsResponse) SetStatusCode(v int32) *DeleteKeyPairsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteKeyPairsResponse) SetBody(v *DeleteKeyPairsResponseBody) *DeleteKeyPairsResponse {
	s.Body = v
	return s
}

func (s *DeleteKeyPairsResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteSnapshotRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteSnapshotRequest
	GetClientToken() *string
	SetRegionId(v string) *DeleteSnapshotRequest
	GetRegionId() *string
	SetSnapshotId(v string) *DeleteSnapshotRequest
	GetSnapshotId() *string
}

type DeleteSnapshotRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The region ID of the snapshot.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The snapshot ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// s-bp16oazlsold4dks****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s DeleteSnapshotRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteSnapshotRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteSnapshotRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteSnapshotRequest) GetSnapshotId() *string {
	return s.SnapshotId
}

func (s *DeleteSnapshotRequest) SetClientToken(v string) *DeleteSnapshotRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteSnapshotRequest) SetRegionId(v string) *DeleteSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetSnapshotId(v string) *DeleteSnapshotRequest {
	s.SnapshotId = &v
	return s
}

func (s *DeleteSnapshotRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteSnapshotResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteSnapshotResponseBody
	GetRequestId() *string
}

type DeleteSnapshotResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnapshotResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteSnapshotResponseBody) SetRequestId(v string) *DeleteSnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSnapshotResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteSnapshotResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteSnapshotResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteSnapshotResponse
	GetStatusCode() *int32
	SetBody(v *DeleteSnapshotResponseBody) *DeleteSnapshotResponse
	GetBody() *DeleteSnapshotResponseBody
}

type DeleteSnapshotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSnapshotResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteSnapshotResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteSnapshotResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteSnapshotResponse) GetBody() *DeleteSnapshotResponseBody {
	return s.Body
}

func (s *DeleteSnapshotResponse) SetHeaders(v map[string]*string) *DeleteSnapshotResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnapshotResponse) SetStatusCode(v int32) *DeleteSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnapshotResponse) SetBody(v *DeleteSnapshotResponseBody) *DeleteSnapshotResponse {
	s.Body = v
	return s
}

func (s *DeleteSnapshotResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteSnapshotsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteSnapshotsRequest
	GetClientToken() *string
	SetRegionId(v string) *DeleteSnapshotsRequest
	GetRegionId() *string
	SetSnapshotIds(v string) *DeleteSnapshotsRequest
	GetSnapshotIds() *string
}

type DeleteSnapshotsRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The snapshot IDs. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate multiple snapshot IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]
	SnapshotIds *string `json:"SnapshotIds,omitempty" xml:"SnapshotIds,omitempty"`
}

func (s DeleteSnapshotsRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteSnapshotsRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotsRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteSnapshotsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteSnapshotsRequest) GetSnapshotIds() *string {
	return s.SnapshotIds
}

func (s *DeleteSnapshotsRequest) SetClientToken(v string) *DeleteSnapshotsRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteSnapshotsRequest) SetRegionId(v string) *DeleteSnapshotsRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSnapshotsRequest) SetSnapshotIds(v string) *DeleteSnapshotsRequest {
	s.SnapshotIds = &v
	return s
}

func (s *DeleteSnapshotsRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteSnapshotsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteSnapshotsResponseBody
	GetRequestId() *string
}

type DeleteSnapshotsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C2DE174B-7196-5778-A00D-6EA2601B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnapshotsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteSnapshotsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteSnapshotsResponseBody) SetRequestId(v string) *DeleteSnapshotsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSnapshotsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteSnapshotsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteSnapshotsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteSnapshotsResponse
	GetStatusCode() *int32
	SetBody(v *DeleteSnapshotsResponseBody) *DeleteSnapshotsResponse
	GetBody() *DeleteSnapshotsResponseBody
}

type DeleteSnapshotsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSnapshotsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSnapshotsResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteSnapshotsResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteSnapshotsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteSnapshotsResponse) GetBody() *DeleteSnapshotsResponseBody {
	return s.Body
}

func (s *DeleteSnapshotsResponse) SetHeaders(v map[string]*string) *DeleteSnapshotsResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnapshotsResponse) SetStatusCode(v int32) *DeleteSnapshotsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnapshotsResponse) SetBody(v *DeleteSnapshotsResponseBody) *DeleteSnapshotsResponse {
	s.Body = v
	return s
}

func (s *DeleteSnapshotsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantAttributesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIds(v []*string) *DescribeCloudAssistantAttributesRequest
	GetInstanceIds() []*string
	SetPageNumber(v int32) *DescribeCloudAssistantAttributesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCloudAssistantAttributesRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeCloudAssistantAttributesRequest
	GetRegionId() *string
}

type DescribeCloudAssistantAttributesRequest struct {
	// The IDs of the simple application servers.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the specified simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudAssistantAttributesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantAttributesRequest) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *DescribeCloudAssistantAttributesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCloudAssistantAttributesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCloudAssistantAttributesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCloudAssistantAttributesRequest) SetInstanceIds(v []*string) *DescribeCloudAssistantAttributesRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeCloudAssistantAttributesRequest) SetPageNumber(v int32) *DescribeCloudAssistantAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudAssistantAttributesRequest) SetPageSize(v int32) *DescribeCloudAssistantAttributesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudAssistantAttributesRequest) SetRegionId(v string) *DescribeCloudAssistantAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudAssistantAttributesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantAttributesShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIdsShrink(v string) *DescribeCloudAssistantAttributesShrinkRequest
	GetInstanceIdsShrink() *string
	SetPageNumber(v int32) *DescribeCloudAssistantAttributesShrinkRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCloudAssistantAttributesShrinkRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeCloudAssistantAttributesShrinkRequest
	GetRegionId() *string
}

type DescribeCloudAssistantAttributesShrinkRequest struct {
	// The IDs of the simple application servers.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the specified simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudAssistantAttributesShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantAttributesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) GetInstanceIdsShrink() *string {
	return s.InstanceIdsShrink
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) SetInstanceIdsShrink(v string) *DescribeCloudAssistantAttributesShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) SetPageNumber(v int32) *DescribeCloudAssistantAttributesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) SetPageSize(v int32) *DescribeCloudAssistantAttributesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) SetRegionId(v string) *DescribeCloudAssistantAttributesShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudAssistantAttributesShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantAttributesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCloudAssistant(v []*DescribeCloudAssistantAttributesResponseBodyCloudAssistant) *DescribeCloudAssistantAttributesResponseBody
	GetCloudAssistant() []*DescribeCloudAssistantAttributesResponseBodyCloudAssistant
	SetPageNumber(v int32) *DescribeCloudAssistantAttributesResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCloudAssistantAttributesResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeCloudAssistantAttributesResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeCloudAssistantAttributesResponseBody
	GetTotalCount() *int32
}

type DescribeCloudAssistantAttributesResponseBody struct {
	// The Command Assistant information.
	CloudAssistant []*DescribeCloudAssistantAttributesResponseBodyCloudAssistant `json:"CloudAssistant,omitempty" xml:"CloudAssistant,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCloudAssistantAttributesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantAttributesResponseBody) GetCloudAssistant() []*DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	return s.CloudAssistant
}

func (s *DescribeCloudAssistantAttributesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCloudAssistantAttributesResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCloudAssistantAttributesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeCloudAssistantAttributesResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeCloudAssistantAttributesResponseBody) SetCloudAssistant(v []*DescribeCloudAssistantAttributesResponseBodyCloudAssistant) *DescribeCloudAssistantAttributesResponseBody {
	s.CloudAssistant = v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBody) SetPageNumber(v int32) *DescribeCloudAssistantAttributesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBody) SetPageSize(v int32) *DescribeCloudAssistantAttributesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBody) SetRequestId(v string) *DescribeCloudAssistantAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBody) SetTotalCount(v int32) *DescribeCloudAssistantAttributesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeCloudAssistantAttributesResponseBodyCloudAssistant struct {
	// The number of active tasks in Command Assistant.
	//
	// example:
	//
	// 0
	ActiveTaskCount *int64 `json:"ActiveTaskCount,omitempty" xml:"ActiveTaskCount,omitempty"`
	// Indicates whether Command Assistant is running. Valid values:
	//
	// true: Heartbeats are detected in the last 2 minutes.
	//
	// false: Heartbeats are not detected in the last 2 minutes.
	//
	// example:
	//
	// true
	CloudAssistantStatus *string `json:"CloudAssistantStatus,omitempty" xml:"CloudAssistantStatus,omitempty"`
	// The version number of the Command Assistant agent. Null is returned if the Command Assistant agent is not installed or is not running.
	//
	// example:
	//
	// 2.2.0.106
	CloudAssistantVersion *string `json:"CloudAssistantVersion,omitempty" xml:"CloudAssistantVersion,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// 85dbe3e7cc7b49e1a3df4af3bfa4ebbf
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of completed tasks in Command Assistant.
	//
	// example:
	//
	// 4
	InvocationCount *int64 `json:"InvocationCount,omitempty" xml:"InvocationCount,omitempty"`
	// The time when the last heartbeat of Command Assistant was detected. The value is updated every minute on average. The interval can be 55, 60, or 65 seconds.
	//
	// example:
	//
	// 2021-03-15T09:00:00Z
	LastHeartbeatTime *string `json:"LastHeartbeatTime,omitempty" xml:"LastHeartbeatTime,omitempty"`
	// The time when commands were last run.
	//
	// example:
	//
	// 2021-03-15T08:00:00Z
	LastInvokedTime *string `json:"LastInvokedTime,omitempty" xml:"LastInvokedTime,omitempty"`
	// The OS type of the simple application server. Valid values:
	//
	// 	- Windows
	//
	// 	- Linux
	//
	// 	- FreeBSD
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// Indicates whether Command Assistant supports session management. If Command Assistant does not support session management, the version of the Command Assistant agent is too earlier. We recommend that you update your Command Assistant agent to the latest version.
	//
	// To use the session management feature, you must make sure that the version of your Command Assistant agent meets one of the following requirements:
	//
	// If your simple application server runs Linux, the version of the Command Assistant agent on the server must be 2.2.3.189 or later. If your simple application server runs Windows, the version of the Command Assistant agent on the server must be 2.1.3.189 or later.
	//
	// example:
	//
	// true
	SupportSessionManager *bool `json:"SupportSessionManager,omitempty" xml:"SupportSessionManager,omitempty"`
}

func (s DescribeCloudAssistantAttributesResponseBodyCloudAssistant) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetActiveTaskCount() *int64 {
	return s.ActiveTaskCount
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetCloudAssistantStatus() *string {
	return s.CloudAssistantStatus
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetCloudAssistantVersion() *string {
	return s.CloudAssistantVersion
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetInvocationCount() *int64 {
	return s.InvocationCount
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetLastHeartbeatTime() *string {
	return s.LastHeartbeatTime
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetLastInvokedTime() *string {
	return s.LastInvokedTime
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetOSType() *string {
	return s.OSType
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) GetSupportSessionManager() *bool {
	return s.SupportSessionManager
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetActiveTaskCount(v int64) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.ActiveTaskCount = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetCloudAssistantStatus(v string) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.CloudAssistantStatus = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetCloudAssistantVersion(v string) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.CloudAssistantVersion = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetInstanceId(v string) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.InstanceId = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetInvocationCount(v int64) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.InvocationCount = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetLastHeartbeatTime(v string) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.LastHeartbeatTime = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetLastInvokedTime(v string) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.LastInvokedTime = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetOSType(v string) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.OSType = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) SetSupportSessionManager(v bool) *DescribeCloudAssistantAttributesResponseBodyCloudAssistant {
	s.SupportSessionManager = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponseBodyCloudAssistant) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantAttributesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeCloudAssistantAttributesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeCloudAssistantAttributesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeCloudAssistantAttributesResponseBody) *DescribeCloudAssistantAttributesResponse
	GetBody() *DescribeCloudAssistantAttributesResponseBody
}

type DescribeCloudAssistantAttributesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudAssistantAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudAssistantAttributesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantAttributesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeCloudAssistantAttributesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeCloudAssistantAttributesResponse) GetBody() *DescribeCloudAssistantAttributesResponseBody {
	return s.Body
}

func (s *DescribeCloudAssistantAttributesResponse) SetHeaders(v map[string]*string) *DescribeCloudAssistantAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudAssistantAttributesResponse) SetStatusCode(v int32) *DescribeCloudAssistantAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudAssistantAttributesResponse) SetBody(v *DescribeCloudAssistantAttributesResponseBody) *DescribeCloudAssistantAttributesResponse {
	s.Body = v
	return s
}

func (s *DescribeCloudAssistantAttributesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantStatusRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIds(v []*string) *DescribeCloudAssistantStatusRequest
	GetInstanceIds() []*string
	SetPageNumber(v int32) *DescribeCloudAssistantStatusRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCloudAssistantStatusRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeCloudAssistantStatusRequest
	GetRegionId() *string
}

type DescribeCloudAssistantStatusRequest struct {
	// The IDs of the simple application servers.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 50.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application servers.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudAssistantStatusRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusRequest) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *DescribeCloudAssistantStatusRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCloudAssistantStatusRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCloudAssistantStatusRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCloudAssistantStatusRequest) SetInstanceIds(v []*string) *DescribeCloudAssistantStatusRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetPageNumber(v int32) *DescribeCloudAssistantStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetPageSize(v int32) *DescribeCloudAssistantStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetRegionId(v string) *DescribeCloudAssistantStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantStatusShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIdsShrink(v string) *DescribeCloudAssistantStatusShrinkRequest
	GetInstanceIdsShrink() *string
	SetPageNumber(v int32) *DescribeCloudAssistantStatusShrinkRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCloudAssistantStatusShrinkRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeCloudAssistantStatusShrinkRequest
	GetRegionId() *string
}

type DescribeCloudAssistantStatusShrinkRequest struct {
	// The IDs of the simple application servers.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 50.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application servers.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudAssistantStatusShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantStatusShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusShrinkRequest) GetInstanceIdsShrink() *string {
	return s.InstanceIdsShrink
}

func (s *DescribeCloudAssistantStatusShrinkRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCloudAssistantStatusShrinkRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCloudAssistantStatusShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCloudAssistantStatusShrinkRequest) SetInstanceIdsShrink(v string) *DescribeCloudAssistantStatusShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *DescribeCloudAssistantStatusShrinkRequest) SetPageNumber(v int32) *DescribeCloudAssistantStatusShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudAssistantStatusShrinkRequest) SetPageSize(v int32) *DescribeCloudAssistantStatusShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudAssistantStatusShrinkRequest) SetRegionId(v string) *DescribeCloudAssistantStatusShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudAssistantStatusShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantStatusResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCloudAssistantStatus(v []*DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) *DescribeCloudAssistantStatusResponseBody
	GetCloudAssistantStatus() []*DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus
	SetPageNumber(v int32) *DescribeCloudAssistantStatusResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCloudAssistantStatusResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeCloudAssistantStatusResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeCloudAssistantStatusResponseBody
	GetTotalCount() *int32
}

type DescribeCloudAssistantStatusResponseBody struct {
	// Indicates whether the Cloud Assistant client is installed on the server.
	CloudAssistantStatus []*DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus `json:"CloudAssistantStatus,omitempty" xml:"CloudAssistantStatus,omitempty" type:"Repeated"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 50.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCloudAssistantStatusResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponseBody) GetCloudAssistantStatus() []*DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus {
	return s.CloudAssistantStatus
}

func (s *DescribeCloudAssistantStatusResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCloudAssistantStatusResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCloudAssistantStatusResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeCloudAssistantStatusResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeCloudAssistantStatusResponseBody) SetCloudAssistantStatus(v []*DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) *DescribeCloudAssistantStatusResponseBody {
	s.CloudAssistantStatus = v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBody) SetPageNumber(v int32) *DescribeCloudAssistantStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBody) SetPageSize(v int32) *DescribeCloudAssistantStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBody) SetRequestId(v string) *DescribeCloudAssistantStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBody) SetTotalCount(v int32) *DescribeCloudAssistantStatusResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus struct {
	// The ID of the simple application server.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Indicates whether the Cloud Assistant client is installed on the server.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) GetStatus() *bool {
	return s.Status
}

func (s *DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) SetInstanceId(v string) *DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus {
	s.InstanceId = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) SetStatus(v bool) *DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus {
	s.Status = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBodyCloudAssistantStatus) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudAssistantStatusResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeCloudAssistantStatusResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeCloudAssistantStatusResponse
	GetStatusCode() *int32
	SetBody(v *DescribeCloudAssistantStatusResponseBody) *DescribeCloudAssistantStatusResponse
	GetBody() *DescribeCloudAssistantStatusResponseBody
}

type DescribeCloudAssistantStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudAssistantStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudAssistantStatusResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeCloudAssistantStatusResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeCloudAssistantStatusResponse) GetBody() *DescribeCloudAssistantStatusResponseBody {
	return s.Body
}

func (s *DescribeCloudAssistantStatusResponse) SetHeaders(v map[string]*string) *DescribeCloudAssistantStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudAssistantStatusResponse) SetStatusCode(v int32) *DescribeCloudAssistantStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponse) SetBody(v *DescribeCloudAssistantStatusResponseBody) *DescribeCloudAssistantStatusResponse {
	s.Body = v
	return s
}

func (s *DescribeCloudAssistantStatusResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudMonitorAgentStatusesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeCloudMonitorAgentStatusesRequest
	GetClientToken() *string
	SetInstanceIds(v string) *DescribeCloudMonitorAgentStatusesRequest
	GetInstanceIds() *string
	SetRegionId(v string) *DescribeCloudMonitorAgentStatusesRequest
	GetRegionId() *string
}

type DescribeCloudMonitorAgentStatusesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudMonitorAgentStatusesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudMonitorAgentStatusesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudMonitorAgentStatusesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeCloudMonitorAgentStatusesRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *DescribeCloudMonitorAgentStatusesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCloudMonitorAgentStatusesRequest) SetClientToken(v string) *DescribeCloudMonitorAgentStatusesRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesRequest) SetInstanceIds(v string) *DescribeCloudMonitorAgentStatusesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesRequest) SetRegionId(v string) *DescribeCloudMonitorAgentStatusesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudMonitorAgentStatusesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceStatusList(v []*DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) *DescribeCloudMonitorAgentStatusesResponseBody
	GetInstanceStatusList() []*DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList
	SetRequestId(v string) *DescribeCloudMonitorAgentStatusesResponseBody
	GetRequestId() *string
}

type DescribeCloudMonitorAgentStatusesResponseBody struct {
	// Indicates whether the Cloud Monitor agent was automatically installed on the simple application server.
	InstanceStatusList []*DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList `json:"InstanceStatusList,omitempty" xml:"InstanceStatusList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E1FEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCloudMonitorAgentStatusesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudMonitorAgentStatusesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudMonitorAgentStatusesResponseBody) GetInstanceStatusList() []*DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList {
	return s.InstanceStatusList
}

func (s *DescribeCloudMonitorAgentStatusesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeCloudMonitorAgentStatusesResponseBody) SetInstanceStatusList(v []*DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) *DescribeCloudMonitorAgentStatusesResponseBody {
	s.InstanceStatusList = v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponseBody) SetRequestId(v string) *DescribeCloudMonitorAgentStatusesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList struct {
	// Indicates whether the Cloud Monitor agent was automatically installed on the simple application server. Valid values:
	//
	// - true
	//
	// - false
	//
	// example:
	//
	// true
	AutoInstall *bool `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// c854dc6f07e74953830bb5808d0****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The running status of the Cloud Monitoring plug-in. Possible values are:
	//
	// - running: Cloud Monitoring plug-in running.
	//
	// - stopped: Cloud Monitoring plug-in stopped.
	//
	// - installing: Cloud Monitoring plug-in installing.
	//
	// - install_faild: Cloud Monitoring plug-in installation failed.
	//
	// - abnormal: Cloud Monitoring plug-in installation abnormal.
	//
	// - not_installed: Cloud Monitoring plug-in not installed.
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) GoString() string {
	return s.String()
}

func (s *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) GetAutoInstall() *bool {
	return s.AutoInstall
}

func (s *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) GetStatus() *string {
	return s.Status
}

func (s *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) SetAutoInstall(v bool) *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList {
	s.AutoInstall = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) SetInstanceId(v string) *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList {
	s.InstanceId = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) SetStatus(v string) *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList {
	s.Status = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponseBodyInstanceStatusList) Validate() error {
	return dara.Validate(s)
}

type iDescribeCloudMonitorAgentStatusesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeCloudMonitorAgentStatusesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeCloudMonitorAgentStatusesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeCloudMonitorAgentStatusesResponseBody) *DescribeCloudMonitorAgentStatusesResponse
	GetBody() *DescribeCloudMonitorAgentStatusesResponseBody
}

type DescribeCloudMonitorAgentStatusesResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudMonitorAgentStatusesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudMonitorAgentStatusesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeCloudMonitorAgentStatusesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudMonitorAgentStatusesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeCloudMonitorAgentStatusesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeCloudMonitorAgentStatusesResponse) GetBody() *DescribeCloudMonitorAgentStatusesResponseBody {
	return s.Body
}

func (s *DescribeCloudMonitorAgentStatusesResponse) SetHeaders(v map[string]*string) *DescribeCloudMonitorAgentStatusesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponse) SetStatusCode(v int32) *DescribeCloudMonitorAgentStatusesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponse) SetBody(v *DescribeCloudMonitorAgentStatusesResponseBody) *DescribeCloudMonitorAgentStatusesResponse {
	s.Body = v
	return s
}

func (s *DescribeCloudMonitorAgentStatusesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeCommandInvocationsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandId(v string) *DescribeCommandInvocationsRequest
	GetCommandId() *string
	SetCommandName(v string) *DescribeCommandInvocationsRequest
	GetCommandName() *string
	SetCommandType(v string) *DescribeCommandInvocationsRequest
	GetCommandType() *string
	SetInstanceId(v string) *DescribeCommandInvocationsRequest
	GetInstanceId() *string
	SetInvocationStatus(v string) *DescribeCommandInvocationsRequest
	GetInvocationStatus() *string
	SetInvokeId(v string) *DescribeCommandInvocationsRequest
	GetInvokeId() *string
	SetPageNumber(v string) *DescribeCommandInvocationsRequest
	GetPageNumber() *string
	SetPageSize(v string) *DescribeCommandInvocationsRequest
	GetPageSize() *string
	SetRegionId(v string) *DescribeCommandInvocationsRequest
	GetRegionId() *string
}

type DescribeCommandInvocationsRequest struct {
	// The command ID. You can call the [DescribeCommands](https://help.aliyun.com/document_detail/64843.html) operation to query all available command IDs.
	//
	// example:
	//
	// c-sh02yh0932w****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The command name. If both CommandName and InstanceId are specified, CommandName does not take effect.
	//
	// example:
	//
	// testName
	CommandName *string `json:"CommandName,omitempty" xml:"CommandName,omitempty"`
	// The command type. Valid values:
	//
	// 	- RunBatScript: batch command, applicable to Windows instances
	//
	// 	- RunPowerShellScript: PowerShell command, applicable to Windows instances
	//
	// 	- RunShellScript: shell command, applicable to Linux instances
	//
	// example:
	//
	// RunPowerShellScript
	CommandType *string `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The overall execution state of the command. The value of this parameter depends on the execution status of the command on all the involved instances. Valid values:
	//
	// 	- Pending: The command is being verified or sent. When the execution state on at least one instance is Pending, the overall execution state is Pending.
	//
	// 	- Running: The command is being run on the instances. When the execution state on at least one instance is Running, the overall execution state is Running.
	//
	// 	- Success: When the execution state on at least one instance is Success and the execution state on other instances is Stopped or Success, the overall execution state is Success.
	//
	//     	- Command that is set to run immediately: The command execution is complete, and the exit code is 0.
	//
	// 	- Failed: When the execution state on all instances is Stopped or Failed, the overall execution state is Failed. When the execution state on an instance is one of the following values, Failed is returned as the overall execution state:
	//
	//     	- Invalid: The command is invalid.
	//
	//     	- Aborted: The command fails to be sent.
	//
	//     	- Failed: The command execution is complete, and the exit code is not 0.
	//
	//     	- Timeout: The command execution times out.
	//
	//     	- Error: An error occurs when the command is being run.
	//
	// 	- Stopping: The command task is being stopped. When the execution state on at least one instance is Stopping, the overall execution state is Stopping.
	//
	// 	- Stopped: The command task is stopped. When the execution state on all instances is Stopped, the overall execution state is Stopped. When the execution state on an instance is one of the following values, Stopped is returned as the overall execution state:
	//
	//     	- Cancelled: The command task is canceled.
	//
	//     	- Terminated: The command task is terminated.
	//
	// 	- PartialFailed: The command execution succeeds on some instances and fails on other instances. When the execution state on some instances is Success and the execution state on other instances is Failed or Stopped, the overall execution state is PartialFailed.
	//
	// >  The value of the `InvokeStatus` response parameter is similar to the value of InvocationStatus. We recommend that you ignore InvokeStatus and check the value of InvocationStatus.
	//
	// example:
	//
	// Success
	InvocationStatus *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	// The execution ID of the command.
	//
	// example:
	//
	// t-hz02p9545t6****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The page number. Pages start from 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 50.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCommandInvocationsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandInvocationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommandInvocationsRequest) GetCommandId() *string {
	return s.CommandId
}

func (s *DescribeCommandInvocationsRequest) GetCommandName() *string {
	return s.CommandName
}

func (s *DescribeCommandInvocationsRequest) GetCommandType() *string {
	return s.CommandType
}

func (s *DescribeCommandInvocationsRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeCommandInvocationsRequest) GetInvocationStatus() *string {
	return s.InvocationStatus
}

func (s *DescribeCommandInvocationsRequest) GetInvokeId() *string {
	return s.InvokeId
}

func (s *DescribeCommandInvocationsRequest) GetPageNumber() *string {
	return s.PageNumber
}

func (s *DescribeCommandInvocationsRequest) GetPageSize() *string {
	return s.PageSize
}

func (s *DescribeCommandInvocationsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCommandInvocationsRequest) SetCommandId(v string) *DescribeCommandInvocationsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetCommandName(v string) *DescribeCommandInvocationsRequest {
	s.CommandName = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetCommandType(v string) *DescribeCommandInvocationsRequest {
	s.CommandType = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetInstanceId(v string) *DescribeCommandInvocationsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetInvocationStatus(v string) *DescribeCommandInvocationsRequest {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetInvokeId(v string) *DescribeCommandInvocationsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetPageNumber(v string) *DescribeCommandInvocationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetPageSize(v string) *DescribeCommandInvocationsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) SetRegionId(v string) *DescribeCommandInvocationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCommandInvocationsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCommandInvocationsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCommandInvocations(v []*DescribeCommandInvocationsResponseBodyCommandInvocations) *DescribeCommandInvocationsResponseBody
	GetCommandInvocations() []*DescribeCommandInvocationsResponseBodyCommandInvocations
	SetPageNumber(v int32) *DescribeCommandInvocationsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCommandInvocationsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeCommandInvocationsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeCommandInvocationsResponseBody
	GetTotalCount() *int32
}

type DescribeCommandInvocationsResponseBody struct {
	// The command executions.
	CommandInvocations []*DescribeCommandInvocationsResponseBodyCommandInvocations `json:"CommandInvocations,omitempty" xml:"CommandInvocations,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCommandInvocationsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandInvocationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCommandInvocationsResponseBody) GetCommandInvocations() []*DescribeCommandInvocationsResponseBodyCommandInvocations {
	return s.CommandInvocations
}

func (s *DescribeCommandInvocationsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCommandInvocationsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCommandInvocationsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeCommandInvocationsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeCommandInvocationsResponseBody) SetCommandInvocations(v []*DescribeCommandInvocationsResponseBodyCommandInvocations) *DescribeCommandInvocationsResponseBody {
	s.CommandInvocations = v
	return s
}

func (s *DescribeCommandInvocationsResponseBody) SetPageNumber(v int32) *DescribeCommandInvocationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBody) SetPageSize(v int32) *DescribeCommandInvocationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBody) SetRequestId(v string) *DescribeCommandInvocationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBody) SetTotalCount(v int32) *DescribeCommandInvocationsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeCommandInvocationsResponseBodyCommandInvocations struct {
	// The content of the command.
	//
	// example:
	//
	// echo 123
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// The description of the command.
	//
	// example:
	//
	// testDescription
	CommandDescription *string `json:"CommandDescription,omitempty" xml:"CommandDescription,omitempty"`
	// The command ID.
	//
	// example:
	//
	// c-hy0338xh28r****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The command name.
	//
	// example:
	//
	// testCommandName
	CommandName *string `json:"CommandName,omitempty" xml:"CommandName,omitempty"`
	// The command type.
	//
	// example:
	//
	// RunShellScript
	CommandType *string `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	// The time when the command was created.
	//
	// example:
	//
	// 2023-04-27T10:11:58
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The overall execution state of the command. Valid values:
	//
	// 	- Pending: The command is being verified or sent.
	//
	// 	- Invalid: The specified command type or parameter is invalid.
	//
	// 	- Aborted: The command failed to be sent to the instances. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.
	//
	// 	- Running: The command is being run on the instances.
	//
	// 	- Success: The command execution is complete, and the exit code is 0.
	//
	// 	- Failed: The command execution is complete, and the exit code is not 0.
	//
	// 	- Error: The command execution cannot proceed due to an exception.
	//
	// 	- Timeout: The command execution timed out.
	//
	// 	- Cancelled: The command execution is canceled, and the command is not started.
	//
	// 	- Stopping: The command in the Running state is being stopped.
	//
	// 	- Terminated: The command is terminated when it is being run.
	//
	// example:
	//
	// Success
	InvocationStatus *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	// The execution ID of the command.
	//
	// example:
	//
	// t-hz0373jyzxt****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The instances on which the command is run.
	InvokeInstances []*DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances `json:"InvokeInstances,omitempty" xml:"InvokeInstances,omitempty" type:"Repeated"`
	// The custom parameters in the command. If no custom parameter exists in the command, the default value is {}.
	//
	// example:
	//
	// {}
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The timeout period. Unit: seconds.
	//
	// example:
	//
	// 60
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The username that is used to run the command.
	//
	// example:
	//
	// root
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	// The working directory of the command.
	//
	// example:
	//
	// c:\\wwwroot
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
}

func (s DescribeCommandInvocationsResponseBodyCommandInvocations) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandInvocationsResponseBodyCommandInvocations) GoString() string {
	return s.String()
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetCommandContent() *string {
	return s.CommandContent
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetCommandDescription() *string {
	return s.CommandDescription
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetCommandId() *string {
	return s.CommandId
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetCommandName() *string {
	return s.CommandName
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetCommandType() *string {
	return s.CommandType
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetCreationTime() *string {
	return s.CreationTime
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetInvocationStatus() *string {
	return s.InvocationStatus
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetInvokeId() *string {
	return s.InvokeId
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetInvokeInstances() []*DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	return s.InvokeInstances
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetParameters() *string {
	return s.Parameters
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetTimeout() *int64 {
	return s.Timeout
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetUsername() *string {
	return s.Username
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) GetWorkingDir() *string {
	return s.WorkingDir
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetCommandContent(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.CommandContent = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetCommandDescription(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.CommandDescription = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetCommandId(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetCommandName(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.CommandName = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetCommandType(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.CommandType = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetCreationTime(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.CreationTime = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetInvocationStatus(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetInvokeId(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.InvokeId = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetInvokeInstances(v []*DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.InvokeInstances = v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetParameters(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.Parameters = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetTimeout(v int64) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.Timeout = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetUsername(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.Username = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) SetWorkingDir(v string) *DescribeCommandInvocationsResponseBodyCommandInvocations {
	s.WorkingDir = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocations) Validate() error {
	return dara.Validate(s)
}

type DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances struct {
	// The error code returned if the command failed to be sent or run.
	//
	// 	- null: The command is run as expected.
	//
	// 	- InstanceNotExists: The specified instance does not exist or is released.
	//
	// 	- InstanceReleased: The instance is released when the command is being run.
	//
	// 	- InstanceNotRunning: The instance is not in the Running state when the command is being run.
	//
	// 	- CommandNotApplicable: The command is not applicable to the specified instance.
	//
	// 	- AccountNotExists: The specified account does not exist.
	//
	// 	- DirectoryNotExists: The specified directory does not exist.
	//
	// 	- BadCronExpression: The specified CRON expression for the execution schedule is invalid.
	//
	// 	- ClientNotRunning: Cloud Assistant Agent is not running.
	//
	// 	- ClientNotResponse: Cloud Assistant Agent does not respond to your request.
	//
	// 	- ClientIsUpgrading: Cloud Assistant Agent is being updated.
	//
	// 	- ClientNeedUpgrade: Cloud Assistant Agent needs to be updated.
	//
	// 	- DeliveryTimeout: The request to send the command timed out.
	//
	// 	- ExecutionTimeout: The command execution timed out.
	//
	// 	- ExecutionException: An exception occurred when the command was being run.
	//
	// 	- ExecutionInterrupted: The command execution is interrupted.
	//
	// 	- ExitCodeNonzero: The command execution is complete, and the exit code is not 0.
	//
	// example:
	//
	// InstanceNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the command failed to be sent or run. Valid values:
	//
	// 	- null: The command is run as expected.
	//
	// 	- the specified instance does not exists: The specified instance does not exist or is released.
	//
	// 	- the instance has released when create task: The instance is released when the command is being run.
	//
	// 	- the instance is not running when create task: The instance is not in the Running state when the command is being run.
	//
	// 	- the command is not applicable: The command is not applicable to the specified instance.
	//
	// 	- the specified account does not exists: The specified account does not exist.
	//
	// 	- the specified directory does not exists: The specified directory does not exist.
	//
	// 	- the cron job expression is invalid: The specified CRON expression for the execution schedule is invalid.
	//
	// 	- the aliyun service is not running on the instance: Cloud Assistant Agent is not running.
	//
	// 	- the aliyun service in the instance does not response: Cloud Assistant Agent does not respond to your request.
	//
	// 	- the aliyun service in the instance is upgrading now: Cloud Assistant Agent is being updated.
	//
	// 	- the aliyun service in the instance need upgrade: Cloud Assistant Agent needs to be updated.
	//
	// 	- the command delivery has been timeout: The request to send the command timed out.
	//
	// 	- the command execution has been timeout: The command execution timed out.
	//
	// 	- the command execution got an exception: An exception occurred when the command was being run.
	//
	// 	- the command execution has been interrupted: The command execution is interrupted.
	//
	// 	- the command execution exit code is not zero: The command execution is complete, and the exit code is not 0.
	//
	// example:
	//
	// the specified instance does not exists
	ErrorInfo *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	// The exit code of the command.
	//
	// 	- For Linux instances, the exit code is the exit code of the shell command.
	//
	// 	- For Windows instances, the exit code is the exit code of the batch or PowerShell command.
	//
	// example:
	//
	// 0
	ExitCode *int64 `json:"ExitCode,omitempty" xml:"ExitCode,omitempty"`
	// The end of the time range during which the command is run on the instance.
	//
	// example:
	//
	// 2023-04-03T02:42:29Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// 2445f4aecdac4b71ba2c7e3a7ccf****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The execution state of the command on a single instance. Valid values:
	//
	// 	- Pending: The command is being verified or sent.
	//
	// 	- Invalid: The specified command type or parameter is invalid.
	//
	// 	- Aborted: The command failed to be sent to the instance. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.
	//
	// 	- Running: The command is being run on the instance.
	//
	// 	- Success:
	//
	//     	- Command that is set to run only once: The command execution is complete, and the exit code is 0.
	//
	//     	- Command that is set to run on a schedule: The previous command execution is complete, the exit code is 0, and the specified cycle ends.
	//
	// 	- Failed:
	//
	//     	- Command that is set to run only once: The command execution is complete, and the exit code is not 0.
	//
	//     	- Command that is set to run on a schedule: The previous command execution is complete, the exit code is not 0, and the specified cycle is about to end.
	//
	// 	- Error: The command execution cannot proceed due to an exception.
	//
	// 	- Timeout: The command execution timed out.
	//
	// 	- Cancelled: The command execution is canceled, and the command is not started.
	//
	// 	- Stopping: The command task is being stopped.
	//
	// 	- Terminated: The command is terminated when it is being run.
	//
	// example:
	//
	// Running
	InvocationStatus *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	// The command output.
	//
	// example:
	//
	// OutputMsg
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The beginning of the time range during which the command is run on the instance.
	//
	// example:
	//
	// 2023-05-09T03:32:24Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GoString() string {
	return s.String()
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetErrorCode() *string {
	return s.ErrorCode
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetErrorInfo() *string {
	return s.ErrorInfo
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetExitCode() *int64 {
	return s.ExitCode
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetFinishTime() *string {
	return s.FinishTime
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetInvocationStatus() *string {
	return s.InvocationStatus
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetOutput() *string {
	return s.Output
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetErrorCode(v string) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetErrorInfo(v string) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetExitCode(v int64) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.ExitCode = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetFinishTime(v string) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.FinishTime = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetInstanceId(v string) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetInvocationStatus(v string) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetOutput(v string) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.Output = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) SetStartTime(v string) *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances {
	s.StartTime = &v
	return s
}

func (s *DescribeCommandInvocationsResponseBodyCommandInvocationsInvokeInstances) Validate() error {
	return dara.Validate(s)
}

type iDescribeCommandInvocationsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeCommandInvocationsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeCommandInvocationsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeCommandInvocationsResponseBody) *DescribeCommandInvocationsResponse
	GetBody() *DescribeCommandInvocationsResponseBody
}

type DescribeCommandInvocationsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCommandInvocationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCommandInvocationsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandInvocationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommandInvocationsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeCommandInvocationsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeCommandInvocationsResponse) GetBody() *DescribeCommandInvocationsResponseBody {
	return s.Body
}

func (s *DescribeCommandInvocationsResponse) SetHeaders(v map[string]*string) *DescribeCommandInvocationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCommandInvocationsResponse) SetStatusCode(v int32) *DescribeCommandInvocationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCommandInvocationsResponse) SetBody(v *DescribeCommandInvocationsResponseBody) *DescribeCommandInvocationsResponse {
	s.Body = v
	return s
}

func (s *DescribeCommandInvocationsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeCommandsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandId(v string) *DescribeCommandsRequest
	GetCommandId() *string
	SetName(v string) *DescribeCommandsRequest
	GetName() *string
	SetPageNumber(v string) *DescribeCommandsRequest
	GetPageNumber() *string
	SetPageSize(v string) *DescribeCommandsRequest
	GetPageSize() *string
	SetProvider(v string) *DescribeCommandsRequest
	GetProvider() *string
	SetRegionId(v string) *DescribeCommandsRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeCommandsRequest
	GetResourceGroupId() *string
	SetTag(v []*DescribeCommandsRequestTag) *DescribeCommandsRequest
	GetTag() []*DescribeCommandsRequestTag
	SetType(v string) *DescribeCommandsRequest
	GetType() *string
}

type DescribeCommandsRequest struct {
	// The command ID.
	//
	// example:
	//
	// c-sh02yh0932w****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The command name. Fuzzy match is not supported.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number.
	//
	// Pages start from 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 50.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The provider of the common command. Take note of the following items:
	//
	// 	- If you set this parameter to `AlibabaCloud`, all the common commands provided by Alibaba Cloud are queried.
	//
	// 	- If you set this parameter to `User`, all the custom commands created by you are queried.
	//
	// This parameter is required.
	//
	// example:
	//
	// AlibabaCloud
	Provider *string `json:"Provider,omitempty" xml:"Provider,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags that are bound to the command.
	Tag []*DescribeCommandsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The language type of the command. Valid values:
	//
	// 	- RunBatScript: batch command, applicable to Windows instances
	//
	// 	- RunPowerShellScript: PowerShell command, applicable to Windows instances
	//
	// 	- RunShellScript: shell command, applicable to Linux instances
	//
	// example:
	//
	// RunShellScript
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCommandsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommandsRequest) GetCommandId() *string {
	return s.CommandId
}

func (s *DescribeCommandsRequest) GetName() *string {
	return s.Name
}

func (s *DescribeCommandsRequest) GetPageNumber() *string {
	return s.PageNumber
}

func (s *DescribeCommandsRequest) GetPageSize() *string {
	return s.PageSize
}

func (s *DescribeCommandsRequest) GetProvider() *string {
	return s.Provider
}

func (s *DescribeCommandsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCommandsRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeCommandsRequest) GetTag() []*DescribeCommandsRequestTag {
	return s.Tag
}

func (s *DescribeCommandsRequest) GetType() *string {
	return s.Type
}

func (s *DescribeCommandsRequest) SetCommandId(v string) *DescribeCommandsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandsRequest) SetName(v string) *DescribeCommandsRequest {
	s.Name = &v
	return s
}

func (s *DescribeCommandsRequest) SetPageNumber(v string) *DescribeCommandsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandsRequest) SetPageSize(v string) *DescribeCommandsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCommandsRequest) SetProvider(v string) *DescribeCommandsRequest {
	s.Provider = &v
	return s
}

func (s *DescribeCommandsRequest) SetRegionId(v string) *DescribeCommandsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCommandsRequest) SetResourceGroupId(v string) *DescribeCommandsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeCommandsRequest) SetTag(v []*DescribeCommandsRequestTag) *DescribeCommandsRequest {
	s.Tag = v
	return s
}

func (s *DescribeCommandsRequest) SetType(v string) *DescribeCommandsRequest {
	s.Type = &v
	return s
}

func (s *DescribeCommandsRequest) Validate() error {
	return dara.Validate(s)
}

type DescribeCommandsRequestTag struct {
	// The tag key of the command. A tag key can be 1 to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the command. A tag value can be up to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCommandsRequestTag) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeCommandsRequestTag) GetKey() *string {
	return s.Key
}

func (s *DescribeCommandsRequestTag) GetValue() *string {
	return s.Value
}

func (s *DescribeCommandsRequestTag) SetKey(v string) *DescribeCommandsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeCommandsRequestTag) SetValue(v string) *DescribeCommandsRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeCommandsRequestTag) Validate() error {
	return dara.Validate(s)
}

type iDescribeCommandsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCommands(v []*DescribeCommandsResponseBodyCommands) *DescribeCommandsResponseBody
	GetCommands() []*DescribeCommandsResponseBodyCommands
	SetPageNumber(v int32) *DescribeCommandsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeCommandsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeCommandsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeCommandsResponseBody
	GetTotalCount() *int32
}

type DescribeCommandsResponseBody struct {
	// The queried commands.
	Commands []*DescribeCommandsResponseBodyCommands `json:"Commands,omitempty" xml:"Commands,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of commands.
	//
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCommandsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseBody) GetCommands() []*DescribeCommandsResponseBodyCommands {
	return s.Commands
}

func (s *DescribeCommandsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeCommandsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeCommandsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeCommandsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeCommandsResponseBody) SetCommands(v []*DescribeCommandsResponseBodyCommands) *DescribeCommandsResponseBody {
	s.Commands = v
	return s
}

func (s *DescribeCommandsResponseBody) SetPageNumber(v int32) *DescribeCommandsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandsResponseBody) SetPageSize(v int32) *DescribeCommandsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCommandsResponseBody) SetRequestId(v string) *DescribeCommandsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCommandsResponseBody) SetTotalCount(v int32) *DescribeCommandsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCommandsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeCommandsResponseBodyCommands struct {
	// The content of the command.
	//
	// example:
	//
	// cat /etc/ssh/sshd_config
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// The command ID.
	//
	// example:
	//
	// c-gov1k1tqwi9****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The time when the command was created.
	//
	// example:
	//
	// 2023-01-05T06:38:53Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the command.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the custom parameter feature is enabled for the command.
	//
	// example:
	//
	// false
	EnableParameter *bool `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
	// The name of the command.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Details of the custom parameter.
	ParameterDefinitions []*DescribeCommandsResponseBodyCommandsParameterDefinitions `json:"ParameterDefinitions,omitempty" xml:"ParameterDefinitions,omitempty" type:"Repeated"`
	// The custom parameter names that are parsed from the command content specified when the command was created. The custom parameter names are returned in the list format. If the custom parameter feature is disabled, an empty list is returned.
	ParameterNames []*string `json:"ParameterNames,omitempty" xml:"ParameterNames,omitempty" type:"Repeated"`
	// The provider of the command.
	//
	// example:
	//
	// User
	Provider *string `json:"Provider,omitempty" xml:"Provider,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags that are bound to the command.
	Tags []*DescribeCommandsResponseBodyCommandsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timeout period of the command.
	//
	// example:
	//
	// 60
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The type of the command.
	//
	// example:
	//
	// RunShellScript
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The execution path of the command.
	//
	// example:
	//
	// /home
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
}

func (s DescribeCommandsResponseBodyCommands) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandsResponseBodyCommands) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseBodyCommands) GetCommandContent() *string {
	return s.CommandContent
}

func (s *DescribeCommandsResponseBodyCommands) GetCommandId() *string {
	return s.CommandId
}

func (s *DescribeCommandsResponseBodyCommands) GetCreationTime() *string {
	return s.CreationTime
}

func (s *DescribeCommandsResponseBodyCommands) GetDescription() *string {
	return s.Description
}

func (s *DescribeCommandsResponseBodyCommands) GetEnableParameter() *bool {
	return s.EnableParameter
}

func (s *DescribeCommandsResponseBodyCommands) GetName() *string {
	return s.Name
}

func (s *DescribeCommandsResponseBodyCommands) GetParameterDefinitions() []*DescribeCommandsResponseBodyCommandsParameterDefinitions {
	return s.ParameterDefinitions
}

func (s *DescribeCommandsResponseBodyCommands) GetParameterNames() []*string {
	return s.ParameterNames
}

func (s *DescribeCommandsResponseBodyCommands) GetProvider() *string {
	return s.Provider
}

func (s *DescribeCommandsResponseBodyCommands) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeCommandsResponseBodyCommands) GetTags() []*DescribeCommandsResponseBodyCommandsTags {
	return s.Tags
}

func (s *DescribeCommandsResponseBodyCommands) GetTimeout() *int64 {
	return s.Timeout
}

func (s *DescribeCommandsResponseBodyCommands) GetType() *string {
	return s.Type
}

func (s *DescribeCommandsResponseBodyCommands) GetWorkingDir() *string {
	return s.WorkingDir
}

func (s *DescribeCommandsResponseBodyCommands) SetCommandContent(v string) *DescribeCommandsResponseBodyCommands {
	s.CommandContent = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetCommandId(v string) *DescribeCommandsResponseBodyCommands {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetCreationTime(v string) *DescribeCommandsResponseBodyCommands {
	s.CreationTime = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetDescription(v string) *DescribeCommandsResponseBodyCommands {
	s.Description = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetEnableParameter(v bool) *DescribeCommandsResponseBodyCommands {
	s.EnableParameter = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetName(v string) *DescribeCommandsResponseBodyCommands {
	s.Name = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetParameterDefinitions(v []*DescribeCommandsResponseBodyCommandsParameterDefinitions) *DescribeCommandsResponseBodyCommands {
	s.ParameterDefinitions = v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetParameterNames(v []*string) *DescribeCommandsResponseBodyCommands {
	s.ParameterNames = v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetProvider(v string) *DescribeCommandsResponseBodyCommands {
	s.Provider = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetResourceGroupId(v string) *DescribeCommandsResponseBodyCommands {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetTags(v []*DescribeCommandsResponseBodyCommandsTags) *DescribeCommandsResponseBodyCommands {
	s.Tags = v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetTimeout(v int64) *DescribeCommandsResponseBodyCommands {
	s.Timeout = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetType(v string) *DescribeCommandsResponseBodyCommands {
	s.Type = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetWorkingDir(v string) *DescribeCommandsResponseBodyCommands {
	s.WorkingDir = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) Validate() error {
	return dara.Validate(s)
}

type DescribeCommandsResponseBodyCommandsParameterDefinitions struct {
	// The default value of the custom parameter.
	//
	// example:
	//
	// https://aliyun-client-assist.oss-accelerate.aliyuncs.com/linux/aliyun_assist_latest.rpm
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// The description of the custom parameter.
	//
	// example:
	//
	// Command Assistant Agent Installation Package Path
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the custom parameter.
	//
	// example:
	//
	// DownloadUrl
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The valid values of the custom parameter.
	PossibleValues []*string `json:"PossibleValues,omitempty" xml:"PossibleValues,omitempty" type:"Repeated"`
	// Indicates whether the custom parameter is required. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeCommandsResponseBodyCommandsParameterDefinitions) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandsResponseBodyCommandsParameterDefinitions) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) GetDefaultValue() *string {
	return s.DefaultValue
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) GetDescription() *string {
	return s.Description
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) GetParameterName() *string {
	return s.ParameterName
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) GetPossibleValues() []*string {
	return s.PossibleValues
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) GetRequired() *bool {
	return s.Required
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) SetDefaultValue(v string) *DescribeCommandsResponseBodyCommandsParameterDefinitions {
	s.DefaultValue = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) SetDescription(v string) *DescribeCommandsResponseBodyCommandsParameterDefinitions {
	s.Description = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) SetParameterName(v string) *DescribeCommandsResponseBodyCommandsParameterDefinitions {
	s.ParameterName = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) SetPossibleValues(v []*string) *DescribeCommandsResponseBodyCommandsParameterDefinitions {
	s.PossibleValues = v
	return s
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) SetRequired(v bool) *DescribeCommandsResponseBodyCommandsParameterDefinitions {
	s.Required = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommandsParameterDefinitions) Validate() error {
	return dara.Validate(s)
}

type DescribeCommandsResponseBodyCommandsTags struct {
	// The tag key of the command.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the command.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCommandsResponseBodyCommandsTags) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandsResponseBodyCommandsTags) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseBodyCommandsTags) GetKey() *string {
	return s.Key
}

func (s *DescribeCommandsResponseBodyCommandsTags) GetValue() *string {
	return s.Value
}

func (s *DescribeCommandsResponseBodyCommandsTags) SetKey(v string) *DescribeCommandsResponseBodyCommandsTags {
	s.Key = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommandsTags) SetValue(v string) *DescribeCommandsResponseBodyCommandsTags {
	s.Value = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommandsTags) Validate() error {
	return dara.Validate(s)
}

type iDescribeCommandsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeCommandsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeCommandsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeCommandsResponseBody) *DescribeCommandsResponse
	GetBody() *DescribeCommandsResponseBody
}

type DescribeCommandsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCommandsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCommandsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeCommandsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeCommandsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeCommandsResponse) GetBody() *DescribeCommandsResponseBody {
	return s.Body
}

func (s *DescribeCommandsResponse) SetHeaders(v map[string]*string) *DescribeCommandsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCommandsResponse) SetStatusCode(v int32) *DescribeCommandsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCommandsResponse) SetBody(v *DescribeCommandsResponseBody) *DescribeCommandsResponse {
	s.Body = v
	return s
}

func (s *DescribeCommandsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseErrorLogsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDatabaseInstanceId(v string) *DescribeDatabaseErrorLogsRequest
	GetDatabaseInstanceId() *string
	SetEndTime(v string) *DescribeDatabaseErrorLogsRequest
	GetEndTime() *string
	SetPageNumber(v int32) *DescribeDatabaseErrorLogsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDatabaseErrorLogsRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeDatabaseErrorLogsRequest
	GetRegionId() *string
	SetStartTime(v string) *DescribeDatabaseErrorLogsRequest
	GetStartTime() *string
}

type DescribeDatabaseErrorLogsRequest struct {
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC. The end time must be later than the start time.
	//
	// > The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-08T04:04Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the Simple Database Service instance.
	//
	// You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// > The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-07T04:04Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDatabaseErrorLogsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseErrorLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseErrorLogsRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *DescribeDatabaseErrorLogsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDatabaseErrorLogsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDatabaseErrorLogsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDatabaseErrorLogsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDatabaseErrorLogsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDatabaseErrorLogsRequest) SetDatabaseInstanceId(v string) *DescribeDatabaseErrorLogsRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *DescribeDatabaseErrorLogsRequest) SetEndTime(v string) *DescribeDatabaseErrorLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDatabaseErrorLogsRequest) SetPageNumber(v int32) *DescribeDatabaseErrorLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatabaseErrorLogsRequest) SetPageSize(v int32) *DescribeDatabaseErrorLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabaseErrorLogsRequest) SetRegionId(v string) *DescribeDatabaseErrorLogsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDatabaseErrorLogsRequest) SetStartTime(v string) *DescribeDatabaseErrorLogsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDatabaseErrorLogsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseErrorLogsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetErrorLogs(v []*DescribeDatabaseErrorLogsResponseBodyErrorLogs) *DescribeDatabaseErrorLogsResponseBody
	GetErrorLogs() []*DescribeDatabaseErrorLogsResponseBodyErrorLogs
	SetPageNumber(v int32) *DescribeDatabaseErrorLogsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDatabaseErrorLogsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeDatabaseErrorLogsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeDatabaseErrorLogsResponseBody
	GetTotalCount() *int32
}

type DescribeDatabaseErrorLogsResponseBody struct {
	// The time when the error log entry was generated. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// > The time displayed in the Simple Application Server console is in the format of UTC+8.
	ErrorLogs []*DescribeDatabaseErrorLogsResponseBodyErrorLogs `json:"ErrorLogs,omitempty" xml:"ErrorLogs,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatabaseErrorLogsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseErrorLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseErrorLogsResponseBody) GetErrorLogs() []*DescribeDatabaseErrorLogsResponseBodyErrorLogs {
	return s.ErrorLogs
}

func (s *DescribeDatabaseErrorLogsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDatabaseErrorLogsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDatabaseErrorLogsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDatabaseErrorLogsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDatabaseErrorLogsResponseBody) SetErrorLogs(v []*DescribeDatabaseErrorLogsResponseBodyErrorLogs) *DescribeDatabaseErrorLogsResponseBody {
	s.ErrorLogs = v
	return s
}

func (s *DescribeDatabaseErrorLogsResponseBody) SetPageNumber(v int32) *DescribeDatabaseErrorLogsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatabaseErrorLogsResponseBody) SetPageSize(v int32) *DescribeDatabaseErrorLogsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabaseErrorLogsResponseBody) SetRequestId(v string) *DescribeDatabaseErrorLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabaseErrorLogsResponseBody) SetTotalCount(v int32) *DescribeDatabaseErrorLogsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDatabaseErrorLogsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDatabaseErrorLogsResponseBodyErrorLogs struct {
	// The time when the resource was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-08T12:11:04Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// spid52 DBCC TRACEON 3499, server process ID (SPID) 52. This is an informational message only; no user action is required
	ErrorInfo *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
}

func (s DescribeDatabaseErrorLogsResponseBodyErrorLogs) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseErrorLogsResponseBodyErrorLogs) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseErrorLogsResponseBodyErrorLogs) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeDatabaseErrorLogsResponseBodyErrorLogs) GetErrorInfo() *string {
	return s.ErrorInfo
}

func (s *DescribeDatabaseErrorLogsResponseBodyErrorLogs) SetCreateTime(v string) *DescribeDatabaseErrorLogsResponseBodyErrorLogs {
	s.CreateTime = &v
	return s
}

func (s *DescribeDatabaseErrorLogsResponseBodyErrorLogs) SetErrorInfo(v string) *DescribeDatabaseErrorLogsResponseBodyErrorLogs {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeDatabaseErrorLogsResponseBodyErrorLogs) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseErrorLogsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDatabaseErrorLogsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDatabaseErrorLogsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDatabaseErrorLogsResponseBody) *DescribeDatabaseErrorLogsResponse
	GetBody() *DescribeDatabaseErrorLogsResponseBody
}

type DescribeDatabaseErrorLogsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatabaseErrorLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatabaseErrorLogsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseErrorLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseErrorLogsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDatabaseErrorLogsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDatabaseErrorLogsResponse) GetBody() *DescribeDatabaseErrorLogsResponseBody {
	return s.Body
}

func (s *DescribeDatabaseErrorLogsResponse) SetHeaders(v map[string]*string) *DescribeDatabaseErrorLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatabaseErrorLogsResponse) SetStatusCode(v int32) *DescribeDatabaseErrorLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatabaseErrorLogsResponse) SetBody(v *DescribeDatabaseErrorLogsResponseBody) *DescribeDatabaseErrorLogsResponse {
	s.Body = v
	return s
}

func (s *DescribeDatabaseErrorLogsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstanceMetricDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDatabaseInstanceId(v string) *DescribeDatabaseInstanceMetricDataRequest
	GetDatabaseInstanceId() *string
	SetEndTime(v string) *DescribeDatabaseInstanceMetricDataRequest
	GetEndTime() *string
	SetMetricName(v string) *DescribeDatabaseInstanceMetricDataRequest
	GetMetricName() *string
	SetRegionId(v string) *DescribeDatabaseInstanceMetricDataRequest
	GetRegionId() *string
	SetStartTime(v string) *DescribeDatabaseInstanceMetricDataRequest
	GetStartTime() *string
}

type DescribeDatabaseInstanceMetricDataRequest struct {
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// > The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-07T04:04Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the metric. Valid values:
	//
	// 	- MySQL_MemCpuUsage: The CPU utilization and memory usage of the instance within the entire operating system.
	//
	// 	- MySQL_DetailedSpaceUsage: The total space usage, data space, log space, temporary space, and system space of the instance.
	//
	// 	- MySQL_Sessions : The total number of active connections.
	//
	// 	- MySQL_IOPS: The IOPS of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL_MemCpuUsage
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// > The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-06T04:04Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDatabaseInstanceMetricDataRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceMetricDataRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *DescribeDatabaseInstanceMetricDataRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDatabaseInstanceMetricDataRequest) GetMetricName() *string {
	return s.MetricName
}

func (s *DescribeDatabaseInstanceMetricDataRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDatabaseInstanceMetricDataRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDatabaseInstanceMetricDataRequest) SetDatabaseInstanceId(v string) *DescribeDatabaseInstanceMetricDataRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataRequest) SetEndTime(v string) *DescribeDatabaseInstanceMetricDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataRequest) SetMetricName(v string) *DescribeDatabaseInstanceMetricDataRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataRequest) SetRegionId(v string) *DescribeDatabaseInstanceMetricDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataRequest) SetStartTime(v string) *DescribeDatabaseInstanceMetricDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstanceMetricDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataFormat(v string) *DescribeDatabaseInstanceMetricDataResponseBody
	GetDataFormat() *string
	SetMetricData(v string) *DescribeDatabaseInstanceMetricDataResponseBody
	GetMetricData() *string
	SetMetricName(v string) *DescribeDatabaseInstanceMetricDataResponseBody
	GetMetricName() *string
	SetRequestId(v string) *DescribeDatabaseInstanceMetricDataResponseBody
	GetRequestId() *string
	SetUnit(v string) *DescribeDatabaseInstanceMetricDataResponseBody
	GetUnit() *string
}

type DescribeDatabaseInstanceMetricDataResponseBody struct {
	// The data format. Valid values:
	//
	// 	- cpuusage\\&memusage
	//
	// 	- active_session\\&total_session
	//
	// 	- ins_size\\&data_size\\&log_size\\&tmp_size\\&other_size
	//
	// 	- io
	//
	// example:
	//
	// cpuusage&memusage
	DataFormat *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	// The monitoring data.
	//
	// example:
	//
	// [  {     \\"date"\\: " 2022-09-06T04:04:00Z",\\"value\\":\\"0.77&3.69\\"  } ]
	MetricData *string `json:"MetricData,omitempty" xml:"MetricData,omitempty"`
	// The name of the metric. Valid values:
	//
	// 	- MySQL_MemCpuUsage: The CPU utilization and memory usage of the instance within the entire operating system.
	//
	// 	- MySQL_DetailedSpaceUsage: The total space usage, data space, log space, temporary space, and system space of the instance.
	//
	// 	- MySQL_Sessions : The total number of active connections.
	//
	// 	- MySQL_IOPS: The IOPS of the instance.
	//
	// example:
	//
	// MySQL_MemCpuUsage
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The unit of the monitoring metric.
	//
	// 	- %
	//
	// 	- int
	//
	// 	- MB
	//
	// example:
	//
	// %
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeDatabaseInstanceMetricDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) GetDataFormat() *string {
	return s.DataFormat
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) GetMetricData() *string {
	return s.MetricData
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) GetMetricName() *string {
	return s.MetricName
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) GetUnit() *string {
	return s.Unit
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) SetDataFormat(v string) *DescribeDatabaseInstanceMetricDataResponseBody {
	s.DataFormat = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) SetMetricData(v string) *DescribeDatabaseInstanceMetricDataResponseBody {
	s.MetricData = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) SetMetricName(v string) *DescribeDatabaseInstanceMetricDataResponseBody {
	s.MetricName = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) SetRequestId(v string) *DescribeDatabaseInstanceMetricDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) SetUnit(v string) *DescribeDatabaseInstanceMetricDataResponseBody {
	s.Unit = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstanceMetricDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDatabaseInstanceMetricDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDatabaseInstanceMetricDataResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDatabaseInstanceMetricDataResponseBody) *DescribeDatabaseInstanceMetricDataResponse
	GetBody() *DescribeDatabaseInstanceMetricDataResponseBody
}

type DescribeDatabaseInstanceMetricDataResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatabaseInstanceMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatabaseInstanceMetricDataResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceMetricDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDatabaseInstanceMetricDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDatabaseInstanceMetricDataResponse) GetBody() *DescribeDatabaseInstanceMetricDataResponseBody {
	return s.Body
}

func (s *DescribeDatabaseInstanceMetricDataResponse) SetHeaders(v map[string]*string) *DescribeDatabaseInstanceMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponse) SetStatusCode(v int32) *DescribeDatabaseInstanceMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponse) SetBody(v *DescribeDatabaseInstanceMetricDataResponseBody) *DescribeDatabaseInstanceMetricDataResponse {
	s.Body = v
	return s
}

func (s *DescribeDatabaseInstanceMetricDataResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstanceParametersRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDatabaseInstanceId(v string) *DescribeDatabaseInstanceParametersRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *DescribeDatabaseInstanceParametersRequest
	GetRegionId() *string
}

type DescribeDatabaseInstanceParametersRequest struct {
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDatabaseInstanceParametersRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceParametersRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *DescribeDatabaseInstanceParametersRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDatabaseInstanceParametersRequest) SetDatabaseInstanceId(v string) *DescribeDatabaseInstanceParametersRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersRequest) SetRegionId(v string) *DescribeDatabaseInstanceParametersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstanceParametersResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetConfigParameters(v []*DescribeDatabaseInstanceParametersResponseBodyConfigParameters) *DescribeDatabaseInstanceParametersResponseBody
	GetConfigParameters() []*DescribeDatabaseInstanceParametersResponseBodyConfigParameters
	SetEngine(v string) *DescribeDatabaseInstanceParametersResponseBody
	GetEngine() *string
	SetEngineVersion(v string) *DescribeDatabaseInstanceParametersResponseBody
	GetEngineVersion() *string
	SetRequestId(v string) *DescribeDatabaseInstanceParametersResponseBody
	GetRequestId() *string
	SetRunningParameters(v []*DescribeDatabaseInstanceParametersResponseBodyRunningParameters) *DescribeDatabaseInstanceParametersResponseBody
	GetRunningParameters() []*DescribeDatabaseInstanceParametersResponseBodyRunningParameters
}

type DescribeDatabaseInstanceParametersResponseBody struct {
	// The range of ParameterValue.
	//
	// > The value of CheckingCode varies based on the value of ParameterName.
	ConfigParameters []*DescribeDatabaseInstanceParametersResponseBodyConfigParameters `json:"ConfigParameters,omitempty" xml:"ConfigParameters,omitempty" type:"Repeated"`
	// The database engine that the instance runs. The value must be MySQL.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The version of the database engine. Valid values:
	//
	// 	- 5.7: MySQL 5.7.
	//
	// 	- 8.0: MySQL 8.0.
	//
	// example:
	//
	// 5.5
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The range of ParameterValue.
	//
	// > The value of CheckingCode varies based on the value of ParameterName.
	RunningParameters []*DescribeDatabaseInstanceParametersResponseBodyRunningParameters `json:"RunningParameters,omitempty" xml:"RunningParameters,omitempty" type:"Repeated"`
}

func (s DescribeDatabaseInstanceParametersResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceParametersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceParametersResponseBody) GetConfigParameters() []*DescribeDatabaseInstanceParametersResponseBodyConfigParameters {
	return s.ConfigParameters
}

func (s *DescribeDatabaseInstanceParametersResponseBody) GetEngine() *string {
	return s.Engine
}

func (s *DescribeDatabaseInstanceParametersResponseBody) GetEngineVersion() *string {
	return s.EngineVersion
}

func (s *DescribeDatabaseInstanceParametersResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDatabaseInstanceParametersResponseBody) GetRunningParameters() []*DescribeDatabaseInstanceParametersResponseBodyRunningParameters {
	return s.RunningParameters
}

func (s *DescribeDatabaseInstanceParametersResponseBody) SetConfigParameters(v []*DescribeDatabaseInstanceParametersResponseBodyConfigParameters) *DescribeDatabaseInstanceParametersResponseBody {
	s.ConfigParameters = v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBody) SetEngine(v string) *DescribeDatabaseInstanceParametersResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBody) SetEngineVersion(v string) *DescribeDatabaseInstanceParametersResponseBody {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBody) SetRequestId(v string) *DescribeDatabaseInstanceParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBody) SetRunningParameters(v []*DescribeDatabaseInstanceParametersResponseBodyRunningParameters) *DescribeDatabaseInstanceParametersResponseBody {
	s.RunningParameters = v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDatabaseInstanceParametersResponseBodyConfigParameters struct {
	// The check code that indicates the valid values of the parameter.
	//
	// example:
	//
	// [1-65535]
	CheckingCode *string `json:"CheckingCode,omitempty" xml:"CheckingCode,omitempty"`
	// Does it support modifying parameter values. Possible values:
	//
	// - true:Support modifying parameter values.
	//
	// - false:Modifying parameter values is not supported.
	//
	// example:
	//
	// true
	ForceModify *string `json:"ForceModify,omitempty" xml:"ForceModify,omitempty"`
	// Specifies whether to forcibly restart the instance after parameters are modified. Valid values:
	//
	// 	- true: forcibly restarts the instance. If a new parameter value takes effect only after the instance restarts, you must set this parameter to true. Otherwise, the new parameter value cannot take effect.
	//
	// 	- false: does not forcibly restart the instance.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	ForceRestart *string `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty"`
	// The description of the parameter.
	//
	// example:
	//
	// Auto-increment columns are incremented by this
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// auto_increment_increment
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The value of the parameter.
	//
	// example:
	//
	// 1
	ParameterValue *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty"`
}

func (s DescribeDatabaseInstanceParametersResponseBodyConfigParameters) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceParametersResponseBodyConfigParameters) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) GetCheckingCode() *string {
	return s.CheckingCode
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) GetForceModify() *string {
	return s.ForceModify
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) GetForceRestart() *string {
	return s.ForceRestart
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) GetParameterDescription() *string {
	return s.ParameterDescription
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) GetParameterName() *string {
	return s.ParameterName
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) GetParameterValue() *string {
	return s.ParameterValue
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) SetCheckingCode(v string) *DescribeDatabaseInstanceParametersResponseBodyConfigParameters {
	s.CheckingCode = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) SetForceModify(v string) *DescribeDatabaseInstanceParametersResponseBodyConfigParameters {
	s.ForceModify = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) SetForceRestart(v string) *DescribeDatabaseInstanceParametersResponseBodyConfigParameters {
	s.ForceRestart = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) SetParameterDescription(v string) *DescribeDatabaseInstanceParametersResponseBodyConfigParameters {
	s.ParameterDescription = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) SetParameterName(v string) *DescribeDatabaseInstanceParametersResponseBodyConfigParameters {
	s.ParameterName = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) SetParameterValue(v string) *DescribeDatabaseInstanceParametersResponseBodyConfigParameters {
	s.ParameterValue = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyConfigParameters) Validate() error {
	return dara.Validate(s)
}

type DescribeDatabaseInstanceParametersResponseBodyRunningParameters struct {
	// The check code that indicates the valid values of the parameter.
	//
	// example:
	//
	// [ON|OFF]
	CheckingCode *string `json:"CheckingCode,omitempty" xml:"CheckingCode,omitempty"`
	// Does it support modifying parameter values. Possible values:
	//
	// - true:Support modifying parameter values.
	//
	// - false:Modifying parameter values is not supported.
	//
	// example:
	//
	// true
	ForceModify *string `json:"ForceModify,omitempty" xml:"ForceModify,omitempty"`
	// Specifies whether to forcibly restart the instance after parameters are modified. Valid values:
	//
	// 	- true: forcibly restarts the instance. If a new parameter value takes effect only after the instance restarts, you must set this parameter to true. Otherwise, the new parameter value cannot take effect.
	//
	// 	- false: does not forcibly restart the instance.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	ForceRestart *string `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty"`
	// The description of the parameter.
	//
	// example:
	//
	// When this variable has a value of 1 (the default), the server automatically grants the EXECUTE and ALTER ROUTINE privileges to the creator of a stored routine, if the user cannot already execute and alter or drop the routine. (The ALTER ROUTINE privilege is required to drop the routine.) The server also automatically drops those privileges from the creator when the routine is dropped. If automatic_sp_privileges is 0, the server does not automatically add or drop these privileges.
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// autocommit
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The value of the parameter.
	//
	// example:
	//
	// ON
	ParameterValue *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty"`
}

func (s DescribeDatabaseInstanceParametersResponseBodyRunningParameters) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceParametersResponseBodyRunningParameters) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) GetCheckingCode() *string {
	return s.CheckingCode
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) GetForceModify() *string {
	return s.ForceModify
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) GetForceRestart() *string {
	return s.ForceRestart
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) GetParameterDescription() *string {
	return s.ParameterDescription
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) GetParameterName() *string {
	return s.ParameterName
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) GetParameterValue() *string {
	return s.ParameterValue
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) SetCheckingCode(v string) *DescribeDatabaseInstanceParametersResponseBodyRunningParameters {
	s.CheckingCode = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) SetForceModify(v string) *DescribeDatabaseInstanceParametersResponseBodyRunningParameters {
	s.ForceModify = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) SetForceRestart(v string) *DescribeDatabaseInstanceParametersResponseBodyRunningParameters {
	s.ForceRestart = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) SetParameterDescription(v string) *DescribeDatabaseInstanceParametersResponseBodyRunningParameters {
	s.ParameterDescription = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) SetParameterName(v string) *DescribeDatabaseInstanceParametersResponseBodyRunningParameters {
	s.ParameterName = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) SetParameterValue(v string) *DescribeDatabaseInstanceParametersResponseBodyRunningParameters {
	s.ParameterValue = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponseBodyRunningParameters) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstanceParametersResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDatabaseInstanceParametersResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDatabaseInstanceParametersResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDatabaseInstanceParametersResponseBody) *DescribeDatabaseInstanceParametersResponse
	GetBody() *DescribeDatabaseInstanceParametersResponseBody
}

type DescribeDatabaseInstanceParametersResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatabaseInstanceParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatabaseInstanceParametersResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstanceParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstanceParametersResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDatabaseInstanceParametersResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDatabaseInstanceParametersResponse) GetBody() *DescribeDatabaseInstanceParametersResponseBody {
	return s.Body
}

func (s *DescribeDatabaseInstanceParametersResponse) SetHeaders(v map[string]*string) *DescribeDatabaseInstanceParametersResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponse) SetStatusCode(v int32) *DescribeDatabaseInstanceParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponse) SetBody(v *DescribeDatabaseInstanceParametersResponseBody) *DescribeDatabaseInstanceParametersResponse {
	s.Body = v
	return s
}

func (s *DescribeDatabaseInstanceParametersResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDatabaseInstanceIds(v string) *DescribeDatabaseInstancesRequest
	GetDatabaseInstanceIds() *string
	SetPageNumber(v int32) *DescribeDatabaseInstancesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDatabaseInstancesRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeDatabaseInstancesRequest
	GetRegionId() *string
}

type DescribeDatabaseInstancesRequest struct {
	// The IDs of the Simple Database Service instances. The value can be a JSON array that consists of up to 100 Simple Database Service instance IDs. Separate multiple instance IDs with commas (,).
	//
	// example:
	//
	// ["swasdb-xxx******","swasdb-yyy******"]
	DatabaseInstanceIds *string `json:"DatabaseInstanceIds,omitempty" xml:"DatabaseInstanceIds,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the Simple Database Service instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDatabaseInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstancesRequest) GetDatabaseInstanceIds() *string {
	return s.DatabaseInstanceIds
}

func (s *DescribeDatabaseInstancesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDatabaseInstancesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDatabaseInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDatabaseInstancesRequest) SetDatabaseInstanceIds(v string) *DescribeDatabaseInstancesRequest {
	s.DatabaseInstanceIds = &v
	return s
}

func (s *DescribeDatabaseInstancesRequest) SetPageNumber(v int32) *DescribeDatabaseInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatabaseInstancesRequest) SetPageSize(v int32) *DescribeDatabaseInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabaseInstancesRequest) SetRegionId(v string) *DescribeDatabaseInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDatabaseInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDatabaseInstances(v []*DescribeDatabaseInstancesResponseBodyDatabaseInstances) *DescribeDatabaseInstancesResponseBody
	GetDatabaseInstances() []*DescribeDatabaseInstancesResponseBodyDatabaseInstances
	SetPageNumber(v int32) *DescribeDatabaseInstancesResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDatabaseInstancesResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeDatabaseInstancesResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeDatabaseInstancesResponseBody
	GetTotalCount() *int32
}

type DescribeDatabaseInstancesResponseBody struct {
	// The information about the Simple Database Service instances.
	DatabaseInstances []*DescribeDatabaseInstancesResponseBodyDatabaseInstances `json:"DatabaseInstances,omitempty" xml:"DatabaseInstances,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatabaseInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstancesResponseBody) GetDatabaseInstances() []*DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	return s.DatabaseInstances
}

func (s *DescribeDatabaseInstancesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDatabaseInstancesResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDatabaseInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDatabaseInstancesResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDatabaseInstancesResponseBody) SetDatabaseInstances(v []*DescribeDatabaseInstancesResponseBodyDatabaseInstances) *DescribeDatabaseInstancesResponseBody {
	s.DatabaseInstances = v
	return s
}

func (s *DescribeDatabaseInstancesResponseBody) SetPageNumber(v int32) *DescribeDatabaseInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBody) SetPageSize(v int32) *DescribeDatabaseInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBody) SetRequestId(v string) *DescribeDatabaseInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBody) SetTotalCount(v int32) *DescribeDatabaseInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDatabaseInstancesResponseBodyDatabaseInstances struct {
	// The business status of the instance. Valid values:
	//
	// 	- normal
	//
	// 	- expired
	//
	// 	- overdue
	//
	// example:
	//
	// normal
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The billing method of the Simple Database Service instance. Set the value to PrePaid. This value indicates the subscription billing method.
	//
	// Default value: PrePaid.
	//
	// example:
	//
	// PrePaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 1
	Cpu *string `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The time when the instance was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-01T02:39:46Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The plan edition ID of the Simple Database Service instance. Valid values:
	//
	// 	- swas.db.c1m1s25: CNY 35/month.
	//
	// 	- swas.db.c1m2s80: CNY 100/month.
	//
	// 	- swas.db.c2m4s120: CNY 200/month.
	//
	// 	- swas.db.c2m8s240: CNY 300/month.
	//
	// example:
	//
	// swas.db.c1m1s25
	DatabaseInstanceEdition *string `json:"DatabaseInstanceEdition,omitempty" xml:"DatabaseInstanceEdition,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The name of the Simple Database Service instance.
	DatabaseInstanceName *string `json:"DatabaseInstanceName,omitempty" xml:"DatabaseInstanceName,omitempty"`
	// The status of the Simple Database Service instance. Valid values:
	//
	// 	- Pending: The instance is being created.
	//
	// 	- Restarting: The instance is being restarted.
	//
	// 	- Running: The instance is running.
	//
	// 	- Stopping: The instance is being stopped.
	//
	// 	- Stopped: The instance is stopped.
	//
	// 	- UPGRADING: The instance is being upgraded.
	//
	// 	- DISABLED: The instance is disabled.
	//
	// example:
	//
	// Running
	DatabaseInstanceStatus *string `json:"DatabaseInstanceStatus,omitempty" xml:"DatabaseInstanceStatus,omitempty"`
	// The database engine version of the instance. Valid values:
	//
	// 	- 5.7: MySQL 5.7.
	//
	// 	- 8.0: MySQL 8.0.
	//
	// example:
	//
	// 5.7
	DatabaseVersion *string `json:"DatabaseVersion,omitempty" xml:"DatabaseVersion,omitempty"`
	// The time when the instance expires. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// >  The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// example:
	//
	// 2022-10-01T16:00:00Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The memory size of the instance. Unit: GB.
	//
	// example:
	//
	// 1
	Memory *string `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The private endpoint.
	//
	// example:
	//
	// rm-bp1d39opj7906****.mysql.rds.aliyuncs.com
	PrivateConnection *string `json:"PrivateConnection,omitempty" xml:"PrivateConnection,omitempty"`
	// The public endpoint.
	//
	// >  This parameter is displayed only after you apply for a public endpoint for the instance and a public endpoint is assigned to the instance. You can call [AllocatePublicConnection](https://help.aliyun.com/document_detail/451413.html) to apply for a public endpoint for the instance.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com
	PublicConnection *string `json:"PublicConnection,omitempty" xml:"PublicConnection,omitempty"`
	// The region ID of the Simple Database Service instances.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The size of the enhanced SSD (ESSD). Unit: GB.
	//
	// example:
	//
	// 25
	Storage *int32 `json:"Storage,omitempty" xml:"Storage,omitempty"`
	// The name of the super administrator account of the Simple Database Service instance.
	//
	// example:
	//
	// administrator
	SuperAccountName *string `json:"SuperAccountName,omitempty" xml:"SuperAccountName,omitempty"`
}

func (s DescribeDatabaseInstancesResponseBodyDatabaseInstances) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstancesResponseBodyDatabaseInstances) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetBusinessStatus() *string {
	return s.BusinessStatus
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetChargeType() *string {
	return s.ChargeType
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetCpu() *string {
	return s.Cpu
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetCreationTime() *string {
	return s.CreationTime
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetDatabaseInstanceEdition() *string {
	return s.DatabaseInstanceEdition
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetDatabaseInstanceName() *string {
	return s.DatabaseInstanceName
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetDatabaseInstanceStatus() *string {
	return s.DatabaseInstanceStatus
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetDatabaseVersion() *string {
	return s.DatabaseVersion
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetExpiredTime() *string {
	return s.ExpiredTime
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetMemory() *string {
	return s.Memory
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetPrivateConnection() *string {
	return s.PrivateConnection
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetPublicConnection() *string {
	return s.PublicConnection
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetStorage() *int32 {
	return s.Storage
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) GetSuperAccountName() *string {
	return s.SuperAccountName
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetBusinessStatus(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetChargeType(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.ChargeType = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetCpu(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.Cpu = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetCreationTime(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.CreationTime = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetDatabaseInstanceEdition(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.DatabaseInstanceEdition = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetDatabaseInstanceId(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.DatabaseInstanceId = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetDatabaseInstanceName(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.DatabaseInstanceName = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetDatabaseInstanceStatus(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.DatabaseInstanceStatus = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetDatabaseVersion(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.DatabaseVersion = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetExpiredTime(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetMemory(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.Memory = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetPrivateConnection(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.PrivateConnection = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetPublicConnection(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.PublicConnection = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetRegionId(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.RegionId = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetStorage(v int32) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.Storage = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) SetSuperAccountName(v string) *DescribeDatabaseInstancesResponseBodyDatabaseInstances {
	s.SuperAccountName = &v
	return s
}

func (s *DescribeDatabaseInstancesResponseBodyDatabaseInstances) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDatabaseInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDatabaseInstancesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDatabaseInstancesResponseBody) *DescribeDatabaseInstancesResponse
	GetBody() *DescribeDatabaseInstancesResponseBody
}

type DescribeDatabaseInstancesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatabaseInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatabaseInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDatabaseInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDatabaseInstancesResponse) GetBody() *DescribeDatabaseInstancesResponseBody {
	return s.Body
}

func (s *DescribeDatabaseInstancesResponse) SetHeaders(v map[string]*string) *DescribeDatabaseInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatabaseInstancesResponse) SetStatusCode(v int32) *DescribeDatabaseInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatabaseInstancesResponse) SetBody(v *DescribeDatabaseInstancesResponseBody) *DescribeDatabaseInstancesResponse {
	s.Body = v
	return s
}

func (s *DescribeDatabaseInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseSlowLogRecordsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDatabaseInstanceId(v string) *DescribeDatabaseSlowLogRecordsRequest
	GetDatabaseInstanceId() *string
	SetEndTime(v string) *DescribeDatabaseSlowLogRecordsRequest
	GetEndTime() *string
	SetPageNumber(v int32) *DescribeDatabaseSlowLogRecordsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDatabaseSlowLogRecordsRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeDatabaseSlowLogRecordsRequest
	GetRegionId() *string
	SetStartTime(v string) *DescribeDatabaseSlowLogRecordsRequest
	GetStartTime() *string
}

type DescribeDatabaseSlowLogRecordsRequest struct {
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The end of the time range to query. The end time must be later than the start time. The interval between the start time and the end time must be less than 7 days.
	//
	// Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// > The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-08T04:04:44Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: 30 to 100.
	//
	// Maximum value: 100.
	//
	// Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query.
	//
	// Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// > The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-07T04:04:44Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDatabaseSlowLogRecordsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseSlowLogRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseSlowLogRecordsRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *DescribeDatabaseSlowLogRecordsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDatabaseSlowLogRecordsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDatabaseSlowLogRecordsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDatabaseSlowLogRecordsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDatabaseSlowLogRecordsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDatabaseSlowLogRecordsRequest) SetDatabaseInstanceId(v string) *DescribeDatabaseSlowLogRecordsRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsRequest) SetEndTime(v string) *DescribeDatabaseSlowLogRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsRequest) SetPageNumber(v int32) *DescribeDatabaseSlowLogRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsRequest) SetPageSize(v int32) *DescribeDatabaseSlowLogRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsRequest) SetRegionId(v string) *DescribeDatabaseSlowLogRecordsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsRequest) SetStartTime(v string) *DescribeDatabaseSlowLogRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseSlowLogRecordsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetEngine(v string) *DescribeDatabaseSlowLogRecordsResponseBody
	GetEngine() *string
	SetPageNumber(v int32) *DescribeDatabaseSlowLogRecordsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDatabaseSlowLogRecordsResponseBody
	GetPageSize() *int32
	SetPhysicalIORead(v int64) *DescribeDatabaseSlowLogRecordsResponseBody
	GetPhysicalIORead() *int64
	SetRequestId(v string) *DescribeDatabaseSlowLogRecordsResponseBody
	GetRequestId() *string
	SetSlowLogs(v []*DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) *DescribeDatabaseSlowLogRecordsResponseBody
	GetSlowLogs() []*DescribeDatabaseSlowLogRecordsResponseBodySlowLogs
	SetTotalCount(v int32) *DescribeDatabaseSlowLogRecordsResponseBody
	GetTotalCount() *int32
}

type DescribeDatabaseSlowLogRecordsResponseBody struct {
	// The database engine that the instance runs.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: 30 to 100.
	//
	// Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The number of logical reads.
	//
	// example:
	//
	// 200
	PhysicalIORead *int64 `json:"PhysicalIORead,omitempty" xml:"PhysicalIORead,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The slow query logs returned.
	SlowLogs []*DescribeDatabaseSlowLogRecordsResponseBodySlowLogs `json:"SlowLogs,omitempty" xml:"SlowLogs,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatabaseSlowLogRecordsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseSlowLogRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) GetEngine() *string {
	return s.Engine
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) GetPhysicalIORead() *int64 {
	return s.PhysicalIORead
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) GetSlowLogs() []*DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	return s.SlowLogs
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) SetEngine(v string) *DescribeDatabaseSlowLogRecordsResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) SetPageNumber(v int32) *DescribeDatabaseSlowLogRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) SetPageSize(v int32) *DescribeDatabaseSlowLogRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) SetPhysicalIORead(v int64) *DescribeDatabaseSlowLogRecordsResponseBody {
	s.PhysicalIORead = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) SetRequestId(v string) *DescribeDatabaseSlowLogRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) SetSlowLogs(v []*DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) *DescribeDatabaseSlowLogRecordsResponseBody {
	s.SlowLogs = v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) SetTotalCount(v int32) *DescribeDatabaseSlowLogRecordsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDatabaseSlowLogRecordsResponseBodySlowLogs struct {
	// The name of the database.
	//
	// example:
	//
	// testDB
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The time when the execution of the SQL statement started. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// >  The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// example:
	//
	// 2022-09-08T01:40:44Z
	ExecutionStartTime *string `json:"ExecutionStartTime,omitempty" xml:"ExecutionStartTime,omitempty"`
	// The name and IP address of the client that is connected to the database.
	//
	// example:
	//
	// xxx[xxx] @ [1xx.xxx.xxx.xx]
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The lock duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 0
	LockTimes *int64 `json:"LockTimes,omitempty" xml:"LockTimes,omitempty"`
	// The number of rows parsed by the SQL statement.
	//
	// example:
	//
	// 1
	ParseRowCounts *int64 `json:"ParseRowCounts,omitempty" xml:"ParseRowCounts,omitempty"`
	// The execution duration of the slow query. Unit: millisecond.
	//
	// example:
	//
	// 2001
	QueryTimeMS *int64 `json:"QueryTimeMS,omitempty" xml:"QueryTimeMS,omitempty"`
	// The execution duration of the slow query. Unit: seconds.
	//
	// example:
	//
	// 2
	QueryTimes *int64 `json:"QueryTimes,omitempty" xml:"QueryTimes,omitempty"`
	// The number of rows returned by the SQL statement.
	//
	// example:
	//
	// 1
	ReturnRowCounts *int64 `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty"`
	// The details of the SQL statement.
	//
	// example:
	//
	// select sleep(2)
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
}

func (s DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetDBName() *string {
	return s.DBName
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetExecutionStartTime() *string {
	return s.ExecutionStartTime
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetHostAddress() *string {
	return s.HostAddress
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetLockTimes() *int64 {
	return s.LockTimes
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetParseRowCounts() *int64 {
	return s.ParseRowCounts
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetQueryTimeMS() *int64 {
	return s.QueryTimeMS
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetQueryTimes() *int64 {
	return s.QueryTimes
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetReturnRowCounts() *int64 {
	return s.ReturnRowCounts
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) GetSQLText() *string {
	return s.SQLText
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetDBName(v string) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.DBName = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetExecutionStartTime(v string) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.ExecutionStartTime = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetHostAddress(v string) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.HostAddress = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetLockTimes(v int64) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.LockTimes = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetParseRowCounts(v int64) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.ParseRowCounts = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetQueryTimeMS(v int64) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.QueryTimeMS = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetQueryTimes(v int64) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.QueryTimes = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetReturnRowCounts(v int64) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) SetSQLText(v string) *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs {
	s.SQLText = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponseBodySlowLogs) Validate() error {
	return dara.Validate(s)
}

type iDescribeDatabaseSlowLogRecordsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDatabaseSlowLogRecordsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDatabaseSlowLogRecordsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDatabaseSlowLogRecordsResponseBody) *DescribeDatabaseSlowLogRecordsResponse
	GetBody() *DescribeDatabaseSlowLogRecordsResponseBody
}

type DescribeDatabaseSlowLogRecordsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatabaseSlowLogRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatabaseSlowLogRecordsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDatabaseSlowLogRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabaseSlowLogRecordsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDatabaseSlowLogRecordsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDatabaseSlowLogRecordsResponse) GetBody() *DescribeDatabaseSlowLogRecordsResponseBody {
	return s.Body
}

func (s *DescribeDatabaseSlowLogRecordsResponse) SetHeaders(v map[string]*string) *DescribeDatabaseSlowLogRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponse) SetStatusCode(v int32) *DescribeDatabaseSlowLogRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponse) SetBody(v *DescribeDatabaseSlowLogRecordsResponseBody) *DescribeDatabaseSlowLogRecordsResponse {
	s.Body = v
	return s
}

func (s *DescribeDatabaseSlowLogRecordsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplateApplyResultsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeFirewallTemplateApplyResultsRequest
	GetClientToken() *string
	SetFirewallTemplateId(v string) *DescribeFirewallTemplateApplyResultsRequest
	GetFirewallTemplateId() *string
	SetPageNumber(v int32) *DescribeFirewallTemplateApplyResultsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeFirewallTemplateApplyResultsRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeFirewallTemplateApplyResultsRequest
	GetRegionId() *string
	SetTaskId(v []*string) *DescribeFirewallTemplateApplyResultsRequest
	GetTaskId() []*string
}

type DescribeFirewallTemplateApplyResultsRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the firewall template.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 20.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the execution to apply the template.
	TaskId []*string `json:"TaskId,omitempty" xml:"TaskId,omitempty" type:"Repeated"`
}

func (s DescribeFirewallTemplateApplyResultsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateApplyResultsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateApplyResultsRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeFirewallTemplateApplyResultsRequest) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *DescribeFirewallTemplateApplyResultsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeFirewallTemplateApplyResultsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeFirewallTemplateApplyResultsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeFirewallTemplateApplyResultsRequest) GetTaskId() []*string {
	return s.TaskId
}

func (s *DescribeFirewallTemplateApplyResultsRequest) SetClientToken(v string) *DescribeFirewallTemplateApplyResultsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsRequest) SetFirewallTemplateId(v string) *DescribeFirewallTemplateApplyResultsRequest {
	s.FirewallTemplateId = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsRequest) SetPageNumber(v int32) *DescribeFirewallTemplateApplyResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsRequest) SetPageSize(v int32) *DescribeFirewallTemplateApplyResultsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsRequest) SetRegionId(v string) *DescribeFirewallTemplateApplyResultsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsRequest) SetTaskId(v []*string) *DescribeFirewallTemplateApplyResultsRequest {
	s.TaskId = v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplateApplyResultsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetPageNumber(v string) *DescribeFirewallTemplateApplyResultsResponseBody
	GetPageNumber() *string
	SetPageSize(v string) *DescribeFirewallTemplateApplyResultsResponseBody
	GetPageSize() *string
	SetRequestId(v string) *DescribeFirewallTemplateApplyResultsResponseBody
	GetRequestId() *string
	SetTotalCount(v string) *DescribeFirewallTemplateApplyResultsResponseBody
	GetTotalCount() *string
	SetData(v []*DescribeFirewallTemplateApplyResultsResponseBodyData) *DescribeFirewallTemplateApplyResultsResponseBody
	GetData() []*DescribeFirewallTemplateApplyResultsResponseBodyData
}

type DescribeFirewallTemplateApplyResultsResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 20.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The returned results.
	Data []*DescribeFirewallTemplateApplyResultsResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeFirewallTemplateApplyResultsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateApplyResultsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) GetPageNumber() *string {
	return s.PageNumber
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) GetPageSize() *string {
	return s.PageSize
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) GetTotalCount() *string {
	return s.TotalCount
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) GetData() []*DescribeFirewallTemplateApplyResultsResponseBodyData {
	return s.Data
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) SetPageNumber(v string) *DescribeFirewallTemplateApplyResultsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) SetPageSize(v string) *DescribeFirewallTemplateApplyResultsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) SetRequestId(v string) *DescribeFirewallTemplateApplyResultsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) SetTotalCount(v string) *DescribeFirewallTemplateApplyResultsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) SetData(v []*DescribeFirewallTemplateApplyResultsResponseBodyData) *DescribeFirewallTemplateApplyResultsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeFirewallTemplateApplyResultsResponseBodyData struct {
	// The time when the firewall template was applied to the simple application servers.
	//
	// example:
	//
	// Tue May 14 11:53:07 CST 2024
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The total number of simple application servers to which the firewall template fails to apply.
	//
	// example:
	//
	// 0
	FailedCount *string `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// The ID of the firewall template.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The result of applying the firewall template to the simple application servers.
	InstanceApplyResults []*DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults `json:"InstanceApplyResults,omitempty" xml:"InstanceApplyResults,omitempty" type:"Repeated"`
	// The status of applying the template to all simple application servers. Valid values:
	//
	// 	- Running: The firewall template is being applied to simple application servers.
	//
	// 	- Failed: The firewall template is applied to none of simple application servers.
	//
	// 	- Success: The firewall template is applied to all simple application servers.
	//
	// 	- PartFailed: The firewall template fails to be applied to some simple application servers.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the execution to apply the template.
	//
	// example:
	//
	// aft-ikgt0bynitvs3****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeFirewallTemplateApplyResultsResponseBodyData) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateApplyResultsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) GetFailedCount() *string {
	return s.FailedCount
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) GetInstanceApplyResults() []*DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults {
	return s.InstanceApplyResults
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) GetStatus() *string {
	return s.Status
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) GetTaskId() *string {
	return s.TaskId
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) GetTotalCount() *string {
	return s.TotalCount
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) SetCreateTime(v string) *DescribeFirewallTemplateApplyResultsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) SetFailedCount(v string) *DescribeFirewallTemplateApplyResultsResponseBodyData {
	s.FailedCount = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) SetFirewallTemplateId(v string) *DescribeFirewallTemplateApplyResultsResponseBodyData {
	s.FirewallTemplateId = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) SetInstanceApplyResults(v []*DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) *DescribeFirewallTemplateApplyResultsResponseBodyData {
	s.InstanceApplyResults = v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) SetStatus(v string) *DescribeFirewallTemplateApplyResultsResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) SetTaskId(v string) *DescribeFirewallTemplateApplyResultsResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) SetTotalCount(v string) *DescribeFirewallTemplateApplyResultsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyData) Validate() error {
	return dara.Validate(s)
}

type DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults struct {
	// The ID of the simple application server.
	//
	// example:
	//
	// 33774babccc84003a2b1ad47e8001233
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The status of applying the firewall template to the simple application servers. Valid values:
	//
	// 	- Running: The firewall template is being applied to the simple application servers.
	//
	// 	- Failed: The firewall template is applied to none of the simple application servers.
	//
	// 	- Success: The firewall template is applied to all the simple application servers.
	//
	// 	- PartFailed: The firewall template fails to be applied to some simple application servers.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) GetStatus() *string {
	return s.Status
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) SetInstanceId(v string) *DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults {
	s.InstanceId = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) SetStatus(v string) *DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults {
	s.Status = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponseBodyDataInstanceApplyResults) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplateApplyResultsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeFirewallTemplateApplyResultsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeFirewallTemplateApplyResultsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeFirewallTemplateApplyResultsResponseBody) *DescribeFirewallTemplateApplyResultsResponse
	GetBody() *DescribeFirewallTemplateApplyResultsResponseBody
}

type DescribeFirewallTemplateApplyResultsResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFirewallTemplateApplyResultsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFirewallTemplateApplyResultsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateApplyResultsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateApplyResultsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeFirewallTemplateApplyResultsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeFirewallTemplateApplyResultsResponse) GetBody() *DescribeFirewallTemplateApplyResultsResponseBody {
	return s.Body
}

func (s *DescribeFirewallTemplateApplyResultsResponse) SetHeaders(v map[string]*string) *DescribeFirewallTemplateApplyResultsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponse) SetStatusCode(v int32) *DescribeFirewallTemplateApplyResultsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponse) SetBody(v *DescribeFirewallTemplateApplyResultsResponseBody) *DescribeFirewallTemplateApplyResultsResponse {
	s.Body = v
	return s
}

func (s *DescribeFirewallTemplateApplyResultsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplateRulesApplyResultRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeFirewallTemplateRulesApplyResultRequest
	GetClientToken() *string
	SetFirewallTemplateId(v string) *DescribeFirewallTemplateRulesApplyResultRequest
	GetFirewallTemplateId() *string
	SetInstanceId(v string) *DescribeFirewallTemplateRulesApplyResultRequest
	GetInstanceId() *string
	SetRegionId(v string) *DescribeFirewallTemplateRulesApplyResultRequest
	GetRegionId() *string
	SetTaskId(v string) *DescribeFirewallTemplateRulesApplyResultRequest
	GetTaskId() *string
}

type DescribeFirewallTemplateRulesApplyResultRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the firewall template.
	//
	// This parameter is required.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the execution to apply the template rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// aft-ikgt0bynitvs3****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeFirewallTemplateRulesApplyResultRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateRulesApplyResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) GetTaskId() *string {
	return s.TaskId
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) SetClientToken(v string) *DescribeFirewallTemplateRulesApplyResultRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) SetFirewallTemplateId(v string) *DescribeFirewallTemplateRulesApplyResultRequest {
	s.FirewallTemplateId = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) SetInstanceId(v string) *DescribeFirewallTemplateRulesApplyResultRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) SetRegionId(v string) *DescribeFirewallTemplateRulesApplyResultRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) SetTaskId(v string) *DescribeFirewallTemplateRulesApplyResultRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplateRulesApplyResultResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeFirewallTemplateRulesApplyResultResponseBody
	GetRequestId() *string
	SetData(v []*DescribeFirewallTemplateRulesApplyResultResponseBodyData) *DescribeFirewallTemplateRulesApplyResultResponseBody
	GetData() []*DescribeFirewallTemplateRulesApplyResultResponseBodyData
}

type DescribeFirewallTemplateRulesApplyResultResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned results.
	Data []*DescribeFirewallTemplateRulesApplyResultResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeFirewallTemplateRulesApplyResultResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateRulesApplyResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBody) GetData() []*DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	return s.Data
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBody) SetRequestId(v string) *DescribeFirewallTemplateRulesApplyResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBody) SetData(v []*DescribeFirewallTemplateRulesApplyResultResponseBodyData) *DescribeFirewallTemplateRulesApplyResultResponseBody {
	s.Data = v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeFirewallTemplateRulesApplyResultResponseBodyData struct {
	// The error codes when the firewall template rule fails to be applied.
	//
	// example:
	//
	// 500
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message that is displayed when the firewall template rule fails to be applied.
	//
	// example:
	//
	// An error occurred while processing your request.
	ErrorInfo *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	// The port range. Valid values: 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 1024 to 1055.
	//
	// >  If you set RuleProtocol to ICMP, you must set Port to -1/-1.
	//
	// example:
	//
	// 8080
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// test
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol that the rule supports. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The source address to which you want to grant access permissions. CIDR blocks and IPv4 addresses are supported.
	//
	// example:
	//
	// 119.145.XX.XX
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	// The status of applying the firewall template rule to the simple application servers.
	//
	// 	- Pending: The template rule does not start to be applied to the simple application servers.
	//
	// 	- Applying: The template rule is being applied to the simple application servers.
	//
	// 	- Success: The template rule is successfully applied to the simple application servers.
	//
	// 	- PartFailed: The template rule fails to be applied to some simple application servers.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFirewallTemplateRulesApplyResultResponseBodyData) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateRulesApplyResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) GetErrorCode() *string {
	return s.ErrorCode
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) GetErrorInfo() *string {
	return s.ErrorInfo
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) GetPort() *string {
	return s.Port
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) GetRemark() *string {
	return s.Remark
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) GetSuccess() *bool {
	return s.Success
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) SetErrorCode(v string) *DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) SetErrorInfo(v string) *DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) SetPort(v string) *DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	s.Port = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) SetRemark(v string) *DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	s.Remark = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) SetRuleProtocol(v string) *DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	s.RuleProtocol = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) SetSourceCidrIp(v string) *DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) SetSuccess(v bool) *DescribeFirewallTemplateRulesApplyResultResponseBodyData {
	s.Success = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponseBodyData) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplateRulesApplyResultResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeFirewallTemplateRulesApplyResultResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeFirewallTemplateRulesApplyResultResponse
	GetStatusCode() *int32
	SetBody(v *DescribeFirewallTemplateRulesApplyResultResponseBody) *DescribeFirewallTemplateRulesApplyResultResponse
	GetBody() *DescribeFirewallTemplateRulesApplyResultResponseBody
}

type DescribeFirewallTemplateRulesApplyResultResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFirewallTemplateRulesApplyResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFirewallTemplateRulesApplyResultResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplateRulesApplyResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplateRulesApplyResultResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeFirewallTemplateRulesApplyResultResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeFirewallTemplateRulesApplyResultResponse) GetBody() *DescribeFirewallTemplateRulesApplyResultResponseBody {
	return s.Body
}

func (s *DescribeFirewallTemplateRulesApplyResultResponse) SetHeaders(v map[string]*string) *DescribeFirewallTemplateRulesApplyResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponse) SetStatusCode(v int32) *DescribeFirewallTemplateRulesApplyResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponse) SetBody(v *DescribeFirewallTemplateRulesApplyResultResponseBody) *DescribeFirewallTemplateRulesApplyResultResponse {
	s.Body = v
	return s
}

func (s *DescribeFirewallTemplateRulesApplyResultResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplatesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallTemplateId(v []*string) *DescribeFirewallTemplatesRequest
	GetFirewallTemplateId() []*string
	SetName(v string) *DescribeFirewallTemplatesRequest
	GetName() *string
	SetPageNumber(v int32) *DescribeFirewallTemplatesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeFirewallTemplatesRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeFirewallTemplatesRequest
	GetRegionId() *string
}

type DescribeFirewallTemplatesRequest struct {
	// The IDs of the firewall templates.
	FirewallTemplateId []*string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty" type:"Repeated"`
	// The name of the firewall template.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 20.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFirewallTemplatesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplatesRequest) GetFirewallTemplateId() []*string {
	return s.FirewallTemplateId
}

func (s *DescribeFirewallTemplatesRequest) GetName() *string {
	return s.Name
}

func (s *DescribeFirewallTemplatesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeFirewallTemplatesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeFirewallTemplatesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeFirewallTemplatesRequest) SetFirewallTemplateId(v []*string) *DescribeFirewallTemplatesRequest {
	s.FirewallTemplateId = v
	return s
}

func (s *DescribeFirewallTemplatesRequest) SetName(v string) *DescribeFirewallTemplatesRequest {
	s.Name = &v
	return s
}

func (s *DescribeFirewallTemplatesRequest) SetPageNumber(v int32) *DescribeFirewallTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFirewallTemplatesRequest) SetPageSize(v int32) *DescribeFirewallTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFirewallTemplatesRequest) SetRegionId(v string) *DescribeFirewallTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFirewallTemplatesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplatesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallTemplates(v []*DescribeFirewallTemplatesResponseBodyFirewallTemplates) *DescribeFirewallTemplatesResponseBody
	GetFirewallTemplates() []*DescribeFirewallTemplatesResponseBodyFirewallTemplates
	SetPageNumber(v int32) *DescribeFirewallTemplatesResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeFirewallTemplatesResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeFirewallTemplatesResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeFirewallTemplatesResponseBody
	GetTotalCount() *int32
}

type DescribeFirewallTemplatesResponseBody struct {
	// The information about the queried firewall templates.
	FirewallTemplates []*DescribeFirewallTemplatesResponseBodyFirewallTemplates `json:"FirewallTemplates,omitempty" xml:"FirewallTemplates,omitempty" type:"Repeated"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 20.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeFirewallTemplatesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplatesResponseBody) GetFirewallTemplates() []*DescribeFirewallTemplatesResponseBodyFirewallTemplates {
	return s.FirewallTemplates
}

func (s *DescribeFirewallTemplatesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeFirewallTemplatesResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeFirewallTemplatesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeFirewallTemplatesResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeFirewallTemplatesResponseBody) SetFirewallTemplates(v []*DescribeFirewallTemplatesResponseBodyFirewallTemplates) *DescribeFirewallTemplatesResponseBody {
	s.FirewallTemplates = v
	return s
}

func (s *DescribeFirewallTemplatesResponseBody) SetPageNumber(v int32) *DescribeFirewallTemplatesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBody) SetPageSize(v int32) *DescribeFirewallTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBody) SetRequestId(v string) *DescribeFirewallTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBody) SetTotalCount(v int32) *DescribeFirewallTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeFirewallTemplatesResponseBodyFirewallTemplates struct {
	// The time when the firewall template was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// >  The time displayed in the Simple Application Server console is in the format of UTC+8.
	//
	// example:
	//
	// 2024-04-29T02:01:38Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the firewall template was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-04-10T02:10:14Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the firewall template.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the firewall template.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The details of the firewall template rules.
	FirewallTemplateRules []*DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules `json:"FirewallTemplateRules,omitempty" xml:"FirewallTemplateRules,omitempty" type:"Repeated"`
	// The name of the firewall template.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeFirewallTemplatesResponseBodyFirewallTemplates) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplatesResponseBodyFirewallTemplates) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) GetCreationTime() *string {
	return s.CreationTime
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) GetDescription() *string {
	return s.Description
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) GetFirewallTemplateRules() []*DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules {
	return s.FirewallTemplateRules
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) GetName() *string {
	return s.Name
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) SetCreateTime(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplates {
	s.CreateTime = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) SetCreationTime(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplates {
	s.CreationTime = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) SetDescription(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplates {
	s.Description = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) SetFirewallTemplateId(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplates {
	s.FirewallTemplateId = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) SetFirewallTemplateRules(v []*DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) *DescribeFirewallTemplatesResponseBodyFirewallTemplates {
	s.FirewallTemplateRules = v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) SetName(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplates {
	s.Name = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplates) Validate() error {
	return dara.Validate(s)
}

type DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules struct {
	// The ID of the firewall template rule.
	//
	// example:
	//
	// eeea34d9867b4d55a4ff8d5fcfbd****
	FirewallTemplateRuleId *string `json:"FirewallTemplateRuleId,omitempty" xml:"FirewallTemplateRuleId,omitempty"`
	// The port range. Valid values: 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 1024 to 1055.
	//
	// >  If you set RuleProtocol to ICMP, you must set Port to -1/-1.
	//
	// example:
	//
	// 8080
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The remarks of the firewall template rule.
	//
	// example:
	//
	// test
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol that the rule supports. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The source address to which you want to grant access permissions. CIDR blocks and IPv4 addresses are supported.
	//
	// example:
	//
	// 119.145.XX.XX
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) GetFirewallTemplateRuleId() *string {
	return s.FirewallTemplateRuleId
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) GetPort() *string {
	return s.Port
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) GetRemark() *string {
	return s.Remark
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) SetFirewallTemplateRuleId(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules {
	s.FirewallTemplateRuleId = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) SetPort(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules {
	s.Port = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) SetRemark(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules {
	s.Remark = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) SetRuleProtocol(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules {
	s.RuleProtocol = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) SetSourceCidrIp(v string) *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeFirewallTemplatesResponseBodyFirewallTemplatesFirewallTemplateRules) Validate() error {
	return dara.Validate(s)
}

type iDescribeFirewallTemplatesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeFirewallTemplatesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeFirewallTemplatesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeFirewallTemplatesResponseBody) *DescribeFirewallTemplatesResponse
	GetBody() *DescribeFirewallTemplatesResponseBody
}

type DescribeFirewallTemplatesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFirewallTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFirewallTemplatesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeFirewallTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeFirewallTemplatesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeFirewallTemplatesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeFirewallTemplatesResponse) GetBody() *DescribeFirewallTemplatesResponseBody {
	return s.Body
}

func (s *DescribeFirewallTemplatesResponse) SetHeaders(v map[string]*string) *DescribeFirewallTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribeFirewallTemplatesResponse) SetStatusCode(v int32) *DescribeFirewallTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFirewallTemplatesResponse) SetBody(v *DescribeFirewallTemplatesResponseBody) *DescribeFirewallTemplatesResponse {
	s.Body = v
	return s
}

func (s *DescribeFirewallTemplatesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstanceKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeInstanceKeyPairRequest
	GetClientToken() *string
	SetInstanceId(v string) *DescribeInstanceKeyPairRequest
	GetInstanceId() *string
	SetRegionId(v string) *DescribeInstanceKeyPairRequest
	GetRegionId() *string
}

type DescribeInstanceKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInstanceKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstanceKeyPairRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeInstanceKeyPairRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeInstanceKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeInstanceKeyPairRequest) SetClientToken(v string) *DescribeInstanceKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeInstanceKeyPairRequest) SetInstanceId(v string) *DescribeInstanceKeyPairRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceKeyPairRequest) SetRegionId(v string) *DescribeInstanceKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstanceKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFingerprint(v string) *DescribeInstanceKeyPairResponseBody
	GetFingerprint() *string
	SetKeyPairName(v string) *DescribeInstanceKeyPairResponseBody
	GetKeyPairName() *string
	SetRequestId(v string) *DescribeInstanceKeyPairResponseBody
	GetRequestId() *string
}

type DescribeInstanceKeyPairResponseBody struct {
	// The fingerprint of the key pair.
	//
	// example:
	//
	// 4f:70:62:e9:0c:72:f7:ee:74:ce:e3:bf:e0:82:**:**
	Fingerprint *string `json:"Fingerprint,omitempty" xml:"Fingerprint,omitempty"`
	// The name of the key pair.
	//
	// example:
	//
	// KeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstanceKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeyPairResponseBody) GetFingerprint() *string {
	return s.Fingerprint
}

func (s *DescribeInstanceKeyPairResponseBody) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *DescribeInstanceKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeInstanceKeyPairResponseBody) SetFingerprint(v string) *DescribeInstanceKeyPairResponseBody {
	s.Fingerprint = &v
	return s
}

func (s *DescribeInstanceKeyPairResponseBody) SetKeyPairName(v string) *DescribeInstanceKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *DescribeInstanceKeyPairResponseBody) SetRequestId(v string) *DescribeInstanceKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstanceKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeInstanceKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeInstanceKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *DescribeInstanceKeyPairResponseBody) *DescribeInstanceKeyPairResponse
	GetBody() *DescribeInstanceKeyPairResponseBody
}

type DescribeInstanceKeyPairResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstanceKeyPairResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeInstanceKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeInstanceKeyPairResponse) GetBody() *DescribeInstanceKeyPairResponseBody {
	return s.Body
}

func (s *DescribeInstanceKeyPairResponse) SetHeaders(v map[string]*string) *DescribeInstanceKeyPairResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceKeyPairResponse) SetStatusCode(v int32) *DescribeInstanceKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceKeyPairResponse) SetBody(v *DescribeInstanceKeyPairResponseBody) *DescribeInstanceKeyPairResponse {
	s.Body = v
	return s
}

func (s *DescribeInstanceKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstancePasswordsSettingRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeInstancePasswordsSettingRequest
	GetClientToken() *string
	SetInstanceId(v string) *DescribeInstancePasswordsSettingRequest
	GetInstanceId() *string
	SetRegionId(v string) *DescribeInstancePasswordsSettingRequest
	GetRegionId() *string
}

type DescribeInstancePasswordsSettingRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/2361076.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInstancePasswordsSettingRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstancePasswordsSettingRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancePasswordsSettingRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeInstancePasswordsSettingRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeInstancePasswordsSettingRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeInstancePasswordsSettingRequest) SetClientToken(v string) *DescribeInstancePasswordsSettingRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeInstancePasswordsSettingRequest) SetInstanceId(v string) *DescribeInstancePasswordsSettingRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancePasswordsSettingRequest) SetRegionId(v string) *DescribeInstancePasswordsSettingRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancePasswordsSettingRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstancePasswordsSettingResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInstancePasswordSetting(v bool) *DescribeInstancePasswordsSettingResponseBody
	GetInstancePasswordSetting() *bool
	SetRequestId(v string) *DescribeInstancePasswordsSettingResponseBody
	GetRequestId() *string
	SetVncPasswordSetting(v bool) *DescribeInstancePasswordsSettingResponseBody
	GetVncPasswordSetting() *bool
}

type DescribeInstancePasswordsSettingResponseBody struct {
	// Indicates whether a logon password is set for the simple application server.
	//
	// example:
	//
	// true
	InstancePasswordSetting *bool `json:"InstancePasswordSetting,omitempty" xml:"InstancePasswordSetting,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether a VNC connection password is set for the simple application server.
	//
	// example:
	//
	// true
	VncPasswordSetting *bool `json:"VncPasswordSetting,omitempty" xml:"VncPasswordSetting,omitempty"`
}

func (s DescribeInstancePasswordsSettingResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstancePasswordsSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancePasswordsSettingResponseBody) GetInstancePasswordSetting() *bool {
	return s.InstancePasswordSetting
}

func (s *DescribeInstancePasswordsSettingResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeInstancePasswordsSettingResponseBody) GetVncPasswordSetting() *bool {
	return s.VncPasswordSetting
}

func (s *DescribeInstancePasswordsSettingResponseBody) SetInstancePasswordSetting(v bool) *DescribeInstancePasswordsSettingResponseBody {
	s.InstancePasswordSetting = &v
	return s
}

func (s *DescribeInstancePasswordsSettingResponseBody) SetRequestId(v string) *DescribeInstancePasswordsSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancePasswordsSettingResponseBody) SetVncPasswordSetting(v bool) *DescribeInstancePasswordsSettingResponseBody {
	s.VncPasswordSetting = &v
	return s
}

func (s *DescribeInstancePasswordsSettingResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstancePasswordsSettingResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeInstancePasswordsSettingResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeInstancePasswordsSettingResponse
	GetStatusCode() *int32
	SetBody(v *DescribeInstancePasswordsSettingResponseBody) *DescribeInstancePasswordsSettingResponse
	GetBody() *DescribeInstancePasswordsSettingResponseBody
}

type DescribeInstancePasswordsSettingResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstancePasswordsSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstancePasswordsSettingResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstancePasswordsSettingResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancePasswordsSettingResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeInstancePasswordsSettingResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeInstancePasswordsSettingResponse) GetBody() *DescribeInstancePasswordsSettingResponseBody {
	return s.Body
}

func (s *DescribeInstancePasswordsSettingResponse) SetHeaders(v map[string]*string) *DescribeInstancePasswordsSettingResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancePasswordsSettingResponse) SetStatusCode(v int32) *DescribeInstancePasswordsSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancePasswordsSettingResponse) SetBody(v *DescribeInstancePasswordsSettingResponseBody) *DescribeInstancePasswordsSettingResponse {
	s.Body = v
	return s
}

func (s *DescribeInstancePasswordsSettingResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstanceVncUrlRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeInstanceVncUrlRequest
	GetClientToken() *string
	SetInstanceId(v string) *DescribeInstanceVncUrlRequest
	GetInstanceId() *string
	SetRegionId(v string) *DescribeInstanceVncUrlRequest
	GetRegionId() *string
}

type DescribeInstanceVncUrlRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInstanceVncUrlRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstanceVncUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeInstanceVncUrlRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeInstanceVncUrlRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeInstanceVncUrlRequest) SetClientToken(v string) *DescribeInstanceVncUrlRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetInstanceId(v string) *DescribeInstanceVncUrlRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetRegionId(v string) *DescribeInstanceVncUrlRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstanceVncUrlResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeInstanceVncUrlResponseBody
	GetRequestId() *string
	SetVncUrl(v string) *DescribeInstanceVncUrlResponseBody
	GetVncUrl() *string
}

type DescribeInstanceVncUrlResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The VNC connection address of the server.
	//
	// example:
	//
	// wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3Dwz3L8wEMO6KMt7%252FXInEMtKVubBB%252F7rv055kOm8eUOD%252*****YlmsKjOfz6
	VncUrl *string `json:"VncUrl,omitempty" xml:"VncUrl,omitempty"`
}

func (s DescribeInstanceVncUrlResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstanceVncUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeInstanceVncUrlResponseBody) GetVncUrl() *string {
	return s.VncUrl
}

func (s *DescribeInstanceVncUrlResponseBody) SetRequestId(v string) *DescribeInstanceVncUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceVncUrlResponseBody) SetVncUrl(v string) *DescribeInstanceVncUrlResponseBody {
	s.VncUrl = &v
	return s
}

func (s *DescribeInstanceVncUrlResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeInstanceVncUrlResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeInstanceVncUrlResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeInstanceVncUrlResponse
	GetStatusCode() *int32
	SetBody(v *DescribeInstanceVncUrlResponseBody) *DescribeInstanceVncUrlResponse
	GetBody() *DescribeInstanceVncUrlResponseBody
}

type DescribeInstanceVncUrlResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceVncUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceVncUrlResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeInstanceVncUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeInstanceVncUrlResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeInstanceVncUrlResponse) GetBody() *DescribeInstanceVncUrlResponseBody {
	return s.Body
}

func (s *DescribeInstanceVncUrlResponse) SetHeaders(v map[string]*string) *DescribeInstanceVncUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetStatusCode(v int32) *DescribeInstanceVncUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetBody(v *DescribeInstanceVncUrlResponseBody) *DescribeInstanceVncUrlResponse {
	s.Body = v
	return s
}

func (s *DescribeInstanceVncUrlResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeInvocationResultRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceId(v string) *DescribeInvocationResultRequest
	GetInstanceId() *string
	SetInvokeId(v string) *DescribeInvocationResultRequest
	GetInvokeId() *string
	SetRegionId(v string) *DescribeInvocationResultRequest
	GetRegionId() *string
}

type DescribeInvocationResultRequest struct {
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The execution ID. You can call the [DescribeInvocations](https://help.aliyun.com/document_detail/439368.html) operation to query execution IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// t-bj02prjhw1n****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The region ID of the simple application server. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/25609.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInvocationResultRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeInvocationResultRequest) GetInvokeId() *string {
	return s.InvokeId
}

func (s *DescribeInvocationResultRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeInvocationResultRequest) SetInstanceId(v string) *DescribeInvocationResultRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationResultRequest) SetInvokeId(v string) *DescribeInvocationResultRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationResultRequest) SetRegionId(v string) *DescribeInvocationResultRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInvocationResultRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeInvocationResultResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInvocationResult(v *DescribeInvocationResultResponseBodyInvocationResult) *DescribeInvocationResultResponseBody
	GetInvocationResult() *DescribeInvocationResultResponseBodyInvocationResult
	SetRequestId(v string) *DescribeInvocationResultResponseBody
	GetRequestId() *string
}

type DescribeInvocationResultResponseBody struct {
	// The execution results.
	InvocationResult *DescribeInvocationResultResponseBodyInvocationResult `json:"InvocationResult,omitempty" xml:"InvocationResult,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInvocationResultResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultResponseBody) GetInvocationResult() *DescribeInvocationResultResponseBodyInvocationResult {
	return s.InvocationResult
}

func (s *DescribeInvocationResultResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeInvocationResultResponseBody) SetInvocationResult(v *DescribeInvocationResultResponseBodyInvocationResult) *DescribeInvocationResultResponseBody {
	s.InvocationResult = v
	return s
}

func (s *DescribeInvocationResultResponseBody) SetRequestId(v string) *DescribeInvocationResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInvocationResultResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeInvocationResultResponseBodyInvocationResult struct {
	// The error code that is returned if the command failed to be sent or executed.
	//
	// 	- If this parameter is empty, the command is executed normally.
	//
	// 	- InstanceNotExists: The specified server does not exist or is released.
	//
	// 	- InstanceReleased: The server was released while the command was being executed on the server.
	//
	// 	- InstanceNotRunning: The server is not in the Running state while the command is being executed.
	//
	// 	- CommandNotApplicable: The command is not applicable to the specified server.
	//
	// 	- AccountNotExists: The specified account does not exist.
	//
	// 	- DirectoryNotExists: The specified directory does not exist.
	//
	// 	- BadCronExpression: The specified cron expression for the execution schedule is invalid.
	//
	// 	- ClientNotRunning: The Cloud Assistant client is not running.
	//
	// 	- ClientNotResponse: The Cloud Assistant client does not respond.
	//
	// 	- ClientIsUpgrading: The Cloud Assistant client is being upgraded.
	//
	// 	- ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
	//
	// 	- DeliveryTimeout: Command sending times out.
	//
	// 	- ExecutionTimeout: The execution times out.
	//
	// 	- ExecutionException: An exception occurs while the command is being executed.
	//
	// 	- ExecutionInterrupted: The execution is interrupted.
	//
	// 	- ExitCodeNonzero: The execution is complete, but the exit code is not 0.
	//
	// example:
	//
	// InstanceNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned when the command is not successfully sent or executed. Valid values:
	//
	// 	- If this parameter is empty, the command is executed normally.
	//
	// 	- the specified instance does not exists: The specified server does not exist or is released.
	//
	// 	- the instance has released when create task: The server was released while the command was being executed on the server.
	//
	// 	- the instance is not running when create task: The server is not in the Running state while the command is being executed.
	//
	// 	- the command is not applicable: The command is not applicable to the specified server.
	//
	// 	- the specified account does not exists: The specified account does not exist.
	//
	// 	- the specified directory does not exists: The specified directory does not exist.
	//
	// 	- the cron job expression is invalid: The specified cron expression is invalid.
	//
	// 	- the aliyun service is not running on the instance: The Cloud Assistance client is not running.
	//
	// 	- the aliyun service in the instance does not response: The Cloud Assistant client does not respond to your request.
	//
	// 	- the aliyun service in the instance is upgrading now: The Cloud Assistant client is being upgraded.
	//
	// 	- the aliyun service in the instance need upgrade: The Cloud Assistant client needs to be upgraded.
	//
	// 	- the command delivery has been timeout: Command sending times out.
	//
	// 	- the command execution has been timeout: The execution times out.
	//
	// 	- the command execution got an exception: An exception occurs while the command is being executed.
	//
	// 	- the command execution has been interrupted: The execution is interrupted.
	//
	// 	- the command execution exit code is not zero: The execution is complete, and the exit code is not 0.
	//
	// example:
	//
	// the specified instance does not exists
	ErrorInfo *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	// The exit code of the command.
	//
	// 	- For Linux instances, the exit code is the exit code of the shell command.
	//
	// 	- For Windows instances, the exit code is the exit code of the batch or PowerShell command.
	//
	// example:
	//
	// 0
	ExitCode *int64 `json:"ExitCode,omitempty" xml:"ExitCode,omitempty"`
	// The time when the execution ended.
	//
	// example:
	//
	// 2022-07-11T06:37:17Z
	FinishedTime *string `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The status of the execution progress. Valid values:
	//
	// 	- Pending: The command is being verified or sent.
	//
	// 	- Invalid: The specified command type or parameter is invalid.
	//
	// 	- Aborted: The command fails to be sent to the server. To send a command to a server, make sure that the server is in the Running state and the command can be sent within 1 minute.
	//
	// 	- Running: The command is being executed on the server.
	//
	// 	- Success: The execution is completed, and the exit code is 0.
	//
	// 	- Failed: The execution is completed, and the exit code is not 0.
	//
	// 	- Error: The execution cannot proceed due to an exception.
	//
	// 	- Timeout: The execution times out.
	//
	// 	- Cancelled: The execution is canceled, and the command is not executed.
	//
	// 	- Stopping: The command in the Running state is being stopped.
	//
	// 	- Terminated: The command is terminated while it is being executed.
	//
	// example:
	//
	// Success
	InvocationStatus *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	// The execution ID.
	//
	// example:
	//
	// t-bj02prjje65****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The status of the execution. Valid values:
	//
	// 	- Running
	//
	// 	- Finished
	//
	// 	- Failed
	//
	// 	- Stopped
	//
	// example:
	//
	// Finished
	InvokeRecordStatus *string `json:"InvokeRecordStatus,omitempty" xml:"InvokeRecordStatus,omitempty"`
	// The username who executes the command on the simple application server.
	//
	// example:
	//
	// root
	InvokeUser *string `json:"InvokeUser,omitempty" xml:"InvokeUser,omitempty"`
	// The command output.
	//
	// example:
	//
	// YWRtaW4K
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The time when the execution started.
	//
	// example:
	//
	// 2022-07-11T06:37:16Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInvocationResultResponseBodyInvocationResult) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationResultResponseBodyInvocationResult) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetErrorCode() *string {
	return s.ErrorCode
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetErrorInfo() *string {
	return s.ErrorInfo
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetExitCode() *int64 {
	return s.ExitCode
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetFinishedTime() *string {
	return s.FinishedTime
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetInvocationStatus() *string {
	return s.InvocationStatus
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetInvokeId() *string {
	return s.InvokeId
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetInvokeRecordStatus() *string {
	return s.InvokeRecordStatus
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetInvokeUser() *string {
	return s.InvokeUser
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetOutput() *string {
	return s.Output
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetErrorCode(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetErrorInfo(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetExitCode(v int64) *DescribeInvocationResultResponseBodyInvocationResult {
	s.ExitCode = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetFinishedTime(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.FinishedTime = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetInstanceId(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetInvocationStatus(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetInvokeId(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetInvokeRecordStatus(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.InvokeRecordStatus = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetInvokeUser(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.InvokeUser = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetOutput(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.Output = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) SetStartTime(v string) *DescribeInvocationResultResponseBodyInvocationResult {
	s.StartTime = &v
	return s
}

func (s *DescribeInvocationResultResponseBodyInvocationResult) Validate() error {
	return dara.Validate(s)
}

type iDescribeInvocationResultResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeInvocationResultResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeInvocationResultResponse
	GetStatusCode() *int32
	SetBody(v *DescribeInvocationResultResponseBody) *DescribeInvocationResultResponse
	GetBody() *DescribeInvocationResultResponseBody
}

type DescribeInvocationResultResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInvocationResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInvocationResultResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeInvocationResultResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeInvocationResultResponse) GetBody() *DescribeInvocationResultResponseBody {
	return s.Body
}

func (s *DescribeInvocationResultResponse) SetHeaders(v map[string]*string) *DescribeInvocationResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvocationResultResponse) SetStatusCode(v int32) *DescribeInvocationResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInvocationResultResponse) SetBody(v *DescribeInvocationResultResponseBody) *DescribeInvocationResultResponse {
	s.Body = v
	return s
}

func (s *DescribeInvocationResultResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeInvocationsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceId(v string) *DescribeInvocationsRequest
	GetInstanceId() *string
	SetInvokeStatus(v string) *DescribeInvocationsRequest
	GetInvokeStatus() *string
	SetPageNumber(v int32) *DescribeInvocationsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeInvocationsRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeInvocationsRequest
	GetRegionId() *string
}

type DescribeInvocationsRequest struct {
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3a658ca270df4df39f22e289b338****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The status of the command execution. Valid values:
	//
	// 	- Running: The command is being executed.
	//
	// 	- Finished: The execution is complete.
	//
	// 	- Failed: The execution fails.
	//
	// example:
	//
	// Finished
	InvokeStatus *string `json:"InvokeStatus,omitempty" xml:"InvokeStatus,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 50.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInvocationsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeInvocationsRequest) GetInvokeStatus() *string {
	return s.InvokeStatus
}

func (s *DescribeInvocationsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeInvocationsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeInvocationsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeInvocationsRequest) SetInstanceId(v string) *DescribeInvocationsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInvokeStatus(v string) *DescribeInvocationsRequest {
	s.InvokeStatus = &v
	return s
}

func (s *DescribeInvocationsRequest) SetPageNumber(v int32) *DescribeInvocationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationsRequest) SetPageSize(v int32) *DescribeInvocationsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInvocationsRequest) SetRegionId(v string) *DescribeInvocationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInvocationsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeInvocationsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInvocations(v []*DescribeInvocationsResponseBodyInvocations) *DescribeInvocationsResponseBody
	GetInvocations() []*DescribeInvocationsResponseBodyInvocations
	SetPageNumber(v int32) *DescribeInvocationsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeInvocationsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeInvocationsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeInvocationsResponseBody
	GetTotalCount() *int32
}

type DescribeInvocationsResponseBody struct {
	// The command name.
	Invocations []*DescribeInvocationsResponseBodyInvocations `json:"Invocations,omitempty" xml:"Invocations,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInvocationsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBody) GetInvocations() []*DescribeInvocationsResponseBodyInvocations {
	return s.Invocations
}

func (s *DescribeInvocationsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeInvocationsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeInvocationsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeInvocationsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeInvocationsResponseBody) SetInvocations(v []*DescribeInvocationsResponseBodyInvocations) *DescribeInvocationsResponseBody {
	s.Invocations = v
	return s
}

func (s *DescribeInvocationsResponseBody) SetPageNumber(v int32) *DescribeInvocationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetPageSize(v int32) *DescribeInvocationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetRequestId(v string) *DescribeInvocationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetTotalCount(v int32) *DescribeInvocationsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInvocationsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeInvocationsResponseBodyInvocations struct {
	// The content of the command, which is Base64-encoded.
	//
	// example:
	//
	// bHM=
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// The name of the command.
	//
	// example:
	//
	// testname
	CommandName *string `json:"CommandName,omitempty" xml:"CommandName,omitempty"`
	// The type of the command. Valid values:
	//
	// 	- RunBatScript: batch command (applicable to Windows instances).
	//
	// 	- RunPowerShellScript: PowerShell command (applicable to Windows instances).
	//
	// 	- RunShellScript: shell command (applicable to Linux instances).
	//
	// example:
	//
	// RunShellScript
	CommandType *string `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	// The time when the command was created.
	//
	// example:
	//
	// 2022-07-11T06:37:16Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The status of the command. Valid values:
	//
	// 	- Pending: The command is being verified or sent.
	//
	// 	- Invalid: The specified command type or parameter is invalid.
	//
	// 	- Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.
	//
	// 	- Running: The command is being run on the instance.
	//
	// 	- Success: The command finishes running, and the exit code is 0.
	//
	// 	- Failed: The command finishes running, but the exit code is not 0.
	//
	// 	- Error: The running of the command cannot proceed due to an exception.
	//
	// 	- Timeout: The running of the command times out.
	//
	// 	- Cancelled: The running is canceled, and the command is not run.
	//
	// 	- Stopping: The command that is running is being stopped.
	//
	// 	- Terminated: The command is terminated while it is being run.
	//
	// example:
	//
	// Success
	InvocationStatus *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	// The ID of the command task.
	//
	// example:
	//
	// t-hz02p9545t6****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The status of the command. Valid values:
	//
	// 	- Running: The command is running.
	//
	// 	- Finished: The command finishes running.
	//
	// 	- Failed: The running of the command failed.
	//
	// 	- Stopped: The running is stopped.
	//
	// example:
	//
	// Finished
	InvokeStatus *string `json:"InvokeStatus,omitempty" xml:"InvokeStatus,omitempty"`
	// The custom parameters in the command. If no custom parameter exists in the command, the default value is {}.
	//
	// example:
	//
	// {}
	Parameters map[string]interface{} `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s DescribeInvocationsResponseBodyInvocations) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationsResponseBodyInvocations) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBodyInvocations) GetCommandContent() *string {
	return s.CommandContent
}

func (s *DescribeInvocationsResponseBodyInvocations) GetCommandName() *string {
	return s.CommandName
}

func (s *DescribeInvocationsResponseBodyInvocations) GetCommandType() *string {
	return s.CommandType
}

func (s *DescribeInvocationsResponseBodyInvocations) GetCreationTime() *string {
	return s.CreationTime
}

func (s *DescribeInvocationsResponseBodyInvocations) GetInvocationStatus() *string {
	return s.InvocationStatus
}

func (s *DescribeInvocationsResponseBodyInvocations) GetInvokeId() *string {
	return s.InvokeId
}

func (s *DescribeInvocationsResponseBodyInvocations) GetInvokeStatus() *string {
	return s.InvokeStatus
}

func (s *DescribeInvocationsResponseBodyInvocations) GetParameters() map[string]interface{} {
	return s.Parameters
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandContent(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandContent = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandName(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandName = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandType(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandType = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCreationTime(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CreationTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvocationStatus(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeId(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeStatus(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeStatus = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetParameters(v map[string]interface{}) *DescribeInvocationsResponseBodyInvocations {
	s.Parameters = v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) Validate() error {
	return dara.Validate(s)
}

type iDescribeInvocationsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeInvocationsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeInvocationsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeInvocationsResponseBody) *DescribeInvocationsResponse
	GetBody() *DescribeInvocationsResponseBody
}

type DescribeInvocationsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInvocationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInvocationsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeInvocationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeInvocationsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeInvocationsResponse) GetBody() *DescribeInvocationsResponseBody {
	return s.Body
}

func (s *DescribeInvocationsResponse) SetHeaders(v map[string]*string) *DescribeInvocationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvocationsResponse) SetStatusCode(v int32) *DescribeInvocationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInvocationsResponse) SetBody(v *DescribeInvocationsResponseBody) *DescribeInvocationsResponse {
	s.Body = v
	return s
}

func (s *DescribeInvocationsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeMonitorDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeMonitorDataRequest
	GetClientToken() *string
	SetEndTime(v string) *DescribeMonitorDataRequest
	GetEndTime() *string
	SetInstanceId(v string) *DescribeMonitorDataRequest
	GetInstanceId() *string
	SetLength(v string) *DescribeMonitorDataRequest
	GetLength() *string
	SetMetricName(v string) *DescribeMonitorDataRequest
	GetMetricName() *string
	SetNextToken(v string) *DescribeMonitorDataRequest
	GetNextToken() *string
	SetPeriod(v string) *DescribeMonitorDataRequest
	GetPeriod() *string
	SetRegionId(v string) *DescribeMonitorDataRequest
	GetRegionId() *string
	SetStartTime(v string) *DescribeMonitorDataRequest
	GetStartTime() *string
}

type DescribeMonitorDataRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The end of the time range to query. The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 January 1, 1970.
	//
	// 	- Time format: YYYY-MM-DDThh:mm:ssZ.
	//
	// > The interval between the start time and the end time is less than or equal to 31 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-08T08:04:44Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of entries per page. Valid values: 1 to 1440.
	//
	// example:
	//
	// 100
	Length *string `json:"Length,omitempty" xml:"Length,omitempty"`
	// The name of the metric. Valid values:
	//
	// 	- MEMORY_ACTUALUSEDSPACE: the memory usage. Unit: bytes.
	//
	// 	- DISKUSAGE_USED: the disk usage. Unit: bytes.
	//
	// 	- CPU_UTILIZATION: the CPU usage, in percentage.
	//
	// 	- VPC_PUBLICIP_INTERNETOUT_RATE: the outbound bandwidth. Unit: bits/s.
	//
	// 	- VPC_PUBLICIP_INTERNETIN_RATE: the inbound bandwidth. Unit: bits/s.
	//
	// 	- DISK_READ_IOPS: the read IOPS of the disk. Unit: count/s.
	//
	// 	- DISK_WRITE_IOPS: the write IOPS of the disk. Unit: count/s.
	//
	// 	- FLOW_USED: the traffic usage. Unit: bytes.
	//
	// This parameter is required.
	//
	// example:
	//
	// DISKUSAGE_USED
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The interval at which the monitoring data is queried. Valid values: 60, 300, and 900. Unit: seconds.
	//
	// >  If MetricName is set to FLOW_USED, set Period to 3600 (one hour). In other cases, set Period based on your business requirements.
	//
	// This parameter is required.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 January 1, 1970.
	//
	// 	- Time format: YYYY-MM-DDThh:mm:ssZ.
	//
	// >
	//
	// > - The specified time range includes the end time and excludes the start time. The start time must be earlier than the end time.
	//
	// > - The interval between the start time and the end time is less than or equal to 31 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-07T04:04:44Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeMonitorDataRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorDataRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeMonitorDataRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeMonitorDataRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeMonitorDataRequest) GetLength() *string {
	return s.Length
}

func (s *DescribeMonitorDataRequest) GetMetricName() *string {
	return s.MetricName
}

func (s *DescribeMonitorDataRequest) GetNextToken() *string {
	return s.NextToken
}

func (s *DescribeMonitorDataRequest) GetPeriod() *string {
	return s.Period
}

func (s *DescribeMonitorDataRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeMonitorDataRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeMonitorDataRequest) SetClientToken(v string) *DescribeMonitorDataRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetEndTime(v string) *DescribeMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetInstanceId(v string) *DescribeMonitorDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetLength(v string) *DescribeMonitorDataRequest {
	s.Length = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetMetricName(v string) *DescribeMonitorDataRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetNextToken(v string) *DescribeMonitorDataRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetPeriod(v string) *DescribeMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetRegionId(v string) *DescribeMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMonitorDataRequest) SetStartTime(v string) *DescribeMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMonitorDataRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeMonitorDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDatapoints(v string) *DescribeMonitorDataResponseBody
	GetDatapoints() *string
	SetNextToken(v string) *DescribeMonitorDataResponseBody
	GetNextToken() *string
	SetPeriod(v string) *DescribeMonitorDataResponseBody
	GetPeriod() *string
	SetRequestId(v string) *DescribeMonitorDataResponseBody
	GetRequestId() *string
}

type DescribeMonitorDataResponseBody struct {
	// The monitoring data.
	//
	// example:
	//
	// []
	Datapoints *string `json:"Datapoints,omitempty" xml:"Datapoints,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The interval at which the monitoring data is queried. Valid values: 60, 300, and 900. Unit: seconds.
	//
	// >  If you set the MetricName request parameter to FLOW_USED, the value of Period is 3600 (one hour).
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMonitorDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorDataResponseBody) GetDatapoints() *string {
	return s.Datapoints
}

func (s *DescribeMonitorDataResponseBody) GetNextToken() *string {
	return s.NextToken
}

func (s *DescribeMonitorDataResponseBody) GetPeriod() *string {
	return s.Period
}

func (s *DescribeMonitorDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeMonitorDataResponseBody) SetDatapoints(v string) *DescribeMonitorDataResponseBody {
	s.Datapoints = &v
	return s
}

func (s *DescribeMonitorDataResponseBody) SetNextToken(v string) *DescribeMonitorDataResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeMonitorDataResponseBody) SetPeriod(v string) *DescribeMonitorDataResponseBody {
	s.Period = &v
	return s
}

func (s *DescribeMonitorDataResponseBody) SetRequestId(v string) *DescribeMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeMonitorDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeMonitorDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeMonitorDataResponse
	GetStatusCode() *int32
	SetBody(v *DescribeMonitorDataResponseBody) *DescribeMonitorDataResponse
	GetBody() *DescribeMonitorDataResponseBody
}

type DescribeMonitorDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorDataResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeMonitorDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeMonitorDataResponse) GetBody() *DescribeMonitorDataResponseBody {
	return s.Body
}

func (s *DescribeMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorDataResponse) SetStatusCode(v int32) *DescribeMonitorDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorDataResponse) SetBody(v *DescribeMonitorDataResponseBody) *DescribeMonitorDataResponse {
	s.Body = v
	return s
}

func (s *DescribeMonitorDataResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeSecurityAgentStatusRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DescribeSecurityAgentStatusRequest
	GetClientToken() *string
	SetInstanceId(v string) *DescribeSecurityAgentStatusRequest
	GetInstanceId() *string
	SetRegionId(v string) *DescribeSecurityAgentStatusRequest
	GetRegionId() *string
}

type DescribeSecurityAgentStatusRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSecurityAgentStatusRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeSecurityAgentStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityAgentStatusRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DescribeSecurityAgentStatusRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DescribeSecurityAgentStatusRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeSecurityAgentStatusRequest) SetClientToken(v string) *DescribeSecurityAgentStatusRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSecurityAgentStatusRequest) SetInstanceId(v string) *DescribeSecurityAgentStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSecurityAgentStatusRequest) SetRegionId(v string) *DescribeSecurityAgentStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityAgentStatusRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeSecurityAgentStatusResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetClientStatus(v string) *DescribeSecurityAgentStatusResponseBody
	GetClientStatus() *string
	SetRequestId(v string) *DescribeSecurityAgentStatusResponseBody
	GetRequestId() *string
}

type DescribeSecurityAgentStatusResponseBody struct {
	// The status of the Security Center agent. Valid values:
	//
	// 	- pause: The Security Center agent suspends protection for your server.
	//
	// 	- online: The Security Center agent is protecting your server.
	//
	// 	- offline: The Security Center agent does not protect your server.
	//
	// example:
	//
	// online
	ClientStatus *string `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSecurityAgentStatusResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSecurityAgentStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityAgentStatusResponseBody) GetClientStatus() *string {
	return s.ClientStatus
}

func (s *DescribeSecurityAgentStatusResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSecurityAgentStatusResponseBody) SetClientStatus(v string) *DescribeSecurityAgentStatusResponseBody {
	s.ClientStatus = &v
	return s
}

func (s *DescribeSecurityAgentStatusResponseBody) SetRequestId(v string) *DescribeSecurityAgentStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityAgentStatusResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeSecurityAgentStatusResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeSecurityAgentStatusResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeSecurityAgentStatusResponse
	GetStatusCode() *int32
	SetBody(v *DescribeSecurityAgentStatusResponseBody) *DescribeSecurityAgentStatusResponse
	GetBody() *DescribeSecurityAgentStatusResponseBody
}

type DescribeSecurityAgentStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSecurityAgentStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSecurityAgentStatusResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeSecurityAgentStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityAgentStatusResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeSecurityAgentStatusResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeSecurityAgentStatusResponse) GetBody() *DescribeSecurityAgentStatusResponseBody {
	return s.Body
}

func (s *DescribeSecurityAgentStatusResponse) SetHeaders(v map[string]*string) *DescribeSecurityAgentStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityAgentStatusResponse) SetStatusCode(v int32) *DescribeSecurityAgentStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityAgentStatusResponse) SetBody(v *DescribeSecurityAgentStatusResponseBody) *DescribeSecurityAgentStatusResponse {
	s.Body = v
	return s
}

func (s *DescribeSecurityAgentStatusResponse) Validate() error {
	return dara.Validate(s)
}

type iDetachKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DetachKeyPairRequest
	GetClientToken() *string
	SetInstanceIds(v []*string) *DetachKeyPairRequest
	GetInstanceIds() []*string
	SetKeyPairName(v string) *DetachKeyPairRequest
	GetKeyPairName() *string
	SetRegionId(v string) *DetachKeyPairRequest
	GetRegionId() *string
}

type DetachKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The IDs of the simple application servers from which you want to unbind SSH key pairs. You can specify a maximum of 50 IDs of simple application servers.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The name of the key pair. The name must be globally unique. The name must be 2 to 64 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter but cannot start with http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// KeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The region ID of the simple application servers.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DetachKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s DetachKeyPairRequest) GoString() string {
	return s.String()
}

func (s *DetachKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DetachKeyPairRequest) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *DetachKeyPairRequest) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *DetachKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DetachKeyPairRequest) SetClientToken(v string) *DetachKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *DetachKeyPairRequest) SetInstanceIds(v []*string) *DetachKeyPairRequest {
	s.InstanceIds = v
	return s
}

func (s *DetachKeyPairRequest) SetKeyPairName(v string) *DetachKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *DetachKeyPairRequest) SetRegionId(v string) *DetachKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *DetachKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iDetachKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFailCount(v int32) *DetachKeyPairResponseBody
	GetFailCount() *int32
	SetRequestId(v string) *DetachKeyPairResponseBody
	GetRequestId() *string
	SetResults(v []*DetachKeyPairResponseBodyResults) *DetachKeyPairResponseBody
	GetResults() []*DetachKeyPairResponseBodyResults
	SetTotalCount(v int32) *DetachKeyPairResponseBody
	GetTotalCount() *int32
}

type DetachKeyPairResponseBody struct {
	// The total number of simple application servers from which you fail to unbind key pairs.
	//
	// example:
	//
	// 0
	FailCount *int32 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The request results.
	Results []*DetachKeyPairResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	// The total number of simple application servers from which the SSH key pair is unbound.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DetachKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DetachKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponseBody) GetFailCount() *int32 {
	return s.FailCount
}

func (s *DetachKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DetachKeyPairResponseBody) GetResults() []*DetachKeyPairResponseBodyResults {
	return s.Results
}

func (s *DetachKeyPairResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DetachKeyPairResponseBody) SetFailCount(v int32) *DetachKeyPairResponseBody {
	s.FailCount = &v
	return s
}

func (s *DetachKeyPairResponseBody) SetRequestId(v string) *DetachKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachKeyPairResponseBody) SetResults(v []*DetachKeyPairResponseBodyResults) *DetachKeyPairResponseBody {
	s.Results = v
	return s
}

func (s *DetachKeyPairResponseBody) SetTotalCount(v int32) *DetachKeyPairResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DetachKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type DetachKeyPairResponseBodyResults struct {
	// The HTTP status code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// aa6e71ddb35c46679bc4753d6219d604
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The response message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Indicates whether the key pair is unbound from the simple application server successfully. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// True
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DetachKeyPairResponseBodyResults) String() string {
	return dara.Prettify(s)
}

func (s DetachKeyPairResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponseBodyResults) GetCode() *string {
	return s.Code
}

func (s *DetachKeyPairResponseBodyResults) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DetachKeyPairResponseBodyResults) GetMessage() *string {
	return s.Message
}

func (s *DetachKeyPairResponseBodyResults) GetSuccess() *string {
	return s.Success
}

func (s *DetachKeyPairResponseBodyResults) SetCode(v string) *DetachKeyPairResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachKeyPairResponseBodyResults) SetInstanceId(v string) *DetachKeyPairResponseBodyResults {
	s.InstanceId = &v
	return s
}

func (s *DetachKeyPairResponseBodyResults) SetMessage(v string) *DetachKeyPairResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachKeyPairResponseBodyResults) SetSuccess(v string) *DetachKeyPairResponseBodyResults {
	s.Success = &v
	return s
}

func (s *DetachKeyPairResponseBodyResults) Validate() error {
	return dara.Validate(s)
}

type iDetachKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DetachKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DetachKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *DetachKeyPairResponseBody) *DetachKeyPairResponse
	GetBody() *DetachKeyPairResponseBody
}

type DetachKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s DetachKeyPairResponse) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DetachKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DetachKeyPairResponse) GetBody() *DetachKeyPairResponseBody {
	return s.Body
}

func (s *DetachKeyPairResponse) SetHeaders(v map[string]*string) *DetachKeyPairResponse {
	s.Headers = v
	return s
}

func (s *DetachKeyPairResponse) SetStatusCode(v int32) *DetachKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachKeyPairResponse) SetBody(v *DetachKeyPairResponseBody) *DetachKeyPairResponse {
	s.Body = v
	return s
}

func (s *DetachKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type iDisableFirewallRuleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DisableFirewallRuleRequest
	GetClientToken() *string
	SetInstanceId(v string) *DisableFirewallRuleRequest
	GetInstanceId() *string
	SetRegionId(v string) *DisableFirewallRuleRequest
	GetRegionId() *string
	SetRemark(v string) *DisableFirewallRuleRequest
	GetRemark() *string
	SetRuleId(v string) *DisableFirewallRuleRequest
	GetRuleId() *string
}

type DisableFirewallRuleRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// custom
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the firewall rule. You can call the ListFirewallRules operation to query the ID of the firewall rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// eeea34d9867b4d55a4ff8d5fcfbd****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DisableFirewallRuleRequest) String() string {
	return dara.Prettify(s)
}

func (s DisableFirewallRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableFirewallRuleRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DisableFirewallRuleRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *DisableFirewallRuleRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DisableFirewallRuleRequest) GetRemark() *string {
	return s.Remark
}

func (s *DisableFirewallRuleRequest) GetRuleId() *string {
	return s.RuleId
}

func (s *DisableFirewallRuleRequest) SetClientToken(v string) *DisableFirewallRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *DisableFirewallRuleRequest) SetInstanceId(v string) *DisableFirewallRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableFirewallRuleRequest) SetRegionId(v string) *DisableFirewallRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DisableFirewallRuleRequest) SetRemark(v string) *DisableFirewallRuleRequest {
	s.Remark = &v
	return s
}

func (s *DisableFirewallRuleRequest) SetRuleId(v string) *DisableFirewallRuleRequest {
	s.RuleId = &v
	return s
}

func (s *DisableFirewallRuleRequest) Validate() error {
	return dara.Validate(s)
}

type iDisableFirewallRuleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DisableFirewallRuleResponseBody
	GetRequestId() *string
}

type DisableFirewallRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableFirewallRuleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DisableFirewallRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableFirewallRuleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DisableFirewallRuleResponseBody) SetRequestId(v string) *DisableFirewallRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableFirewallRuleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDisableFirewallRuleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DisableFirewallRuleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DisableFirewallRuleResponse
	GetStatusCode() *int32
	SetBody(v *DisableFirewallRuleResponseBody) *DisableFirewallRuleResponse
	GetBody() *DisableFirewallRuleResponseBody
}

type DisableFirewallRuleResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableFirewallRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableFirewallRuleResponse) String() string {
	return dara.Prettify(s)
}

func (s DisableFirewallRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableFirewallRuleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DisableFirewallRuleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DisableFirewallRuleResponse) GetBody() *DisableFirewallRuleResponseBody {
	return s.Body
}

func (s *DisableFirewallRuleResponse) SetHeaders(v map[string]*string) *DisableFirewallRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableFirewallRuleResponse) SetStatusCode(v int32) *DisableFirewallRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableFirewallRuleResponse) SetBody(v *DisableFirewallRuleResponseBody) *DisableFirewallRuleResponse {
	s.Body = v
	return s
}

func (s *DisableFirewallRuleResponse) Validate() error {
	return dara.Validate(s)
}

type iEnableFirewallRuleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *EnableFirewallRuleRequest
	GetClientToken() *string
	SetInstanceId(v string) *EnableFirewallRuleRequest
	GetInstanceId() *string
	SetRegionId(v string) *EnableFirewallRuleRequest
	GetRegionId() *string
	SetRemark(v string) *EnableFirewallRuleRequest
	GetRemark() *string
	SetRuleId(v string) *EnableFirewallRuleRequest
	GetRuleId() *string
	SetSourceCidrIp(v string) *EnableFirewallRuleRequest
	GetSourceCidrIp() *string
}

type EnableFirewallRuleRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// custom
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the firewall rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// eeea34d9867b4d55a4ff8d5fcfbd****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The IP address or CIDR block that is allowed in the firewall policy.
	//
	// example:
	//
	// 10.147.33.**
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s EnableFirewallRuleRequest) String() string {
	return dara.Prettify(s)
}

func (s EnableFirewallRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableFirewallRuleRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *EnableFirewallRuleRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *EnableFirewallRuleRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *EnableFirewallRuleRequest) GetRemark() *string {
	return s.Remark
}

func (s *EnableFirewallRuleRequest) GetRuleId() *string {
	return s.RuleId
}

func (s *EnableFirewallRuleRequest) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *EnableFirewallRuleRequest) SetClientToken(v string) *EnableFirewallRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *EnableFirewallRuleRequest) SetInstanceId(v string) *EnableFirewallRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableFirewallRuleRequest) SetRegionId(v string) *EnableFirewallRuleRequest {
	s.RegionId = &v
	return s
}

func (s *EnableFirewallRuleRequest) SetRemark(v string) *EnableFirewallRuleRequest {
	s.Remark = &v
	return s
}

func (s *EnableFirewallRuleRequest) SetRuleId(v string) *EnableFirewallRuleRequest {
	s.RuleId = &v
	return s
}

func (s *EnableFirewallRuleRequest) SetSourceCidrIp(v string) *EnableFirewallRuleRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *EnableFirewallRuleRequest) Validate() error {
	return dara.Validate(s)
}

type iEnableFirewallRuleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *EnableFirewallRuleResponseBody
	GetRequestId() *string
}

type EnableFirewallRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableFirewallRuleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s EnableFirewallRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableFirewallRuleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *EnableFirewallRuleResponseBody) SetRequestId(v string) *EnableFirewallRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableFirewallRuleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iEnableFirewallRuleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *EnableFirewallRuleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *EnableFirewallRuleResponse
	GetStatusCode() *int32
	SetBody(v *EnableFirewallRuleResponseBody) *EnableFirewallRuleResponse
	GetBody() *EnableFirewallRuleResponseBody
}

type EnableFirewallRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableFirewallRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableFirewallRuleResponse) String() string {
	return dara.Prettify(s)
}

func (s EnableFirewallRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableFirewallRuleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *EnableFirewallRuleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *EnableFirewallRuleResponse) GetBody() *EnableFirewallRuleResponseBody {
	return s.Body
}

func (s *EnableFirewallRuleResponse) SetHeaders(v map[string]*string) *EnableFirewallRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableFirewallRuleResponse) SetStatusCode(v int32) *EnableFirewallRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableFirewallRuleResponse) SetBody(v *EnableFirewallRuleResponseBody) *EnableFirewallRuleResponse {
	s.Body = v
	return s
}

func (s *EnableFirewallRuleResponse) Validate() error {
	return dara.Validate(s)
}

type iImportKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ImportKeyPairRequest
	GetClientToken() *string
	SetKeyPairName(v string) *ImportKeyPairRequest
	GetKeyPairName() *string
	SetPublicKeyBody(v string) *ImportKeyPairRequest
	GetPublicKeyBody() *string
	SetRegionId(v string) *ImportKeyPairRequest
	GetRegionId() *string
}

type ImportKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The name of the key pair. The name must be 2 to 64 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter and cannot start with http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// KeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The public key of the key pair.
	//
	// This parameter is required.
	//
	// example:
	//
	// ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCbO5Govwhb0iHzoMYKkIQxjlHyHH8nxFsW6KF5saxgYhOwdeIpWngpi+/NDWQKvuOnXFFDh/o3eJJkh3rqP+RlMggt4HLQWOd9TS0f4/cgbAzud1caW9PnankCr****
	PublicKeyBody *string `json:"PublicKeyBody,omitempty" xml:"PublicKeyBody,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ImportKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s ImportKeyPairRequest) GoString() string {
	return s.String()
}

func (s *ImportKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ImportKeyPairRequest) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *ImportKeyPairRequest) GetPublicKeyBody() *string {
	return s.PublicKeyBody
}

func (s *ImportKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ImportKeyPairRequest) SetClientToken(v string) *ImportKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *ImportKeyPairRequest) SetKeyPairName(v string) *ImportKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairRequest) SetPublicKeyBody(v string) *ImportKeyPairRequest {
	s.PublicKeyBody = &v
	return s
}

func (s *ImportKeyPairRequest) SetRegionId(v string) *ImportKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *ImportKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iImportKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetKeyPairName(v string) *ImportKeyPairResponseBody
	GetKeyPairName() *string
	SetRequestId(v string) *ImportKeyPairResponseBody
	GetRequestId() *string
}

type ImportKeyPairResponseBody struct {
	// The name of the key pair. The name must be 2 to 64 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter and cannot start with http:// or https://.
	//
	// example:
	//
	// KeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ImportKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponseBody) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *ImportKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ImportKeyPairResponseBody) SetKeyPairName(v string) *ImportKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairResponseBody) SetRequestId(v string) *ImportKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type iImportKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ImportKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ImportKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *ImportKeyPairResponseBody) *ImportKeyPairResponse
	GetBody() *ImportKeyPairResponseBody
}

type ImportKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s ImportKeyPairResponse) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ImportKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ImportKeyPairResponse) GetBody() *ImportKeyPairResponseBody {
	return s.Body
}

func (s *ImportKeyPairResponse) SetHeaders(v map[string]*string) *ImportKeyPairResponse {
	s.Headers = v
	return s
}

func (s *ImportKeyPairResponse) SetStatusCode(v int32) *ImportKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportKeyPairResponse) SetBody(v *ImportKeyPairResponseBody) *ImportKeyPairResponse {
	s.Body = v
	return s
}

func (s *ImportKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type iInstallCloudAssistantRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIds(v []*string) *InstallCloudAssistantRequest
	GetInstanceIds() []*string
	SetRegionId(v string) *InstallCloudAssistantRequest
	GetRegionId() *string
}

type InstallCloudAssistantRequest struct {
	// The IDs of the simple application servers.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InstallCloudAssistantRequest) String() string {
	return dara.Prettify(s)
}

func (s InstallCloudAssistantRequest) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantRequest) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *InstallCloudAssistantRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *InstallCloudAssistantRequest) SetInstanceIds(v []*string) *InstallCloudAssistantRequest {
	s.InstanceIds = v
	return s
}

func (s *InstallCloudAssistantRequest) SetRegionId(v string) *InstallCloudAssistantRequest {
	s.RegionId = &v
	return s
}

func (s *InstallCloudAssistantRequest) Validate() error {
	return dara.Validate(s)
}

type iInstallCloudAssistantShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIdsShrink(v string) *InstallCloudAssistantShrinkRequest
	GetInstanceIdsShrink() *string
	SetRegionId(v string) *InstallCloudAssistantShrinkRequest
	GetRegionId() *string
}

type InstallCloudAssistantShrinkRequest struct {
	// The IDs of the simple application servers.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InstallCloudAssistantShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s InstallCloudAssistantShrinkRequest) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantShrinkRequest) GetInstanceIdsShrink() *string {
	return s.InstanceIdsShrink
}

func (s *InstallCloudAssistantShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *InstallCloudAssistantShrinkRequest) SetInstanceIdsShrink(v string) *InstallCloudAssistantShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *InstallCloudAssistantShrinkRequest) SetRegionId(v string) *InstallCloudAssistantShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *InstallCloudAssistantShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iInstallCloudAssistantResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *InstallCloudAssistantResponseBody
	GetRequestId() *string
}

type InstallCloudAssistantResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallCloudAssistantResponseBody) String() string {
	return dara.Prettify(s)
}

func (s InstallCloudAssistantResponseBody) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *InstallCloudAssistantResponseBody) SetRequestId(v string) *InstallCloudAssistantResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallCloudAssistantResponseBody) Validate() error {
	return dara.Validate(s)
}

type iInstallCloudAssistantResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *InstallCloudAssistantResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *InstallCloudAssistantResponse
	GetStatusCode() *int32
	SetBody(v *InstallCloudAssistantResponseBody) *InstallCloudAssistantResponse
	GetBody() *InstallCloudAssistantResponseBody
}

type InstallCloudAssistantResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallCloudAssistantResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallCloudAssistantResponse) String() string {
	return dara.Prettify(s)
}

func (s InstallCloudAssistantResponse) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *InstallCloudAssistantResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *InstallCloudAssistantResponse) GetBody() *InstallCloudAssistantResponseBody {
	return s.Body
}

func (s *InstallCloudAssistantResponse) SetHeaders(v map[string]*string) *InstallCloudAssistantResponse {
	s.Headers = v
	return s
}

func (s *InstallCloudAssistantResponse) SetStatusCode(v int32) *InstallCloudAssistantResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallCloudAssistantResponse) SetBody(v *InstallCloudAssistantResponseBody) *InstallCloudAssistantResponse {
	s.Body = v
	return s
}

func (s *InstallCloudAssistantResponse) Validate() error {
	return dara.Validate(s)
}

type iInstallCloudMonitorAgentRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *InstallCloudMonitorAgentRequest
	GetClientToken() *string
	SetForce(v bool) *InstallCloudMonitorAgentRequest
	GetForce() *bool
	SetInstanceId(v string) *InstallCloudMonitorAgentRequest
	GetInstanceId() *string
	SetRegionId(v string) *InstallCloudMonitorAgentRequest
	GetRegionId() *string
}

type InstallCloudMonitorAgentRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// Specifies whether to forcibly install the CloudMonitor agent. Valid values:
	//
	// 	- true (default value): forcibly installs the CloudMonitor agent.
	//
	// 	- false: does not forcibly install the CloudMonitor agent.
	//
	// example:
	//
	// true
	Force *bool `json:"Force,omitempty" xml:"Force,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9ae7106e68eb4402b0dcbd48a9de****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InstallCloudMonitorAgentRequest) String() string {
	return dara.Prettify(s)
}

func (s InstallCloudMonitorAgentRequest) GoString() string {
	return s.String()
}

func (s *InstallCloudMonitorAgentRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *InstallCloudMonitorAgentRequest) GetForce() *bool {
	return s.Force
}

func (s *InstallCloudMonitorAgentRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *InstallCloudMonitorAgentRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *InstallCloudMonitorAgentRequest) SetClientToken(v string) *InstallCloudMonitorAgentRequest {
	s.ClientToken = &v
	return s
}

func (s *InstallCloudMonitorAgentRequest) SetForce(v bool) *InstallCloudMonitorAgentRequest {
	s.Force = &v
	return s
}

func (s *InstallCloudMonitorAgentRequest) SetInstanceId(v string) *InstallCloudMonitorAgentRequest {
	s.InstanceId = &v
	return s
}

func (s *InstallCloudMonitorAgentRequest) SetRegionId(v string) *InstallCloudMonitorAgentRequest {
	s.RegionId = &v
	return s
}

func (s *InstallCloudMonitorAgentRequest) Validate() error {
	return dara.Validate(s)
}

type iInstallCloudMonitorAgentResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *InstallCloudMonitorAgentResponseBody
	GetRequestId() *string
}

type InstallCloudMonitorAgentResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallCloudMonitorAgentResponseBody) String() string {
	return dara.Prettify(s)
}

func (s InstallCloudMonitorAgentResponseBody) GoString() string {
	return s.String()
}

func (s *InstallCloudMonitorAgentResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *InstallCloudMonitorAgentResponseBody) SetRequestId(v string) *InstallCloudMonitorAgentResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallCloudMonitorAgentResponseBody) Validate() error {
	return dara.Validate(s)
}

type iInstallCloudMonitorAgentResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *InstallCloudMonitorAgentResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *InstallCloudMonitorAgentResponse
	GetStatusCode() *int32
	SetBody(v *InstallCloudMonitorAgentResponseBody) *InstallCloudMonitorAgentResponse
	GetBody() *InstallCloudMonitorAgentResponseBody
}

type InstallCloudMonitorAgentResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallCloudMonitorAgentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallCloudMonitorAgentResponse) String() string {
	return dara.Prettify(s)
}

func (s InstallCloudMonitorAgentResponse) GoString() string {
	return s.String()
}

func (s *InstallCloudMonitorAgentResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *InstallCloudMonitorAgentResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *InstallCloudMonitorAgentResponse) GetBody() *InstallCloudMonitorAgentResponseBody {
	return s.Body
}

func (s *InstallCloudMonitorAgentResponse) SetHeaders(v map[string]*string) *InstallCloudMonitorAgentResponse {
	s.Headers = v
	return s
}

func (s *InstallCloudMonitorAgentResponse) SetStatusCode(v int32) *InstallCloudMonitorAgentResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallCloudMonitorAgentResponse) SetBody(v *InstallCloudMonitorAgentResponseBody) *InstallCloudMonitorAgentResponse {
	s.Body = v
	return s
}

func (s *InstallCloudMonitorAgentResponse) Validate() error {
	return dara.Validate(s)
}

type iInvokeCommandRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandId(v string) *InvokeCommandRequest
	GetCommandId() *string
	SetInstanceIds(v string) *InvokeCommandRequest
	GetInstanceIds() *string
	SetParameters(v map[string]interface{}) *InvokeCommandRequest
	GetParameters() map[string]interface{}
	SetRegionId(v string) *InvokeCommandRequest
	GetRegionId() *string
	SetUsername(v string) *InvokeCommandRequest
	GetUsername() *string
}

type InvokeCommandRequest struct {
	// The command ID. You can call the DescribeCommands operation to query all available command IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// c-sh02yh0932w****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 50 IDs of simple application servers. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The key-value pairs of custom parameters to specify when the custom parameter feature is enabled.
	//
	// 	- You can specify up to 10 custom parameters. Each key in a Map collection cannot be an empty string and can be up to 64 characters in length.
	//
	// 	- Values in a Map collection can be empty strings. The total length of the custom parameters and the original command cannot exceed 18 KB after they are encoded in Base64.
	//
	// 	- The custom parameter names that you specify for the Parameters parameter must be included in the custom parameter names that you specified when you created the command.
	//
	// 	- You can use empty strings to represent the custom parameters that are not specified. If you want to disable the custom parameter feature, you can leave this parameter empty.
	//
	// example:
	//
	// {"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}
	Parameters map[string]interface{} `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the user who runs the command in a simple application server. The username cannot exceed 255 characters in length.
	//
	// 	- For Linux servers, the default value is the root username.
	//
	// 	- For Windows servers, the default value is the system username.
	//
	// You can change the user to run the command only for Linux simple application servers.
	//
	// example:
	//
	// test
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s InvokeCommandRequest) String() string {
	return dara.Prettify(s)
}

func (s InvokeCommandRequest) GoString() string {
	return s.String()
}

func (s *InvokeCommandRequest) GetCommandId() *string {
	return s.CommandId
}

func (s *InvokeCommandRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *InvokeCommandRequest) GetParameters() map[string]interface{} {
	return s.Parameters
}

func (s *InvokeCommandRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *InvokeCommandRequest) GetUsername() *string {
	return s.Username
}

func (s *InvokeCommandRequest) SetCommandId(v string) *InvokeCommandRequest {
	s.CommandId = &v
	return s
}

func (s *InvokeCommandRequest) SetInstanceIds(v string) *InvokeCommandRequest {
	s.InstanceIds = &v
	return s
}

func (s *InvokeCommandRequest) SetParameters(v map[string]interface{}) *InvokeCommandRequest {
	s.Parameters = v
	return s
}

func (s *InvokeCommandRequest) SetRegionId(v string) *InvokeCommandRequest {
	s.RegionId = &v
	return s
}

func (s *InvokeCommandRequest) SetUsername(v string) *InvokeCommandRequest {
	s.Username = &v
	return s
}

func (s *InvokeCommandRequest) Validate() error {
	return dara.Validate(s)
}

type iInvokeCommandShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandId(v string) *InvokeCommandShrinkRequest
	GetCommandId() *string
	SetInstanceIds(v string) *InvokeCommandShrinkRequest
	GetInstanceIds() *string
	SetParametersShrink(v string) *InvokeCommandShrinkRequest
	GetParametersShrink() *string
	SetRegionId(v string) *InvokeCommandShrinkRequest
	GetRegionId() *string
	SetUsername(v string) *InvokeCommandShrinkRequest
	GetUsername() *string
}

type InvokeCommandShrinkRequest struct {
	// The command ID. You can call the DescribeCommands operation to query all available command IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// c-sh02yh0932w****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 50 IDs of simple application servers. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The key-value pairs of custom parameters to specify when the custom parameter feature is enabled.
	//
	// 	- You can specify up to 10 custom parameters. Each key in a Map collection cannot be an empty string and can be up to 64 characters in length.
	//
	// 	- Values in a Map collection can be empty strings. The total length of the custom parameters and the original command cannot exceed 18 KB after they are encoded in Base64.
	//
	// 	- The custom parameter names that you specify for the Parameters parameter must be included in the custom parameter names that you specified when you created the command.
	//
	// 	- You can use empty strings to represent the custom parameters that are not specified. If you want to disable the custom parameter feature, you can leave this parameter empty.
	//
	// example:
	//
	// {"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}
	ParametersShrink *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the user who runs the command in a simple application server. The username cannot exceed 255 characters in length.
	//
	// 	- For Linux servers, the default value is the root username.
	//
	// 	- For Windows servers, the default value is the system username.
	//
	// You can change the user to run the command only for Linux simple application servers.
	//
	// example:
	//
	// test
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s InvokeCommandShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s InvokeCommandShrinkRequest) GoString() string {
	return s.String()
}

func (s *InvokeCommandShrinkRequest) GetCommandId() *string {
	return s.CommandId
}

func (s *InvokeCommandShrinkRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *InvokeCommandShrinkRequest) GetParametersShrink() *string {
	return s.ParametersShrink
}

func (s *InvokeCommandShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *InvokeCommandShrinkRequest) GetUsername() *string {
	return s.Username
}

func (s *InvokeCommandShrinkRequest) SetCommandId(v string) *InvokeCommandShrinkRequest {
	s.CommandId = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetInstanceIds(v string) *InvokeCommandShrinkRequest {
	s.InstanceIds = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetParametersShrink(v string) *InvokeCommandShrinkRequest {
	s.ParametersShrink = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetRegionId(v string) *InvokeCommandShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetUsername(v string) *InvokeCommandShrinkRequest {
	s.Username = &v
	return s
}

func (s *InvokeCommandShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iInvokeCommandResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInvokeId(v string) *InvokeCommandResponseBody
	GetInvokeId() *string
	SetRequestId(v string) *InvokeCommandResponseBody
	GetRequestId() *string
}

type InvokeCommandResponseBody struct {
	// The execution ID of the command.
	//
	// example:
	//
	// t-bj02prjhw1n****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InvokeCommandResponseBody) String() string {
	return dara.Prettify(s)
}

func (s InvokeCommandResponseBody) GoString() string {
	return s.String()
}

func (s *InvokeCommandResponseBody) GetInvokeId() *string {
	return s.InvokeId
}

func (s *InvokeCommandResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *InvokeCommandResponseBody) SetInvokeId(v string) *InvokeCommandResponseBody {
	s.InvokeId = &v
	return s
}

func (s *InvokeCommandResponseBody) SetRequestId(v string) *InvokeCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvokeCommandResponseBody) Validate() error {
	return dara.Validate(s)
}

type iInvokeCommandResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *InvokeCommandResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *InvokeCommandResponse
	GetStatusCode() *int32
	SetBody(v *InvokeCommandResponseBody) *InvokeCommandResponse
	GetBody() *InvokeCommandResponseBody
}

type InvokeCommandResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InvokeCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InvokeCommandResponse) String() string {
	return dara.Prettify(s)
}

func (s InvokeCommandResponse) GoString() string {
	return s.String()
}

func (s *InvokeCommandResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *InvokeCommandResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *InvokeCommandResponse) GetBody() *InvokeCommandResponseBody {
	return s.Body
}

func (s *InvokeCommandResponse) SetHeaders(v map[string]*string) *InvokeCommandResponse {
	s.Headers = v
	return s
}

func (s *InvokeCommandResponse) SetStatusCode(v int32) *InvokeCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *InvokeCommandResponse) SetBody(v *InvokeCommandResponseBody) *InvokeCommandResponse {
	s.Body = v
	return s
}

func (s *InvokeCommandResponse) Validate() error {
	return dara.Validate(s)
}

type iListCustomImageShareAccountsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ListCustomImageShareAccountsRequest
	GetClientToken() *string
	SetImageId(v string) *ListCustomImageShareAccountsRequest
	GetImageId() *string
	SetPageNumber(v int32) *ListCustomImageShareAccountsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListCustomImageShareAccountsRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListCustomImageShareAccountsRequest
	GetRegionId() *string
}

type ListCustomImageShareAccountsRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request?](https://help.aliyun.com/document_detail/25693.html)
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the shared custom image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-2zehv38jjmwva1ee****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 50.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListCustomImageShareAccountsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImageShareAccountsRequest) GoString() string {
	return s.String()
}

func (s *ListCustomImageShareAccountsRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ListCustomImageShareAccountsRequest) GetImageId() *string {
	return s.ImageId
}

func (s *ListCustomImageShareAccountsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListCustomImageShareAccountsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListCustomImageShareAccountsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListCustomImageShareAccountsRequest) SetClientToken(v string) *ListCustomImageShareAccountsRequest {
	s.ClientToken = &v
	return s
}

func (s *ListCustomImageShareAccountsRequest) SetImageId(v string) *ListCustomImageShareAccountsRequest {
	s.ImageId = &v
	return s
}

func (s *ListCustomImageShareAccountsRequest) SetPageNumber(v int32) *ListCustomImageShareAccountsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCustomImageShareAccountsRequest) SetPageSize(v int32) *ListCustomImageShareAccountsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomImageShareAccountsRequest) SetRegionId(v string) *ListCustomImageShareAccountsRequest {
	s.RegionId = &v
	return s
}

func (s *ListCustomImageShareAccountsRequest) Validate() error {
	return dara.Validate(s)
}

type iListCustomImageShareAccountsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetImageShareUsers(v []*ListCustomImageShareAccountsResponseBodyImageShareUsers) *ListCustomImageShareAccountsResponseBody
	GetImageShareUsers() []*ListCustomImageShareAccountsResponseBodyImageShareUsers
	SetPageNumber(v int32) *ListCustomImageShareAccountsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *ListCustomImageShareAccountsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *ListCustomImageShareAccountsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *ListCustomImageShareAccountsResponseBody
	GetTotalCount() *int32
}

type ListCustomImageShareAccountsResponseBody struct {
	// The information about the shared custom images.
	ImageShareUsers []*ListCustomImageShareAccountsResponseBodyImageShareUsers `json:"ImageShareUsers,omitempty" xml:"ImageShareUsers,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomImageShareAccountsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImageShareAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomImageShareAccountsResponseBody) GetImageShareUsers() []*ListCustomImageShareAccountsResponseBodyImageShareUsers {
	return s.ImageShareUsers
}

func (s *ListCustomImageShareAccountsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListCustomImageShareAccountsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListCustomImageShareAccountsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListCustomImageShareAccountsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *ListCustomImageShareAccountsResponseBody) SetImageShareUsers(v []*ListCustomImageShareAccountsResponseBodyImageShareUsers) *ListCustomImageShareAccountsResponseBody {
	s.ImageShareUsers = v
	return s
}

func (s *ListCustomImageShareAccountsResponseBody) SetPageNumber(v int32) *ListCustomImageShareAccountsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCustomImageShareAccountsResponseBody) SetPageSize(v int32) *ListCustomImageShareAccountsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCustomImageShareAccountsResponseBody) SetRequestId(v string) *ListCustomImageShareAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomImageShareAccountsResponseBody) SetTotalCount(v int32) *ListCustomImageShareAccountsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListCustomImageShareAccountsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListCustomImageShareAccountsResponseBodyImageShareUsers struct {
	// The time when the custom image is shared.
	//
	// example:
	//
	// 2024-07-15 13:59:21.0
	SharedTime *string `json:"SharedTime,omitempty" xml:"SharedTime,omitempty"`
	// The ID of the Alibaba Cloud account whose custom image is shared.
	//
	// example:
	//
	// 125111425233****
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListCustomImageShareAccountsResponseBodyImageShareUsers) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImageShareAccountsResponseBodyImageShareUsers) GoString() string {
	return s.String()
}

func (s *ListCustomImageShareAccountsResponseBodyImageShareUsers) GetSharedTime() *string {
	return s.SharedTime
}

func (s *ListCustomImageShareAccountsResponseBodyImageShareUsers) GetUserId() *int64 {
	return s.UserId
}

func (s *ListCustomImageShareAccountsResponseBodyImageShareUsers) SetSharedTime(v string) *ListCustomImageShareAccountsResponseBodyImageShareUsers {
	s.SharedTime = &v
	return s
}

func (s *ListCustomImageShareAccountsResponseBodyImageShareUsers) SetUserId(v int64) *ListCustomImageShareAccountsResponseBodyImageShareUsers {
	s.UserId = &v
	return s
}

func (s *ListCustomImageShareAccountsResponseBodyImageShareUsers) Validate() error {
	return dara.Validate(s)
}

type iListCustomImageShareAccountsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListCustomImageShareAccountsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListCustomImageShareAccountsResponse
	GetStatusCode() *int32
	SetBody(v *ListCustomImageShareAccountsResponseBody) *ListCustomImageShareAccountsResponse
	GetBody() *ListCustomImageShareAccountsResponseBody
}

type ListCustomImageShareAccountsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomImageShareAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomImageShareAccountsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImageShareAccountsResponse) GoString() string {
	return s.String()
}

func (s *ListCustomImageShareAccountsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListCustomImageShareAccountsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListCustomImageShareAccountsResponse) GetBody() *ListCustomImageShareAccountsResponseBody {
	return s.Body
}

func (s *ListCustomImageShareAccountsResponse) SetHeaders(v map[string]*string) *ListCustomImageShareAccountsResponse {
	s.Headers = v
	return s
}

func (s *ListCustomImageShareAccountsResponse) SetStatusCode(v int32) *ListCustomImageShareAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomImageShareAccountsResponse) SetBody(v *ListCustomImageShareAccountsResponseBody) *ListCustomImageShareAccountsResponse {
	s.Body = v
	return s
}

func (s *ListCustomImageShareAccountsResponse) Validate() error {
	return dara.Validate(s)
}

type iListCustomImagesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ListCustomImagesRequest
	GetClientToken() *string
	SetDataSnapshotId(v string) *ListCustomImagesRequest
	GetDataSnapshotId() *string
	SetImageIds(v string) *ListCustomImagesRequest
	GetImageIds() *string
	SetImageNames(v string) *ListCustomImagesRequest
	GetImageNames() *string
	SetInstanceId(v string) *ListCustomImagesRequest
	GetInstanceId() *string
	SetPageNumber(v int32) *ListCustomImagesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListCustomImagesRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListCustomImagesRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *ListCustomImagesRequest
	GetResourceGroupId() *string
	SetShare(v bool) *ListCustomImagesRequest
	GetShare() *bool
	SetSystemSnapshotId(v string) *ListCustomImagesRequest
	GetSystemSnapshotId() *string
	SetTag(v []*ListCustomImagesRequestTag) *ListCustomImagesRequest
	GetTag() []*ListCustomImagesRequestTag
}

type ListCustomImagesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data disk snapshot.
	//
	// example:
	//
	// s-acscasca****
	DataSnapshotId *string `json:"DataSnapshotId,omitempty" xml:"DataSnapshotId,omitempty"`
	// The image IDs of the simple application server. The value can be a JSON array that consists of up to 100 image IDs. Separate multiple image IDs with commas (,).
	//
	// example:
	//
	// ["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]
	ImageIds *string `json:"ImageIds,omitempty" xml:"ImageIds,omitempty"`
	// The image names of the simple application servers. The value can be a JSON array that consists of up to 100 image names. Separate multiple image names with commas (,).
	//
	// example:
	//
	// ["test1****", "test2****"]
	ImageNames *string `json:"ImageNames,omitempty" xml:"ImageNames,omitempty"`
	// The ID of the simple application server from which the image is derived.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// 	- Maximum value: 100.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application servers corresponding to the custom images. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aek2bti7cf7yj2i
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Specifies whether to query shared images. Valid values:
	//
	// 	- False: do not query shared images. The shared images are not included in the response.
	//
	// 	- True: query shared images. The shared images are included in the response.
	//
	// If you do not specify this parameter, all images are returned.
	//
	// example:
	//
	// False
	Share *bool `json:"Share,omitempty" xml:"Share,omitempty"`
	// The ID of the system disk snapshot.
	//
	// example:
	//
	// s-bp14m09pq8***0g6
	SystemSnapshotId *string `json:"SystemSnapshotId,omitempty" xml:"SystemSnapshotId,omitempty"`
	// Tag N of the custom image.
	Tag []*ListCustomImagesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListCustomImagesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImagesRequest) GoString() string {
	return s.String()
}

func (s *ListCustomImagesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ListCustomImagesRequest) GetDataSnapshotId() *string {
	return s.DataSnapshotId
}

func (s *ListCustomImagesRequest) GetImageIds() *string {
	return s.ImageIds
}

func (s *ListCustomImagesRequest) GetImageNames() *string {
	return s.ImageNames
}

func (s *ListCustomImagesRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListCustomImagesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListCustomImagesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListCustomImagesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListCustomImagesRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListCustomImagesRequest) GetShare() *bool {
	return s.Share
}

func (s *ListCustomImagesRequest) GetSystemSnapshotId() *string {
	return s.SystemSnapshotId
}

func (s *ListCustomImagesRequest) GetTag() []*ListCustomImagesRequestTag {
	return s.Tag
}

func (s *ListCustomImagesRequest) SetClientToken(v string) *ListCustomImagesRequest {
	s.ClientToken = &v
	return s
}

func (s *ListCustomImagesRequest) SetDataSnapshotId(v string) *ListCustomImagesRequest {
	s.DataSnapshotId = &v
	return s
}

func (s *ListCustomImagesRequest) SetImageIds(v string) *ListCustomImagesRequest {
	s.ImageIds = &v
	return s
}

func (s *ListCustomImagesRequest) SetImageNames(v string) *ListCustomImagesRequest {
	s.ImageNames = &v
	return s
}

func (s *ListCustomImagesRequest) SetInstanceId(v string) *ListCustomImagesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCustomImagesRequest) SetPageNumber(v int32) *ListCustomImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCustomImagesRequest) SetPageSize(v int32) *ListCustomImagesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomImagesRequest) SetRegionId(v string) *ListCustomImagesRequest {
	s.RegionId = &v
	return s
}

func (s *ListCustomImagesRequest) SetResourceGroupId(v string) *ListCustomImagesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListCustomImagesRequest) SetShare(v bool) *ListCustomImagesRequest {
	s.Share = &v
	return s
}

func (s *ListCustomImagesRequest) SetSystemSnapshotId(v string) *ListCustomImagesRequest {
	s.SystemSnapshotId = &v
	return s
}

func (s *ListCustomImagesRequest) SetTag(v []*ListCustomImagesRequestTag) *ListCustomImagesRequest {
	s.Tag = v
	return s
}

func (s *ListCustomImagesRequest) Validate() error {
	return dara.Validate(s)
}

type ListCustomImagesRequestTag struct {
	// The key of tag N. A tag key can be 1 to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N. A tag value can be up to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListCustomImagesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImagesRequestTag) GoString() string {
	return s.String()
}

func (s *ListCustomImagesRequestTag) GetKey() *string {
	return s.Key
}

func (s *ListCustomImagesRequestTag) GetValue() *string {
	return s.Value
}

func (s *ListCustomImagesRequestTag) SetKey(v string) *ListCustomImagesRequestTag {
	s.Key = &v
	return s
}

func (s *ListCustomImagesRequestTag) SetValue(v string) *ListCustomImagesRequestTag {
	s.Value = &v
	return s
}

func (s *ListCustomImagesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iListCustomImagesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCustomImages(v []*ListCustomImagesResponseBodyCustomImages) *ListCustomImagesResponseBody
	GetCustomImages() []*ListCustomImagesResponseBodyCustomImages
	SetPageNumber(v string) *ListCustomImagesResponseBody
	GetPageNumber() *string
	SetPageSize(v string) *ListCustomImagesResponseBody
	GetPageSize() *string
	SetRequestId(v string) *ListCustomImagesResponseBody
	GetRequestId() *string
	SetTotalCount(v string) *ListCustomImagesResponseBody
	GetTotalCount() *string
}

type ListCustomImagesResponseBody struct {
	// The array of queried custom images.
	CustomImages []*ListCustomImagesResponseBodyCustomImages `json:"CustomImages,omitempty" xml:"CustomImages,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 4
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomImagesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomImagesResponseBody) GetCustomImages() []*ListCustomImagesResponseBodyCustomImages {
	return s.CustomImages
}

func (s *ListCustomImagesResponseBody) GetPageNumber() *string {
	return s.PageNumber
}

func (s *ListCustomImagesResponseBody) GetPageSize() *string {
	return s.PageSize
}

func (s *ListCustomImagesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListCustomImagesResponseBody) GetTotalCount() *string {
	return s.TotalCount
}

func (s *ListCustomImagesResponseBody) SetCustomImages(v []*ListCustomImagesResponseBodyCustomImages) *ListCustomImagesResponseBody {
	s.CustomImages = v
	return s
}

func (s *ListCustomImagesResponseBody) SetPageNumber(v string) *ListCustomImagesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCustomImagesResponseBody) SetPageSize(v string) *ListCustomImagesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCustomImagesResponseBody) SetRequestId(v string) *ListCustomImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomImagesResponseBody) SetTotalCount(v string) *ListCustomImagesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListCustomImagesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListCustomImagesResponseBodyCustomImages struct {
	// The simple application servers created from the image.
	CreateInstances []*string `json:"CreateInstances,omitempty" xml:"CreateInstances,omitempty" type:"Repeated"`
	// The time when the snapshot was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is in UTC.
	//
	// example:
	//
	// 2022-10-09T02:28:06Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the data disk snapshot.
	//
	// example:
	//
	// s-bp19rn9u8eqzlfb***
	DataSnapshotId *string `json:"DataSnapshotId,omitempty" xml:"DataSnapshotId,omitempty"`
	// The name of the data disk snapshot.
	//
	// example:
	//
	// data disk snapshot
	DataSnapshotName *string `json:"DataSnapshotName,omitempty" xml:"DataSnapshotName,omitempty"`
	// The description of the custom image.
	//
	// example:
	//
	// test-custom-image
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the custom image.
	//
	// example:
	//
	// m-bp1e79zktg26n2b***
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// Indicates whether the custom image is shared to Elastic Compute Service (ECS).
	//
	// example:
	//
	// false
	InShare *bool `json:"InShare,omitempty" xml:"InShare,omitempty"`
	// Indicates whether the custom image is shared across accounts.
	//
	// example:
	//
	// False
	InShareUser *bool `json:"InShareUser,omitempty" xml:"InShareUser,omitempty"`
	// The ID of the simple application server from which the image is derived.
	//
	// example:
	//
	// 2d06ee0520b44de1ae88d4be****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the simple application server.
	//
	// example:
	//
	// swas-asdf23***
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The name of the custom image.
	//
	// example:
	//
	// hua
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The operating system type of the image.
	//
	// example:
	//
	// Linux
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The size of the image data disk. Unit: GiB.
	//
	// example:
	//
	// 20
	RequiredDataDiskSize *int32 `json:"RequiredDataDiskSize,omitempty" xml:"RequiredDataDiskSize,omitempty"`
	// The size of the image system disk. Unit: GiB.
	//
	// example:
	//
	// 20
	RequiredSystemDiskSize *int32 `json:"RequiredSystemDiskSize,omitempty" xml:"RequiredSystemDiskSize,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfm2h2lvp3ublq
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The name of the source image that is used to create the simple application server.
	//
	// example:
	//
	// CentOS
	SourceImageName *string `json:"SourceImageName,omitempty" xml:"SourceImageName,omitempty"`
	// The version of the source image that is used to create the simple application server.
	//
	// example:
	//
	// 8.0
	SourceImageVersion *string `json:"SourceImageVersion,omitempty" xml:"SourceImageVersion,omitempty"`
	// The status of the custom image. Valid values:
	//
	// 	- 0: copying
	//
	// 	- 1: available
	//
	// 	- 2: unavailable
	//
	// 	- 3: creation failed
	//
	// 	- 4: creating
	//
	// example:
	//
	// 1
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the system disk snapshot.
	//
	// example:
	//
	// s-bp1h173hj21puxb***
	SystemSnapshotId *string `json:"SystemSnapshotId,omitempty" xml:"SystemSnapshotId,omitempty"`
	// The name of the system disk snapshot.
	//
	// example:
	//
	// system disk snapshot
	SystemSnapshotName *string `json:"SystemSnapshotName,omitempty" xml:"SystemSnapshotName,omitempty"`
	// The tags of the custom image.
	Tags []*ListCustomImagesResponseBodyCustomImagesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the Alibaba Cloud account to which the image belongs.
	//
	// example:
	//
	// 180185828710****
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListCustomImagesResponseBodyCustomImages) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImagesResponseBodyCustomImages) GoString() string {
	return s.String()
}

func (s *ListCustomImagesResponseBodyCustomImages) GetCreateInstances() []*string {
	return s.CreateInstances
}

func (s *ListCustomImagesResponseBodyCustomImages) GetCreationTime() *string {
	return s.CreationTime
}

func (s *ListCustomImagesResponseBodyCustomImages) GetDataSnapshotId() *string {
	return s.DataSnapshotId
}

func (s *ListCustomImagesResponseBodyCustomImages) GetDataSnapshotName() *string {
	return s.DataSnapshotName
}

func (s *ListCustomImagesResponseBodyCustomImages) GetDescription() *string {
	return s.Description
}

func (s *ListCustomImagesResponseBodyCustomImages) GetImageId() *string {
	return s.ImageId
}

func (s *ListCustomImagesResponseBodyCustomImages) GetInShare() *bool {
	return s.InShare
}

func (s *ListCustomImagesResponseBodyCustomImages) GetInShareUser() *bool {
	return s.InShareUser
}

func (s *ListCustomImagesResponseBodyCustomImages) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListCustomImagesResponseBodyCustomImages) GetInstanceName() *string {
	return s.InstanceName
}

func (s *ListCustomImagesResponseBodyCustomImages) GetName() *string {
	return s.Name
}

func (s *ListCustomImagesResponseBodyCustomImages) GetOsType() *string {
	return s.OsType
}

func (s *ListCustomImagesResponseBodyCustomImages) GetRegionId() *string {
	return s.RegionId
}

func (s *ListCustomImagesResponseBodyCustomImages) GetRequiredDataDiskSize() *int32 {
	return s.RequiredDataDiskSize
}

func (s *ListCustomImagesResponseBodyCustomImages) GetRequiredSystemDiskSize() *int32 {
	return s.RequiredSystemDiskSize
}

func (s *ListCustomImagesResponseBodyCustomImages) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListCustomImagesResponseBodyCustomImages) GetSourceImageName() *string {
	return s.SourceImageName
}

func (s *ListCustomImagesResponseBodyCustomImages) GetSourceImageVersion() *string {
	return s.SourceImageVersion
}

func (s *ListCustomImagesResponseBodyCustomImages) GetStatus() *string {
	return s.Status
}

func (s *ListCustomImagesResponseBodyCustomImages) GetSystemSnapshotId() *string {
	return s.SystemSnapshotId
}

func (s *ListCustomImagesResponseBodyCustomImages) GetSystemSnapshotName() *string {
	return s.SystemSnapshotName
}

func (s *ListCustomImagesResponseBodyCustomImages) GetTags() []*ListCustomImagesResponseBodyCustomImagesTags {
	return s.Tags
}

func (s *ListCustomImagesResponseBodyCustomImages) GetUserId() *int64 {
	return s.UserId
}

func (s *ListCustomImagesResponseBodyCustomImages) SetCreateInstances(v []*string) *ListCustomImagesResponseBodyCustomImages {
	s.CreateInstances = v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetCreationTime(v string) *ListCustomImagesResponseBodyCustomImages {
	s.CreationTime = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetDataSnapshotId(v string) *ListCustomImagesResponseBodyCustomImages {
	s.DataSnapshotId = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetDataSnapshotName(v string) *ListCustomImagesResponseBodyCustomImages {
	s.DataSnapshotName = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetDescription(v string) *ListCustomImagesResponseBodyCustomImages {
	s.Description = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetImageId(v string) *ListCustomImagesResponseBodyCustomImages {
	s.ImageId = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetInShare(v bool) *ListCustomImagesResponseBodyCustomImages {
	s.InShare = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetInShareUser(v bool) *ListCustomImagesResponseBodyCustomImages {
	s.InShareUser = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetInstanceId(v string) *ListCustomImagesResponseBodyCustomImages {
	s.InstanceId = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetInstanceName(v string) *ListCustomImagesResponseBodyCustomImages {
	s.InstanceName = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetName(v string) *ListCustomImagesResponseBodyCustomImages {
	s.Name = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetOsType(v string) *ListCustomImagesResponseBodyCustomImages {
	s.OsType = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetRegionId(v string) *ListCustomImagesResponseBodyCustomImages {
	s.RegionId = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetRequiredDataDiskSize(v int32) *ListCustomImagesResponseBodyCustomImages {
	s.RequiredDataDiskSize = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetRequiredSystemDiskSize(v int32) *ListCustomImagesResponseBodyCustomImages {
	s.RequiredSystemDiskSize = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetResourceGroupId(v string) *ListCustomImagesResponseBodyCustomImages {
	s.ResourceGroupId = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetSourceImageName(v string) *ListCustomImagesResponseBodyCustomImages {
	s.SourceImageName = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetSourceImageVersion(v string) *ListCustomImagesResponseBodyCustomImages {
	s.SourceImageVersion = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetStatus(v string) *ListCustomImagesResponseBodyCustomImages {
	s.Status = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetSystemSnapshotId(v string) *ListCustomImagesResponseBodyCustomImages {
	s.SystemSnapshotId = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetSystemSnapshotName(v string) *ListCustomImagesResponseBodyCustomImages {
	s.SystemSnapshotName = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetTags(v []*ListCustomImagesResponseBodyCustomImagesTags) *ListCustomImagesResponseBodyCustomImages {
	s.Tags = v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) SetUserId(v int64) *ListCustomImagesResponseBodyCustomImages {
	s.UserId = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImages) Validate() error {
	return dara.Validate(s)
}

type ListCustomImagesResponseBodyCustomImagesTags struct {
	// The tag key of the custom image.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the custom image.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListCustomImagesResponseBodyCustomImagesTags) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImagesResponseBodyCustomImagesTags) GoString() string {
	return s.String()
}

func (s *ListCustomImagesResponseBodyCustomImagesTags) GetKey() *string {
	return s.Key
}

func (s *ListCustomImagesResponseBodyCustomImagesTags) GetValue() *string {
	return s.Value
}

func (s *ListCustomImagesResponseBodyCustomImagesTags) SetKey(v string) *ListCustomImagesResponseBodyCustomImagesTags {
	s.Key = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImagesTags) SetValue(v string) *ListCustomImagesResponseBodyCustomImagesTags {
	s.Value = &v
	return s
}

func (s *ListCustomImagesResponseBodyCustomImagesTags) Validate() error {
	return dara.Validate(s)
}

type iListCustomImagesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListCustomImagesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListCustomImagesResponse
	GetStatusCode() *int32
	SetBody(v *ListCustomImagesResponseBody) *ListCustomImagesResponse
	GetBody() *ListCustomImagesResponseBody
}

type ListCustomImagesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomImagesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListCustomImagesResponse) GoString() string {
	return s.String()
}

func (s *ListCustomImagesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListCustomImagesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListCustomImagesResponse) GetBody() *ListCustomImagesResponseBody {
	return s.Body
}

func (s *ListCustomImagesResponse) SetHeaders(v map[string]*string) *ListCustomImagesResponse {
	s.Headers = v
	return s
}

func (s *ListCustomImagesResponse) SetStatusCode(v int32) *ListCustomImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomImagesResponse) SetBody(v *ListCustomImagesResponseBody) *ListCustomImagesResponse {
	s.Body = v
	return s
}

func (s *ListCustomImagesResponse) Validate() error {
	return dara.Validate(s)
}

type iListDisksRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDiskIds(v string) *ListDisksRequest
	GetDiskIds() *string
	SetDiskType(v string) *ListDisksRequest
	GetDiskType() *string
	SetInstanceId(v string) *ListDisksRequest
	GetInstanceId() *string
	SetPageNumber(v int32) *ListDisksRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListDisksRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListDisksRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *ListDisksRequest
	GetResourceGroupId() *string
	SetTag(v []*ListDisksRequestTag) *ListDisksRequest
	GetTag() []*ListDisksRequestTag
}

type ListDisksRequest struct {
	// The IDs of the disks. The value can be a JSON array that consists of up to 100 disk IDs. Separate multiple disk IDs with commas (,).
	//
	// example:
	//
	// ["d-bp14wq0149cpp2x****", "d-bp14wq0149cpp2y****"]
	DiskIds *string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	// The disk type. Valid values:
	//
	// 	- system: system disk
	//
	// 	- data: data disk
	//
	// By default, system disks and data disks are both queried.
	//
	// example:
	//
	// System
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the disks.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags that are added to the disks.
	Tag []*ListDisksRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListDisksRequest) String() string {
	return dara.Prettify(s)
}

func (s ListDisksRequest) GoString() string {
	return s.String()
}

func (s *ListDisksRequest) GetDiskIds() *string {
	return s.DiskIds
}

func (s *ListDisksRequest) GetDiskType() *string {
	return s.DiskType
}

func (s *ListDisksRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListDisksRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListDisksRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListDisksRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListDisksRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListDisksRequest) GetTag() []*ListDisksRequestTag {
	return s.Tag
}

func (s *ListDisksRequest) SetDiskIds(v string) *ListDisksRequest {
	s.DiskIds = &v
	return s
}

func (s *ListDisksRequest) SetDiskType(v string) *ListDisksRequest {
	s.DiskType = &v
	return s
}

func (s *ListDisksRequest) SetInstanceId(v string) *ListDisksRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDisksRequest) SetPageNumber(v int32) *ListDisksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDisksRequest) SetPageSize(v int32) *ListDisksRequest {
	s.PageSize = &v
	return s
}

func (s *ListDisksRequest) SetRegionId(v string) *ListDisksRequest {
	s.RegionId = &v
	return s
}

func (s *ListDisksRequest) SetResourceGroupId(v string) *ListDisksRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListDisksRequest) SetTag(v []*ListDisksRequestTag) *ListDisksRequest {
	s.Tag = v
	return s
}

func (s *ListDisksRequest) Validate() error {
	return dara.Validate(s)
}

type ListDisksRequestTag struct {
	// The tag key. The tag key can be up to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value. The tag value can be up to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDisksRequestTag) String() string {
	return dara.Prettify(s)
}

func (s ListDisksRequestTag) GoString() string {
	return s.String()
}

func (s *ListDisksRequestTag) GetKey() *string {
	return s.Key
}

func (s *ListDisksRequestTag) GetValue() *string {
	return s.Value
}

func (s *ListDisksRequestTag) SetKey(v string) *ListDisksRequestTag {
	s.Key = &v
	return s
}

func (s *ListDisksRequestTag) SetValue(v string) *ListDisksRequestTag {
	s.Value = &v
	return s
}

func (s *ListDisksRequestTag) Validate() error {
	return dara.Validate(s)
}

type iListDisksResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDisks(v []*ListDisksResponseBodyDisks) *ListDisksResponseBody
	GetDisks() []*ListDisksResponseBodyDisks
	SetPageNumber(v int32) *ListDisksResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *ListDisksResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *ListDisksResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *ListDisksResponseBody
	GetTotalCount() *int32
}

type ListDisksResponseBody struct {
	// The queried disks.
	Disks []*ListDisksResponseBodyDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDisksResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListDisksResponseBody) GoString() string {
	return s.String()
}

func (s *ListDisksResponseBody) GetDisks() []*ListDisksResponseBodyDisks {
	return s.Disks
}

func (s *ListDisksResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListDisksResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListDisksResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListDisksResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *ListDisksResponseBody) SetDisks(v []*ListDisksResponseBodyDisks) *ListDisksResponseBody {
	s.Disks = v
	return s
}

func (s *ListDisksResponseBody) SetPageNumber(v int32) *ListDisksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListDisksResponseBody) SetPageSize(v int32) *ListDisksResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListDisksResponseBody) SetRequestId(v string) *ListDisksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDisksResponseBody) SetTotalCount(v int32) *ListDisksResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListDisksResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListDisksResponseBodyDisks struct {
	// The category of the disk. Valid values:
	//
	// 	- ESSD: enhanced SSD (ESSD) of PL0
	//
	// 	- SSD: standard SSD
	//
	// 	- CLOUD_EFFICIENCY: ultra disk
	//
	// example:
	//
	// ESSD
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time when the disk was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-03-08T05:31:06Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The device name of the disk after the disk is attached to the simple application server.
	//
	// example:
	//
	// /dev/xvda
	Device *string `json:"Device,omitempty" xml:"Device,omitempty"`
	// The billing method of the disk.
	//
	// example:
	//
	// PrePaid
	DiskChargeType *string `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	// The disk ID.
	//
	// example:
	//
	// d-bp14wq0149cpp2x****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// SystemDisk
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	// The disk type. Valid values:
	//
	// 	- system: system disk
	//
	// 	- data: data disk
	//
	// example:
	//
	// System
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The ID of the simple application server to which the disk is attached.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the simple application server.
	//
	// example:
	//
	// myInstance
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the disk.
	//
	// example:
	//
	// remark
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the resource group to which the disk belongs.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The size of the disk. Unit: GB.
	//
	// example:
	//
	// 50
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The status of the disk. Valid values:
	//
	// 	- ReIniting: The disk is being initialized.
	//
	// 	- Creating: The disk is being created.
	//
	// 	- In_use: The disk is in use.
	//
	// 	- Available: The disk can be attached.
	//
	// 	- Attaching: The disk is being attached.
	//
	// 	- Detaching: The disk is being detached.
	//
	// example:
	//
	// In_use
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags that are added to the disks.
	Tags []*ListDisksResponseBodyDisksTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListDisksResponseBodyDisks) String() string {
	return dara.Prettify(s)
}

func (s ListDisksResponseBodyDisks) GoString() string {
	return s.String()
}

func (s *ListDisksResponseBodyDisks) GetCategory() *string {
	return s.Category
}

func (s *ListDisksResponseBodyDisks) GetCreationTime() *string {
	return s.CreationTime
}

func (s *ListDisksResponseBodyDisks) GetDevice() *string {
	return s.Device
}

func (s *ListDisksResponseBodyDisks) GetDiskChargeType() *string {
	return s.DiskChargeType
}

func (s *ListDisksResponseBodyDisks) GetDiskId() *string {
	return s.DiskId
}

func (s *ListDisksResponseBodyDisks) GetDiskName() *string {
	return s.DiskName
}

func (s *ListDisksResponseBodyDisks) GetDiskType() *string {
	return s.DiskType
}

func (s *ListDisksResponseBodyDisks) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListDisksResponseBodyDisks) GetInstanceName() *string {
	return s.InstanceName
}

func (s *ListDisksResponseBodyDisks) GetRegionId() *string {
	return s.RegionId
}

func (s *ListDisksResponseBodyDisks) GetRemark() *string {
	return s.Remark
}

func (s *ListDisksResponseBodyDisks) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListDisksResponseBodyDisks) GetSize() *int32 {
	return s.Size
}

func (s *ListDisksResponseBodyDisks) GetStatus() *string {
	return s.Status
}

func (s *ListDisksResponseBodyDisks) GetTags() []*ListDisksResponseBodyDisksTags {
	return s.Tags
}

func (s *ListDisksResponseBodyDisks) SetCategory(v string) *ListDisksResponseBodyDisks {
	s.Category = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetCreationTime(v string) *ListDisksResponseBodyDisks {
	s.CreationTime = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetDevice(v string) *ListDisksResponseBodyDisks {
	s.Device = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetDiskChargeType(v string) *ListDisksResponseBodyDisks {
	s.DiskChargeType = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetDiskId(v string) *ListDisksResponseBodyDisks {
	s.DiskId = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetDiskName(v string) *ListDisksResponseBodyDisks {
	s.DiskName = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetDiskType(v string) *ListDisksResponseBodyDisks {
	s.DiskType = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetInstanceId(v string) *ListDisksResponseBodyDisks {
	s.InstanceId = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetInstanceName(v string) *ListDisksResponseBodyDisks {
	s.InstanceName = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetRegionId(v string) *ListDisksResponseBodyDisks {
	s.RegionId = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetRemark(v string) *ListDisksResponseBodyDisks {
	s.Remark = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetResourceGroupId(v string) *ListDisksResponseBodyDisks {
	s.ResourceGroupId = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetSize(v int32) *ListDisksResponseBodyDisks {
	s.Size = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetStatus(v string) *ListDisksResponseBodyDisks {
	s.Status = &v
	return s
}

func (s *ListDisksResponseBodyDisks) SetTags(v []*ListDisksResponseBodyDisksTags) *ListDisksResponseBodyDisks {
	s.Tags = v
	return s
}

func (s *ListDisksResponseBodyDisks) Validate() error {
	return dara.Validate(s)
}

type ListDisksResponseBodyDisksTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDisksResponseBodyDisksTags) String() string {
	return dara.Prettify(s)
}

func (s ListDisksResponseBodyDisksTags) GoString() string {
	return s.String()
}

func (s *ListDisksResponseBodyDisksTags) GetKey() *string {
	return s.Key
}

func (s *ListDisksResponseBodyDisksTags) GetValue() *string {
	return s.Value
}

func (s *ListDisksResponseBodyDisksTags) SetKey(v string) *ListDisksResponseBodyDisksTags {
	s.Key = &v
	return s
}

func (s *ListDisksResponseBodyDisksTags) SetValue(v string) *ListDisksResponseBodyDisksTags {
	s.Value = &v
	return s
}

func (s *ListDisksResponseBodyDisksTags) Validate() error {
	return dara.Validate(s)
}

type iListDisksResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListDisksResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListDisksResponse
	GetStatusCode() *int32
	SetBody(v *ListDisksResponseBody) *ListDisksResponse
	GetBody() *ListDisksResponseBody
}

type ListDisksResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDisksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDisksResponse) String() string {
	return dara.Prettify(s)
}

func (s ListDisksResponse) GoString() string {
	return s.String()
}

func (s *ListDisksResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListDisksResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListDisksResponse) GetBody() *ListDisksResponseBody {
	return s.Body
}

func (s *ListDisksResponse) SetHeaders(v map[string]*string) *ListDisksResponse {
	s.Headers = v
	return s
}

func (s *ListDisksResponse) SetStatusCode(v int32) *ListDisksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDisksResponse) SetBody(v *ListDisksResponseBody) *ListDisksResponse {
	s.Body = v
	return s
}

func (s *ListDisksResponse) Validate() error {
	return dara.Validate(s)
}

type iListFirewallRulesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallRuleId(v string) *ListFirewallRulesRequest
	GetFirewallRuleId() *string
	SetInstanceId(v string) *ListFirewallRulesRequest
	GetInstanceId() *string
	SetPageNumber(v int32) *ListFirewallRulesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListFirewallRulesRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListFirewallRulesRequest
	GetRegionId() *string
	SetTag(v []*ListFirewallRulesRequestTag) *ListFirewallRulesRequest
	GetTag() []*ListFirewallRulesRequestTag
}

type ListFirewallRulesRequest struct {
	// The ID of the firewall rule.
	//
	// example:
	//
	// 1a16263ab0f541288312a15fa64280de
	FirewallRuleId *string `json:"FirewallRuleId,omitempty" xml:"FirewallRuleId,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number.
	//
	// Pages start from page 1.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags of the firewall rule.
	Tag []*ListFirewallRulesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListFirewallRulesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListFirewallRulesRequest) GoString() string {
	return s.String()
}

func (s *ListFirewallRulesRequest) GetFirewallRuleId() *string {
	return s.FirewallRuleId
}

func (s *ListFirewallRulesRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListFirewallRulesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListFirewallRulesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListFirewallRulesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListFirewallRulesRequest) GetTag() []*ListFirewallRulesRequestTag {
	return s.Tag
}

func (s *ListFirewallRulesRequest) SetFirewallRuleId(v string) *ListFirewallRulesRequest {
	s.FirewallRuleId = &v
	return s
}

func (s *ListFirewallRulesRequest) SetInstanceId(v string) *ListFirewallRulesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListFirewallRulesRequest) SetPageNumber(v int32) *ListFirewallRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFirewallRulesRequest) SetPageSize(v int32) *ListFirewallRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListFirewallRulesRequest) SetRegionId(v string) *ListFirewallRulesRequest {
	s.RegionId = &v
	return s
}

func (s *ListFirewallRulesRequest) SetTag(v []*ListFirewallRulesRequestTag) *ListFirewallRulesRequest {
	s.Tag = v
	return s
}

func (s *ListFirewallRulesRequest) Validate() error {
	return dara.Validate(s)
}

type ListFirewallRulesRequestTag struct {
	// The tag key. A tag key must be 1 to 64 characters in length. You can add up to 20 tags.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value. A tag value must be 1 to 64 characters in length. You can add up to 20 tags.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListFirewallRulesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s ListFirewallRulesRequestTag) GoString() string {
	return s.String()
}

func (s *ListFirewallRulesRequestTag) GetKey() *string {
	return s.Key
}

func (s *ListFirewallRulesRequestTag) GetValue() *string {
	return s.Value
}

func (s *ListFirewallRulesRequestTag) SetKey(v string) *ListFirewallRulesRequestTag {
	s.Key = &v
	return s
}

func (s *ListFirewallRulesRequestTag) SetValue(v string) *ListFirewallRulesRequestTag {
	s.Value = &v
	return s
}

func (s *ListFirewallRulesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iListFirewallRulesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetFirewallRules(v []*ListFirewallRulesResponseBodyFirewallRules) *ListFirewallRulesResponseBody
	GetFirewallRules() []*ListFirewallRulesResponseBodyFirewallRules
	SetPageNumber(v int32) *ListFirewallRulesResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *ListFirewallRulesResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *ListFirewallRulesResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *ListFirewallRulesResponseBody
	GetTotalCount() *int32
}

type ListFirewallRulesResponseBody struct {
	// Details of the firewall rules.
	FirewallRules []*ListFirewallRulesResponseBodyFirewallRules `json:"FirewallRules,omitempty" xml:"FirewallRules,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFirewallRulesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListFirewallRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListFirewallRulesResponseBody) GetFirewallRules() []*ListFirewallRulesResponseBodyFirewallRules {
	return s.FirewallRules
}

func (s *ListFirewallRulesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListFirewallRulesResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListFirewallRulesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListFirewallRulesResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *ListFirewallRulesResponseBody) SetFirewallRules(v []*ListFirewallRulesResponseBodyFirewallRules) *ListFirewallRulesResponseBody {
	s.FirewallRules = v
	return s
}

func (s *ListFirewallRulesResponseBody) SetPageNumber(v int32) *ListFirewallRulesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFirewallRulesResponseBody) SetPageSize(v int32) *ListFirewallRulesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFirewallRulesResponseBody) SetRequestId(v string) *ListFirewallRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFirewallRulesResponseBody) SetTotalCount(v int32) *ListFirewallRulesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListFirewallRulesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListFirewallRulesResponseBodyFirewallRules struct {
	// The firewall policy. Valid values:
	//
	// 	- accept: Access is allowed.
	//
	// 	- drop: Access is refused.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The port range.
	//
	// example:
	//
	// 3306
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// TEST
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the firewall rule.
	//
	// example:
	//
	// eeea34d9867b4d55a4ff8d5fcfbd****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The transport layer protocol. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The source CIDR block.
	//
	// example:
	//
	// 0.0.0.0/0
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	// The tags of the firewall rule.
	Tags []*ListFirewallRulesResponseBodyFirewallRulesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListFirewallRulesResponseBodyFirewallRules) String() string {
	return dara.Prettify(s)
}

func (s ListFirewallRulesResponseBodyFirewallRules) GoString() string {
	return s.String()
}

func (s *ListFirewallRulesResponseBodyFirewallRules) GetPolicy() *string {
	return s.Policy
}

func (s *ListFirewallRulesResponseBodyFirewallRules) GetPort() *string {
	return s.Port
}

func (s *ListFirewallRulesResponseBodyFirewallRules) GetRemark() *string {
	return s.Remark
}

func (s *ListFirewallRulesResponseBodyFirewallRules) GetRuleId() *string {
	return s.RuleId
}

func (s *ListFirewallRulesResponseBodyFirewallRules) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *ListFirewallRulesResponseBodyFirewallRules) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *ListFirewallRulesResponseBodyFirewallRules) GetTags() []*ListFirewallRulesResponseBodyFirewallRulesTags {
	return s.Tags
}

func (s *ListFirewallRulesResponseBodyFirewallRules) SetPolicy(v string) *ListFirewallRulesResponseBodyFirewallRules {
	s.Policy = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRules) SetPort(v string) *ListFirewallRulesResponseBodyFirewallRules {
	s.Port = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRules) SetRemark(v string) *ListFirewallRulesResponseBodyFirewallRules {
	s.Remark = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRules) SetRuleId(v string) *ListFirewallRulesResponseBodyFirewallRules {
	s.RuleId = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRules) SetRuleProtocol(v string) *ListFirewallRulesResponseBodyFirewallRules {
	s.RuleProtocol = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRules) SetSourceCidrIp(v string) *ListFirewallRulesResponseBodyFirewallRules {
	s.SourceCidrIp = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRules) SetTags(v []*ListFirewallRulesResponseBodyFirewallRulesTags) *ListFirewallRulesResponseBodyFirewallRules {
	s.Tags = v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRules) Validate() error {
	return dara.Validate(s)
}

type ListFirewallRulesResponseBodyFirewallRulesTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListFirewallRulesResponseBodyFirewallRulesTags) String() string {
	return dara.Prettify(s)
}

func (s ListFirewallRulesResponseBodyFirewallRulesTags) GoString() string {
	return s.String()
}

func (s *ListFirewallRulesResponseBodyFirewallRulesTags) GetKey() *string {
	return s.Key
}

func (s *ListFirewallRulesResponseBodyFirewallRulesTags) GetValue() *string {
	return s.Value
}

func (s *ListFirewallRulesResponseBodyFirewallRulesTags) SetKey(v string) *ListFirewallRulesResponseBodyFirewallRulesTags {
	s.Key = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRulesTags) SetValue(v string) *ListFirewallRulesResponseBodyFirewallRulesTags {
	s.Value = &v
	return s
}

func (s *ListFirewallRulesResponseBodyFirewallRulesTags) Validate() error {
	return dara.Validate(s)
}

type iListFirewallRulesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListFirewallRulesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListFirewallRulesResponse
	GetStatusCode() *int32
	SetBody(v *ListFirewallRulesResponseBody) *ListFirewallRulesResponse
	GetBody() *ListFirewallRulesResponseBody
}

type ListFirewallRulesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFirewallRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFirewallRulesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListFirewallRulesResponse) GoString() string {
	return s.String()
}

func (s *ListFirewallRulesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListFirewallRulesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListFirewallRulesResponse) GetBody() *ListFirewallRulesResponseBody {
	return s.Body
}

func (s *ListFirewallRulesResponse) SetHeaders(v map[string]*string) *ListFirewallRulesResponse {
	s.Headers = v
	return s
}

func (s *ListFirewallRulesResponse) SetStatusCode(v int32) *ListFirewallRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFirewallRulesResponse) SetBody(v *ListFirewallRulesResponseBody) *ListFirewallRulesResponse {
	s.Body = v
	return s
}

func (s *ListFirewallRulesResponse) Validate() error {
	return dara.Validate(s)
}

type iListImagesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetImageIds(v string) *ListImagesRequest
	GetImageIds() *string
	SetImageType(v string) *ListImagesRequest
	GetImageType() *string
	SetRegionId(v string) *ListImagesRequest
	GetRegionId() *string
}

type ListImagesRequest struct {
	// The image IDs. The value can be a JSON array that consists of up to 50 image IDs. Format: `["xxx", "yyy", … "zzz"]`. Separate multiple image IDs with commas (,).
	//
	// example:
	//
	// ["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]
	ImageIds *string `json:"ImageIds,omitempty" xml:"ImageIds,omitempty"`
	// The type of the images. Valid values:
	//
	// 	- system: OS images
	//
	// 	- app: application images
	//
	// 	- custom: custom images
	//
	// example:
	//
	// system
	ImageType *string `json:"ImageType,omitempty" xml:"ImageType,omitempty"`
	// The region ID of the images. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListImagesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListImagesRequest) GoString() string {
	return s.String()
}

func (s *ListImagesRequest) GetImageIds() *string {
	return s.ImageIds
}

func (s *ListImagesRequest) GetImageType() *string {
	return s.ImageType
}

func (s *ListImagesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListImagesRequest) SetImageIds(v string) *ListImagesRequest {
	s.ImageIds = &v
	return s
}

func (s *ListImagesRequest) SetImageType(v string) *ListImagesRequest {
	s.ImageType = &v
	return s
}

func (s *ListImagesRequest) SetRegionId(v string) *ListImagesRequest {
	s.RegionId = &v
	return s
}

func (s *ListImagesRequest) Validate() error {
	return dara.Validate(s)
}

type iListImagesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetImages(v []*ListImagesResponseBodyImages) *ListImagesResponseBody
	GetImages() []*ListImagesResponseBodyImages
	SetRequestId(v string) *ListImagesResponseBody
	GetRequestId() *string
}

type ListImagesResponseBody struct {
	// Details of the queried images.
	Images []*ListImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListImagesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListImagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListImagesResponseBody) GetImages() []*ListImagesResponseBodyImages {
	return s.Images
}

func (s *ListImagesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListImagesResponseBody) SetImages(v []*ListImagesResponseBodyImages) *ListImagesResponseBody {
	s.Images = v
	return s
}

func (s *ListImagesResponseBody) SetRequestId(v string) *ListImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListImagesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListImagesResponseBodyImages struct {
	// The description of the image.
	//
	// example:
	//
	// Apps ImageOS ImageCustom Images
	//
	// WordPress is a popular and powerful platform that allows you to build blogs and content management websites and implement custom features by using third-party templates and plug-ins. This WordPress image is built based on CentOS 7.9, PHP 7.4, MySQL 5.7, and Apache 2.4.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// 794c230fd3e64ea19f83f4d7a0ad****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// WordPress-4.8.1
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The type of the image. Valid values:
	//
	// 	- system
	//
	// 	- app
	//
	// 	- custom
	//
	// example:
	//
	// app
	ImageType *string `json:"ImageType,omitempty" xml:"ImageType,omitempty"`
	// The operating system type of the image. Valid values:
	//
	// 	- Linux
	//
	// 	- Windows
	//
	// example:
	//
	// Linux
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
}

func (s ListImagesResponseBodyImages) String() string {
	return dara.Prettify(s)
}

func (s ListImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *ListImagesResponseBodyImages) GetDescription() *string {
	return s.Description
}

func (s *ListImagesResponseBodyImages) GetImageId() *string {
	return s.ImageId
}

func (s *ListImagesResponseBodyImages) GetImageName() *string {
	return s.ImageName
}

func (s *ListImagesResponseBodyImages) GetImageType() *string {
	return s.ImageType
}

func (s *ListImagesResponseBodyImages) GetPlatform() *string {
	return s.Platform
}

func (s *ListImagesResponseBodyImages) SetDescription(v string) *ListImagesResponseBodyImages {
	s.Description = &v
	return s
}

func (s *ListImagesResponseBodyImages) SetImageId(v string) *ListImagesResponseBodyImages {
	s.ImageId = &v
	return s
}

func (s *ListImagesResponseBodyImages) SetImageName(v string) *ListImagesResponseBodyImages {
	s.ImageName = &v
	return s
}

func (s *ListImagesResponseBodyImages) SetImageType(v string) *ListImagesResponseBodyImages {
	s.ImageType = &v
	return s
}

func (s *ListImagesResponseBodyImages) SetPlatform(v string) *ListImagesResponseBodyImages {
	s.Platform = &v
	return s
}

func (s *ListImagesResponseBodyImages) Validate() error {
	return dara.Validate(s)
}

type iListImagesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListImagesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListImagesResponse
	GetStatusCode() *int32
	SetBody(v *ListImagesResponseBody) *ListImagesResponse
	GetBody() *ListImagesResponseBody
}

type ListImagesResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListImagesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListImagesResponse) GoString() string {
	return s.String()
}

func (s *ListImagesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListImagesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListImagesResponse) GetBody() *ListImagesResponseBody {
	return s.Body
}

func (s *ListImagesResponse) SetHeaders(v map[string]*string) *ListImagesResponse {
	s.Headers = v
	return s
}

func (s *ListImagesResponse) SetStatusCode(v int32) *ListImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListImagesResponse) SetBody(v *ListImagesResponseBody) *ListImagesResponse {
	s.Body = v
	return s
}

func (s *ListImagesResponse) Validate() error {
	return dara.Validate(s)
}

type iListInstancePlansModificationRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceId(v string) *ListInstancePlansModificationRequest
	GetInstanceId() *string
	SetRegionId(v string) *ListInstancePlansModificationRequest
	GetRegionId() *string
}

type ListInstancePlansModificationRequest struct {
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListInstancePlansModificationRequest) String() string {
	return dara.Prettify(s)
}

func (s ListInstancePlansModificationRequest) GoString() string {
	return s.String()
}

func (s *ListInstancePlansModificationRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListInstancePlansModificationRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListInstancePlansModificationRequest) SetInstanceId(v string) *ListInstancePlansModificationRequest {
	s.InstanceId = &v
	return s
}

func (s *ListInstancePlansModificationRequest) SetRegionId(v string) *ListInstancePlansModificationRequest {
	s.RegionId = &v
	return s
}

func (s *ListInstancePlansModificationRequest) Validate() error {
	return dara.Validate(s)
}

type iListInstancePlansModificationResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetPlans(v []*ListInstancePlansModificationResponseBodyPlans) *ListInstancePlansModificationResponseBody
	GetPlans() []*ListInstancePlansModificationResponseBodyPlans
	SetRequestId(v string) *ListInstancePlansModificationResponseBody
	GetRequestId() *string
}

type ListInstancePlansModificationResponseBody struct {
	// The operating system types supported by the plan.
	Plans []*ListInstancePlansModificationResponseBodyPlans `json:"Plans,omitempty" xml:"Plans,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInstancePlansModificationResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListInstancePlansModificationResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancePlansModificationResponseBody) GetPlans() []*ListInstancePlansModificationResponseBodyPlans {
	return s.Plans
}

func (s *ListInstancePlansModificationResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListInstancePlansModificationResponseBody) SetPlans(v []*ListInstancePlansModificationResponseBodyPlans) *ListInstancePlansModificationResponseBody {
	s.Plans = v
	return s
}

func (s *ListInstancePlansModificationResponseBody) SetRequestId(v string) *ListInstancePlansModificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstancePlansModificationResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListInstancePlansModificationResponseBodyPlans struct {
	// The peak bandwidth. Unit: Mbit/s.
	//
	// example:
	//
	// 3
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 2
	Core *int32 `json:"Core,omitempty" xml:"Core,omitempty"`
	// The unit of the plan price. Valid values:
	//
	// 	- CNY
	//
	// 	- USD
	//
	// example:
	//
	// CNY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The disk size of the simple application server. Unit: GB.
	//
	// example:
	//
	// 40
	DiskSize *int32 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The category of the disk. Valid values:
	//
	// 	- SSD: standard SSD
	//
	// 	- ESSD: enhanced SSD
	//
	// example:
	//
	// ESSD
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The monthly data transfer quota. Unit: GB.
	//
	// example:
	//
	// 400
	Flow *int32 `json:"Flow,omitempty" xml:"Flow,omitempty"`
	// The memory size. Unit: GB.
	//
	// example:
	//
	// 1
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The price of the plan.
	//
	// example:
	//
	// 60
	OriginPrice *float64 `json:"OriginPrice,omitempty" xml:"OriginPrice,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// swas.s2.c2m1s40b3t04
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The operating system types supported by the plan.
	//
	// example:
	//
	// ["Linux","Windows"]
	SupportPlatform *string `json:"SupportPlatform,omitempty" xml:"SupportPlatform,omitempty"`
}

func (s ListInstancePlansModificationResponseBodyPlans) String() string {
	return dara.Prettify(s)
}

func (s ListInstancePlansModificationResponseBodyPlans) GoString() string {
	return s.String()
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetBandwidth() *int32 {
	return s.Bandwidth
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetCore() *int32 {
	return s.Core
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetCurrency() *string {
	return s.Currency
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetDiskSize() *int32 {
	return s.DiskSize
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetDiskType() *string {
	return s.DiskType
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetFlow() *int32 {
	return s.Flow
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetMemory() *int32 {
	return s.Memory
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetOriginPrice() *float64 {
	return s.OriginPrice
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetPlanId() *string {
	return s.PlanId
}

func (s *ListInstancePlansModificationResponseBodyPlans) GetSupportPlatform() *string {
	return s.SupportPlatform
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetBandwidth(v int32) *ListInstancePlansModificationResponseBodyPlans {
	s.Bandwidth = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetCore(v int32) *ListInstancePlansModificationResponseBodyPlans {
	s.Core = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetCurrency(v string) *ListInstancePlansModificationResponseBodyPlans {
	s.Currency = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetDiskSize(v int32) *ListInstancePlansModificationResponseBodyPlans {
	s.DiskSize = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetDiskType(v string) *ListInstancePlansModificationResponseBodyPlans {
	s.DiskType = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetFlow(v int32) *ListInstancePlansModificationResponseBodyPlans {
	s.Flow = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetMemory(v int32) *ListInstancePlansModificationResponseBodyPlans {
	s.Memory = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetOriginPrice(v float64) *ListInstancePlansModificationResponseBodyPlans {
	s.OriginPrice = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetPlanId(v string) *ListInstancePlansModificationResponseBodyPlans {
	s.PlanId = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) SetSupportPlatform(v string) *ListInstancePlansModificationResponseBodyPlans {
	s.SupportPlatform = &v
	return s
}

func (s *ListInstancePlansModificationResponseBodyPlans) Validate() error {
	return dara.Validate(s)
}

type iListInstancePlansModificationResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListInstancePlansModificationResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListInstancePlansModificationResponse
	GetStatusCode() *int32
	SetBody(v *ListInstancePlansModificationResponseBody) *ListInstancePlansModificationResponse
	GetBody() *ListInstancePlansModificationResponseBody
}

type ListInstancePlansModificationResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstancePlansModificationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstancePlansModificationResponse) String() string {
	return dara.Prettify(s)
}

func (s ListInstancePlansModificationResponse) GoString() string {
	return s.String()
}

func (s *ListInstancePlansModificationResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListInstancePlansModificationResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListInstancePlansModificationResponse) GetBody() *ListInstancePlansModificationResponseBody {
	return s.Body
}

func (s *ListInstancePlansModificationResponse) SetHeaders(v map[string]*string) *ListInstancePlansModificationResponse {
	s.Headers = v
	return s
}

func (s *ListInstancePlansModificationResponse) SetStatusCode(v int32) *ListInstancePlansModificationResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstancePlansModificationResponse) SetBody(v *ListInstancePlansModificationResponseBody) *ListInstancePlansModificationResponse {
	s.Body = v
	return s
}

func (s *ListInstancePlansModificationResponse) Validate() error {
	return dara.Validate(s)
}

type iListInstanceStatusRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIds(v string) *ListInstanceStatusRequest
	GetInstanceIds() *string
	SetPageNumber(v int32) *ListInstanceStatusRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListInstanceStatusRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListInstanceStatusRequest
	GetRegionId() *string
}

type ListInstanceStatusRequest struct {
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListInstanceStatusRequest) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceStatusRequest) GoString() string {
	return s.String()
}

func (s *ListInstanceStatusRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *ListInstanceStatusRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListInstanceStatusRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListInstanceStatusRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListInstanceStatusRequest) SetInstanceIds(v string) *ListInstanceStatusRequest {
	s.InstanceIds = &v
	return s
}

func (s *ListInstanceStatusRequest) SetPageNumber(v int32) *ListInstanceStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInstanceStatusRequest) SetPageSize(v int32) *ListInstanceStatusRequest {
	s.PageSize = &v
	return s
}

func (s *ListInstanceStatusRequest) SetRegionId(v string) *ListInstanceStatusRequest {
	s.RegionId = &v
	return s
}

func (s *ListInstanceStatusRequest) Validate() error {
	return dara.Validate(s)
}

type iListInstanceStatusResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceStatuses(v []*ListInstanceStatusResponseBodyInstanceStatuses) *ListInstanceStatusResponseBody
	GetInstanceStatuses() []*ListInstanceStatusResponseBodyInstanceStatuses
	SetPageNumber(v int32) *ListInstanceStatusResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *ListInstanceStatusResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *ListInstanceStatusResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *ListInstanceStatusResponseBody
	GetTotalCount() *int32
}

type ListInstanceStatusResponseBody struct {
	// The ID of the simple application server.
	InstanceStatuses []*ListInstanceStatusResponseBodyInstanceStatuses `json:"InstanceStatuses,omitempty" xml:"InstanceStatuses,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 54
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInstanceStatusResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstanceStatusResponseBody) GetInstanceStatuses() []*ListInstanceStatusResponseBodyInstanceStatuses {
	return s.InstanceStatuses
}

func (s *ListInstanceStatusResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListInstanceStatusResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListInstanceStatusResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListInstanceStatusResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *ListInstanceStatusResponseBody) SetInstanceStatuses(v []*ListInstanceStatusResponseBodyInstanceStatuses) *ListInstanceStatusResponseBody {
	s.InstanceStatuses = v
	return s
}

func (s *ListInstanceStatusResponseBody) SetPageNumber(v int32) *ListInstanceStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListInstanceStatusResponseBody) SetPageSize(v int32) *ListInstanceStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListInstanceStatusResponseBody) SetRequestId(v string) *ListInstanceStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstanceStatusResponseBody) SetTotalCount(v int32) *ListInstanceStatusResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListInstanceStatusResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListInstanceStatusResponseBodyInstanceStatuses struct {
	// The ID of the simple application server.
	//
	// example:
	//
	// a9a6474b935d41bcb531250bb5d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The status of the simple application server. Valid values:
	//
	// 	- Pending
	//
	// 	- Starting
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Stopped
	//
	// 	- Resetting
	//
	// 	- Upgrading
	//
	// 	- Disabled
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListInstanceStatusResponseBodyInstanceStatuses) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceStatusResponseBodyInstanceStatuses) GoString() string {
	return s.String()
}

func (s *ListInstanceStatusResponseBodyInstanceStatuses) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListInstanceStatusResponseBodyInstanceStatuses) GetStatus() *string {
	return s.Status
}

func (s *ListInstanceStatusResponseBodyInstanceStatuses) SetInstanceId(v string) *ListInstanceStatusResponseBodyInstanceStatuses {
	s.InstanceId = &v
	return s
}

func (s *ListInstanceStatusResponseBodyInstanceStatuses) SetStatus(v string) *ListInstanceStatusResponseBodyInstanceStatuses {
	s.Status = &v
	return s
}

func (s *ListInstanceStatusResponseBodyInstanceStatuses) Validate() error {
	return dara.Validate(s)
}

type iListInstanceStatusResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListInstanceStatusResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListInstanceStatusResponse
	GetStatusCode() *int32
	SetBody(v *ListInstanceStatusResponseBody) *ListInstanceStatusResponse
	GetBody() *ListInstanceStatusResponseBody
}

type ListInstanceStatusResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstanceStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstanceStatusResponse) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceStatusResponse) GoString() string {
	return s.String()
}

func (s *ListInstanceStatusResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListInstanceStatusResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListInstanceStatusResponse) GetBody() *ListInstanceStatusResponseBody {
	return s.Body
}

func (s *ListInstanceStatusResponse) SetHeaders(v map[string]*string) *ListInstanceStatusResponse {
	s.Headers = v
	return s
}

func (s *ListInstanceStatusResponse) SetStatusCode(v int32) *ListInstanceStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstanceStatusResponse) SetBody(v *ListInstanceStatusResponseBody) *ListInstanceStatusResponse {
	s.Body = v
	return s
}

func (s *ListInstanceStatusResponse) Validate() error {
	return dara.Validate(s)
}

type iListInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetChargeType(v string) *ListInstancesRequest
	GetChargeType() *string
	SetInstanceIds(v string) *ListInstancesRequest
	GetInstanceIds() *string
	SetInstanceName(v string) *ListInstancesRequest
	GetInstanceName() *string
	SetPageNumber(v int32) *ListInstancesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListInstancesRequest
	GetPageSize() *int32
	SetPlanType(v string) *ListInstancesRequest
	GetPlanType() *string
	SetPublicIpAddresses(v string) *ListInstancesRequest
	GetPublicIpAddresses() *string
	SetRegionId(v string) *ListInstancesRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *ListInstancesRequest
	GetResourceGroupId() *string
	SetStatus(v string) *ListInstancesRequest
	GetStatus() *string
	SetTag(v []*ListInstancesRequestTag) *ListInstancesRequest
	GetTag() []*ListInstancesRequestTag
}

type ListInstancesRequest struct {
	// The billing method of the simple application servers. Set the value to PrePaid, which indicates the subscription billing method.
	//
	// Default value: PrePaid.
	//
	// example:
	//
	// PrePaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).
	//
	// > If you specify both `InstanceIds` and `PublicIpAddresses`, make sure that the specified IDs and the specified public IP addresses belong to the same simple application servers. Otherwise, an empty result is returned.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The name of the simple application server. Fuzzy search with the asterisk (\\*) wildcard is supported.
	//
	// example:
	//
	// test
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	// The public IP addresses of the simple application servers. The value can be a JSON array that consists of up to 100 IP addresses. Separate multiple IP addresses with commas (,).
	//
	// > If you specify both `InstanceIds` and `PublicIpAddresses`, make sure that the specified IDs and the specified public IP addresses belong to the same simple application servers. Otherwise, an empty result is returned.
	//
	// example:
	//
	// ["``42.1.**.**``", "``42.2.**.**``"]
	PublicIpAddresses *string `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty"`
	// The region ID of the simple application servers.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the simple application servers belong.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The status of the simple application servers. Valid values:
	//
	// 	- Pending
	//
	// 	- Starting
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Stopped
	//
	// 	- Resetting
	//
	// 	- Upgrading
	//
	// 	- Disabled
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags that are added to the simple application servers.
	Tag []*ListInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListInstancesRequest) GetChargeType() *string {
	return s.ChargeType
}

func (s *ListInstancesRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *ListInstancesRequest) GetInstanceName() *string {
	return s.InstanceName
}

func (s *ListInstancesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListInstancesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListInstancesRequest) GetPlanType() *string {
	return s.PlanType
}

func (s *ListInstancesRequest) GetPublicIpAddresses() *string {
	return s.PublicIpAddresses
}

func (s *ListInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListInstancesRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListInstancesRequest) GetStatus() *string {
	return s.Status
}

func (s *ListInstancesRequest) GetTag() []*ListInstancesRequestTag {
	return s.Tag
}

func (s *ListInstancesRequest) SetChargeType(v string) *ListInstancesRequest {
	s.ChargeType = &v
	return s
}

func (s *ListInstancesRequest) SetInstanceIds(v string) *ListInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *ListInstancesRequest) SetInstanceName(v string) *ListInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *ListInstancesRequest) SetPageNumber(v int32) *ListInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesRequest) SetPageSize(v int32) *ListInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListInstancesRequest) SetPlanType(v string) *ListInstancesRequest {
	s.PlanType = &v
	return s
}

func (s *ListInstancesRequest) SetPublicIpAddresses(v string) *ListInstancesRequest {
	s.PublicIpAddresses = &v
	return s
}

func (s *ListInstancesRequest) SetRegionId(v string) *ListInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ListInstancesRequest) SetResourceGroupId(v string) *ListInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListInstancesRequest) SetStatus(v string) *ListInstancesRequest {
	s.Status = &v
	return s
}

func (s *ListInstancesRequest) SetTag(v []*ListInstancesRequestTag) *ListInstancesRequest {
	s.Tag = v
	return s
}

func (s *ListInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type ListInstancesRequestTag struct {
	// The tag key of the simple application servers. A tag key can be 1 to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// test
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the simple application servers. A tag value can be 1 to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// 01
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListInstancesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *ListInstancesRequestTag) GetKey() *string {
	return s.Key
}

func (s *ListInstancesRequestTag) GetValue() *string {
	return s.Value
}

func (s *ListInstancesRequestTag) SetKey(v string) *ListInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *ListInstancesRequestTag) SetValue(v string) *ListInstancesRequestTag {
	s.Value = &v
	return s
}

func (s *ListInstancesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iListInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInstances(v []*ListInstancesResponseBodyInstances) *ListInstancesResponseBody
	GetInstances() []*ListInstancesResponseBodyInstances
	SetPageNumber(v int32) *ListInstancesResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *ListInstancesResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *ListInstancesResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *ListInstancesResponseBody
	GetTotalCount() *int32
}

type ListInstancesResponseBody struct {
	// Details about the queried simple application servers.
	Instances []*ListInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBody) GetInstances() []*ListInstancesResponseBodyInstances {
	return s.Instances
}

func (s *ListInstancesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListInstancesResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListInstancesResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *ListInstancesResponseBody) SetInstances(v []*ListInstancesResponseBodyInstances) *ListInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *ListInstancesResponseBody) SetPageNumber(v int32) *ListInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesResponseBody) SetPageSize(v int32) *ListInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListInstancesResponseBody) SetRequestId(v string) *ListInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstancesResponseBody) SetTotalCount(v int32) *ListInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListInstancesResponseBodyInstances struct {
	// The status of the server. Valid values:
	//
	// 	- Normal: The server is normal.
	//
	// 	- Expired: The server expires.
	//
	// 	- Overdue: The payment of the server is overdue.
	//
	// example:
	//
	// Normal
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The billing method of the simple application server.
	//
	// example:
	//
	// PrePaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// Indicates whether the simple application server uses a bundle plan.
	//
	// example:
	//
	// false
	Combination *bool `json:"Combination,omitempty" xml:"Combination,omitempty"`
	// The ID of the simple application server that uses a bundle plan.
	//
	// example:
	//
	// com-f6c9a22****45b5b8de68ad608af1ba
	CombinationInstanceId *string `json:"CombinationInstanceId,omitempty" xml:"CombinationInstanceId,omitempty"`
	// The time when the simple application server was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-03-08T05:31:06Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The DDoS protection status of the server. Valid values:
	//
	// 	- Normal: The DDoS protection status of the server is normal.
	//
	// 	- BlackHole: The server is in blackhole filtering.
	//
	// 	- Defense: The server is being scrubbed.
	//
	// example:
	//
	// Normal
	DdosStatus *string `json:"DdosStatus,omitempty" xml:"DdosStatus,omitempty"`
	// The reason why the server is disabled. Valid values:
	//
	// 	- FINANCIAL: The server is locked due to overdue payments.
	//
	// 	- SECURITY: The server is locked for security reasons.
	//
	// 	- EXPIRED: The server is expired.
	//
	// example:
	//
	// EXPIRED
	DisableReason *string `json:"DisableReason,omitempty" xml:"DisableReason,omitempty"`
	// The information about the disks on the simple application server.
	Disks []*ListInstancesResponseBodyInstancesDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
	// The time when the simple application server expires. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-05-08T16:00:00Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The description of the image.
	Image *ListInstancesResponseBodyInstancesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Struct"`
	// The ID of the image.
	//
	// example:
	//
	// fe9c66133a9d4688872869726b52****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The private IP address of the simple application server.
	//
	// example:
	//
	// 172.26.XX.XX
	InnerIpAddress *string `json:"InnerIpAddress,omitempty" xml:"InnerIpAddress,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the simple application server.
	//
	// example:
	//
	// test-InstanceName
	InstanceName      *string                                                `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	NetworkAttributes []*ListInstancesResponseBodyInstancesNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Repeated"`
	// The ID of the instance plan.
	//
	// example:
	//
	// swas.s2.c2m2s50b4t08
	PlanId   *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	// The public IP address.
	//
	// example:
	//
	// 42.1.XX.XX
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the server belongs.
	//
	// example:
	//
	// rg-aekz7jmhg5s****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The specifications of the resources on the simple application server.
	ResourceSpec *ListInstancesResponseBodyInstancesResourceSpec `json:"ResourceSpec,omitempty" xml:"ResourceSpec,omitempty" type:"Struct"`
	// The status of the simple application server. Valid values:
	//
	// 	- Pending: The server is being prepared.
	//
	// 	- Starting: The server is being started.
	//
	// 	- Running: The server is running.
	//
	// 	- Stopping: The server is being stopped.
	//
	// 	- Stopped: The server is stopped.
	//
	// 	- Resetting: The server is being reset.
	//
	// 	- Upgrading: The server is being upgraded.
	//
	// 	- Disabled: The server is not available.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags that are added to the simple application server.
	Tags []*ListInstancesResponseBodyInstancesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The universally unique identifier (UUID) of the simple application server.
	//
	// example:
	//
	// 41f30524-5df7-49c9-9c6e-32****489001
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ListInstancesResponseBodyInstances) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstances) GetBusinessStatus() *string {
	return s.BusinessStatus
}

func (s *ListInstancesResponseBodyInstances) GetChargeType() *string {
	return s.ChargeType
}

func (s *ListInstancesResponseBodyInstances) GetCombination() *bool {
	return s.Combination
}

func (s *ListInstancesResponseBodyInstances) GetCombinationInstanceId() *string {
	return s.CombinationInstanceId
}

func (s *ListInstancesResponseBodyInstances) GetCreationTime() *string {
	return s.CreationTime
}

func (s *ListInstancesResponseBodyInstances) GetDdosStatus() *string {
	return s.DdosStatus
}

func (s *ListInstancesResponseBodyInstances) GetDisableReason() *string {
	return s.DisableReason
}

func (s *ListInstancesResponseBodyInstances) GetDisks() []*ListInstancesResponseBodyInstancesDisks {
	return s.Disks
}

func (s *ListInstancesResponseBodyInstances) GetExpiredTime() *string {
	return s.ExpiredTime
}

func (s *ListInstancesResponseBodyInstances) GetImage() *ListInstancesResponseBodyInstancesImage {
	return s.Image
}

func (s *ListInstancesResponseBodyInstances) GetImageId() *string {
	return s.ImageId
}

func (s *ListInstancesResponseBodyInstances) GetInnerIpAddress() *string {
	return s.InnerIpAddress
}

func (s *ListInstancesResponseBodyInstances) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListInstancesResponseBodyInstances) GetInstanceName() *string {
	return s.InstanceName
}

func (s *ListInstancesResponseBodyInstances) GetNetworkAttributes() []*ListInstancesResponseBodyInstancesNetworkAttributes {
	return s.NetworkAttributes
}

func (s *ListInstancesResponseBodyInstances) GetPlanId() *string {
	return s.PlanId
}

func (s *ListInstancesResponseBodyInstances) GetPlanType() *string {
	return s.PlanType
}

func (s *ListInstancesResponseBodyInstances) GetPublicIpAddress() *string {
	return s.PublicIpAddress
}

func (s *ListInstancesResponseBodyInstances) GetRegionId() *string {
	return s.RegionId
}

func (s *ListInstancesResponseBodyInstances) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListInstancesResponseBodyInstances) GetResourceSpec() *ListInstancesResponseBodyInstancesResourceSpec {
	return s.ResourceSpec
}

func (s *ListInstancesResponseBodyInstances) GetStatus() *string {
	return s.Status
}

func (s *ListInstancesResponseBodyInstances) GetTags() []*ListInstancesResponseBodyInstancesTags {
	return s.Tags
}

func (s *ListInstancesResponseBodyInstances) GetUuid() *string {
	return s.Uuid
}

func (s *ListInstancesResponseBodyInstances) SetBusinessStatus(v string) *ListInstancesResponseBodyInstances {
	s.BusinessStatus = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetChargeType(v string) *ListInstancesResponseBodyInstances {
	s.ChargeType = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetCombination(v bool) *ListInstancesResponseBodyInstances {
	s.Combination = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetCombinationInstanceId(v string) *ListInstancesResponseBodyInstances {
	s.CombinationInstanceId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetCreationTime(v string) *ListInstancesResponseBodyInstances {
	s.CreationTime = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetDdosStatus(v string) *ListInstancesResponseBodyInstances {
	s.DdosStatus = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetDisableReason(v string) *ListInstancesResponseBodyInstances {
	s.DisableReason = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetDisks(v []*ListInstancesResponseBodyInstancesDisks) *ListInstancesResponseBodyInstances {
	s.Disks = v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetExpiredTime(v string) *ListInstancesResponseBodyInstances {
	s.ExpiredTime = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetImage(v *ListInstancesResponseBodyInstancesImage) *ListInstancesResponseBodyInstances {
	s.Image = v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetImageId(v string) *ListInstancesResponseBodyInstances {
	s.ImageId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetInnerIpAddress(v string) *ListInstancesResponseBodyInstances {
	s.InnerIpAddress = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetInstanceId(v string) *ListInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetInstanceName(v string) *ListInstancesResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetNetworkAttributes(v []*ListInstancesResponseBodyInstancesNetworkAttributes) *ListInstancesResponseBodyInstances {
	s.NetworkAttributes = v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetPlanId(v string) *ListInstancesResponseBodyInstances {
	s.PlanId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetPlanType(v string) *ListInstancesResponseBodyInstances {
	s.PlanType = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetPublicIpAddress(v string) *ListInstancesResponseBodyInstances {
	s.PublicIpAddress = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetRegionId(v string) *ListInstancesResponseBodyInstances {
	s.RegionId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetResourceGroupId(v string) *ListInstancesResponseBodyInstances {
	s.ResourceGroupId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetResourceSpec(v *ListInstancesResponseBodyInstancesResourceSpec) *ListInstancesResponseBodyInstances {
	s.ResourceSpec = v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetStatus(v string) *ListInstancesResponseBodyInstances {
	s.Status = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetTags(v []*ListInstancesResponseBodyInstancesTags) *ListInstancesResponseBodyInstances {
	s.Tags = v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetUuid(v string) *ListInstancesResponseBodyInstances {
	s.Uuid = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) Validate() error {
	return dara.Validate(s)
}

type ListInstancesResponseBodyInstancesDisks struct {
	// The category of the disk. Valid values:
	//
	// 	- ESSD: ESSD of PL0
	//
	// 	- SSD: standard SSD
	//
	// 	- CLOUD_EFFICIENCY: an ultra disk.
	//
	// example:
	//
	// ESSD
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time when the simple application server was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-02-24T02:20:10Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The device name of the disk after the disk is attached to the simple application server.
	//
	// example:
	//
	// /dev/xvda
	Device *string `json:"Device,omitempty" xml:"Device,omitempty"`
	// The billing method of the disk.
	//
	// example:
	//
	// PrePaid
	DiskChargeType *string `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	// The disk ID.
	//
	// example:
	//
	// d-bp14wq0149cpp2x****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The disk name.
	//
	// example:
	//
	// SystemDisk
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	// The tags that are added to the disk.
	DiskTags []*ListInstancesResponseBodyInstancesDisksDiskTags `json:"DiskTags,omitempty" xml:"DiskTags,omitempty" type:"Repeated"`
	// The type of the disk. Valid values:
	//
	// 	- system: system disk.
	//
	// 	- data: data disk.
	//
	// example:
	//
	// system
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the disk.
	//
	// example:
	//
	// remark
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the resource group to which the disk belongs.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The size of the disk. Unit: GiB.
	//
	// example:
	//
	// 50
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The status of the disk. Valid values:
	//
	// 	- ReIniting: The disk is being initialized.
	//
	// 	- Creating: The disk is being created.
	//
	// 	- In_use: The disk is in use.
	//
	// 	- Available: The disk can be attached.
	//
	// 	- Attaching: The disk is being attached.
	//
	// 	- Detaching: The disk is being detached.
	//
	// example:
	//
	// In_use
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListInstancesResponseBodyInstancesDisks) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBodyInstancesDisks) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstancesDisks) GetCategory() *string {
	return s.Category
}

func (s *ListInstancesResponseBodyInstancesDisks) GetCreationTime() *string {
	return s.CreationTime
}

func (s *ListInstancesResponseBodyInstancesDisks) GetDevice() *string {
	return s.Device
}

func (s *ListInstancesResponseBodyInstancesDisks) GetDiskChargeType() *string {
	return s.DiskChargeType
}

func (s *ListInstancesResponseBodyInstancesDisks) GetDiskId() *string {
	return s.DiskId
}

func (s *ListInstancesResponseBodyInstancesDisks) GetDiskName() *string {
	return s.DiskName
}

func (s *ListInstancesResponseBodyInstancesDisks) GetDiskTags() []*ListInstancesResponseBodyInstancesDisksDiskTags {
	return s.DiskTags
}

func (s *ListInstancesResponseBodyInstancesDisks) GetDiskType() *string {
	return s.DiskType
}

func (s *ListInstancesResponseBodyInstancesDisks) GetRegionId() *string {
	return s.RegionId
}

func (s *ListInstancesResponseBodyInstancesDisks) GetRemark() *string {
	return s.Remark
}

func (s *ListInstancesResponseBodyInstancesDisks) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListInstancesResponseBodyInstancesDisks) GetSize() *int32 {
	return s.Size
}

func (s *ListInstancesResponseBodyInstancesDisks) GetStatus() *string {
	return s.Status
}

func (s *ListInstancesResponseBodyInstancesDisks) SetCategory(v string) *ListInstancesResponseBodyInstancesDisks {
	s.Category = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetCreationTime(v string) *ListInstancesResponseBodyInstancesDisks {
	s.CreationTime = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetDevice(v string) *ListInstancesResponseBodyInstancesDisks {
	s.Device = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetDiskChargeType(v string) *ListInstancesResponseBodyInstancesDisks {
	s.DiskChargeType = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetDiskId(v string) *ListInstancesResponseBodyInstancesDisks {
	s.DiskId = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetDiskName(v string) *ListInstancesResponseBodyInstancesDisks {
	s.DiskName = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetDiskTags(v []*ListInstancesResponseBodyInstancesDisksDiskTags) *ListInstancesResponseBodyInstancesDisks {
	s.DiskTags = v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetDiskType(v string) *ListInstancesResponseBodyInstancesDisks {
	s.DiskType = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetRegionId(v string) *ListInstancesResponseBodyInstancesDisks {
	s.RegionId = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetRemark(v string) *ListInstancesResponseBodyInstancesDisks {
	s.Remark = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetResourceGroupId(v string) *ListInstancesResponseBodyInstancesDisks {
	s.ResourceGroupId = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetSize(v int32) *ListInstancesResponseBodyInstancesDisks {
	s.Size = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) SetStatus(v string) *ListInstancesResponseBodyInstancesDisks {
	s.Status = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisks) Validate() error {
	return dara.Validate(s)
}

type ListInstancesResponseBodyInstancesDisksDiskTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListInstancesResponseBodyInstancesDisksDiskTags) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBodyInstancesDisksDiskTags) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstancesDisksDiskTags) GetKey() *string {
	return s.Key
}

func (s *ListInstancesResponseBodyInstancesDisksDiskTags) GetValue() *string {
	return s.Value
}

func (s *ListInstancesResponseBodyInstancesDisksDiskTags) SetKey(v string) *ListInstancesResponseBodyInstancesDisksDiskTags {
	s.Key = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisksDiskTags) SetValue(v string) *ListInstancesResponseBodyInstancesDisksDiskTags {
	s.Value = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesDisksDiskTags) Validate() error {
	return dara.Validate(s)
}

type ListInstancesResponseBodyInstancesImage struct {
	// The image provider.
	//
	// example:
	//
	// https://selfs****e.console.aliyun.com/ticket/createIndex
	ImageContact *string `json:"ImageContact,omitempty" xml:"ImageContact,omitempty"`
	// The URL of the image icon.
	//
	// example:
	//
	// https://img.alicdn.com/imgextra/i3/O****1vdh9651ReKqWNMI2I_!!6000000002136****-24-24.svg
	ImageIconUrl *string `json:"ImageIconUrl,omitempty" xml:"ImageIconUrl,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// test-custom-1686536882356
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The type of the image. Valid values:
	//
	// 	- system
	//
	// 	- app
	//
	// 	- custom
	//
	// example:
	//
	// system
	ImageType *string `json:"ImageType,omitempty" xml:"ImageType,omitempty"`
	// The image tag.
	//
	// example:
	//
	// V3.5
	ImageVersion *string `json:"ImageVersion,omitempty" xml:"ImageVersion,omitempty"`
	// The OS.
	//
	// example:
	//
	// windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
}

func (s ListInstancesResponseBodyInstancesImage) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBodyInstancesImage) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstancesImage) GetImageContact() *string {
	return s.ImageContact
}

func (s *ListInstancesResponseBodyInstancesImage) GetImageIconUrl() *string {
	return s.ImageIconUrl
}

func (s *ListInstancesResponseBodyInstancesImage) GetImageName() *string {
	return s.ImageName
}

func (s *ListInstancesResponseBodyInstancesImage) GetImageType() *string {
	return s.ImageType
}

func (s *ListInstancesResponseBodyInstancesImage) GetImageVersion() *string {
	return s.ImageVersion
}

func (s *ListInstancesResponseBodyInstancesImage) GetOsType() *string {
	return s.OsType
}

func (s *ListInstancesResponseBodyInstancesImage) SetImageContact(v string) *ListInstancesResponseBodyInstancesImage {
	s.ImageContact = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesImage) SetImageIconUrl(v string) *ListInstancesResponseBodyInstancesImage {
	s.ImageIconUrl = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesImage) SetImageName(v string) *ListInstancesResponseBodyInstancesImage {
	s.ImageName = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesImage) SetImageType(v string) *ListInstancesResponseBodyInstancesImage {
	s.ImageType = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesImage) SetImageVersion(v string) *ListInstancesResponseBodyInstancesImage {
	s.ImageVersion = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesImage) SetOsType(v string) *ListInstancesResponseBodyInstancesImage {
	s.OsType = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesImage) Validate() error {
	return dara.Validate(s)
}

type ListInstancesResponseBodyInstancesNetworkAttributes struct {
	PeakBandwidth      *int32  `json:"PeakBandwidth,omitempty" xml:"PeakBandwidth,omitempty"`
	PrivateIpAddress   *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	PublicIpAddress    *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
	PublicIpDdosStatus *string `json:"PublicIpDdosStatus,omitempty" xml:"PublicIpDdosStatus,omitempty"`
}

func (s ListInstancesResponseBodyInstancesNetworkAttributes) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBodyInstancesNetworkAttributes) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) GetPeakBandwidth() *int32 {
	return s.PeakBandwidth
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) GetPrivateIpAddress() *string {
	return s.PrivateIpAddress
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) GetPublicIpAddress() *string {
	return s.PublicIpAddress
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) GetPublicIpDdosStatus() *string {
	return s.PublicIpDdosStatus
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) SetPeakBandwidth(v int32) *ListInstancesResponseBodyInstancesNetworkAttributes {
	s.PeakBandwidth = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) SetPrivateIpAddress(v string) *ListInstancesResponseBodyInstancesNetworkAttributes {
	s.PrivateIpAddress = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) SetPublicIpAddress(v string) *ListInstancesResponseBodyInstancesNetworkAttributes {
	s.PublicIpAddress = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) SetPublicIpDdosStatus(v string) *ListInstancesResponseBodyInstancesNetworkAttributes {
	s.PublicIpDdosStatus = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesNetworkAttributes) Validate() error {
	return dara.Validate(s)
}

type ListInstancesResponseBodyInstancesResourceSpec struct {
	// The bandwidth. Unit: Mbit/s.
	//
	// example:
	//
	// 5
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The number of vCPUs of the simple application server.
	//
	// example:
	//
	// 2
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The category of the disk. Valid values:
	//
	// 	- ESSD: enhanced SSD (ESSD) of PL0
	//
	// 	- SSD: standard SSD
	//
	// 	- CLOUD_EFFICIENCY: ultra disk
	//
	// example:
	//
	// cloud_efficiency
	DiskCategory *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	// The size of the disk. Unit: GiB.
	//
	// example:
	//
	// 60
	DiskSize *int32 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The amount of the traffic.
	//
	// 	- A value of 0 indicates the traffic amount of a bandwidth-based simple application server.
	//
	// 	- A non-zero value indicates the traffic amount of a data transfer plan-based simple application server.
	//
	// example:
	//
	// 818
	Flow *float64 `json:"Flow,omitempty" xml:"Flow,omitempty"`
	// The size of the memory. Unit: GiB.
	//
	// example:
	//
	// 2
	Memory *float64 `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s ListInstancesResponseBodyInstancesResourceSpec) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBodyInstancesResourceSpec) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) GetBandwidth() *int32 {
	return s.Bandwidth
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) GetCpu() *int32 {
	return s.Cpu
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) GetDiskCategory() *string {
	return s.DiskCategory
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) GetDiskSize() *int32 {
	return s.DiskSize
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) GetFlow() *float64 {
	return s.Flow
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) GetMemory() *float64 {
	return s.Memory
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) SetBandwidth(v int32) *ListInstancesResponseBodyInstancesResourceSpec {
	s.Bandwidth = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) SetCpu(v int32) *ListInstancesResponseBodyInstancesResourceSpec {
	s.Cpu = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) SetDiskCategory(v string) *ListInstancesResponseBodyInstancesResourceSpec {
	s.DiskCategory = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) SetDiskSize(v int32) *ListInstancesResponseBodyInstancesResourceSpec {
	s.DiskSize = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) SetFlow(v float64) *ListInstancesResponseBodyInstancesResourceSpec {
	s.Flow = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) SetMemory(v float64) *ListInstancesResponseBodyInstancesResourceSpec {
	s.Memory = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesResourceSpec) Validate() error {
	return dara.Validate(s)
}

type ListInstancesResponseBodyInstancesTags struct {
	// The tag key of the simple application server.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the simple application server.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListInstancesResponseBodyInstancesTags) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponseBodyInstancesTags) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstancesTags) GetKey() *string {
	return s.Key
}

func (s *ListInstancesResponseBodyInstancesTags) GetValue() *string {
	return s.Value
}

func (s *ListInstancesResponseBodyInstancesTags) SetKey(v string) *ListInstancesResponseBodyInstancesTags {
	s.Key = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesTags) SetValue(v string) *ListInstancesResponseBodyInstancesTags {
	s.Value = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesTags) Validate() error {
	return dara.Validate(s)
}

type iListInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListInstancesResponse
	GetStatusCode() *int32
	SetBody(v *ListInstancesResponseBody) *ListInstancesResponse
	GetBody() *ListInstancesResponseBody
}

type ListInstancesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListInstancesResponse) GetBody() *ListInstancesResponseBody {
	return s.Body
}

func (s *ListInstancesResponse) SetHeaders(v map[string]*string) *ListInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesResponse) SetStatusCode(v int32) *ListInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstancesResponse) SetBody(v *ListInstancesResponseBody) *ListInstancesResponse {
	s.Body = v
	return s
}

func (s *ListInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iListInstancesTrafficPackagesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceIds(v string) *ListInstancesTrafficPackagesRequest
	GetInstanceIds() *string
	SetRegionId(v string) *ListInstancesTrafficPackagesRequest
	GetRegionId() *string
}

type ListInstancesTrafficPackagesRequest struct {
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListInstancesTrafficPackagesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesTrafficPackagesRequest) GoString() string {
	return s.String()
}

func (s *ListInstancesTrafficPackagesRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *ListInstancesTrafficPackagesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListInstancesTrafficPackagesRequest) SetInstanceIds(v string) *ListInstancesTrafficPackagesRequest {
	s.InstanceIds = &v
	return s
}

func (s *ListInstancesTrafficPackagesRequest) SetRegionId(v string) *ListInstancesTrafficPackagesRequest {
	s.RegionId = &v
	return s
}

func (s *ListInstancesTrafficPackagesRequest) Validate() error {
	return dara.Validate(s)
}

type iListInstancesTrafficPackagesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceTrafficPackageUsages(v []*ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) *ListInstancesTrafficPackagesResponseBody
	GetInstanceTrafficPackageUsages() []*ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages
	SetRequestId(v string) *ListInstancesTrafficPackagesResponseBody
	GetRequestId() *string
}

type ListInstancesTrafficPackagesResponseBody struct {
	// The data transfers that exceed the quota of the data transfer plan in the current month. Unit: bytes.
	InstanceTrafficPackageUsages []*ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages `json:"InstanceTrafficPackageUsages,omitempty" xml:"InstanceTrafficPackageUsages,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInstancesTrafficPackagesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesTrafficPackagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesTrafficPackagesResponseBody) GetInstanceTrafficPackageUsages() []*ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages {
	return s.InstanceTrafficPackageUsages
}

func (s *ListInstancesTrafficPackagesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListInstancesTrafficPackagesResponseBody) SetInstanceTrafficPackageUsages(v []*ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) *ListInstancesTrafficPackagesResponseBody {
	s.InstanceTrafficPackageUsages = v
	return s
}

func (s *ListInstancesTrafficPackagesResponseBody) SetRequestId(v string) *ListInstancesTrafficPackagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstancesTrafficPackagesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages struct {
	// The ID of the simple application server.
	//
	// example:
	//
	// ccscqwqwqqqw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The data transfers that exceeds the quota of the data transfer plan in the current month. Unit: Byte.
	//
	// example:
	//
	// 0
	TrafficOverflow *int64 `json:"TrafficOverflow,omitempty" xml:"TrafficOverflow,omitempty"`
	// The unused quota of the data transfer plan in the current month. Unit: Byte.
	//
	// example:
	//
	// 10000
	TrafficPackageRemaining *int64 `json:"TrafficPackageRemaining,omitempty" xml:"TrafficPackageRemaining,omitempty"`
	// The quota of the data transfer plan in the current month. Unit: Byte.
	//
	// >  TrafficPackageTotal = TrafficUsed + TrafficPackageRemaining
	//
	// example:
	//
	// 20000
	TrafficPackageTotal *int64 `json:"TrafficPackageTotal,omitempty" xml:"TrafficPackageTotal,omitempty"`
	// The used quota of the data transfer plan in the current month. Unit: Byte.
	//
	// example:
	//
	// 10000
	TrafficUsed *int64 `json:"TrafficUsed,omitempty" xml:"TrafficUsed,omitempty"`
}

func (s ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) GoString() string {
	return s.String()
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) GetTrafficOverflow() *int64 {
	return s.TrafficOverflow
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) GetTrafficPackageRemaining() *int64 {
	return s.TrafficPackageRemaining
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) GetTrafficPackageTotal() *int64 {
	return s.TrafficPackageTotal
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) GetTrafficUsed() *int64 {
	return s.TrafficUsed
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) SetInstanceId(v string) *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) SetTrafficOverflow(v int64) *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages {
	s.TrafficOverflow = &v
	return s
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) SetTrafficPackageRemaining(v int64) *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages {
	s.TrafficPackageRemaining = &v
	return s
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) SetTrafficPackageTotal(v int64) *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages {
	s.TrafficPackageTotal = &v
	return s
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) SetTrafficUsed(v int64) *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages {
	s.TrafficUsed = &v
	return s
}

func (s *ListInstancesTrafficPackagesResponseBodyInstanceTrafficPackageUsages) Validate() error {
	return dara.Validate(s)
}

type iListInstancesTrafficPackagesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListInstancesTrafficPackagesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListInstancesTrafficPackagesResponse
	GetStatusCode() *int32
	SetBody(v *ListInstancesTrafficPackagesResponseBody) *ListInstancesTrafficPackagesResponse
	GetBody() *ListInstancesTrafficPackagesResponseBody
}

type ListInstancesTrafficPackagesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstancesTrafficPackagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstancesTrafficPackagesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListInstancesTrafficPackagesResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesTrafficPackagesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListInstancesTrafficPackagesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListInstancesTrafficPackagesResponse) GetBody() *ListInstancesTrafficPackagesResponseBody {
	return s.Body
}

func (s *ListInstancesTrafficPackagesResponse) SetHeaders(v map[string]*string) *ListInstancesTrafficPackagesResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesTrafficPackagesResponse) SetStatusCode(v int32) *ListInstancesTrafficPackagesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstancesTrafficPackagesResponse) SetBody(v *ListInstancesTrafficPackagesResponseBody) *ListInstancesTrafficPackagesResponse {
	s.Body = v
	return s
}

func (s *ListInstancesTrafficPackagesResponse) Validate() error {
	return dara.Validate(s)
}

type iListKeyPairsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ListKeyPairsRequest
	GetClientToken() *string
	SetKeyPairName(v string) *ListKeyPairsRequest
	GetKeyPairName() *string
	SetPageNumber(v int32) *ListKeyPairsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListKeyPairsRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListKeyPairsRequest
	GetRegionId() *string
}

type ListKeyPairsRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The name of the AccessKey pair. The name must be 2 to 64 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter and cannot start with http:// or https://.
	//
	// example:
	//
	// KeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The page number. Page starts from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListKeyPairsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *ListKeyPairsRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ListKeyPairsRequest) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *ListKeyPairsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListKeyPairsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListKeyPairsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListKeyPairsRequest) SetClientToken(v string) *ListKeyPairsRequest {
	s.ClientToken = &v
	return s
}

func (s *ListKeyPairsRequest) SetKeyPairName(v string) *ListKeyPairsRequest {
	s.KeyPairName = &v
	return s
}

func (s *ListKeyPairsRequest) SetPageNumber(v int32) *ListKeyPairsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListKeyPairsRequest) SetPageSize(v int32) *ListKeyPairsRequest {
	s.PageSize = &v
	return s
}

func (s *ListKeyPairsRequest) SetRegionId(v string) *ListKeyPairsRequest {
	s.RegionId = &v
	return s
}

func (s *ListKeyPairsRequest) Validate() error {
	return dara.Validate(s)
}

type iListKeyPairsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetKeyPairs(v []*ListKeyPairsResponseBodyKeyPairs) *ListKeyPairsResponseBody
	GetKeyPairs() []*ListKeyPairsResponseBodyKeyPairs
	SetPageNumber(v int32) *ListKeyPairsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *ListKeyPairsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *ListKeyPairsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *ListKeyPairsResponseBody
	GetTotalCount() *int32
}

type ListKeyPairsResponseBody struct {
	// Details about the queried AccessKey pairs.
	KeyPairs []*ListKeyPairsResponseBodyKeyPairs `json:"KeyPairs,omitempty" xml:"KeyPairs,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListKeyPairsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *ListKeyPairsResponseBody) GetKeyPairs() []*ListKeyPairsResponseBodyKeyPairs {
	return s.KeyPairs
}

func (s *ListKeyPairsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListKeyPairsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListKeyPairsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListKeyPairsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *ListKeyPairsResponseBody) SetKeyPairs(v []*ListKeyPairsResponseBodyKeyPairs) *ListKeyPairsResponseBody {
	s.KeyPairs = v
	return s
}

func (s *ListKeyPairsResponseBody) SetPageNumber(v int32) *ListKeyPairsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListKeyPairsResponseBody) SetPageSize(v int32) *ListKeyPairsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListKeyPairsResponseBody) SetRequestId(v string) *ListKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListKeyPairsResponseBody) SetTotalCount(v int32) *ListKeyPairsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListKeyPairsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListKeyPairsResponseBodyKeyPairs struct {
	// The time when the AccessKey pair was created.
	//
	// example:
	//
	// 2024-05-06T02:28Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The IDs of simple application servers. A maximum of 50 IDs of simple application servers can be returned.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The name of the AccessKey pair. The name must be 2 to 64 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). The name must start with a letter and cannot start with http:// or https://.
	//
	// example:
	//
	// testKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The content of the public key.
	//
	// example:
	//
	// ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCbO5Govwhb0iHzoMYKkIQxjlHyHH8nxFsW6KF5saxgYhOwdeIpWngpi+/NDWQKvuOnXFFDh/o3eJJkh3rqP+RlMggt4HLQWOd9TS0f4/cgbAzud1caW9PnankCr****
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
}

func (s ListKeyPairsResponseBodyKeyPairs) String() string {
	return dara.Prettify(s)
}

func (s ListKeyPairsResponseBodyKeyPairs) GoString() string {
	return s.String()
}

func (s *ListKeyPairsResponseBodyKeyPairs) GetCreationTime() *string {
	return s.CreationTime
}

func (s *ListKeyPairsResponseBodyKeyPairs) GetInstanceIds() []*string {
	return s.InstanceIds
}

func (s *ListKeyPairsResponseBodyKeyPairs) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *ListKeyPairsResponseBodyKeyPairs) GetPublicKey() *string {
	return s.PublicKey
}

func (s *ListKeyPairsResponseBodyKeyPairs) SetCreationTime(v string) *ListKeyPairsResponseBodyKeyPairs {
	s.CreationTime = &v
	return s
}

func (s *ListKeyPairsResponseBodyKeyPairs) SetInstanceIds(v []*string) *ListKeyPairsResponseBodyKeyPairs {
	s.InstanceIds = v
	return s
}

func (s *ListKeyPairsResponseBodyKeyPairs) SetKeyPairName(v string) *ListKeyPairsResponseBodyKeyPairs {
	s.KeyPairName = &v
	return s
}

func (s *ListKeyPairsResponseBodyKeyPairs) SetPublicKey(v string) *ListKeyPairsResponseBodyKeyPairs {
	s.PublicKey = &v
	return s
}

func (s *ListKeyPairsResponseBodyKeyPairs) Validate() error {
	return dara.Validate(s)
}

type iListKeyPairsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListKeyPairsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListKeyPairsResponse
	GetStatusCode() *int32
	SetBody(v *ListKeyPairsResponseBody) *ListKeyPairsResponse
	GetBody() *ListKeyPairsResponseBody
}

type ListKeyPairsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListKeyPairsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *ListKeyPairsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListKeyPairsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListKeyPairsResponse) GetBody() *ListKeyPairsResponseBody {
	return s.Body
}

func (s *ListKeyPairsResponse) SetHeaders(v map[string]*string) *ListKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *ListKeyPairsResponse) SetStatusCode(v int32) *ListKeyPairsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListKeyPairsResponse) SetBody(v *ListKeyPairsResponseBody) *ListKeyPairsResponse {
	s.Body = v
	return s
}

func (s *ListKeyPairsResponse) Validate() error {
	return dara.Validate(s)
}

type iListPlansRequest interface {
	dara.Model
	String() string
	GoString() string
	SetRegionId(v string) *ListPlansRequest
	GetRegionId() *string
}

type ListPlansRequest struct {
	// The region ID of the plans. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListPlansRequest) String() string {
	return dara.Prettify(s)
}

func (s ListPlansRequest) GoString() string {
	return s.String()
}

func (s *ListPlansRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListPlansRequest) SetRegionId(v string) *ListPlansRequest {
	s.RegionId = &v
	return s
}

func (s *ListPlansRequest) Validate() error {
	return dara.Validate(s)
}

type iListPlansResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetPlans(v []*ListPlansResponseBodyPlans) *ListPlansResponseBody
	GetPlans() []*ListPlansResponseBodyPlans
	SetRequestId(v string) *ListPlansResponseBody
	GetRequestId() *string
}

type ListPlansResponseBody struct {
	// Details about the plans.
	Plans []*ListPlansResponseBodyPlans `json:"Plans,omitempty" xml:"Plans,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPlansResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListPlansResponseBody) GoString() string {
	return s.String()
}

func (s *ListPlansResponseBody) GetPlans() []*ListPlansResponseBodyPlans {
	return s.Plans
}

func (s *ListPlansResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListPlansResponseBody) SetPlans(v []*ListPlansResponseBodyPlans) *ListPlansResponseBody {
	s.Plans = v
	return s
}

func (s *ListPlansResponseBody) SetRequestId(v string) *ListPlansResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPlansResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListPlansResponseBodyPlans struct {
	// The peak bandwidth. Unit: Mbit/s.
	//
	// example:
	//
	// 3
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 2
	Core *int32 `json:"Core,omitempty" xml:"Core,omitempty"`
	// The unit of the plan price. Valid values:
	//
	// 	- CNY
	//
	// 	- USD
	//
	// >  CNY is for the China site (aliyun.com). USD is for the international site (alibabacloud.com).
	//
	// example:
	//
	// CNY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The size of the disk. Unit: GB.
	//
	// example:
	//
	// 40
	DiskSize *int32 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The category of the disk. Valid values:
	//
	// 	- SSD: standard SSDs
	//
	// 	- ESSD: enhanced SSDs
	//
	// example:
	//
	// ESSD
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The monthly data transfer quota. Unit: GB.
	//
	// example:
	//
	// 400
	Flow    *int32  `json:"Flow,omitempty" xml:"Flow,omitempty"`
	IspType *string `json:"IspType,omitempty" xml:"IspType,omitempty"`
	// The memory size. Unit: GB.
	//
	// example:
	//
	// 1
	Memory *float32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The monthly price of the plan.
	//
	// example:
	//
	// 60
	OriginPrice *string `json:"OriginPrice,omitempty" xml:"OriginPrice,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// swas.s2.c2m1s40b3t04
	PlanId      *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	PlanType    *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	PublicIpNum *string `json:"PublicIpNum,omitempty" xml:"PublicIpNum,omitempty"`
	// The operating system types supported by the plan.
	//
	// example:
	//
	// ["Linux","Windows"]
	SupportPlatform *string                           `json:"SupportPlatform,omitempty" xml:"SupportPlatform,omitempty"`
	Tags            []*ListPlansResponseBodyPlansTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListPlansResponseBodyPlans) String() string {
	return dara.Prettify(s)
}

func (s ListPlansResponseBodyPlans) GoString() string {
	return s.String()
}

func (s *ListPlansResponseBodyPlans) GetBandwidth() *int32 {
	return s.Bandwidth
}

func (s *ListPlansResponseBodyPlans) GetCore() *int32 {
	return s.Core
}

func (s *ListPlansResponseBodyPlans) GetCurrency() *string {
	return s.Currency
}

func (s *ListPlansResponseBodyPlans) GetDiskSize() *int32 {
	return s.DiskSize
}

func (s *ListPlansResponseBodyPlans) GetDiskType() *string {
	return s.DiskType
}

func (s *ListPlansResponseBodyPlans) GetFlow() *int32 {
	return s.Flow
}

func (s *ListPlansResponseBodyPlans) GetIspType() *string {
	return s.IspType
}

func (s *ListPlansResponseBodyPlans) GetMemory() *float32 {
	return s.Memory
}

func (s *ListPlansResponseBodyPlans) GetOriginPrice() *string {
	return s.OriginPrice
}

func (s *ListPlansResponseBodyPlans) GetPlanId() *string {
	return s.PlanId
}

func (s *ListPlansResponseBodyPlans) GetPlanType() *string {
	return s.PlanType
}

func (s *ListPlansResponseBodyPlans) GetPublicIpNum() *string {
	return s.PublicIpNum
}

func (s *ListPlansResponseBodyPlans) GetSupportPlatform() *string {
	return s.SupportPlatform
}

func (s *ListPlansResponseBodyPlans) GetTags() []*ListPlansResponseBodyPlansTags {
	return s.Tags
}

func (s *ListPlansResponseBodyPlans) SetBandwidth(v int32) *ListPlansResponseBodyPlans {
	s.Bandwidth = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetCore(v int32) *ListPlansResponseBodyPlans {
	s.Core = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetCurrency(v string) *ListPlansResponseBodyPlans {
	s.Currency = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetDiskSize(v int32) *ListPlansResponseBodyPlans {
	s.DiskSize = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetDiskType(v string) *ListPlansResponseBodyPlans {
	s.DiskType = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetFlow(v int32) *ListPlansResponseBodyPlans {
	s.Flow = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetIspType(v string) *ListPlansResponseBodyPlans {
	s.IspType = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetMemory(v float32) *ListPlansResponseBodyPlans {
	s.Memory = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetOriginPrice(v string) *ListPlansResponseBodyPlans {
	s.OriginPrice = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetPlanId(v string) *ListPlansResponseBodyPlans {
	s.PlanId = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetPlanType(v string) *ListPlansResponseBodyPlans {
	s.PlanType = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetPublicIpNum(v string) *ListPlansResponseBodyPlans {
	s.PublicIpNum = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetSupportPlatform(v string) *ListPlansResponseBodyPlans {
	s.SupportPlatform = &v
	return s
}

func (s *ListPlansResponseBodyPlans) SetTags(v []*ListPlansResponseBodyPlansTags) *ListPlansResponseBodyPlans {
	s.Tags = v
	return s
}

func (s *ListPlansResponseBodyPlans) Validate() error {
	return dara.Validate(s)
}

type ListPlansResponseBodyPlansTags struct {
	CnTitle *string `json:"CnTitle,omitempty" xml:"CnTitle,omitempty"`
	Color   *string `json:"Color,omitempty" xml:"Color,omitempty"`
	EnTitle *string `json:"EnTitle,omitempty" xml:"EnTitle,omitempty"`
}

func (s ListPlansResponseBodyPlansTags) String() string {
	return dara.Prettify(s)
}

func (s ListPlansResponseBodyPlansTags) GoString() string {
	return s.String()
}

func (s *ListPlansResponseBodyPlansTags) GetCnTitle() *string {
	return s.CnTitle
}

func (s *ListPlansResponseBodyPlansTags) GetColor() *string {
	return s.Color
}

func (s *ListPlansResponseBodyPlansTags) GetEnTitle() *string {
	return s.EnTitle
}

func (s *ListPlansResponseBodyPlansTags) SetCnTitle(v string) *ListPlansResponseBodyPlansTags {
	s.CnTitle = &v
	return s
}

func (s *ListPlansResponseBodyPlansTags) SetColor(v string) *ListPlansResponseBodyPlansTags {
	s.Color = &v
	return s
}

func (s *ListPlansResponseBodyPlansTags) SetEnTitle(v string) *ListPlansResponseBodyPlansTags {
	s.EnTitle = &v
	return s
}

func (s *ListPlansResponseBodyPlansTags) Validate() error {
	return dara.Validate(s)
}

type iListPlansResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListPlansResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListPlansResponse
	GetStatusCode() *int32
	SetBody(v *ListPlansResponseBody) *ListPlansResponse
	GetBody() *ListPlansResponseBody
}

type ListPlansResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPlansResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPlansResponse) String() string {
	return dara.Prettify(s)
}

func (s ListPlansResponse) GoString() string {
	return s.String()
}

func (s *ListPlansResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListPlansResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListPlansResponse) GetBody() *ListPlansResponseBody {
	return s.Body
}

func (s *ListPlansResponse) SetHeaders(v map[string]*string) *ListPlansResponse {
	s.Headers = v
	return s
}

func (s *ListPlansResponse) SetStatusCode(v int32) *ListPlansResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPlansResponse) SetBody(v *ListPlansResponseBody) *ListPlansResponse {
	s.Body = v
	return s
}

func (s *ListPlansResponse) Validate() error {
	return dara.Validate(s)
}

type iListRegionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAcceptLanguage(v string) *ListRegionsRequest
	GetAcceptLanguage() *string
}

type ListRegionsRequest struct {
	// The language of the response. Valid values:
	//
	// 	- **zh-CN*	- (default): Chinese
	//
	// 	- **en-US**: English
	//
	// example:
	//
	// zh-CN
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
}

func (s ListRegionsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListRegionsRequest) GoString() string {
	return s.String()
}

func (s *ListRegionsRequest) GetAcceptLanguage() *string {
	return s.AcceptLanguage
}

func (s *ListRegionsRequest) SetAcceptLanguage(v string) *ListRegionsRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *ListRegionsRequest) Validate() error {
	return dara.Validate(s)
}

type iListRegionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRegions(v []*ListRegionsResponseBodyRegions) *ListRegionsResponseBody
	GetRegions() []*ListRegionsResponseBodyRegions
	SetRequestId(v string) *ListRegionsResponseBody
	GetRequestId() *string
}

type ListRegionsResponseBody struct {
	// The regions.
	Regions []*ListRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRegionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRegionsResponseBody) GetRegions() []*ListRegionsResponseBodyRegions {
	return s.Regions
}

func (s *ListRegionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListRegionsResponseBody) SetRegions(v []*ListRegionsResponseBodyRegions) *ListRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *ListRegionsResponseBody) SetRequestId(v string) *ListRegionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRegionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListRegionsResponseBodyRegions struct {
	// The name of the region.
	//
	// example:
	//
	// China (hangzhou)
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	// The endpoint of the region.
	//
	// example:
	//
	// swas.cn-hangzhou.aliyuncs.com
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListRegionsResponseBodyRegions) String() string {
	return dara.Prettify(s)
}

func (s ListRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *ListRegionsResponseBodyRegions) GetLocalName() *string {
	return s.LocalName
}

func (s *ListRegionsResponseBodyRegions) GetRegionEndpoint() *string {
	return s.RegionEndpoint
}

func (s *ListRegionsResponseBodyRegions) GetRegionId() *string {
	return s.RegionId
}

func (s *ListRegionsResponseBodyRegions) SetLocalName(v string) *ListRegionsResponseBodyRegions {
	s.LocalName = &v
	return s
}

func (s *ListRegionsResponseBodyRegions) SetRegionEndpoint(v string) *ListRegionsResponseBodyRegions {
	s.RegionEndpoint = &v
	return s
}

func (s *ListRegionsResponseBodyRegions) SetRegionId(v string) *ListRegionsResponseBodyRegions {
	s.RegionId = &v
	return s
}

func (s *ListRegionsResponseBodyRegions) Validate() error {
	return dara.Validate(s)
}

type iListRegionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListRegionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListRegionsResponse
	GetStatusCode() *int32
	SetBody(v *ListRegionsResponseBody) *ListRegionsResponse
	GetBody() *ListRegionsResponseBody
}

type ListRegionsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRegionsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListRegionsResponse) GoString() string {
	return s.String()
}

func (s *ListRegionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListRegionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListRegionsResponse) GetBody() *ListRegionsResponseBody {
	return s.Body
}

func (s *ListRegionsResponse) SetHeaders(v map[string]*string) *ListRegionsResponse {
	s.Headers = v
	return s
}

func (s *ListRegionsResponse) SetStatusCode(v int32) *ListRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRegionsResponse) SetBody(v *ListRegionsResponseBody) *ListRegionsResponse {
	s.Body = v
	return s
}

func (s *ListRegionsResponse) Validate() error {
	return dara.Validate(s)
}

type iListSnapshotsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDiskId(v string) *ListSnapshotsRequest
	GetDiskId() *string
	SetInstanceId(v string) *ListSnapshotsRequest
	GetInstanceId() *string
	SetPageNumber(v int32) *ListSnapshotsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListSnapshotsRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListSnapshotsRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *ListSnapshotsRequest
	GetResourceGroupId() *string
	SetSnapshotIds(v string) *ListSnapshotsRequest
	GetSnapshotIds() *string
	SetSourceDiskType(v string) *ListSnapshotsRequest
	GetSourceDiskType() *string
	SetTag(v []*ListSnapshotsRequestTag) *ListSnapshotsRequest
	GetTag() []*ListSnapshotsRequestTag
}

type ListSnapshotsRequest struct {
	// The disk ID.
	//
	// example:
	//
	// d-bp14wq0149cpp2xy****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The ID of the simple application server.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the simple application server that corresponds to the snapshots.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The snapshot IDs. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate multiple snapshot IDs with commas (,).
	//
	// example:
	//
	// ["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]
	SnapshotIds *string `json:"SnapshotIds,omitempty" xml:"SnapshotIds,omitempty"`
	// The type of the source disk. Valid values:
	//
	// 	- system: system disk.
	//
	// 	- data: data disk.
	//
	// example:
	//
	// System
	SourceDiskType *string `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	// Tag N that you want to add to the snapshot.
	Tag []*ListSnapshotsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListSnapshotsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListSnapshotsRequest) GoString() string {
	return s.String()
}

func (s *ListSnapshotsRequest) GetDiskId() *string {
	return s.DiskId
}

func (s *ListSnapshotsRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListSnapshotsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListSnapshotsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListSnapshotsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListSnapshotsRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListSnapshotsRequest) GetSnapshotIds() *string {
	return s.SnapshotIds
}

func (s *ListSnapshotsRequest) GetSourceDiskType() *string {
	return s.SourceDiskType
}

func (s *ListSnapshotsRequest) GetTag() []*ListSnapshotsRequestTag {
	return s.Tag
}

func (s *ListSnapshotsRequest) SetDiskId(v string) *ListSnapshotsRequest {
	s.DiskId = &v
	return s
}

func (s *ListSnapshotsRequest) SetInstanceId(v string) *ListSnapshotsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSnapshotsRequest) SetPageNumber(v int32) *ListSnapshotsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSnapshotsRequest) SetPageSize(v int32) *ListSnapshotsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSnapshotsRequest) SetRegionId(v string) *ListSnapshotsRequest {
	s.RegionId = &v
	return s
}

func (s *ListSnapshotsRequest) SetResourceGroupId(v string) *ListSnapshotsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListSnapshotsRequest) SetSnapshotIds(v string) *ListSnapshotsRequest {
	s.SnapshotIds = &v
	return s
}

func (s *ListSnapshotsRequest) SetSourceDiskType(v string) *ListSnapshotsRequest {
	s.SourceDiskType = &v
	return s
}

func (s *ListSnapshotsRequest) SetTag(v []*ListSnapshotsRequestTag) *ListSnapshotsRequest {
	s.Tag = v
	return s
}

func (s *ListSnapshotsRequest) Validate() error {
	return dara.Validate(s)
}

type ListSnapshotsRequestTag struct {
	// The key of tag N that you want to add to the snapshot. A tag key can be 1 to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that you want to add to the snapshot. A tag value can be up to 64 characters in length. Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListSnapshotsRequestTag) String() string {
	return dara.Prettify(s)
}

func (s ListSnapshotsRequestTag) GoString() string {
	return s.String()
}

func (s *ListSnapshotsRequestTag) GetKey() *string {
	return s.Key
}

func (s *ListSnapshotsRequestTag) GetValue() *string {
	return s.Value
}

func (s *ListSnapshotsRequestTag) SetKey(v string) *ListSnapshotsRequestTag {
	s.Key = &v
	return s
}

func (s *ListSnapshotsRequestTag) SetValue(v string) *ListSnapshotsRequestTag {
	s.Value = &v
	return s
}

func (s *ListSnapshotsRequestTag) Validate() error {
	return dara.Validate(s)
}

type iListSnapshotsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetPageNumber(v int32) *ListSnapshotsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *ListSnapshotsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *ListSnapshotsResponseBody
	GetRequestId() *string
	SetSnapshots(v []*ListSnapshotsResponseBodySnapshots) *ListSnapshotsResponseBody
	GetSnapshots() []*ListSnapshotsResponseBodySnapshots
	SetTotalCount(v int32) *ListSnapshotsResponseBody
	GetTotalCount() *int32
}

type ListSnapshotsResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details about the snapshots.
	Snapshots []*ListSnapshotsResponseBodySnapshots `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSnapshotsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListSnapshotsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSnapshotsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListSnapshotsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListSnapshotsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListSnapshotsResponseBody) GetSnapshots() []*ListSnapshotsResponseBodySnapshots {
	return s.Snapshots
}

func (s *ListSnapshotsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *ListSnapshotsResponseBody) SetPageNumber(v int32) *ListSnapshotsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListSnapshotsResponseBody) SetPageSize(v int32) *ListSnapshotsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListSnapshotsResponseBody) SetRequestId(v string) *ListSnapshotsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSnapshotsResponseBody) SetSnapshots(v []*ListSnapshotsResponseBodySnapshots) *ListSnapshotsResponseBody {
	s.Snapshots = v
	return s
}

func (s *ListSnapshotsResponseBody) SetTotalCount(v int32) *ListSnapshotsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListSnapshotsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListSnapshotsResponseBodySnapshots struct {
	// The time when the snapshot was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-03-09T07:12:49Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the simple application server.
	//
	// Note: This parameter has a value returned for only system disk snapshots.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The progress of snapshot creation.
	//
	// example:
	//
	// 100%
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the snapshot.
	//
	// example:
	//
	// test-Remark
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the resource group to which the snapshot belongs.
	//
	// example:
	//
	// rg-aek2bti7cf7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The time when the last disk rollback was performed.
	//
	// example:
	//
	// 2021-03-09T07:12:49Z
	RollbackTime *string `json:"RollbackTime,omitempty" xml:"RollbackTime,omitempty"`
	// The snapshot ID.
	//
	// example:
	//
	// s-bp16oazlsold4dks****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The name of the snapshot.
	//
	// example:
	//
	// test-SnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	// The ID of the source disk. This parameter has a value even after the source disk is released.
	//
	// example:
	//
	// d-bp14wq0149cpp2xy****
	SourceDiskId *string `json:"SourceDiskId,omitempty" xml:"SourceDiskId,omitempty"`
	// The type of the source disk. Valid values:
	//
	// 	- system: system disk.
	//
	// 	- data: data disk.
	//
	// example:
	//
	// System
	SourceDiskType *string `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	// The status of the snapshot. Valid values:
	//
	// 	- Progressing: The snapshot is being created.
	//
	// 	- Accomplished: The snapshot is created.
	//
	// 	- Failed: The snapshot failed to be created.
	//
	// example:
	//
	// Accomplished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags of the snapshot.
	Tags []*ListSnapshotsResponseBodySnapshotsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListSnapshotsResponseBodySnapshots) String() string {
	return dara.Prettify(s)
}

func (s ListSnapshotsResponseBodySnapshots) GoString() string {
	return s.String()
}

func (s *ListSnapshotsResponseBodySnapshots) GetCreationTime() *string {
	return s.CreationTime
}

func (s *ListSnapshotsResponseBodySnapshots) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ListSnapshotsResponseBodySnapshots) GetProgress() *string {
	return s.Progress
}

func (s *ListSnapshotsResponseBodySnapshots) GetRegionId() *string {
	return s.RegionId
}

func (s *ListSnapshotsResponseBodySnapshots) GetRemark() *string {
	return s.Remark
}

func (s *ListSnapshotsResponseBodySnapshots) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ListSnapshotsResponseBodySnapshots) GetRollbackTime() *string {
	return s.RollbackTime
}

func (s *ListSnapshotsResponseBodySnapshots) GetSnapshotId() *string {
	return s.SnapshotId
}

func (s *ListSnapshotsResponseBodySnapshots) GetSnapshotName() *string {
	return s.SnapshotName
}

func (s *ListSnapshotsResponseBodySnapshots) GetSourceDiskId() *string {
	return s.SourceDiskId
}

func (s *ListSnapshotsResponseBodySnapshots) GetSourceDiskType() *string {
	return s.SourceDiskType
}

func (s *ListSnapshotsResponseBodySnapshots) GetStatus() *string {
	return s.Status
}

func (s *ListSnapshotsResponseBodySnapshots) GetTags() []*ListSnapshotsResponseBodySnapshotsTags {
	return s.Tags
}

func (s *ListSnapshotsResponseBodySnapshots) SetCreationTime(v string) *ListSnapshotsResponseBodySnapshots {
	s.CreationTime = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetInstanceId(v string) *ListSnapshotsResponseBodySnapshots {
	s.InstanceId = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetProgress(v string) *ListSnapshotsResponseBodySnapshots {
	s.Progress = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetRegionId(v string) *ListSnapshotsResponseBodySnapshots {
	s.RegionId = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetRemark(v string) *ListSnapshotsResponseBodySnapshots {
	s.Remark = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetResourceGroupId(v string) *ListSnapshotsResponseBodySnapshots {
	s.ResourceGroupId = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetRollbackTime(v string) *ListSnapshotsResponseBodySnapshots {
	s.RollbackTime = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetSnapshotId(v string) *ListSnapshotsResponseBodySnapshots {
	s.SnapshotId = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetSnapshotName(v string) *ListSnapshotsResponseBodySnapshots {
	s.SnapshotName = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetSourceDiskId(v string) *ListSnapshotsResponseBodySnapshots {
	s.SourceDiskId = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetSourceDiskType(v string) *ListSnapshotsResponseBodySnapshots {
	s.SourceDiskType = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetStatus(v string) *ListSnapshotsResponseBodySnapshots {
	s.Status = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) SetTags(v []*ListSnapshotsResponseBodySnapshotsTags) *ListSnapshotsResponseBodySnapshots {
	s.Tags = v
	return s
}

func (s *ListSnapshotsResponseBodySnapshots) Validate() error {
	return dara.Validate(s)
}

type ListSnapshotsResponseBodySnapshotsTags struct {
	// The tag key of the snapshot.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the snapshot.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListSnapshotsResponseBodySnapshotsTags) String() string {
	return dara.Prettify(s)
}

func (s ListSnapshotsResponseBodySnapshotsTags) GoString() string {
	return s.String()
}

func (s *ListSnapshotsResponseBodySnapshotsTags) GetKey() *string {
	return s.Key
}

func (s *ListSnapshotsResponseBodySnapshotsTags) GetValue() *string {
	return s.Value
}

func (s *ListSnapshotsResponseBodySnapshotsTags) SetKey(v string) *ListSnapshotsResponseBodySnapshotsTags {
	s.Key = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshotsTags) SetValue(v string) *ListSnapshotsResponseBodySnapshotsTags {
	s.Value = &v
	return s
}

func (s *ListSnapshotsResponseBodySnapshotsTags) Validate() error {
	return dara.Validate(s)
}

type iListSnapshotsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListSnapshotsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListSnapshotsResponse
	GetStatusCode() *int32
	SetBody(v *ListSnapshotsResponseBody) *ListSnapshotsResponse
	GetBody() *ListSnapshotsResponseBody
}

type ListSnapshotsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSnapshotsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSnapshotsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListSnapshotsResponse) GoString() string {
	return s.String()
}

func (s *ListSnapshotsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListSnapshotsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListSnapshotsResponse) GetBody() *ListSnapshotsResponseBody {
	return s.Body
}

func (s *ListSnapshotsResponse) SetHeaders(v map[string]*string) *ListSnapshotsResponse {
	s.Headers = v
	return s
}

func (s *ListSnapshotsResponse) SetStatusCode(v int32) *ListSnapshotsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSnapshotsResponse) SetBody(v *ListSnapshotsResponseBody) *ListSnapshotsResponse {
	s.Body = v
	return s
}

func (s *ListSnapshotsResponse) Validate() error {
	return dara.Validate(s)
}

type iListTagResourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ListTagResourcesRequest
	GetClientToken() *string
	SetNextToken(v string) *ListTagResourcesRequest
	GetNextToken() *string
	SetRegionId(v string) *ListTagResourcesRequest
	GetRegionId() *string
	SetResourceId(v []*string) *ListTagResourcesRequest
	GetResourceId() []*string
	SetResourceType(v string) *ListTagResourcesRequest
	GetResourceType() *string
	SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest
	GetTag() []*ListTagResourcesRequestTag
}

type ListTagResourcesRequest struct {
	// The client token that you want to use to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [Ensure idempotence](https://help.aliyun.com/document_detail/25693.html)
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource. You can specify up to 50 resource IDs.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The resource type. Valid values:
	//
	// 	- instance
	//
	// 	- snapshot
	//
	// 	- customimage
	//
	// 	- command
	//
	// 	- firewallrule
	//
	// 	- disk
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The list of tags. You can specify up to 20 tags.
	Tag []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ListTagResourcesRequest) GetNextToken() *string {
	return s.NextToken
}

func (s *ListTagResourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListTagResourcesRequest) GetResourceId() []*string {
	return s.ResourceId
}

func (s *ListTagResourcesRequest) GetResourceType() *string {
	return s.ResourceType
}

func (s *ListTagResourcesRequest) GetTag() []*ListTagResourcesRequestTag {
	return s.Tag
}

func (s *ListTagResourcesRequest) SetClientToken(v string) *ListTagResourcesRequest {
	s.ClientToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

func (s *ListTagResourcesRequest) Validate() error {
	return dara.Validate(s)
}

type ListTagResourcesRequestTag struct {
	// The key of the tag that you want to add to a resource. The tag key can be 1 to 64 characters in length.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag that you want to add to a resource. The tag value can be 1 to 64 characters in length.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) GetKey() *string {
	return s.Key
}

func (s *ListTagResourcesRequestTag) GetValue() *string {
	return s.Value
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

func (s *ListTagResourcesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iListTagResourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetNextToken(v string) *ListTagResourcesResponseBody
	GetNextToken() *string
	SetRequestId(v string) *ListTagResourcesResponseBody
	GetRequestId() *string
	SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody
	GetTagResources() *ListTagResourcesResponseBodyTagResources
}

type ListTagResourcesResponseBody struct {
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// A collection of resources and the tags of the resources. The information includes the resource IDs, resource types, and key-value pairs of tags.
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) GetNextToken() *string {
	return s.NextToken
}

func (s *ListTagResourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListTagResourcesResponseBody) GetTagResources() *ListTagResourcesResponseBodyTagResources {
	return s.TagResources
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

func (s *ListTagResourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) GetTagResource() []*ListTagResourcesResponseBodyTagResourcesTagResource {
	return s.TagResource
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) Validate() error {
	return dara.Validate(s)
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	// The resource ID.
	//
	// example:
	//
	// s-bw526m1vi6x20c6g****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource. Valid values:
	//
	// 	- instance
	//
	// 	- snapshot
	//
	// 	- customimage
	//
	// 	- command
	//
	// 	- firewallrule
	//
	// 	- disk
	//
	// example:
	//
	// ALIYUN::SWAS::INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag key.
	//
	// example:
	//
	// TestKey
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetResourceId() *string {
	return s.ResourceId
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetResourceType() *string {
	return s.ResourceType
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetTagKey() *string {
	return s.TagKey
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetTagValue() *string {
	return s.TagValue
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) Validate() error {
	return dara.Validate(s)
}

type iListTagResourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListTagResourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListTagResourcesResponse
	GetStatusCode() *int32
	SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse
	GetBody() *ListTagResourcesResponseBody
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListTagResourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListTagResourcesResponse) GetBody() *ListTagResourcesResponseBody {
	return s.Body
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

func (s *ListTagResourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iLoginInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceId(v string) *LoginInstanceRequest
	GetInstanceId() *string
	SetPassword(v string) *LoginInstanceRequest
	GetPassword() *string
	SetPort(v int32) *LoginInstanceRequest
	GetPort() *int32
	SetRegionId(v string) *LoginInstanceRequest
	GetRegionId() *string
	SetUsername(v string) *LoginInstanceRequest
	GetUsername() *string
}

type LoginInstanceRequest struct {
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9ae7106e68eb4402b0dcbd48a9de****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The password that corresponds to the username.
	//
	// 	- For a Linux server, you do not need to enter a password.
	//
	// 	- For a Windows server, enter the password that you set. If you have not set a password for the simple application server, set a password. For more information, see [Reset the password](https://help.aliyun.com/document_detail/60055.html).
	//
	// example:
	//
	// Test****
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The port number that is used to log on to the simple application server by using Workbench.
	//
	// 	- Linux servers: The default value is 22.
	//
	// 	- Windows servers: The default value is 3389.
	//
	// >  If you want to connect to a server by using a custom port, you must modify the default remote connection port. For more information, see [Configure a custom remote connection port](https://help.aliyun.com/document_detail/2807402.html).
	//
	// example:
	//
	// 3389
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The username of the simple application server.
	//
	// 	- For a Linux server, you do not need to enter a username.
	//
	// 	- For a Windows server, the default username `administrator` is used.
	//
	// example:
	//
	// administrator
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s LoginInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s LoginInstanceRequest) GoString() string {
	return s.String()
}

func (s *LoginInstanceRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *LoginInstanceRequest) GetPassword() *string {
	return s.Password
}

func (s *LoginInstanceRequest) GetPort() *int32 {
	return s.Port
}

func (s *LoginInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *LoginInstanceRequest) GetUsername() *string {
	return s.Username
}

func (s *LoginInstanceRequest) SetInstanceId(v string) *LoginInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *LoginInstanceRequest) SetPassword(v string) *LoginInstanceRequest {
	s.Password = &v
	return s
}

func (s *LoginInstanceRequest) SetPort(v int32) *LoginInstanceRequest {
	s.Port = &v
	return s
}

func (s *LoginInstanceRequest) SetRegionId(v string) *LoginInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *LoginInstanceRequest) SetUsername(v string) *LoginInstanceRequest {
	s.Username = &v
	return s
}

func (s *LoginInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iLoginInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRedirectUrl(v string) *LoginInstanceResponseBody
	GetRedirectUrl() *string
	SetRequestId(v string) *LoginInstanceResponseBody
	GetRequestId() *string
}

type LoginInstanceResponseBody struct {
	// The URL that you use to log on to the server.
	//
	// example:
	//
	// https://ecs-workbench.aliyun.com/view/instance/single/gbktfz****
	RedirectUrl *string `json:"RedirectUrl,omitempty" xml:"RedirectUrl,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C2DE174B-7196-5778-A00D-6EA2601B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LoginInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s LoginInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *LoginInstanceResponseBody) GetRedirectUrl() *string {
	return s.RedirectUrl
}

func (s *LoginInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *LoginInstanceResponseBody) SetRedirectUrl(v string) *LoginInstanceResponseBody {
	s.RedirectUrl = &v
	return s
}

func (s *LoginInstanceResponseBody) SetRequestId(v string) *LoginInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *LoginInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iLoginInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *LoginInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *LoginInstanceResponse
	GetStatusCode() *int32
	SetBody(v *LoginInstanceResponseBody) *LoginInstanceResponse
	GetBody() *LoginInstanceResponseBody
}

type LoginInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LoginInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LoginInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s LoginInstanceResponse) GoString() string {
	return s.String()
}

func (s *LoginInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *LoginInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *LoginInstanceResponse) GetBody() *LoginInstanceResponseBody {
	return s.Body
}

func (s *LoginInstanceResponse) SetHeaders(v map[string]*string) *LoginInstanceResponse {
	s.Headers = v
	return s
}

func (s *LoginInstanceResponse) SetStatusCode(v int32) *LoginInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *LoginInstanceResponse) SetBody(v *LoginInstanceResponseBody) *LoginInstanceResponse {
	s.Body = v
	return s
}

func (s *LoginInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDatabaseInstanceDescriptionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ModifyDatabaseInstanceDescriptionRequest
	GetClientToken() *string
	SetDatabaseInstanceDescription(v string) *ModifyDatabaseInstanceDescriptionRequest
	GetDatabaseInstanceDescription() *string
	SetDatabaseInstanceId(v string) *ModifyDatabaseInstanceDescriptionRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *ModifyDatabaseInstanceDescriptionRequest
	GetRegionId() *string
}

type ModifyDatabaseInstanceDescriptionRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The description of the Simple Database Service instance.
	//
	// This parameter is required.
	DatabaseInstanceDescription *string `json:"DatabaseInstanceDescription,omitempty" xml:"DatabaseInstanceDescription,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDatabaseInstanceDescriptionRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDatabaseInstanceDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseInstanceDescriptionRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyDatabaseInstanceDescriptionRequest) GetDatabaseInstanceDescription() *string {
	return s.DatabaseInstanceDescription
}

func (s *ModifyDatabaseInstanceDescriptionRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *ModifyDatabaseInstanceDescriptionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyDatabaseInstanceDescriptionRequest) SetClientToken(v string) *ModifyDatabaseInstanceDescriptionRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionRequest) SetDatabaseInstanceDescription(v string) *ModifyDatabaseInstanceDescriptionRequest {
	s.DatabaseInstanceDescription = &v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionRequest) SetDatabaseInstanceId(v string) *ModifyDatabaseInstanceDescriptionRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionRequest) SetRegionId(v string) *ModifyDatabaseInstanceDescriptionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDatabaseInstanceDescriptionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDatabaseInstanceDescriptionResponseBody
	GetRequestId() *string
}

type ModifyDatabaseInstanceDescriptionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatabaseInstanceDescriptionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDatabaseInstanceDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseInstanceDescriptionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDatabaseInstanceDescriptionResponseBody) SetRequestId(v string) *ModifyDatabaseInstanceDescriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDatabaseInstanceDescriptionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDatabaseInstanceDescriptionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDatabaseInstanceDescriptionResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDatabaseInstanceDescriptionResponseBody) *ModifyDatabaseInstanceDescriptionResponse
	GetBody() *ModifyDatabaseInstanceDescriptionResponseBody
}

type ModifyDatabaseInstanceDescriptionResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatabaseInstanceDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatabaseInstanceDescriptionResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDatabaseInstanceDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseInstanceDescriptionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDatabaseInstanceDescriptionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDatabaseInstanceDescriptionResponse) GetBody() *ModifyDatabaseInstanceDescriptionResponseBody {
	return s.Body
}

func (s *ModifyDatabaseInstanceDescriptionResponse) SetHeaders(v map[string]*string) *ModifyDatabaseInstanceDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionResponse) SetStatusCode(v int32) *ModifyDatabaseInstanceDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionResponse) SetBody(v *ModifyDatabaseInstanceDescriptionResponseBody) *ModifyDatabaseInstanceDescriptionResponse {
	s.Body = v
	return s
}

func (s *ModifyDatabaseInstanceDescriptionResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDatabaseInstanceParameterRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ModifyDatabaseInstanceParameterRequest
	GetClientToken() *string
	SetDatabaseInstanceId(v string) *ModifyDatabaseInstanceParameterRequest
	GetDatabaseInstanceId() *string
	SetForceRestart(v bool) *ModifyDatabaseInstanceParameterRequest
	GetForceRestart() *bool
	SetParameters(v string) *ModifyDatabaseInstanceParameterRequest
	GetParameters() *string
	SetRegionId(v string) *ModifyDatabaseInstanceParameterRequest
	GetRegionId() *string
}

type ModifyDatabaseInstanceParameterRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// Specifies whether to forcibly restart the instance after parameters are modified. Valid values:
	//
	// 	- true: forcibly restarts the instance. If a new parameter value takes effect only after the instance restarts, you must set this parameter to true. Otherwise, the new parameter value cannot take effect.
	//
	// 	- false: does not forcibly restart the instance.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	ForceRestart *bool `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty"`
	// The JSON strings that consist of instance parameters and the values of the instance parameters. The parameter values are of the string type. Format: {"Parameter name 1":"Parameter value 1","Parameter name 2":"Parameter value 2"...}.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDatabaseInstanceParameterRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDatabaseInstanceParameterRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseInstanceParameterRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyDatabaseInstanceParameterRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *ModifyDatabaseInstanceParameterRequest) GetForceRestart() *bool {
	return s.ForceRestart
}

func (s *ModifyDatabaseInstanceParameterRequest) GetParameters() *string {
	return s.Parameters
}

func (s *ModifyDatabaseInstanceParameterRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyDatabaseInstanceParameterRequest) SetClientToken(v string) *ModifyDatabaseInstanceParameterRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDatabaseInstanceParameterRequest) SetDatabaseInstanceId(v string) *ModifyDatabaseInstanceParameterRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *ModifyDatabaseInstanceParameterRequest) SetForceRestart(v bool) *ModifyDatabaseInstanceParameterRequest {
	s.ForceRestart = &v
	return s
}

func (s *ModifyDatabaseInstanceParameterRequest) SetParameters(v string) *ModifyDatabaseInstanceParameterRequest {
	s.Parameters = &v
	return s
}

func (s *ModifyDatabaseInstanceParameterRequest) SetRegionId(v string) *ModifyDatabaseInstanceParameterRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDatabaseInstanceParameterRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDatabaseInstanceParameterResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDatabaseInstanceParameterResponseBody
	GetRequestId() *string
}

type ModifyDatabaseInstanceParameterResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatabaseInstanceParameterResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDatabaseInstanceParameterResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseInstanceParameterResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDatabaseInstanceParameterResponseBody) SetRequestId(v string) *ModifyDatabaseInstanceParameterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDatabaseInstanceParameterResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDatabaseInstanceParameterResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDatabaseInstanceParameterResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDatabaseInstanceParameterResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDatabaseInstanceParameterResponseBody) *ModifyDatabaseInstanceParameterResponse
	GetBody() *ModifyDatabaseInstanceParameterResponseBody
}

type ModifyDatabaseInstanceParameterResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatabaseInstanceParameterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatabaseInstanceParameterResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDatabaseInstanceParameterResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseInstanceParameterResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDatabaseInstanceParameterResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDatabaseInstanceParameterResponse) GetBody() *ModifyDatabaseInstanceParameterResponseBody {
	return s.Body
}

func (s *ModifyDatabaseInstanceParameterResponse) SetHeaders(v map[string]*string) *ModifyDatabaseInstanceParameterResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatabaseInstanceParameterResponse) SetStatusCode(v int32) *ModifyDatabaseInstanceParameterResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatabaseInstanceParameterResponse) SetBody(v *ModifyDatabaseInstanceParameterResponseBody) *ModifyDatabaseInstanceParameterResponse {
	s.Body = v
	return s
}

func (s *ModifyDatabaseInstanceParameterResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyFirewallRuleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ModifyFirewallRuleRequest
	GetClientToken() *string
	SetInstanceId(v string) *ModifyFirewallRuleRequest
	GetInstanceId() *string
	SetPort(v string) *ModifyFirewallRuleRequest
	GetPort() *string
	SetRegionId(v string) *ModifyFirewallRuleRequest
	GetRegionId() *string
	SetRemark(v string) *ModifyFirewallRuleRequest
	GetRemark() *string
	SetRuleId(v string) *ModifyFirewallRuleRequest
	GetRuleId() *string
	SetRuleProtocol(v string) *ModifyFirewallRuleRequest
	GetRuleProtocol() *string
	SetSourceCidrIp(v string) *ModifyFirewallRuleRequest
	GetSourceCidrIp() *string
}

type ModifyFirewallRuleRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The port range. Valid values: 165535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 10241055.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3306
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the firewall rule.
	//
	// example:
	//
	// custom
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the firewall rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// eeea34d9867b4d55a4ff8d5fcfbd****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The transport layer protocol. Valid values:
	//
	// 	- TCP: the TCP protocol
	//
	// 	- UDP: the UDP protocol
	//
	// 	- TCP+UDP: the TCP and UDP protocols
	//
	// This parameter is required.
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The IP address or CIDR block that is allowed in the firewall rule.
	//
	// example:
	//
	// 10.147.33.**
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s ModifyFirewallRuleRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyFirewallRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyFirewallRuleRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyFirewallRuleRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ModifyFirewallRuleRequest) GetPort() *string {
	return s.Port
}

func (s *ModifyFirewallRuleRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyFirewallRuleRequest) GetRemark() *string {
	return s.Remark
}

func (s *ModifyFirewallRuleRequest) GetRuleId() *string {
	return s.RuleId
}

func (s *ModifyFirewallRuleRequest) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *ModifyFirewallRuleRequest) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *ModifyFirewallRuleRequest) SetClientToken(v string) *ModifyFirewallRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyFirewallRuleRequest) SetInstanceId(v string) *ModifyFirewallRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyFirewallRuleRequest) SetPort(v string) *ModifyFirewallRuleRequest {
	s.Port = &v
	return s
}

func (s *ModifyFirewallRuleRequest) SetRegionId(v string) *ModifyFirewallRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFirewallRuleRequest) SetRemark(v string) *ModifyFirewallRuleRequest {
	s.Remark = &v
	return s
}

func (s *ModifyFirewallRuleRequest) SetRuleId(v string) *ModifyFirewallRuleRequest {
	s.RuleId = &v
	return s
}

func (s *ModifyFirewallRuleRequest) SetRuleProtocol(v string) *ModifyFirewallRuleRequest {
	s.RuleProtocol = &v
	return s
}

func (s *ModifyFirewallRuleRequest) SetSourceCidrIp(v string) *ModifyFirewallRuleRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *ModifyFirewallRuleRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyFirewallRuleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyFirewallRuleResponseBody
	GetRequestId() *string
}

type ModifyFirewallRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E1FEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFirewallRuleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyFirewallRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFirewallRuleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyFirewallRuleResponseBody) SetRequestId(v string) *ModifyFirewallRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFirewallRuleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyFirewallRuleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyFirewallRuleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyFirewallRuleResponse
	GetStatusCode() *int32
	SetBody(v *ModifyFirewallRuleResponseBody) *ModifyFirewallRuleResponse
	GetBody() *ModifyFirewallRuleResponseBody
}

type ModifyFirewallRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFirewallRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFirewallRuleResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyFirewallRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyFirewallRuleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyFirewallRuleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyFirewallRuleResponse) GetBody() *ModifyFirewallRuleResponseBody {
	return s.Body
}

func (s *ModifyFirewallRuleResponse) SetHeaders(v map[string]*string) *ModifyFirewallRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyFirewallRuleResponse) SetStatusCode(v int32) *ModifyFirewallRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFirewallRuleResponse) SetBody(v *ModifyFirewallRuleResponseBody) *ModifyFirewallRuleResponse {
	s.Body = v
	return s
}

func (s *ModifyFirewallRuleResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyFirewallTemplateRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ModifyFirewallTemplateRequest
	GetClientToken() *string
	SetDescription(v string) *ModifyFirewallTemplateRequest
	GetDescription() *string
	SetFirewallTemplateId(v string) *ModifyFirewallTemplateRequest
	GetFirewallTemplateId() *string
	SetFirewallTemplateRule(v []*ModifyFirewallTemplateRequestFirewallTemplateRule) *ModifyFirewallTemplateRequest
	GetFirewallTemplateRule() []*ModifyFirewallTemplateRequestFirewallTemplateRule
	SetName(v string) *ModifyFirewallTemplateRequest
	GetName() *string
	SetRegionId(v string) *ModifyFirewallTemplateRequest
	GetRegionId() *string
}

type ModifyFirewallTemplateRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The description of the firewall template.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the firewall template.
	//
	// This parameter is required.
	//
	// example:
	//
	// ft-bcf1a7hrdq717****
	FirewallTemplateId *string `json:"FirewallTemplateId,omitempty" xml:"FirewallTemplateId,omitempty"`
	// The firewall rule in the template.
	FirewallTemplateRule []*ModifyFirewallTemplateRequestFirewallTemplateRule `json:"FirewallTemplateRule,omitempty" xml:"FirewallTemplateRule,omitempty" type:"Repeated"`
	// The name of the firewall template.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyFirewallTemplateRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyFirewallTemplateRequest) GoString() string {
	return s.String()
}

func (s *ModifyFirewallTemplateRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyFirewallTemplateRequest) GetDescription() *string {
	return s.Description
}

func (s *ModifyFirewallTemplateRequest) GetFirewallTemplateId() *string {
	return s.FirewallTemplateId
}

func (s *ModifyFirewallTemplateRequest) GetFirewallTemplateRule() []*ModifyFirewallTemplateRequestFirewallTemplateRule {
	return s.FirewallTemplateRule
}

func (s *ModifyFirewallTemplateRequest) GetName() *string {
	return s.Name
}

func (s *ModifyFirewallTemplateRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyFirewallTemplateRequest) SetClientToken(v string) *ModifyFirewallTemplateRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyFirewallTemplateRequest) SetDescription(v string) *ModifyFirewallTemplateRequest {
	s.Description = &v
	return s
}

func (s *ModifyFirewallTemplateRequest) SetFirewallTemplateId(v string) *ModifyFirewallTemplateRequest {
	s.FirewallTemplateId = &v
	return s
}

func (s *ModifyFirewallTemplateRequest) SetFirewallTemplateRule(v []*ModifyFirewallTemplateRequestFirewallTemplateRule) *ModifyFirewallTemplateRequest {
	s.FirewallTemplateRule = v
	return s
}

func (s *ModifyFirewallTemplateRequest) SetName(v string) *ModifyFirewallTemplateRequest {
	s.Name = &v
	return s
}

func (s *ModifyFirewallTemplateRequest) SetRegionId(v string) *ModifyFirewallTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFirewallTemplateRequest) Validate() error {
	return dara.Validate(s)
}

type ModifyFirewallTemplateRequestFirewallTemplateRule struct {
	// The ID of the firewall rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// eeea34d9867b4d55a4ff8d5fcfbd****
	FirewallTemplateRuleId *string `json:"FirewallTemplateRuleId,omitempty" xml:"FirewallTemplateRuleId,omitempty"`
	// The port range. Valid values: 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 1024 to 1055.
	//
	// >  If you set RuleProtocol to ICMP, you must set Port to -1/-1.
	//
	// example:
	//
	// 8080
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The remarks of the firewall template rule.
	//
	// example:
	//
	// test
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The transport layer protocol that the rule supports. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- TCP+UDP
	//
	// 	- ICMP
	//
	// example:
	//
	// TCP
	RuleProtocol *string `json:"RuleProtocol,omitempty" xml:"RuleProtocol,omitempty"`
	// The source address to which you want to grant access permissions. CIDR blocks and IPv4 addresses are supported.
	//
	// example:
	//
	// 0.0.0.0/0
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
}

func (s ModifyFirewallTemplateRequestFirewallTemplateRule) String() string {
	return dara.Prettify(s)
}

func (s ModifyFirewallTemplateRequestFirewallTemplateRule) GoString() string {
	return s.String()
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) GetFirewallTemplateRuleId() *string {
	return s.FirewallTemplateRuleId
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) GetPort() *string {
	return s.Port
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) GetRemark() *string {
	return s.Remark
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) GetRuleProtocol() *string {
	return s.RuleProtocol
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) GetSourceCidrIp() *string {
	return s.SourceCidrIp
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) SetFirewallTemplateRuleId(v string) *ModifyFirewallTemplateRequestFirewallTemplateRule {
	s.FirewallTemplateRuleId = &v
	return s
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) SetPort(v string) *ModifyFirewallTemplateRequestFirewallTemplateRule {
	s.Port = &v
	return s
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) SetRemark(v string) *ModifyFirewallTemplateRequestFirewallTemplateRule {
	s.Remark = &v
	return s
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) SetRuleProtocol(v string) *ModifyFirewallTemplateRequestFirewallTemplateRule {
	s.RuleProtocol = &v
	return s
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) SetSourceCidrIp(v string) *ModifyFirewallTemplateRequestFirewallTemplateRule {
	s.SourceCidrIp = &v
	return s
}

func (s *ModifyFirewallTemplateRequestFirewallTemplateRule) Validate() error {
	return dara.Validate(s)
}

type iModifyFirewallTemplateResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyFirewallTemplateResponseBody
	GetRequestId() *string
}

type ModifyFirewallTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFirewallTemplateResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyFirewallTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFirewallTemplateResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyFirewallTemplateResponseBody) SetRequestId(v string) *ModifyFirewallTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFirewallTemplateResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyFirewallTemplateResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyFirewallTemplateResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyFirewallTemplateResponse
	GetStatusCode() *int32
	SetBody(v *ModifyFirewallTemplateResponseBody) *ModifyFirewallTemplateResponse
	GetBody() *ModifyFirewallTemplateResponseBody
}

type ModifyFirewallTemplateResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFirewallTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFirewallTemplateResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyFirewallTemplateResponse) GoString() string {
	return s.String()
}

func (s *ModifyFirewallTemplateResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyFirewallTemplateResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyFirewallTemplateResponse) GetBody() *ModifyFirewallTemplateResponseBody {
	return s.Body
}

func (s *ModifyFirewallTemplateResponse) SetHeaders(v map[string]*string) *ModifyFirewallTemplateResponse {
	s.Headers = v
	return s
}

func (s *ModifyFirewallTemplateResponse) SetStatusCode(v int32) *ModifyFirewallTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFirewallTemplateResponse) SetBody(v *ModifyFirewallTemplateResponseBody) *ModifyFirewallTemplateResponse {
	s.Body = v
	return s
}

func (s *ModifyFirewallTemplateResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyImageShareStatusRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ModifyImageShareStatusRequest
	GetClientToken() *string
	SetImageId(v string) *ModifyImageShareStatusRequest
	GetImageId() *string
	SetOperation(v string) *ModifyImageShareStatusRequest
	GetOperation() *string
	SetRegionId(v string) *ModifyImageShareStatusRequest
	GetRegionId() *string
}

type ModifyImageShareStatusRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The image ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-saacssasc****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// Valid values:
	//
	// 	- Share
	//
	// 	- UnShare
	//
	// This parameter is required.
	//
	// example:
	//
	// Share
	Operation *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	// The region ID of the custom image. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyImageShareStatusRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyImageShareStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageShareStatusRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyImageShareStatusRequest) GetImageId() *string {
	return s.ImageId
}

func (s *ModifyImageShareStatusRequest) GetOperation() *string {
	return s.Operation
}

func (s *ModifyImageShareStatusRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyImageShareStatusRequest) SetClientToken(v string) *ModifyImageShareStatusRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyImageShareStatusRequest) SetImageId(v string) *ModifyImageShareStatusRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageShareStatusRequest) SetOperation(v string) *ModifyImageShareStatusRequest {
	s.Operation = &v
	return s
}

func (s *ModifyImageShareStatusRequest) SetRegionId(v string) *ModifyImageShareStatusRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageShareStatusRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyImageShareStatusResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyImageShareStatusResponseBody
	GetRequestId() *string
}

type ModifyImageShareStatusResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageShareStatusResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyImageShareStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageShareStatusResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyImageShareStatusResponseBody) SetRequestId(v string) *ModifyImageShareStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyImageShareStatusResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyImageShareStatusResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyImageShareStatusResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyImageShareStatusResponse
	GetStatusCode() *int32
	SetBody(v *ModifyImageShareStatusResponseBody) *ModifyImageShareStatusResponse
	GetBody() *ModifyImageShareStatusResponseBody
}

type ModifyImageShareStatusResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyImageShareStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyImageShareStatusResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyImageShareStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageShareStatusResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyImageShareStatusResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyImageShareStatusResponse) GetBody() *ModifyImageShareStatusResponseBody {
	return s.Body
}

func (s *ModifyImageShareStatusResponse) SetHeaders(v map[string]*string) *ModifyImageShareStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageShareStatusResponse) SetStatusCode(v int32) *ModifyImageShareStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImageShareStatusResponse) SetBody(v *ModifyImageShareStatusResponseBody) *ModifyImageShareStatusResponse {
	s.Body = v
	return s
}

func (s *ModifyImageShareStatusResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyInstanceVncPasswordRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ModifyInstanceVncPasswordRequest
	GetClientToken() *string
	SetInstanceId(v string) *ModifyInstanceVncPasswordRequest
	GetInstanceId() *string
	SetRegionId(v string) *ModifyInstanceVncPasswordRequest
	GetRegionId() *string
	SetVncPassword(v string) *ModifyInstanceVncPasswordRequest
	GetVncPassword() *string
}

type ModifyInstanceVncPasswordRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The VNC connection password.
	//
	// example:
	//
	// ***
	VncPassword *string `json:"VncPassword,omitempty" xml:"VncPassword,omitempty"`
}

func (s ModifyInstanceVncPasswordRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyInstanceVncPasswordRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswordRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyInstanceVncPasswordRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ModifyInstanceVncPasswordRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyInstanceVncPasswordRequest) GetVncPassword() *string {
	return s.VncPassword
}

func (s *ModifyInstanceVncPasswordRequest) SetClientToken(v string) *ModifyInstanceVncPasswordRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceVncPasswordRequest) SetInstanceId(v string) *ModifyInstanceVncPasswordRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceVncPasswordRequest) SetRegionId(v string) *ModifyInstanceVncPasswordRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceVncPasswordRequest) SetVncPassword(v string) *ModifyInstanceVncPasswordRequest {
	s.VncPassword = &v
	return s
}

func (s *ModifyInstanceVncPasswordRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyInstanceVncPasswordResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyInstanceVncPasswordResponseBody
	GetRequestId() *string
}

type ModifyInstanceVncPasswordResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceVncPasswordResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyInstanceVncPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswordResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyInstanceVncPasswordResponseBody) SetRequestId(v string) *ModifyInstanceVncPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceVncPasswordResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyInstanceVncPasswordResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyInstanceVncPasswordResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyInstanceVncPasswordResponse
	GetStatusCode() *int32
	SetBody(v *ModifyInstanceVncPasswordResponseBody) *ModifyInstanceVncPasswordResponse
	GetBody() *ModifyInstanceVncPasswordResponseBody
}

type ModifyInstanceVncPasswordResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceVncPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceVncPasswordResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyInstanceVncPasswordResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswordResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyInstanceVncPasswordResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyInstanceVncPasswordResponse) GetBody() *ModifyInstanceVncPasswordResponseBody {
	return s.Body
}

func (s *ModifyInstanceVncPasswordResponse) SetHeaders(v map[string]*string) *ModifyInstanceVncPasswordResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceVncPasswordResponse) SetStatusCode(v int32) *ModifyInstanceVncPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceVncPasswordResponse) SetBody(v *ModifyInstanceVncPasswordResponseBody) *ModifyInstanceVncPasswordResponse {
	s.Body = v
	return s
}

func (s *ModifyInstanceVncPasswordResponse) Validate() error {
	return dara.Validate(s)
}

type iRebootInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *RebootInstanceRequest
	GetClientToken() *string
	SetInstanceId(v string) *RebootInstanceRequest
	GetInstanceId() *string
	SetRegionId(v string) *RebootInstanceRequest
	GetRegionId() *string
}

type RebootInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RebootInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s RebootInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *RebootInstanceRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *RebootInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RebootInstanceRequest) SetClientToken(v string) *RebootInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RebootInstanceRequest) SetInstanceId(v string) *RebootInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RebootInstanceRequest) SetRegionId(v string) *RebootInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *RebootInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iRebootInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *RebootInstanceResponseBody
	GetRequestId() *string
}

type RebootInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RebootInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RebootInstanceResponseBody) SetRequestId(v string) *RebootInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RebootInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRebootInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RebootInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RebootInstanceResponse
	GetStatusCode() *int32
	SetBody(v *RebootInstanceResponseBody) *RebootInstanceResponse
	GetBody() *RebootInstanceResponseBody
}

type RebootInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s RebootInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RebootInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RebootInstanceResponse) GetBody() *RebootInstanceResponseBody {
	return s.Body
}

func (s *RebootInstanceResponse) SetHeaders(v map[string]*string) *RebootInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootInstanceResponse) SetStatusCode(v int32) *RebootInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootInstanceResponse) SetBody(v *RebootInstanceResponseBody) *RebootInstanceResponse {
	s.Body = v
	return s
}

func (s *RebootInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iRebootInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *RebootInstancesRequest
	GetClientToken() *string
	SetForceReboot(v bool) *RebootInstancesRequest
	GetForceReboot() *bool
	SetInstanceIds(v string) *RebootInstancesRequest
	GetInstanceIds() *string
	SetRegionId(v string) *RebootInstancesRequest
	GetRegionId() *string
}

type RebootInstancesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// Specifies whether to forcibly restart the servers. Valid values:
	//
	// 	- true: forcibly restarts the servers. This operation is equivalent to the typical power-off operation. Cache data that is not written to storage devices on the server will be lost.
	//
	// 	- false: normally restarts the instance.
	//
	// Default value: false
	//
	// example:
	//
	// false
	ForceReboot *bool `json:"ForceReboot,omitempty" xml:"ForceReboot,omitempty"`
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RebootInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s RebootInstancesRequest) GoString() string {
	return s.String()
}

func (s *RebootInstancesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *RebootInstancesRequest) GetForceReboot() *bool {
	return s.ForceReboot
}

func (s *RebootInstancesRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *RebootInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RebootInstancesRequest) SetClientToken(v string) *RebootInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *RebootInstancesRequest) SetForceReboot(v bool) *RebootInstancesRequest {
	s.ForceReboot = &v
	return s
}

func (s *RebootInstancesRequest) SetInstanceIds(v string) *RebootInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *RebootInstancesRequest) SetRegionId(v string) *RebootInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *RebootInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type iRebootInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *RebootInstancesResponseBody
	GetRequestId() *string
}

type RebootInstancesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RebootInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RebootInstancesResponseBody) SetRequestId(v string) *RebootInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *RebootInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRebootInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RebootInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RebootInstancesResponse
	GetStatusCode() *int32
	SetBody(v *RebootInstancesResponseBody) *RebootInstancesResponse
	GetBody() *RebootInstancesResponseBody
}

type RebootInstancesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s RebootInstancesResponse) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RebootInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RebootInstancesResponse) GetBody() *RebootInstancesResponseBody {
	return s.Body
}

func (s *RebootInstancesResponse) SetHeaders(v map[string]*string) *RebootInstancesResponse {
	s.Headers = v
	return s
}

func (s *RebootInstancesResponse) SetStatusCode(v int32) *RebootInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootInstancesResponse) SetBody(v *RebootInstancesResponseBody) *RebootInstancesResponse {
	s.Body = v
	return s
}

func (s *RebootInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iReleasePublicConnectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ReleasePublicConnectionRequest
	GetClientToken() *string
	SetDatabaseInstanceId(v string) *ReleasePublicConnectionRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *ReleasePublicConnectionRequest
	GetRegionId() *string
}

type ReleasePublicConnectionRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ReleasePublicConnectionRequest) String() string {
	return dara.Prettify(s)
}

func (s ReleasePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleasePublicConnectionRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ReleasePublicConnectionRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *ReleasePublicConnectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ReleasePublicConnectionRequest) SetClientToken(v string) *ReleasePublicConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *ReleasePublicConnectionRequest) SetDatabaseInstanceId(v string) *ReleasePublicConnectionRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *ReleasePublicConnectionRequest) SetRegionId(v string) *ReleasePublicConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *ReleasePublicConnectionRequest) Validate() error {
	return dara.Validate(s)
}

type iReleasePublicConnectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ReleasePublicConnectionResponseBody
	GetRequestId() *string
}

type ReleasePublicConnectionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleasePublicConnectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ReleasePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *ReleasePublicConnectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ReleasePublicConnectionResponseBody) SetRequestId(v string) *ReleasePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleasePublicConnectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iReleasePublicConnectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ReleasePublicConnectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ReleasePublicConnectionResponse
	GetStatusCode() *int32
	SetBody(v *ReleasePublicConnectionResponseBody) *ReleasePublicConnectionResponse
	GetBody() *ReleasePublicConnectionResponseBody
}

type ReleasePublicConnectionResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleasePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleasePublicConnectionResponse) String() string {
	return dara.Prettify(s)
}

func (s ReleasePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleasePublicConnectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ReleasePublicConnectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ReleasePublicConnectionResponse) GetBody() *ReleasePublicConnectionResponseBody {
	return s.Body
}

func (s *ReleasePublicConnectionResponse) SetHeaders(v map[string]*string) *ReleasePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *ReleasePublicConnectionResponse) SetStatusCode(v int32) *ReleasePublicConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleasePublicConnectionResponse) SetBody(v *ReleasePublicConnectionResponseBody) *ReleasePublicConnectionResponse {
	s.Body = v
	return s
}

func (s *ReleasePublicConnectionResponse) Validate() error {
	return dara.Validate(s)
}

type iRemoveCustomImageShareAccountRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccount(v []*int64) *RemoveCustomImageShareAccountRequest
	GetAccount() []*int64
	SetClientToken(v string) *RemoveCustomImageShareAccountRequest
	GetClientToken() *string
	SetImageId(v string) *RemoveCustomImageShareAccountRequest
	GetImageId() *string
	SetRegionId(v string) *RemoveCustomImageShareAccountRequest
	GetRegionId() *string
}

type RemoveCustomImageShareAccountRequest struct {
	// The IDs of the Alibaba Cloud accounts with which you want to unshare the image.
	//
	// This parameter is required.
	Account []*int64 `json:"Account,omitempty" xml:"Account,omitempty" type:"Repeated"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the shared custom image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-2zehv38jjmwva1ee****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RemoveCustomImageShareAccountRequest) String() string {
	return dara.Prettify(s)
}

func (s RemoveCustomImageShareAccountRequest) GoString() string {
	return s.String()
}

func (s *RemoveCustomImageShareAccountRequest) GetAccount() []*int64 {
	return s.Account
}

func (s *RemoveCustomImageShareAccountRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *RemoveCustomImageShareAccountRequest) GetImageId() *string {
	return s.ImageId
}

func (s *RemoveCustomImageShareAccountRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RemoveCustomImageShareAccountRequest) SetAccount(v []*int64) *RemoveCustomImageShareAccountRequest {
	s.Account = v
	return s
}

func (s *RemoveCustomImageShareAccountRequest) SetClientToken(v string) *RemoveCustomImageShareAccountRequest {
	s.ClientToken = &v
	return s
}

func (s *RemoveCustomImageShareAccountRequest) SetImageId(v string) *RemoveCustomImageShareAccountRequest {
	s.ImageId = &v
	return s
}

func (s *RemoveCustomImageShareAccountRequest) SetRegionId(v string) *RemoveCustomImageShareAccountRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveCustomImageShareAccountRequest) Validate() error {
	return dara.Validate(s)
}

type iRemoveCustomImageShareAccountResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *RemoveCustomImageShareAccountResponseBody
	GetRequestId() *string
}

type RemoveCustomImageShareAccountResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveCustomImageShareAccountResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RemoveCustomImageShareAccountResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveCustomImageShareAccountResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RemoveCustomImageShareAccountResponseBody) SetRequestId(v string) *RemoveCustomImageShareAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveCustomImageShareAccountResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRemoveCustomImageShareAccountResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RemoveCustomImageShareAccountResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RemoveCustomImageShareAccountResponse
	GetStatusCode() *int32
	SetBody(v *RemoveCustomImageShareAccountResponseBody) *RemoveCustomImageShareAccountResponse
	GetBody() *RemoveCustomImageShareAccountResponseBody
}

type RemoveCustomImageShareAccountResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveCustomImageShareAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveCustomImageShareAccountResponse) String() string {
	return dara.Prettify(s)
}

func (s RemoveCustomImageShareAccountResponse) GoString() string {
	return s.String()
}

func (s *RemoveCustomImageShareAccountResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RemoveCustomImageShareAccountResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RemoveCustomImageShareAccountResponse) GetBody() *RemoveCustomImageShareAccountResponseBody {
	return s.Body
}

func (s *RemoveCustomImageShareAccountResponse) SetHeaders(v map[string]*string) *RemoveCustomImageShareAccountResponse {
	s.Headers = v
	return s
}

func (s *RemoveCustomImageShareAccountResponse) SetStatusCode(v int32) *RemoveCustomImageShareAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveCustomImageShareAccountResponse) SetBody(v *RemoveCustomImageShareAccountResponseBody) *RemoveCustomImageShareAccountResponse {
	s.Body = v
	return s
}

func (s *RemoveCustomImageShareAccountResponse) Validate() error {
	return dara.Validate(s)
}

type iRenewInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *RenewInstanceRequest
	GetClientToken() *string
	SetInstanceId(v string) *RenewInstanceRequest
	GetInstanceId() *string
	SetPeriod(v int32) *RenewInstanceRequest
	GetPeriod() *int32
	SetRegionId(v string) *RenewInstanceRequest
	GetRegionId() *string
}

type RenewInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The renewal period. Unit: month. Valid values: 1, 3, 6, 12, 24, and 36.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The region ID of the server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *RenewInstanceRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *RenewInstanceRequest) GetPeriod() *int32 {
	return s.Period
}

func (s *RenewInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RenewInstanceRequest) SetClientToken(v string) *RenewInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewInstanceRequest) SetInstanceId(v string) *RenewInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v int32) *RenewInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewInstanceRequest) SetRegionId(v string) *RenewInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *RenewInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iRenewInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *RenewInstanceResponseBody
	GetRequestId() *string
}

type RenewInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RenewInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RenewInstanceResponseBody) SetRequestId(v string) *RenewInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenewInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRenewInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RenewInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RenewInstanceResponse
	GetStatusCode() *int32
	SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse
	GetBody() *RenewInstanceResponseBody
}

type RenewInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RenewInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RenewInstanceResponse) GetBody() *RenewInstanceResponseBody {
	return s.Body
}

func (s *RenewInstanceResponse) SetHeaders(v map[string]*string) *RenewInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewInstanceResponse) SetStatusCode(v int32) *RenewInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewInstanceResponse) SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse {
	s.Body = v
	return s
}

func (s *RenewInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iResetDatabaseAccountPasswordRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccountPassword(v string) *ResetDatabaseAccountPasswordRequest
	GetAccountPassword() *string
	SetClientToken(v string) *ResetDatabaseAccountPasswordRequest
	GetClientToken() *string
	SetDatabaseInstanceId(v string) *ResetDatabaseAccountPasswordRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *ResetDatabaseAccountPasswordRequest
	GetRegionId() *string
}

type ResetDatabaseAccountPasswordRequest struct {
	// The password of the administrator account of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// Password****
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ResetDatabaseAccountPasswordRequest) String() string {
	return dara.Prettify(s)
}

func (s ResetDatabaseAccountPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetDatabaseAccountPasswordRequest) GetAccountPassword() *string {
	return s.AccountPassword
}

func (s *ResetDatabaseAccountPasswordRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ResetDatabaseAccountPasswordRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *ResetDatabaseAccountPasswordRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ResetDatabaseAccountPasswordRequest) SetAccountPassword(v string) *ResetDatabaseAccountPasswordRequest {
	s.AccountPassword = &v
	return s
}

func (s *ResetDatabaseAccountPasswordRequest) SetClientToken(v string) *ResetDatabaseAccountPasswordRequest {
	s.ClientToken = &v
	return s
}

func (s *ResetDatabaseAccountPasswordRequest) SetDatabaseInstanceId(v string) *ResetDatabaseAccountPasswordRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *ResetDatabaseAccountPasswordRequest) SetRegionId(v string) *ResetDatabaseAccountPasswordRequest {
	s.RegionId = &v
	return s
}

func (s *ResetDatabaseAccountPasswordRequest) Validate() error {
	return dara.Validate(s)
}

type iResetDatabaseAccountPasswordResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ResetDatabaseAccountPasswordResponseBody
	GetRequestId() *string
}

type ResetDatabaseAccountPasswordResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetDatabaseAccountPasswordResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ResetDatabaseAccountPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ResetDatabaseAccountPasswordResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ResetDatabaseAccountPasswordResponseBody) SetRequestId(v string) *ResetDatabaseAccountPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetDatabaseAccountPasswordResponseBody) Validate() error {
	return dara.Validate(s)
}

type iResetDatabaseAccountPasswordResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ResetDatabaseAccountPasswordResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ResetDatabaseAccountPasswordResponse
	GetStatusCode() *int32
	SetBody(v *ResetDatabaseAccountPasswordResponseBody) *ResetDatabaseAccountPasswordResponse
	GetBody() *ResetDatabaseAccountPasswordResponseBody
}

type ResetDatabaseAccountPasswordResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetDatabaseAccountPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetDatabaseAccountPasswordResponse) String() string {
	return dara.Prettify(s)
}

func (s ResetDatabaseAccountPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetDatabaseAccountPasswordResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ResetDatabaseAccountPasswordResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ResetDatabaseAccountPasswordResponse) GetBody() *ResetDatabaseAccountPasswordResponseBody {
	return s.Body
}

func (s *ResetDatabaseAccountPasswordResponse) SetHeaders(v map[string]*string) *ResetDatabaseAccountPasswordResponse {
	s.Headers = v
	return s
}

func (s *ResetDatabaseAccountPasswordResponse) SetStatusCode(v int32) *ResetDatabaseAccountPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetDatabaseAccountPasswordResponse) SetBody(v *ResetDatabaseAccountPasswordResponseBody) *ResetDatabaseAccountPasswordResponse {
	s.Body = v
	return s
}

func (s *ResetDatabaseAccountPasswordResponse) Validate() error {
	return dara.Validate(s)
}

type iResetDiskRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ResetDiskRequest
	GetClientToken() *string
	SetDiskId(v string) *ResetDiskRequest
	GetDiskId() *string
	SetRegionId(v string) *ResetDiskRequest
	GetRegionId() *string
	SetSnapshotId(v string) *ResetDiskRequest
	GetSnapshotId() *string
}

type ResetDiskRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the disk to be rolled back.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-bp14wq0149cpp2xy****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The region ID of the simple application server for which the snapshot is created.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The snapshot ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// s-bp16oazlsold4dks****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s ResetDiskRequest) String() string {
	return dara.Prettify(s)
}

func (s ResetDiskRequest) GoString() string {
	return s.String()
}

func (s *ResetDiskRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ResetDiskRequest) GetDiskId() *string {
	return s.DiskId
}

func (s *ResetDiskRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ResetDiskRequest) GetSnapshotId() *string {
	return s.SnapshotId
}

func (s *ResetDiskRequest) SetClientToken(v string) *ResetDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *ResetDiskRequest) SetDiskId(v string) *ResetDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResetDiskRequest) SetRegionId(v string) *ResetDiskRequest {
	s.RegionId = &v
	return s
}

func (s *ResetDiskRequest) SetSnapshotId(v string) *ResetDiskRequest {
	s.SnapshotId = &v
	return s
}

func (s *ResetDiskRequest) Validate() error {
	return dara.Validate(s)
}

type iResetDiskResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ResetDiskResponseBody
	GetRequestId() *string
}

type ResetDiskResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetDiskResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ResetDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ResetDiskResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ResetDiskResponseBody) SetRequestId(v string) *ResetDiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetDiskResponseBody) Validate() error {
	return dara.Validate(s)
}

type iResetDiskResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ResetDiskResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ResetDiskResponse
	GetStatusCode() *int32
	SetBody(v *ResetDiskResponseBody) *ResetDiskResponse
	GetBody() *ResetDiskResponseBody
}

type ResetDiskResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetDiskResponse) String() string {
	return dara.Prettify(s)
}

func (s ResetDiskResponse) GoString() string {
	return s.String()
}

func (s *ResetDiskResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ResetDiskResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ResetDiskResponse) GetBody() *ResetDiskResponseBody {
	return s.Body
}

func (s *ResetDiskResponse) SetHeaders(v map[string]*string) *ResetDiskResponse {
	s.Headers = v
	return s
}

func (s *ResetDiskResponse) SetStatusCode(v int32) *ResetDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetDiskResponse) SetBody(v *ResetDiskResponseBody) *ResetDiskResponse {
	s.Body = v
	return s
}

func (s *ResetDiskResponse) Validate() error {
	return dara.Validate(s)
}

type iResetSystemRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ResetSystemRequest
	GetClientToken() *string
	SetImageId(v string) *ResetSystemRequest
	GetImageId() *string
	SetInstanceId(v string) *ResetSystemRequest
	GetInstanceId() *string
	SetLoginCredentials(v *ResetSystemRequestLoginCredentials) *ResetSystemRequest
	GetLoginCredentials() *ResetSystemRequestLoginCredentials
	SetRegionId(v string) *ResetSystemRequest
	GetRegionId() *string
}

type ResetSystemRequest struct {
	// The client token that you want to use to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [Ensure idempotence](https://help.aliyun.com/document_detail/25693.html)
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the destination image. If you do not specify this parameter, the current image is reset.
	//
	// example:
	//
	// 794c230fd3e64ea19f83f4d7a0ad****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId       *string                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginCredentials *ResetSystemRequestLoginCredentials `json:"LoginCredentials,omitempty" xml:"LoginCredentials,omitempty" type:"Struct"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ResetSystemRequest) String() string {
	return dara.Prettify(s)
}

func (s ResetSystemRequest) GoString() string {
	return s.String()
}

func (s *ResetSystemRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ResetSystemRequest) GetImageId() *string {
	return s.ImageId
}

func (s *ResetSystemRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *ResetSystemRequest) GetLoginCredentials() *ResetSystemRequestLoginCredentials {
	return s.LoginCredentials
}

func (s *ResetSystemRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ResetSystemRequest) SetClientToken(v string) *ResetSystemRequest {
	s.ClientToken = &v
	return s
}

func (s *ResetSystemRequest) SetImageId(v string) *ResetSystemRequest {
	s.ImageId = &v
	return s
}

func (s *ResetSystemRequest) SetInstanceId(v string) *ResetSystemRequest {
	s.InstanceId = &v
	return s
}

func (s *ResetSystemRequest) SetLoginCredentials(v *ResetSystemRequestLoginCredentials) *ResetSystemRequest {
	s.LoginCredentials = v
	return s
}

func (s *ResetSystemRequest) SetRegionId(v string) *ResetSystemRequest {
	s.RegionId = &v
	return s
}

func (s *ResetSystemRequest) Validate() error {
	return dara.Validate(s)
}

type ResetSystemRequestLoginCredentials struct {
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	Password    *string `json:"Password,omitempty" xml:"Password,omitempty"`
}

func (s ResetSystemRequestLoginCredentials) String() string {
	return dara.Prettify(s)
}

func (s ResetSystemRequestLoginCredentials) GoString() string {
	return s.String()
}

func (s *ResetSystemRequestLoginCredentials) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *ResetSystemRequestLoginCredentials) GetPassword() *string {
	return s.Password
}

func (s *ResetSystemRequestLoginCredentials) SetKeyPairName(v string) *ResetSystemRequestLoginCredentials {
	s.KeyPairName = &v
	return s
}

func (s *ResetSystemRequestLoginCredentials) SetPassword(v string) *ResetSystemRequestLoginCredentials {
	s.Password = &v
	return s
}

func (s *ResetSystemRequestLoginCredentials) Validate() error {
	return dara.Validate(s)
}

type iResetSystemResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ResetSystemResponseBody
	GetRequestId() *string
}

type ResetSystemResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetSystemResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ResetSystemResponseBody) GoString() string {
	return s.String()
}

func (s *ResetSystemResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ResetSystemResponseBody) SetRequestId(v string) *ResetSystemResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetSystemResponseBody) Validate() error {
	return dara.Validate(s)
}

type iResetSystemResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ResetSystemResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ResetSystemResponse
	GetStatusCode() *int32
	SetBody(v *ResetSystemResponseBody) *ResetSystemResponse
	GetBody() *ResetSystemResponseBody
}

type ResetSystemResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetSystemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetSystemResponse) String() string {
	return dara.Prettify(s)
}

func (s ResetSystemResponse) GoString() string {
	return s.String()
}

func (s *ResetSystemResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ResetSystemResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ResetSystemResponse) GetBody() *ResetSystemResponseBody {
	return s.Body
}

func (s *ResetSystemResponse) SetHeaders(v map[string]*string) *ResetSystemResponse {
	s.Headers = v
	return s
}

func (s *ResetSystemResponse) SetStatusCode(v int32) *ResetSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetSystemResponse) SetBody(v *ResetSystemResponseBody) *ResetSystemResponse {
	s.Body = v
	return s
}

func (s *ResetSystemResponse) Validate() error {
	return dara.Validate(s)
}

type iRestartDatabaseInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *RestartDatabaseInstanceRequest
	GetClientToken() *string
	SetDatabaseInstanceId(v string) *RestartDatabaseInstanceRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *RestartDatabaseInstanceRequest
	GetRegionId() *string
}

type RestartDatabaseInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RestartDatabaseInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s RestartDatabaseInstanceRequest) GoString() string {
	return s.String()
}

func (s *RestartDatabaseInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *RestartDatabaseInstanceRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *RestartDatabaseInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RestartDatabaseInstanceRequest) SetClientToken(v string) *RestartDatabaseInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RestartDatabaseInstanceRequest) SetDatabaseInstanceId(v string) *RestartDatabaseInstanceRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *RestartDatabaseInstanceRequest) SetRegionId(v string) *RestartDatabaseInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *RestartDatabaseInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iRestartDatabaseInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *RestartDatabaseInstanceResponseBody
	GetRequestId() *string
}

type RestartDatabaseInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartDatabaseInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RestartDatabaseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RestartDatabaseInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RestartDatabaseInstanceResponseBody) SetRequestId(v string) *RestartDatabaseInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestartDatabaseInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRestartDatabaseInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RestartDatabaseInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RestartDatabaseInstanceResponse
	GetStatusCode() *int32
	SetBody(v *RestartDatabaseInstanceResponseBody) *RestartDatabaseInstanceResponse
	GetBody() *RestartDatabaseInstanceResponseBody
}

type RestartDatabaseInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RestartDatabaseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RestartDatabaseInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s RestartDatabaseInstanceResponse) GoString() string {
	return s.String()
}

func (s *RestartDatabaseInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RestartDatabaseInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RestartDatabaseInstanceResponse) GetBody() *RestartDatabaseInstanceResponseBody {
	return s.Body
}

func (s *RestartDatabaseInstanceResponse) SetHeaders(v map[string]*string) *RestartDatabaseInstanceResponse {
	s.Headers = v
	return s
}

func (s *RestartDatabaseInstanceResponse) SetStatusCode(v int32) *RestartDatabaseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartDatabaseInstanceResponse) SetBody(v *RestartDatabaseInstanceResponseBody) *RestartDatabaseInstanceResponse {
	s.Body = v
	return s
}

func (s *RestartDatabaseInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iRunCommandRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandContent(v string) *RunCommandRequest
	GetCommandContent() *string
	SetEnableParameter(v bool) *RunCommandRequest
	GetEnableParameter() *bool
	SetInstanceId(v string) *RunCommandRequest
	GetInstanceId() *string
	SetName(v string) *RunCommandRequest
	GetName() *string
	SetParameters(v map[string]interface{}) *RunCommandRequest
	GetParameters() map[string]interface{}
	SetRegionId(v string) *RunCommandRequest
	GetRegionId() *string
	SetTimeout(v int32) *RunCommandRequest
	GetTimeout() *int32
	SetType(v string) *RunCommandRequest
	GetType() *string
	SetWindowsPasswordName(v string) *RunCommandRequest
	GetWindowsPasswordName() *string
	SetWorkingDir(v string) *RunCommandRequest
	GetWorkingDir() *string
	SetWorkingUser(v string) *RunCommandRequest
	GetWorkingUser() *string
}

type RunCommandRequest struct {
	// The content of the command. Take note of the following items:
	//
	// 	- If you set `EnableParameter` to true, the custom parameter feature is enabled in the command content and you can configure custom parameters based on the following rules:
	//
	// 	- Define custom parameters in the {{}} format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
	//
	// 	- The number of custom parameters cannot be greater than 20.
	//
	// 	- A custom parameter name can contain only letters, digits, underscores (_), and hyphens (-). The name is case-insensitive.
	//
	// 	- Each custom parameter name cannot exceed 64 bytes in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// ifconfig -s
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// Specifies whether to enable the custom parameter feature.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	EnableParameter *bool `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the command.
	//
	// This parameter is required.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The custom parameters in the key-value pair format that are to be passed in when the command includes custom parameters. For example, if the command content is `echo {{name}}`, you can use `Parameters` to pass in the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced with the paired Jack value to generate a new command. As a result, the `echo Jack` command is executed.
	//
	// Number of custom parameters ranges from 0 to 20. Take note of the following items:
	//
	// 	- The key cannot be an empty string. It can be up to 64 characters in length.
	//
	// 	- The value can be an empty string.
	//
	// 	- After custom parameters and original command content are encoded in Base64, the command cannot exceed 16 KB in size.
	//
	// 	- The custom parameter names that are specified by Parameters must be included in the custom parameter names that you specified when you created the command. You can use empty strings to represent the parameters that are not passed in.
	//
	// This parameter is empty by default, which indicates to disable the custom parameter feature.
	//
	// example:
	//
	// {"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}
	Parameters map[string]interface{} `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The timeout period of the command on the server.
	//
	// If a command execution task times out, Command Assistant forcibly terminates the task process. Valid values: 10 to 86400. Unit: seconds. The period of 86400 seconds is equal to 24 hours.
	//
	// Default value: 60.
	//
	// example:
	//
	// 60
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The language type of the command. Valid values:
	//
	// 	- RunBatScript: batch commands (applicable to Windows servers).
	//
	// 	- RunPowerShellScript: PowerShell commands (applicable to Windows servers).
	//
	// 	- RunShellScript: shell commands (applicable to Linux servers).
	//
	// This parameter is required.
	//
	// example:
	//
	// RunShellScript
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The name of the password used to run the command on a Windows simple application server.
	//
	// If you want to use a username other than the default "system" username to run the command on a Windows server, you must specify both the WindowsPasswordName and WorkingUser parameters. The password is hosted in plaintext in the parameter repository of CloudOps Orchestration Service (OOS) to mitigate the risk of password leaks. Only the name of the password is passed in by using WindowsPasswordName.
	//
	// example:
	//
	// axtSecretPassword
	WindowsPasswordName *string `json:"WindowsPasswordName,omitempty" xml:"WindowsPasswordName,omitempty"`
	// The execution path of the command. Custom paths are supported. Default execution paths vary based on the operating systems of the servers.
	//
	// 	- For Linux servers, the default path is /root of the root user.
	//
	// 	- For Windows servers, the default path is C:\\Windows\\system32.
	//
	// example:
	//
	// /home/
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	// A user of the server who runs the command. We recommend that you run the command as a regular user to reduce security risks. Default values:
	//
	// 	- For Linux servers, the default value is root.
	//
	// 	- For Windows servers, the default value is system.
	//
	// example:
	//
	// root
	WorkingUser *string `json:"WorkingUser,omitempty" xml:"WorkingUser,omitempty"`
}

func (s RunCommandRequest) String() string {
	return dara.Prettify(s)
}

func (s RunCommandRequest) GoString() string {
	return s.String()
}

func (s *RunCommandRequest) GetCommandContent() *string {
	return s.CommandContent
}

func (s *RunCommandRequest) GetEnableParameter() *bool {
	return s.EnableParameter
}

func (s *RunCommandRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *RunCommandRequest) GetName() *string {
	return s.Name
}

func (s *RunCommandRequest) GetParameters() map[string]interface{} {
	return s.Parameters
}

func (s *RunCommandRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RunCommandRequest) GetTimeout() *int32 {
	return s.Timeout
}

func (s *RunCommandRequest) GetType() *string {
	return s.Type
}

func (s *RunCommandRequest) GetWindowsPasswordName() *string {
	return s.WindowsPasswordName
}

func (s *RunCommandRequest) GetWorkingDir() *string {
	return s.WorkingDir
}

func (s *RunCommandRequest) GetWorkingUser() *string {
	return s.WorkingUser
}

func (s *RunCommandRequest) SetCommandContent(v string) *RunCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *RunCommandRequest) SetEnableParameter(v bool) *RunCommandRequest {
	s.EnableParameter = &v
	return s
}

func (s *RunCommandRequest) SetInstanceId(v string) *RunCommandRequest {
	s.InstanceId = &v
	return s
}

func (s *RunCommandRequest) SetName(v string) *RunCommandRequest {
	s.Name = &v
	return s
}

func (s *RunCommandRequest) SetParameters(v map[string]interface{}) *RunCommandRequest {
	s.Parameters = v
	return s
}

func (s *RunCommandRequest) SetRegionId(v string) *RunCommandRequest {
	s.RegionId = &v
	return s
}

func (s *RunCommandRequest) SetTimeout(v int32) *RunCommandRequest {
	s.Timeout = &v
	return s
}

func (s *RunCommandRequest) SetType(v string) *RunCommandRequest {
	s.Type = &v
	return s
}

func (s *RunCommandRequest) SetWindowsPasswordName(v string) *RunCommandRequest {
	s.WindowsPasswordName = &v
	return s
}

func (s *RunCommandRequest) SetWorkingDir(v string) *RunCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *RunCommandRequest) SetWorkingUser(v string) *RunCommandRequest {
	s.WorkingUser = &v
	return s
}

func (s *RunCommandRequest) Validate() error {
	return dara.Validate(s)
}

type iRunCommandShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandContent(v string) *RunCommandShrinkRequest
	GetCommandContent() *string
	SetEnableParameter(v bool) *RunCommandShrinkRequest
	GetEnableParameter() *bool
	SetInstanceId(v string) *RunCommandShrinkRequest
	GetInstanceId() *string
	SetName(v string) *RunCommandShrinkRequest
	GetName() *string
	SetParametersShrink(v string) *RunCommandShrinkRequest
	GetParametersShrink() *string
	SetRegionId(v string) *RunCommandShrinkRequest
	GetRegionId() *string
	SetTimeout(v int32) *RunCommandShrinkRequest
	GetTimeout() *int32
	SetType(v string) *RunCommandShrinkRequest
	GetType() *string
	SetWindowsPasswordName(v string) *RunCommandShrinkRequest
	GetWindowsPasswordName() *string
	SetWorkingDir(v string) *RunCommandShrinkRequest
	GetWorkingDir() *string
	SetWorkingUser(v string) *RunCommandShrinkRequest
	GetWorkingUser() *string
}

type RunCommandShrinkRequest struct {
	// The content of the command. Take note of the following items:
	//
	// 	- If you set `EnableParameter` to true, the custom parameter feature is enabled in the command content and you can configure custom parameters based on the following rules:
	//
	// 	- Define custom parameters in the {{}} format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
	//
	// 	- The number of custom parameters cannot be greater than 20.
	//
	// 	- A custom parameter name can contain only letters, digits, underscores (_), and hyphens (-). The name is case-insensitive.
	//
	// 	- Each custom parameter name cannot exceed 64 bytes in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// ifconfig -s
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// Specifies whether to enable the custom parameter feature.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	EnableParameter *bool `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the command.
	//
	// This parameter is required.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The custom parameters in the key-value pair format that are to be passed in when the command includes custom parameters. For example, if the command content is `echo {{name}}`, you can use `Parameters` to pass in the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced with the paired Jack value to generate a new command. As a result, the `echo Jack` command is executed.
	//
	// Number of custom parameters ranges from 0 to 20. Take note of the following items:
	//
	// 	- The key cannot be an empty string. It can be up to 64 characters in length.
	//
	// 	- The value can be an empty string.
	//
	// 	- After custom parameters and original command content are encoded in Base64, the command cannot exceed 16 KB in size.
	//
	// 	- The custom parameter names that are specified by Parameters must be included in the custom parameter names that you specified when you created the command. You can use empty strings to represent the parameters that are not passed in.
	//
	// This parameter is empty by default, which indicates to disable the custom parameter feature.
	//
	// example:
	//
	// {"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}
	ParametersShrink *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The timeout period of the command on the server.
	//
	// If a command execution task times out, Command Assistant forcibly terminates the task process. Valid values: 10 to 86400. Unit: seconds. The period of 86400 seconds is equal to 24 hours.
	//
	// Default value: 60.
	//
	// example:
	//
	// 60
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The language type of the command. Valid values:
	//
	// 	- RunBatScript: batch commands (applicable to Windows servers).
	//
	// 	- RunPowerShellScript: PowerShell commands (applicable to Windows servers).
	//
	// 	- RunShellScript: shell commands (applicable to Linux servers).
	//
	// This parameter is required.
	//
	// example:
	//
	// RunShellScript
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The name of the password used to run the command on a Windows simple application server.
	//
	// If you want to use a username other than the default "system" username to run the command on a Windows server, you must specify both the WindowsPasswordName and WorkingUser parameters. The password is hosted in plaintext in the parameter repository of CloudOps Orchestration Service (OOS) to mitigate the risk of password leaks. Only the name of the password is passed in by using WindowsPasswordName.
	//
	// example:
	//
	// axtSecretPassword
	WindowsPasswordName *string `json:"WindowsPasswordName,omitempty" xml:"WindowsPasswordName,omitempty"`
	// The execution path of the command. Custom paths are supported. Default execution paths vary based on the operating systems of the servers.
	//
	// 	- For Linux servers, the default path is /root of the root user.
	//
	// 	- For Windows servers, the default path is C:\\Windows\\system32.
	//
	// example:
	//
	// /home/
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	// A user of the server who runs the command. We recommend that you run the command as a regular user to reduce security risks. Default values:
	//
	// 	- For Linux servers, the default value is root.
	//
	// 	- For Windows servers, the default value is system.
	//
	// example:
	//
	// root
	WorkingUser *string `json:"WorkingUser,omitempty" xml:"WorkingUser,omitempty"`
}

func (s RunCommandShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s RunCommandShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunCommandShrinkRequest) GetCommandContent() *string {
	return s.CommandContent
}

func (s *RunCommandShrinkRequest) GetEnableParameter() *bool {
	return s.EnableParameter
}

func (s *RunCommandShrinkRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *RunCommandShrinkRequest) GetName() *string {
	return s.Name
}

func (s *RunCommandShrinkRequest) GetParametersShrink() *string {
	return s.ParametersShrink
}

func (s *RunCommandShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RunCommandShrinkRequest) GetTimeout() *int32 {
	return s.Timeout
}

func (s *RunCommandShrinkRequest) GetType() *string {
	return s.Type
}

func (s *RunCommandShrinkRequest) GetWindowsPasswordName() *string {
	return s.WindowsPasswordName
}

func (s *RunCommandShrinkRequest) GetWorkingDir() *string {
	return s.WorkingDir
}

func (s *RunCommandShrinkRequest) GetWorkingUser() *string {
	return s.WorkingUser
}

func (s *RunCommandShrinkRequest) SetCommandContent(v string) *RunCommandShrinkRequest {
	s.CommandContent = &v
	return s
}

func (s *RunCommandShrinkRequest) SetEnableParameter(v bool) *RunCommandShrinkRequest {
	s.EnableParameter = &v
	return s
}

func (s *RunCommandShrinkRequest) SetInstanceId(v string) *RunCommandShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *RunCommandShrinkRequest) SetName(v string) *RunCommandShrinkRequest {
	s.Name = &v
	return s
}

func (s *RunCommandShrinkRequest) SetParametersShrink(v string) *RunCommandShrinkRequest {
	s.ParametersShrink = &v
	return s
}

func (s *RunCommandShrinkRequest) SetRegionId(v string) *RunCommandShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *RunCommandShrinkRequest) SetTimeout(v int32) *RunCommandShrinkRequest {
	s.Timeout = &v
	return s
}

func (s *RunCommandShrinkRequest) SetType(v string) *RunCommandShrinkRequest {
	s.Type = &v
	return s
}

func (s *RunCommandShrinkRequest) SetWindowsPasswordName(v string) *RunCommandShrinkRequest {
	s.WindowsPasswordName = &v
	return s
}

func (s *RunCommandShrinkRequest) SetWorkingDir(v string) *RunCommandShrinkRequest {
	s.WorkingDir = &v
	return s
}

func (s *RunCommandShrinkRequest) SetWorkingUser(v string) *RunCommandShrinkRequest {
	s.WorkingUser = &v
	return s
}

func (s *RunCommandShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iRunCommandResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetInvokeId(v string) *RunCommandResponseBody
	GetInvokeId() *string
	SetRequestId(v string) *RunCommandResponseBody
	GetRequestId() *string
}

type RunCommandResponseBody struct {
	// The execution ID.
	//
	// example:
	//
	// t-hz02p9545t6****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunCommandResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RunCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RunCommandResponseBody) GetInvokeId() *string {
	return s.InvokeId
}

func (s *RunCommandResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RunCommandResponseBody) SetInvokeId(v string) *RunCommandResponseBody {
	s.InvokeId = &v
	return s
}

func (s *RunCommandResponseBody) SetRequestId(v string) *RunCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunCommandResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRunCommandResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RunCommandResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RunCommandResponse
	GetStatusCode() *int32
	SetBody(v *RunCommandResponseBody) *RunCommandResponse
	GetBody() *RunCommandResponseBody
}

type RunCommandResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunCommandResponse) String() string {
	return dara.Prettify(s)
}

func (s RunCommandResponse) GoString() string {
	return s.String()
}

func (s *RunCommandResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RunCommandResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RunCommandResponse) GetBody() *RunCommandResponseBody {
	return s.Body
}

func (s *RunCommandResponse) SetHeaders(v map[string]*string) *RunCommandResponse {
	s.Headers = v
	return s
}

func (s *RunCommandResponse) SetStatusCode(v int32) *RunCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCommandResponse) SetBody(v *RunCommandResponseBody) *RunCommandResponse {
	s.Body = v
	return s
}

func (s *RunCommandResponse) Validate() error {
	return dara.Validate(s)
}

type iStartDatabaseInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *StartDatabaseInstanceRequest
	GetClientToken() *string
	SetDatabaseInstanceId(v string) *StartDatabaseInstanceRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *StartDatabaseInstanceRequest
	GetRegionId() *string
}

type StartDatabaseInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartDatabaseInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s StartDatabaseInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartDatabaseInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *StartDatabaseInstanceRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *StartDatabaseInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *StartDatabaseInstanceRequest) SetClientToken(v string) *StartDatabaseInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *StartDatabaseInstanceRequest) SetDatabaseInstanceId(v string) *StartDatabaseInstanceRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *StartDatabaseInstanceRequest) SetRegionId(v string) *StartDatabaseInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StartDatabaseInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iStartDatabaseInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *StartDatabaseInstanceResponseBody
	GetRequestId() *string
}

type StartDatabaseInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartDatabaseInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s StartDatabaseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartDatabaseInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *StartDatabaseInstanceResponseBody) SetRequestId(v string) *StartDatabaseInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartDatabaseInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iStartDatabaseInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *StartDatabaseInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *StartDatabaseInstanceResponse
	GetStatusCode() *int32
	SetBody(v *StartDatabaseInstanceResponseBody) *StartDatabaseInstanceResponse
	GetBody() *StartDatabaseInstanceResponseBody
}

type StartDatabaseInstanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartDatabaseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartDatabaseInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s StartDatabaseInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartDatabaseInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *StartDatabaseInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *StartDatabaseInstanceResponse) GetBody() *StartDatabaseInstanceResponseBody {
	return s.Body
}

func (s *StartDatabaseInstanceResponse) SetHeaders(v map[string]*string) *StartDatabaseInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartDatabaseInstanceResponse) SetStatusCode(v int32) *StartDatabaseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartDatabaseInstanceResponse) SetBody(v *StartDatabaseInstanceResponseBody) *StartDatabaseInstanceResponse {
	s.Body = v
	return s
}

func (s *StartDatabaseInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iStartInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *StartInstanceRequest
	GetClientToken() *string
	SetInstanceId(v string) *StartInstanceRequest
	GetInstanceId() *string
	SetRegionId(v string) *StartInstanceRequest
	GetRegionId() *string
}

type StartInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s StartInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *StartInstanceRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *StartInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *StartInstanceRequest) SetClientToken(v string) *StartInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *StartInstanceRequest) SetInstanceId(v string) *StartInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StartInstanceRequest) SetRegionId(v string) *StartInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StartInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iStartInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *StartInstanceResponseBody
	GetRequestId() *string
}

type StartInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s StartInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *StartInstanceResponseBody) SetRequestId(v string) *StartInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iStartInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *StartInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *StartInstanceResponse
	GetStatusCode() *int32
	SetBody(v *StartInstanceResponseBody) *StartInstanceResponse
	GetBody() *StartInstanceResponseBody
}

type StartInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s StartInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *StartInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *StartInstanceResponse) GetBody() *StartInstanceResponseBody {
	return s.Body
}

func (s *StartInstanceResponse) SetHeaders(v map[string]*string) *StartInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartInstanceResponse) SetStatusCode(v int32) *StartInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartInstanceResponse) SetBody(v *StartInstanceResponseBody) *StartInstanceResponse {
	s.Body = v
	return s
}

func (s *StartInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iStartInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *StartInstancesRequest
	GetClientToken() *string
	SetInstanceIds(v string) *StartInstancesRequest
	GetInstanceIds() *string
	SetRegionId(v string) *StartInstancesRequest
	GetRegionId() *string
}

type StartInstancesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s StartInstancesRequest) GoString() string {
	return s.String()
}

func (s *StartInstancesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *StartInstancesRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *StartInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *StartInstancesRequest) SetClientToken(v string) *StartInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *StartInstancesRequest) SetInstanceIds(v string) *StartInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *StartInstancesRequest) SetRegionId(v string) *StartInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *StartInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type iStartInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *StartInstancesResponseBody
	GetRequestId() *string
}

type StartInstancesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s StartInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *StartInstancesResponseBody) SetRequestId(v string) *StartInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iStartInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *StartInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *StartInstancesResponse
	GetStatusCode() *int32
	SetBody(v *StartInstancesResponseBody) *StartInstancesResponse
	GetBody() *StartInstancesResponseBody
}

type StartInstancesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s StartInstancesResponse) GoString() string {
	return s.String()
}

func (s *StartInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *StartInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *StartInstancesResponse) GetBody() *StartInstancesResponseBody {
	return s.Body
}

func (s *StartInstancesResponse) SetHeaders(v map[string]*string) *StartInstancesResponse {
	s.Headers = v
	return s
}

func (s *StartInstancesResponse) SetStatusCode(v int32) *StartInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *StartInstancesResponse) SetBody(v *StartInstancesResponseBody) *StartInstancesResponse {
	s.Body = v
	return s
}

func (s *StartInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iStartTerminalSessionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceId(v string) *StartTerminalSessionRequest
	GetInstanceId() *string
	SetRegionId(v string) *StartTerminalSessionRequest
	GetRegionId() *string
}

type StartTerminalSessionRequest struct {
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartTerminalSessionRequest) String() string {
	return dara.Prettify(s)
}

func (s StartTerminalSessionRequest) GoString() string {
	return s.String()
}

func (s *StartTerminalSessionRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *StartTerminalSessionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *StartTerminalSessionRequest) SetInstanceId(v string) *StartTerminalSessionRequest {
	s.InstanceId = &v
	return s
}

func (s *StartTerminalSessionRequest) SetRegionId(v string) *StartTerminalSessionRequest {
	s.RegionId = &v
	return s
}

func (s *StartTerminalSessionRequest) Validate() error {
	return dara.Validate(s)
}

type iStartTerminalSessionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *StartTerminalSessionResponseBody
	GetRequestId() *string
	SetSecurityToken(v string) *StartTerminalSessionResponseBody
	GetSecurityToken() *string
	SetSessionId(v string) *StartTerminalSessionResponseBody
	GetSessionId() *string
	SetWebSocketUrl(v string) *StartTerminalSessionResponseBody
	GetWebSocketUrl() *string
}

type StartTerminalSessionResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// token-xxxaaz
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The session ID.
	//
	// example:
	//
	// ffb90b6e-b18a-4a33-88cf-86fb88****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The URL of the WebSocket session that is used to connect to the server. The URL contains the session ID (`SessionId`) and the authentication token (`SecurityToken`).
	//
	// example:
	//
	// wss://xxxx
	WebSocketUrl *string `json:"WebSocketUrl,omitempty" xml:"WebSocketUrl,omitempty"`
}

func (s StartTerminalSessionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s StartTerminalSessionResponseBody) GoString() string {
	return s.String()
}

func (s *StartTerminalSessionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *StartTerminalSessionResponseBody) GetSecurityToken() *string {
	return s.SecurityToken
}

func (s *StartTerminalSessionResponseBody) GetSessionId() *string {
	return s.SessionId
}

func (s *StartTerminalSessionResponseBody) GetWebSocketUrl() *string {
	return s.WebSocketUrl
}

func (s *StartTerminalSessionResponseBody) SetRequestId(v string) *StartTerminalSessionResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartTerminalSessionResponseBody) SetSecurityToken(v string) *StartTerminalSessionResponseBody {
	s.SecurityToken = &v
	return s
}

func (s *StartTerminalSessionResponseBody) SetSessionId(v string) *StartTerminalSessionResponseBody {
	s.SessionId = &v
	return s
}

func (s *StartTerminalSessionResponseBody) SetWebSocketUrl(v string) *StartTerminalSessionResponseBody {
	s.WebSocketUrl = &v
	return s
}

func (s *StartTerminalSessionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iStartTerminalSessionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *StartTerminalSessionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *StartTerminalSessionResponse
	GetStatusCode() *int32
	SetBody(v *StartTerminalSessionResponseBody) *StartTerminalSessionResponse
	GetBody() *StartTerminalSessionResponseBody
}

type StartTerminalSessionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartTerminalSessionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartTerminalSessionResponse) String() string {
	return dara.Prettify(s)
}

func (s StartTerminalSessionResponse) GoString() string {
	return s.String()
}

func (s *StartTerminalSessionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *StartTerminalSessionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *StartTerminalSessionResponse) GetBody() *StartTerminalSessionResponseBody {
	return s.Body
}

func (s *StartTerminalSessionResponse) SetHeaders(v map[string]*string) *StartTerminalSessionResponse {
	s.Headers = v
	return s
}

func (s *StartTerminalSessionResponse) SetStatusCode(v int32) *StartTerminalSessionResponse {
	s.StatusCode = &v
	return s
}

func (s *StartTerminalSessionResponse) SetBody(v *StartTerminalSessionResponseBody) *StartTerminalSessionResponse {
	s.Body = v
	return s
}

func (s *StartTerminalSessionResponse) Validate() error {
	return dara.Validate(s)
}

type iStopDatabaseInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *StopDatabaseInstanceRequest
	GetClientToken() *string
	SetDatabaseInstanceId(v string) *StopDatabaseInstanceRequest
	GetDatabaseInstanceId() *string
	SetRegionId(v string) *StopDatabaseInstanceRequest
	GetRegionId() *string
}

type StopDatabaseInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Simple Database Service instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// db-38263fa955774501a2ae1bdaed6f****
	DatabaseInstanceId *string `json:"DatabaseInstanceId,omitempty" xml:"DatabaseInstanceId,omitempty"`
	// The region ID of the Simple Database Service instance. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopDatabaseInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s StopDatabaseInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopDatabaseInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *StopDatabaseInstanceRequest) GetDatabaseInstanceId() *string {
	return s.DatabaseInstanceId
}

func (s *StopDatabaseInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *StopDatabaseInstanceRequest) SetClientToken(v string) *StopDatabaseInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *StopDatabaseInstanceRequest) SetDatabaseInstanceId(v string) *StopDatabaseInstanceRequest {
	s.DatabaseInstanceId = &v
	return s
}

func (s *StopDatabaseInstanceRequest) SetRegionId(v string) *StopDatabaseInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StopDatabaseInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iStopDatabaseInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *StopDatabaseInstanceResponseBody
	GetRequestId() *string
}

type StopDatabaseInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 30637AD6-D977-4833-A54C-CC89483E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopDatabaseInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s StopDatabaseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopDatabaseInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *StopDatabaseInstanceResponseBody) SetRequestId(v string) *StopDatabaseInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopDatabaseInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iStopDatabaseInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *StopDatabaseInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *StopDatabaseInstanceResponse
	GetStatusCode() *int32
	SetBody(v *StopDatabaseInstanceResponseBody) *StopDatabaseInstanceResponse
	GetBody() *StopDatabaseInstanceResponseBody
}

type StopDatabaseInstanceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopDatabaseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopDatabaseInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s StopDatabaseInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopDatabaseInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *StopDatabaseInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *StopDatabaseInstanceResponse) GetBody() *StopDatabaseInstanceResponseBody {
	return s.Body
}

func (s *StopDatabaseInstanceResponse) SetHeaders(v map[string]*string) *StopDatabaseInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopDatabaseInstanceResponse) SetStatusCode(v int32) *StopDatabaseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopDatabaseInstanceResponse) SetBody(v *StopDatabaseInstanceResponseBody) *StopDatabaseInstanceResponse {
	s.Body = v
	return s
}

func (s *StopDatabaseInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iStopInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *StopInstanceRequest
	GetClientToken() *string
	SetInstanceId(v string) *StopInstanceRequest
	GetInstanceId() *string
	SetRegionId(v string) *StopInstanceRequest
	GetRegionId() *string
}

type StopInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s StopInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *StopInstanceRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *StopInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *StopInstanceRequest) SetClientToken(v string) *StopInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *StopInstanceRequest) SetInstanceId(v string) *StopInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StopInstanceRequest) SetRegionId(v string) *StopInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StopInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iStopInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *StopInstanceResponseBody
	GetRequestId() *string
}

type StopInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s StopInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *StopInstanceResponseBody) SetRequestId(v string) *StopInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iStopInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *StopInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *StopInstanceResponse
	GetStatusCode() *int32
	SetBody(v *StopInstanceResponseBody) *StopInstanceResponse
	GetBody() *StopInstanceResponseBody
}

type StopInstanceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s StopInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *StopInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *StopInstanceResponse) GetBody() *StopInstanceResponseBody {
	return s.Body
}

func (s *StopInstanceResponse) SetHeaders(v map[string]*string) *StopInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopInstanceResponse) SetStatusCode(v int32) *StopInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopInstanceResponse) SetBody(v *StopInstanceResponseBody) *StopInstanceResponse {
	s.Body = v
	return s
}

func (s *StopInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iStopInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *StopInstancesRequest
	GetClientToken() *string
	SetForceStop(v bool) *StopInstancesRequest
	GetForceStop() *bool
	SetInstanceIds(v string) *StopInstancesRequest
	GetInstanceIds() *string
	SetRegionId(v string) *StopInstancesRequest
	GetRegionId() *string
}

type StopInstancesRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// Specifies whether to forcibly stop the servers.
	//
	// 	- **true**: forcibly stops the servers.
	//
	// 	- **false**: normally stops the servers. This is the default value.
	//
	// example:
	//
	// true
	ForceStop *bool `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	// The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the simple application servers. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s StopInstancesRequest) GoString() string {
	return s.String()
}

func (s *StopInstancesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *StopInstancesRequest) GetForceStop() *bool {
	return s.ForceStop
}

func (s *StopInstancesRequest) GetInstanceIds() *string {
	return s.InstanceIds
}

func (s *StopInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *StopInstancesRequest) SetClientToken(v string) *StopInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *StopInstancesRequest) SetForceStop(v bool) *StopInstancesRequest {
	s.ForceStop = &v
	return s
}

func (s *StopInstancesRequest) SetInstanceIds(v string) *StopInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *StopInstancesRequest) SetRegionId(v string) *StopInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *StopInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type iStopInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *StopInstancesResponseBody
	GetRequestId() *string
}

type StopInstancesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C2DE174B-7196-5778-A00D-6EA2601B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s StopInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *StopInstancesResponseBody) SetRequestId(v string) *StopInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iStopInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *StopInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *StopInstancesResponse
	GetStatusCode() *int32
	SetBody(v *StopInstancesResponseBody) *StopInstancesResponse
	GetBody() *StopInstancesResponseBody
}

type StopInstancesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s StopInstancesResponse) GoString() string {
	return s.String()
}

func (s *StopInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *StopInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *StopInstancesResponse) GetBody() *StopInstancesResponseBody {
	return s.Body
}

func (s *StopInstancesResponse) SetHeaders(v map[string]*string) *StopInstancesResponse {
	s.Headers = v
	return s
}

func (s *StopInstancesResponse) SetStatusCode(v int32) *StopInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *StopInstancesResponse) SetBody(v *StopInstancesResponseBody) *StopInstancesResponse {
	s.Body = v
	return s
}

func (s *StopInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iTagResourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *TagResourcesRequest
	GetClientToken() *string
	SetRegionId(v string) *TagResourcesRequest
	GetRegionId() *string
	SetResourceId(v []*string) *TagResourcesRequest
	GetResourceId() []*string
	SetResourceType(v string) *TagResourcesRequest
	GetResourceType() *string
	SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest
	GetTag() []*TagResourcesRequestTag
}

type TagResourcesRequest struct {
	// The client token that you want to use to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [Ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource IDs. You can specify up to 50 resource IDs.
	//
	// This parameter is required.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The resource type. Valid values:
	//
	// 	- instance
	//
	// 	- snapshot
	//
	// 	- customimage
	//
	// 	- command
	//
	// 	- firewallrule
	//
	// 	- disk
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The list of tags. You can specify up to 20 tags.
	//
	// This parameter is required.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *TagResourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *TagResourcesRequest) GetResourceId() []*string {
	return s.ResourceId
}

func (s *TagResourcesRequest) GetResourceType() *string {
	return s.ResourceType
}

func (s *TagResourcesRequest) GetTag() []*TagResourcesRequestTag {
	return s.Tag
}

func (s *TagResourcesRequest) SetClientToken(v string) *TagResourcesRequest {
	s.ClientToken = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

func (s *TagResourcesRequest) Validate() error {
	return dara.Validate(s)
}

type TagResourcesRequestTag struct {
	// The key of tag N that you want to add to a resource.
	//
	// You cannot specify an empty string as a tag key. The tag key can be up to 64 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that you want to add to a resource.
	//
	// You can specify an empty string as a tag value. The tag value can be up to 64 characters in length and cannot contain http:// or https://.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) GetKey() *string {
	return s.Key
}

func (s *TagResourcesRequestTag) GetValue() *string {
	return s.Value
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

func (s *TagResourcesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iTagResourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *TagResourcesResponseBody
	GetRequestId() *string
}

type TagResourcesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iTagResourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *TagResourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *TagResourcesResponse
	GetStatusCode() *int32
	SetBody(v *TagResourcesResponseBody) *TagResourcesResponse
	GetBody() *TagResourcesResponseBody
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *TagResourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *TagResourcesResponse) GetBody() *TagResourcesResponseBody {
	return s.Body
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

func (s *TagResourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iUntagResourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAll(v bool) *UntagResourcesRequest
	GetAll() *bool
	SetClientToken(v string) *UntagResourcesRequest
	GetClientToken() *string
	SetRegionId(v string) *UntagResourcesRequest
	GetRegionId() *string
	SetResourceId(v []*string) *UntagResourcesRequest
	GetResourceId() []*string
	SetResourceType(v string) *UntagResourcesRequest
	GetResourceType() *string
	SetTagKey(v []*string) *UntagResourcesRequest
	GetTagKey() []*string
}

type UntagResourcesRequest struct {
	// Specifies whether to remove all tags from the specified one or more resources. This parameter takes effect only if the TagKey.N parameter is not set. Valid values:
	//
	// 	- true: deletes all tags that are added to the specific lightweight resource. If no tags are added to the specific lightweight resource, the deletion operation is ignored.
	//
	// 	- false: does not delete the tags that are added to the specific lightweight resource.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The client token that you want to use to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [Ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource IDs. You can specify up to 50 resource IDs.
	//
	// This parameter is required.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The resource type. Valid values:
	//
	// 	- instance
	//
	// 	- snapshot
	//
	// 	- customimage
	//
	// 	- command
	//
	// 	- firewallrule
	//
	// 	- disk
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The key of tag N. Valid values of N: 1 to 20.
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) GetAll() *bool {
	return s.All
}

func (s *UntagResourcesRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *UntagResourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UntagResourcesRequest) GetResourceId() []*string {
	return s.ResourceId
}

func (s *UntagResourcesRequest) GetResourceType() *string {
	return s.ResourceType
}

func (s *UntagResourcesRequest) GetTagKey() []*string {
	return s.TagKey
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetClientToken(v string) *UntagResourcesRequest {
	s.ClientToken = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

func (s *UntagResourcesRequest) Validate() error {
	return dara.Validate(s)
}

type iUntagResourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UntagResourcesResponseBody
	GetRequestId() *string
}

type UntagResourcesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUntagResourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UntagResourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UntagResourcesResponse
	GetStatusCode() *int32
	SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse
	GetBody() *UntagResourcesResponseBody
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UntagResourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UntagResourcesResponse) GetBody() *UntagResourcesResponseBody {
	return s.Body
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

func (s *UntagResourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iUpdateCommandAttributeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCommandId(v string) *UpdateCommandAttributeRequest
	GetCommandId() *string
	SetDescription(v string) *UpdateCommandAttributeRequest
	GetDescription() *string
	SetName(v string) *UpdateCommandAttributeRequest
	GetName() *string
	SetRegionId(v string) *UpdateCommandAttributeRequest
	GetRegionId() *string
	SetTimeout(v int64) *UpdateCommandAttributeRequest
	GetTimeout() *int64
	SetWorkingDir(v string) *UpdateCommandAttributeRequest
	GetWorkingDir() *string
}

type UpdateCommandAttributeRequest struct {
	// The command ID. You can call the [DescribeCommands](https://help.aliyun.com/document_detail/64843.html) operation to query all available command IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// c-sh02yh0932w****
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The description of the command. The description supports all character sets and can be up to 512 characters in length.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the command. The name supports all character sets and can be up to 128 characters in length.
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The maximum timeout period for the command execution on the ECS instance. Unit: seconds. When a command that you created cannot be run, the command execution times out. When the execution times out, the command process is forcefully terminated and the PID of the command is canceled. Default value: 60.
	//
	// example:
	//
	// 60
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The working directory of the command. The directory can be up to 200 characters in length.
	//
	// example:
	//
	// /home/
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
}

func (s UpdateCommandAttributeRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateCommandAttributeRequest) GoString() string {
	return s.String()
}

func (s *UpdateCommandAttributeRequest) GetCommandId() *string {
	return s.CommandId
}

func (s *UpdateCommandAttributeRequest) GetDescription() *string {
	return s.Description
}

func (s *UpdateCommandAttributeRequest) GetName() *string {
	return s.Name
}

func (s *UpdateCommandAttributeRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpdateCommandAttributeRequest) GetTimeout() *int64 {
	return s.Timeout
}

func (s *UpdateCommandAttributeRequest) GetWorkingDir() *string {
	return s.WorkingDir
}

func (s *UpdateCommandAttributeRequest) SetCommandId(v string) *UpdateCommandAttributeRequest {
	s.CommandId = &v
	return s
}

func (s *UpdateCommandAttributeRequest) SetDescription(v string) *UpdateCommandAttributeRequest {
	s.Description = &v
	return s
}

func (s *UpdateCommandAttributeRequest) SetName(v string) *UpdateCommandAttributeRequest {
	s.Name = &v
	return s
}

func (s *UpdateCommandAttributeRequest) SetRegionId(v string) *UpdateCommandAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateCommandAttributeRequest) SetTimeout(v int64) *UpdateCommandAttributeRequest {
	s.Timeout = &v
	return s
}

func (s *UpdateCommandAttributeRequest) SetWorkingDir(v string) *UpdateCommandAttributeRequest {
	s.WorkingDir = &v
	return s
}

func (s *UpdateCommandAttributeRequest) Validate() error {
	return dara.Validate(s)
}

type iUpdateCommandAttributeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UpdateCommandAttributeResponseBody
	GetRequestId() *string
}

type UpdateCommandAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCommandAttributeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpdateCommandAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCommandAttributeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpdateCommandAttributeResponseBody) SetRequestId(v string) *UpdateCommandAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCommandAttributeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpdateCommandAttributeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpdateCommandAttributeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpdateCommandAttributeResponse
	GetStatusCode() *int32
	SetBody(v *UpdateCommandAttributeResponseBody) *UpdateCommandAttributeResponse
	GetBody() *UpdateCommandAttributeResponseBody
}

type UpdateCommandAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCommandAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCommandAttributeResponse) String() string {
	return dara.Prettify(s)
}

func (s UpdateCommandAttributeResponse) GoString() string {
	return s.String()
}

func (s *UpdateCommandAttributeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpdateCommandAttributeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpdateCommandAttributeResponse) GetBody() *UpdateCommandAttributeResponseBody {
	return s.Body
}

func (s *UpdateCommandAttributeResponse) SetHeaders(v map[string]*string) *UpdateCommandAttributeResponse {
	s.Headers = v
	return s
}

func (s *UpdateCommandAttributeResponse) SetStatusCode(v int32) *UpdateCommandAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCommandAttributeResponse) SetBody(v *UpdateCommandAttributeResponseBody) *UpdateCommandAttributeResponse {
	s.Body = v
	return s
}

func (s *UpdateCommandAttributeResponse) Validate() error {
	return dara.Validate(s)
}

type iUpdateDiskAttributeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *UpdateDiskAttributeRequest
	GetClientToken() *string
	SetDiskId(v string) *UpdateDiskAttributeRequest
	GetDiskId() *string
	SetRegionId(v string) *UpdateDiskAttributeRequest
	GetRegionId() *string
	SetRemark(v string) *UpdateDiskAttributeRequest
	GetRemark() *string
}

type UpdateDiskAttributeRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The disk ID. You can call the ListDisks operation to query the ID of data disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-bp18kjxg9ebrhsgi****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the data disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s UpdateDiskAttributeRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateDiskAttributeRequest) GoString() string {
	return s.String()
}

func (s *UpdateDiskAttributeRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *UpdateDiskAttributeRequest) GetDiskId() *string {
	return s.DiskId
}

func (s *UpdateDiskAttributeRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpdateDiskAttributeRequest) GetRemark() *string {
	return s.Remark
}

func (s *UpdateDiskAttributeRequest) SetClientToken(v string) *UpdateDiskAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateDiskAttributeRequest) SetDiskId(v string) *UpdateDiskAttributeRequest {
	s.DiskId = &v
	return s
}

func (s *UpdateDiskAttributeRequest) SetRegionId(v string) *UpdateDiskAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateDiskAttributeRequest) SetRemark(v string) *UpdateDiskAttributeRequest {
	s.Remark = &v
	return s
}

func (s *UpdateDiskAttributeRequest) Validate() error {
	return dara.Validate(s)
}

type iUpdateDiskAttributeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UpdateDiskAttributeResponseBody
	GetRequestId() *string
}

type UpdateDiskAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28D****534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateDiskAttributeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpdateDiskAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDiskAttributeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpdateDiskAttributeResponseBody) SetRequestId(v string) *UpdateDiskAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDiskAttributeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpdateDiskAttributeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpdateDiskAttributeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpdateDiskAttributeResponse
	GetStatusCode() *int32
	SetBody(v *UpdateDiskAttributeResponseBody) *UpdateDiskAttributeResponse
	GetBody() *UpdateDiskAttributeResponseBody
}

type UpdateDiskAttributeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDiskAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDiskAttributeResponse) String() string {
	return dara.Prettify(s)
}

func (s UpdateDiskAttributeResponse) GoString() string {
	return s.String()
}

func (s *UpdateDiskAttributeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpdateDiskAttributeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpdateDiskAttributeResponse) GetBody() *UpdateDiskAttributeResponseBody {
	return s.Body
}

func (s *UpdateDiskAttributeResponse) SetHeaders(v map[string]*string) *UpdateDiskAttributeResponse {
	s.Headers = v
	return s
}

func (s *UpdateDiskAttributeResponse) SetStatusCode(v int32) *UpdateDiskAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDiskAttributeResponse) SetBody(v *UpdateDiskAttributeResponseBody) *UpdateDiskAttributeResponse {
	s.Body = v
	return s
}

func (s *UpdateDiskAttributeResponse) Validate() error {
	return dara.Validate(s)
}

type iUpdateInstanceAttributeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *UpdateInstanceAttributeRequest
	GetClientToken() *string
	SetInstanceId(v string) *UpdateInstanceAttributeRequest
	GetInstanceId() *string
	SetInstanceName(v string) *UpdateInstanceAttributeRequest
	GetInstanceName() *string
	SetPassword(v string) *UpdateInstanceAttributeRequest
	GetPassword() *string
	SetRegionId(v string) *UpdateInstanceAttributeRequest
	GetRegionId() *string
}

type UpdateInstanceAttributeRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the simple application server. The name must be 2 to 50 characters in length. It can contain letters, digits, underscores (_), and hyphens (-). It must start with a letter or digit. Domain names are supported.
	//
	// example:
	//
	// test-InstanceName
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The new password of the simple application server. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. The following special characters are supported:
	//
	//     ()`~!@#$%^&*-_+=|{}[]:;\\"<>,.?/
	//
	// For Windows instances, the password cannot start with a forward slash (/).
	//
	// >  For security reasons, we recommend that you use HTTPS to send requests if `Password` is specified.
	//
	// example:
	//
	// Test123!
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateInstanceAttributeRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *UpdateInstanceAttributeRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *UpdateInstanceAttributeRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *UpdateInstanceAttributeRequest) GetInstanceName() *string {
	return s.InstanceName
}

func (s *UpdateInstanceAttributeRequest) GetPassword() *string {
	return s.Password
}

func (s *UpdateInstanceAttributeRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpdateInstanceAttributeRequest) SetClientToken(v string) *UpdateInstanceAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateInstanceAttributeRequest) SetInstanceId(v string) *UpdateInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateInstanceAttributeRequest) SetInstanceName(v string) *UpdateInstanceAttributeRequest {
	s.InstanceName = &v
	return s
}

func (s *UpdateInstanceAttributeRequest) SetPassword(v string) *UpdateInstanceAttributeRequest {
	s.Password = &v
	return s
}

func (s *UpdateInstanceAttributeRequest) SetRegionId(v string) *UpdateInstanceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateInstanceAttributeRequest) Validate() error {
	return dara.Validate(s)
}

type iUpdateInstanceAttributeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UpdateInstanceAttributeResponseBody
	GetRequestId() *string
}

type UpdateInstanceAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F534F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateInstanceAttributeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpdateInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateInstanceAttributeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpdateInstanceAttributeResponseBody) SetRequestId(v string) *UpdateInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateInstanceAttributeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpdateInstanceAttributeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpdateInstanceAttributeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpdateInstanceAttributeResponse
	GetStatusCode() *int32
	SetBody(v *UpdateInstanceAttributeResponseBody) *UpdateInstanceAttributeResponse
	GetBody() *UpdateInstanceAttributeResponseBody
}

type UpdateInstanceAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateInstanceAttributeResponse) String() string {
	return dara.Prettify(s)
}

func (s UpdateInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *UpdateInstanceAttributeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpdateInstanceAttributeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpdateInstanceAttributeResponse) GetBody() *UpdateInstanceAttributeResponseBody {
	return s.Body
}

func (s *UpdateInstanceAttributeResponse) SetHeaders(v map[string]*string) *UpdateInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *UpdateInstanceAttributeResponse) SetStatusCode(v int32) *UpdateInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateInstanceAttributeResponse) SetBody(v *UpdateInstanceAttributeResponseBody) *UpdateInstanceAttributeResponse {
	s.Body = v
	return s
}

func (s *UpdateInstanceAttributeResponse) Validate() error {
	return dara.Validate(s)
}

type iUpdateSnapshotAttributeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *UpdateSnapshotAttributeRequest
	GetClientToken() *string
	SetRegionId(v string) *UpdateSnapshotAttributeRequest
	GetRegionId() *string
	SetRemark(v string) *UpdateSnapshotAttributeRequest
	GetRemark() *string
	SetSnapshotId(v string) *UpdateSnapshotAttributeRequest
	GetSnapshotId() *string
}

type UpdateSnapshotAttributeRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken*	- can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The remarks of the snapshot of the simple application server.
	//
	// example:
	//
	// test
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The snapshot ID. You can call the ListSnapshots operation to query the snapshot ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// s-bp16oazlsold4dks****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s UpdateSnapshotAttributeRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateSnapshotAttributeRequest) GoString() string {
	return s.String()
}

func (s *UpdateSnapshotAttributeRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *UpdateSnapshotAttributeRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpdateSnapshotAttributeRequest) GetRemark() *string {
	return s.Remark
}

func (s *UpdateSnapshotAttributeRequest) GetSnapshotId() *string {
	return s.SnapshotId
}

func (s *UpdateSnapshotAttributeRequest) SetClientToken(v string) *UpdateSnapshotAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateSnapshotAttributeRequest) SetRegionId(v string) *UpdateSnapshotAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSnapshotAttributeRequest) SetRemark(v string) *UpdateSnapshotAttributeRequest {
	s.Remark = &v
	return s
}

func (s *UpdateSnapshotAttributeRequest) SetSnapshotId(v string) *UpdateSnapshotAttributeRequest {
	s.SnapshotId = &v
	return s
}

func (s *UpdateSnapshotAttributeRequest) Validate() error {
	return dara.Validate(s)
}

type iUpdateSnapshotAttributeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UpdateSnapshotAttributeResponseBody
	GetRequestId() *string
}

type UpdateSnapshotAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSnapshotAttributeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpdateSnapshotAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSnapshotAttributeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpdateSnapshotAttributeResponseBody) SetRequestId(v string) *UpdateSnapshotAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSnapshotAttributeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpdateSnapshotAttributeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpdateSnapshotAttributeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpdateSnapshotAttributeResponse
	GetStatusCode() *int32
	SetBody(v *UpdateSnapshotAttributeResponseBody) *UpdateSnapshotAttributeResponse
	GetBody() *UpdateSnapshotAttributeResponseBody
}

type UpdateSnapshotAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSnapshotAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSnapshotAttributeResponse) String() string {
	return dara.Prettify(s)
}

func (s UpdateSnapshotAttributeResponse) GoString() string {
	return s.String()
}

func (s *UpdateSnapshotAttributeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpdateSnapshotAttributeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpdateSnapshotAttributeResponse) GetBody() *UpdateSnapshotAttributeResponseBody {
	return s.Body
}

func (s *UpdateSnapshotAttributeResponse) SetHeaders(v map[string]*string) *UpdateSnapshotAttributeResponse {
	s.Headers = v
	return s
}

func (s *UpdateSnapshotAttributeResponse) SetStatusCode(v int32) *UpdateSnapshotAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSnapshotAttributeResponse) SetBody(v *UpdateSnapshotAttributeResponseBody) *UpdateSnapshotAttributeResponse {
	s.Body = v
	return s
}

func (s *UpdateSnapshotAttributeResponse) Validate() error {
	return dara.Validate(s)
}

type iUpgradeInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *UpgradeInstanceRequest
	GetClientToken() *string
	SetInstanceId(v string) *UpgradeInstanceRequest
	GetInstanceId() *string
	SetPlanId(v string) *UpgradeInstanceRequest
	GetPlanId() *string
	SetRegionId(v string) *UpgradeInstanceRequest
	GetRegionId() *string
}

type UpgradeInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// ace0706b2ac4454d984295a94213****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the new plan. You can call the [ListPlans](https://help.aliyun.com/document_detail/189314.html) operation to query the plans provided by Simple Application Server.
	//
	// This parameter is required.
	//
	// example:
	//
	// swas.s2.c2m2s50b4t08
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The region ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpgradeInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s UpgradeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpgradeInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *UpgradeInstanceRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *UpgradeInstanceRequest) GetPlanId() *string {
	return s.PlanId
}

func (s *UpgradeInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpgradeInstanceRequest) SetClientToken(v string) *UpgradeInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *UpgradeInstanceRequest) SetInstanceId(v string) *UpgradeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UpgradeInstanceRequest) SetPlanId(v string) *UpgradeInstanceRequest {
	s.PlanId = &v
	return s
}

func (s *UpgradeInstanceRequest) SetRegionId(v string) *UpgradeInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iUpgradeInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UpgradeInstanceResponseBody
	GetRequestId() *string
}

type UpgradeInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpgradeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpgradeInstanceResponseBody) SetRequestId(v string) *UpgradeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpgradeInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpgradeInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpgradeInstanceResponse
	GetStatusCode() *int32
	SetBody(v *UpgradeInstanceResponseBody) *UpgradeInstanceResponse
	GetBody() *UpgradeInstanceResponseBody
}

type UpgradeInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s UpgradeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpgradeInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpgradeInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpgradeInstanceResponse) GetBody() *UpgradeInstanceResponseBody {
	return s.Body
}

func (s *UpgradeInstanceResponse) SetHeaders(v map[string]*string) *UpgradeInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpgradeInstanceResponse) SetStatusCode(v int32) *UpgradeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeInstanceResponse) SetBody(v *UpgradeInstanceResponseBody) *UpgradeInstanceResponse {
	s.Body = v
	return s
}

func (s *UpgradeInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iUploadInstanceKeyPairRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *UploadInstanceKeyPairRequest
	GetClientToken() *string
	SetInstanceId(v string) *UploadInstanceKeyPairRequest
	GetInstanceId() *string
	SetKeyPairName(v string) *UploadInstanceKeyPairRequest
	GetKeyPairName() *string
	SetPublicKey(v string) *UploadInstanceKeyPairRequest
	GetPublicKey() *string
	SetRegionId(v string) *UploadInstanceKeyPairRequest
	GetRegionId() *string
}

type UploadInstanceKeyPairRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the simple application server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2ad1ae67295445f598017499dc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the key pair.
	//
	// example:
	//
	// test_gin
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The public key.
	//
	// example:
	//
	// ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAID5aQ5bM0Am3mWe+upjSXqisUT4DLR6ExwvA0****	- **@**.com
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The region ID of the simple application server. You can call the [ListRegions](https://help.aliyun.com/document_detail/189315.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UploadInstanceKeyPairRequest) String() string {
	return dara.Prettify(s)
}

func (s UploadInstanceKeyPairRequest) GoString() string {
	return s.String()
}

func (s *UploadInstanceKeyPairRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *UploadInstanceKeyPairRequest) GetInstanceId() *string {
	return s.InstanceId
}

func (s *UploadInstanceKeyPairRequest) GetKeyPairName() *string {
	return s.KeyPairName
}

func (s *UploadInstanceKeyPairRequest) GetPublicKey() *string {
	return s.PublicKey
}

func (s *UploadInstanceKeyPairRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UploadInstanceKeyPairRequest) SetClientToken(v string) *UploadInstanceKeyPairRequest {
	s.ClientToken = &v
	return s
}

func (s *UploadInstanceKeyPairRequest) SetInstanceId(v string) *UploadInstanceKeyPairRequest {
	s.InstanceId = &v
	return s
}

func (s *UploadInstanceKeyPairRequest) SetKeyPairName(v string) *UploadInstanceKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *UploadInstanceKeyPairRequest) SetPublicKey(v string) *UploadInstanceKeyPairRequest {
	s.PublicKey = &v
	return s
}

func (s *UploadInstanceKeyPairRequest) SetRegionId(v string) *UploadInstanceKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *UploadInstanceKeyPairRequest) Validate() error {
	return dara.Validate(s)
}

type iUploadInstanceKeyPairResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UploadInstanceKeyPairResponseBody
	GetRequestId() *string
}

type UploadInstanceKeyPairResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20758A-585D-4A41-A9B2-28DA8F4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadInstanceKeyPairResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UploadInstanceKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *UploadInstanceKeyPairResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UploadInstanceKeyPairResponseBody) SetRequestId(v string) *UploadInstanceKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadInstanceKeyPairResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUploadInstanceKeyPairResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UploadInstanceKeyPairResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UploadInstanceKeyPairResponse
	GetStatusCode() *int32
	SetBody(v *UploadInstanceKeyPairResponseBody) *UploadInstanceKeyPairResponse
	GetBody() *UploadInstanceKeyPairResponseBody
}

type UploadInstanceKeyPairResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadInstanceKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadInstanceKeyPairResponse) String() string {
	return dara.Prettify(s)
}

func (s UploadInstanceKeyPairResponse) GoString() string {
	return s.String()
}

func (s *UploadInstanceKeyPairResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UploadInstanceKeyPairResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UploadInstanceKeyPairResponse) GetBody() *UploadInstanceKeyPairResponseBody {
	return s.Body
}

func (s *UploadInstanceKeyPairResponse) SetHeaders(v map[string]*string) *UploadInstanceKeyPairResponse {
	s.Headers = v
	return s
}

func (s *UploadInstanceKeyPairResponse) SetStatusCode(v int32) *UploadInstanceKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadInstanceKeyPairResponse) SetBody(v *UploadInstanceKeyPairResponseBody) *UploadInstanceKeyPairResponse {
	s.Body = v
	return s
}

func (s *UploadInstanceKeyPairResponse) Validate() error {
	return dara.Validate(s)
}

type Client struct {
	openapi.Client
	DisableSDKError *bool
}

func NewClient(config *openapiutil.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapiutil.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = dara.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(dara.String("swas-open"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !dara.IsNil(endpoint) {
		_result = endpoint
		return _result, _err
	}

	if !dara.IsNil(endpointMap) && !dara.IsNil(endpointMap[dara.StringValue(regionId)]) {
		_result = endpointMap[dara.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := openapiutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Shares a custom image with other Alibaba Cloud accounts in the same region to quickly deploy the same environment configurations for multiple simple application servers at a time. This improves deployment efficiency.
//
// Description:
//
//	  Before you share a custom image, make sure that all sensitive data and files are removed from the image.
//
//		- The IDs of the Alibaba Cloud accounts with which you want to share the image is obtained. Move the pointer over the profile in the upper-right corner of the Simple Application Server console. In the card that appears, if Main Account is displayed, the showed account ID is the Alibaba Cloud account ID.
//
// @param request - AddCustomImageShareAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCustomImageShareAccountResponse
func (client *Client) AddCustomImageShareAccountWithOptions(request *AddCustomImageShareAccountRequest, runtime *dara.RuntimeOptions) (_result *AddCustomImageShareAccountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Account) {
		query["Account"] = request.Account
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCustomImageShareAccount"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Shares a custom image with other Alibaba Cloud accounts in the same region to quickly deploy the same environment configurations for multiple simple application servers at a time. This improves deployment efficiency.
//
// Description:
//
//	  Before you share a custom image, make sure that all sensitive data and files are removed from the image.
//
//		- The IDs of the Alibaba Cloud accounts with which you want to share the image is obtained. Move the pointer over the profile in the upper-right corner of the Simple Application Server console. In the card that appears, if Main Account is displayed, the showed account ID is the Alibaba Cloud account ID.
//
// @param request - AddCustomImageShareAccountRequest
//
// @return AddCustomImageShareAccountResponse
func (client *Client) AddCustomImageShareAccount(request *AddCustomImageShareAccountRequest) (_result *AddCustomImageShareAccountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.AddCustomImageShareAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Applies for a public endpoint for a Simple Database Service instance.
//
// Description:
//
// By default, no public endpoints are assigned to Simple Database Service instances. If you want to access the databases of a Simple Database Service instance over the Internet by using Simple Container Service or Data Management (DMS), you must apply for a public endpoint for the Simple Database Service instance.
//
// @param request - AllocatePublicConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AllocatePublicConnectionResponse
func (client *Client) AllocatePublicConnectionWithOptions(request *AllocatePublicConnectionRequest, runtime *dara.RuntimeOptions) (_result *AllocatePublicConnectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AllocatePublicConnection"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Applies for a public endpoint for a Simple Database Service instance.
//
// Description:
//
// By default, no public endpoints are assigned to Simple Database Service instances. If you want to access the databases of a Simple Database Service instance over the Internet by using Simple Container Service or Data Management (DMS), you must apply for a public endpoint for the Simple Database Service instance.
//
// @param request - AllocatePublicConnectionRequest
//
// @return AllocatePublicConnectionResponse
func (client *Client) AllocatePublicConnection(request *AllocatePublicConnectionRequest) (_result *AllocatePublicConnectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.AllocatePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uses a firewall template to apply firewall rules to multiple simple application servers at a time. This improves your efficiency of setting firewall rules.
//
// Description:
//
// If the port range, protocol, and source IP address of a firewall rule in a firewall template are the same as the port range, protocol, and source IP address of an existing rule, the new rule overwrites the existing rule regardless of whether the existing rule is enabled or disabled.
//
// @param request - ApplyFirewallTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyFirewallTemplateResponse
func (client *Client) ApplyFirewallTemplateWithOptions(request *ApplyFirewallTemplateRequest, runtime *dara.RuntimeOptions) (_result *ApplyFirewallTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ApplyFirewallTemplate"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Uses a firewall template to apply firewall rules to multiple simple application servers at a time. This improves your efficiency of setting firewall rules.
//
// Description:
//
// If the port range, protocol, and source IP address of a firewall rule in a firewall template are the same as the port range, protocol, and source IP address of an existing rule, the new rule overwrites the existing rule regardless of whether the existing rule is enabled or disabled.
//
// @param request - ApplyFirewallTemplateRequest
//
// @return ApplyFirewallTemplateResponse
func (client *Client) ApplyFirewallTemplate(request *ApplyFirewallTemplateRequest) (_result *ApplyFirewallTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ApplyFirewallTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a key pair to simple application servers.
//
// Description:
//
// You can bind only one key pair to a simple application server in the Simple Application Server console. If a simple application server has a key pair bound, the new key pair overwrites the original key pair.
//
// @param request - AttachKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachKeyPairResponse
func (client *Client) AttachKeyPairWithOptions(request *AttachKeyPairRequest, runtime *dara.RuntimeOptions) (_result *AttachKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.KeyPairName) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AttachKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Binds a key pair to simple application servers.
//
// Description:
//
// You can bind only one key pair to a simple application server in the Simple Application Server console. If a simple application server has a key pair bound, the new key pair overwrites the original key pair.
//
// @param request - AttachKeyPairRequest
//
// @return AttachKeyPairResponse
func (client *Client) AttachKeyPair(request *AttachKeyPairRequest) (_result *AttachKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.AttachKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Cloud Assistant command.
//
// @param request - CreateCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCommandResponse
func (client *Client) CreateCommandWithOptions(request *CreateCommandRequest, runtime *dara.RuntimeOptions) (_result *CreateCommandResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CommandContent) {
		query["CommandContent"] = request.CommandContent
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.EnableParameter) {
		query["EnableParameter"] = request.EnableParameter
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.Timeout) {
		query["Timeout"] = request.Timeout
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.WorkingDir) {
		query["WorkingDir"] = request.WorkingDir
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCommand"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a Cloud Assistant command.
//
// @param request - CreateCommandRequest
//
// @return CreateCommandResponse
func (client *Client) CreateCommand(request *CreateCommandRequest) (_result *CreateCommandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom image based on a snapshot of a simple application server.
//
// Description:
//
// A custom image is created from a snapshot of a simple application server. You can use a custom image to create multiple simple application servers that have the same configurations. You can also share custom images to ECS and use the shared images to create ECS instances or replace the OSs of existing ECS instances. For more information about custom images, see [Overview of custom images](https://help.aliyun.com/document_detail/199375.html).
//
// You must create a system disk snapshot of a simple application server before you create a custom image based on the snapshot. For more information, see [CreateSnapshot](https://help.aliyun.com/document_detail/190452.html).
//
// >  If you need the data on the data disk of a simple application server when you create a custom image, create a snapshot for the data disk first.
//
// Before you create a custom image, take note of the following items:
//
//   - The custom image and the corresponding simple application server must reside in the same region.
//
//   - The maximum number of custom images that you can create is 3 times the number of simple application servers that you have, but cannot exceed 15.
//
//   - You can directly create a custom image only based on the system disk snapshot of a simple application server. If you want a custom image to contain the data on the data disk of the simple application server, you must select a data disk snapshot in addition to a system disk snapshot when you create the custom image.
//
//   - If a simple application server is released due to expiration or refunds, the custom images that are created based on the server are also released.
//
//   - Resetting the system or changing the image of a simple application server clears the disk data on the server. Back up the data as needed.
//
// @param request - CreateCustomImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomImageResponse
func (client *Client) CreateCustomImageWithOptions(request *CreateCustomImageRequest, runtime *dara.RuntimeOptions) (_result *CreateCustomImageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DataSnapshotId) {
		query["DataSnapshotId"] = request.DataSnapshotId
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SystemSnapshotId) {
		query["SystemSnapshotId"] = request.SystemSnapshotId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCustomImage"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a custom image based on a snapshot of a simple application server.
//
// Description:
//
// A custom image is created from a snapshot of a simple application server. You can use a custom image to create multiple simple application servers that have the same configurations. You can also share custom images to ECS and use the shared images to create ECS instances or replace the OSs of existing ECS instances. For more information about custom images, see [Overview of custom images](https://help.aliyun.com/document_detail/199375.html).
//
// You must create a system disk snapshot of a simple application server before you create a custom image based on the snapshot. For more information, see [CreateSnapshot](https://help.aliyun.com/document_detail/190452.html).
//
// >  If you need the data on the data disk of a simple application server when you create a custom image, create a snapshot for the data disk first.
//
// Before you create a custom image, take note of the following items:
//
//   - The custom image and the corresponding simple application server must reside in the same region.
//
//   - The maximum number of custom images that you can create is 3 times the number of simple application servers that you have, but cannot exceed 15.
//
//   - You can directly create a custom image only based on the system disk snapshot of a simple application server. If you want a custom image to contain the data on the data disk of the simple application server, you must select a data disk snapshot in addition to a system disk snapshot when you create the custom image.
//
//   - If a simple application server is released due to expiration or refunds, the custom images that are created based on the server are also released.
//
//   - Resetting the system or changing the image of a simple application server clears the disk data on the server. Back up the data as needed.
//
// @param request - CreateCustomImageRequest
//
// @return CreateCustomImageResponse
func (client *Client) CreateCustomImage(request *CreateCustomImageRequest) (_result *CreateCustomImageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateCustomImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a firewall rule for a simple application server.
//
// Description:
//
// Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, SSH port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
//
// @param request - CreateFirewallRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFirewallRuleResponse
func (client *Client) CreateFirewallRuleWithOptions(request *CreateFirewallRuleRequest, runtime *dara.RuntimeOptions) (_result *CreateFirewallRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RuleProtocol) {
		query["RuleProtocol"] = request.RuleProtocol
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFirewallRule"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a firewall rule for a simple application server.
//
// Description:
//
// Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, SSH port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
//
// @param request - CreateFirewallRuleRequest
//
// @return CreateFirewallRuleResponse
func (client *Client) CreateFirewallRule(request *CreateFirewallRuleRequest) (_result *CreateFirewallRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateFirewallRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates multiple firewall rules for a simple application server at a time.
//
// Description:
//
// Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, SSH port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
//
// @param tmpReq - CreateFirewallRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFirewallRulesResponse
func (client *Client) CreateFirewallRulesWithOptions(tmpReq *CreateFirewallRulesRequest, runtime *dara.RuntimeOptions) (_result *CreateFirewallRulesResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateFirewallRulesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.FirewallRules) {
		request.FirewallRulesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FirewallRules, dara.String("FirewallRules"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.FirewallRulesShrink) {
		query["FirewallRules"] = request.FirewallRulesShrink
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFirewallRules"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates multiple firewall rules for a simple application server at a time.
//
// Description:
//
// Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, SSH port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
//
// @param request - CreateFirewallRulesRequest
//
// @return CreateFirewallRulesResponse
func (client *Client) CreateFirewallRules(request *CreateFirewallRulesRequest) (_result *CreateFirewallRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateFirewallRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a firewall template.
//
// Description:
//
// Simple Application Server supports the firewall template feature that provides multiple firewall rules. You can use a template to add a group of firewall rules to one or more simple application servers at a time. This improves the efficiency of setting firewall rules.
//
// @param request - CreateFirewallTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFirewallTemplateResponse
func (client *Client) CreateFirewallTemplateWithOptions(request *CreateFirewallTemplateRequest, runtime *dara.RuntimeOptions) (_result *CreateFirewallTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.FirewallRule) {
		query["FirewallRule"] = request.FirewallRule
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFirewallTemplate"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a firewall template.
//
// Description:
//
// Simple Application Server supports the firewall template feature that provides multiple firewall rules. You can use a template to add a group of firewall rules to one or more simple application servers at a time. This improves the efficiency of setting firewall rules.
//
// @param request - CreateFirewallTemplateRequest
//
// @return CreateFirewallTemplateResponse
func (client *Client) CreateFirewallTemplate(request *CreateFirewallTemplateRequest) (_result *CreateFirewallTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateFirewallTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds firewall rules to a firewall template based on your business requirements.
//
// Description:
//
// Adding firewall rules to a firewall template does not affect the firewall rules that have been applied to simple application servers..
//
// @param request - CreateFirewallTemplateRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFirewallTemplateRulesResponse
func (client *Client) CreateFirewallTemplateRulesWithOptions(request *CreateFirewallTemplateRulesRequest, runtime *dara.RuntimeOptions) (_result *CreateFirewallTemplateRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FirewallRule) {
		query["FirewallRule"] = request.FirewallRule
	}

	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFirewallTemplateRules"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds firewall rules to a firewall template based on your business requirements.
//
// Description:
//
// Adding firewall rules to a firewall template does not affect the firewall rules that have been applied to simple application servers..
//
// @param request - CreateFirewallTemplateRulesRequest
//
// @return CreateFirewallTemplateRulesResponse
func (client *Client) CreateFirewallTemplateRules(request *CreateFirewallTemplateRulesRequest) (_result *CreateFirewallTemplateRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateFirewallTemplateRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a key pair for a simple application server.
//
// @param request - CreateInstanceKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInstanceKeyPairResponse
func (client *Client) CreateInstanceKeyPairWithOptions(request *CreateInstanceKeyPairRequest, runtime *dara.RuntimeOptions) (_result *CreateInstanceKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.KeyPairName) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateInstanceKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a key pair for a simple application server.
//
// @param request - CreateInstanceKeyPairRequest
//
// @return CreateInstanceKeyPairResponse
func (client *Client) CreateInstanceKeyPair(request *CreateInstanceKeyPairRequest) (_result *CreateInstanceKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateInstanceKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates subscription simple application servers.
//
// Description:
//
//	Before you call this operation, we recommend that you understand the billing rules of Simple Application Server. For more information, see [Billable items](https://help.aliyun.com/document_detail/58623.html).
//
// >  If you have coupons in your Alibaba Cloud account, the coupons are preferentially used to pay for the simple application servers.
//
//   - You can create a maximum of 50 simple application servers in a region for an Alibaba Cloud account.
//
//   - When you call this operation to create simple application servers, make sure that the balance in your account is sufficient to pay for the servers. If the balance in your account is insufficient, the servers cannot be created.
//
// @param request - CreateInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInstancesResponse
func (client *Client) CreateInstancesWithOptions(request *CreateInstancesRequest, runtime *dara.RuntimeOptions) (_result *CreateInstancesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Amount) {
		query["Amount"] = request.Amount
	}

	if !dara.IsNil(request.AutoRenew) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !dara.IsNil(request.AutoRenewPeriod) {
		query["AutoRenewPeriod"] = request.AutoRenewPeriod
	}

	if !dara.IsNil(request.ChargeType) {
		query["ChargeType"] = request.ChargeType
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DataDiskSize) {
		query["DataDiskSize"] = request.DataDiskSize
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.Period) {
		query["Period"] = request.Period
	}

	if !dara.IsNil(request.PlanId) {
		query["PlanId"] = request.PlanId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateInstances"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates subscription simple application servers.
//
// Description:
//
//	Before you call this operation, we recommend that you understand the billing rules of Simple Application Server. For more information, see [Billable items](https://help.aliyun.com/document_detail/58623.html).
//
// >  If you have coupons in your Alibaba Cloud account, the coupons are preferentially used to pay for the simple application servers.
//
//   - You can create a maximum of 50 simple application servers in a region for an Alibaba Cloud account.
//
//   - When you call this operation to create simple application servers, make sure that the balance in your account is sufficient to pay for the servers. If the balance in your account is insufficient, the servers cannot be created.
//
// @param request - CreateInstancesRequest
//
// @return CreateInstancesResponse
func (client *Client) CreateInstances(request *CreateInstancesRequest) (_result *CreateInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a key pair.
//
// Description:
//
// Alibaba Cloud SSH key pairs offer a secure and efficient logon authentication mechanism, facilitating both verification and encrypted communication within the SSH protocol framework. An SSH key pair is essentially constituted by a public key and a private key. Tailored for Linux-based simple application servers, this security measure enhances security and convenience, effectively addressing your heightened security requirements.
//
//   - The key pair logon method is only valid for Linux-based simple application servers.
//
//   - A maximum of 10 key pairs can be created in a region for an Alibaba Cloud account.
//
//   - Only RSA 2048-bit key pairs can be created in the Simple Application Server console.
//
// @param request - CreateKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateKeyPairResponse
func (client *Client) CreateKeyPairWithOptions(request *CreateKeyPairRequest, runtime *dara.RuntimeOptions) (_result *CreateKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.KeyPairName) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a key pair.
//
// Description:
//
// Alibaba Cloud SSH key pairs offer a secure and efficient logon authentication mechanism, facilitating both verification and encrypted communication within the SSH protocol framework. An SSH key pair is essentially constituted by a public key and a private key. Tailored for Linux-based simple application servers, this security measure enhances security and convenience, effectively addressing your heightened security requirements.
//
//   - The key pair logon method is only valid for Linux-based simple application servers.
//
//   - A maximum of 10 key pairs can be created in a region for an Alibaba Cloud account.
//
//   - Only RSA 2048-bit key pairs can be created in the Simple Application Server console.
//
// @param request - CreateKeyPairRequest
//
// @return CreateKeyPairResponse
func (client *Client) CreateKeyPair(request *CreateKeyPairRequest) (_result *CreateKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a snapshot for a disk.
//
// Description:
//
// A snapshot is a point-in-time backup of a disk. Snapshots can be used to back up data, recover data after misoperations on servers, recover data after network attacks, and create custom images.
//
// >  You are not charged for creating snapshots in Simple Application Server.
//
// ### [](#)Precautions
//
//   - You can create up to three snapshots for each simple application server.
//
//   - The maximum number of snapshots that you create per Alibaba Cloud account is triple of the number of simple application servers that are created. The value cannot be greater than 15.
//
//   - If a simple application server is automatically released due to expiration, the snapshots created for the server are deleted.
//
//   - If you reset a simple application server after you create a snapshot for the server, the snapshot is retained but cannot be used to restore the disks of the server.
//
// @param request - CreateSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSnapshotResponse
func (client *Client) CreateSnapshotWithOptions(request *CreateSnapshotRequest, runtime *dara.RuntimeOptions) (_result *CreateSnapshotResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DiskId) {
		query["DiskId"] = request.DiskId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SnapshotName) {
		query["SnapshotName"] = request.SnapshotName
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateSnapshot"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a snapshot for a disk.
//
// Description:
//
// A snapshot is a point-in-time backup of a disk. Snapshots can be used to back up data, recover data after misoperations on servers, recover data after network attacks, and create custom images.
//
// >  You are not charged for creating snapshots in Simple Application Server.
//
// ### [](#)Precautions
//
//   - You can create up to three snapshots for each simple application server.
//
//   - The maximum number of snapshots that you create per Alibaba Cloud account is triple of the number of simple application servers that are created. The value cannot be greater than 15.
//
//   - If a simple application server is automatically released due to expiration, the snapshots created for the server are deleted.
//
//   - If you reset a simple application server after you create a snapshot for the server, the snapshot is retained but cannot be used to restore the disks of the server.
//
// @param request - CreateSnapshotRequest
//
// @return CreateSnapshotResponse
func (client *Client) CreateSnapshot(request *CreateSnapshotRequest) (_result *CreateSnapshotResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a Command Assistant command.
//
// Description:
//
// You cannot delete commands that are being run.
//
// @param request - DeleteCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCommandResponse
func (client *Client) DeleteCommandWithOptions(request *DeleteCommandRequest, runtime *dara.RuntimeOptions) (_result *DeleteCommandResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CommandId) {
		query["CommandId"] = request.CommandId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCommand"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a Command Assistant command.
//
// Description:
//
// You cannot delete commands that are being run.
//
// @param request - DeleteCommandRequest
//
// @return DeleteCommandResponse
func (client *Client) DeleteCommand(request *DeleteCommandRequest) (_result *DeleteCommandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom image.
//
// Description:
//
// You can delete a custom image that you no longer need. After the custom image is deleted, you cannot use the custom image to reset the simple application servers that were created based on the custom image.
//
// >  To delete a shared image, you must unshare the image before you can delete it. After a custom image is unshared, you cannot query the custom image by using the Elastic Compute Service (ECS) console or API. If you want to use a custom image to create ECS instances, we recommend that you copy the custom image before you delete it. For more information, see [Copy a shared image of a simple application server in the ECS console](https://help.aliyun.com/document_detail/199378.html).
//
// @param request - DeleteCustomImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomImageResponse
func (client *Client) DeleteCustomImageWithOptions(request *DeleteCustomImageRequest, runtime *dara.RuntimeOptions) (_result *DeleteCustomImageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCustomImage"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a custom image.
//
// Description:
//
// You can delete a custom image that you no longer need. After the custom image is deleted, you cannot use the custom image to reset the simple application servers that were created based on the custom image.
//
// >  To delete a shared image, you must unshare the image before you can delete it. After a custom image is unshared, you cannot query the custom image by using the Elastic Compute Service (ECS) console or API. If you want to use a custom image to create ECS instances, we recommend that you copy the custom image before you delete it. For more information, see [Copy a shared image of a simple application server in the ECS console](https://help.aliyun.com/document_detail/199378.html).
//
// @param request - DeleteCustomImageRequest
//
// @return DeleteCustomImageResponse
func (client *Client) DeleteCustomImage(request *DeleteCustomImageRequest) (_result *DeleteCustomImageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteCustomImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes custom images. If you no longer require a custom image, you can call this operation to delete the custom image. You can also call this operation to delete multiple custom images at the same time. After a custom image is deleted, you cannot use the custom image to reset the simple application servers that were created based on the custom image.
//
// Description:
//
// If a custom image is shared, you must unshare the image before you can delete it. After a custom image is unshared, you cannot query the custom image by using the Elastic Compute Service (ECS) console or by calling an ECS API operation. If you want to use a custom image to create ECS instances, we recommend that you copy the custom image before you delete it. For more information, see [Copy a custom image](https://help.aliyun.com/document_detail/199378.html).
//
// @param request - DeleteCustomImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomImagesResponse
func (client *Client) DeleteCustomImagesWithOptions(request *DeleteCustomImagesRequest, runtime *dara.RuntimeOptions) (_result *DeleteCustomImagesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ImageIds) {
		query["ImageIds"] = request.ImageIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCustomImages"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes custom images. If you no longer require a custom image, you can call this operation to delete the custom image. You can also call this operation to delete multiple custom images at the same time. After a custom image is deleted, you cannot use the custom image to reset the simple application servers that were created based on the custom image.
//
// Description:
//
// If a custom image is shared, you must unshare the image before you can delete it. After a custom image is unshared, you cannot query the custom image by using the Elastic Compute Service (ECS) console or by calling an ECS API operation. If you want to use a custom image to create ECS instances, we recommend that you copy the custom image before you delete it. For more information, see [Copy a custom image](https://help.aliyun.com/document_detail/199378.html).
//
// @param request - DeleteCustomImagesRequest
//
// @return DeleteCustomImagesResponse
func (client *Client) DeleteCustomImages(request *DeleteCustomImagesRequest) (_result *DeleteCustomImagesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteCustomImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a firewall rule of a simple application server.
//
// Description:
//
// After a firewall rule is deleted, your business deployed on the simple application server may become inaccessible. Before you delete a firewall rule, make sure that the firewall rule is no longer needed by the simple application server.
//
// @param request - DeleteFirewallRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFirewallRuleResponse
func (client *Client) DeleteFirewallRuleWithOptions(request *DeleteFirewallRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteFirewallRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteFirewallRule"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a firewall rule of a simple application server.
//
// Description:
//
// After a firewall rule is deleted, your business deployed on the simple application server may become inaccessible. Before you delete a firewall rule, make sure that the firewall rule is no longer needed by the simple application server.
//
// @param request - DeleteFirewallRuleRequest
//
// @return DeleteFirewallRuleResponse
func (client *Client) DeleteFirewallRule(request *DeleteFirewallRuleRequest) (_result *DeleteFirewallRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteFirewallRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes multiple firewall rules of a simple application server.
//
// Description:
//
// After a firewall rule is deleted, your business deployed on the simple application server may become inaccessible. Before you delete a firewall rule, make sure that the firewall rule is no longer needed by the simple application server.
//
// @param tmpReq - DeleteFirewallRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFirewallRulesResponse
func (client *Client) DeleteFirewallRulesWithOptions(tmpReq *DeleteFirewallRulesRequest, runtime *dara.RuntimeOptions) (_result *DeleteFirewallRulesResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DeleteFirewallRulesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.RuleIds) {
		request.RuleIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RuleIds, dara.String("RuleIds"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RuleIdsShrink) {
		query["RuleIds"] = request.RuleIdsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteFirewallRules"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes multiple firewall rules of a simple application server.
//
// Description:
//
// After a firewall rule is deleted, your business deployed on the simple application server may become inaccessible. Before you delete a firewall rule, make sure that the firewall rule is no longer needed by the simple application server.
//
// @param request - DeleteFirewallRulesRequest
//
// @return DeleteFirewallRulesResponse
func (client *Client) DeleteFirewallRules(request *DeleteFirewallRulesRequest) (_result *DeleteFirewallRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteFirewallRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes firewall rules from a firewall template based on your requirements.
//
// Description:
//
// Deletion of firewall rules does not affect the firewall rules that have been applied to simple application servers.
//
// @param request - DeleteFirewallTemplateRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFirewallTemplateRulesResponse
func (client *Client) DeleteFirewallTemplateRulesWithOptions(request *DeleteFirewallTemplateRulesRequest, runtime *dara.RuntimeOptions) (_result *DeleteFirewallTemplateRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.FirewallTemplateRuleId) {
		query["FirewallTemplateRuleId"] = request.FirewallTemplateRuleId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteFirewallTemplateRules"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes firewall rules from a firewall template based on your requirements.
//
// Description:
//
// Deletion of firewall rules does not affect the firewall rules that have been applied to simple application servers.
//
// @param request - DeleteFirewallTemplateRulesRequest
//
// @return DeleteFirewallTemplateRulesResponse
func (client *Client) DeleteFirewallTemplateRules(request *DeleteFirewallTemplateRulesRequest) (_result *DeleteFirewallTemplateRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteFirewallTemplateRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes firewall templates from a simple application server.
//
// Description:
//
// Deleting a firewall template does not affect the firewall rules that have been applied to simple application servers. You can delete firewall templates that you no longer need.
//
// @param request - DeleteFirewallTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFirewallTemplatesResponse
func (client *Client) DeleteFirewallTemplatesWithOptions(request *DeleteFirewallTemplatesRequest, runtime *dara.RuntimeOptions) (_result *DeleteFirewallTemplatesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteFirewallTemplates"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes firewall templates from a simple application server.
//
// Description:
//
// Deleting a firewall template does not affect the firewall rules that have been applied to simple application servers. You can delete firewall templates that you no longer need.
//
// @param request - DeleteFirewallTemplatesRequest
//
// @return DeleteFirewallTemplatesResponse
func (client *Client) DeleteFirewallTemplates(request *DeleteFirewallTemplatesRequest) (_result *DeleteFirewallTemplatesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteFirewallTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the key pair of a simple application server.
//
// @param request - DeleteInstanceKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteInstanceKeyPairResponse
func (client *Client) DeleteInstanceKeyPairWithOptions(request *DeleteInstanceKeyPairRequest, runtime *dara.RuntimeOptions) (_result *DeleteInstanceKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteInstanceKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the key pair of a simple application server.
//
// @param request - DeleteInstanceKeyPairRequest
//
// @return DeleteInstanceKeyPairResponse
func (client *Client) DeleteInstanceKeyPair(request *DeleteInstanceKeyPairRequest) (_result *DeleteInstanceKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteInstanceKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the SSH key pairs of simple application servers.
//
// Description:
//
// You must unbind SSH key pairs that you no longer use from simple application servers before you delete the SSH key pairs.
//
// @param request - DeleteKeyPairsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteKeyPairsResponse
func (client *Client) DeleteKeyPairsWithOptions(request *DeleteKeyPairsRequest, runtime *dara.RuntimeOptions) (_result *DeleteKeyPairsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.KeyPairNames) {
		query["KeyPairNames"] = request.KeyPairNames
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteKeyPairs"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the SSH key pairs of simple application servers.
//
// Description:
//
// You must unbind SSH key pairs that you no longer use from simple application servers before you delete the SSH key pairs.
//
// @param request - DeleteKeyPairsRequest
//
// @return DeleteKeyPairsResponse
func (client *Client) DeleteKeyPairs(request *DeleteKeyPairsRequest) (_result *DeleteKeyPairsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a snapshot of a simple application server.
//
// Description:
//
// You can delete a snapshot if you no longer need it.
//
// >  If a custom image was created from the snapshot, delete the custom image before you delete the snapshot.
//
// @param request - DeleteSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnapshotResponse
func (client *Client) DeleteSnapshotWithOptions(request *DeleteSnapshotRequest, runtime *dara.RuntimeOptions) (_result *DeleteSnapshotResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SnapshotId) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSnapshot"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a snapshot of a simple application server.
//
// Description:
//
// You can delete a snapshot if you no longer need it.
//
// >  If a custom image was created from the snapshot, delete the custom image before you delete the snapshot.
//
// @param request - DeleteSnapshotRequest
//
// @return DeleteSnapshotResponse
func (client *Client) DeleteSnapshot(request *DeleteSnapshotRequest) (_result *DeleteSnapshotResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes snapshots of a simple application server.
//
// @param request - DeleteSnapshotsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnapshotsResponse
func (client *Client) DeleteSnapshotsWithOptions(request *DeleteSnapshotsRequest, runtime *dara.RuntimeOptions) (_result *DeleteSnapshotsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SnapshotIds) {
		query["SnapshotIds"] = request.SnapshotIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSnapshots"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes snapshots of a simple application server.
//
// @param request - DeleteSnapshotsRequest
//
// @return DeleteSnapshotsResponse
func (client *Client) DeleteSnapshots(request *DeleteSnapshotsRequest) (_result *DeleteSnapshotsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteSnapshotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Command Assistant information of simple application servers.
//
// @param tmpReq - DescribeCloudAssistantAttributesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudAssistantAttributesResponse
func (client *Client) DescribeCloudAssistantAttributesWithOptions(tmpReq *DescribeCloudAssistantAttributesRequest, runtime *dara.RuntimeOptions) (_result *DescribeCloudAssistantAttributesResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeCloudAssistantAttributesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.InstanceIds) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, dara.String("InstanceIds"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceIdsShrink) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCloudAssistantAttributes"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the Command Assistant information of simple application servers.
//
// @param request - DescribeCloudAssistantAttributesRequest
//
// @return DescribeCloudAssistantAttributesResponse
func (client *Client) DescribeCloudAssistantAttributes(request *DescribeCloudAssistantAttributesRequest) (_result *DescribeCloudAssistantAttributesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeCloudAssistantAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether the Cloud Assistant client is installed on simple application servers.
//
// Description:
//
// By default, the Cloud Assistant client is installed on simple application servers. If you have manually uninstalled the client, you must reinstall the client. Otherwise, you cannot run commands on the servers.
//
// @param tmpReq - DescribeCloudAssistantStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudAssistantStatusResponse
func (client *Client) DescribeCloudAssistantStatusWithOptions(tmpReq *DescribeCloudAssistantStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeCloudAssistantStatusResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeCloudAssistantStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.InstanceIds) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, dara.String("InstanceIds"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceIdsShrink) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCloudAssistantStatus"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries whether the Cloud Assistant client is installed on simple application servers.
//
// Description:
//
// By default, the Cloud Assistant client is installed on simple application servers. If you have manually uninstalled the client, you must reinstall the client. Otherwise, you cannot run commands on the servers.
//
// @param request - DescribeCloudAssistantStatusRequest
//
// @return DescribeCloudAssistantStatusResponse
func (client *Client) DescribeCloudAssistantStatus(request *DescribeCloudAssistantStatusRequest) (_result *DescribeCloudAssistantStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeCloudAssistantStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of the CloudMonitor agent on simple application servers.
//
// @param request - DescribeCloudMonitorAgentStatusesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudMonitorAgentStatusesResponse
func (client *Client) DescribeCloudMonitorAgentStatusesWithOptions(request *DescribeCloudMonitorAgentStatusesRequest, runtime *dara.RuntimeOptions) (_result *DescribeCloudMonitorAgentStatusesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCloudMonitorAgentStatuses"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the status of the CloudMonitor agent on simple application servers.
//
// @param request - DescribeCloudMonitorAgentStatusesRequest
//
// @return DescribeCloudMonitorAgentStatusesResponse
func (client *Client) DescribeCloudMonitorAgentStatuses(request *DescribeCloudMonitorAgentStatusesRequest) (_result *DescribeCloudMonitorAgentStatusesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeCloudMonitorAgentStatusesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the executions and execution status of a Cloud Assistant command.
//
// @param request - DescribeCommandInvocationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCommandInvocationsResponse
func (client *Client) DescribeCommandInvocationsWithOptions(request *DescribeCommandInvocationsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCommandInvocationsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CommandId) {
		query["CommandId"] = request.CommandId
	}

	if !dara.IsNil(request.CommandName) {
		query["CommandName"] = request.CommandName
	}

	if !dara.IsNil(request.CommandType) {
		query["CommandType"] = request.CommandType
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InvocationStatus) {
		query["InvocationStatus"] = request.InvocationStatus
	}

	if !dara.IsNil(request.InvokeId) {
		query["InvokeId"] = request.InvokeId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCommandInvocations"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the executions and execution status of a Cloud Assistant command.
//
// @param request - DescribeCommandInvocationsRequest
//
// @return DescribeCommandInvocationsResponse
func (client *Client) DescribeCommandInvocations(request *DescribeCommandInvocationsRequest) (_result *DescribeCommandInvocationsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeCommandInvocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the commands that you created or the common commands that Alibaba Cloud provides.
//
// @param request - DescribeCommandsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCommandsResponse
func (client *Client) DescribeCommandsWithOptions(request *DescribeCommandsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCommandsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CommandId) {
		query["CommandId"] = request.CommandId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Provider) {
		query["Provider"] = request.Provider
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCommands"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the commands that you created or the common commands that Alibaba Cloud provides.
//
// @param request - DescribeCommandsRequest
//
// @return DescribeCommandsResponse
func (client *Client) DescribeCommands(request *DescribeCommandsRequest) (_result *DescribeCommandsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeCommandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries error logs of databases in a Simple Database Service instance.
//
// Description:
//
// You can call this operation to query the error logs of databases in a Simple Database Service instance and locate faults based on the error logs.
//
// @param request - DescribeDatabaseErrorLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatabaseErrorLogsResponse
func (client *Client) DescribeDatabaseErrorLogsWithOptions(request *DescribeDatabaseErrorLogsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDatabaseErrorLogsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDatabaseErrorLogs"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries error logs of databases in a Simple Database Service instance.
//
// Description:
//
// You can call this operation to query the error logs of databases in a Simple Database Service instance and locate faults based on the error logs.
//
// @param request - DescribeDatabaseErrorLogsRequest
//
// @return DescribeDatabaseErrorLogsResponse
func (client *Client) DescribeDatabaseErrorLogs(request *DescribeDatabaseErrorLogsRequest) (_result *DescribeDatabaseErrorLogsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDatabaseErrorLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring information about a Simple Database Service instance.
//
// Description:
//
// After you create a Simple Database Service instance, you can query the details about the instance, including CPU, memory, and disk usage, storage IOPS, and total number of connections.
//
// @param request - DescribeDatabaseInstanceMetricDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatabaseInstanceMetricDataResponse
func (client *Client) DescribeDatabaseInstanceMetricDataWithOptions(request *DescribeDatabaseInstanceMetricDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeDatabaseInstanceMetricDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.MetricName) {
		query["MetricName"] = request.MetricName
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDatabaseInstanceMetricData"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the monitoring information about a Simple Database Service instance.
//
// Description:
//
// After you create a Simple Database Service instance, you can query the details about the instance, including CPU, memory, and disk usage, storage IOPS, and total number of connections.
//
// @param request - DescribeDatabaseInstanceMetricDataRequest
//
// @return DescribeDatabaseInstanceMetricDataResponse
func (client *Client) DescribeDatabaseInstanceMetricData(request *DescribeDatabaseInstanceMetricDataRequest) (_result *DescribeDatabaseInstanceMetricDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDatabaseInstanceMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the parameters of a Simple Database Service instance.
//
// Description:
//
// You can call this operation to query the information about parameters of a Simple Database Service instance.
//
// @param request - DescribeDatabaseInstanceParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatabaseInstanceParametersResponse
func (client *Client) DescribeDatabaseInstanceParametersWithOptions(request *DescribeDatabaseInstanceParametersRequest, runtime *dara.RuntimeOptions) (_result *DescribeDatabaseInstanceParametersResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDatabaseInstanceParameters"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the parameters of a Simple Database Service instance.
//
// Description:
//
// You can call this operation to query the information about parameters of a Simple Database Service instance.
//
// @param request - DescribeDatabaseInstanceParametersRequest
//
// @return DescribeDatabaseInstanceParametersResponse
func (client *Client) DescribeDatabaseInstanceParameters(request *DescribeDatabaseInstanceParametersRequest) (_result *DescribeDatabaseInstanceParametersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDatabaseInstanceParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about Simple Database Service instances.
//
// Description:
//
// You can call this operation to query the details of Simple Database Service instances in a region, including the IDs, names, plans, database versions, public endpoints, internal endpoints, creation time, and expiration time of the instances.
//
// @param request - DescribeDatabaseInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatabaseInstancesResponse
func (client *Client) DescribeDatabaseInstancesWithOptions(request *DescribeDatabaseInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeDatabaseInstancesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DatabaseInstanceIds) {
		query["DatabaseInstanceIds"] = request.DatabaseInstanceIds
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDatabaseInstances"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about Simple Database Service instances.
//
// Description:
//
// You can call this operation to query the details of Simple Database Service instances in a region, including the IDs, names, plans, database versions, public endpoints, internal endpoints, creation time, and expiration time of the instances.
//
// @param request - DescribeDatabaseInstancesRequest
//
// @return DescribeDatabaseInstancesResponse
func (client *Client) DescribeDatabaseInstances(request *DescribeDatabaseInstancesRequest) (_result *DescribeDatabaseInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDatabaseInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the slow query log details of a Simple Database Service instance.
//
// Description:
//
// You can query the slow query log details of a Simple Database Service instance and locate faults based on the log details.
//
// >  Slow query log details are retained for 7 days.
//
// @param request - DescribeDatabaseSlowLogRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatabaseSlowLogRecordsResponse
func (client *Client) DescribeDatabaseSlowLogRecordsWithOptions(request *DescribeDatabaseSlowLogRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDatabaseSlowLogRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDatabaseSlowLogRecords"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the slow query log details of a Simple Database Service instance.
//
// Description:
//
// You can query the slow query log details of a Simple Database Service instance and locate faults based on the log details.
//
// >  Slow query log details are retained for 7 days.
//
// @param request - DescribeDatabaseSlowLogRecordsRequest
//
// @return DescribeDatabaseSlowLogRecordsResponse
func (client *Client) DescribeDatabaseSlowLogRecords(request *DescribeDatabaseSlowLogRecordsRequest) (_result *DescribeDatabaseSlowLogRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDatabaseSlowLogRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the result of applying a firewall template to simple application servers.
//
// @param request - DescribeFirewallTemplateApplyResultsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFirewallTemplateApplyResultsResponse
func (client *Client) DescribeFirewallTemplateApplyResultsWithOptions(request *DescribeFirewallTemplateApplyResultsRequest, runtime *dara.RuntimeOptions) (_result *DescribeFirewallTemplateApplyResultsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeFirewallTemplateApplyResults"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the result of applying a firewall template to simple application servers.
//
// @param request - DescribeFirewallTemplateApplyResultsRequest
//
// @return DescribeFirewallTemplateApplyResultsResponse
func (client *Client) DescribeFirewallTemplateApplyResults(request *DescribeFirewallTemplateApplyResultsRequest) (_result *DescribeFirewallTemplateApplyResultsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeFirewallTemplateApplyResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the result of applying a firewall template rule to simple application servers.
//
// @param request - DescribeFirewallTemplateRulesApplyResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFirewallTemplateRulesApplyResultResponse
func (client *Client) DescribeFirewallTemplateRulesApplyResultWithOptions(request *DescribeFirewallTemplateRulesApplyResultRequest, runtime *dara.RuntimeOptions) (_result *DescribeFirewallTemplateRulesApplyResultResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeFirewallTemplateRulesApplyResult"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the result of applying a firewall template rule to simple application servers.
//
// @param request - DescribeFirewallTemplateRulesApplyResultRequest
//
// @return DescribeFirewallTemplateRulesApplyResultResponse
func (client *Client) DescribeFirewallTemplateRulesApplyResult(request *DescribeFirewallTemplateRulesApplyResultRequest) (_result *DescribeFirewallTemplateRulesApplyResultResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeFirewallTemplateRulesApplyResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries details about firewall templates.
//
// @param request - DescribeFirewallTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFirewallTemplatesResponse
func (client *Client) DescribeFirewallTemplatesWithOptions(request *DescribeFirewallTemplatesRequest, runtime *dara.RuntimeOptions) (_result *DescribeFirewallTemplatesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeFirewallTemplates"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries details about firewall templates.
//
// @param request - DescribeFirewallTemplatesRequest
//
// @return DescribeFirewallTemplatesResponse
func (client *Client) DescribeFirewallTemplates(request *DescribeFirewallTemplatesRequest) (_result *DescribeFirewallTemplatesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeFirewallTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about the key pair of a simple application server.
//
// @param request - DescribeInstanceKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceKeyPairResponse
func (client *Client) DescribeInstanceKeyPairWithOptions(request *DescribeInstanceKeyPairRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstanceKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstanceKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about the key pair of a simple application server.
//
// @param request - DescribeInstanceKeyPairRequest
//
// @return DescribeInstanceKeyPairResponse
func (client *Client) DescribeInstanceKeyPair(request *DescribeInstanceKeyPairRequest) (_result *DescribeInstanceKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeInstanceKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks whether a password is set for a simple application server.
//
// @param request - DescribeInstancePasswordsSettingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstancePasswordsSettingResponse
func (client *Client) DescribeInstancePasswordsSettingWithOptions(request *DescribeInstancePasswordsSettingRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstancePasswordsSettingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstancePasswordsSetting"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Checks whether a password is set for a simple application server.
//
// @param request - DescribeInstancePasswordsSettingRequest
//
// @return DescribeInstancePasswordsSettingResponse
func (client *Client) DescribeInstancePasswordsSetting(request *DescribeInstancePasswordsSettingRequest) (_result *DescribeInstancePasswordsSettingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeInstancePasswordsSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the VNC connection address of a simple application server.
//
// @param request - DescribeInstanceVncUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceVncUrlResponse
func (client *Client) DescribeInstanceVncUrlWithOptions(request *DescribeInstanceVncUrlRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstanceVncUrlResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstanceVncUrl"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the VNC connection address of a simple application server.
//
// @param request - DescribeInstanceVncUrlRequest
//
// @return DescribeInstanceVncUrlResponse
func (client *Client) DescribeInstanceVncUrl(request *DescribeInstanceVncUrlRequest) (_result *DescribeInstanceVncUrlResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeInstanceVncUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the execution result of a command.
//
// Description:
//
//	  After you execute a command, the command may not succeed or return the expected results. You can call this operation to query the execution result of a command.
//
//		- You can query the execution results that were generated within the last two weeks. A maximum of 100,000 entries of execution results can be retained.
//
// @param request - DescribeInvocationResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInvocationResultResponse
func (client *Client) DescribeInvocationResultWithOptions(request *DescribeInvocationResultRequest, runtime *dara.RuntimeOptions) (_result *DescribeInvocationResultResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InvokeId) {
		query["InvokeId"] = request.InvokeId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInvocationResult"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the execution result of a command.
//
// Description:
//
//	  After you execute a command, the command may not succeed or return the expected results. You can call this operation to query the execution result of a command.
//
//		- You can query the execution results that were generated within the last two weeks. A maximum of 100,000 entries of execution results can be retained.
//
// @param request - DescribeInvocationResultRequest
//
// @return DescribeInvocationResultResponse
func (client *Client) DescribeInvocationResult(request *DescribeInvocationResultRequest) (_result *DescribeInvocationResultResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeInvocationResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries details about command execution.
//
// Description:
//
//	  After you execute a command, the command may not succeed or return the expected results. You can call this operation to query the actual execution results.
//
//		- You can query the execution results that were generated within the last two weeks. Up to 100,000 entries of execution results can be retained.
//
// @param request - DescribeInvocationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInvocationsResponse
func (client *Client) DescribeInvocationsWithOptions(request *DescribeInvocationsRequest, runtime *dara.RuntimeOptions) (_result *DescribeInvocationsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InvokeStatus) {
		query["InvokeStatus"] = request.InvokeStatus
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInvocations"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries details about command execution.
//
// Description:
//
//	  After you execute a command, the command may not succeed or return the expected results. You can call this operation to query the actual execution results.
//
//		- You can query the execution results that were generated within the last two weeks. Up to 100,000 entries of execution results can be retained.
//
// @param request - DescribeInvocationsRequest
//
// @return DescribeInvocationsResponse
func (client *Client) DescribeInvocations(request *DescribeInvocationsRequest) (_result *DescribeInvocationsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeInvocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring information about vCPUs, memory, disk IOPS, and traffic of a simple application server.
//
// @param request - DescribeMonitorDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorDataResponse
func (client *Client) DescribeMonitorDataWithOptions(request *DescribeMonitorDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeMonitorDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Length) {
		query["Length"] = request.Length
	}

	if !dara.IsNil(request.MetricName) {
		query["MetricName"] = request.MetricName
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.Period) {
		query["Period"] = request.Period
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeMonitorData"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the monitoring information about vCPUs, memory, disk IOPS, and traffic of a simple application server.
//
// @param request - DescribeMonitorDataRequest
//
// @return DescribeMonitorDataResponse
func (client *Client) DescribeMonitorData(request *DescribeMonitorDataRequest) (_result *DescribeMonitorDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of the Security Center agent on a simple application server.
//
// @param request - DescribeSecurityAgentStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityAgentStatusResponse
func (client *Client) DescribeSecurityAgentStatusWithOptions(request *DescribeSecurityAgentStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeSecurityAgentStatusResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSecurityAgentStatus"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the status of the Security Center agent on a simple application server.
//
// @param request - DescribeSecurityAgentStatusRequest
//
// @return DescribeSecurityAgentStatusResponse
func (client *Client) DescribeSecurityAgentStatus(request *DescribeSecurityAgentStatusRequest) (_result *DescribeSecurityAgentStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeSecurityAgentStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds key pairs from simple application servers.
//
// Description:
//
// If you want to change the SSH key pairs that are bound to your simple application servers or your end user no longer needs to access a specific simple application server, you can unbind the SSH key pairs from simple application servers to improve the security of the simple application servers or restrict access to the specific simple application server.
//
// @param request - DetachKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachKeyPairResponse
func (client *Client) DetachKeyPairWithOptions(request *DetachKeyPairRequest, runtime *dara.RuntimeOptions) (_result *DetachKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.KeyPairName) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DetachKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unbinds key pairs from simple application servers.
//
// Description:
//
// If you want to change the SSH key pairs that are bound to your simple application servers or your end user no longer needs to access a specific simple application server, you can unbind the SSH key pairs from simple application servers to improve the security of the simple application servers or restrict access to the specific simple application server.
//
// @param request - DetachKeyPairRequest
//
// @return DetachKeyPairResponse
func (client *Client) DetachKeyPair(request *DetachKeyPairRequest) (_result *DetachKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DetachKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables a firewall rule of a simple application server.
//
// @param request - DisableFirewallRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableFirewallRuleResponse
func (client *Client) DisableFirewallRuleWithOptions(request *DisableFirewallRuleRequest, runtime *dara.RuntimeOptions) (_result *DisableFirewallRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DisableFirewallRule"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables a firewall rule of a simple application server.
//
// @param request - DisableFirewallRuleRequest
//
// @return DisableFirewallRuleResponse
func (client *Client) DisableFirewallRule(request *DisableFirewallRuleRequest) (_result *DisableFirewallRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DisableFirewallRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables a firewall rule for a simple application server.
//
// @param request - EnableFirewallRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableFirewallRuleResponse
func (client *Client) EnableFirewallRuleWithOptions(request *EnableFirewallRuleRequest, runtime *dara.RuntimeOptions) (_result *EnableFirewallRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.SourceCidrIp) {
		query["SourceCidrIp"] = request.SourceCidrIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EnableFirewallRule"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables a firewall rule for a simple application server.
//
// @param request - EnableFirewallRuleRequest
//
// @return EnableFirewallRuleResponse
func (client *Client) EnableFirewallRule(request *EnableFirewallRuleRequest) (_result *EnableFirewallRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.EnableFirewallRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Imports an existing key pair to the Simple Application Server console.
//
// Description:
//
// You can call this operation to import an existing key pair to the Simple Application Server console. This way, you can use the key pair to log on to simple application servers. The existing key pair that you want to import must use a supported encryption method. For more information, see [Q2: Which encryption methods must be used by key pairs when I import existing key pairs to the Simple Application Server console?](https://help.aliyun.com/document_detail/59085.html)
//
// @param request - ImportKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportKeyPairResponse
func (client *Client) ImportKeyPairWithOptions(request *ImportKeyPairRequest, runtime *dara.RuntimeOptions) (_result *ImportKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.KeyPairName) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !dara.IsNil(request.PublicKeyBody) {
		query["PublicKeyBody"] = request.PublicKeyBody
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ImportKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Imports an existing key pair to the Simple Application Server console.
//
// Description:
//
// You can call this operation to import an existing key pair to the Simple Application Server console. This way, you can use the key pair to log on to simple application servers. The existing key pair that you want to import must use a supported encryption method. For more information, see [Q2: Which encryption methods must be used by key pairs when I import existing key pairs to the Simple Application Server console?](https://help.aliyun.com/document_detail/59085.html)
//
// @param request - ImportKeyPairRequest
//
// @return ImportKeyPairResponse
func (client *Client) ImportKeyPair(request *ImportKeyPairRequest) (_result *ImportKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ImportKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Installs the Cloud Assistant client on simple application servers at a time.
//
// Description:
//
// To run commands on your simple application servers, you must install the Cloud Assistant client on your servers. You can call the [DescribeCloudAssistantStatus](https://help.aliyun.com/document_detail/439512.html) operation to check whether the Cloud Assistant client is installed on your simple application servers. If you have not installed the Cloud Assistant client, you can call the InstallCloudAssistant operation to install the client. Then, you can call the [RebootInstance](https://help.aliyun.com/document_detail/190443.html) operation to restart the servers to allow the client to take effect.
//
// @param tmpReq - InstallCloudAssistantRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallCloudAssistantResponse
func (client *Client) InstallCloudAssistantWithOptions(tmpReq *InstallCloudAssistantRequest, runtime *dara.RuntimeOptions) (_result *InstallCloudAssistantResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &InstallCloudAssistantShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.InstanceIds) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, dara.String("InstanceIds"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceIdsShrink) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallCloudAssistant"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Installs the Cloud Assistant client on simple application servers at a time.
//
// Description:
//
// To run commands on your simple application servers, you must install the Cloud Assistant client on your servers. You can call the [DescribeCloudAssistantStatus](https://help.aliyun.com/document_detail/439512.html) operation to check whether the Cloud Assistant client is installed on your simple application servers. If you have not installed the Cloud Assistant client, you can call the InstallCloudAssistant operation to install the client. Then, you can call the [RebootInstance](https://help.aliyun.com/document_detail/190443.html) operation to restart the servers to allow the client to take effect.
//
// @param request - InstallCloudAssistantRequest
//
// @return InstallCloudAssistantResponse
func (client *Client) InstallCloudAssistant(request *InstallCloudAssistantRequest) (_result *InstallCloudAssistantResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.InstallCloudAssistantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Installs the CloudMonitor agent for a simple application server.
//
// @param request - InstallCloudMonitorAgentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallCloudMonitorAgentResponse
func (client *Client) InstallCloudMonitorAgentWithOptions(request *InstallCloudMonitorAgentRequest, runtime *dara.RuntimeOptions) (_result *InstallCloudMonitorAgentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.Force) {
		query["Force"] = request.Force
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallCloudMonitorAgent"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Installs the CloudMonitor agent for a simple application server.
//
// @param request - InstallCloudMonitorAgentRequest
//
// @return InstallCloudMonitorAgentResponse
func (client *Client) InstallCloudMonitorAgent(request *InstallCloudMonitorAgentRequest) (_result *InstallCloudMonitorAgentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.InstallCloudMonitorAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Runs a Command Assistant command for one or more simple application servers.
//
// Description:
//
//	  The simple application servers for which you want to call the operation must meet the following conditions. If a simple application server cannot meet the conditions, you must call this operation again.
//
//	    	- The simple application servers are in the `Running` state. You can call the [ListInstances](https://help.aliyun.com/document_detail/2361065.html) operation to query the status of simple application servers.
//
//	    	- Cloud Assistant Agent is installed on the simple application servers. For more information, see [InstallCloudAssistant](https://help.aliyun.com/document_detail/2361030.html).
//
//	    	- If you run a PowerShell command, make sure that the PowerShell module is configured for the simple application servers.
//
//		- The command may fail to be run due to the abnormal states of simple application servers, network exceptions, or exceptions in Cloud Assistant Agent. If the command fails to be run, no execution information is generated.
//
//		- If you enable the custom parameter feature when you create a command, you must set the `Parameters` parameter to specify custom parameters when you run the command.
//
//		- When you call this operation, you can select only one common command or a custom command that you have created.
//
// @param tmpReq - InvokeCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InvokeCommandResponse
func (client *Client) InvokeCommandWithOptions(tmpReq *InvokeCommandRequest, runtime *dara.RuntimeOptions) (_result *InvokeCommandResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &InvokeCommandShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Parameters) {
		request.ParametersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Parameters, dara.String("Parameters"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CommandId) {
		query["CommandId"] = request.CommandId
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.ParametersShrink) {
		query["Parameters"] = request.ParametersShrink
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Username) {
		query["Username"] = request.Username
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InvokeCommand"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Runs a Command Assistant command for one or more simple application servers.
//
// Description:
//
//	  The simple application servers for which you want to call the operation must meet the following conditions. If a simple application server cannot meet the conditions, you must call this operation again.
//
//	    	- The simple application servers are in the `Running` state. You can call the [ListInstances](https://help.aliyun.com/document_detail/2361065.html) operation to query the status of simple application servers.
//
//	    	- Cloud Assistant Agent is installed on the simple application servers. For more information, see [InstallCloudAssistant](https://help.aliyun.com/document_detail/2361030.html).
//
//	    	- If you run a PowerShell command, make sure that the PowerShell module is configured for the simple application servers.
//
//		- The command may fail to be run due to the abnormal states of simple application servers, network exceptions, or exceptions in Cloud Assistant Agent. If the command fails to be run, no execution information is generated.
//
//		- If you enable the custom parameter feature when you create a command, you must set the `Parameters` parameter to specify custom parameters when you run the command.
//
//		- When you call this operation, you can select only one common command or a custom command that you have created.
//
// @param request - InvokeCommandRequest
//
// @return InvokeCommandResponse
func (client *Client) InvokeCommand(request *InvokeCommandRequest) (_result *InvokeCommandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.InvokeCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about custom images that are shared across Alibaba Cloud accounts in a region.
//
// @param request - ListCustomImageShareAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomImageShareAccountsResponse
func (client *Client) ListCustomImageShareAccountsWithOptions(request *ListCustomImageShareAccountsRequest, runtime *dara.RuntimeOptions) (_result *ListCustomImageShareAccountsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCustomImageShareAccounts"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about custom images that are shared across Alibaba Cloud accounts in a region.
//
// @param request - ListCustomImageShareAccountsRequest
//
// @return ListCustomImageShareAccountsResponse
func (client *Client) ListCustomImageShareAccounts(request *ListCustomImageShareAccountsRequest) (_result *ListCustomImageShareAccountsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListCustomImageShareAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about custom images in a region.
//
// @param request - ListCustomImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomImagesResponse
func (client *Client) ListCustomImagesWithOptions(request *ListCustomImagesRequest, runtime *dara.RuntimeOptions) (_result *ListCustomImagesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DataSnapshotId) {
		query["DataSnapshotId"] = request.DataSnapshotId
	}

	if !dara.IsNil(request.ImageIds) {
		query["ImageIds"] = request.ImageIds
	}

	if !dara.IsNil(request.ImageNames) {
		query["ImageNames"] = request.ImageNames
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Share) {
		query["Share"] = request.Share
	}

	if !dara.IsNil(request.SystemSnapshotId) {
		query["SystemSnapshotId"] = request.SystemSnapshotId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCustomImages"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about custom images in a region.
//
// @param request - ListCustomImagesRequest
//
// @return ListCustomImagesResponse
func (client *Client) ListCustomImages(request *ListCustomImagesRequest) (_result *ListCustomImagesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListCustomImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about disks in a region.
//
// Description:
//
// The `InstanceId`, `DiskIds`, and `ResourceGroupId` parameters are optional. However, you can specify them as filter conditions and combine them with the logical AND operator to filter disks that you want to query.
//
// @param request - ListDisksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDisksResponse
func (client *Client) ListDisksWithOptions(request *ListDisksRequest, runtime *dara.RuntimeOptions) (_result *ListDisksResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DiskIds) {
		query["DiskIds"] = request.DiskIds
	}

	if !dara.IsNil(request.DiskType) {
		query["DiskType"] = request.DiskType
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListDisks"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about disks in a region.
//
// Description:
//
// The `InstanceId`, `DiskIds`, and `ResourceGroupId` parameters are optional. However, you can specify them as filter conditions and combine them with the logical AND operator to filter disks that you want to query.
//
// @param request - ListDisksRequest
//
// @return ListDisksResponse
func (client *Client) ListDisks(request *ListDisksRequest) (_result *ListDisksResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListDisksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the firewall rules of a simple application server.
//
// Description:
//
// You can call the ListFirewallRules operation to query the firewall rule details of a simple application server, including the port range, firewall rule ID, and transport layer protocol.
//
// @param request - ListFirewallRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFirewallRulesResponse
func (client *Client) ListFirewallRulesWithOptions(request *ListFirewallRulesRequest, runtime *dara.RuntimeOptions) (_result *ListFirewallRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FirewallRuleId) {
		query["FirewallRuleId"] = request.FirewallRuleId
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListFirewallRules"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the firewall rules of a simple application server.
//
// Description:
//
// You can call the ListFirewallRules operation to query the firewall rule details of a simple application server, including the port range, firewall rule ID, and transport layer protocol.
//
// @param request - ListFirewallRulesRequest
//
// @return ListFirewallRulesResponse
func (client *Client) ListFirewallRules(request *ListFirewallRulesRequest) (_result *ListFirewallRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListFirewallRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about images in a region.
//
// Description:
//
// You can query details about one or more images in a specified region, including the IDs, names, and types of the images.
//
// @param request - ListImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListImagesResponse
func (client *Client) ListImagesWithOptions(request *ListImagesRequest, runtime *dara.RuntimeOptions) (_result *ListImagesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ImageIds) {
		query["ImageIds"] = request.ImageIds
	}

	if !dara.IsNil(request.ImageType) {
		query["ImageType"] = request.ImageType
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListImages"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about images in a region.
//
// Description:
//
// You can query details about one or more images in a specified region, including the IDs, names, and types of the images.
//
// @param request - ListImagesRequest
//
// @return ListImagesResponse
func (client *Client) ListImages(request *ListImagesRequest) (_result *ListImagesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the plans to which you can upgrade your simple application server.
//
// Description:
//
// If the plan of your simple application server does not meet your business requirements, you can call the ListInstancePlansModification operation to obtain a list of plans that can be upgraded for your simple application server. Then, you can call the [UpgradeInstance](https://help.aliyun.com/document_detail/190445.html) operation to upgrade the plan.
//
// >  We recommend that you create snapshots for the disks of your simple application server to back up data before you upgrade the plan. For more information, see [CreateSnapshot](https://help.aliyun.com/document_detail/190452.html).
//
// For the precautions about plan upgrade, see [Upgrade a simple application server](https://help.aliyun.com/document_detail/61433.html).
//
// @param request - ListInstancePlansModificationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstancePlansModificationResponse
func (client *Client) ListInstancePlansModificationWithOptions(request *ListInstancePlansModificationRequest, runtime *dara.RuntimeOptions) (_result *ListInstancePlansModificationResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstancePlansModification"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the plans to which you can upgrade your simple application server.
//
// Description:
//
// If the plan of your simple application server does not meet your business requirements, you can call the ListInstancePlansModification operation to obtain a list of plans that can be upgraded for your simple application server. Then, you can call the [UpgradeInstance](https://help.aliyun.com/document_detail/190445.html) operation to upgrade the plan.
//
// >  We recommend that you create snapshots for the disks of your simple application server to back up data before you upgrade the plan. For more information, see [CreateSnapshot](https://help.aliyun.com/document_detail/190452.html).
//
// For the precautions about plan upgrade, see [Upgrade a simple application server](https://help.aliyun.com/document_detail/61433.html).
//
// @param request - ListInstancePlansModificationRequest
//
// @return ListInstancePlansModificationResponse
func (client *Client) ListInstancePlansModification(request *ListInstancePlansModificationRequest) (_result *ListInstancePlansModificationResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListInstancePlansModificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of simple application servers.
//
// @param request - ListInstanceStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstanceStatusResponse
func (client *Client) ListInstanceStatusWithOptions(request *ListInstanceStatusRequest, runtime *dara.RuntimeOptions) (_result *ListInstanceStatusResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstanceStatus"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the status of simple application servers.
//
// @param request - ListInstanceStatusRequest
//
// @return ListInstanceStatusResponse
func (client *Client) ListInstanceStatus(request *ListInstanceStatusRequest) (_result *ListInstanceStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListInstanceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about simple application servers in a region.
//
// Description:
//
// You can call this operation to query the details of simple application servers in a specified region, including the names, public IP addresses, internal IP addresses, creation time, and expiration time of the servers.
//
// @param request - ListInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstancesResponse
func (client *Client) ListInstancesWithOptions(request *ListInstancesRequest, runtime *dara.RuntimeOptions) (_result *ListInstancesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ChargeType) {
		query["ChargeType"] = request.ChargeType
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PlanType) {
		query["PlanType"] = request.PlanType
	}

	if !dara.IsNil(request.PublicIpAddresses) {
		query["PublicIpAddresses"] = request.PublicIpAddresses
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstances"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about simple application servers in a region.
//
// Description:
//
// You can call this operation to query the details of simple application servers in a specified region, including the names, public IP addresses, internal IP addresses, creation time, and expiration time of the servers.
//
// @param request - ListInstancesRequest
//
// @return ListInstancesResponse
func (client *Client) ListInstances(request *ListInstancesRequest) (_result *ListInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details about data transfer plans of simple application servers.
//
// Description:
//
// You can query the details of data transfer plans of simple application servers, including the total quota, used quota, unused quota, and excess data transfers in the current month.
//
// Simple Application Server provides data transfer plans that can be used to offset data transfer fees. You are charged for excess data transfers. Take note of the following items:
//
//   - Only outbound data transfers of simple application servers over the Internet are calculated. Outbound data transfers include the data transfer quota and the excess data transfers beyond the quota. Inbound data transfers of simple application servers over the Internet are not calculated.
//
//   - Outbound data transfers from simple application servers to other Alibaba Cloud services over the Internet first consume data transfer quotas. If the quotas are exhausted, you are charged for excess data transfers.
//
//   - You are not charged for data transfers between simple application servers within the same virtual private cloud (VPC).
//
// For more information, see [Quotas and billing of data transfers](https://help.aliyun.com/document_detail/86281.html).
//
// @param request - ListInstancesTrafficPackagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstancesTrafficPackagesResponse
func (client *Client) ListInstancesTrafficPackagesWithOptions(request *ListInstancesTrafficPackagesRequest, runtime *dara.RuntimeOptions) (_result *ListInstancesTrafficPackagesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstancesTrafficPackages"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details about data transfer plans of simple application servers.
//
// Description:
//
// You can query the details of data transfer plans of simple application servers, including the total quota, used quota, unused quota, and excess data transfers in the current month.
//
// Simple Application Server provides data transfer plans that can be used to offset data transfer fees. You are charged for excess data transfers. Take note of the following items:
//
//   - Only outbound data transfers of simple application servers over the Internet are calculated. Outbound data transfers include the data transfer quota and the excess data transfers beyond the quota. Inbound data transfers of simple application servers over the Internet are not calculated.
//
//   - Outbound data transfers from simple application servers to other Alibaba Cloud services over the Internet first consume data transfer quotas. If the quotas are exhausted, you are charged for excess data transfers.
//
//   - You are not charged for data transfers between simple application servers within the same virtual private cloud (VPC).
//
// For more information, see [Quotas and billing of data transfers](https://help.aliyun.com/document_detail/86281.html).
//
// @param request - ListInstancesTrafficPackagesRequest
//
// @return ListInstancesTrafficPackagesResponse
func (client *Client) ListInstancesTrafficPackages(request *ListInstancesTrafficPackagesRequest) (_result *ListInstancesTrafficPackagesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListInstancesTrafficPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the AccessKey pairs that are bound to simple application servers in a specific region.
//
// @param request - ListKeyPairsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListKeyPairsResponse
func (client *Client) ListKeyPairsWithOptions(request *ListKeyPairsRequest, runtime *dara.RuntimeOptions) (_result *ListKeyPairsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListKeyPairs"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the AccessKey pairs that are bound to simple application servers in a specific region.
//
// @param request - ListKeyPairsRequest
//
// @return ListKeyPairsResponse
func (client *Client) ListKeyPairs(request *ListKeyPairsRequest) (_result *ListKeyPairsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all plans provided by Simple Application Server in a region.
//
// Description:
//
// You can query the details of all plans provided by Simple Application Server in a region, including the IDs, prices, disk sizes, and disk categories of the plans.
//
// @param request - ListPlansRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPlansResponse
func (client *Client) ListPlansWithOptions(request *ListPlansRequest, runtime *dara.RuntimeOptions) (_result *ListPlansResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPlans"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries all plans provided by Simple Application Server in a region.
//
// Description:
//
// You can query the details of all plans provided by Simple Application Server in a region, including the IDs, prices, disk sizes, and disk categories of the plans.
//
// @param request - ListPlansRequest
//
// @return ListPlansResponse
func (client *Client) ListPlans(request *ListPlansRequest) (_result *ListPlansResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListPlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all regions in which Simple Application Server is supported.
//
// Description:
//
// The query results include all the Alibaba Cloud regions where Simple Application Server is supported on the international site (alibabacloud.com) and the China site (aliyun.com).
//
// @param request - ListRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRegionsResponse
func (client *Client) ListRegionsWithOptions(request *ListRegionsRequest, runtime *dara.RuntimeOptions) (_result *ListRegionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AcceptLanguage) {
		query["AcceptLanguage"] = request.AcceptLanguage
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListRegions"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries all regions in which Simple Application Server is supported.
//
// Description:
//
// The query results include all the Alibaba Cloud regions where Simple Application Server is supported on the international site (alibabacloud.com) and the China site (aliyun.com).
//
// @param request - ListRegionsRequest
//
// @return ListRegionsResponse
func (client *Client) ListRegions(request *ListRegionsRequest) (_result *ListRegionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about snapshots that are created for a simple application server.
//
// Description:
//
// The `InstanceId`, `DiskId`, `SnapshotIds`, and `ResourceGroupId` parameters are optional. However, you can specify them as filter conditions and combine them with the logical AND operator to filter snapshots that you want to query.
//
// @param request - ListSnapshotsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSnapshotsResponse
func (client *Client) ListSnapshotsWithOptions(request *ListSnapshotsRequest, runtime *dara.RuntimeOptions) (_result *ListSnapshotsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DiskId) {
		query["DiskId"] = request.DiskId
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SnapshotIds) {
		query["SnapshotIds"] = request.SnapshotIds
	}

	if !dara.IsNil(request.SourceDiskType) {
		query["SourceDiskType"] = request.SourceDiskType
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSnapshots"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about snapshots that are created for a simple application server.
//
// Description:
//
// The `InstanceId`, `DiskId`, `SnapshotIds`, and `ResourceGroupId` parameters are optional. However, you can specify them as filter conditions and combine them with the logical AND operator to filter snapshots that you want to query.
//
// @param request - ListSnapshotsRequest
//
// @return ListSnapshotsResponse
func (client *Client) ListSnapshots(request *ListSnapshotsRequest) (_result *ListSnapshotsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListSnapshotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the tags that are added to simple resources, such as instances, snapshots, disks, images, commands, and firewall rules.
//
// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *dara.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListTagResources"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the tags that are added to simple resources, such as instances, snapshots, disks, images, commands, and firewall rules.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Logs on to a simple application server on Workbench.
//
// Description:
//
// After you create a simple application server, you can log on to the simple application server to build environments and applications on the server.
//
// @param request - LoginInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LoginInstanceResponse
func (client *Client) LoginInstanceWithOptions(request *LoginInstanceRequest, runtime *dara.RuntimeOptions) (_result *LoginInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Password) {
		query["Password"] = request.Password
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Username) {
		query["Username"] = request.Username
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("LoginInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Logs on to a simple application server on Workbench.
//
// Description:
//
// After you create a simple application server, you can log on to the simple application server to build environments and applications on the server.
//
// @param request - LoginInstanceRequest
//
// @return LoginInstanceResponse
func (client *Client) LoginInstance(request *LoginInstanceRequest) (_result *LoginInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.LoginInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the description of a Simple Database Service instance.
//
// Description:
//
// You can call this operation to modify the description of a Simple Database Service instance.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ModifyDatabaseInstanceDescriptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDatabaseInstanceDescriptionResponse
func (client *Client) ModifyDatabaseInstanceDescriptionWithOptions(request *ModifyDatabaseInstanceDescriptionRequest, runtime *dara.RuntimeOptions) (_result *ModifyDatabaseInstanceDescriptionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceDescription) {
		query["DatabaseInstanceDescription"] = request.DatabaseInstanceDescription
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDatabaseInstanceDescription"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the description of a Simple Database Service instance.
//
// Description:
//
// You can call this operation to modify the description of a Simple Database Service instance.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ModifyDatabaseInstanceDescriptionRequest
//
// @return ModifyDatabaseInstanceDescriptionResponse
func (client *Client) ModifyDatabaseInstanceDescription(request *ModifyDatabaseInstanceDescriptionRequest) (_result *ModifyDatabaseInstanceDescriptionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDatabaseInstanceDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// After you create a Simple Database Service instance, you can view the parameters of the instance or modify the parameters of the instance based on your business requirements.
//
// Description:
//
// After you create a Simple Database Service instance, you can view the parameters of the instance or modify the parameters of the instance based on your business requirements.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ModifyDatabaseInstanceParameterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDatabaseInstanceParameterResponse
func (client *Client) ModifyDatabaseInstanceParameterWithOptions(request *ModifyDatabaseInstanceParameterRequest, runtime *dara.RuntimeOptions) (_result *ModifyDatabaseInstanceParameterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.ForceRestart) {
		query["ForceRestart"] = request.ForceRestart
	}

	if !dara.IsNil(request.Parameters) {
		query["Parameters"] = request.Parameters
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDatabaseInstanceParameter"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// After you create a Simple Database Service instance, you can view the parameters of the instance or modify the parameters of the instance based on your business requirements.
//
// Description:
//
// After you create a Simple Database Service instance, you can view the parameters of the instance or modify the parameters of the instance based on your business requirements.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ModifyDatabaseInstanceParameterRequest
//
// @return ModifyDatabaseInstanceParameterResponse
func (client *Client) ModifyDatabaseInstanceParameter(request *ModifyDatabaseInstanceParameterRequest) (_result *ModifyDatabaseInstanceParameterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDatabaseInstanceParameterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the firewall rule of a simple application server.
//
// @param request - ModifyFirewallRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyFirewallRuleResponse
func (client *Client) ModifyFirewallRuleWithOptions(request *ModifyFirewallRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyFirewallRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleProtocol) {
		query["RuleProtocol"] = request.RuleProtocol
	}

	if !dara.IsNil(request.SourceCidrIp) {
		query["SourceCidrIp"] = request.SourceCidrIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyFirewallRule"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the firewall rule of a simple application server.
//
// @param request - ModifyFirewallRuleRequest
//
// @return ModifyFirewallRuleResponse
func (client *Client) ModifyFirewallRule(request *ModifyFirewallRuleRequest) (_result *ModifyFirewallRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyFirewallRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the firewall rule in a firewall template. You can apply the new firewall rule to simple application servers.
//
// Description:
//
// Modifying a firewall template does not affect the firewall rules that have been applied to simple application servers.
//
// @param request - ModifyFirewallTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyFirewallTemplateResponse
func (client *Client) ModifyFirewallTemplateWithOptions(request *ModifyFirewallTemplateRequest, runtime *dara.RuntimeOptions) (_result *ModifyFirewallTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.FirewallTemplateId) {
		query["FirewallTemplateId"] = request.FirewallTemplateId
	}

	if !dara.IsNil(request.FirewallTemplateRule) {
		query["FirewallTemplateRule"] = request.FirewallTemplateRule
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyFirewallTemplate"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the firewall rule in a firewall template. You can apply the new firewall rule to simple application servers.
//
// Description:
//
// Modifying a firewall template does not affect the firewall rules that have been applied to simple application servers.
//
// @param request - ModifyFirewallTemplateRequest
//
// @return ModifyFirewallTemplateResponse
func (client *Client) ModifyFirewallTemplate(request *ModifyFirewallTemplateRequest) (_result *ModifyFirewallTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyFirewallTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Shares or unshares a custom image to Elastic Compute Service (ECS).
//
// Description:
//
// Custom images can be shared to ECS. If the configurations of your simple application server cannot meet your business requirements, or you want to deploy your business on ECS instances, you can share your custom image to ECS to transfer your business from Simple Application Server to ECS.
//
// >  The region in which the shared image resides in ECS is the same as the region in which the custom image resides in Simple Application Server.
//
// You can unshare a custom image based on your business requirements or when you want to delete the custom image. After you unshare a custom image, take note of the following items:
//
//   - You cannot query or use the custom image by using the ECS console or API.
//
//   - You cannot re-initialize the disks of the ECS instances that were created based on the shared image.
//
// @param request - ModifyImageShareStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyImageShareStatusResponse
func (client *Client) ModifyImageShareStatusWithOptions(request *ModifyImageShareStatusRequest, runtime *dara.RuntimeOptions) (_result *ModifyImageShareStatusResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.Operation) {
		query["Operation"] = request.Operation
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyImageShareStatus"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Shares or unshares a custom image to Elastic Compute Service (ECS).
//
// Description:
//
// Custom images can be shared to ECS. If the configurations of your simple application server cannot meet your business requirements, or you want to deploy your business on ECS instances, you can share your custom image to ECS to transfer your business from Simple Application Server to ECS.
//
// >  The region in which the shared image resides in ECS is the same as the region in which the custom image resides in Simple Application Server.
//
// You can unshare a custom image based on your business requirements or when you want to delete the custom image. After you unshare a custom image, take note of the following items:
//
//   - You cannot query or use the custom image by using the ECS console or API.
//
//   - You cannot re-initialize the disks of the ECS instances that were created based on the shared image.
//
// @param request - ModifyImageShareStatusRequest
//
// @return ModifyImageShareStatusResponse
func (client *Client) ModifyImageShareStatus(request *ModifyImageShareStatusRequest) (_result *ModifyImageShareStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyImageShareStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the VNC password of a simple application server.
//
// @param request - ModifyInstanceVncPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceVncPasswordResponse
func (client *Client) ModifyInstanceVncPasswordWithOptions(request *ModifyInstanceVncPasswordRequest, runtime *dara.RuntimeOptions) (_result *ModifyInstanceVncPasswordResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.VncPassword) {
		query["VncPassword"] = request.VncPassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyInstanceVncPassword"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the VNC password of a simple application server.
//
// @param request - ModifyInstanceVncPasswordRequest
//
// @return ModifyInstanceVncPasswordResponse
func (client *Client) ModifyInstanceVncPassword(request *ModifyInstanceVncPasswordRequest) (_result *ModifyInstanceVncPasswordResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyInstanceVncPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts a simple application server.
//
// Description:
//
//	  Only simple application servers that are in the Running state can be restarted.
//
//		- After you restart a simple application server, it enters the Starting state.
//
// @param request - RebootInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootInstanceResponse
func (client *Client) RebootInstanceWithOptions(request *RebootInstanceRequest, runtime *dara.RuntimeOptions) (_result *RebootInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RebootInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Restarts a simple application server.
//
// Description:
//
//	  Only simple application servers that are in the Running state can be restarted.
//
//		- After you restart a simple application server, it enters the Starting state.
//
// @param request - RebootInstanceRequest
//
// @return RebootInstanceResponse
func (client *Client) RebootInstance(request *RebootInstanceRequest) (_result *RebootInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RebootInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts simple application servers.
//
// @param request - RebootInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootInstancesResponse
func (client *Client) RebootInstancesWithOptions(request *RebootInstancesRequest, runtime *dara.RuntimeOptions) (_result *RebootInstancesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ForceReboot) {
		query["ForceReboot"] = request.ForceReboot
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RebootInstances"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Restarts simple application servers.
//
// @param request - RebootInstancesRequest
//
// @return RebootInstancesResponse
func (client *Client) RebootInstances(request *RebootInstancesRequest) (_result *RebootInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RebootInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// If you no longer need to use a public endpoint to access a Simple Database Service instance, you can release the public endpoint.
//
// Description:
//
// If you no longer need to use a public endpoint to access a Simple Database Service instance, you can release the public endpoint.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ReleasePublicConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleasePublicConnectionResponse
func (client *Client) ReleasePublicConnectionWithOptions(request *ReleasePublicConnectionRequest, runtime *dara.RuntimeOptions) (_result *ReleasePublicConnectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ReleasePublicConnection"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// If you no longer need to use a public endpoint to access a Simple Database Service instance, you can release the public endpoint.
//
// Description:
//
// If you no longer need to use a public endpoint to access a Simple Database Service instance, you can release the public endpoint.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ReleasePublicConnectionRequest
//
// @return ReleasePublicConnectionResponse
func (client *Client) ReleasePublicConnection(request *ReleasePublicConnectionRequest) (_result *ReleasePublicConnectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ReleasePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unshares a custom image that is shared across Alibaba Cloud accounts.
//
// @param request - RemoveCustomImageShareAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveCustomImageShareAccountResponse
func (client *Client) RemoveCustomImageShareAccountWithOptions(request *RemoveCustomImageShareAccountRequest, runtime *dara.RuntimeOptions) (_result *RemoveCustomImageShareAccountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Account) {
		query["Account"] = request.Account
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RemoveCustomImageShareAccount"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unshares a custom image that is shared across Alibaba Cloud accounts.
//
// @param request - RemoveCustomImageShareAccountRequest
//
// @return RemoveCustomImageShareAccountResponse
func (client *Client) RemoveCustomImageShareAccount(request *RemoveCustomImageShareAccountRequest) (_result *RemoveCustomImageShareAccountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RemoveCustomImageShareAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renews a simple application server.
//
// Description:
//
//	  Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](https://help.aliyun.com/document_detail/58623.html).
//
//		- Before you call this operation, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the renewal fails.
//
// @param request - RenewInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewInstanceResponse
func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *dara.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Period) {
		query["Period"] = request.Period
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RenewInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Renews a simple application server.
//
// Description:
//
//	  Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](https://help.aliyun.com/document_detail/58623.html).
//
//		- Before you call this operation, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the renewal fails.
//
// @param request - RenewInstanceRequest
//
// @return RenewInstanceResponse
func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// If the password of your Simple Database Service instance is not strong, you can call this operation to change the password of the administrator account of the instance. To ensure security of the instance, we recommend that you regularly change the password of the instance.
//
// Description:
//
// If the password of your Simple Database Service instance is not strong, you can call this operation to change the password of the administrator account of the instance. To ensure security of the instance, we recommend that you regularly change the password of the instance.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ResetDatabaseAccountPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetDatabaseAccountPasswordResponse
func (client *Client) ResetDatabaseAccountPasswordWithOptions(request *ResetDatabaseAccountPasswordRequest, runtime *dara.RuntimeOptions) (_result *ResetDatabaseAccountPasswordResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountPassword) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResetDatabaseAccountPassword"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// If the password of your Simple Database Service instance is not strong, you can call this operation to change the password of the administrator account of the instance. To ensure security of the instance, we recommend that you regularly change the password of the instance.
//
// Description:
//
// If the password of your Simple Database Service instance is not strong, you can call this operation to change the password of the administrator account of the instance. To ensure security of the instance, we recommend that you regularly change the password of the instance.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - ResetDatabaseAccountPasswordRequest
//
// @return ResetDatabaseAccountPasswordResponse
func (client *Client) ResetDatabaseAccountPassword(request *ResetDatabaseAccountPasswordRequest) (_result *ResetDatabaseAccountPasswordResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ResetDatabaseAccountPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Rolls back a disk based on a snapshot.
//
// Description:
//
//	  You can call this operation only if the associated simple application server is in the Stopped state.
//
//		- If you restore a disk from a snapshot, the incremental data after the snapshot is created is lost. We recommend that you back up the data before you perform this operation.
//
// ### [](#)Precautions
//
// Resetting the system or changing the image of a simple application server clears the disk data on the server. Snapshots created before the reset or change are retained but cannot be used to restore disks.
//
// @param request - ResetDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetDiskResponse
func (client *Client) ResetDiskWithOptions(request *ResetDiskRequest, runtime *dara.RuntimeOptions) (_result *ResetDiskResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DiskId) {
		query["DiskId"] = request.DiskId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SnapshotId) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResetDisk"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Rolls back a disk based on a snapshot.
//
// Description:
//
//	  You can call this operation only if the associated simple application server is in the Stopped state.
//
//		- If you restore a disk from a snapshot, the incremental data after the snapshot is created is lost. We recommend that you back up the data before you perform this operation.
//
// ### [](#)Precautions
//
// Resetting the system or changing the image of a simple application server clears the disk data on the server. Snapshots created before the reset or change are retained but cannot be used to restore disks.
//
// @param request - ResetDiskRequest
//
// @return ResetDiskResponse
func (client *Client) ResetDisk(request *ResetDiskRequest) (_result *ResetDiskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ResetDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets a simple application server.
//
// Description:
//
// You can reset a simple application server to re-install its applications or operating system and re-initialize the server. You can reset a simple application server by resetting the current system or changing the image.
//
//   - Reset the current system: You can re-install the operating system without changing the image.
//
//   - Change the image: You can select another Alibaba Cloud image or a custom image to re-install the operating system.
//
// ### [](#)Precautions
//
//   - Resetting the system or changing the image of a simple application server clears the disk data on the server. Back up the data as needed.
//
//   - After you reset a simple application server, monitoring may fail. In this case, you can use one of the following methods to install the CloudMonitor agent on the server:
//
//   - Connect to the server: For more information, see [Manually install the CloudMonitor agent for C++ on an ECS instance](https://help.aliyun.com/document_detail/183482.html).
//
//   - Use Command Assistant: For more information, see [Use Command Assistant](https://help.aliyun.com/document_detail/438681.html). You can obtain the command that can be used to install CloudMonitor from the "Common commands" section of the [Use Command Assistant](https://help.aliyun.com/document_detail/438681.html) topic.
//
// ### [](#)Limits
//
//   - Snapshots that are created before the reset are retained, but the snapshots cannot be used to restore the disks of the server.
//
//   - You cannot reset simple application servers that were created from custom images that contain data of data disks.
//
//   - If you reset a simple application server by replacing the existing image with a custom image, the following limits apply:
//
//   - The custom image must reside in the same region as the current server.
//
//   - The custom image cannot be created based on the current server. If you want to restore the data on the server, you can use a snapshot of the server to restore disk data.
//
//   - If your simple application server resides in a region outside the Chinese mainland, you cannot switch the operating system of the server between Windows Server and Linux. You cannot use a Windows Server custom image to reset a Linux simple application server. Similarly, you cannot use a Linux custom image to reset a Windows Server simple application server. You can switch the operating systems of simple application servers only between Windows Server versions or between Linux distributions.
//
//   - The following limits apply to the disks attached to the simple application server:
//
//   - If the custom image contains a system disk and a data disk but only a system disk is attached to the simple application server, you cannot use the custom image to reset the simple application server.
//
//   - If the system disk size of the custom image is greater than the system disk size of the simple application server, you cannot directly use the custom image to reset the simple application server.
//
//   - Only if the system disk size of the simple application server is greater than or equal to the system disk size of the custom image, you can use the custom image to reset the simple application server. To increase the system disk size of your server, you can upgrade the server configuration. For more information, see Upgrade a simple application server.
//
//   - If the data disk size of the custom image is greater than the data disk size of the simple application server, you cannot use the custom image to reset the simple application server.
//
// @param request - ResetSystemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetSystemResponse
func (client *Client) ResetSystemWithOptions(request *ResetSystemRequest, runtime *dara.RuntimeOptions) (_result *ResetSystemResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.LoginCredentials) {
		query["LoginCredentials"] = request.LoginCredentials
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResetSystem"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resets a simple application server.
//
// Description:
//
// You can reset a simple application server to re-install its applications or operating system and re-initialize the server. You can reset a simple application server by resetting the current system or changing the image.
//
//   - Reset the current system: You can re-install the operating system without changing the image.
//
//   - Change the image: You can select another Alibaba Cloud image or a custom image to re-install the operating system.
//
// ### [](#)Precautions
//
//   - Resetting the system or changing the image of a simple application server clears the disk data on the server. Back up the data as needed.
//
//   - After you reset a simple application server, monitoring may fail. In this case, you can use one of the following methods to install the CloudMonitor agent on the server:
//
//   - Connect to the server: For more information, see [Manually install the CloudMonitor agent for C++ on an ECS instance](https://help.aliyun.com/document_detail/183482.html).
//
//   - Use Command Assistant: For more information, see [Use Command Assistant](https://help.aliyun.com/document_detail/438681.html). You can obtain the command that can be used to install CloudMonitor from the "Common commands" section of the [Use Command Assistant](https://help.aliyun.com/document_detail/438681.html) topic.
//
// ### [](#)Limits
//
//   - Snapshots that are created before the reset are retained, but the snapshots cannot be used to restore the disks of the server.
//
//   - You cannot reset simple application servers that were created from custom images that contain data of data disks.
//
//   - If you reset a simple application server by replacing the existing image with a custom image, the following limits apply:
//
//   - The custom image must reside in the same region as the current server.
//
//   - The custom image cannot be created based on the current server. If you want to restore the data on the server, you can use a snapshot of the server to restore disk data.
//
//   - If your simple application server resides in a region outside the Chinese mainland, you cannot switch the operating system of the server between Windows Server and Linux. You cannot use a Windows Server custom image to reset a Linux simple application server. Similarly, you cannot use a Linux custom image to reset a Windows Server simple application server. You can switch the operating systems of simple application servers only between Windows Server versions or between Linux distributions.
//
//   - The following limits apply to the disks attached to the simple application server:
//
//   - If the custom image contains a system disk and a data disk but only a system disk is attached to the simple application server, you cannot use the custom image to reset the simple application server.
//
//   - If the system disk size of the custom image is greater than the system disk size of the simple application server, you cannot directly use the custom image to reset the simple application server.
//
//   - Only if the system disk size of the simple application server is greater than or equal to the system disk size of the custom image, you can use the custom image to reset the simple application server. To increase the system disk size of your server, you can upgrade the server configuration. For more information, see Upgrade a simple application server.
//
//   - If the data disk size of the custom image is greater than the data disk size of the simple application server, you cannot use the custom image to reset the simple application server.
//
// @param request - ResetSystemRequest
//
// @return ResetSystemResponse
func (client *Client) ResetSystem(request *ResetSystemRequest) (_result *ResetSystemResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ResetSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// You can call this operation to restart a Simple Database Service instance that is in the Running state.
//
// Description:
//
// You can call this operation to restart a Simple Database Service instance that is in the Running state.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - RestartDatabaseInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartDatabaseInstanceResponse
func (client *Client) RestartDatabaseInstanceWithOptions(request *RestartDatabaseInstanceRequest, runtime *dara.RuntimeOptions) (_result *RestartDatabaseInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RestartDatabaseInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// You can call this operation to restart a Simple Database Service instance that is in the Running state.
//
// Description:
//
// You can call this operation to restart a Simple Database Service instance that is in the Running state.
//
// ### QPS limit
//
// You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/347607.html).
//
// @param request - RestartDatabaseInstanceRequest
//
// @return RestartDatabaseInstanceResponse
func (client *Client) RestartDatabaseInstance(request *RestartDatabaseInstanceRequest) (_result *RestartDatabaseInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RestartDatabaseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Runs commands on a simple application server.
//
// Description:
//
// Command Assistant is an automated O\\&M tool for Simple Application Server. You can maintain simple application servers by running shell, PowerShell, and batch commands in the Simple Application Server console without remotely logging on to the servers.
//
// Before you use Command Assistant, take note of the following items:
//
//   - The simple application server must be in the Running state.
//
//   - The Cloud Assistant client is installed on the server. By default, the Cloud Assistant client is installed on simple application servers. If you have manually uninstalled the client, you must reinstall it. For more information, see [Install the Cloud Assistant Agent](https://help.aliyun.com/document_detail/64921.html).
//
// @param tmpReq - RunCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunCommandResponse
func (client *Client) RunCommandWithOptions(tmpReq *RunCommandRequest, runtime *dara.RuntimeOptions) (_result *RunCommandResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &RunCommandShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Parameters) {
		request.ParametersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Parameters, dara.String("Parameters"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CommandContent) {
		query["CommandContent"] = request.CommandContent
	}

	if !dara.IsNil(request.EnableParameter) {
		query["EnableParameter"] = request.EnableParameter
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.ParametersShrink) {
		query["Parameters"] = request.ParametersShrink
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Timeout) {
		query["Timeout"] = request.Timeout
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.WindowsPasswordName) {
		query["WindowsPasswordName"] = request.WindowsPasswordName
	}

	if !dara.IsNil(request.WorkingDir) {
		query["WorkingDir"] = request.WorkingDir
	}

	if !dara.IsNil(request.WorkingUser) {
		query["WorkingUser"] = request.WorkingUser
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RunCommand"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Runs commands on a simple application server.
//
// Description:
//
// Command Assistant is an automated O\\&M tool for Simple Application Server. You can maintain simple application servers by running shell, PowerShell, and batch commands in the Simple Application Server console without remotely logging on to the servers.
//
// Before you use Command Assistant, take note of the following items:
//
//   - The simple application server must be in the Running state.
//
//   - The Cloud Assistant client is installed on the server. By default, the Cloud Assistant client is installed on simple application servers. If you have manually uninstalled the client, you must reinstall it. For more information, see [Install the Cloud Assistant Agent](https://help.aliyun.com/document_detail/64921.html).
//
// @param request - RunCommandRequest
//
// @return RunCommandResponse
func (client *Client) RunCommand(request *RunCommandRequest) (_result *RunCommandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RunCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts a Simple Database Service instance.
//
// Description:
//
// You can call this operation to start a Simple Database Service instance that is in the Stopped state.
//
// @param request - StartDatabaseInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartDatabaseInstanceResponse
func (client *Client) StartDatabaseInstanceWithOptions(request *StartDatabaseInstanceRequest, runtime *dara.RuntimeOptions) (_result *StartDatabaseInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartDatabaseInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Starts a Simple Database Service instance.
//
// Description:
//
// You can call this operation to start a Simple Database Service instance that is in the Stopped state.
//
// @param request - StartDatabaseInstanceRequest
//
// @return StartDatabaseInstanceResponse
func (client *Client) StartDatabaseInstance(request *StartDatabaseInstanceRequest) (_result *StartDatabaseInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.StartDatabaseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts a simple application server.
//
// Description:
//
// You can call this operation to start a simple application server that is in the Stopped state.
//
// @param request - StartInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartInstanceResponse
func (client *Client) StartInstanceWithOptions(request *StartInstanceRequest, runtime *dara.RuntimeOptions) (_result *StartInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Starts a simple application server.
//
// Description:
//
// You can call this operation to start a simple application server that is in the Stopped state.
//
// @param request - StartInstanceRequest
//
// @return StartInstanceResponse
func (client *Client) StartInstance(request *StartInstanceRequest) (_result *StartInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.StartInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts simple application servers.
//
// @param request - StartInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartInstancesResponse
func (client *Client) StartInstancesWithOptions(request *StartInstancesRequest, runtime *dara.RuntimeOptions) (_result *StartInstancesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartInstances"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Starts simple application servers.
//
// @param request - StartInstancesRequest
//
// @return StartInstancesResponse
func (client *Client) StartInstances(request *StartInstancesRequest) (_result *StartInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.StartInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a session for a simple application server.
//
// @param request - StartTerminalSessionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartTerminalSessionResponse
func (client *Client) StartTerminalSessionWithOptions(request *StartTerminalSessionRequest, runtime *dara.RuntimeOptions) (_result *StartTerminalSessionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartTerminalSession"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a session for a simple application server.
//
// @param request - StartTerminalSessionRequest
//
// @return StartTerminalSessionResponse
func (client *Client) StartTerminalSession(request *StartTerminalSessionRequest) (_result *StartTerminalSessionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.StartTerminalSessionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a Simple Database Service instance.
//
// Description:
//
// You can call this operation to stop a Simple Database Service instance that is in the Running state. After the instance is stopped, you cannot log on to or access the instance.
//
// @param request - StopDatabaseInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopDatabaseInstanceResponse
func (client *Client) StopDatabaseInstanceWithOptions(request *StopDatabaseInstanceRequest, runtime *dara.RuntimeOptions) (_result *StopDatabaseInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DatabaseInstanceId) {
		query["DatabaseInstanceId"] = request.DatabaseInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopDatabaseInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Stops a Simple Database Service instance.
//
// Description:
//
// You can call this operation to stop a Simple Database Service instance that is in the Running state. After the instance is stopped, you cannot log on to or access the instance.
//
// @param request - StopDatabaseInstanceRequest
//
// @return StopDatabaseInstanceResponse
func (client *Client) StopDatabaseInstance(request *StopDatabaseInstanceRequest) (_result *StopDatabaseInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.StopDatabaseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a simple application server.
//
// Description:
//
// You can stop a simple application server that you do not use for the time being.
//
// >  Stopping a simple application server may interrupt your business. We recommend that you perform this operation during off-peak hours.
//
// @param request - StopInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopInstanceResponse
func (client *Client) StopInstanceWithOptions(request *StopInstanceRequest, runtime *dara.RuntimeOptions) (_result *StopInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Stops a simple application server.
//
// Description:
//
// You can stop a simple application server that you do not use for the time being.
//
// >  Stopping a simple application server may interrupt your business. We recommend that you perform this operation during off-peak hours.
//
// @param request - StopInstanceRequest
//
// @return StopInstanceResponse
func (client *Client) StopInstance(request *StopInstanceRequest) (_result *StopInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.StopInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops simple application servers.
//
// @param request - StopInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopInstancesResponse
func (client *Client) StopInstancesWithOptions(request *StopInstancesRequest, runtime *dara.RuntimeOptions) (_result *StopInstancesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ForceStop) {
		query["ForceStop"] = request.ForceStop
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopInstances"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Stops simple application servers.
//
// @param request - StopInstancesRequest
//
// @return StopInstancesResponse
func (client *Client) StopInstances(request *StopInstancesRequest) (_result *StopInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.StopInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds tags to simple application servers, snapshots, custom images, commands, firewall rules, and disks to facilitate the viewing and management of the preceding resources.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *dara.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("TagResources"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds tags to simple application servers, snapshots, custom images, commands, firewall rules, and disks to facilitate the viewing and management of the preceding resources.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds and deletes tags from specified lightweight resources, such as instances, snapshots, disks, images, commands, and firewall rules.
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *dara.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.All) {
		query["All"] = request.All
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.TagKey) {
		query["TagKey"] = request.TagKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UntagResources"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unbinds and deletes tags from specified lightweight resources, such as instances, snapshots, disks, images, commands, and firewall rules.
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifys the parameter of a command.
//
// @param request - UpdateCommandAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCommandAttributeResponse
func (client *Client) UpdateCommandAttributeWithOptions(request *UpdateCommandAttributeRequest, runtime *dara.RuntimeOptions) (_result *UpdateCommandAttributeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CommandId) {
		query["CommandId"] = request.CommandId
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Timeout) {
		query["Timeout"] = request.Timeout
	}

	if !dara.IsNil(request.WorkingDir) {
		query["WorkingDir"] = request.WorkingDir
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCommandAttribute"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifys the parameter of a command.
//
// @param request - UpdateCommandAttributeRequest
//
// @return UpdateCommandAttributeResponse
func (client *Client) UpdateCommandAttribute(request *UpdateCommandAttributeRequest) (_result *UpdateCommandAttributeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpdateCommandAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the remarks for the data disk that is attached to a simple application server.
//
// @param request - UpdateDiskAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDiskAttributeResponse
func (client *Client) UpdateDiskAttributeWithOptions(request *UpdateDiskAttributeRequest, runtime *dara.RuntimeOptions) (_result *UpdateDiskAttributeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DiskId) {
		query["DiskId"] = request.DiskId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateDiskAttribute"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the remarks for the data disk that is attached to a simple application server.
//
// @param request - UpdateDiskAttributeRequest
//
// @return UpdateDiskAttributeResponse
func (client *Client) UpdateDiskAttribute(request *UpdateDiskAttributeRequest) (_result *UpdateDiskAttributeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpdateDiskAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information of a simple application server, including the server name and the password that you use to log on to the server.
//
// Description:
//
// ## [](#)Usage notes
//
// After you change the password of a simple application server, you must restart the server by calling the [RebootInstance](https://help.aliyun.com/document_detail/190443.html) operation for the new password to take effect.
//
// @param request - UpdateInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateInstanceAttributeResponse
func (client *Client) UpdateInstanceAttributeWithOptions(request *UpdateInstanceAttributeRequest, runtime *dara.RuntimeOptions) (_result *UpdateInstanceAttributeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.Password) {
		query["Password"] = request.Password
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateInstanceAttribute"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information of a simple application server, including the server name and the password that you use to log on to the server.
//
// Description:
//
// ## [](#)Usage notes
//
// After you change the password of a simple application server, you must restart the server by calling the [RebootInstance](https://help.aliyun.com/document_detail/190443.html) operation for the new password to take effect.
//
// @param request - UpdateInstanceAttributeRequest
//
// @return UpdateInstanceAttributeResponse
func (client *Client) UpdateInstanceAttribute(request *UpdateInstanceAttributeRequest) (_result *UpdateInstanceAttributeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpdateInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the remarks of a snapshot of a simple application server.
//
// @param request - UpdateSnapshotAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSnapshotAttributeResponse
func (client *Client) UpdateSnapshotAttributeWithOptions(request *UpdateSnapshotAttributeRequest, runtime *dara.RuntimeOptions) (_result *UpdateSnapshotAttributeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SnapshotId) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateSnapshotAttribute"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the remarks of a snapshot of a simple application server.
//
// @param request - UpdateSnapshotAttributeRequest
//
// @return UpdateSnapshotAttributeResponse
func (client *Client) UpdateSnapshotAttribute(request *UpdateSnapshotAttributeRequest) (_result *UpdateSnapshotAttributeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpdateSnapshotAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Upgrades the plan for a simple application server.
//
// Description:
//
//	  The plan of a simple application server can only be upgraded. For more information about plans, see [Billable items](https://help.aliyun.com/document_detail/58623.html).
//
//		- Before you call this operation, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the upgrade fails.
//
// @param request - UpgradeInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeInstanceResponse
func (client *Client) UpgradeInstanceWithOptions(request *UpgradeInstanceRequest, runtime *dara.RuntimeOptions) (_result *UpgradeInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.PlanId) {
		query["PlanId"] = request.PlanId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpgradeInstance"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Upgrades the plan for a simple application server.
//
// Description:
//
//	  The plan of a simple application server can only be upgraded. For more information about plans, see [Billable items](https://help.aliyun.com/document_detail/58623.html).
//
//		- Before you call this operation, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the upgrade fails.
//
// @param request - UpgradeInstanceRequest
//
// @return UpgradeInstanceResponse
func (client *Client) UpgradeInstance(request *UpgradeInstanceRequest) (_result *UpgradeInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpgradeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Imports a key pair for a simple application server.
//
// @param request - UploadInstanceKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadInstanceKeyPairResponse
func (client *Client) UploadInstanceKeyPairWithOptions(request *UploadInstanceKeyPairRequest, runtime *dara.RuntimeOptions) (_result *UploadInstanceKeyPairResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.KeyPairName) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !dara.IsNil(request.PublicKey) {
		query["PublicKey"] = request.PublicKey
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UploadInstanceKeyPair"),
		Version:     dara.String("2020-06-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Imports a key pair for a simple application server.
//
// @param request - UploadInstanceKeyPairRequest
//
// @return UploadInstanceKeyPairResponse
func (client *Client) UploadInstanceKeyPair(request *UploadInstanceKeyPairRequest) (_result *UploadInstanceKeyPairResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UploadInstanceKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
