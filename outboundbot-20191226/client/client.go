// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type ApplyNumberDistrictInfoParsingResultRequest struct {
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s ApplyNumberDistrictInfoParsingResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyNumberDistrictInfoParsingResultRequest) GoString() string {
	return s.String()
}

func (s *ApplyNumberDistrictInfoParsingResultRequest) SetVersionId(v string) *ApplyNumberDistrictInfoParsingResultRequest {
	s.VersionId = &v
	return s
}

type ApplyNumberDistrictInfoParsingResultResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ApplyNumberDistrictInfoParsingResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyNumberDistrictInfoParsingResultResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyNumberDistrictInfoParsingResultResponseBody) SetCode(v string) *ApplyNumberDistrictInfoParsingResultResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyNumberDistrictInfoParsingResultResponseBody) SetHttpStatusCode(v int32) *ApplyNumberDistrictInfoParsingResultResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ApplyNumberDistrictInfoParsingResultResponseBody) SetMessage(v string) *ApplyNumberDistrictInfoParsingResultResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyNumberDistrictInfoParsingResultResponseBody) SetRequestId(v string) *ApplyNumberDistrictInfoParsingResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyNumberDistrictInfoParsingResultResponseBody) SetSuccess(v bool) *ApplyNumberDistrictInfoParsingResultResponseBody {
	s.Success = &v
	return s
}

type ApplyNumberDistrictInfoParsingResultResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyNumberDistrictInfoParsingResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyNumberDistrictInfoParsingResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyNumberDistrictInfoParsingResultResponse) GoString() string {
	return s.String()
}

func (s *ApplyNumberDistrictInfoParsingResultResponse) SetHeaders(v map[string]*string) *ApplyNumberDistrictInfoParsingResultResponse {
	s.Headers = v
	return s
}

func (s *ApplyNumberDistrictInfoParsingResultResponse) SetStatusCode(v int32) *ApplyNumberDistrictInfoParsingResultResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyNumberDistrictInfoParsingResultResponse) SetBody(v *ApplyNumberDistrictInfoParsingResultResponseBody) *ApplyNumberDistrictInfoParsingResultResponse {
	s.Body = v
	return s
}

type AssignJobsRequest struct {
	CallingNumber        []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	InstanceId           *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IsAsynchrony         *bool     `json:"IsAsynchrony,omitempty" xml:"IsAsynchrony,omitempty"`
	JobDataParsingTaskId *string   `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
	JobGroupId           *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobsJson             []*string `json:"JobsJson,omitempty" xml:"JobsJson,omitempty" type:"Repeated"`
	RosterType           *string   `json:"RosterType,omitempty" xml:"RosterType,omitempty"`
	StrategyJson         *string   `json:"StrategyJson,omitempty" xml:"StrategyJson,omitempty"`
}

func (s AssignJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignJobsRequest) GoString() string {
	return s.String()
}

func (s *AssignJobsRequest) SetCallingNumber(v []*string) *AssignJobsRequest {
	s.CallingNumber = v
	return s
}

func (s *AssignJobsRequest) SetInstanceId(v string) *AssignJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *AssignJobsRequest) SetIsAsynchrony(v bool) *AssignJobsRequest {
	s.IsAsynchrony = &v
	return s
}

func (s *AssignJobsRequest) SetJobDataParsingTaskId(v string) *AssignJobsRequest {
	s.JobDataParsingTaskId = &v
	return s
}

func (s *AssignJobsRequest) SetJobGroupId(v string) *AssignJobsRequest {
	s.JobGroupId = &v
	return s
}

func (s *AssignJobsRequest) SetJobsJson(v []*string) *AssignJobsRequest {
	s.JobsJson = v
	return s
}

func (s *AssignJobsRequest) SetRosterType(v string) *AssignJobsRequest {
	s.RosterType = &v
	return s
}

func (s *AssignJobsRequest) SetStrategyJson(v string) *AssignJobsRequest {
	s.StrategyJson = &v
	return s
}

type AssignJobsResponseBody struct {
	Code           *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroupId     *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobsId         []*string `json:"JobsId,omitempty" xml:"JobsId,omitempty" type:"Repeated"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AssignJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssignJobsResponseBody) GoString() string {
	return s.String()
}

func (s *AssignJobsResponseBody) SetCode(v string) *AssignJobsResponseBody {
	s.Code = &v
	return s
}

func (s *AssignJobsResponseBody) SetHttpStatusCode(v int32) *AssignJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AssignJobsResponseBody) SetJobGroupId(v string) *AssignJobsResponseBody {
	s.JobGroupId = &v
	return s
}

func (s *AssignJobsResponseBody) SetJobsId(v []*string) *AssignJobsResponseBody {
	s.JobsId = v
	return s
}

func (s *AssignJobsResponseBody) SetMessage(v string) *AssignJobsResponseBody {
	s.Message = &v
	return s
}

func (s *AssignJobsResponseBody) SetRequestId(v string) *AssignJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AssignJobsResponseBody) SetSuccess(v bool) *AssignJobsResponseBody {
	s.Success = &v
	return s
}

type AssignJobsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssignJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssignJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignJobsResponse) GoString() string {
	return s.String()
}

func (s *AssignJobsResponse) SetHeaders(v map[string]*string) *AssignJobsResponse {
	s.Headers = v
	return s
}

func (s *AssignJobsResponse) SetStatusCode(v int32) *AssignJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *AssignJobsResponse) SetBody(v *AssignJobsResponseBody) *AssignJobsResponse {
	s.Body = v
	return s
}

type CancelJobsRequest struct {
	All            *bool     `json:"All,omitempty" xml:"All,omitempty"`
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId     *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId          []*string `json:"JobId,omitempty" xml:"JobId,omitempty" type:"Repeated"`
	JobReferenceId []*string `json:"JobReferenceId,omitempty" xml:"JobReferenceId,omitempty" type:"Repeated"`
	ScenarioId     *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
}

func (s CancelJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelJobsRequest) GoString() string {
	return s.String()
}

func (s *CancelJobsRequest) SetAll(v bool) *CancelJobsRequest {
	s.All = &v
	return s
}

func (s *CancelJobsRequest) SetInstanceId(v string) *CancelJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *CancelJobsRequest) SetJobGroupId(v string) *CancelJobsRequest {
	s.JobGroupId = &v
	return s
}

func (s *CancelJobsRequest) SetJobId(v []*string) *CancelJobsRequest {
	s.JobId = v
	return s
}

func (s *CancelJobsRequest) SetJobReferenceId(v []*string) *CancelJobsRequest {
	s.JobReferenceId = v
	return s
}

func (s *CancelJobsRequest) SetScenarioId(v string) *CancelJobsRequest {
	s.ScenarioId = &v
	return s
}

type CancelJobsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CancelJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelJobsResponseBody) GoString() string {
	return s.String()
}

func (s *CancelJobsResponseBody) SetCode(v string) *CancelJobsResponseBody {
	s.Code = &v
	return s
}

func (s *CancelJobsResponseBody) SetHttpStatusCode(v int32) *CancelJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CancelJobsResponseBody) SetMessage(v string) *CancelJobsResponseBody {
	s.Message = &v
	return s
}

func (s *CancelJobsResponseBody) SetRequestId(v string) *CancelJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelJobsResponseBody) SetSuccess(v bool) *CancelJobsResponseBody {
	s.Success = &v
	return s
}

type CancelJobsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelJobsResponse) GoString() string {
	return s.String()
}

func (s *CancelJobsResponse) SetHeaders(v map[string]*string) *CancelJobsResponse {
	s.Headers = v
	return s
}

func (s *CancelJobsResponse) SetStatusCode(v int32) *CancelJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelJobsResponse) SetBody(v *CancelJobsResponseBody) *CancelJobsResponse {
	s.Body = v
	return s
}

type ChangeResourceGroupRequest struct {
	NewResourceGroupId *string `json:"NewResourceGroupId,omitempty" xml:"NewResourceGroupId,omitempty"`
	ResourceId         *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s ChangeResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ChangeResourceGroupRequest) SetNewResourceGroupId(v string) *ChangeResourceGroupRequest {
	s.NewResourceGroupId = &v
	return s
}

func (s *ChangeResourceGroupRequest) SetResourceId(v string) *ChangeResourceGroupRequest {
	s.ResourceId = &v
	return s
}

type ChangeResourceGroupResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ChangeResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeResourceGroupResponseBody) SetCode(v string) *ChangeResourceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeResourceGroupResponseBody) SetHttpStatusCode(v int32) *ChangeResourceGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ChangeResourceGroupResponseBody) SetMessage(v string) *ChangeResourceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeResourceGroupResponseBody) SetRequestId(v string) *ChangeResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ChangeResourceGroupResponseBody) SetSuccess(v bool) *ChangeResourceGroupResponseBody {
	s.Success = &v
	return s
}

type ChangeResourceGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ChangeResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ChangeResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ChangeResourceGroupResponse) SetHeaders(v map[string]*string) *ChangeResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ChangeResourceGroupResponse) SetStatusCode(v int32) *ChangeResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeResourceGroupResponse) SetBody(v *ChangeResourceGroupResponseBody) *ChangeResourceGroupResponse {
	s.Body = v
	return s
}

type CreateBatchJobsRequest struct {
	BatchJobDescription *string   `json:"BatchJobDescription,omitempty" xml:"BatchJobDescription,omitempty"`
	BatchJobName        *string   `json:"BatchJobName,omitempty" xml:"BatchJobName,omitempty"`
	CallingNumber       []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	InstanceId          *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobFilePath         *string   `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
	ScenarioId          *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptId            *string   `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	StrategyJson        *string   `json:"StrategyJson,omitempty" xml:"StrategyJson,omitempty"`
	Submitted           *bool     `json:"Submitted,omitempty" xml:"Submitted,omitempty"`
}

func (s CreateBatchJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchJobsRequest) GoString() string {
	return s.String()
}

func (s *CreateBatchJobsRequest) SetBatchJobDescription(v string) *CreateBatchJobsRequest {
	s.BatchJobDescription = &v
	return s
}

func (s *CreateBatchJobsRequest) SetBatchJobName(v string) *CreateBatchJobsRequest {
	s.BatchJobName = &v
	return s
}

func (s *CreateBatchJobsRequest) SetCallingNumber(v []*string) *CreateBatchJobsRequest {
	s.CallingNumber = v
	return s
}

func (s *CreateBatchJobsRequest) SetInstanceId(v string) *CreateBatchJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateBatchJobsRequest) SetJobFilePath(v string) *CreateBatchJobsRequest {
	s.JobFilePath = &v
	return s
}

func (s *CreateBatchJobsRequest) SetScenarioId(v string) *CreateBatchJobsRequest {
	s.ScenarioId = &v
	return s
}

func (s *CreateBatchJobsRequest) SetScriptId(v string) *CreateBatchJobsRequest {
	s.ScriptId = &v
	return s
}

func (s *CreateBatchJobsRequest) SetStrategyJson(v string) *CreateBatchJobsRequest {
	s.StrategyJson = &v
	return s
}

func (s *CreateBatchJobsRequest) SetSubmitted(v bool) *CreateBatchJobsRequest {
	s.Submitted = &v
	return s
}

type CreateBatchJobsResponseBody struct {
	BatchJob       *CreateBatchJobsResponseBodyBatchJob `json:"BatchJob,omitempty" xml:"BatchJob,omitempty" type:"Struct"`
	Code           *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateBatchJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchJobsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBatchJobsResponseBody) SetBatchJob(v *CreateBatchJobsResponseBodyBatchJob) *CreateBatchJobsResponseBody {
	s.BatchJob = v
	return s
}

func (s *CreateBatchJobsResponseBody) SetCode(v string) *CreateBatchJobsResponseBody {
	s.Code = &v
	return s
}

func (s *CreateBatchJobsResponseBody) SetHttpStatusCode(v int32) *CreateBatchJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateBatchJobsResponseBody) SetMessage(v string) *CreateBatchJobsResponseBody {
	s.Message = &v
	return s
}

func (s *CreateBatchJobsResponseBody) SetRequestId(v string) *CreateBatchJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBatchJobsResponseBody) SetSuccess(v bool) *CreateBatchJobsResponseBody {
	s.Success = &v
	return s
}

type CreateBatchJobsResponseBodyBatchJob struct {
	BatchJobId          *string                                      `json:"BatchJobId,omitempty" xml:"BatchJobId,omitempty"`
	CallingNumbers      []*string                                    `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	CreationTime        *int64                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	JobFilePath         *string                                      `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
	JobGroupDescription *string                                      `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupName        *string                                      `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	ScenarioId          *string                                      `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Strategy            *CreateBatchJobsResponseBodyBatchJobStrategy `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
}

func (s CreateBatchJobsResponseBodyBatchJob) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchJobsResponseBodyBatchJob) GoString() string {
	return s.String()
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetBatchJobId(v string) *CreateBatchJobsResponseBodyBatchJob {
	s.BatchJobId = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetCallingNumbers(v []*string) *CreateBatchJobsResponseBodyBatchJob {
	s.CallingNumbers = v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetCreationTime(v int64) *CreateBatchJobsResponseBodyBatchJob {
	s.CreationTime = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetJobFilePath(v string) *CreateBatchJobsResponseBodyBatchJob {
	s.JobFilePath = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetJobGroupDescription(v string) *CreateBatchJobsResponseBodyBatchJob {
	s.JobGroupDescription = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetJobGroupName(v string) *CreateBatchJobsResponseBodyBatchJob {
	s.JobGroupName = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetScenarioId(v string) *CreateBatchJobsResponseBodyBatchJob {
	s.ScenarioId = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJob) SetStrategy(v *CreateBatchJobsResponseBodyBatchJobStrategy) *CreateBatchJobsResponseBodyBatchJob {
	s.Strategy = v
	return s
}

type CreateBatchJobsResponseBodyBatchJobStrategy struct {
	Customized          *string                                                   `json:"Customized,omitempty" xml:"Customized,omitempty"`
	EndTime             *int64                                                    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FollowUpStrategy    *string                                                   `json:"FollowUpStrategy,omitempty" xml:"FollowUpStrategy,omitempty"`
	IsTemplate          *bool                                                     `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	MaxAttemptsPerDay   *int32                                                    `json:"MaxAttemptsPerDay,omitempty" xml:"MaxAttemptsPerDay,omitempty"`
	MinAttemptInterval  *int32                                                    `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	RepeatBy            *string                                                   `json:"RepeatBy,omitempty" xml:"RepeatBy,omitempty"`
	RepeatDays          []*string                                                 `json:"RepeatDays,omitempty" xml:"RepeatDays,omitempty" type:"Repeated"`
	RoutingStrategy     *string                                                   `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	StartTime           *int64                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StrategyDescription *string                                                   `json:"StrategyDescription,omitempty" xml:"StrategyDescription,omitempty"`
	StrategyId          *string                                                   `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	StrategyName        *string                                                   `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	Type                *string                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkingTime         []*CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime `json:"WorkingTime,omitempty" xml:"WorkingTime,omitempty" type:"Repeated"`
}

func (s CreateBatchJobsResponseBodyBatchJobStrategy) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchJobsResponseBodyBatchJobStrategy) GoString() string {
	return s.String()
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetCustomized(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.Customized = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetEndTime(v int64) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.EndTime = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetFollowUpStrategy(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.FollowUpStrategy = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetIsTemplate(v bool) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.IsTemplate = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetMaxAttemptsPerDay(v int32) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.MaxAttemptsPerDay = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetMinAttemptInterval(v int32) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.MinAttemptInterval = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetRepeatBy(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.RepeatBy = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetRepeatDays(v []*string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.RepeatDays = v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetRoutingStrategy(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.RoutingStrategy = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetStartTime(v int64) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.StartTime = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetStrategyDescription(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.StrategyDescription = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetStrategyId(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.StrategyId = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetStrategyName(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.StrategyName = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetType(v string) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.Type = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategy) SetWorkingTime(v []*CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime) *CreateBatchJobsResponseBodyBatchJobStrategy {
	s.WorkingTime = v
	return s
}

type CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime struct {
	BeginTime *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime) GoString() string {
	return s.String()
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime) SetBeginTime(v string) *CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime {
	s.BeginTime = &v
	return s
}

func (s *CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime) SetEndTime(v string) *CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime {
	s.EndTime = &v
	return s
}

type CreateBatchJobsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateBatchJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBatchJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchJobsResponse) GoString() string {
	return s.String()
}

func (s *CreateBatchJobsResponse) SetHeaders(v map[string]*string) *CreateBatchJobsResponse {
	s.Headers = v
	return s
}

func (s *CreateBatchJobsResponse) SetStatusCode(v int32) *CreateBatchJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBatchJobsResponse) SetBody(v *CreateBatchJobsResponseBody) *CreateBatchJobsResponse {
	s.Body = v
	return s
}

type CreateBatchRepeatJobRequest struct {
	CallingNumber      []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	Description        *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	FilterStatus       *string   `json:"FilterStatus,omitempty" xml:"FilterStatus,omitempty"`
	InstanceId         *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MinConcurrency     *int64    `json:"MinConcurrency,omitempty" xml:"MinConcurrency,omitempty"`
	Name               *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority           *string   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RecallStrategyJson *string   `json:"RecallStrategyJson,omitempty" xml:"RecallStrategyJson,omitempty"`
	RingingDuration    *int64    `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
	ScriptId           *string   `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	SourceGroupId      *string   `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	StrategyJson       *string   `json:"StrategyJson,omitempty" xml:"StrategyJson,omitempty"`
}

func (s CreateBatchRepeatJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchRepeatJobRequest) GoString() string {
	return s.String()
}

func (s *CreateBatchRepeatJobRequest) SetCallingNumber(v []*string) *CreateBatchRepeatJobRequest {
	s.CallingNumber = v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetDescription(v string) *CreateBatchRepeatJobRequest {
	s.Description = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetFilterStatus(v string) *CreateBatchRepeatJobRequest {
	s.FilterStatus = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetInstanceId(v string) *CreateBatchRepeatJobRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetMinConcurrency(v int64) *CreateBatchRepeatJobRequest {
	s.MinConcurrency = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetName(v string) *CreateBatchRepeatJobRequest {
	s.Name = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetPriority(v string) *CreateBatchRepeatJobRequest {
	s.Priority = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetRecallStrategyJson(v string) *CreateBatchRepeatJobRequest {
	s.RecallStrategyJson = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetRingingDuration(v int64) *CreateBatchRepeatJobRequest {
	s.RingingDuration = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetScriptId(v string) *CreateBatchRepeatJobRequest {
	s.ScriptId = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetSourceGroupId(v string) *CreateBatchRepeatJobRequest {
	s.SourceGroupId = &v
	return s
}

func (s *CreateBatchRepeatJobRequest) SetStrategyJson(v string) *CreateBatchRepeatJobRequest {
	s.StrategyJson = &v
	return s
}

type CreateBatchRepeatJobResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroup       *CreateBatchRepeatJobResponseBodyJobGroup `json:"JobGroup,omitempty" xml:"JobGroup,omitempty" type:"Struct"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateBatchRepeatJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchRepeatJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBatchRepeatJobResponseBody) SetCode(v string) *CreateBatchRepeatJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateBatchRepeatJobResponseBody) SetHttpStatusCode(v int32) *CreateBatchRepeatJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateBatchRepeatJobResponseBody) SetJobGroup(v *CreateBatchRepeatJobResponseBodyJobGroup) *CreateBatchRepeatJobResponseBody {
	s.JobGroup = v
	return s
}

func (s *CreateBatchRepeatJobResponseBody) SetMessage(v string) *CreateBatchRepeatJobResponseBody {
	s.Message = &v
	return s
}

func (s *CreateBatchRepeatJobResponseBody) SetRequestId(v string) *CreateBatchRepeatJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBatchRepeatJobResponseBody) SetSuccess(v bool) *CreateBatchRepeatJobResponseBody {
	s.Success = &v
	return s
}

type CreateBatchRepeatJobResponseBodyJobGroup struct {
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	MinConcurrency  *int64  `json:"MinConcurrency,omitempty" xml:"MinConcurrency,omitempty"`
	Priority        *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RingingDuration *int64  `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
}

func (s CreateBatchRepeatJobResponseBodyJobGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchRepeatJobResponseBodyJobGroup) GoString() string {
	return s.String()
}

func (s *CreateBatchRepeatJobResponseBodyJobGroup) SetId(v string) *CreateBatchRepeatJobResponseBodyJobGroup {
	s.Id = &v
	return s
}

func (s *CreateBatchRepeatJobResponseBodyJobGroup) SetMinConcurrency(v int64) *CreateBatchRepeatJobResponseBodyJobGroup {
	s.MinConcurrency = &v
	return s
}

func (s *CreateBatchRepeatJobResponseBodyJobGroup) SetPriority(v string) *CreateBatchRepeatJobResponseBodyJobGroup {
	s.Priority = &v
	return s
}

func (s *CreateBatchRepeatJobResponseBodyJobGroup) SetRingingDuration(v int64) *CreateBatchRepeatJobResponseBodyJobGroup {
	s.RingingDuration = &v
	return s
}

type CreateBatchRepeatJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateBatchRepeatJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBatchRepeatJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBatchRepeatJobResponse) GoString() string {
	return s.String()
}

func (s *CreateBatchRepeatJobResponse) SetHeaders(v map[string]*string) *CreateBatchRepeatJobResponse {
	s.Headers = v
	return s
}

func (s *CreateBatchRepeatJobResponse) SetStatusCode(v int32) *CreateBatchRepeatJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBatchRepeatJobResponse) SetBody(v *CreateBatchRepeatJobResponseBody) *CreateBatchRepeatJobResponse {
	s.Body = v
	return s
}

type CreateDialogueFlowRequest struct {
	DialogueFlowType *string `json:"DialogueFlowType,omitempty" xml:"DialogueFlowType,omitempty"`
	DialogueName     *string `json:"DialogueName,omitempty" xml:"DialogueName,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId         *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s CreateDialogueFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDialogueFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateDialogueFlowRequest) SetDialogueFlowType(v string) *CreateDialogueFlowRequest {
	s.DialogueFlowType = &v
	return s
}

func (s *CreateDialogueFlowRequest) SetDialogueName(v string) *CreateDialogueFlowRequest {
	s.DialogueName = &v
	return s
}

func (s *CreateDialogueFlowRequest) SetInstanceId(v string) *CreateDialogueFlowRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDialogueFlowRequest) SetScriptId(v string) *CreateDialogueFlowRequest {
	s.ScriptId = &v
	return s
}

type CreateDialogueFlowResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DialogueFlowId *string `json:"DialogueFlowId,omitempty" xml:"DialogueFlowId,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDialogueFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDialogueFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDialogueFlowResponseBody) SetCode(v string) *CreateDialogueFlowResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDialogueFlowResponseBody) SetDialogueFlowId(v string) *CreateDialogueFlowResponseBody {
	s.DialogueFlowId = &v
	return s
}

func (s *CreateDialogueFlowResponseBody) SetHttpStatusCode(v int32) *CreateDialogueFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDialogueFlowResponseBody) SetMessage(v string) *CreateDialogueFlowResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDialogueFlowResponseBody) SetRequestId(v string) *CreateDialogueFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDialogueFlowResponseBody) SetSuccess(v bool) *CreateDialogueFlowResponseBody {
	s.Success = &v
	return s
}

type CreateDialogueFlowResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDialogueFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDialogueFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDialogueFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateDialogueFlowResponse) SetHeaders(v map[string]*string) *CreateDialogueFlowResponse {
	s.Headers = v
	return s
}

func (s *CreateDialogueFlowResponse) SetStatusCode(v int32) *CreateDialogueFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDialogueFlowResponse) SetBody(v *CreateDialogueFlowResponseBody) *CreateDialogueFlowResponse {
	s.Body = v
	return s
}

type CreateDownloadUrlRequest struct {
	DownloadTaskId *string `json:"DownloadTaskId,omitempty" xml:"DownloadTaskId,omitempty"`
	FileId         *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s CreateDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *CreateDownloadUrlRequest) SetDownloadTaskId(v string) *CreateDownloadUrlRequest {
	s.DownloadTaskId = &v
	return s
}

func (s *CreateDownloadUrlRequest) SetFileId(v string) *CreateDownloadUrlRequest {
	s.FileId = &v
	return s
}

type CreateDownloadUrlResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	FileHttpUrl    *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDownloadUrlResponseBody) SetCode(v string) *CreateDownloadUrlResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDownloadUrlResponseBody) SetFileHttpUrl(v string) *CreateDownloadUrlResponseBody {
	s.FileHttpUrl = &v
	return s
}

func (s *CreateDownloadUrlResponseBody) SetHttpStatusCode(v int32) *CreateDownloadUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDownloadUrlResponseBody) SetMessage(v string) *CreateDownloadUrlResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDownloadUrlResponseBody) SetRequestId(v string) *CreateDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDownloadUrlResponseBody) SetSuccess(v bool) *CreateDownloadUrlResponseBody {
	s.Success = &v
	return s
}

type CreateDownloadUrlResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *CreateDownloadUrlResponse) SetHeaders(v map[string]*string) *CreateDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *CreateDownloadUrlResponse) SetStatusCode(v int32) *CreateDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDownloadUrlResponse) SetBody(v *CreateDownloadUrlResponseBody) *CreateDownloadUrlResponse {
	s.Body = v
	return s
}

type CreateGlobalQuestionRequest struct {
	Answers            *string `json:"Answers,omitempty" xml:"Answers,omitempty"`
	GlobalQuestionName *string `json:"GlobalQuestionName,omitempty" xml:"GlobalQuestionName,omitempty"`
	GlobalQuestionType *string `json:"GlobalQuestionType,omitempty" xml:"GlobalQuestionType,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Questions          *string `json:"Questions,omitempty" xml:"Questions,omitempty"`
	ScriptId           *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s CreateGlobalQuestionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGlobalQuestionRequest) GoString() string {
	return s.String()
}

func (s *CreateGlobalQuestionRequest) SetAnswers(v string) *CreateGlobalQuestionRequest {
	s.Answers = &v
	return s
}

func (s *CreateGlobalQuestionRequest) SetGlobalQuestionName(v string) *CreateGlobalQuestionRequest {
	s.GlobalQuestionName = &v
	return s
}

func (s *CreateGlobalQuestionRequest) SetGlobalQuestionType(v string) *CreateGlobalQuestionRequest {
	s.GlobalQuestionType = &v
	return s
}

func (s *CreateGlobalQuestionRequest) SetInstanceId(v string) *CreateGlobalQuestionRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateGlobalQuestionRequest) SetQuestions(v string) *CreateGlobalQuestionRequest {
	s.Questions = &v
	return s
}

func (s *CreateGlobalQuestionRequest) SetScriptId(v string) *CreateGlobalQuestionRequest {
	s.ScriptId = &v
	return s
}

type CreateGlobalQuestionResponseBody struct {
	Code             *string `json:"Code,omitempty" xml:"Code,omitempty"`
	GlobalQuestionId *string `json:"GlobalQuestionId,omitempty" xml:"GlobalQuestionId,omitempty"`
	HttpStatusCode   *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message          *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateGlobalQuestionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGlobalQuestionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGlobalQuestionResponseBody) SetCode(v string) *CreateGlobalQuestionResponseBody {
	s.Code = &v
	return s
}

func (s *CreateGlobalQuestionResponseBody) SetGlobalQuestionId(v string) *CreateGlobalQuestionResponseBody {
	s.GlobalQuestionId = &v
	return s
}

func (s *CreateGlobalQuestionResponseBody) SetHttpStatusCode(v int32) *CreateGlobalQuestionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateGlobalQuestionResponseBody) SetMessage(v string) *CreateGlobalQuestionResponseBody {
	s.Message = &v
	return s
}

func (s *CreateGlobalQuestionResponseBody) SetRequestId(v string) *CreateGlobalQuestionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGlobalQuestionResponseBody) SetSuccess(v bool) *CreateGlobalQuestionResponseBody {
	s.Success = &v
	return s
}

type CreateGlobalQuestionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateGlobalQuestionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateGlobalQuestionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGlobalQuestionResponse) GoString() string {
	return s.String()
}

func (s *CreateGlobalQuestionResponse) SetHeaders(v map[string]*string) *CreateGlobalQuestionResponse {
	s.Headers = v
	return s
}

func (s *CreateGlobalQuestionResponse) SetStatusCode(v int32) *CreateGlobalQuestionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGlobalQuestionResponse) SetBody(v *CreateGlobalQuestionResponseBody) *CreateGlobalQuestionResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	CallingNumber             []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	InstanceDescription       *string   `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceName              *string   `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxConcurrentConversation *int32    `json:"MaxConcurrentConversation,omitempty" xml:"MaxConcurrentConversation,omitempty"`
	NluServiceType            *string   `json:"NluServiceType,omitempty" xml:"NluServiceType,omitempty"`
	ResourceGroupId           *string   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetCallingNumber(v []*string) *CreateInstanceRequest {
	s.CallingNumber = v
	return s
}

func (s *CreateInstanceRequest) SetInstanceDescription(v string) *CreateInstanceRequest {
	s.InstanceDescription = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetMaxConcurrentConversation(v int32) *CreateInstanceRequest {
	s.MaxConcurrentConversation = &v
	return s
}

func (s *CreateInstanceRequest) SetNluServiceType(v string) *CreateInstanceRequest {
	s.NluServiceType = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceGroupId(v string) *CreateInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateInstanceResponseBody struct {
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Instance       *CreateInstanceResponseBodyInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetCode(v string) *CreateInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstanceResponseBody) SetHttpStatusCode(v int32) *CreateInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateInstanceResponseBody) SetInstance(v *CreateInstanceResponseBodyInstance) *CreateInstanceResponseBody {
	s.Instance = v
	return s
}

func (s *CreateInstanceResponseBody) SetMessage(v string) *CreateInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetSuccess(v bool) *CreateInstanceResponseBody {
	s.Success = &v
	return s
}

type CreateInstanceResponseBodyInstance struct {
	CreationTime              *int64  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CreatorId                 *int64  `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	CreatorName               *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	InstanceDescription       *string `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId                *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName              *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxConcurrentConversation *int32  `json:"MaxConcurrentConversation,omitempty" xml:"MaxConcurrentConversation,omitempty"`
	OwnerName                 *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	ResourceGroupId           *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateInstanceResponseBodyInstance) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstance) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstance) SetCreationTime(v int64) *CreateInstanceResponseBodyInstance {
	s.CreationTime = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetCreatorId(v int64) *CreateInstanceResponseBodyInstance {
	s.CreatorId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetCreatorName(v string) *CreateInstanceResponseBodyInstance {
	s.CreatorName = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetInstanceDescription(v string) *CreateInstanceResponseBodyInstance {
	s.InstanceDescription = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetInstanceId(v string) *CreateInstanceResponseBodyInstance {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetInstanceName(v string) *CreateInstanceResponseBodyInstance {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetMaxConcurrentConversation(v int32) *CreateInstanceResponseBodyInstance {
	s.MaxConcurrentConversation = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetOwnerName(v string) *CreateInstanceResponseBodyInstance {
	s.OwnerName = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetResourceGroupId(v string) *CreateInstanceResponseBodyInstance {
	s.ResourceGroupId = &v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateInstanceBindNumberRequest struct {
	InstanceList *string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty"`
	Number       *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s CreateInstanceBindNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceBindNumberRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceBindNumberRequest) SetInstanceList(v string) *CreateInstanceBindNumberRequest {
	s.InstanceList = &v
	return s
}

func (s *CreateInstanceBindNumberRequest) SetNumber(v string) *CreateInstanceBindNumberRequest {
	s.Number = &v
	return s
}

type CreateInstanceBindNumberResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *CreateInstanceBindNumberResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateInstanceBindNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceBindNumberResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceBindNumberResponseBody) SetCode(v string) *CreateInstanceBindNumberResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstanceBindNumberResponseBody) SetData(v *CreateInstanceBindNumberResponseBodyData) *CreateInstanceBindNumberResponseBody {
	s.Data = v
	return s
}

func (s *CreateInstanceBindNumberResponseBody) SetHttpStatusCode(v int32) *CreateInstanceBindNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateInstanceBindNumberResponseBody) SetMessage(v string) *CreateInstanceBindNumberResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInstanceBindNumberResponseBody) SetRequestId(v string) *CreateInstanceBindNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceBindNumberResponseBody) SetSuccess(v bool) *CreateInstanceBindNumberResponseBody {
	s.Success = &v
	return s
}

type CreateInstanceBindNumberResponseBodyData struct {
	List []*CreateInstanceBindNumberResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
}

func (s CreateInstanceBindNumberResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceBindNumberResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateInstanceBindNumberResponseBodyData) SetList(v []*CreateInstanceBindNumberResponseBodyDataList) *CreateInstanceBindNumberResponseBodyData {
	s.List = v
	return s
}

type CreateInstanceBindNumberResponseBodyDataList struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Success    *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateInstanceBindNumberResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceBindNumberResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *CreateInstanceBindNumberResponseBodyDataList) SetInstanceId(v string) *CreateInstanceBindNumberResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceBindNumberResponseBodyDataList) SetSuccess(v bool) *CreateInstanceBindNumberResponseBodyDataList {
	s.Success = &v
	return s
}

type CreateInstanceBindNumberResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateInstanceBindNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInstanceBindNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceBindNumberResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceBindNumberResponse) SetHeaders(v map[string]*string) *CreateInstanceBindNumberResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceBindNumberResponse) SetStatusCode(v int32) *CreateInstanceBindNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceBindNumberResponse) SetBody(v *CreateInstanceBindNumberResponseBody) *CreateInstanceBindNumberResponse {
	s.Body = v
	return s
}

type CreateIntentRequest struct {
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntentDescription *string `json:"IntentDescription,omitempty" xml:"IntentDescription,omitempty"`
	IntentName        *string `json:"IntentName,omitempty" xml:"IntentName,omitempty"`
	Keywords          *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	Utterances        *string `json:"Utterances,omitempty" xml:"Utterances,omitempty"`
}

func (s CreateIntentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentRequest) GoString() string {
	return s.String()
}

func (s *CreateIntentRequest) SetInstanceId(v string) *CreateIntentRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateIntentRequest) SetIntentDescription(v string) *CreateIntentRequest {
	s.IntentDescription = &v
	return s
}

func (s *CreateIntentRequest) SetIntentName(v string) *CreateIntentRequest {
	s.IntentName = &v
	return s
}

func (s *CreateIntentRequest) SetKeywords(v string) *CreateIntentRequest {
	s.Keywords = &v
	return s
}

func (s *CreateIntentRequest) SetScriptId(v string) *CreateIntentRequest {
	s.ScriptId = &v
	return s
}

func (s *CreateIntentRequest) SetUtterances(v string) *CreateIntentRequest {
	s.Utterances = &v
	return s
}

type CreateIntentResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	IntentId       *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateIntentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIntentResponseBody) SetCode(v string) *CreateIntentResponseBody {
	s.Code = &v
	return s
}

func (s *CreateIntentResponseBody) SetHttpStatusCode(v int32) *CreateIntentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateIntentResponseBody) SetIntentId(v string) *CreateIntentResponseBody {
	s.IntentId = &v
	return s
}

func (s *CreateIntentResponseBody) SetMessage(v string) *CreateIntentResponseBody {
	s.Message = &v
	return s
}

func (s *CreateIntentResponseBody) SetRequestId(v string) *CreateIntentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateIntentResponseBody) SetSuccess(v bool) *CreateIntentResponseBody {
	s.Success = &v
	return s
}

type CreateIntentResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateIntentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIntentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentResponse) GoString() string {
	return s.String()
}

func (s *CreateIntentResponse) SetHeaders(v map[string]*string) *CreateIntentResponse {
	s.Headers = v
	return s
}

func (s *CreateIntentResponse) SetStatusCode(v int32) *CreateIntentResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIntentResponse) SetBody(v *CreateIntentResponseBody) *CreateIntentResponse {
	s.Body = v
	return s
}

type CreateJobDataParsingTaskRequest struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobFilePath *string `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
}

func (s CreateJobDataParsingTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobDataParsingTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateJobDataParsingTaskRequest) SetInstanceId(v string) *CreateJobDataParsingTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateJobDataParsingTaskRequest) SetJobFilePath(v string) *CreateJobDataParsingTaskRequest {
	s.JobFilePath = &v
	return s
}

type CreateJobDataParsingTaskResponseBody struct {
	Code                 *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode       *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobDataParsingTaskId *string `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
	Message              *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success              *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateJobDataParsingTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJobDataParsingTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJobDataParsingTaskResponseBody) SetCode(v string) *CreateJobDataParsingTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateJobDataParsingTaskResponseBody) SetHttpStatusCode(v int32) *CreateJobDataParsingTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateJobDataParsingTaskResponseBody) SetJobDataParsingTaskId(v string) *CreateJobDataParsingTaskResponseBody {
	s.JobDataParsingTaskId = &v
	return s
}

func (s *CreateJobDataParsingTaskResponseBody) SetMessage(v string) *CreateJobDataParsingTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateJobDataParsingTaskResponseBody) SetRequestId(v string) *CreateJobDataParsingTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJobDataParsingTaskResponseBody) SetSuccess(v bool) *CreateJobDataParsingTaskResponseBody {
	s.Success = &v
	return s
}

type CreateJobDataParsingTaskResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateJobDataParsingTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateJobDataParsingTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobDataParsingTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateJobDataParsingTaskResponse) SetHeaders(v map[string]*string) *CreateJobDataParsingTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateJobDataParsingTaskResponse) SetStatusCode(v int32) *CreateJobDataParsingTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJobDataParsingTaskResponse) SetBody(v *CreateJobDataParsingTaskResponseBody) *CreateJobDataParsingTaskResponse {
	s.Body = v
	return s
}

type CreateJobGroupRequest struct {
	CallingNumber       []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	InstanceId          *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupDescription *string   `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupName        *string   `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	MinConcurrency      *int64    `json:"MinConcurrency,omitempty" xml:"MinConcurrency,omitempty"`
	Priority            *string   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RecallStrategyJson  *string   `json:"RecallStrategyJson,omitempty" xml:"RecallStrategyJson,omitempty"`
	RingingDuration     *int64    `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
	ScenarioId          *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptId            *string   `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	StrategyJson        *string   `json:"StrategyJson,omitempty" xml:"StrategyJson,omitempty"`
}

func (s CreateJobGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateJobGroupRequest) SetCallingNumber(v []*string) *CreateJobGroupRequest {
	s.CallingNumber = v
	return s
}

func (s *CreateJobGroupRequest) SetInstanceId(v string) *CreateJobGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateJobGroupRequest) SetJobGroupDescription(v string) *CreateJobGroupRequest {
	s.JobGroupDescription = &v
	return s
}

func (s *CreateJobGroupRequest) SetJobGroupName(v string) *CreateJobGroupRequest {
	s.JobGroupName = &v
	return s
}

func (s *CreateJobGroupRequest) SetMinConcurrency(v int64) *CreateJobGroupRequest {
	s.MinConcurrency = &v
	return s
}

func (s *CreateJobGroupRequest) SetPriority(v string) *CreateJobGroupRequest {
	s.Priority = &v
	return s
}

func (s *CreateJobGroupRequest) SetRecallStrategyJson(v string) *CreateJobGroupRequest {
	s.RecallStrategyJson = &v
	return s
}

func (s *CreateJobGroupRequest) SetRingingDuration(v int64) *CreateJobGroupRequest {
	s.RingingDuration = &v
	return s
}

func (s *CreateJobGroupRequest) SetScenarioId(v string) *CreateJobGroupRequest {
	s.ScenarioId = &v
	return s
}

func (s *CreateJobGroupRequest) SetScriptId(v string) *CreateJobGroupRequest {
	s.ScriptId = &v
	return s
}

func (s *CreateJobGroupRequest) SetStrategyJson(v string) *CreateJobGroupRequest {
	s.StrategyJson = &v
	return s
}

type CreateJobGroupResponseBody struct {
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroup       *CreateJobGroupResponseBodyJobGroup `json:"JobGroup,omitempty" xml:"JobGroup,omitempty" type:"Struct"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateJobGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJobGroupResponseBody) SetCode(v string) *CreateJobGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateJobGroupResponseBody) SetHttpStatusCode(v int32) *CreateJobGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateJobGroupResponseBody) SetJobGroup(v *CreateJobGroupResponseBodyJobGroup) *CreateJobGroupResponseBody {
	s.JobGroup = v
	return s
}

func (s *CreateJobGroupResponseBody) SetMessage(v string) *CreateJobGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateJobGroupResponseBody) SetRequestId(v string) *CreateJobGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJobGroupResponseBody) SetSuccess(v bool) *CreateJobGroupResponseBody {
	s.Success = &v
	return s
}

type CreateJobGroupResponseBodyJobGroup struct {
	CallingNumbers       []*string                                         `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	CreationTime         *int64                                            `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ExportProgress       *CreateJobGroupResponseBodyJobGroupExportProgress `json:"ExportProgress,omitempty" xml:"ExportProgress,omitempty" type:"Struct"`
	JobDataParsingTaskId *string                                           `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
	JobFilePath          *string                                           `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
	JobGroupDescription  *string                                           `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupId           *string                                           `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupName         *string                                           `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	MinConcurrency       *int64                                            `json:"MinConcurrency,omitempty" xml:"MinConcurrency,omitempty"`
	ModifyTime           *string                                           `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Priority             *string                                           `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RecallStrategy       *CreateJobGroupResponseBodyJobGroupRecallStrategy `json:"RecallStrategy,omitempty" xml:"RecallStrategy,omitempty" type:"Struct"`
	RingingDuration      *int64                                            `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
	ScenarioId           *string                                           `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptName           *string                                           `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptVersion        *string                                           `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
	Status               *string                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	Strategy             *CreateJobGroupResponseBodyJobGroupStrategy       `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
}

func (s CreateJobGroupResponseBodyJobGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupResponseBodyJobGroup) GoString() string {
	return s.String()
}

func (s *CreateJobGroupResponseBodyJobGroup) SetCallingNumbers(v []*string) *CreateJobGroupResponseBodyJobGroup {
	s.CallingNumbers = v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetCreationTime(v int64) *CreateJobGroupResponseBodyJobGroup {
	s.CreationTime = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetExportProgress(v *CreateJobGroupResponseBodyJobGroupExportProgress) *CreateJobGroupResponseBodyJobGroup {
	s.ExportProgress = v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetJobDataParsingTaskId(v string) *CreateJobGroupResponseBodyJobGroup {
	s.JobDataParsingTaskId = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetJobFilePath(v string) *CreateJobGroupResponseBodyJobGroup {
	s.JobFilePath = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetJobGroupDescription(v string) *CreateJobGroupResponseBodyJobGroup {
	s.JobGroupDescription = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetJobGroupId(v string) *CreateJobGroupResponseBodyJobGroup {
	s.JobGroupId = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetJobGroupName(v string) *CreateJobGroupResponseBodyJobGroup {
	s.JobGroupName = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetMinConcurrency(v int64) *CreateJobGroupResponseBodyJobGroup {
	s.MinConcurrency = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetModifyTime(v string) *CreateJobGroupResponseBodyJobGroup {
	s.ModifyTime = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetPriority(v string) *CreateJobGroupResponseBodyJobGroup {
	s.Priority = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetRecallStrategy(v *CreateJobGroupResponseBodyJobGroupRecallStrategy) *CreateJobGroupResponseBodyJobGroup {
	s.RecallStrategy = v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetRingingDuration(v int64) *CreateJobGroupResponseBodyJobGroup {
	s.RingingDuration = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetScenarioId(v string) *CreateJobGroupResponseBodyJobGroup {
	s.ScenarioId = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetScriptName(v string) *CreateJobGroupResponseBodyJobGroup {
	s.ScriptName = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetScriptVersion(v string) *CreateJobGroupResponseBodyJobGroup {
	s.ScriptVersion = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetStatus(v string) *CreateJobGroupResponseBodyJobGroup {
	s.Status = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroup) SetStrategy(v *CreateJobGroupResponseBodyJobGroupStrategy) *CreateJobGroupResponseBodyJobGroup {
	s.Strategy = v
	return s
}

type CreateJobGroupResponseBodyJobGroupExportProgress struct {
	FileHttpUrl *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	Progress    *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateJobGroupResponseBodyJobGroupExportProgress) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupResponseBodyJobGroupExportProgress) GoString() string {
	return s.String()
}

func (s *CreateJobGroupResponseBodyJobGroupExportProgress) SetFileHttpUrl(v string) *CreateJobGroupResponseBodyJobGroupExportProgress {
	s.FileHttpUrl = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupExportProgress) SetProgress(v string) *CreateJobGroupResponseBodyJobGroupExportProgress {
	s.Progress = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupExportProgress) SetStatus(v string) *CreateJobGroupResponseBodyJobGroupExportProgress {
	s.Status = &v
	return s
}

type CreateJobGroupResponseBodyJobGroupRecallStrategy struct {
	EmptyNumberIgnore  *bool `json:"EmptyNumberIgnore,omitempty" xml:"EmptyNumberIgnore,omitempty"`
	InArrearsIgnore    *bool `json:"InArrearsIgnore,omitempty" xml:"InArrearsIgnore,omitempty"`
	OutOfServiceIgnore *bool `json:"OutOfServiceIgnore,omitempty" xml:"OutOfServiceIgnore,omitempty"`
}

func (s CreateJobGroupResponseBodyJobGroupRecallStrategy) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupResponseBodyJobGroupRecallStrategy) GoString() string {
	return s.String()
}

func (s *CreateJobGroupResponseBodyJobGroupRecallStrategy) SetEmptyNumberIgnore(v bool) *CreateJobGroupResponseBodyJobGroupRecallStrategy {
	s.EmptyNumberIgnore = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupRecallStrategy) SetInArrearsIgnore(v bool) *CreateJobGroupResponseBodyJobGroupRecallStrategy {
	s.InArrearsIgnore = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupRecallStrategy) SetOutOfServiceIgnore(v bool) *CreateJobGroupResponseBodyJobGroupRecallStrategy {
	s.OutOfServiceIgnore = &v
	return s
}

type CreateJobGroupResponseBodyJobGroupStrategy struct {
	Customized          *string                                                  `json:"Customized,omitempty" xml:"Customized,omitempty"`
	EndTime             *int64                                                   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FollowUpStrategy    *string                                                  `json:"FollowUpStrategy,omitempty" xml:"FollowUpStrategy,omitempty"`
	IsTemplate          *bool                                                    `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	MaxAttemptsPerDay   *int32                                                   `json:"MaxAttemptsPerDay,omitempty" xml:"MaxAttemptsPerDay,omitempty"`
	MinAttemptInterval  *int32                                                   `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	RepeatBy            *string                                                  `json:"RepeatBy,omitempty" xml:"RepeatBy,omitempty"`
	RepeatDays          []*string                                                `json:"RepeatDays,omitempty" xml:"RepeatDays,omitempty" type:"Repeated"`
	RoutingStrategy     *string                                                  `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	StartTime           *int64                                                   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StrategyDescription *string                                                  `json:"StrategyDescription,omitempty" xml:"StrategyDescription,omitempty"`
	StrategyId          *string                                                  `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	StrategyName        *string                                                  `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	Type                *string                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkingTime         []*CreateJobGroupResponseBodyJobGroupStrategyWorkingTime `json:"WorkingTime,omitempty" xml:"WorkingTime,omitempty" type:"Repeated"`
}

func (s CreateJobGroupResponseBodyJobGroupStrategy) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupResponseBodyJobGroupStrategy) GoString() string {
	return s.String()
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetCustomized(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.Customized = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetEndTime(v int64) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.EndTime = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetFollowUpStrategy(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.FollowUpStrategy = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetIsTemplate(v bool) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.IsTemplate = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetMaxAttemptsPerDay(v int32) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.MaxAttemptsPerDay = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetMinAttemptInterval(v int32) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.MinAttemptInterval = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetRepeatBy(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.RepeatBy = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetRepeatDays(v []*string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.RepeatDays = v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetRoutingStrategy(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.RoutingStrategy = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetStartTime(v int64) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.StartTime = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetStrategyDescription(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.StrategyDescription = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetStrategyId(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.StrategyId = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetStrategyName(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.StrategyName = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetType(v string) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.Type = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategy) SetWorkingTime(v []*CreateJobGroupResponseBodyJobGroupStrategyWorkingTime) *CreateJobGroupResponseBodyJobGroupStrategy {
	s.WorkingTime = v
	return s
}

type CreateJobGroupResponseBodyJobGroupStrategyWorkingTime struct {
	BeginTime *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s CreateJobGroupResponseBodyJobGroupStrategyWorkingTime) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupResponseBodyJobGroupStrategyWorkingTime) GoString() string {
	return s.String()
}

func (s *CreateJobGroupResponseBodyJobGroupStrategyWorkingTime) SetBeginTime(v string) *CreateJobGroupResponseBodyJobGroupStrategyWorkingTime {
	s.BeginTime = &v
	return s
}

func (s *CreateJobGroupResponseBodyJobGroupStrategyWorkingTime) SetEndTime(v string) *CreateJobGroupResponseBodyJobGroupStrategyWorkingTime {
	s.EndTime = &v
	return s
}

type CreateJobGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateJobGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateJobGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateJobGroupResponse) SetHeaders(v map[string]*string) *CreateJobGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateJobGroupResponse) SetStatusCode(v int32) *CreateJobGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJobGroupResponse) SetBody(v *CreateJobGroupResponseBody) *CreateJobGroupResponse {
	s.Body = v
	return s
}

type CreateJobGroupExportTaskRequest struct {
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	Option     []*string `json:"Option,omitempty" xml:"Option,omitempty" type:"Repeated"`
}

func (s CreateJobGroupExportTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupExportTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateJobGroupExportTaskRequest) SetInstanceId(v string) *CreateJobGroupExportTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateJobGroupExportTaskRequest) SetJobGroupId(v string) *CreateJobGroupExportTaskRequest {
	s.JobGroupId = &v
	return s
}

func (s *CreateJobGroupExportTaskRequest) SetOption(v []*string) *CreateJobGroupExportTaskRequest {
	s.Option = v
	return s
}

type CreateJobGroupExportTaskResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateJobGroupExportTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupExportTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJobGroupExportTaskResponseBody) SetCode(v string) *CreateJobGroupExportTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateJobGroupExportTaskResponseBody) SetHttpStatusCode(v int32) *CreateJobGroupExportTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateJobGroupExportTaskResponseBody) SetMessage(v string) *CreateJobGroupExportTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateJobGroupExportTaskResponseBody) SetRequestId(v string) *CreateJobGroupExportTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJobGroupExportTaskResponseBody) SetSuccess(v bool) *CreateJobGroupExportTaskResponseBody {
	s.Success = &v
	return s
}

func (s *CreateJobGroupExportTaskResponseBody) SetTaskId(v string) *CreateJobGroupExportTaskResponseBody {
	s.TaskId = &v
	return s
}

type CreateJobGroupExportTaskResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateJobGroupExportTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateJobGroupExportTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobGroupExportTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateJobGroupExportTaskResponse) SetHeaders(v map[string]*string) *CreateJobGroupExportTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateJobGroupExportTaskResponse) SetStatusCode(v int32) *CreateJobGroupExportTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJobGroupExportTaskResponse) SetBody(v *CreateJobGroupExportTaskResponseBody) *CreateJobGroupExportTaskResponse {
	s.Body = v
	return s
}

type CreateNumberDistrictInfoDownloadUrlRequest struct {
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s CreateNumberDistrictInfoDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNumberDistrictInfoDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *CreateNumberDistrictInfoDownloadUrlRequest) SetVersionId(v string) *CreateNumberDistrictInfoDownloadUrlRequest {
	s.VersionId = &v
	return s
}

type CreateNumberDistrictInfoDownloadUrlResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	FileHttpUrl    *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateNumberDistrictInfoDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNumberDistrictInfoDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNumberDistrictInfoDownloadUrlResponseBody) SetCode(v string) *CreateNumberDistrictInfoDownloadUrlResponseBody {
	s.Code = &v
	return s
}

func (s *CreateNumberDistrictInfoDownloadUrlResponseBody) SetFileHttpUrl(v string) *CreateNumberDistrictInfoDownloadUrlResponseBody {
	s.FileHttpUrl = &v
	return s
}

func (s *CreateNumberDistrictInfoDownloadUrlResponseBody) SetHttpStatusCode(v int32) *CreateNumberDistrictInfoDownloadUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateNumberDistrictInfoDownloadUrlResponseBody) SetMessage(v string) *CreateNumberDistrictInfoDownloadUrlResponseBody {
	s.Message = &v
	return s
}

func (s *CreateNumberDistrictInfoDownloadUrlResponseBody) SetRequestId(v string) *CreateNumberDistrictInfoDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNumberDistrictInfoDownloadUrlResponseBody) SetSuccess(v bool) *CreateNumberDistrictInfoDownloadUrlResponseBody {
	s.Success = &v
	return s
}

type CreateNumberDistrictInfoDownloadUrlResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateNumberDistrictInfoDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNumberDistrictInfoDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNumberDistrictInfoDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *CreateNumberDistrictInfoDownloadUrlResponse) SetHeaders(v map[string]*string) *CreateNumberDistrictInfoDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *CreateNumberDistrictInfoDownloadUrlResponse) SetStatusCode(v int32) *CreateNumberDistrictInfoDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNumberDistrictInfoDownloadUrlResponse) SetBody(v *CreateNumberDistrictInfoDownloadUrlResponseBody) *CreateNumberDistrictInfoDownloadUrlResponse {
	s.Body = v
	return s
}

type CreateNumberDistrictInfoParsingTaskRequest struct {
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	FileSize *int64  `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s CreateNumberDistrictInfoParsingTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNumberDistrictInfoParsingTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateNumberDistrictInfoParsingTaskRequest) SetFilePath(v string) *CreateNumberDistrictInfoParsingTaskRequest {
	s.FilePath = &v
	return s
}

func (s *CreateNumberDistrictInfoParsingTaskRequest) SetFileSize(v int64) *CreateNumberDistrictInfoParsingTaskRequest {
	s.FileSize = &v
	return s
}

type CreateNumberDistrictInfoParsingTaskResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateNumberDistrictInfoParsingTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNumberDistrictInfoParsingTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNumberDistrictInfoParsingTaskResponseBody) SetCode(v string) *CreateNumberDistrictInfoParsingTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateNumberDistrictInfoParsingTaskResponseBody) SetHttpStatusCode(v int32) *CreateNumberDistrictInfoParsingTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateNumberDistrictInfoParsingTaskResponseBody) SetMessage(v string) *CreateNumberDistrictInfoParsingTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateNumberDistrictInfoParsingTaskResponseBody) SetRequestId(v string) *CreateNumberDistrictInfoParsingTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNumberDistrictInfoParsingTaskResponseBody) SetSuccess(v bool) *CreateNumberDistrictInfoParsingTaskResponseBody {
	s.Success = &v
	return s
}

type CreateNumberDistrictInfoParsingTaskResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateNumberDistrictInfoParsingTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNumberDistrictInfoParsingTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNumberDistrictInfoParsingTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateNumberDistrictInfoParsingTaskResponse) SetHeaders(v map[string]*string) *CreateNumberDistrictInfoParsingTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateNumberDistrictInfoParsingTaskResponse) SetStatusCode(v int32) *CreateNumberDistrictInfoParsingTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNumberDistrictInfoParsingTaskResponse) SetBody(v *CreateNumberDistrictInfoParsingTaskResponseBody) *CreateNumberDistrictInfoParsingTaskResponse {
	s.Body = v
	return s
}

type CreateOutboundCallNumberRequest struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number          *string `json:"Number,omitempty" xml:"Number,omitempty"`
	RateLimitCount  *int32  `json:"RateLimitCount,omitempty" xml:"RateLimitCount,omitempty"`
	RateLimitPeriod *int32  `json:"RateLimitPeriod,omitempty" xml:"RateLimitPeriod,omitempty"`
}

func (s CreateOutboundCallNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOutboundCallNumberRequest) GoString() string {
	return s.String()
}

func (s *CreateOutboundCallNumberRequest) SetInstanceId(v string) *CreateOutboundCallNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateOutboundCallNumberRequest) SetNumber(v string) *CreateOutboundCallNumberRequest {
	s.Number = &v
	return s
}

func (s *CreateOutboundCallNumberRequest) SetRateLimitCount(v int32) *CreateOutboundCallNumberRequest {
	s.RateLimitCount = &v
	return s
}

func (s *CreateOutboundCallNumberRequest) SetRateLimitPeriod(v int32) *CreateOutboundCallNumberRequest {
	s.RateLimitPeriod = &v
	return s
}

type CreateOutboundCallNumberResponseBody struct {
	Code                 *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode       *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message              *string `json:"Message,omitempty" xml:"Message,omitempty"`
	OutboundCallNumberId *string `json:"OutboundCallNumberId,omitempty" xml:"OutboundCallNumberId,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success              *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateOutboundCallNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOutboundCallNumberResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOutboundCallNumberResponseBody) SetCode(v string) *CreateOutboundCallNumberResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOutboundCallNumberResponseBody) SetHttpStatusCode(v int32) *CreateOutboundCallNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateOutboundCallNumberResponseBody) SetMessage(v string) *CreateOutboundCallNumberResponseBody {
	s.Message = &v
	return s
}

func (s *CreateOutboundCallNumberResponseBody) SetOutboundCallNumberId(v string) *CreateOutboundCallNumberResponseBody {
	s.OutboundCallNumberId = &v
	return s
}

func (s *CreateOutboundCallNumberResponseBody) SetRequestId(v string) *CreateOutboundCallNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOutboundCallNumberResponseBody) SetSuccess(v bool) *CreateOutboundCallNumberResponseBody {
	s.Success = &v
	return s
}

type CreateOutboundCallNumberResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateOutboundCallNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOutboundCallNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOutboundCallNumberResponse) GoString() string {
	return s.String()
}

func (s *CreateOutboundCallNumberResponse) SetHeaders(v map[string]*string) *CreateOutboundCallNumberResponse {
	s.Headers = v
	return s
}

func (s *CreateOutboundCallNumberResponse) SetStatusCode(v int32) *CreateOutboundCallNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOutboundCallNumberResponse) SetBody(v *CreateOutboundCallNumberResponseBody) *CreateOutboundCallNumberResponse {
	s.Body = v
	return s
}

type CreateScriptRequest struct {
	AsrConfig          *string   `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty"`
	ChatbotId          *string   `json:"ChatbotId,omitempty" xml:"ChatbotId,omitempty"`
	EmotionEnable      *bool     `json:"EmotionEnable,omitempty" xml:"EmotionEnable,omitempty"`
	Industry           *string   `json:"Industry,omitempty" xml:"Industry,omitempty"`
	InstanceId         *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LongWaitEnable     *bool     `json:"LongWaitEnable,omitempty" xml:"LongWaitEnable,omitempty"`
	MiniPlaybackEnable *bool     `json:"MiniPlaybackEnable,omitempty" xml:"MiniPlaybackEnable,omitempty"`
	NewBargeInEnable   *bool     `json:"NewBargeInEnable,omitempty" xml:"NewBargeInEnable,omitempty"`
	Scene              *string   `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptContent      []*string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty" type:"Repeated"`
	ScriptDescription  *string   `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptName         *string   `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptWaveform     []*string `json:"ScriptWaveform,omitempty" xml:"ScriptWaveform,omitempty" type:"Repeated"`
	TtsConfig          *string   `json:"TtsConfig,omitempty" xml:"TtsConfig,omitempty"`
}

func (s CreateScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateScriptRequest) GoString() string {
	return s.String()
}

func (s *CreateScriptRequest) SetAsrConfig(v string) *CreateScriptRequest {
	s.AsrConfig = &v
	return s
}

func (s *CreateScriptRequest) SetChatbotId(v string) *CreateScriptRequest {
	s.ChatbotId = &v
	return s
}

func (s *CreateScriptRequest) SetEmotionEnable(v bool) *CreateScriptRequest {
	s.EmotionEnable = &v
	return s
}

func (s *CreateScriptRequest) SetIndustry(v string) *CreateScriptRequest {
	s.Industry = &v
	return s
}

func (s *CreateScriptRequest) SetInstanceId(v string) *CreateScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateScriptRequest) SetLongWaitEnable(v bool) *CreateScriptRequest {
	s.LongWaitEnable = &v
	return s
}

func (s *CreateScriptRequest) SetMiniPlaybackEnable(v bool) *CreateScriptRequest {
	s.MiniPlaybackEnable = &v
	return s
}

func (s *CreateScriptRequest) SetNewBargeInEnable(v bool) *CreateScriptRequest {
	s.NewBargeInEnable = &v
	return s
}

func (s *CreateScriptRequest) SetScene(v string) *CreateScriptRequest {
	s.Scene = &v
	return s
}

func (s *CreateScriptRequest) SetScriptContent(v []*string) *CreateScriptRequest {
	s.ScriptContent = v
	return s
}

func (s *CreateScriptRequest) SetScriptDescription(v string) *CreateScriptRequest {
	s.ScriptDescription = &v
	return s
}

func (s *CreateScriptRequest) SetScriptName(v string) *CreateScriptRequest {
	s.ScriptName = &v
	return s
}

func (s *CreateScriptRequest) SetScriptWaveform(v []*string) *CreateScriptRequest {
	s.ScriptWaveform = v
	return s
}

func (s *CreateScriptRequest) SetTtsConfig(v string) *CreateScriptRequest {
	s.TtsConfig = &v
	return s
}

type CreateScriptResponseBody struct {
	Code           *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Script         *CreateScriptResponseBodyScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScriptResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScriptResponseBody) SetCode(v string) *CreateScriptResponseBody {
	s.Code = &v
	return s
}

func (s *CreateScriptResponseBody) SetHttpStatusCode(v int32) *CreateScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateScriptResponseBody) SetMessage(v string) *CreateScriptResponseBody {
	s.Message = &v
	return s
}

func (s *CreateScriptResponseBody) SetRequestId(v string) *CreateScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateScriptResponseBody) SetScript(v *CreateScriptResponseBodyScript) *CreateScriptResponseBody {
	s.Script = v
	return s
}

func (s *CreateScriptResponseBody) SetSuccess(v bool) *CreateScriptResponseBody {
	s.Success = &v
	return s
}

type CreateScriptResponseBodyScript struct {
	DebugStatus       *string `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	Industry          *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDebugDrafted    *bool   `json:"IsDebugDrafted,omitempty" xml:"IsDebugDrafted,omitempty"`
	IsDrafted         *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	Scene             *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptDescription *string `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName        *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdateTime        *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s CreateScriptResponseBodyScript) String() string {
	return tea.Prettify(s)
}

func (s CreateScriptResponseBodyScript) GoString() string {
	return s.String()
}

func (s *CreateScriptResponseBodyScript) SetDebugStatus(v string) *CreateScriptResponseBodyScript {
	s.DebugStatus = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetIndustry(v string) *CreateScriptResponseBodyScript {
	s.Industry = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetIsDebugDrafted(v bool) *CreateScriptResponseBodyScript {
	s.IsDebugDrafted = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetIsDrafted(v bool) *CreateScriptResponseBodyScript {
	s.IsDrafted = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetScene(v string) *CreateScriptResponseBodyScript {
	s.Scene = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetScriptDescription(v string) *CreateScriptResponseBodyScript {
	s.ScriptDescription = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetScriptId(v string) *CreateScriptResponseBodyScript {
	s.ScriptId = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetScriptName(v string) *CreateScriptResponseBodyScript {
	s.ScriptName = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetStatus(v string) *CreateScriptResponseBodyScript {
	s.Status = &v
	return s
}

func (s *CreateScriptResponseBodyScript) SetUpdateTime(v int64) *CreateScriptResponseBodyScript {
	s.UpdateTime = &v
	return s
}

type CreateScriptResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateScriptResponse) GoString() string {
	return s.String()
}

func (s *CreateScriptResponse) SetHeaders(v map[string]*string) *CreateScriptResponse {
	s.Headers = v
	return s
}

func (s *CreateScriptResponse) SetStatusCode(v int32) *CreateScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateScriptResponse) SetBody(v *CreateScriptResponseBody) *CreateScriptResponse {
	s.Body = v
	return s
}

type CreateScriptWaveformRequest struct {
	FileId        *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName      *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptContent *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	ScriptId      *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s CreateScriptWaveformRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateScriptWaveformRequest) GoString() string {
	return s.String()
}

func (s *CreateScriptWaveformRequest) SetFileId(v string) *CreateScriptWaveformRequest {
	s.FileId = &v
	return s
}

func (s *CreateScriptWaveformRequest) SetFileName(v string) *CreateScriptWaveformRequest {
	s.FileName = &v
	return s
}

func (s *CreateScriptWaveformRequest) SetInstanceId(v string) *CreateScriptWaveformRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateScriptWaveformRequest) SetScriptContent(v string) *CreateScriptWaveformRequest {
	s.ScriptContent = &v
	return s
}

func (s *CreateScriptWaveformRequest) SetScriptId(v string) *CreateScriptWaveformRequest {
	s.ScriptId = &v
	return s
}

type CreateScriptWaveformResponseBody struct {
	Code             *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode   *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message          *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptWaveformId *string `json:"ScriptWaveformId,omitempty" xml:"ScriptWaveformId,omitempty"`
	Success          *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateScriptWaveformResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScriptWaveformResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScriptWaveformResponseBody) SetCode(v string) *CreateScriptWaveformResponseBody {
	s.Code = &v
	return s
}

func (s *CreateScriptWaveformResponseBody) SetHttpStatusCode(v int32) *CreateScriptWaveformResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateScriptWaveformResponseBody) SetMessage(v string) *CreateScriptWaveformResponseBody {
	s.Message = &v
	return s
}

func (s *CreateScriptWaveformResponseBody) SetRequestId(v string) *CreateScriptWaveformResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateScriptWaveformResponseBody) SetScriptWaveformId(v string) *CreateScriptWaveformResponseBody {
	s.ScriptWaveformId = &v
	return s
}

func (s *CreateScriptWaveformResponseBody) SetSuccess(v bool) *CreateScriptWaveformResponseBody {
	s.Success = &v
	return s
}

type CreateScriptWaveformResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateScriptWaveformResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateScriptWaveformResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateScriptWaveformResponse) GoString() string {
	return s.String()
}

func (s *CreateScriptWaveformResponse) SetHeaders(v map[string]*string) *CreateScriptWaveformResponse {
	s.Headers = v
	return s
}

func (s *CreateScriptWaveformResponse) SetStatusCode(v int32) *CreateScriptWaveformResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateScriptWaveformResponse) SetBody(v *CreateScriptWaveformResponseBody) *CreateScriptWaveformResponse {
	s.Body = v
	return s
}

type CreateTagRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TagGroup   *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagName    *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s CreateTagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTagRequest) GoString() string {
	return s.String()
}

func (s *CreateTagRequest) SetInstanceId(v string) *CreateTagRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateTagRequest) SetScriptId(v string) *CreateTagRequest {
	s.ScriptId = &v
	return s
}

func (s *CreateTagRequest) SetTagGroup(v string) *CreateTagRequest {
	s.TagGroup = &v
	return s
}

func (s *CreateTagRequest) SetTagName(v string) *CreateTagRequest {
	s.TagName = &v
	return s
}

type CreateTagResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TagId          *string `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s CreateTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTagResponseBody) SetCode(v string) *CreateTagResponseBody {
	s.Code = &v
	return s
}

func (s *CreateTagResponseBody) SetHttpStatusCode(v int32) *CreateTagResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateTagResponseBody) SetMessage(v string) *CreateTagResponseBody {
	s.Message = &v
	return s
}

func (s *CreateTagResponseBody) SetRequestId(v string) *CreateTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTagResponseBody) SetSuccess(v bool) *CreateTagResponseBody {
	s.Success = &v
	return s
}

func (s *CreateTagResponseBody) SetTagId(v string) *CreateTagResponseBody {
	s.TagId = &v
	return s
}

type CreateTagResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponse) GoString() string {
	return s.String()
}

func (s *CreateTagResponse) SetHeaders(v map[string]*string) *CreateTagResponse {
	s.Headers = v
	return s
}

func (s *CreateTagResponse) SetStatusCode(v int32) *CreateTagResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTagResponse) SetBody(v *CreateTagResponseBody) *CreateTagResponse {
	s.Body = v
	return s
}

type CreateTaskExportTaskRequest struct {
	ActualTimeGte        *int64  `json:"ActualTimeGte,omitempty" xml:"ActualTimeGte,omitempty"`
	ActualTimeLte        *int64  `json:"ActualTimeLte,omitempty" xml:"ActualTimeLte,omitempty"`
	CallDurationGte      *int64  `json:"CallDurationGte,omitempty" xml:"CallDurationGte,omitempty"`
	CallDurationLte      *int64  `json:"CallDurationLte,omitempty" xml:"CallDurationLte,omitempty"`
	CalledNumber         *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	HasAnswered          *bool   `json:"HasAnswered,omitempty" xml:"HasAnswered,omitempty"`
	HasHangUpByRejection *bool   `json:"HasHangUpByRejection,omitempty" xml:"HasHangUpByRejection,omitempty"`
	HasReachedEndOfFlow  *bool   `json:"HasReachedEndOfFlow,omitempty" xml:"HasReachedEndOfFlow,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId           *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupNameQuery    *string `json:"JobGroupNameQuery,omitempty" xml:"JobGroupNameQuery,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobStatusStringList  *string `json:"JobStatusStringList,omitempty" xml:"JobStatusStringList,omitempty"`
	OtherId              *string `json:"OtherId,omitempty" xml:"OtherId,omitempty"`
	PageIndex            *int32  `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecordingDurationGte *int64  `json:"RecordingDurationGte,omitempty" xml:"RecordingDurationGte,omitempty"`
	RecordingDurationLte *int64  `json:"RecordingDurationLte,omitempty" xml:"RecordingDurationLte,omitempty"`
	ScriptNameQuery      *string `json:"ScriptNameQuery,omitempty" xml:"ScriptNameQuery,omitempty"`
	SortBy               *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	SortOrder            *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	TaskCreateTimeGte    *int64  `json:"TaskCreateTimeGte,omitempty" xml:"TaskCreateTimeGte,omitempty"`
	TaskCreateTimeLte    *int64  `json:"TaskCreateTimeLte,omitempty" xml:"TaskCreateTimeLte,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskStatusStringList *string `json:"TaskStatusStringList,omitempty" xml:"TaskStatusStringList,omitempty"`
	UserIdMatch          *string `json:"UserIdMatch,omitempty" xml:"UserIdMatch,omitempty"`
}

func (s CreateTaskExportTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTaskExportTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateTaskExportTaskRequest) SetActualTimeGte(v int64) *CreateTaskExportTaskRequest {
	s.ActualTimeGte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetActualTimeLte(v int64) *CreateTaskExportTaskRequest {
	s.ActualTimeLte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetCallDurationGte(v int64) *CreateTaskExportTaskRequest {
	s.CallDurationGte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetCallDurationLte(v int64) *CreateTaskExportTaskRequest {
	s.CallDurationLte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetCalledNumber(v string) *CreateTaskExportTaskRequest {
	s.CalledNumber = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetHasAnswered(v bool) *CreateTaskExportTaskRequest {
	s.HasAnswered = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetHasHangUpByRejection(v bool) *CreateTaskExportTaskRequest {
	s.HasHangUpByRejection = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetHasReachedEndOfFlow(v bool) *CreateTaskExportTaskRequest {
	s.HasReachedEndOfFlow = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetInstanceId(v string) *CreateTaskExportTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetJobGroupId(v string) *CreateTaskExportTaskRequest {
	s.JobGroupId = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetJobGroupNameQuery(v string) *CreateTaskExportTaskRequest {
	s.JobGroupNameQuery = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetJobId(v string) *CreateTaskExportTaskRequest {
	s.JobId = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetJobStatusStringList(v string) *CreateTaskExportTaskRequest {
	s.JobStatusStringList = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetOtherId(v string) *CreateTaskExportTaskRequest {
	s.OtherId = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetPageIndex(v int32) *CreateTaskExportTaskRequest {
	s.PageIndex = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetPageSize(v int32) *CreateTaskExportTaskRequest {
	s.PageSize = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetRecordingDurationGte(v int64) *CreateTaskExportTaskRequest {
	s.RecordingDurationGte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetRecordingDurationLte(v int64) *CreateTaskExportTaskRequest {
	s.RecordingDurationLte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetScriptNameQuery(v string) *CreateTaskExportTaskRequest {
	s.ScriptNameQuery = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetSortBy(v string) *CreateTaskExportTaskRequest {
	s.SortBy = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetSortOrder(v string) *CreateTaskExportTaskRequest {
	s.SortOrder = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetTaskCreateTimeGte(v int64) *CreateTaskExportTaskRequest {
	s.TaskCreateTimeGte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetTaskCreateTimeLte(v int64) *CreateTaskExportTaskRequest {
	s.TaskCreateTimeLte = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetTaskId(v string) *CreateTaskExportTaskRequest {
	s.TaskId = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetTaskStatusStringList(v string) *CreateTaskExportTaskRequest {
	s.TaskStatusStringList = &v
	return s
}

func (s *CreateTaskExportTaskRequest) SetUserIdMatch(v string) *CreateTaskExportTaskRequest {
	s.UserIdMatch = &v
	return s
}

type CreateTaskExportTaskResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateTaskExportTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTaskExportTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTaskExportTaskResponseBody) SetCode(v string) *CreateTaskExportTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateTaskExportTaskResponseBody) SetHttpStatusCode(v int32) *CreateTaskExportTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateTaskExportTaskResponseBody) SetMessage(v string) *CreateTaskExportTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateTaskExportTaskResponseBody) SetRequestId(v string) *CreateTaskExportTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTaskExportTaskResponseBody) SetSuccess(v bool) *CreateTaskExportTaskResponseBody {
	s.Success = &v
	return s
}

func (s *CreateTaskExportTaskResponseBody) SetTaskId(v string) *CreateTaskExportTaskResponseBody {
	s.TaskId = &v
	return s
}

type CreateTaskExportTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateTaskExportTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTaskExportTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTaskExportTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateTaskExportTaskResponse) SetHeaders(v map[string]*string) *CreateTaskExportTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateTaskExportTaskResponse) SetStatusCode(v int32) *CreateTaskExportTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTaskExportTaskResponse) SetBody(v *CreateTaskExportTaskResponseBody) *CreateTaskExportTaskResponse {
	s.Body = v
	return s
}

type DeleteAllNumberDistrictInfoResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteAllNumberDistrictInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllNumberDistrictInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAllNumberDistrictInfoResponseBody) SetCode(v string) *DeleteAllNumberDistrictInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAllNumberDistrictInfoResponseBody) SetHttpStatusCode(v int32) *DeleteAllNumberDistrictInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteAllNumberDistrictInfoResponseBody) SetMessage(v string) *DeleteAllNumberDistrictInfoResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAllNumberDistrictInfoResponseBody) SetRequestId(v string) *DeleteAllNumberDistrictInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAllNumberDistrictInfoResponseBody) SetSuccess(v bool) *DeleteAllNumberDistrictInfoResponseBody {
	s.Success = &v
	return s
}

type DeleteAllNumberDistrictInfoResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteAllNumberDistrictInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAllNumberDistrictInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllNumberDistrictInfoResponse) GoString() string {
	return s.String()
}

func (s *DeleteAllNumberDistrictInfoResponse) SetHeaders(v map[string]*string) *DeleteAllNumberDistrictInfoResponse {
	s.Headers = v
	return s
}

func (s *DeleteAllNumberDistrictInfoResponse) SetStatusCode(v int32) *DeleteAllNumberDistrictInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAllNumberDistrictInfoResponse) SetBody(v *DeleteAllNumberDistrictInfoResponseBody) *DeleteAllNumberDistrictInfoResponse {
	s.Body = v
	return s
}

type DeleteContactBlockListRequest struct {
	ContactBlockListId *string `json:"ContactBlockListId,omitempty" xml:"ContactBlockListId,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Operator           *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
}

func (s DeleteContactBlockListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactBlockListRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactBlockListRequest) SetContactBlockListId(v string) *DeleteContactBlockListRequest {
	s.ContactBlockListId = &v
	return s
}

func (s *DeleteContactBlockListRequest) SetInstanceId(v string) *DeleteContactBlockListRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteContactBlockListRequest) SetOperator(v string) *DeleteContactBlockListRequest {
	s.Operator = &v
	return s
}

type DeleteContactBlockListResponseBody struct {
	AffectedRows   *int32  `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteContactBlockListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactBlockListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactBlockListResponseBody) SetAffectedRows(v int32) *DeleteContactBlockListResponseBody {
	s.AffectedRows = &v
	return s
}

func (s *DeleteContactBlockListResponseBody) SetCode(v string) *DeleteContactBlockListResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteContactBlockListResponseBody) SetHttpStatusCode(v int32) *DeleteContactBlockListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteContactBlockListResponseBody) SetMessage(v string) *DeleteContactBlockListResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteContactBlockListResponseBody) SetRequestId(v string) *DeleteContactBlockListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteContactBlockListResponseBody) SetSuccess(v bool) *DeleteContactBlockListResponseBody {
	s.Success = &v
	return s
}

type DeleteContactBlockListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteContactBlockListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteContactBlockListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactBlockListResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactBlockListResponse) SetHeaders(v map[string]*string) *DeleteContactBlockListResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactBlockListResponse) SetStatusCode(v int32) *DeleteContactBlockListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactBlockListResponse) SetBody(v *DeleteContactBlockListResponseBody) *DeleteContactBlockListResponse {
	s.Body = v
	return s
}

type DeleteContactWhiteListRequest struct {
	ContactWhiteListId *string `json:"ContactWhiteListId,omitempty" xml:"ContactWhiteListId,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Operator           *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
}

func (s DeleteContactWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactWhiteListRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactWhiteListRequest) SetContactWhiteListId(v string) *DeleteContactWhiteListRequest {
	s.ContactWhiteListId = &v
	return s
}

func (s *DeleteContactWhiteListRequest) SetInstanceId(v string) *DeleteContactWhiteListRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteContactWhiteListRequest) SetOperator(v string) *DeleteContactWhiteListRequest {
	s.Operator = &v
	return s
}

type DeleteContactWhiteListResponseBody struct {
	AffectedRows   *int32  `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteContactWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactWhiteListResponseBody) SetAffectedRows(v int32) *DeleteContactWhiteListResponseBody {
	s.AffectedRows = &v
	return s
}

func (s *DeleteContactWhiteListResponseBody) SetCode(v string) *DeleteContactWhiteListResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteContactWhiteListResponseBody) SetHttpStatusCode(v int32) *DeleteContactWhiteListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteContactWhiteListResponseBody) SetMessage(v string) *DeleteContactWhiteListResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteContactWhiteListResponseBody) SetRequestId(v string) *DeleteContactWhiteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteContactWhiteListResponseBody) SetSuccess(v bool) *DeleteContactWhiteListResponseBody {
	s.Success = &v
	return s
}

type DeleteContactWhiteListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteContactWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteContactWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactWhiteListResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactWhiteListResponse) SetHeaders(v map[string]*string) *DeleteContactWhiteListResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactWhiteListResponse) SetStatusCode(v int32) *DeleteContactWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactWhiteListResponse) SetBody(v *DeleteContactWhiteListResponseBody) *DeleteContactWhiteListResponse {
	s.Body = v
	return s
}

type DeleteDialogueFlowRequest struct {
	DialogueFlowId *string `json:"DialogueFlowId,omitempty" xml:"DialogueFlowId,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId       *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DeleteDialogueFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDialogueFlowRequest) GoString() string {
	return s.String()
}

func (s *DeleteDialogueFlowRequest) SetDialogueFlowId(v string) *DeleteDialogueFlowRequest {
	s.DialogueFlowId = &v
	return s
}

func (s *DeleteDialogueFlowRequest) SetInstanceId(v string) *DeleteDialogueFlowRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDialogueFlowRequest) SetScriptId(v string) *DeleteDialogueFlowRequest {
	s.ScriptId = &v
	return s
}

type DeleteDialogueFlowResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDialogueFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDialogueFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDialogueFlowResponseBody) SetCode(v string) *DeleteDialogueFlowResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDialogueFlowResponseBody) SetHttpStatusCode(v int32) *DeleteDialogueFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDialogueFlowResponseBody) SetMessage(v string) *DeleteDialogueFlowResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDialogueFlowResponseBody) SetRequestId(v string) *DeleteDialogueFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDialogueFlowResponseBody) SetSuccess(v bool) *DeleteDialogueFlowResponseBody {
	s.Success = &v
	return s
}

type DeleteDialogueFlowResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDialogueFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDialogueFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDialogueFlowResponse) GoString() string {
	return s.String()
}

func (s *DeleteDialogueFlowResponse) SetHeaders(v map[string]*string) *DeleteDialogueFlowResponse {
	s.Headers = v
	return s
}

func (s *DeleteDialogueFlowResponse) SetStatusCode(v int32) *DeleteDialogueFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDialogueFlowResponse) SetBody(v *DeleteDialogueFlowResponseBody) *DeleteDialogueFlowResponse {
	s.Body = v
	return s
}

type DeleteGlobalQuestionRequest struct {
	GlobalQuestionId *string `json:"GlobalQuestionId,omitempty" xml:"GlobalQuestionId,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId         *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DeleteGlobalQuestionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGlobalQuestionRequest) GoString() string {
	return s.String()
}

func (s *DeleteGlobalQuestionRequest) SetGlobalQuestionId(v string) *DeleteGlobalQuestionRequest {
	s.GlobalQuestionId = &v
	return s
}

func (s *DeleteGlobalQuestionRequest) SetInstanceId(v string) *DeleteGlobalQuestionRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteGlobalQuestionRequest) SetScriptId(v string) *DeleteGlobalQuestionRequest {
	s.ScriptId = &v
	return s
}

type DeleteGlobalQuestionResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteGlobalQuestionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGlobalQuestionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGlobalQuestionResponseBody) SetCode(v string) *DeleteGlobalQuestionResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGlobalQuestionResponseBody) SetHttpStatusCode(v int32) *DeleteGlobalQuestionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteGlobalQuestionResponseBody) SetMessage(v string) *DeleteGlobalQuestionResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteGlobalQuestionResponseBody) SetRequestId(v string) *DeleteGlobalQuestionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGlobalQuestionResponseBody) SetSuccess(v bool) *DeleteGlobalQuestionResponseBody {
	s.Success = &v
	return s
}

type DeleteGlobalQuestionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteGlobalQuestionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteGlobalQuestionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGlobalQuestionResponse) GoString() string {
	return s.String()
}

func (s *DeleteGlobalQuestionResponse) SetHeaders(v map[string]*string) *DeleteGlobalQuestionResponse {
	s.Headers = v
	return s
}

func (s *DeleteGlobalQuestionResponse) SetStatusCode(v int32) *DeleteGlobalQuestionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGlobalQuestionResponse) SetBody(v *DeleteGlobalQuestionResponseBody) *DeleteGlobalQuestionResponse {
	s.Body = v
	return s
}

type DeleteInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequest) SetInstanceId(v string) *DeleteInstanceRequest {
	s.InstanceId = &v
	return s
}

type DeleteInstanceResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponseBody) SetCode(v string) *DeleteInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetHttpStatusCode(v int32) *DeleteInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetMessage(v string) *DeleteInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetRequestId(v string) *DeleteInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetSuccess(v bool) *DeleteInstanceResponseBody {
	s.Success = &v
	return s
}

type DeleteInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponse) SetHeaders(v map[string]*string) *DeleteInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstanceResponse) SetStatusCode(v int32) *DeleteInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstanceResponse) SetBody(v *DeleteInstanceResponseBody) *DeleteInstanceResponse {
	s.Body = v
	return s
}

type DeleteIntentRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntentId   *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DeleteIntentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntentRequest) GoString() string {
	return s.String()
}

func (s *DeleteIntentRequest) SetInstanceId(v string) *DeleteIntentRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteIntentRequest) SetIntentId(v string) *DeleteIntentRequest {
	s.IntentId = &v
	return s
}

func (s *DeleteIntentRequest) SetScriptId(v string) *DeleteIntentRequest {
	s.ScriptId = &v
	return s
}

type DeleteIntentResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteIntentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIntentResponseBody) SetCode(v string) *DeleteIntentResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteIntentResponseBody) SetHttpStatusCode(v int32) *DeleteIntentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteIntentResponseBody) SetMessage(v string) *DeleteIntentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteIntentResponseBody) SetRequestId(v string) *DeleteIntentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteIntentResponseBody) SetSuccess(v bool) *DeleteIntentResponseBody {
	s.Success = &v
	return s
}

type DeleteIntentResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteIntentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteIntentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntentResponse) GoString() string {
	return s.String()
}

func (s *DeleteIntentResponse) SetHeaders(v map[string]*string) *DeleteIntentResponse {
	s.Headers = v
	return s
}

func (s *DeleteIntentResponse) SetStatusCode(v int32) *DeleteIntentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIntentResponse) SetBody(v *DeleteIntentResponseBody) *DeleteIntentResponse {
	s.Body = v
	return s
}

type DeleteJobGroupRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
}

func (s DeleteJobGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteJobGroupRequest) SetInstanceId(v string) *DeleteJobGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteJobGroupRequest) SetJobGroupId(v string) *DeleteJobGroupRequest {
	s.JobGroupId = &v
	return s
}

type DeleteJobGroupResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteJobGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteJobGroupResponseBody) SetCode(v string) *DeleteJobGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteJobGroupResponseBody) SetHttpStatusCode(v int32) *DeleteJobGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteJobGroupResponseBody) SetMessage(v string) *DeleteJobGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteJobGroupResponseBody) SetRequestId(v string) *DeleteJobGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteJobGroupResponseBody) SetSuccess(v bool) *DeleteJobGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteJobGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteJobGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteJobGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteJobGroupResponse) SetHeaders(v map[string]*string) *DeleteJobGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteJobGroupResponse) SetStatusCode(v int32) *DeleteJobGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteJobGroupResponse) SetBody(v *DeleteJobGroupResponseBody) *DeleteJobGroupResponse {
	s.Body = v
	return s
}

type DeleteOutboundCallNumberRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OutboundCallNumberId *string `json:"OutboundCallNumberId,omitempty" xml:"OutboundCallNumberId,omitempty"`
}

func (s DeleteOutboundCallNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOutboundCallNumberRequest) GoString() string {
	return s.String()
}

func (s *DeleteOutboundCallNumberRequest) SetInstanceId(v string) *DeleteOutboundCallNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteOutboundCallNumberRequest) SetOutboundCallNumberId(v string) *DeleteOutboundCallNumberRequest {
	s.OutboundCallNumberId = &v
	return s
}

type DeleteOutboundCallNumberResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteOutboundCallNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteOutboundCallNumberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteOutboundCallNumberResponseBody) SetCode(v string) *DeleteOutboundCallNumberResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteOutboundCallNumberResponseBody) SetHttpStatusCode(v int32) *DeleteOutboundCallNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteOutboundCallNumberResponseBody) SetMessage(v string) *DeleteOutboundCallNumberResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteOutboundCallNumberResponseBody) SetRequestId(v string) *DeleteOutboundCallNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteOutboundCallNumberResponseBody) SetSuccess(v bool) *DeleteOutboundCallNumberResponseBody {
	s.Success = &v
	return s
}

type DeleteOutboundCallNumberResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteOutboundCallNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteOutboundCallNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOutboundCallNumberResponse) GoString() string {
	return s.String()
}

func (s *DeleteOutboundCallNumberResponse) SetHeaders(v map[string]*string) *DeleteOutboundCallNumberResponse {
	s.Headers = v
	return s
}

func (s *DeleteOutboundCallNumberResponse) SetStatusCode(v int32) *DeleteOutboundCallNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteOutboundCallNumberResponse) SetBody(v *DeleteOutboundCallNumberResponseBody) *DeleteOutboundCallNumberResponse {
	s.Body = v
	return s
}

type DeleteScriptRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DeleteScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptRequest) GoString() string {
	return s.String()
}

func (s *DeleteScriptRequest) SetInstanceId(v string) *DeleteScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteScriptRequest) SetScriptId(v string) *DeleteScriptRequest {
	s.ScriptId = &v
	return s
}

type DeleteScriptResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteScriptResponseBody) SetCode(v string) *DeleteScriptResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteScriptResponseBody) SetHttpStatusCode(v int32) *DeleteScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteScriptResponseBody) SetMessage(v string) *DeleteScriptResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteScriptResponseBody) SetRequestId(v string) *DeleteScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteScriptResponseBody) SetSuccess(v bool) *DeleteScriptResponseBody {
	s.Success = &v
	return s
}

type DeleteScriptResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptResponse) GoString() string {
	return s.String()
}

func (s *DeleteScriptResponse) SetHeaders(v map[string]*string) *DeleteScriptResponse {
	s.Headers = v
	return s
}

func (s *DeleteScriptResponse) SetStatusCode(v int32) *DeleteScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteScriptResponse) SetBody(v *DeleteScriptResponseBody) *DeleteScriptResponse {
	s.Body = v
	return s
}

type DeleteScriptRecordingRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	UuidsJson  *string `json:"UuidsJson,omitempty" xml:"UuidsJson,omitempty"`
}

func (s DeleteScriptRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptRecordingRequest) GoString() string {
	return s.String()
}

func (s *DeleteScriptRecordingRequest) SetInstanceId(v string) *DeleteScriptRecordingRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteScriptRecordingRequest) SetScriptId(v string) *DeleteScriptRecordingRequest {
	s.ScriptId = &v
	return s
}

func (s *DeleteScriptRecordingRequest) SetUuidsJson(v string) *DeleteScriptRecordingRequest {
	s.UuidsJson = &v
	return s
}

type DeleteScriptRecordingResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteScriptRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteScriptRecordingResponseBody) SetCode(v string) *DeleteScriptRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteScriptRecordingResponseBody) SetHttpStatusCode(v int32) *DeleteScriptRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteScriptRecordingResponseBody) SetMessage(v string) *DeleteScriptRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteScriptRecordingResponseBody) SetRequestId(v string) *DeleteScriptRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteScriptRecordingResponseBody) SetSuccess(v bool) *DeleteScriptRecordingResponseBody {
	s.Success = &v
	return s
}

type DeleteScriptRecordingResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteScriptRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteScriptRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptRecordingResponse) GoString() string {
	return s.String()
}

func (s *DeleteScriptRecordingResponse) SetHeaders(v map[string]*string) *DeleteScriptRecordingResponse {
	s.Headers = v
	return s
}

func (s *DeleteScriptRecordingResponse) SetStatusCode(v int32) *DeleteScriptRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteScriptRecordingResponse) SetBody(v *DeleteScriptRecordingResponseBody) *DeleteScriptRecordingResponse {
	s.Body = v
	return s
}

type DeleteScriptWaveformRequest struct {
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId         *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptWaveformId *string `json:"ScriptWaveformId,omitempty" xml:"ScriptWaveformId,omitempty"`
}

func (s DeleteScriptWaveformRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptWaveformRequest) GoString() string {
	return s.String()
}

func (s *DeleteScriptWaveformRequest) SetInstanceId(v string) *DeleteScriptWaveformRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteScriptWaveformRequest) SetScriptId(v string) *DeleteScriptWaveformRequest {
	s.ScriptId = &v
	return s
}

func (s *DeleteScriptWaveformRequest) SetScriptWaveformId(v string) *DeleteScriptWaveformRequest {
	s.ScriptWaveformId = &v
	return s
}

type DeleteScriptWaveformResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteScriptWaveformResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptWaveformResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteScriptWaveformResponseBody) SetCode(v string) *DeleteScriptWaveformResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteScriptWaveformResponseBody) SetHttpStatusCode(v int32) *DeleteScriptWaveformResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteScriptWaveformResponseBody) SetMessage(v string) *DeleteScriptWaveformResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteScriptWaveformResponseBody) SetRequestId(v string) *DeleteScriptWaveformResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteScriptWaveformResponseBody) SetSuccess(v bool) *DeleteScriptWaveformResponseBody {
	s.Success = &v
	return s
}

type DeleteScriptWaveformResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteScriptWaveformResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteScriptWaveformResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteScriptWaveformResponse) GoString() string {
	return s.String()
}

func (s *DeleteScriptWaveformResponse) SetHeaders(v map[string]*string) *DeleteScriptWaveformResponse {
	s.Headers = v
	return s
}

func (s *DeleteScriptWaveformResponse) SetStatusCode(v int32) *DeleteScriptWaveformResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteScriptWaveformResponse) SetBody(v *DeleteScriptWaveformResponseBody) *DeleteScriptWaveformResponse {
	s.Body = v
	return s
}

type DescribeDialogueNodeStatisticsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	Limit      *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
}

func (s DescribeDialogueNodeStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDialogueNodeStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDialogueNodeStatisticsRequest) SetInstanceId(v string) *DescribeDialogueNodeStatisticsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsRequest) SetJobGroupId(v string) *DescribeDialogueNodeStatisticsRequest {
	s.JobGroupId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsRequest) SetLimit(v int32) *DescribeDialogueNodeStatisticsRequest {
	s.Limit = &v
	return s
}

type DescribeDialogueNodeStatisticsResponseBody struct {
	Code                  *string                                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	GroupId               *string                                                            `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HttpStatusCode        *int32                                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceId            *string                                                            `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Message               *string                                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	NoAnswerDialogueNodes []*DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes `json:"NoAnswerDialogueNodes,omitempty" xml:"NoAnswerDialogueNodes,omitempty" type:"Repeated"`
	RequestId             *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success               *bool                                                              `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCompleted        *int32                                                             `json:"TotalCompleted,omitempty" xml:"TotalCompleted,omitempty"`
}

func (s DescribeDialogueNodeStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDialogueNodeStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetCode(v string) *DescribeDialogueNodeStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetGroupId(v string) *DescribeDialogueNodeStatisticsResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetHttpStatusCode(v int32) *DescribeDialogueNodeStatisticsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetInstanceId(v string) *DescribeDialogueNodeStatisticsResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetMessage(v string) *DescribeDialogueNodeStatisticsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetNoAnswerDialogueNodes(v []*DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) *DescribeDialogueNodeStatisticsResponseBody {
	s.NoAnswerDialogueNodes = v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetRequestId(v string) *DescribeDialogueNodeStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetSuccess(v bool) *DescribeDialogueNodeStatisticsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBody) SetTotalCompleted(v int32) *DescribeDialogueNodeStatisticsResponseBody {
	s.TotalCompleted = &v
	return s
}

type DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HangUpNum *int32  `json:"HangUpNum,omitempty" xml:"HangUpNum,omitempty"`
	HitNum    *int32  `json:"HitNum,omitempty" xml:"HitNum,omitempty"`
	// id
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NoAnswerNum *int32  `json:"NoAnswerNum,omitempty" xml:"NoAnswerNum,omitempty"`
	NodeId      *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
}

func (s DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) GoString() string {
	return s.String()
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetGroupId(v string) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.GroupId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetHangUpNum(v int32) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.HangUpNum = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetHitNum(v int32) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.HitNum = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetId(v string) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.Id = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetInstanceId(v string) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.InstanceId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetNoAnswerNum(v int32) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.NoAnswerNum = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetNodeId(v string) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.NodeId = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes) SetNodeName(v string) *DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes {
	s.NodeName = &v
	return s
}

type DescribeDialogueNodeStatisticsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDialogueNodeStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDialogueNodeStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDialogueNodeStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDialogueNodeStatisticsResponse) SetHeaders(v map[string]*string) *DescribeDialogueNodeStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponse) SetStatusCode(v int32) *DescribeDialogueNodeStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDialogueNodeStatisticsResponse) SetBody(v *DescribeDialogueNodeStatisticsResponseBody) *DescribeDialogueNodeStatisticsResponse {
	s.Body = v
	return s
}

type DescribeDsReportsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
}

func (s DescribeDsReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDsReportsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDsReportsRequest) SetInstanceId(v string) *DescribeDsReportsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDsReportsRequest) SetJobGroupId(v string) *DescribeDsReportsRequest {
	s.JobGroupId = &v
	return s
}

type DescribeDsReportsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DsReports      *string `json:"DsReports,omitempty" xml:"DsReports,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeDsReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDsReportsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDsReportsResponseBody) SetCode(v string) *DescribeDsReportsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDsReportsResponseBody) SetDsReports(v string) *DescribeDsReportsResponseBody {
	s.DsReports = &v
	return s
}

func (s *DescribeDsReportsResponseBody) SetHttpStatusCode(v int32) *DescribeDsReportsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDsReportsResponseBody) SetMessage(v string) *DescribeDsReportsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDsReportsResponseBody) SetRequestId(v string) *DescribeDsReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDsReportsResponseBody) SetSuccess(v bool) *DescribeDsReportsResponseBody {
	s.Success = &v
	return s
}

type DescribeDsReportsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDsReportsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDsReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDsReportsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDsReportsResponse) SetHeaders(v map[string]*string) *DescribeDsReportsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDsReportsResponse) SetStatusCode(v int32) *DescribeDsReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDsReportsResponse) SetBody(v *DescribeDsReportsResponseBody) *DescribeDsReportsResponse {
	s.Body = v
	return s
}

type DescribeGlobalQuestionRequest struct {
	GlobalQuestionId *string `json:"GlobalQuestionId,omitempty" xml:"GlobalQuestionId,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId         *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DescribeGlobalQuestionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalQuestionRequest) GoString() string {
	return s.String()
}

func (s *DescribeGlobalQuestionRequest) SetGlobalQuestionId(v string) *DescribeGlobalQuestionRequest {
	s.GlobalQuestionId = &v
	return s
}

func (s *DescribeGlobalQuestionRequest) SetInstanceId(v string) *DescribeGlobalQuestionRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeGlobalQuestionRequest) SetScriptId(v string) *DescribeGlobalQuestionRequest {
	s.ScriptId = &v
	return s
}

type DescribeGlobalQuestionResponseBody struct {
	Code           *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	GlobalQuestion *DescribeGlobalQuestionResponseBodyGlobalQuestion `json:"GlobalQuestion,omitempty" xml:"GlobalQuestion,omitempty" type:"Struct"`
	HttpStatusCode *int32                                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeGlobalQuestionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalQuestionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGlobalQuestionResponseBody) SetCode(v string) *DescribeGlobalQuestionResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBody) SetGlobalQuestion(v *DescribeGlobalQuestionResponseBodyGlobalQuestion) *DescribeGlobalQuestionResponseBody {
	s.GlobalQuestion = v
	return s
}

func (s *DescribeGlobalQuestionResponseBody) SetHttpStatusCode(v int32) *DescribeGlobalQuestionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBody) SetMessage(v string) *DescribeGlobalQuestionResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBody) SetRequestId(v string) *DescribeGlobalQuestionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBody) SetSuccess(v bool) *DescribeGlobalQuestionResponseBody {
	s.Success = &v
	return s
}

type DescribeGlobalQuestionResponseBodyGlobalQuestion struct {
	Answers            *string `json:"Answers,omitempty" xml:"Answers,omitempty"`
	GlobalQuestionId   *string `json:"GlobalQuestionId,omitempty" xml:"GlobalQuestionId,omitempty"`
	GlobalQuestionName *string `json:"GlobalQuestionName,omitempty" xml:"GlobalQuestionName,omitempty"`
	GlobalQuestionType *string `json:"GlobalQuestionType,omitempty" xml:"GlobalQuestionType,omitempty"`
	Questions          *string `json:"Questions,omitempty" xml:"Questions,omitempty"`
	ScriptId           *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DescribeGlobalQuestionResponseBodyGlobalQuestion) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalQuestionResponseBodyGlobalQuestion) GoString() string {
	return s.String()
}

func (s *DescribeGlobalQuestionResponseBodyGlobalQuestion) SetAnswers(v string) *DescribeGlobalQuestionResponseBodyGlobalQuestion {
	s.Answers = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBodyGlobalQuestion) SetGlobalQuestionId(v string) *DescribeGlobalQuestionResponseBodyGlobalQuestion {
	s.GlobalQuestionId = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBodyGlobalQuestion) SetGlobalQuestionName(v string) *DescribeGlobalQuestionResponseBodyGlobalQuestion {
	s.GlobalQuestionName = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBodyGlobalQuestion) SetGlobalQuestionType(v string) *DescribeGlobalQuestionResponseBodyGlobalQuestion {
	s.GlobalQuestionType = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBodyGlobalQuestion) SetQuestions(v string) *DescribeGlobalQuestionResponseBodyGlobalQuestion {
	s.Questions = &v
	return s
}

func (s *DescribeGlobalQuestionResponseBodyGlobalQuestion) SetScriptId(v string) *DescribeGlobalQuestionResponseBodyGlobalQuestion {
	s.ScriptId = &v
	return s
}

type DescribeGlobalQuestionResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGlobalQuestionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGlobalQuestionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGlobalQuestionResponse) GoString() string {
	return s.String()
}

func (s *DescribeGlobalQuestionResponse) SetHeaders(v map[string]*string) *DescribeGlobalQuestionResponse {
	s.Headers = v
	return s
}

func (s *DescribeGlobalQuestionResponse) SetStatusCode(v int32) *DescribeGlobalQuestionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGlobalQuestionResponse) SetBody(v *DescribeGlobalQuestionResponseBody) *DescribeGlobalQuestionResponse {
	s.Body = v
	return s
}

type DescribeGroupExecutingInfoRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
}

func (s DescribeGroupExecutingInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupExecutingInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupExecutingInfoRequest) SetInstanceId(v string) *DescribeGroupExecutingInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeGroupExecutingInfoRequest) SetJobGroupId(v string) *DescribeGroupExecutingInfoRequest {
	s.JobGroupId = &v
	return s
}

type DescribeGroupExecutingInfoResponseBody struct {
	Code           *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ExecutingInfo  *DescribeGroupExecutingInfoResponseBodyExecutingInfo `json:"ExecutingInfo,omitempty" xml:"ExecutingInfo,omitempty" type:"Struct"`
	GroupId        *string                                              `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HttpStatusCode *int32                                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceId     *string                                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Message        *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeGroupExecutingInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupExecutingInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupExecutingInfoResponseBody) SetCode(v string) *DescribeGroupExecutingInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBody) SetExecutingInfo(v *DescribeGroupExecutingInfoResponseBodyExecutingInfo) *DescribeGroupExecutingInfoResponseBody {
	s.ExecutingInfo = v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBody) SetGroupId(v string) *DescribeGroupExecutingInfoResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBody) SetHttpStatusCode(v int32) *DescribeGroupExecutingInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBody) SetInstanceId(v string) *DescribeGroupExecutingInfoResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBody) SetMessage(v string) *DescribeGroupExecutingInfoResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBody) SetRequestId(v string) *DescribeGroupExecutingInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBody) SetSuccess(v bool) *DescribeGroupExecutingInfoResponseBody {
	s.Success = &v
	return s
}

type DescribeGroupExecutingInfoResponseBodyExecutingInfo struct {
	CallFailedNum       *int32                                                           `json:"CallFailedNum,omitempty" xml:"CallFailedNum,omitempty"`
	CallNum             *int32                                                           `json:"CallNum,omitempty" xml:"CallNum,omitempty"`
	CreatorName         *string                                                          `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	EndTime             *int64                                                           `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FinishedNum         *int32                                                           `json:"FinishedNum,omitempty" xml:"FinishedNum,omitempty"`
	HangUpByClientNum   *int32                                                           `json:"HangUpByClientNum,omitempty" xml:"HangUpByClientNum,omitempty"`
	JobsProgress        *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress `json:"JobsProgress,omitempty" xml:"JobsProgress,omitempty" type:"Struct"`
	StartTime           *int64                                                           `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TransferByIntentNum *int32                                                           `json:"TransferByIntentNum,omitempty" xml:"TransferByIntentNum,omitempty"`
	TransferByNoAnswer  *int32                                                           `json:"TransferByNoAnswer,omitempty" xml:"TransferByNoAnswer,omitempty"`
}

func (s DescribeGroupExecutingInfoResponseBodyExecutingInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupExecutingInfoResponseBodyExecutingInfo) GoString() string {
	return s.String()
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetCallFailedNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.CallFailedNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetCallNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.CallNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetCreatorName(v string) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.CreatorName = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetEndTime(v int64) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.EndTime = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetFinishedNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.FinishedNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetHangUpByClientNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.HangUpByClientNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetJobsProgress(v *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.JobsProgress = v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetStartTime(v int64) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetTransferByIntentNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.TransferByIntentNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfo) SetTransferByNoAnswer(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfo {
	s.TransferByNoAnswer = &v
	return s
}

type DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress struct {
	CancelledNum        *int32 `json:"CancelledNum,omitempty" xml:"CancelledNum,omitempty"`
	ExecutingNum        *int32 `json:"ExecutingNum,omitempty" xml:"ExecutingNum,omitempty"`
	FailedNum           *int32 `json:"FailedNum,omitempty" xml:"FailedNum,omitempty"`
	PausedNum           *int32 `json:"PausedNum,omitempty" xml:"PausedNum,omitempty"`
	SchedulingNum       *int32 `json:"SchedulingNum,omitempty" xml:"SchedulingNum,omitempty"`
	TotalCompletedNum   *int32 `json:"TotalCompletedNum,omitempty" xml:"TotalCompletedNum,omitempty"`
	TotalJobs           *int32 `json:"TotalJobs,omitempty" xml:"TotalJobs,omitempty"`
	TotalNotAnsweredNum *int32 `json:"TotalNotAnsweredNum,omitempty" xml:"TotalNotAnsweredNum,omitempty"`
}

func (s DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) GoString() string {
	return s.String()
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetCancelledNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.CancelledNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetExecutingNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.ExecutingNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetFailedNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.FailedNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetPausedNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.PausedNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetSchedulingNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.SchedulingNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetTotalCompletedNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.TotalCompletedNum = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetTotalJobs(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.TotalJobs = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress) SetTotalNotAnsweredNum(v int32) *DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress {
	s.TotalNotAnsweredNum = &v
	return s
}

type DescribeGroupExecutingInfoResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGroupExecutingInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGroupExecutingInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupExecutingInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupExecutingInfoResponse) SetHeaders(v map[string]*string) *DescribeGroupExecutingInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupExecutingInfoResponse) SetStatusCode(v int32) *DescribeGroupExecutingInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupExecutingInfoResponse) SetBody(v *DescribeGroupExecutingInfoResponseBody) *DescribeGroupExecutingInfoResponse {
	s.Body = v
	return s
}

type DescribeInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRequest) SetInstanceId(v string) *DescribeInstanceRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceResponseBody struct {
	Code           *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Instance       *DescribeInstanceResponseBodyInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	Message        *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBody) SetCode(v string) *DescribeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceResponseBody) SetHttpStatusCode(v int32) *DescribeInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeInstanceResponseBody) SetInstance(v *DescribeInstanceResponseBodyInstance) *DescribeInstanceResponseBody {
	s.Instance = v
	return s
}

func (s *DescribeInstanceResponseBody) SetMessage(v string) *DescribeInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceResponseBody) SetRequestId(v string) *DescribeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceResponseBody) SetSuccess(v bool) *DescribeInstanceResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceResponseBodyInstance struct {
	CreationTime              *int64  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CreatorId                 *int64  `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	CreatorName               *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	InstanceDescription       *string `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId                *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName              *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxConcurrentConversation *int32  `json:"MaxConcurrentConversation,omitempty" xml:"MaxConcurrentConversation,omitempty"`
	OwnerName                 *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	ResourceGroupId           *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeInstanceResponseBodyInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstance) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstance) SetCreationTime(v int64) *DescribeInstanceResponseBodyInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetCreatorId(v int64) *DescribeInstanceResponseBodyInstance {
	s.CreatorId = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetCreatorName(v string) *DescribeInstanceResponseBodyInstance {
	s.CreatorName = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInstanceDescription(v string) *DescribeInstanceResponseBodyInstance {
	s.InstanceDescription = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInstanceId(v string) *DescribeInstanceResponseBodyInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInstanceName(v string) *DescribeInstanceResponseBodyInstance {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetMaxConcurrentConversation(v int32) *DescribeInstanceResponseBodyInstance {
	s.MaxConcurrentConversation = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetOwnerName(v string) *DescribeInstanceResponseBodyInstance {
	s.OwnerName = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetResourceGroupId(v string) *DescribeInstanceResponseBodyInstance {
	s.ResourceGroupId = &v
	return s
}

type DescribeInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponse) SetHeaders(v map[string]*string) *DescribeInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceResponse) SetStatusCode(v int32) *DescribeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceResponse) SetBody(v *DescribeInstanceResponseBody) *DescribeInstanceResponse {
	s.Body = v
	return s
}

type DescribeIntentRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntentId   *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DescribeIntentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentRequest) GoString() string {
	return s.String()
}

func (s *DescribeIntentRequest) SetInstanceId(v string) *DescribeIntentRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeIntentRequest) SetIntentId(v string) *DescribeIntentRequest {
	s.IntentId = &v
	return s
}

func (s *DescribeIntentRequest) SetScriptId(v string) *DescribeIntentRequest {
	s.ScriptId = &v
	return s
}

type DescribeIntentResponseBody struct {
	Code           *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Intent         *DescribeIntentResponseBodyIntent `json:"Intent,omitempty" xml:"Intent,omitempty" type:"Struct"`
	Message        *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeIntentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIntentResponseBody) SetCode(v string) *DescribeIntentResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeIntentResponseBody) SetHttpStatusCode(v int32) *DescribeIntentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeIntentResponseBody) SetIntent(v *DescribeIntentResponseBodyIntent) *DescribeIntentResponseBody {
	s.Intent = v
	return s
}

func (s *DescribeIntentResponseBody) SetMessage(v string) *DescribeIntentResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeIntentResponseBody) SetRequestId(v string) *DescribeIntentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIntentResponseBody) SetSuccess(v bool) *DescribeIntentResponseBody {
	s.Success = &v
	return s
}

type DescribeIntentResponseBodyIntent struct {
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IntentDescription *string `json:"IntentDescription,omitempty" xml:"IntentDescription,omitempty"`
	IntentId          *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	IntentName        *string `json:"IntentName,omitempty" xml:"IntentName,omitempty"`
	Keywords          *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	UpdateTime        *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Utterances        *string `json:"Utterances,omitempty" xml:"Utterances,omitempty"`
}

func (s DescribeIntentResponseBodyIntent) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentResponseBodyIntent) GoString() string {
	return s.String()
}

func (s *DescribeIntentResponseBodyIntent) SetCreateTime(v int64) *DescribeIntentResponseBodyIntent {
	s.CreateTime = &v
	return s
}

func (s *DescribeIntentResponseBodyIntent) SetIntentDescription(v string) *DescribeIntentResponseBodyIntent {
	s.IntentDescription = &v
	return s
}

func (s *DescribeIntentResponseBodyIntent) SetIntentId(v string) *DescribeIntentResponseBodyIntent {
	s.IntentId = &v
	return s
}

func (s *DescribeIntentResponseBodyIntent) SetIntentName(v string) *DescribeIntentResponseBodyIntent {
	s.IntentName = &v
	return s
}

func (s *DescribeIntentResponseBodyIntent) SetKeywords(v string) *DescribeIntentResponseBodyIntent {
	s.Keywords = &v
	return s
}

func (s *DescribeIntentResponseBodyIntent) SetScriptId(v string) *DescribeIntentResponseBodyIntent {
	s.ScriptId = &v
	return s
}

func (s *DescribeIntentResponseBodyIntent) SetUpdateTime(v int64) *DescribeIntentResponseBodyIntent {
	s.UpdateTime = &v
	return s
}

func (s *DescribeIntentResponseBodyIntent) SetUtterances(v string) *DescribeIntentResponseBodyIntent {
	s.Utterances = &v
	return s
}

type DescribeIntentResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeIntentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeIntentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentResponse) GoString() string {
	return s.String()
}

func (s *DescribeIntentResponse) SetHeaders(v map[string]*string) *DescribeIntentResponse {
	s.Headers = v
	return s
}

func (s *DescribeIntentResponse) SetStatusCode(v int32) *DescribeIntentResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIntentResponse) SetBody(v *DescribeIntentResponseBody) *DescribeIntentResponse {
	s.Body = v
	return s
}

type DescribeIntentStatisticsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	Limit      *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
}

func (s DescribeIntentStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIntentStatisticsRequest) SetInstanceId(v string) *DescribeIntentStatisticsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeIntentStatisticsRequest) SetJobGroupId(v string) *DescribeIntentStatisticsRequest {
	s.JobGroupId = &v
	return s
}

func (s *DescribeIntentStatisticsRequest) SetLimit(v int32) *DescribeIntentStatisticsRequest {
	s.Limit = &v
	return s
}

type DescribeIntentStatisticsResponseBody struct {
	Code                 *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	GlobalIntentNum      *int32                                                      `json:"GlobalIntentNum,omitempty" xml:"GlobalIntentNum,omitempty"`
	GlobalIntents        []*DescribeIntentStatisticsResponseBodyGlobalIntents        `json:"GlobalIntents,omitempty" xml:"GlobalIntents,omitempty" type:"Repeated"`
	GroupId              *string                                                     `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HttpStatusCode       *int32                                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceId           *string                                                     `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntentsAfterNoAnswer []*DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer `json:"IntentsAfterNoAnswer,omitempty" xml:"IntentsAfterNoAnswer,omitempty" type:"Repeated"`
	Message              *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	ProcessIntentNum     *int32                                                      `json:"ProcessIntentNum,omitempty" xml:"ProcessIntentNum,omitempty"`
	ProcessIntents       []*DescribeIntentStatisticsResponseBodyProcessIntents       `json:"ProcessIntents,omitempty" xml:"ProcessIntents,omitempty" type:"Repeated"`
	RequestId            *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success              *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeIntentStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIntentStatisticsResponseBody) SetCode(v string) *DescribeIntentStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetGlobalIntentNum(v int32) *DescribeIntentStatisticsResponseBody {
	s.GlobalIntentNum = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetGlobalIntents(v []*DescribeIntentStatisticsResponseBodyGlobalIntents) *DescribeIntentStatisticsResponseBody {
	s.GlobalIntents = v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetGroupId(v string) *DescribeIntentStatisticsResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetHttpStatusCode(v int32) *DescribeIntentStatisticsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetInstanceId(v string) *DescribeIntentStatisticsResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetIntentsAfterNoAnswer(v []*DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer) *DescribeIntentStatisticsResponseBody {
	s.IntentsAfterNoAnswer = v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetMessage(v string) *DescribeIntentStatisticsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetProcessIntentNum(v int32) *DescribeIntentStatisticsResponseBody {
	s.ProcessIntentNum = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetProcessIntents(v []*DescribeIntentStatisticsResponseBodyProcessIntents) *DescribeIntentStatisticsResponseBody {
	s.ProcessIntents = v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetRequestId(v string) *DescribeIntentStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBody) SetSuccess(v bool) *DescribeIntentStatisticsResponseBody {
	s.Success = &v
	return s
}

type DescribeIntentStatisticsResponseBodyGlobalIntents struct {
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HitAfterNoAnswer *int32  `json:"HitAfterNoAnswer,omitempty" xml:"HitAfterNoAnswer,omitempty"`
	HitNum           *int32  `json:"HitNum,omitempty" xml:"HitNum,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntentId         *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	IntentName       *string `json:"IntentName,omitempty" xml:"IntentName,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeIntentStatisticsResponseBodyGlobalIntents) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentStatisticsResponseBodyGlobalIntents) GoString() string {
	return s.String()
}

func (s *DescribeIntentStatisticsResponseBodyGlobalIntents) SetGroupId(v string) *DescribeIntentStatisticsResponseBodyGlobalIntents {
	s.GroupId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyGlobalIntents) SetHitAfterNoAnswer(v int32) *DescribeIntentStatisticsResponseBodyGlobalIntents {
	s.HitAfterNoAnswer = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyGlobalIntents) SetHitNum(v int32) *DescribeIntentStatisticsResponseBodyGlobalIntents {
	s.HitNum = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyGlobalIntents) SetInstanceId(v string) *DescribeIntentStatisticsResponseBodyGlobalIntents {
	s.InstanceId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyGlobalIntents) SetIntentId(v string) *DescribeIntentStatisticsResponseBodyGlobalIntents {
	s.IntentId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyGlobalIntents) SetIntentName(v string) *DescribeIntentStatisticsResponseBodyGlobalIntents {
	s.IntentName = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyGlobalIntents) SetType(v string) *DescribeIntentStatisticsResponseBodyGlobalIntents {
	s.Type = &v
	return s
}

type DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer) GoString() string {
	return s.String()
}

func (s *DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer) SetInstanceId(v string) *DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer {
	s.InstanceId = &v
	return s
}

type DescribeIntentStatisticsResponseBodyProcessIntents struct {
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HitAfterNoAnswer *int32  `json:"HitAfterNoAnswer,omitempty" xml:"HitAfterNoAnswer,omitempty"`
	HitNum           *int32  `json:"HitNum,omitempty" xml:"HitNum,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntentId         *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	IntentName       *string `json:"IntentName,omitempty" xml:"IntentName,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeIntentStatisticsResponseBodyProcessIntents) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentStatisticsResponseBodyProcessIntents) GoString() string {
	return s.String()
}

func (s *DescribeIntentStatisticsResponseBodyProcessIntents) SetGroupId(v string) *DescribeIntentStatisticsResponseBodyProcessIntents {
	s.GroupId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyProcessIntents) SetHitAfterNoAnswer(v int32) *DescribeIntentStatisticsResponseBodyProcessIntents {
	s.HitAfterNoAnswer = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyProcessIntents) SetHitNum(v int32) *DescribeIntentStatisticsResponseBodyProcessIntents {
	s.HitNum = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyProcessIntents) SetInstanceId(v string) *DescribeIntentStatisticsResponseBodyProcessIntents {
	s.InstanceId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyProcessIntents) SetIntentId(v string) *DescribeIntentStatisticsResponseBodyProcessIntents {
	s.IntentId = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyProcessIntents) SetIntentName(v string) *DescribeIntentStatisticsResponseBodyProcessIntents {
	s.IntentName = &v
	return s
}

func (s *DescribeIntentStatisticsResponseBodyProcessIntents) SetType(v string) *DescribeIntentStatisticsResponseBodyProcessIntents {
	s.Type = &v
	return s
}

type DescribeIntentStatisticsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeIntentStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeIntentStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIntentStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIntentStatisticsResponse) SetHeaders(v map[string]*string) *DescribeIntentStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIntentStatisticsResponse) SetStatusCode(v int32) *DescribeIntentStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIntentStatisticsResponse) SetBody(v *DescribeIntentStatisticsResponseBody) *DescribeIntentStatisticsResponse {
	s.Body = v
	return s
}

type DescribeJobRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	WithScript *bool   `json:"WithScript,omitempty" xml:"WithScript,omitempty"`
}

func (s DescribeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobRequest) SetInstanceId(v string) *DescribeJobRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeJobRequest) SetJobId(v string) *DescribeJobRequest {
	s.JobId = &v
	return s
}

func (s *DescribeJobRequest) SetWithScript(v bool) *DescribeJobRequest {
	s.WithScript = &v
	return s
}

type DescribeJobResponseBody struct {
	Code           *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Job            *DescribeJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	Message        *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBody) SetCode(v string) *DescribeJobResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobResponseBody) SetHttpStatusCode(v int32) *DescribeJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeJobResponseBody) SetJob(v *DescribeJobResponseBodyJob) *DescribeJobResponseBody {
	s.Job = v
	return s
}

func (s *DescribeJobResponseBody) SetMessage(v string) *DescribeJobResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeJobResponseBody) SetRequestId(v string) *DescribeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobResponseBody) SetSuccess(v bool) *DescribeJobResponseBody {
	s.Success = &v
	return s
}

type DescribeJobResponseBodyJob struct {
	ActualTime        *int64                                `json:"ActualTime,omitempty" xml:"ActualTime,omitempty"`
	CalledNumber      *string                               `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumbers    []*string                             `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	Contacts          []*DescribeJobResponseBodyJobContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	DsReport          *string                               `json:"DsReport,omitempty" xml:"DsReport,omitempty"`
	EndReason         *int32                                `json:"EndReason,omitempty" xml:"EndReason,omitempty"`
	Extras            []*DescribeJobResponseBodyJobExtras   `json:"Extras,omitempty" xml:"Extras,omitempty" type:"Repeated"`
	FailureReason     *string                               `json:"FailureReason,omitempty" xml:"FailureReason,omitempty"`
	InstanceId        *string                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId        *string                               `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId             *string                               `json:"JobId,omitempty" xml:"JobId,omitempty"`
	NextExecutionTime *int64                                `json:"NextExecutionTime,omitempty" xml:"NextExecutionTime,omitempty"`
	Priority          *int32                                `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ReferenceId       *string                               `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	ScenarioId        *string                               `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Script            *DescribeJobResponseBodyJobScript     `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	Status            *string                               `json:"Status,omitempty" xml:"Status,omitempty"`
	StrategyId        *string                               `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	Summary           []*DescribeJobResponseBodyJobSummary  `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
	SystemPriority    *int32                                `json:"SystemPriority,omitempty" xml:"SystemPriority,omitempty"`
	Tasks             []*DescribeJobResponseBodyJobTasks    `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
}

func (s DescribeJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJob) SetActualTime(v int64) *DescribeJobResponseBodyJob {
	s.ActualTime = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetCalledNumber(v string) *DescribeJobResponseBodyJob {
	s.CalledNumber = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetCallingNumbers(v []*string) *DescribeJobResponseBodyJob {
	s.CallingNumbers = v
	return s
}

func (s *DescribeJobResponseBodyJob) SetContacts(v []*DescribeJobResponseBodyJobContacts) *DescribeJobResponseBodyJob {
	s.Contacts = v
	return s
}

func (s *DescribeJobResponseBodyJob) SetDsReport(v string) *DescribeJobResponseBodyJob {
	s.DsReport = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetEndReason(v int32) *DescribeJobResponseBodyJob {
	s.EndReason = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetExtras(v []*DescribeJobResponseBodyJobExtras) *DescribeJobResponseBodyJob {
	s.Extras = v
	return s
}

func (s *DescribeJobResponseBodyJob) SetFailureReason(v string) *DescribeJobResponseBodyJob {
	s.FailureReason = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetInstanceId(v string) *DescribeJobResponseBodyJob {
	s.InstanceId = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetJobGroupId(v string) *DescribeJobResponseBodyJob {
	s.JobGroupId = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetJobId(v string) *DescribeJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetNextExecutionTime(v int64) *DescribeJobResponseBodyJob {
	s.NextExecutionTime = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetPriority(v int32) *DescribeJobResponseBodyJob {
	s.Priority = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetReferenceId(v string) *DescribeJobResponseBodyJob {
	s.ReferenceId = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetScenarioId(v string) *DescribeJobResponseBodyJob {
	s.ScenarioId = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetScript(v *DescribeJobResponseBodyJobScript) *DescribeJobResponseBodyJob {
	s.Script = v
	return s
}

func (s *DescribeJobResponseBodyJob) SetStatus(v string) *DescribeJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetStrategyId(v string) *DescribeJobResponseBodyJob {
	s.StrategyId = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetSummary(v []*DescribeJobResponseBodyJobSummary) *DescribeJobResponseBodyJob {
	s.Summary = v
	return s
}

func (s *DescribeJobResponseBodyJob) SetSystemPriority(v int32) *DescribeJobResponseBodyJob {
	s.SystemPriority = &v
	return s
}

func (s *DescribeJobResponseBodyJob) SetTasks(v []*DescribeJobResponseBodyJobTasks) *DescribeJobResponseBodyJob {
	s.Tasks = v
	return s
}

type DescribeJobResponseBodyJobContacts struct {
	ContactId   *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Honorific   *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role        *string `json:"Role,omitempty" xml:"Role,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeJobResponseBodyJobContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobContacts) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobContacts) SetContactId(v string) *DescribeJobResponseBodyJobContacts {
	s.ContactId = &v
	return s
}

func (s *DescribeJobResponseBodyJobContacts) SetContactName(v string) *DescribeJobResponseBodyJobContacts {
	s.ContactName = &v
	return s
}

func (s *DescribeJobResponseBodyJobContacts) SetHonorific(v string) *DescribeJobResponseBodyJobContacts {
	s.Honorific = &v
	return s
}

func (s *DescribeJobResponseBodyJobContacts) SetJobId(v string) *DescribeJobResponseBodyJobContacts {
	s.JobId = &v
	return s
}

func (s *DescribeJobResponseBodyJobContacts) SetPhoneNumber(v string) *DescribeJobResponseBodyJobContacts {
	s.PhoneNumber = &v
	return s
}

func (s *DescribeJobResponseBodyJobContacts) SetReferenceId(v string) *DescribeJobResponseBodyJobContacts {
	s.ReferenceId = &v
	return s
}

func (s *DescribeJobResponseBodyJobContacts) SetRole(v string) *DescribeJobResponseBodyJobContacts {
	s.Role = &v
	return s
}

func (s *DescribeJobResponseBodyJobContacts) SetState(v string) *DescribeJobResponseBodyJobContacts {
	s.State = &v
	return s
}

type DescribeJobResponseBodyJobExtras struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeJobResponseBodyJobExtras) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobExtras) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobExtras) SetKey(v string) *DescribeJobResponseBodyJobExtras {
	s.Key = &v
	return s
}

func (s *DescribeJobResponseBodyJobExtras) SetValue(v string) *DescribeJobResponseBodyJobExtras {
	s.Value = &v
	return s
}

type DescribeJobResponseBodyJobScript struct {
	AsrConfig                 *string `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty"`
	ChatbotId                 *string `json:"ChatbotId,omitempty" xml:"ChatbotId,omitempty"`
	DebugStatus               *string `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	Industry                  *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDebugDrafted            *bool   `json:"IsDebugDrafted,omitempty" xml:"IsDebugDrafted,omitempty"`
	IsDrafted                 *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	MiniPlaybackConfigEnabled *bool   `json:"MiniPlaybackConfigEnabled,omitempty" xml:"MiniPlaybackConfigEnabled,omitempty"`
	Name                      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Scene                     *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptDescription         *string `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId                  *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	Status                    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TtsConfig                 *string `json:"TtsConfig,omitempty" xml:"TtsConfig,omitempty"`
	UpdateTime                *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeJobResponseBodyJobScript) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobScript) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobScript) SetAsrConfig(v string) *DescribeJobResponseBodyJobScript {
	s.AsrConfig = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetChatbotId(v string) *DescribeJobResponseBodyJobScript {
	s.ChatbotId = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetDebugStatus(v string) *DescribeJobResponseBodyJobScript {
	s.DebugStatus = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetIndustry(v string) *DescribeJobResponseBodyJobScript {
	s.Industry = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetIsDebugDrafted(v bool) *DescribeJobResponseBodyJobScript {
	s.IsDebugDrafted = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetIsDrafted(v bool) *DescribeJobResponseBodyJobScript {
	s.IsDrafted = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetMiniPlaybackConfigEnabled(v bool) *DescribeJobResponseBodyJobScript {
	s.MiniPlaybackConfigEnabled = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetName(v string) *DescribeJobResponseBodyJobScript {
	s.Name = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetScene(v string) *DescribeJobResponseBodyJobScript {
	s.Scene = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetScriptDescription(v string) *DescribeJobResponseBodyJobScript {
	s.ScriptDescription = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetScriptId(v string) *DescribeJobResponseBodyJobScript {
	s.ScriptId = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetStatus(v string) *DescribeJobResponseBodyJobScript {
	s.Status = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetTtsConfig(v string) *DescribeJobResponseBodyJobScript {
	s.TtsConfig = &v
	return s
}

func (s *DescribeJobResponseBodyJobScript) SetUpdateTime(v int64) *DescribeJobResponseBodyJobScript {
	s.UpdateTime = &v
	return s
}

type DescribeJobResponseBodyJobSummary struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	SummaryName *string `json:"SummaryName,omitempty" xml:"SummaryName,omitempty"`
}

func (s DescribeJobResponseBodyJobSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobSummary) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobSummary) SetCategory(v string) *DescribeJobResponseBodyJobSummary {
	s.Category = &v
	return s
}

func (s *DescribeJobResponseBodyJobSummary) SetContent(v string) *DescribeJobResponseBodyJobSummary {
	s.Content = &v
	return s
}

func (s *DescribeJobResponseBodyJobSummary) SetSummaryName(v string) *DescribeJobResponseBodyJobSummary {
	s.SummaryName = &v
	return s
}

type DescribeJobResponseBodyJobTasks struct {
	ActualTime      *int64                                         `json:"ActualTime,omitempty" xml:"ActualTime,omitempty"`
	Brief           *string                                        `json:"Brief,omitempty" xml:"Brief,omitempty"`
	CallId          *string                                        `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CalledNumber    *string                                        `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber   *string                                        `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ChatbotId       *string                                        `json:"ChatbotId,omitempty" xml:"ChatbotId,omitempty"`
	Contact         *DescribeJobResponseBodyJobTasksContact        `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Struct"`
	Conversation    []*DescribeJobResponseBodyJobTasksConversation `json:"Conversation,omitempty" xml:"Conversation,omitempty" type:"Repeated"`
	Duration        *int32                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndReason       *string                                        `json:"EndReason,omitempty" xml:"EndReason,omitempty"`
	EndTime         *int64                                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	HangUpDirection *string                                        `json:"HangUpDirection,omitempty" xml:"HangUpDirection,omitempty"`
	JobId           *string                                        `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PlanedTime      *int64                                         `json:"PlanedTime,omitempty" xml:"PlanedTime,omitempty"`
	RingingDuration *int64                                         `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
	ScenarioId      *string                                        `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Status          *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId          *string                                        `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeJobResponseBodyJobTasks) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobTasks) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobTasks) SetActualTime(v int64) *DescribeJobResponseBodyJobTasks {
	s.ActualTime = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetBrief(v string) *DescribeJobResponseBodyJobTasks {
	s.Brief = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetCallId(v string) *DescribeJobResponseBodyJobTasks {
	s.CallId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetCalledNumber(v string) *DescribeJobResponseBodyJobTasks {
	s.CalledNumber = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetCallingNumber(v string) *DescribeJobResponseBodyJobTasks {
	s.CallingNumber = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetChatbotId(v string) *DescribeJobResponseBodyJobTasks {
	s.ChatbotId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetContact(v *DescribeJobResponseBodyJobTasksContact) *DescribeJobResponseBodyJobTasks {
	s.Contact = v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetConversation(v []*DescribeJobResponseBodyJobTasksConversation) *DescribeJobResponseBodyJobTasks {
	s.Conversation = v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetDuration(v int32) *DescribeJobResponseBodyJobTasks {
	s.Duration = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetEndReason(v string) *DescribeJobResponseBodyJobTasks {
	s.EndReason = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetEndTime(v int64) *DescribeJobResponseBodyJobTasks {
	s.EndTime = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetHangUpDirection(v string) *DescribeJobResponseBodyJobTasks {
	s.HangUpDirection = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetJobId(v string) *DescribeJobResponseBodyJobTasks {
	s.JobId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetPlanedTime(v int64) *DescribeJobResponseBodyJobTasks {
	s.PlanedTime = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetRingingDuration(v int64) *DescribeJobResponseBodyJobTasks {
	s.RingingDuration = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetScenarioId(v string) *DescribeJobResponseBodyJobTasks {
	s.ScenarioId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetStatus(v string) *DescribeJobResponseBodyJobTasks {
	s.Status = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasks) SetTaskId(v string) *DescribeJobResponseBodyJobTasks {
	s.TaskId = &v
	return s
}

type DescribeJobResponseBodyJobTasksContact struct {
	ContactId   *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Honorific   *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role        *string `json:"Role,omitempty" xml:"Role,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeJobResponseBodyJobTasksContact) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobTasksContact) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobTasksContact) SetContactId(v string) *DescribeJobResponseBodyJobTasksContact {
	s.ContactId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksContact) SetContactName(v string) *DescribeJobResponseBodyJobTasksContact {
	s.ContactName = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksContact) SetHonorific(v string) *DescribeJobResponseBodyJobTasksContact {
	s.Honorific = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksContact) SetJobId(v string) *DescribeJobResponseBodyJobTasksContact {
	s.JobId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksContact) SetPhoneNumber(v string) *DescribeJobResponseBodyJobTasksContact {
	s.PhoneNumber = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksContact) SetReferenceId(v string) *DescribeJobResponseBodyJobTasksContact {
	s.ReferenceId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksContact) SetRole(v string) *DescribeJobResponseBodyJobTasksContact {
	s.Role = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksContact) SetState(v string) *DescribeJobResponseBodyJobTasksContact {
	s.State = &v
	return s
}

type DescribeJobResponseBodyJobTasksConversation struct {
	Action       *string                                               `json:"Action,omitempty" xml:"Action,omitempty"`
	ActionParams *string                                               `json:"ActionParams,omitempty" xml:"ActionParams,omitempty"`
	Script       *string                                               `json:"Script,omitempty" xml:"Script,omitempty"`
	SequenceId   *string                                               `json:"SequenceId,omitempty" xml:"SequenceId,omitempty"`
	Speaker      *string                                               `json:"Speaker,omitempty" xml:"Speaker,omitempty"`
	Summary      []*DescribeJobResponseBodyJobTasksConversationSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
	Timestamp    *int64                                                `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeJobResponseBodyJobTasksConversation) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobTasksConversation) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobTasksConversation) SetAction(v string) *DescribeJobResponseBodyJobTasksConversation {
	s.Action = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversation) SetActionParams(v string) *DescribeJobResponseBodyJobTasksConversation {
	s.ActionParams = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversation) SetScript(v string) *DescribeJobResponseBodyJobTasksConversation {
	s.Script = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversation) SetSequenceId(v string) *DescribeJobResponseBodyJobTasksConversation {
	s.SequenceId = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversation) SetSpeaker(v string) *DescribeJobResponseBodyJobTasksConversation {
	s.Speaker = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversation) SetSummary(v []*DescribeJobResponseBodyJobTasksConversationSummary) *DescribeJobResponseBodyJobTasksConversation {
	s.Summary = v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversation) SetTimestamp(v int64) *DescribeJobResponseBodyJobTasksConversation {
	s.Timestamp = &v
	return s
}

type DescribeJobResponseBodyJobTasksConversationSummary struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	SummaryName *string `json:"SummaryName,omitempty" xml:"SummaryName,omitempty"`
}

func (s DescribeJobResponseBodyJobTasksConversationSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyJobTasksConversationSummary) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyJobTasksConversationSummary) SetCategory(v string) *DescribeJobResponseBodyJobTasksConversationSummary {
	s.Category = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversationSummary) SetContent(v string) *DescribeJobResponseBodyJobTasksConversationSummary {
	s.Content = &v
	return s
}

func (s *DescribeJobResponseBodyJobTasksConversationSummary) SetSummaryName(v string) *DescribeJobResponseBodyJobTasksConversationSummary {
	s.SummaryName = &v
	return s
}

type DescribeJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobResponse) SetHeaders(v map[string]*string) *DescribeJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobResponse) SetStatusCode(v int32) *DescribeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobResponse) SetBody(v *DescribeJobResponseBody) *DescribeJobResponse {
	s.Body = v
	return s
}

type DescribeJobDataParsingTaskProgressRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobDataParsingTaskId *string `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
}

func (s DescribeJobDataParsingTaskProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobDataParsingTaskProgressRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobDataParsingTaskProgressRequest) SetInstanceId(v string) *DescribeJobDataParsingTaskProgressRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressRequest) SetJobDataParsingTaskId(v string) *DescribeJobDataParsingTaskProgressRequest {
	s.JobDataParsingTaskId = &v
	return s
}

type DescribeJobDataParsingTaskProgressResponseBody struct {
	Code           *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	Progress       *DescribeJobDataParsingTaskProgressResponseBodyProgress `json:"Progress,omitempty" xml:"Progress,omitempty" type:"Struct"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeJobDataParsingTaskProgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobDataParsingTaskProgressResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobDataParsingTaskProgressResponseBody) SetCode(v string) *DescribeJobDataParsingTaskProgressResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBody) SetHttpStatusCode(v int32) *DescribeJobDataParsingTaskProgressResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBody) SetMessage(v string) *DescribeJobDataParsingTaskProgressResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBody) SetProgress(v *DescribeJobDataParsingTaskProgressResponseBodyProgress) *DescribeJobDataParsingTaskProgressResponseBody {
	s.Progress = v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBody) SetRequestId(v string) *DescribeJobDataParsingTaskProgressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBody) SetSuccess(v bool) *DescribeJobDataParsingTaskProgressResponseBody {
	s.Success = &v
	return s
}

type DescribeJobDataParsingTaskProgressResponseBodyProgress struct {
	FailErrorCode   *string `json:"FailErrorCode,omitempty" xml:"FailErrorCode,omitempty"`
	FailReason      *string `json:"FailReason,omitempty" xml:"FailReason,omitempty"`
	FeedbackUrl     *string `json:"FeedbackUrl,omitempty" xml:"FeedbackUrl,omitempty"`
	HandledJobCount *int32  `json:"HandledJobCount,omitempty" xml:"HandledJobCount,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalJobCount   *int32  `json:"TotalJobCount,omitempty" xml:"TotalJobCount,omitempty"`
}

func (s DescribeJobDataParsingTaskProgressResponseBodyProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobDataParsingTaskProgressResponseBodyProgress) GoString() string {
	return s.String()
}

func (s *DescribeJobDataParsingTaskProgressResponseBodyProgress) SetFailErrorCode(v string) *DescribeJobDataParsingTaskProgressResponseBodyProgress {
	s.FailErrorCode = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBodyProgress) SetFailReason(v string) *DescribeJobDataParsingTaskProgressResponseBodyProgress {
	s.FailReason = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBodyProgress) SetFeedbackUrl(v string) *DescribeJobDataParsingTaskProgressResponseBodyProgress {
	s.FeedbackUrl = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBodyProgress) SetHandledJobCount(v int32) *DescribeJobDataParsingTaskProgressResponseBodyProgress {
	s.HandledJobCount = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBodyProgress) SetStatus(v string) *DescribeJobDataParsingTaskProgressResponseBodyProgress {
	s.Status = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponseBodyProgress) SetTotalJobCount(v int32) *DescribeJobDataParsingTaskProgressResponseBodyProgress {
	s.TotalJobCount = &v
	return s
}

type DescribeJobDataParsingTaskProgressResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeJobDataParsingTaskProgressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeJobDataParsingTaskProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobDataParsingTaskProgressResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobDataParsingTaskProgressResponse) SetHeaders(v map[string]*string) *DescribeJobDataParsingTaskProgressResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponse) SetStatusCode(v int32) *DescribeJobDataParsingTaskProgressResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobDataParsingTaskProgressResponse) SetBody(v *DescribeJobDataParsingTaskProgressResponseBody) *DescribeJobDataParsingTaskProgressResponse {
	s.Body = v
	return s
}

type DescribeJobGroupRequest struct {
	BriefTypes []*string `json:"BriefTypes,omitempty" xml:"BriefTypes,omitempty" type:"Repeated"`
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
}

func (s DescribeJobGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupRequest) SetBriefTypes(v []*string) *DescribeJobGroupRequest {
	s.BriefTypes = v
	return s
}

func (s *DescribeJobGroupRequest) SetInstanceId(v string) *DescribeJobGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeJobGroupRequest) SetJobGroupId(v string) *DescribeJobGroupRequest {
	s.JobGroupId = &v
	return s
}

type DescribeJobGroupResponseBody struct {
	Code           *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroup       *DescribeJobGroupResponseBodyJobGroup `json:"JobGroup,omitempty" xml:"JobGroup,omitempty" type:"Struct"`
	Message        *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeJobGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBody) SetCode(v string) *DescribeJobGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobGroupResponseBody) SetHttpStatusCode(v int32) *DescribeJobGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeJobGroupResponseBody) SetJobGroup(v *DescribeJobGroupResponseBodyJobGroup) *DescribeJobGroupResponseBody {
	s.JobGroup = v
	return s
}

func (s *DescribeJobGroupResponseBody) SetMessage(v string) *DescribeJobGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeJobGroupResponseBody) SetRequestId(v string) *DescribeJobGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobGroupResponseBody) SetSuccess(v bool) *DescribeJobGroupResponseBody {
	s.Success = &v
	return s
}

type DescribeJobGroupResponseBodyJobGroup struct {
	CallingNumbers       []*string                                           `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	CreationTime         *int64                                              `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ExportProgress       *DescribeJobGroupResponseBodyJobGroupExportProgress `json:"ExportProgress,omitempty" xml:"ExportProgress,omitempty" type:"Struct"`
	JobDataParsingTaskId *string                                             `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
	JobFilePath          *string                                             `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
	JobGroupDescription  *string                                             `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupId           *string                                             `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupName         *string                                             `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	MinConcurrency       *int64                                              `json:"MinConcurrency,omitempty" xml:"MinConcurrency,omitempty"`
	ModifyTime           *string                                             `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Priority             *string                                             `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Progress             *DescribeJobGroupResponseBodyJobGroupProgress       `json:"Progress,omitempty" xml:"Progress,omitempty" type:"Struct"`
	RecallStrategy       *DescribeJobGroupResponseBodyJobGroupRecallStrategy `json:"RecallStrategy,omitempty" xml:"RecallStrategy,omitempty" type:"Struct"`
	Result               *DescribeJobGroupResponseBodyJobGroupResult         `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	RingingDuration      *int64                                              `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
	ScenarioId           *string                                             `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptId             *string                                             `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName           *string                                             `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptVersion        *string                                             `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
	Status               *string                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	Strategy             *DescribeJobGroupResponseBodyJobGroupStrategy       `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
}

func (s DescribeJobGroupResponseBodyJobGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroup) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetCallingNumbers(v []*string) *DescribeJobGroupResponseBodyJobGroup {
	s.CallingNumbers = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetCreationTime(v int64) *DescribeJobGroupResponseBodyJobGroup {
	s.CreationTime = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetExportProgress(v *DescribeJobGroupResponseBodyJobGroupExportProgress) *DescribeJobGroupResponseBodyJobGroup {
	s.ExportProgress = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetJobDataParsingTaskId(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.JobDataParsingTaskId = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetJobFilePath(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.JobFilePath = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetJobGroupDescription(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.JobGroupDescription = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetJobGroupId(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.JobGroupId = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetJobGroupName(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.JobGroupName = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetMinConcurrency(v int64) *DescribeJobGroupResponseBodyJobGroup {
	s.MinConcurrency = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetModifyTime(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.ModifyTime = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetPriority(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.Priority = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetProgress(v *DescribeJobGroupResponseBodyJobGroupProgress) *DescribeJobGroupResponseBodyJobGroup {
	s.Progress = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetRecallStrategy(v *DescribeJobGroupResponseBodyJobGroupRecallStrategy) *DescribeJobGroupResponseBodyJobGroup {
	s.RecallStrategy = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetResult(v *DescribeJobGroupResponseBodyJobGroupResult) *DescribeJobGroupResponseBodyJobGroup {
	s.Result = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetRingingDuration(v int64) *DescribeJobGroupResponseBodyJobGroup {
	s.RingingDuration = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetScenarioId(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.ScenarioId = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetScriptId(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.ScriptId = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetScriptName(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.ScriptName = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetScriptVersion(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.ScriptVersion = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetStatus(v string) *DescribeJobGroupResponseBodyJobGroup {
	s.Status = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroup) SetStrategy(v *DescribeJobGroupResponseBodyJobGroupStrategy) *DescribeJobGroupResponseBodyJobGroup {
	s.Strategy = v
	return s
}

type DescribeJobGroupResponseBodyJobGroupExportProgress struct {
	FileHttpUrl *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	Progress    *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeJobGroupResponseBodyJobGroupExportProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupExportProgress) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupExportProgress) SetFileHttpUrl(v string) *DescribeJobGroupResponseBodyJobGroupExportProgress {
	s.FileHttpUrl = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupExportProgress) SetProgress(v string) *DescribeJobGroupResponseBodyJobGroupExportProgress {
	s.Progress = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupExportProgress) SetStatus(v string) *DescribeJobGroupResponseBodyJobGroupExportProgress {
	s.Status = &v
	return s
}

type DescribeJobGroupResponseBodyJobGroupProgress struct {
	Briefs           []*DescribeJobGroupResponseBodyJobGroupProgressBriefs     `json:"Briefs,omitempty" xml:"Briefs,omitempty" type:"Repeated"`
	Cancelled        *int32                                                    `json:"Cancelled,omitempty" xml:"Cancelled,omitempty"`
	Categories       []*DescribeJobGroupResponseBodyJobGroupProgressCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	Duration         *int32                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Executing        *int32                                                    `json:"Executing,omitempty" xml:"Executing,omitempty"`
	Failed           *int32                                                    `json:"Failed,omitempty" xml:"Failed,omitempty"`
	Paused           *int32                                                    `json:"Paused,omitempty" xml:"Paused,omitempty"`
	Scheduling       *int32                                                    `json:"Scheduling,omitempty" xml:"Scheduling,omitempty"`
	StartTime        *int64                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status           *string                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCompleted   *int32                                                    `json:"TotalCompleted,omitempty" xml:"TotalCompleted,omitempty"`
	TotalJobs        *int32                                                    `json:"TotalJobs,omitempty" xml:"TotalJobs,omitempty"`
	TotalNotAnswered *int32                                                    `json:"TotalNotAnswered,omitempty" xml:"TotalNotAnswered,omitempty"`
}

func (s DescribeJobGroupResponseBodyJobGroupProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupProgress) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetBriefs(v []*DescribeJobGroupResponseBodyJobGroupProgressBriefs) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Briefs = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetCancelled(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Cancelled = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetCategories(v []*DescribeJobGroupResponseBodyJobGroupProgressCategories) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Categories = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetDuration(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Duration = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetExecuting(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Executing = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetFailed(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Failed = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetPaused(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Paused = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetScheduling(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Scheduling = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetStartTime(v int64) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.StartTime = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetStatus(v string) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.Status = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetTotalCompleted(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.TotalCompleted = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetTotalJobs(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.TotalJobs = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgress) SetTotalNotAnswered(v int32) *DescribeJobGroupResponseBodyJobGroupProgress {
	s.TotalNotAnswered = &v
	return s
}

type DescribeJobGroupResponseBodyJobGroupProgressBriefs struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeJobGroupResponseBodyJobGroupProgressBriefs) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupProgressBriefs) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupProgressBriefs) SetKey(v string) *DescribeJobGroupResponseBodyJobGroupProgressBriefs {
	s.Key = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgressBriefs) SetValue(v string) *DescribeJobGroupResponseBodyJobGroupProgressBriefs {
	s.Value = &v
	return s
}

type DescribeJobGroupResponseBodyJobGroupProgressCategories struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeJobGroupResponseBodyJobGroupProgressCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupProgressCategories) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupProgressCategories) SetKey(v string) *DescribeJobGroupResponseBodyJobGroupProgressCategories {
	s.Key = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupProgressCategories) SetValue(v string) *DescribeJobGroupResponseBodyJobGroupProgressCategories {
	s.Value = &v
	return s
}

type DescribeJobGroupResponseBodyJobGroupRecallStrategy struct {
	EmptyNumberIgnore  *bool `json:"EmptyNumberIgnore,omitempty" xml:"EmptyNumberIgnore,omitempty"`
	InArrearsIgnore    *bool `json:"InArrearsIgnore,omitempty" xml:"InArrearsIgnore,omitempty"`
	OutOfServiceIgnore *bool `json:"OutOfServiceIgnore,omitempty" xml:"OutOfServiceIgnore,omitempty"`
}

func (s DescribeJobGroupResponseBodyJobGroupRecallStrategy) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupRecallStrategy) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupRecallStrategy) SetEmptyNumberIgnore(v bool) *DescribeJobGroupResponseBodyJobGroupRecallStrategy {
	s.EmptyNumberIgnore = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupRecallStrategy) SetInArrearsIgnore(v bool) *DescribeJobGroupResponseBodyJobGroupRecallStrategy {
	s.InArrearsIgnore = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupRecallStrategy) SetOutOfServiceIgnore(v bool) *DescribeJobGroupResponseBodyJobGroupRecallStrategy {
	s.OutOfServiceIgnore = &v
	return s
}

type DescribeJobGroupResponseBodyJobGroupResult struct {
	ClientHangupNum  *int32 `json:"ClientHangupNum,omitempty" xml:"ClientHangupNum,omitempty"`
	FinishedNum      *int32 `json:"FinishedNum,omitempty" xml:"FinishedNum,omitempty"`
	NoInteractNum    *int32 `json:"NoInteractNum,omitempty" xml:"NoInteractNum,omitempty"`
	TimeoutHangupNum *int32 `json:"TimeoutHangupNum,omitempty" xml:"TimeoutHangupNum,omitempty"`
	UnrecognizedNum  *int32 `json:"UnrecognizedNum,omitempty" xml:"UnrecognizedNum,omitempty"`
}

func (s DescribeJobGroupResponseBodyJobGroupResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupResult) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupResult) SetClientHangupNum(v int32) *DescribeJobGroupResponseBodyJobGroupResult {
	s.ClientHangupNum = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupResult) SetFinishedNum(v int32) *DescribeJobGroupResponseBodyJobGroupResult {
	s.FinishedNum = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupResult) SetNoInteractNum(v int32) *DescribeJobGroupResponseBodyJobGroupResult {
	s.NoInteractNum = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupResult) SetTimeoutHangupNum(v int32) *DescribeJobGroupResponseBodyJobGroupResult {
	s.TimeoutHangupNum = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupResult) SetUnrecognizedNum(v int32) *DescribeJobGroupResponseBodyJobGroupResult {
	s.UnrecognizedNum = &v
	return s
}

type DescribeJobGroupResponseBodyJobGroupStrategy struct {
	Customized          *string                                                    `json:"Customized,omitempty" xml:"Customized,omitempty"`
	EndTime             *int64                                                     `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FollowUpStrategy    *string                                                    `json:"FollowUpStrategy,omitempty" xml:"FollowUpStrategy,omitempty"`
	IsTemplate          *bool                                                      `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	MaxAttemptsPerDay   *int32                                                     `json:"MaxAttemptsPerDay,omitempty" xml:"MaxAttemptsPerDay,omitempty"`
	MinAttemptInterval  *int32                                                     `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	RepeatBy            *string                                                    `json:"RepeatBy,omitempty" xml:"RepeatBy,omitempty"`
	RepeatDays          []*string                                                  `json:"RepeatDays,omitempty" xml:"RepeatDays,omitempty" type:"Repeated"`
	RoutingStrategy     *string                                                    `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	StartTime           *int64                                                     `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StrategyDescription *string                                                    `json:"StrategyDescription,omitempty" xml:"StrategyDescription,omitempty"`
	StrategyId          *string                                                    `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	StrategyName        *string                                                    `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	Type                *string                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkingTime         []*DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime `json:"WorkingTime,omitempty" xml:"WorkingTime,omitempty" type:"Repeated"`
}

func (s DescribeJobGroupResponseBodyJobGroupStrategy) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupStrategy) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetCustomized(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.Customized = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetEndTime(v int64) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.EndTime = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetFollowUpStrategy(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.FollowUpStrategy = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetIsTemplate(v bool) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.IsTemplate = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetMaxAttemptsPerDay(v int32) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.MaxAttemptsPerDay = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetMinAttemptInterval(v int32) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.MinAttemptInterval = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetRepeatBy(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.RepeatBy = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetRepeatDays(v []*string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.RepeatDays = v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetRoutingStrategy(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.RoutingStrategy = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetStartTime(v int64) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.StartTime = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetStrategyDescription(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.StrategyDescription = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetStrategyId(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.StrategyId = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetStrategyName(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.StrategyName = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetType(v string) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.Type = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategy) SetWorkingTime(v []*DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime) *DescribeJobGroupResponseBodyJobGroupStrategy {
	s.WorkingTime = v
	return s
}

type DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime struct {
	BeginTime *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime) SetBeginTime(v string) *DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime {
	s.BeginTime = &v
	return s
}

func (s *DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime) SetEndTime(v string) *DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime {
	s.EndTime = &v
	return s
}

type DescribeJobGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeJobGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeJobGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupResponse) SetHeaders(v map[string]*string) *DescribeJobGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobGroupResponse) SetStatusCode(v int32) *DescribeJobGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobGroupResponse) SetBody(v *DescribeJobGroupResponseBody) *DescribeJobGroupResponse {
	s.Body = v
	return s
}

type DescribeJobGroupExportTaskProgressRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeJobGroupExportTaskProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupExportTaskProgressRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupExportTaskProgressRequest) SetInstanceId(v string) *DescribeJobGroupExportTaskProgressRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressRequest) SetTaskId(v string) *DescribeJobGroupExportTaskProgressRequest {
	s.TaskId = &v
	return s
}

type DescribeJobGroupExportTaskProgressResponseBody struct {
	Code           *string  `json:"Code,omitempty" xml:"Code,omitempty"`
	FileHttpUrl    *string  `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	HttpStatusCode *int32   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string  `json:"Message,omitempty" xml:"Message,omitempty"`
	Progress       *float32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	RequestId      *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeJobGroupExportTaskProgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupExportTaskProgressResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupExportTaskProgressResponseBody) SetCode(v string) *DescribeJobGroupExportTaskProgressResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponseBody) SetFileHttpUrl(v string) *DescribeJobGroupExportTaskProgressResponseBody {
	s.FileHttpUrl = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponseBody) SetHttpStatusCode(v int32) *DescribeJobGroupExportTaskProgressResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponseBody) SetMessage(v string) *DescribeJobGroupExportTaskProgressResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponseBody) SetProgress(v float32) *DescribeJobGroupExportTaskProgressResponseBody {
	s.Progress = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponseBody) SetRequestId(v string) *DescribeJobGroupExportTaskProgressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponseBody) SetSuccess(v bool) *DescribeJobGroupExportTaskProgressResponseBody {
	s.Success = &v
	return s
}

type DescribeJobGroupExportTaskProgressResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeJobGroupExportTaskProgressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeJobGroupExportTaskProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobGroupExportTaskProgressResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobGroupExportTaskProgressResponse) SetHeaders(v map[string]*string) *DescribeJobGroupExportTaskProgressResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponse) SetStatusCode(v int32) *DescribeJobGroupExportTaskProgressResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobGroupExportTaskProgressResponse) SetBody(v *DescribeJobGroupExportTaskProgressResponseBody) *DescribeJobGroupExportTaskProgressResponse {
	s.Body = v
	return s
}

type DescribeNumberDistrictInfoStatusResponseBody struct {
	AppliedVersion *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion `json:"AppliedVersion,omitempty" xml:"AppliedVersion,omitempty" type:"Struct"`
	Code           *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	ParsingVersion *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion `json:"ParsingVersion,omitempty" xml:"ParsingVersion,omitempty" type:"Struct"`
	RequestId      *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status         *string                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	Success        *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeNumberDistrictInfoStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNumberDistrictInfoStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetAppliedVersion(v *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion) *DescribeNumberDistrictInfoStatusResponseBody {
	s.AppliedVersion = v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetCode(v string) *DescribeNumberDistrictInfoStatusResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetHttpStatusCode(v int32) *DescribeNumberDistrictInfoStatusResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetMessage(v string) *DescribeNumberDistrictInfoStatusResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetParsingVersion(v *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion) *DescribeNumberDistrictInfoStatusResponseBody {
	s.ParsingVersion = v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetRequestId(v string) *DescribeNumberDistrictInfoStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetStatus(v string) *DescribeNumberDistrictInfoStatusResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBody) SetSuccess(v bool) *DescribeNumberDistrictInfoStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion struct {
	FileName  *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileSize  *int64  `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion) String() string {
	return tea.Prettify(s)
}

func (s DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion) GoString() string {
	return s.String()
}

func (s *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion) SetFileName(v string) *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion {
	s.FileName = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion) SetFileSize(v int64) *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion {
	s.FileSize = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion) SetVersionId(v string) *DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion {
	s.VersionId = &v
	return s
}

type DescribeNumberDistrictInfoStatusResponseBodyParsingVersion struct {
	FileName      *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileSize      *int64  `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	ParseProgress *int64  `json:"ParseProgress,omitempty" xml:"ParseProgress,omitempty"`
	VersionId     *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s DescribeNumberDistrictInfoStatusResponseBodyParsingVersion) String() string {
	return tea.Prettify(s)
}

func (s DescribeNumberDistrictInfoStatusResponseBodyParsingVersion) GoString() string {
	return s.String()
}

func (s *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion) SetFileName(v string) *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion {
	s.FileName = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion) SetFileSize(v int64) *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion {
	s.FileSize = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion) SetParseProgress(v int64) *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion {
	s.ParseProgress = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion) SetVersionId(v string) *DescribeNumberDistrictInfoStatusResponseBodyParsingVersion {
	s.VersionId = &v
	return s
}

type DescribeNumberDistrictInfoStatusResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNumberDistrictInfoStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNumberDistrictInfoStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNumberDistrictInfoStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeNumberDistrictInfoStatusResponse) SetHeaders(v map[string]*string) *DescribeNumberDistrictInfoStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponse) SetStatusCode(v int32) *DescribeNumberDistrictInfoStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNumberDistrictInfoStatusResponse) SetBody(v *DescribeNumberDistrictInfoStatusResponseBody) *DescribeNumberDistrictInfoStatusResponse {
	s.Body = v
	return s
}

type DescribeScriptRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DescribeScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptRequest) GoString() string {
	return s.String()
}

func (s *DescribeScriptRequest) SetInstanceId(v string) *DescribeScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeScriptRequest) SetScriptId(v string) *DescribeScriptRequest {
	s.ScriptId = &v
	return s
}

type DescribeScriptResponseBody struct {
	Code           *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	NlsConfig      *string                           `json:"NlsConfig,omitempty" xml:"NlsConfig,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Script         *DescribeScriptResponseBodyScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScriptResponseBody) SetCode(v string) *DescribeScriptResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeScriptResponseBody) SetHttpStatusCode(v int32) *DescribeScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeScriptResponseBody) SetMessage(v string) *DescribeScriptResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeScriptResponseBody) SetNlsConfig(v string) *DescribeScriptResponseBody {
	s.NlsConfig = &v
	return s
}

func (s *DescribeScriptResponseBody) SetRequestId(v string) *DescribeScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScriptResponseBody) SetScript(v *DescribeScriptResponseBodyScript) *DescribeScriptResponseBody {
	s.Script = v
	return s
}

func (s *DescribeScriptResponseBody) SetSuccess(v bool) *DescribeScriptResponseBody {
	s.Success = &v
	return s
}

type DescribeScriptResponseBodyScript struct {
	AsrConfig          *string `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty"`
	ChatbotId          *string `json:"ChatbotId,omitempty" xml:"ChatbotId,omitempty"`
	DebugStatus        *string `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	EmotionEnable      *bool   `json:"EmotionEnable,omitempty" xml:"EmotionEnable,omitempty"`
	Industry           *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDebugDrafted     *bool   `json:"IsDebugDrafted,omitempty" xml:"IsDebugDrafted,omitempty"`
	IsDrafted          *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	LongWaitEnable     *bool   `json:"LongWaitEnable,omitempty" xml:"LongWaitEnable,omitempty"`
	MiniPlaybackEnable *bool   `json:"MiniPlaybackEnable,omitempty" xml:"MiniPlaybackEnable,omitempty"`
	NewBargeInEnable   *bool   `json:"NewBargeInEnable,omitempty" xml:"NewBargeInEnable,omitempty"`
	Scene              *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptDescription  *string `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId           *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName         *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TtsConfig          *string `json:"TtsConfig,omitempty" xml:"TtsConfig,omitempty"`
	UpdateTime         *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeScriptResponseBodyScript) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptResponseBodyScript) GoString() string {
	return s.String()
}

func (s *DescribeScriptResponseBodyScript) SetAsrConfig(v string) *DescribeScriptResponseBodyScript {
	s.AsrConfig = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetChatbotId(v string) *DescribeScriptResponseBodyScript {
	s.ChatbotId = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetDebugStatus(v string) *DescribeScriptResponseBodyScript {
	s.DebugStatus = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetEmotionEnable(v bool) *DescribeScriptResponseBodyScript {
	s.EmotionEnable = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetIndustry(v string) *DescribeScriptResponseBodyScript {
	s.Industry = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetIsDebugDrafted(v bool) *DescribeScriptResponseBodyScript {
	s.IsDebugDrafted = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetIsDrafted(v bool) *DescribeScriptResponseBodyScript {
	s.IsDrafted = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetLongWaitEnable(v bool) *DescribeScriptResponseBodyScript {
	s.LongWaitEnable = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetMiniPlaybackEnable(v bool) *DescribeScriptResponseBodyScript {
	s.MiniPlaybackEnable = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetNewBargeInEnable(v bool) *DescribeScriptResponseBodyScript {
	s.NewBargeInEnable = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetScene(v string) *DescribeScriptResponseBodyScript {
	s.Scene = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetScriptDescription(v string) *DescribeScriptResponseBodyScript {
	s.ScriptDescription = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetScriptId(v string) *DescribeScriptResponseBodyScript {
	s.ScriptId = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetScriptName(v string) *DescribeScriptResponseBodyScript {
	s.ScriptName = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetStatus(v string) *DescribeScriptResponseBodyScript {
	s.Status = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetTtsConfig(v string) *DescribeScriptResponseBodyScript {
	s.TtsConfig = &v
	return s
}

func (s *DescribeScriptResponseBodyScript) SetUpdateTime(v int64) *DescribeScriptResponseBodyScript {
	s.UpdateTime = &v
	return s
}

type DescribeScriptResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptResponse) GoString() string {
	return s.String()
}

func (s *DescribeScriptResponse) SetHeaders(v map[string]*string) *DescribeScriptResponse {
	s.Headers = v
	return s
}

func (s *DescribeScriptResponse) SetStatusCode(v int32) *DescribeScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScriptResponse) SetBody(v *DescribeScriptResponseBody) *DescribeScriptResponse {
	s.Body = v
	return s
}

type DescribeScriptVoiceConfigRequest struct {
	InstanceId          *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId            *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptVoiceConfigId *string `json:"ScriptVoiceConfigId,omitempty" xml:"ScriptVoiceConfigId,omitempty"`
}

func (s DescribeScriptVoiceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptVoiceConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeScriptVoiceConfigRequest) SetInstanceId(v string) *DescribeScriptVoiceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeScriptVoiceConfigRequest) SetScriptId(v string) *DescribeScriptVoiceConfigRequest {
	s.ScriptId = &v
	return s
}

func (s *DescribeScriptVoiceConfigRequest) SetScriptVoiceConfigId(v string) *DescribeScriptVoiceConfigRequest {
	s.ScriptVoiceConfigId = &v
	return s
}

type DescribeScriptVoiceConfigResponseBody struct {
	Code              *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode    *int32                                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message           *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptVoiceConfig *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig `json:"ScriptVoiceConfig,omitempty" xml:"ScriptVoiceConfig,omitempty" type:"Struct"`
	Success           *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeScriptVoiceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptVoiceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScriptVoiceConfigResponseBody) SetCode(v string) *DescribeScriptVoiceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBody) SetHttpStatusCode(v int32) *DescribeScriptVoiceConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBody) SetMessage(v string) *DescribeScriptVoiceConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBody) SetRequestId(v string) *DescribeScriptVoiceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBody) SetScriptVoiceConfig(v *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) *DescribeScriptVoiceConfigResponseBody {
	s.ScriptVoiceConfig = v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBody) SetSuccess(v bool) *DescribeScriptVoiceConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptContent          *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	ScriptId               *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptVoiceConfigId    *string `json:"ScriptVoiceConfigId,omitempty" xml:"ScriptVoiceConfigId,omitempty"`
	ScriptWaveformRelation *string `json:"ScriptWaveformRelation,omitempty" xml:"ScriptWaveformRelation,omitempty"`
	Source                 *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) GoString() string {
	return s.String()
}

func (s *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) SetInstanceId(v string) *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptContent(v string) *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptContent = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptId(v string) *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptId = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptVoiceConfigId(v string) *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptVoiceConfigId = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptWaveformRelation(v string) *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptWaveformRelation = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) SetSource(v string) *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.Source = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig) SetType(v string) *DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.Type = &v
	return s
}

type DescribeScriptVoiceConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeScriptVoiceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScriptVoiceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScriptVoiceConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeScriptVoiceConfigResponse) SetHeaders(v map[string]*string) *DescribeScriptVoiceConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeScriptVoiceConfigResponse) SetStatusCode(v int32) *DescribeScriptVoiceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScriptVoiceConfigResponse) SetBody(v *DescribeScriptVoiceConfigResponseBody) *DescribeScriptVoiceConfigResponse {
	s.Body = v
	return s
}

type DescribeTTSConfigRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s DescribeTTSConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTTSConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeTTSConfigRequest) SetInstanceId(v string) *DescribeTTSConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTTSConfigRequest) SetScriptId(v string) *DescribeTTSConfigRequest {
	s.ScriptId = &v
	return s
}

type DescribeTTSConfigResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	TTSConfig      *DescribeTTSConfigResponseBodyTTSConfig `json:"TTSConfig,omitempty" xml:"TTSConfig,omitempty" type:"Struct"`
}

func (s DescribeTTSConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTTSConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTTSConfigResponseBody) SetCode(v string) *DescribeTTSConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTTSConfigResponseBody) SetHttpStatusCode(v int32) *DescribeTTSConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTTSConfigResponseBody) SetMessage(v string) *DescribeTTSConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTTSConfigResponseBody) SetRequestId(v string) *DescribeTTSConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTTSConfigResponseBody) SetSuccess(v bool) *DescribeTTSConfigResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeTTSConfigResponseBody) SetTTSConfig(v *DescribeTTSConfigResponseBodyTTSConfig) *DescribeTTSConfigResponseBody {
	s.TTSConfig = v
	return s
}

type DescribeTTSConfigResponseBodyTTSConfig struct {
	AppKey         *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NlsServiceType *string `json:"NlsServiceType,omitempty" xml:"NlsServiceType,omitempty"`
	SpeechRate     *string `json:"SpeechRate,omitempty" xml:"SpeechRate,omitempty"`
	Voice          *string `json:"Voice,omitempty" xml:"Voice,omitempty"`
	Volume         *string `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s DescribeTTSConfigResponseBodyTTSConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeTTSConfigResponseBodyTTSConfig) GoString() string {
	return s.String()
}

func (s *DescribeTTSConfigResponseBodyTTSConfig) SetAppKey(v string) *DescribeTTSConfigResponseBodyTTSConfig {
	s.AppKey = &v
	return s
}

func (s *DescribeTTSConfigResponseBodyTTSConfig) SetInstanceId(v string) *DescribeTTSConfigResponseBodyTTSConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeTTSConfigResponseBodyTTSConfig) SetNlsServiceType(v string) *DescribeTTSConfigResponseBodyTTSConfig {
	s.NlsServiceType = &v
	return s
}

func (s *DescribeTTSConfigResponseBodyTTSConfig) SetSpeechRate(v string) *DescribeTTSConfigResponseBodyTTSConfig {
	s.SpeechRate = &v
	return s
}

func (s *DescribeTTSConfigResponseBodyTTSConfig) SetVoice(v string) *DescribeTTSConfigResponseBodyTTSConfig {
	s.Voice = &v
	return s
}

func (s *DescribeTTSConfigResponseBodyTTSConfig) SetVolume(v string) *DescribeTTSConfigResponseBodyTTSConfig {
	s.Volume = &v
	return s
}

type DescribeTTSConfigResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTTSConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTTSConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTTSConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeTTSConfigResponse) SetHeaders(v map[string]*string) *DescribeTTSConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeTTSConfigResponse) SetStatusCode(v int32) *DescribeTTSConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTTSConfigResponse) SetBody(v *DescribeTTSConfigResponseBody) *DescribeTTSConfigResponse {
	s.Body = v
	return s
}

type DescribeTTSDemoRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PitchRate  *int32  `json:"PitchRate,omitempty" xml:"PitchRate,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	SpeechRate *int32  `json:"SpeechRate,omitempty" xml:"SpeechRate,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Voice      *string `json:"Voice,omitempty" xml:"Voice,omitempty"`
	Volume     *int32  `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s DescribeTTSDemoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTTSDemoRequest) GoString() string {
	return s.String()
}

func (s *DescribeTTSDemoRequest) SetInstanceId(v string) *DescribeTTSDemoRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTTSDemoRequest) SetPitchRate(v int32) *DescribeTTSDemoRequest {
	s.PitchRate = &v
	return s
}

func (s *DescribeTTSDemoRequest) SetScriptId(v string) *DescribeTTSDemoRequest {
	s.ScriptId = &v
	return s
}

func (s *DescribeTTSDemoRequest) SetSpeechRate(v int32) *DescribeTTSDemoRequest {
	s.SpeechRate = &v
	return s
}

func (s *DescribeTTSDemoRequest) SetText(v string) *DescribeTTSDemoRequest {
	s.Text = &v
	return s
}

func (s *DescribeTTSDemoRequest) SetVoice(v string) *DescribeTTSDemoRequest {
	s.Voice = &v
	return s
}

func (s *DescribeTTSDemoRequest) SetVolume(v int32) *DescribeTTSDemoRequest {
	s.Volume = &v
	return s
}

type DescribeTTSDemoResponseBody struct {
	AuditionUrl    *string `json:"AuditionUrl,omitempty" xml:"AuditionUrl,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTTSDemoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTTSDemoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTTSDemoResponseBody) SetAuditionUrl(v string) *DescribeTTSDemoResponseBody {
	s.AuditionUrl = &v
	return s
}

func (s *DescribeTTSDemoResponseBody) SetCode(v string) *DescribeTTSDemoResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTTSDemoResponseBody) SetHttpStatusCode(v int32) *DescribeTTSDemoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTTSDemoResponseBody) SetMessage(v string) *DescribeTTSDemoResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTTSDemoResponseBody) SetRequestId(v string) *DescribeTTSDemoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTTSDemoResponseBody) SetSuccess(v bool) *DescribeTTSDemoResponseBody {
	s.Success = &v
	return s
}

type DescribeTTSDemoResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTTSDemoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTTSDemoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTTSDemoResponse) GoString() string {
	return s.String()
}

func (s *DescribeTTSDemoResponse) SetHeaders(v map[string]*string) *DescribeTTSDemoResponse {
	s.Headers = v
	return s
}

func (s *DescribeTTSDemoResponse) SetStatusCode(v int32) *DescribeTTSDemoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTTSDemoResponse) SetBody(v *DescribeTTSDemoResponseBody) *DescribeTTSDemoResponse {
	s.Body = v
	return s
}

type DescribeTagHitsSummaryRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
}

func (s DescribeTagHitsSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagHitsSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagHitsSummaryRequest) SetInstanceId(v string) *DescribeTagHitsSummaryRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTagHitsSummaryRequest) SetJobGroupId(v string) *DescribeTagHitsSummaryRequest {
	s.JobGroupId = &v
	return s
}

type DescribeTagHitsSummaryResponseBody struct {
	Code           *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	TagGroups      []*DescribeTagHitsSummaryResponseBodyTagGroups   `json:"TagGroups,omitempty" xml:"TagGroups,omitempty" type:"Repeated"`
	TagHitsList    []*DescribeTagHitsSummaryResponseBodyTagHitsList `json:"TagHitsList,omitempty" xml:"TagHitsList,omitempty" type:"Repeated"`
}

func (s DescribeTagHitsSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagHitsSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagHitsSummaryResponseBody) SetCode(v string) *DescribeTagHitsSummaryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBody) SetHttpStatusCode(v int32) *DescribeTagHitsSummaryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBody) SetMessage(v string) *DescribeTagHitsSummaryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBody) SetRequestId(v string) *DescribeTagHitsSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBody) SetSuccess(v bool) *DescribeTagHitsSummaryResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBody) SetTagGroups(v []*DescribeTagHitsSummaryResponseBodyTagGroups) *DescribeTagHitsSummaryResponseBody {
	s.TagGroups = v
	return s
}

func (s *DescribeTagHitsSummaryResponseBody) SetTagHitsList(v []*DescribeTagHitsSummaryResponseBodyTagHitsList) *DescribeTagHitsSummaryResponseBody {
	s.TagHitsList = v
	return s
}

type DescribeTagHitsSummaryResponseBodyTagGroups struct {
	// ID
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ScriptId      *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TagGroup      *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagGroupIndex *int32  `json:"TagGroupIndex,omitempty" xml:"TagGroupIndex,omitempty"`
}

func (s DescribeTagHitsSummaryResponseBodyTagGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagHitsSummaryResponseBodyTagGroups) GoString() string {
	return s.String()
}

func (s *DescribeTagHitsSummaryResponseBodyTagGroups) SetId(v string) *DescribeTagHitsSummaryResponseBodyTagGroups {
	s.Id = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBodyTagGroups) SetScriptId(v string) *DescribeTagHitsSummaryResponseBodyTagGroups {
	s.ScriptId = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBodyTagGroups) SetTagGroup(v string) *DescribeTagHitsSummaryResponseBodyTagGroups {
	s.TagGroup = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBodyTagGroups) SetTagGroupIndex(v int32) *DescribeTagHitsSummaryResponseBodyTagGroups {
	s.TagGroupIndex = &v
	return s
}

type DescribeTagHitsSummaryResponseBodyTagHitsList struct {
	HitCount *int32  `json:"HitCount,omitempty" xml:"HitCount,omitempty"`
	TagGroup *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s DescribeTagHitsSummaryResponseBodyTagHitsList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagHitsSummaryResponseBodyTagHitsList) GoString() string {
	return s.String()
}

func (s *DescribeTagHitsSummaryResponseBodyTagHitsList) SetHitCount(v int32) *DescribeTagHitsSummaryResponseBodyTagHitsList {
	s.HitCount = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBodyTagHitsList) SetTagGroup(v string) *DescribeTagHitsSummaryResponseBodyTagHitsList {
	s.TagGroup = &v
	return s
}

func (s *DescribeTagHitsSummaryResponseBodyTagHitsList) SetTagName(v string) *DescribeTagHitsSummaryResponseBodyTagHitsList {
	s.TagName = &v
	return s
}

type DescribeTagHitsSummaryResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTagHitsSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTagHitsSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagHitsSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagHitsSummaryResponse) SetHeaders(v map[string]*string) *DescribeTagHitsSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagHitsSummaryResponse) SetStatusCode(v int32) *DescribeTagHitsSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagHitsSummaryResponse) SetBody(v *DescribeTagHitsSummaryResponseBody) *DescribeTagHitsSummaryResponse {
	s.Body = v
	return s
}

type DescribeTenantBindNumberRequest struct {
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s DescribeTenantBindNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantBindNumberRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantBindNumberRequest) SetNumber(v string) *DescribeTenantBindNumberRequest {
	s.Number = &v
	return s
}

type DescribeTenantBindNumberResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *DescribeTenantBindNumberResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTenantBindNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantBindNumberResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantBindNumberResponseBody) SetCode(v string) *DescribeTenantBindNumberResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTenantBindNumberResponseBody) SetData(v *DescribeTenantBindNumberResponseBodyData) *DescribeTenantBindNumberResponseBody {
	s.Data = v
	return s
}

func (s *DescribeTenantBindNumberResponseBody) SetHttpStatusCode(v int32) *DescribeTenantBindNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTenantBindNumberResponseBody) SetMessage(v string) *DescribeTenantBindNumberResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTenantBindNumberResponseBody) SetRequestId(v string) *DescribeTenantBindNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantBindNumberResponseBody) SetSuccess(v bool) *DescribeTenantBindNumberResponseBody {
	s.Success = &v
	return s
}

type DescribeTenantBindNumberResponseBodyData struct {
	List []*DescribeTenantBindNumberResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
}

func (s DescribeTenantBindNumberResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantBindNumberResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeTenantBindNumberResponseBodyData) SetList(v []*DescribeTenantBindNumberResponseBodyDataList) *DescribeTenantBindNumberResponseBodyData {
	s.List = v
	return s
}

type DescribeTenantBindNumberResponseBodyDataList struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	IsBinding    *bool   `json:"IsBinding,omitempty" xml:"IsBinding,omitempty"`
}

func (s DescribeTenantBindNumberResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantBindNumberResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *DescribeTenantBindNumberResponseBodyDataList) SetInstanceId(v string) *DescribeTenantBindNumberResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantBindNumberResponseBodyDataList) SetInstanceName(v string) *DescribeTenantBindNumberResponseBodyDataList {
	s.InstanceName = &v
	return s
}

func (s *DescribeTenantBindNumberResponseBodyDataList) SetIsBinding(v bool) *DescribeTenantBindNumberResponseBodyDataList {
	s.IsBinding = &v
	return s
}

type DescribeTenantBindNumberResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTenantBindNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTenantBindNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantBindNumberResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantBindNumberResponse) SetHeaders(v map[string]*string) *DescribeTenantBindNumberResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantBindNumberResponse) SetStatusCode(v int32) *DescribeTenantBindNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantBindNumberResponse) SetBody(v *DescribeTenantBindNumberResponseBody) *DescribeTenantBindNumberResponse {
	s.Body = v
	return s
}

type DialogueRequest struct {
	ActionKey     *string `json:"ActionKey,omitempty" xml:"ActionKey,omitempty"`
	ActionParams  *string `json:"ActionParams,omitempty" xml:"ActionParams,omitempty"`
	CallId        *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CallType      *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	CalledNumber  *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScenarioId    *string `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptId      *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Utterance     *string `json:"Utterance,omitempty" xml:"Utterance,omitempty"`
}

func (s DialogueRequest) String() string {
	return tea.Prettify(s)
}

func (s DialogueRequest) GoString() string {
	return s.String()
}

func (s *DialogueRequest) SetActionKey(v string) *DialogueRequest {
	s.ActionKey = &v
	return s
}

func (s *DialogueRequest) SetActionParams(v string) *DialogueRequest {
	s.ActionParams = &v
	return s
}

func (s *DialogueRequest) SetCallId(v string) *DialogueRequest {
	s.CallId = &v
	return s
}

func (s *DialogueRequest) SetCallType(v string) *DialogueRequest {
	s.CallType = &v
	return s
}

func (s *DialogueRequest) SetCalledNumber(v string) *DialogueRequest {
	s.CalledNumber = &v
	return s
}

func (s *DialogueRequest) SetCallingNumber(v string) *DialogueRequest {
	s.CallingNumber = &v
	return s
}

func (s *DialogueRequest) SetInstanceId(v string) *DialogueRequest {
	s.InstanceId = &v
	return s
}

func (s *DialogueRequest) SetScenarioId(v string) *DialogueRequest {
	s.ScenarioId = &v
	return s
}

func (s *DialogueRequest) SetScriptId(v string) *DialogueRequest {
	s.ScriptId = &v
	return s
}

func (s *DialogueRequest) SetTaskId(v string) *DialogueRequest {
	s.TaskId = &v
	return s
}

func (s *DialogueRequest) SetUtterance(v string) *DialogueRequest {
	s.Utterance = &v
	return s
}

type DialogueResponseBody struct {
	Code           *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Feedback       *DialogueResponseBodyFeedback `json:"Feedback,omitempty" xml:"Feedback,omitempty" type:"Struct"`
	HttpStatusCode *int32                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DialogueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DialogueResponseBody) GoString() string {
	return s.String()
}

func (s *DialogueResponseBody) SetCode(v string) *DialogueResponseBody {
	s.Code = &v
	return s
}

func (s *DialogueResponseBody) SetFeedback(v *DialogueResponseBodyFeedback) *DialogueResponseBody {
	s.Feedback = v
	return s
}

func (s *DialogueResponseBody) SetHttpStatusCode(v int32) *DialogueResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DialogueResponseBody) SetMessage(v string) *DialogueResponseBody {
	s.Message = &v
	return s
}

func (s *DialogueResponseBody) SetRequestId(v string) *DialogueResponseBody {
	s.RequestId = &v
	return s
}

func (s *DialogueResponseBody) SetSuccess(v bool) *DialogueResponseBody {
	s.Success = &v
	return s
}

type DialogueResponseBodyFeedback struct {
	Action        *string `json:"Action,omitempty" xml:"Action,omitempty"`
	ActionParams  *string `json:"ActionParams,omitempty" xml:"ActionParams,omitempty"`
	Content       *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ContentParams *string `json:"ContentParams,omitempty" xml:"ContentParams,omitempty"`
	Interruptible *bool   `json:"Interruptible,omitempty" xml:"Interruptible,omitempty"`
}

func (s DialogueResponseBodyFeedback) String() string {
	return tea.Prettify(s)
}

func (s DialogueResponseBodyFeedback) GoString() string {
	return s.String()
}

func (s *DialogueResponseBodyFeedback) SetAction(v string) *DialogueResponseBodyFeedback {
	s.Action = &v
	return s
}

func (s *DialogueResponseBodyFeedback) SetActionParams(v string) *DialogueResponseBodyFeedback {
	s.ActionParams = &v
	return s
}

func (s *DialogueResponseBodyFeedback) SetContent(v string) *DialogueResponseBodyFeedback {
	s.Content = &v
	return s
}

func (s *DialogueResponseBodyFeedback) SetContentParams(v string) *DialogueResponseBodyFeedback {
	s.ContentParams = &v
	return s
}

func (s *DialogueResponseBodyFeedback) SetInterruptible(v bool) *DialogueResponseBodyFeedback {
	s.Interruptible = &v
	return s
}

type DialogueResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DialogueResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DialogueResponse) String() string {
	return tea.Prettify(s)
}

func (s DialogueResponse) GoString() string {
	return s.String()
}

func (s *DialogueResponse) SetHeaders(v map[string]*string) *DialogueResponse {
	s.Headers = v
	return s
}

func (s *DialogueResponse) SetStatusCode(v int32) *DialogueResponse {
	s.StatusCode = &v
	return s
}

func (s *DialogueResponse) SetBody(v *DialogueResponseBody) *DialogueResponse {
	s.Body = v
	return s
}

type DismissNumberDistrictInfoParsingResultRequest struct {
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s DismissNumberDistrictInfoParsingResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DismissNumberDistrictInfoParsingResultRequest) GoString() string {
	return s.String()
}

func (s *DismissNumberDistrictInfoParsingResultRequest) SetVersionId(v string) *DismissNumberDistrictInfoParsingResultRequest {
	s.VersionId = &v
	return s
}

type DismissNumberDistrictInfoParsingResultResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DismissNumberDistrictInfoParsingResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DismissNumberDistrictInfoParsingResultResponseBody) GoString() string {
	return s.String()
}

func (s *DismissNumberDistrictInfoParsingResultResponseBody) SetCode(v string) *DismissNumberDistrictInfoParsingResultResponseBody {
	s.Code = &v
	return s
}

func (s *DismissNumberDistrictInfoParsingResultResponseBody) SetHttpStatusCode(v int32) *DismissNumberDistrictInfoParsingResultResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DismissNumberDistrictInfoParsingResultResponseBody) SetMessage(v string) *DismissNumberDistrictInfoParsingResultResponseBody {
	s.Message = &v
	return s
}

func (s *DismissNumberDistrictInfoParsingResultResponseBody) SetRequestId(v string) *DismissNumberDistrictInfoParsingResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DismissNumberDistrictInfoParsingResultResponseBody) SetSuccess(v bool) *DismissNumberDistrictInfoParsingResultResponseBody {
	s.Success = &v
	return s
}

type DismissNumberDistrictInfoParsingResultResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DismissNumberDistrictInfoParsingResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DismissNumberDistrictInfoParsingResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DismissNumberDistrictInfoParsingResultResponse) GoString() string {
	return s.String()
}

func (s *DismissNumberDistrictInfoParsingResultResponse) SetHeaders(v map[string]*string) *DismissNumberDistrictInfoParsingResultResponse {
	s.Headers = v
	return s
}

func (s *DismissNumberDistrictInfoParsingResultResponse) SetStatusCode(v int32) *DismissNumberDistrictInfoParsingResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DismissNumberDistrictInfoParsingResultResponse) SetBody(v *DismissNumberDistrictInfoParsingResultResponseBody) *DismissNumberDistrictInfoParsingResultResponse {
	s.Body = v
	return s
}

type DownloadRecordingRequest struct {
	InstanceId              *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NeedVoiceSliceRecording *bool   `json:"NeedVoiceSliceRecording,omitempty" xml:"NeedVoiceSliceRecording,omitempty"`
	TaskId                  *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DownloadRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingRequest) GoString() string {
	return s.String()
}

func (s *DownloadRecordingRequest) SetInstanceId(v string) *DownloadRecordingRequest {
	s.InstanceId = &v
	return s
}

func (s *DownloadRecordingRequest) SetNeedVoiceSliceRecording(v bool) *DownloadRecordingRequest {
	s.NeedVoiceSliceRecording = &v
	return s
}

func (s *DownloadRecordingRequest) SetTaskId(v string) *DownloadRecordingRequest {
	s.TaskId = &v
	return s
}

type DownloadRecordingResponseBody struct {
	Code           *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	DownloadParams *DownloadRecordingResponseBodyDownloadParams `json:"DownloadParams,omitempty" xml:"DownloadParams,omitempty" type:"Struct"`
	HttpStatusCode *int32                                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DownloadRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadRecordingResponseBody) SetCode(v string) *DownloadRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetDownloadParams(v *DownloadRecordingResponseBodyDownloadParams) *DownloadRecordingResponseBody {
	s.DownloadParams = v
	return s
}

func (s *DownloadRecordingResponseBody) SetHttpStatusCode(v int32) *DownloadRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetMessage(v string) *DownloadRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetRequestId(v string) *DownloadRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetSuccess(v bool) *DownloadRecordingResponseBody {
	s.Success = &v
	return s
}

type DownloadRecordingResponseBodyDownloadParams struct {
	FileName                    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	SignatureUrl                *string `json:"SignatureUrl,omitempty" xml:"SignatureUrl,omitempty"`
	VoiceSliceRecordingListJson *string `json:"VoiceSliceRecordingListJson,omitempty" xml:"VoiceSliceRecordingListJson,omitempty"`
}

func (s DownloadRecordingResponseBodyDownloadParams) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingResponseBodyDownloadParams) GoString() string {
	return s.String()
}

func (s *DownloadRecordingResponseBodyDownloadParams) SetFileName(v string) *DownloadRecordingResponseBodyDownloadParams {
	s.FileName = &v
	return s
}

func (s *DownloadRecordingResponseBodyDownloadParams) SetSignatureUrl(v string) *DownloadRecordingResponseBodyDownloadParams {
	s.SignatureUrl = &v
	return s
}

func (s *DownloadRecordingResponseBodyDownloadParams) SetVoiceSliceRecordingListJson(v string) *DownloadRecordingResponseBodyDownloadParams {
	s.VoiceSliceRecordingListJson = &v
	return s
}

type DownloadRecordingResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DownloadRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DownloadRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingResponse) GoString() string {
	return s.String()
}

func (s *DownloadRecordingResponse) SetHeaders(v map[string]*string) *DownloadRecordingResponse {
	s.Headers = v
	return s
}

func (s *DownloadRecordingResponse) SetStatusCode(v int32) *DownloadRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadRecordingResponse) SetBody(v *DownloadRecordingResponseBody) *DownloadRecordingResponse {
	s.Body = v
	return s
}

type DownloadScriptRecordingRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	Uuid       *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DownloadScriptRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadScriptRecordingRequest) GoString() string {
	return s.String()
}

func (s *DownloadScriptRecordingRequest) SetInstanceId(v string) *DownloadScriptRecordingRequest {
	s.InstanceId = &v
	return s
}

func (s *DownloadScriptRecordingRequest) SetScriptId(v string) *DownloadScriptRecordingRequest {
	s.ScriptId = &v
	return s
}

func (s *DownloadScriptRecordingRequest) SetUuid(v string) *DownloadScriptRecordingRequest {
	s.Uuid = &v
	return s
}

type DownloadScriptRecordingResponseBody struct {
	Code           *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	DownloadParams *DownloadScriptRecordingResponseBodyDownloadParams `json:"DownloadParams,omitempty" xml:"DownloadParams,omitempty" type:"Struct"`
	HttpStatusCode *int32                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DownloadScriptRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadScriptRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadScriptRecordingResponseBody) SetCode(v string) *DownloadScriptRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *DownloadScriptRecordingResponseBody) SetDownloadParams(v *DownloadScriptRecordingResponseBodyDownloadParams) *DownloadScriptRecordingResponseBody {
	s.DownloadParams = v
	return s
}

func (s *DownloadScriptRecordingResponseBody) SetHttpStatusCode(v int32) *DownloadScriptRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DownloadScriptRecordingResponseBody) SetMessage(v string) *DownloadScriptRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *DownloadScriptRecordingResponseBody) SetRequestId(v string) *DownloadScriptRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadScriptRecordingResponseBody) SetSuccess(v bool) *DownloadScriptRecordingResponseBody {
	s.Success = &v
	return s
}

type DownloadScriptRecordingResponseBodyDownloadParams struct {
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	SignatureUrl *string `json:"SignatureUrl,omitempty" xml:"SignatureUrl,omitempty"`
}

func (s DownloadScriptRecordingResponseBodyDownloadParams) String() string {
	return tea.Prettify(s)
}

func (s DownloadScriptRecordingResponseBodyDownloadParams) GoString() string {
	return s.String()
}

func (s *DownloadScriptRecordingResponseBodyDownloadParams) SetFileName(v string) *DownloadScriptRecordingResponseBodyDownloadParams {
	s.FileName = &v
	return s
}

func (s *DownloadScriptRecordingResponseBodyDownloadParams) SetSignatureUrl(v string) *DownloadScriptRecordingResponseBodyDownloadParams {
	s.SignatureUrl = &v
	return s
}

type DownloadScriptRecordingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DownloadScriptRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DownloadScriptRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadScriptRecordingResponse) GoString() string {
	return s.String()
}

func (s *DownloadScriptRecordingResponse) SetHeaders(v map[string]*string) *DownloadScriptRecordingResponse {
	s.Headers = v
	return s
}

func (s *DownloadScriptRecordingResponse) SetStatusCode(v int32) *DownloadScriptRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadScriptRecordingResponse) SetBody(v *DownloadScriptRecordingResponseBody) *DownloadScriptRecordingResponse {
	s.Body = v
	return s
}

type DuplicateScriptRequest struct {
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SourceScriptId *string `json:"SourceScriptId,omitempty" xml:"SourceScriptId,omitempty"`
}

func (s DuplicateScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s DuplicateScriptRequest) GoString() string {
	return s.String()
}

func (s *DuplicateScriptRequest) SetInstanceId(v string) *DuplicateScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *DuplicateScriptRequest) SetName(v string) *DuplicateScriptRequest {
	s.Name = &v
	return s
}

func (s *DuplicateScriptRequest) SetSourceScriptId(v string) *DuplicateScriptRequest {
	s.SourceScriptId = &v
	return s
}

type DuplicateScriptResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptId       *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DuplicateScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DuplicateScriptResponseBody) GoString() string {
	return s.String()
}

func (s *DuplicateScriptResponseBody) SetCode(v string) *DuplicateScriptResponseBody {
	s.Code = &v
	return s
}

func (s *DuplicateScriptResponseBody) SetHttpStatusCode(v int32) *DuplicateScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DuplicateScriptResponseBody) SetMessage(v string) *DuplicateScriptResponseBody {
	s.Message = &v
	return s
}

func (s *DuplicateScriptResponseBody) SetRequestId(v string) *DuplicateScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *DuplicateScriptResponseBody) SetScriptId(v string) *DuplicateScriptResponseBody {
	s.ScriptId = &v
	return s
}

func (s *DuplicateScriptResponseBody) SetSuccess(v bool) *DuplicateScriptResponseBody {
	s.Success = &v
	return s
}

type DuplicateScriptResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DuplicateScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DuplicateScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s DuplicateScriptResponse) GoString() string {
	return s.String()
}

func (s *DuplicateScriptResponse) SetHeaders(v map[string]*string) *DuplicateScriptResponse {
	s.Headers = v
	return s
}

func (s *DuplicateScriptResponse) SetStatusCode(v int32) *DuplicateScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *DuplicateScriptResponse) SetBody(v *DuplicateScriptResponseBody) *DuplicateScriptResponse {
	s.Body = v
	return s
}

type ExportScriptRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ExportScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportScriptRequest) GoString() string {
	return s.String()
}

func (s *ExportScriptRequest) SetInstanceId(v string) *ExportScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *ExportScriptRequest) SetScriptId(v string) *ExportScriptRequest {
	s.ScriptId = &v
	return s
}

type ExportScriptResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	DownloadParams *ExportScriptResponseBodyDownloadParams `json:"DownloadParams,omitempty" xml:"DownloadParams,omitempty" type:"Struct"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportScriptResponseBody) GoString() string {
	return s.String()
}

func (s *ExportScriptResponseBody) SetCode(v string) *ExportScriptResponseBody {
	s.Code = &v
	return s
}

func (s *ExportScriptResponseBody) SetDownloadParams(v *ExportScriptResponseBodyDownloadParams) *ExportScriptResponseBody {
	s.DownloadParams = v
	return s
}

func (s *ExportScriptResponseBody) SetHttpStatusCode(v int32) *ExportScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportScriptResponseBody) SetMessage(v string) *ExportScriptResponseBody {
	s.Message = &v
	return s
}

func (s *ExportScriptResponseBody) SetRequestId(v string) *ExportScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportScriptResponseBody) SetSuccess(v bool) *ExportScriptResponseBody {
	s.Success = &v
	return s
}

type ExportScriptResponseBodyDownloadParams struct {
	SignatureUrl *string `json:"SignatureUrl,omitempty" xml:"SignatureUrl,omitempty"`
}

func (s ExportScriptResponseBodyDownloadParams) String() string {
	return tea.Prettify(s)
}

func (s ExportScriptResponseBodyDownloadParams) GoString() string {
	return s.String()
}

func (s *ExportScriptResponseBodyDownloadParams) SetSignatureUrl(v string) *ExportScriptResponseBodyDownloadParams {
	s.SignatureUrl = &v
	return s
}

type ExportScriptResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportScriptResponse) GoString() string {
	return s.String()
}

func (s *ExportScriptResponse) SetHeaders(v map[string]*string) *ExportScriptResponse {
	s.Headers = v
	return s
}

func (s *ExportScriptResponse) SetStatusCode(v int32) *ExportScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportScriptResponse) SetBody(v *ExportScriptResponseBody) *ExportScriptResponse {
	s.Body = v
	return s
}

type GenerateUploadUrlRequest struct {
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Key      *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s GenerateUploadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadUrlRequest) GoString() string {
	return s.String()
}

func (s *GenerateUploadUrlRequest) SetFileName(v string) *GenerateUploadUrlRequest {
	s.FileName = &v
	return s
}

func (s *GenerateUploadUrlRequest) SetKey(v string) *GenerateUploadUrlRequest {
	s.Key = &v
	return s
}

type GenerateUploadUrlResponseBody struct {
	Code           *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *GenerateUploadUrlResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateUploadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateUploadUrlResponseBody) SetCode(v string) *GenerateUploadUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateUploadUrlResponseBody) SetData(v *GenerateUploadUrlResponseBodyData) *GenerateUploadUrlResponseBody {
	s.Data = v
	return s
}

func (s *GenerateUploadUrlResponseBody) SetHttpStatusCode(v int32) *GenerateUploadUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GenerateUploadUrlResponseBody) SetMessage(v string) *GenerateUploadUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GenerateUploadUrlResponseBody) SetRequestId(v string) *GenerateUploadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateUploadUrlResponseBody) SetSuccess(v bool) *GenerateUploadUrlResponseBody {
	s.Success = &v
	return s
}

type GenerateUploadUrlResponseBodyData struct {
	AccessId  *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	Expire    *int32  `json:"Expire,omitempty" xml:"Expire,omitempty"`
	Folder    *string `json:"Folder,omitempty" xml:"Folder,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateUploadUrlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadUrlResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateUploadUrlResponseBodyData) SetAccessId(v string) *GenerateUploadUrlResponseBodyData {
	s.AccessId = &v
	return s
}

func (s *GenerateUploadUrlResponseBodyData) SetExpire(v int32) *GenerateUploadUrlResponseBodyData {
	s.Expire = &v
	return s
}

func (s *GenerateUploadUrlResponseBodyData) SetFolder(v string) *GenerateUploadUrlResponseBodyData {
	s.Folder = &v
	return s
}

func (s *GenerateUploadUrlResponseBodyData) SetHost(v string) *GenerateUploadUrlResponseBodyData {
	s.Host = &v
	return s
}

func (s *GenerateUploadUrlResponseBodyData) SetMessage(v string) *GenerateUploadUrlResponseBodyData {
	s.Message = &v
	return s
}

func (s *GenerateUploadUrlResponseBodyData) SetPolicy(v string) *GenerateUploadUrlResponseBodyData {
	s.Policy = &v
	return s
}

func (s *GenerateUploadUrlResponseBodyData) SetSignature(v string) *GenerateUploadUrlResponseBodyData {
	s.Signature = &v
	return s
}

func (s *GenerateUploadUrlResponseBodyData) SetSuccess(v bool) *GenerateUploadUrlResponseBodyData {
	s.Success = &v
	return s
}

type GenerateUploadUrlResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GenerateUploadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateUploadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadUrlResponse) GoString() string {
	return s.String()
}

func (s *GenerateUploadUrlResponse) SetHeaders(v map[string]*string) *GenerateUploadUrlResponse {
	s.Headers = v
	return s
}

func (s *GenerateUploadUrlResponse) SetStatusCode(v int32) *GenerateUploadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateUploadUrlResponse) SetBody(v *GenerateUploadUrlResponseBody) *GenerateUploadUrlResponse {
	s.Body = v
	return s
}

type GetAfterAnswerDelayPlaybackRequest struct {
	EntryId       *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s GetAfterAnswerDelayPlaybackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAfterAnswerDelayPlaybackRequest) GoString() string {
	return s.String()
}

func (s *GetAfterAnswerDelayPlaybackRequest) SetEntryId(v string) *GetAfterAnswerDelayPlaybackRequest {
	s.EntryId = &v
	return s
}

func (s *GetAfterAnswerDelayPlaybackRequest) SetStrategyLevel(v int32) *GetAfterAnswerDelayPlaybackRequest {
	s.StrategyLevel = &v
	return s
}

type GetAfterAnswerDelayPlaybackResponseBody struct {
	AfterAnswerDelayPlayback *int32  `json:"AfterAnswerDelayPlayback,omitempty" xml:"AfterAnswerDelayPlayback,omitempty"`
	Code                     *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode           *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                  *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId                *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                  *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAfterAnswerDelayPlaybackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAfterAnswerDelayPlaybackResponseBody) GoString() string {
	return s.String()
}

func (s *GetAfterAnswerDelayPlaybackResponseBody) SetAfterAnswerDelayPlayback(v int32) *GetAfterAnswerDelayPlaybackResponseBody {
	s.AfterAnswerDelayPlayback = &v
	return s
}

func (s *GetAfterAnswerDelayPlaybackResponseBody) SetCode(v string) *GetAfterAnswerDelayPlaybackResponseBody {
	s.Code = &v
	return s
}

func (s *GetAfterAnswerDelayPlaybackResponseBody) SetHttpStatusCode(v int32) *GetAfterAnswerDelayPlaybackResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetAfterAnswerDelayPlaybackResponseBody) SetMessage(v string) *GetAfterAnswerDelayPlaybackResponseBody {
	s.Message = &v
	return s
}

func (s *GetAfterAnswerDelayPlaybackResponseBody) SetRequestId(v string) *GetAfterAnswerDelayPlaybackResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAfterAnswerDelayPlaybackResponseBody) SetSuccess(v bool) *GetAfterAnswerDelayPlaybackResponseBody {
	s.Success = &v
	return s
}

type GetAfterAnswerDelayPlaybackResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAfterAnswerDelayPlaybackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAfterAnswerDelayPlaybackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAfterAnswerDelayPlaybackResponse) GoString() string {
	return s.String()
}

func (s *GetAfterAnswerDelayPlaybackResponse) SetHeaders(v map[string]*string) *GetAfterAnswerDelayPlaybackResponse {
	s.Headers = v
	return s
}

func (s *GetAfterAnswerDelayPlaybackResponse) SetStatusCode(v int32) *GetAfterAnswerDelayPlaybackResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAfterAnswerDelayPlaybackResponse) SetBody(v *GetAfterAnswerDelayPlaybackResponseBody) *GetAfterAnswerDelayPlaybackResponse {
	s.Body = v
	return s
}

type GetAsrServerInfoRequest struct {
	EntryId       *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s GetAsrServerInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsrServerInfoRequest) GoString() string {
	return s.String()
}

func (s *GetAsrServerInfoRequest) SetEntryId(v string) *GetAsrServerInfoRequest {
	s.EntryId = &v
	return s
}

func (s *GetAsrServerInfoRequest) SetStrategyLevel(v int32) *GetAsrServerInfoRequest {
	s.StrategyLevel = &v
	return s
}

type GetAsrServerInfoResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsrServerInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsrServerInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsrServerInfoResponseBody) SetCode(v string) *GetAsrServerInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsrServerInfoResponseBody) SetHttpStatusCode(v int32) *GetAsrServerInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetAsrServerInfoResponseBody) SetMessage(v string) *GetAsrServerInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetAsrServerInfoResponseBody) SetRequestId(v string) *GetAsrServerInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsrServerInfoResponseBody) SetSuccess(v bool) *GetAsrServerInfoResponseBody {
	s.Success = &v
	return s
}

type GetAsrServerInfoResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAsrServerInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAsrServerInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsrServerInfoResponse) GoString() string {
	return s.String()
}

func (s *GetAsrServerInfoResponse) SetHeaders(v map[string]*string) *GetAsrServerInfoResponse {
	s.Headers = v
	return s
}

func (s *GetAsrServerInfoResponse) SetStatusCode(v int32) *GetAsrServerInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsrServerInfoResponse) SetBody(v *GetAsrServerInfoResponseBody) *GetAsrServerInfoResponse {
	s.Body = v
	return s
}

type GetBaseStrategyPeriodRequest struct {
	EntryId       *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s GetBaseStrategyPeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBaseStrategyPeriodRequest) GoString() string {
	return s.String()
}

func (s *GetBaseStrategyPeriodRequest) SetEntryId(v string) *GetBaseStrategyPeriodRequest {
	s.EntryId = &v
	return s
}

func (s *GetBaseStrategyPeriodRequest) SetStrategyLevel(v int32) *GetBaseStrategyPeriodRequest {
	s.StrategyLevel = &v
	return s
}

type GetBaseStrategyPeriodResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	OnlyWeekdays   *bool                                           `json:"OnlyWeekdays,omitempty" xml:"OnlyWeekdays,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	WorkingTime    []*GetBaseStrategyPeriodResponseBodyWorkingTime `json:"WorkingTime,omitempty" xml:"WorkingTime,omitempty" type:"Repeated"`
}

func (s GetBaseStrategyPeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBaseStrategyPeriodResponseBody) GoString() string {
	return s.String()
}

func (s *GetBaseStrategyPeriodResponseBody) SetCode(v string) *GetBaseStrategyPeriodResponseBody {
	s.Code = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBody) SetHttpStatusCode(v int32) *GetBaseStrategyPeriodResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBody) SetMessage(v string) *GetBaseStrategyPeriodResponseBody {
	s.Message = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBody) SetOnlyWeekdays(v bool) *GetBaseStrategyPeriodResponseBody {
	s.OnlyWeekdays = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBody) SetRequestId(v string) *GetBaseStrategyPeriodResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBody) SetSuccess(v bool) *GetBaseStrategyPeriodResponseBody {
	s.Success = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBody) SetWorkingTime(v []*GetBaseStrategyPeriodResponseBodyWorkingTime) *GetBaseStrategyPeriodResponseBody {
	s.WorkingTime = v
	return s
}

type GetBaseStrategyPeriodResponseBodyWorkingTime struct {
	BeginTime       *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	BeginTimeMillis *int64  `json:"BeginTimeMillis,omitempty" xml:"BeginTimeMillis,omitempty"`
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EndTimeMillis   *int64  `json:"EndTimeMillis,omitempty" xml:"EndTimeMillis,omitempty"`
}

func (s GetBaseStrategyPeriodResponseBodyWorkingTime) String() string {
	return tea.Prettify(s)
}

func (s GetBaseStrategyPeriodResponseBodyWorkingTime) GoString() string {
	return s.String()
}

func (s *GetBaseStrategyPeriodResponseBodyWorkingTime) SetBeginTime(v string) *GetBaseStrategyPeriodResponseBodyWorkingTime {
	s.BeginTime = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBodyWorkingTime) SetBeginTimeMillis(v int64) *GetBaseStrategyPeriodResponseBodyWorkingTime {
	s.BeginTimeMillis = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBodyWorkingTime) SetEndTime(v string) *GetBaseStrategyPeriodResponseBodyWorkingTime {
	s.EndTime = &v
	return s
}

func (s *GetBaseStrategyPeriodResponseBodyWorkingTime) SetEndTimeMillis(v int64) *GetBaseStrategyPeriodResponseBodyWorkingTime {
	s.EndTimeMillis = &v
	return s
}

type GetBaseStrategyPeriodResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetBaseStrategyPeriodResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetBaseStrategyPeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBaseStrategyPeriodResponse) GoString() string {
	return s.String()
}

func (s *GetBaseStrategyPeriodResponse) SetHeaders(v map[string]*string) *GetBaseStrategyPeriodResponse {
	s.Headers = v
	return s
}

func (s *GetBaseStrategyPeriodResponse) SetStatusCode(v int32) *GetBaseStrategyPeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBaseStrategyPeriodResponse) SetBody(v *GetBaseStrategyPeriodResponseBody) *GetBaseStrategyPeriodResponse {
	s.Body = v
	return s
}

type GetConcurrentConversationQuotaResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// maxConcurrent
	MaxConcurrent       *int32  `json:"MaxConcurrent,omitempty" xml:"MaxConcurrent,omitempty"`
	Message             *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RemainingConcurrent *int32  `json:"RemainingConcurrent,omitempty" xml:"RemainingConcurrent,omitempty"`
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success             *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetConcurrentConversationQuotaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrentConversationQuotaResponseBody) GoString() string {
	return s.String()
}

func (s *GetConcurrentConversationQuotaResponseBody) SetCode(v string) *GetConcurrentConversationQuotaResponseBody {
	s.Code = &v
	return s
}

func (s *GetConcurrentConversationQuotaResponseBody) SetHttpStatusCode(v int32) *GetConcurrentConversationQuotaResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetConcurrentConversationQuotaResponseBody) SetMaxConcurrent(v int32) *GetConcurrentConversationQuotaResponseBody {
	s.MaxConcurrent = &v
	return s
}

func (s *GetConcurrentConversationQuotaResponseBody) SetMessage(v string) *GetConcurrentConversationQuotaResponseBody {
	s.Message = &v
	return s
}

func (s *GetConcurrentConversationQuotaResponseBody) SetRemainingConcurrent(v int32) *GetConcurrentConversationQuotaResponseBody {
	s.RemainingConcurrent = &v
	return s
}

func (s *GetConcurrentConversationQuotaResponseBody) SetRequestId(v string) *GetConcurrentConversationQuotaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetConcurrentConversationQuotaResponseBody) SetSuccess(v bool) *GetConcurrentConversationQuotaResponseBody {
	s.Success = &v
	return s
}

type GetConcurrentConversationQuotaResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetConcurrentConversationQuotaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetConcurrentConversationQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrentConversationQuotaResponse) GoString() string {
	return s.String()
}

func (s *GetConcurrentConversationQuotaResponse) SetHeaders(v map[string]*string) *GetConcurrentConversationQuotaResponse {
	s.Headers = v
	return s
}

func (s *GetConcurrentConversationQuotaResponse) SetStatusCode(v int32) *GetConcurrentConversationQuotaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetConcurrentConversationQuotaResponse) SetBody(v *GetConcurrentConversationQuotaResponseBody) *GetConcurrentConversationQuotaResponse {
	s.Body = v
	return s
}

type GetContactBlockListRequest struct {
	CountTotalRow *bool   `json:"CountTotalRow,omitempty" xml:"CountTotalRow,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetContactBlockListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContactBlockListRequest) GoString() string {
	return s.String()
}

func (s *GetContactBlockListRequest) SetCountTotalRow(v bool) *GetContactBlockListRequest {
	s.CountTotalRow = &v
	return s
}

func (s *GetContactBlockListRequest) SetInstanceId(v string) *GetContactBlockListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetContactBlockListRequest) SetPageNumber(v int32) *GetContactBlockListRequest {
	s.PageNumber = &v
	return s
}

func (s *GetContactBlockListRequest) SetPageSize(v int32) *GetContactBlockListRequest {
	s.PageSize = &v
	return s
}

type GetContactBlockListResponseBody struct {
	Code                 *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ContactBlocklistList *GetContactBlockListResponseBodyContactBlocklistList `json:"ContactBlocklistList,omitempty" xml:"ContactBlocklistList,omitempty" type:"Struct"`
	HttpStatusCode       *int32                                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message              *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId            *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success              *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetContactBlockListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetContactBlockListResponseBody) GoString() string {
	return s.String()
}

func (s *GetContactBlockListResponseBody) SetCode(v string) *GetContactBlockListResponseBody {
	s.Code = &v
	return s
}

func (s *GetContactBlockListResponseBody) SetContactBlocklistList(v *GetContactBlockListResponseBodyContactBlocklistList) *GetContactBlockListResponseBody {
	s.ContactBlocklistList = v
	return s
}

func (s *GetContactBlockListResponseBody) SetHttpStatusCode(v int32) *GetContactBlockListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetContactBlockListResponseBody) SetMessage(v string) *GetContactBlockListResponseBody {
	s.Message = &v
	return s
}

func (s *GetContactBlockListResponseBody) SetRequestId(v string) *GetContactBlockListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetContactBlockListResponseBody) SetSuccess(v bool) *GetContactBlockListResponseBody {
	s.Success = &v
	return s
}

type GetContactBlockListResponseBodyContactBlocklistList struct {
	List       []*GetContactBlockListResponseBodyContactBlocklistListList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetContactBlockListResponseBodyContactBlocklistList) String() string {
	return tea.Prettify(s)
}

func (s GetContactBlockListResponseBodyContactBlocklistList) GoString() string {
	return s.String()
}

func (s *GetContactBlockListResponseBodyContactBlocklistList) SetList(v []*GetContactBlockListResponseBodyContactBlocklistListList) *GetContactBlockListResponseBodyContactBlocklistList {
	s.List = v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistList) SetPageNumber(v int32) *GetContactBlockListResponseBodyContactBlocklistList {
	s.PageNumber = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistList) SetPageSize(v int32) *GetContactBlockListResponseBodyContactBlocklistList {
	s.PageSize = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistList) SetTotalCount(v int32) *GetContactBlockListResponseBodyContactBlocklistList {
	s.TotalCount = &v
	return s
}

type GetContactBlockListResponseBodyContactBlocklistListList struct {
	ContactBlockListId *string `json:"ContactBlockListId,omitempty" xml:"ContactBlockListId,omitempty"`
	CreationTime       *int64  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Creator            *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Operator           *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	PhoneNumber        *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Remark             *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s GetContactBlockListResponseBodyContactBlocklistListList) String() string {
	return tea.Prettify(s)
}

func (s GetContactBlockListResponseBodyContactBlocklistListList) GoString() string {
	return s.String()
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetContactBlockListId(v string) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.ContactBlockListId = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetCreationTime(v int64) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.CreationTime = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetCreator(v string) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.Creator = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetInstanceId(v string) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.InstanceId = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetName(v string) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.Name = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetOperator(v string) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.Operator = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetPhoneNumber(v string) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.PhoneNumber = &v
	return s
}

func (s *GetContactBlockListResponseBodyContactBlocklistListList) SetRemark(v string) *GetContactBlockListResponseBodyContactBlocklistListList {
	s.Remark = &v
	return s
}

type GetContactBlockListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetContactBlockListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetContactBlockListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContactBlockListResponse) GoString() string {
	return s.String()
}

func (s *GetContactBlockListResponse) SetHeaders(v map[string]*string) *GetContactBlockListResponse {
	s.Headers = v
	return s
}

func (s *GetContactBlockListResponse) SetStatusCode(v int32) *GetContactBlockListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetContactBlockListResponse) SetBody(v *GetContactBlockListResponseBody) *GetContactBlockListResponse {
	s.Body = v
	return s
}

type GetContactWhiteListRequest struct {
	CountTotalRow *bool   `json:"CountTotalRow,omitempty" xml:"CountTotalRow,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetContactWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContactWhiteListRequest) GoString() string {
	return s.String()
}

func (s *GetContactWhiteListRequest) SetCountTotalRow(v bool) *GetContactWhiteListRequest {
	s.CountTotalRow = &v
	return s
}

func (s *GetContactWhiteListRequest) SetInstanceId(v string) *GetContactWhiteListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetContactWhiteListRequest) SetPageNumber(v int32) *GetContactWhiteListRequest {
	s.PageNumber = &v
	return s
}

func (s *GetContactWhiteListRequest) SetPageSize(v int32) *GetContactWhiteListRequest {
	s.PageSize = &v
	return s
}

type GetContactWhiteListResponseBody struct {
	Code                 *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ContactWhitelistList *GetContactWhiteListResponseBodyContactWhitelistList `json:"ContactWhitelistList,omitempty" xml:"ContactWhitelistList,omitempty" type:"Struct"`
	HttpStatusCode       *int32                                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message              *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId            *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success              *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetContactWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetContactWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *GetContactWhiteListResponseBody) SetCode(v string) *GetContactWhiteListResponseBody {
	s.Code = &v
	return s
}

func (s *GetContactWhiteListResponseBody) SetContactWhitelistList(v *GetContactWhiteListResponseBodyContactWhitelistList) *GetContactWhiteListResponseBody {
	s.ContactWhitelistList = v
	return s
}

func (s *GetContactWhiteListResponseBody) SetHttpStatusCode(v int32) *GetContactWhiteListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetContactWhiteListResponseBody) SetMessage(v string) *GetContactWhiteListResponseBody {
	s.Message = &v
	return s
}

func (s *GetContactWhiteListResponseBody) SetRequestId(v string) *GetContactWhiteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetContactWhiteListResponseBody) SetSuccess(v bool) *GetContactWhiteListResponseBody {
	s.Success = &v
	return s
}

type GetContactWhiteListResponseBodyContactWhitelistList struct {
	List       []*GetContactWhiteListResponseBodyContactWhitelistListList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetContactWhiteListResponseBodyContactWhitelistList) String() string {
	return tea.Prettify(s)
}

func (s GetContactWhiteListResponseBodyContactWhitelistList) GoString() string {
	return s.String()
}

func (s *GetContactWhiteListResponseBodyContactWhitelistList) SetList(v []*GetContactWhiteListResponseBodyContactWhitelistListList) *GetContactWhiteListResponseBodyContactWhitelistList {
	s.List = v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistList) SetPageNumber(v int32) *GetContactWhiteListResponseBodyContactWhitelistList {
	s.PageNumber = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistList) SetPageSize(v int32) *GetContactWhiteListResponseBodyContactWhitelistList {
	s.PageSize = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistList) SetTotalCount(v int32) *GetContactWhiteListResponseBodyContactWhitelistList {
	s.TotalCount = &v
	return s
}

type GetContactWhiteListResponseBodyContactWhitelistListList struct {
	ContactWhiteListId *string `json:"ContactWhiteListId,omitempty" xml:"ContactWhiteListId,omitempty"`
	CreationTime       *int64  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Creator            *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Operator           *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	PhoneNumber        *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Remark             *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s GetContactWhiteListResponseBodyContactWhitelistListList) String() string {
	return tea.Prettify(s)
}

func (s GetContactWhiteListResponseBodyContactWhitelistListList) GoString() string {
	return s.String()
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetContactWhiteListId(v string) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.ContactWhiteListId = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetCreationTime(v int64) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.CreationTime = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetCreator(v string) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.Creator = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetInstanceId(v string) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.InstanceId = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetName(v string) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.Name = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetOperator(v string) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.Operator = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetPhoneNumber(v string) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.PhoneNumber = &v
	return s
}

func (s *GetContactWhiteListResponseBodyContactWhitelistListList) SetRemark(v string) *GetContactWhiteListResponseBodyContactWhitelistListList {
	s.Remark = &v
	return s
}

type GetContactWhiteListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetContactWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetContactWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContactWhiteListResponse) GoString() string {
	return s.String()
}

func (s *GetContactWhiteListResponse) SetHeaders(v map[string]*string) *GetContactWhiteListResponse {
	s.Headers = v
	return s
}

func (s *GetContactWhiteListResponse) SetStatusCode(v int32) *GetContactWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetContactWhiteListResponse) SetBody(v *GetContactWhiteListResponseBody) *GetContactWhiteListResponse {
	s.Body = v
	return s
}

type GetCurrentConcurrencyRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetCurrentConcurrencyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCurrentConcurrencyRequest) GoString() string {
	return s.String()
}

func (s *GetCurrentConcurrencyRequest) SetInstanceId(v string) *GetCurrentConcurrencyRequest {
	s.InstanceId = &v
	return s
}

type GetCurrentConcurrencyResponseBody struct {
	Code                      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	CurrentConcurrency        *int32  `json:"CurrentConcurrency,omitempty" xml:"CurrentConcurrency,omitempty"`
	HttpStatusCode            *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceId                *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MaxConcurrentConversation *int32  `json:"MaxConcurrentConversation,omitempty" xml:"MaxConcurrentConversation,omitempty"`
	Message                   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId                 *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCurrentConcurrencyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCurrentConcurrencyResponseBody) GoString() string {
	return s.String()
}

func (s *GetCurrentConcurrencyResponseBody) SetCode(v string) *GetCurrentConcurrencyResponseBody {
	s.Code = &v
	return s
}

func (s *GetCurrentConcurrencyResponseBody) SetCurrentConcurrency(v int32) *GetCurrentConcurrencyResponseBody {
	s.CurrentConcurrency = &v
	return s
}

func (s *GetCurrentConcurrencyResponseBody) SetHttpStatusCode(v int32) *GetCurrentConcurrencyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCurrentConcurrencyResponseBody) SetInstanceId(v string) *GetCurrentConcurrencyResponseBody {
	s.InstanceId = &v
	return s
}

func (s *GetCurrentConcurrencyResponseBody) SetMaxConcurrentConversation(v int32) *GetCurrentConcurrencyResponseBody {
	s.MaxConcurrentConversation = &v
	return s
}

func (s *GetCurrentConcurrencyResponseBody) SetMessage(v string) *GetCurrentConcurrencyResponseBody {
	s.Message = &v
	return s
}

func (s *GetCurrentConcurrencyResponseBody) SetRequestId(v string) *GetCurrentConcurrencyResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCurrentConcurrencyResponseBody) SetSuccess(v bool) *GetCurrentConcurrencyResponseBody {
	s.Success = &v
	return s
}

type GetCurrentConcurrencyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCurrentConcurrencyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCurrentConcurrencyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCurrentConcurrencyResponse) GoString() string {
	return s.String()
}

func (s *GetCurrentConcurrencyResponse) SetHeaders(v map[string]*string) *GetCurrentConcurrencyResponse {
	s.Headers = v
	return s
}

func (s *GetCurrentConcurrencyResponse) SetStatusCode(v int32) *GetCurrentConcurrencyResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCurrentConcurrencyResponse) SetBody(v *GetCurrentConcurrencyResponseBody) *GetCurrentConcurrencyResponse {
	s.Body = v
	return s
}

type GetEffectiveDaysRequest struct {
	EntryId       *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s GetEffectiveDaysRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEffectiveDaysRequest) GoString() string {
	return s.String()
}

func (s *GetEffectiveDaysRequest) SetEntryId(v string) *GetEffectiveDaysRequest {
	s.EntryId = &v
	return s
}

func (s *GetEffectiveDaysRequest) SetStrategyLevel(v int32) *GetEffectiveDaysRequest {
	s.StrategyLevel = &v
	return s
}

type GetEffectiveDaysResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	EffectiveDays  *int32  `json:"EffectiveDays,omitempty" xml:"EffectiveDays,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetEffectiveDaysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEffectiveDaysResponseBody) GoString() string {
	return s.String()
}

func (s *GetEffectiveDaysResponseBody) SetCode(v string) *GetEffectiveDaysResponseBody {
	s.Code = &v
	return s
}

func (s *GetEffectiveDaysResponseBody) SetEffectiveDays(v int32) *GetEffectiveDaysResponseBody {
	s.EffectiveDays = &v
	return s
}

func (s *GetEffectiveDaysResponseBody) SetHttpStatusCode(v int32) *GetEffectiveDaysResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetEffectiveDaysResponseBody) SetMessage(v string) *GetEffectiveDaysResponseBody {
	s.Message = &v
	return s
}

func (s *GetEffectiveDaysResponseBody) SetRequestId(v string) *GetEffectiveDaysResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEffectiveDaysResponseBody) SetSuccess(v bool) *GetEffectiveDaysResponseBody {
	s.Success = &v
	return s
}

type GetEffectiveDaysResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEffectiveDaysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEffectiveDaysResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEffectiveDaysResponse) GoString() string {
	return s.String()
}

func (s *GetEffectiveDaysResponse) SetHeaders(v map[string]*string) *GetEffectiveDaysResponse {
	s.Headers = v
	return s
}

func (s *GetEffectiveDaysResponse) SetStatusCode(v int32) *GetEffectiveDaysResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEffectiveDaysResponse) SetBody(v *GetEffectiveDaysResponseBody) *GetEffectiveDaysResponse {
	s.Body = v
	return s
}

type GetEmptyNumberNoMoreCallsInfoRequest struct {
	EntryId       *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s GetEmptyNumberNoMoreCallsInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEmptyNumberNoMoreCallsInfoRequest) GoString() string {
	return s.String()
}

func (s *GetEmptyNumberNoMoreCallsInfoRequest) SetEntryId(v string) *GetEmptyNumberNoMoreCallsInfoRequest {
	s.EntryId = &v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoRequest) SetStrategyLevel(v int32) *GetEmptyNumberNoMoreCallsInfoRequest {
	s.StrategyLevel = &v
	return s
}

type GetEmptyNumberNoMoreCallsInfoResponseBody struct {
	Code                   *string `json:"Code,omitempty" xml:"Code,omitempty"`
	EmptyNumberNoMoreCalls *bool   `json:"EmptyNumberNoMoreCalls,omitempty" xml:"EmptyNumberNoMoreCalls,omitempty"`
	HttpStatusCode         *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetEmptyNumberNoMoreCallsInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEmptyNumberNoMoreCallsInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetEmptyNumberNoMoreCallsInfoResponseBody) SetCode(v string) *GetEmptyNumberNoMoreCallsInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoResponseBody) SetEmptyNumberNoMoreCalls(v bool) *GetEmptyNumberNoMoreCallsInfoResponseBody {
	s.EmptyNumberNoMoreCalls = &v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoResponseBody) SetHttpStatusCode(v int32) *GetEmptyNumberNoMoreCallsInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoResponseBody) SetMessage(v string) *GetEmptyNumberNoMoreCallsInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoResponseBody) SetRequestId(v string) *GetEmptyNumberNoMoreCallsInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoResponseBody) SetSuccess(v bool) *GetEmptyNumberNoMoreCallsInfoResponseBody {
	s.Success = &v
	return s
}

type GetEmptyNumberNoMoreCallsInfoResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEmptyNumberNoMoreCallsInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEmptyNumberNoMoreCallsInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEmptyNumberNoMoreCallsInfoResponse) GoString() string {
	return s.String()
}

func (s *GetEmptyNumberNoMoreCallsInfoResponse) SetHeaders(v map[string]*string) *GetEmptyNumberNoMoreCallsInfoResponse {
	s.Headers = v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoResponse) SetStatusCode(v int32) *GetEmptyNumberNoMoreCallsInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEmptyNumberNoMoreCallsInfoResponse) SetBody(v *GetEmptyNumberNoMoreCallsInfoResponseBody) *GetEmptyNumberNoMoreCallsInfoResponse {
	s.Body = v
	return s
}

type GetMaxAttemptsPerDayRequest struct {
	EntryId       *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s GetMaxAttemptsPerDayRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMaxAttemptsPerDayRequest) GoString() string {
	return s.String()
}

func (s *GetMaxAttemptsPerDayRequest) SetEntryId(v string) *GetMaxAttemptsPerDayRequest {
	s.EntryId = &v
	return s
}

func (s *GetMaxAttemptsPerDayRequest) SetStrategyLevel(v int32) *GetMaxAttemptsPerDayRequest {
	s.StrategyLevel = &v
	return s
}

type GetMaxAttemptsPerDayResponseBody struct {
	Code              *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode    *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	MaxAttemptsPerDay *int32  `json:"MaxAttemptsPerDay,omitempty" xml:"MaxAttemptsPerDay,omitempty"`
	Message           *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success           *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMaxAttemptsPerDayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMaxAttemptsPerDayResponseBody) GoString() string {
	return s.String()
}

func (s *GetMaxAttemptsPerDayResponseBody) SetCode(v string) *GetMaxAttemptsPerDayResponseBody {
	s.Code = &v
	return s
}

func (s *GetMaxAttemptsPerDayResponseBody) SetHttpStatusCode(v int32) *GetMaxAttemptsPerDayResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMaxAttemptsPerDayResponseBody) SetMaxAttemptsPerDay(v int32) *GetMaxAttemptsPerDayResponseBody {
	s.MaxAttemptsPerDay = &v
	return s
}

func (s *GetMaxAttemptsPerDayResponseBody) SetMessage(v string) *GetMaxAttemptsPerDayResponseBody {
	s.Message = &v
	return s
}

func (s *GetMaxAttemptsPerDayResponseBody) SetRequestId(v string) *GetMaxAttemptsPerDayResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMaxAttemptsPerDayResponseBody) SetSuccess(v bool) *GetMaxAttemptsPerDayResponseBody {
	s.Success = &v
	return s
}

type GetMaxAttemptsPerDayResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMaxAttemptsPerDayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMaxAttemptsPerDayResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMaxAttemptsPerDayResponse) GoString() string {
	return s.String()
}

func (s *GetMaxAttemptsPerDayResponse) SetHeaders(v map[string]*string) *GetMaxAttemptsPerDayResponse {
	s.Headers = v
	return s
}

func (s *GetMaxAttemptsPerDayResponse) SetStatusCode(v int32) *GetMaxAttemptsPerDayResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMaxAttemptsPerDayResponse) SetBody(v *GetMaxAttemptsPerDayResponseBody) *GetMaxAttemptsPerDayResponse {
	s.Body = v
	return s
}

type GetNumberDistrictInfoTemplateDownloadUrlResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	FileHttpUrl    *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNumberDistrictInfoTemplateDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNumberDistrictInfoTemplateDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponseBody) SetCode(v string) *GetNumberDistrictInfoTemplateDownloadUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponseBody) SetFileHttpUrl(v string) *GetNumberDistrictInfoTemplateDownloadUrlResponseBody {
	s.FileHttpUrl = &v
	return s
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponseBody) SetHttpStatusCode(v int32) *GetNumberDistrictInfoTemplateDownloadUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponseBody) SetMessage(v string) *GetNumberDistrictInfoTemplateDownloadUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponseBody) SetRequestId(v string) *GetNumberDistrictInfoTemplateDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponseBody) SetSuccess(v bool) *GetNumberDistrictInfoTemplateDownloadUrlResponseBody {
	s.Success = &v
	return s
}

type GetNumberDistrictInfoTemplateDownloadUrlResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetNumberDistrictInfoTemplateDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNumberDistrictInfoTemplateDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNumberDistrictInfoTemplateDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponse) SetHeaders(v map[string]*string) *GetNumberDistrictInfoTemplateDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponse) SetStatusCode(v int32) *GetNumberDistrictInfoTemplateDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNumberDistrictInfoTemplateDownloadUrlResponse) SetBody(v *GetNumberDistrictInfoTemplateDownloadUrlResponseBody) *GetNumberDistrictInfoTemplateDownloadUrlResponse {
	s.Body = v
	return s
}

type GetSummaryInfoRequest struct {
	InstanceIdList []*string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty" type:"Repeated"`
}

func (s GetSummaryInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSummaryInfoRequest) GoString() string {
	return s.String()
}

func (s *GetSummaryInfoRequest) SetInstanceIdList(v []*string) *GetSummaryInfoRequest {
	s.InstanceIdList = v
	return s
}

type GetSummaryInfoResponseBody struct {
	AgentBotInstanceSummaryList []*GetSummaryInfoResponseBodyAgentBotInstanceSummaryList `json:"AgentBotInstanceSummaryList,omitempty" xml:"AgentBotInstanceSummaryList,omitempty" type:"Repeated"`
	Code                        *string                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode              *int32                                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                     *string                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId                   *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                     *bool                                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSummaryInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSummaryInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetSummaryInfoResponseBody) SetAgentBotInstanceSummaryList(v []*GetSummaryInfoResponseBodyAgentBotInstanceSummaryList) *GetSummaryInfoResponseBody {
	s.AgentBotInstanceSummaryList = v
	return s
}

func (s *GetSummaryInfoResponseBody) SetCode(v string) *GetSummaryInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetSummaryInfoResponseBody) SetHttpStatusCode(v int32) *GetSummaryInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetSummaryInfoResponseBody) SetMessage(v string) *GetSummaryInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetSummaryInfoResponseBody) SetRequestId(v string) *GetSummaryInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSummaryInfoResponseBody) SetSuccess(v bool) *GetSummaryInfoResponseBody {
	s.Success = &v
	return s
}

type GetSummaryInfoResponseBodyAgentBotInstanceSummaryList struct {
	InstanceId                *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TotalCallCount            *int64  `json:"TotalCallCount,omitempty" xml:"TotalCallCount,omitempty"`
	TotalCallTime             *int64  `json:"TotalCallTime,omitempty" xml:"TotalCallTime,omitempty"`
	UsedRecordingStorageSpace *int32  `json:"UsedRecordingStorageSpace,omitempty" xml:"UsedRecordingStorageSpace,omitempty"`
}

func (s GetSummaryInfoResponseBodyAgentBotInstanceSummaryList) String() string {
	return tea.Prettify(s)
}

func (s GetSummaryInfoResponseBodyAgentBotInstanceSummaryList) GoString() string {
	return s.String()
}

func (s *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList) SetInstanceId(v string) *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList {
	s.InstanceId = &v
	return s
}

func (s *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList) SetTotalCallCount(v int64) *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList {
	s.TotalCallCount = &v
	return s
}

func (s *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList) SetTotalCallTime(v int64) *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList {
	s.TotalCallTime = &v
	return s
}

func (s *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList) SetUsedRecordingStorageSpace(v int32) *GetSummaryInfoResponseBodyAgentBotInstanceSummaryList {
	s.UsedRecordingStorageSpace = &v
	return s
}

type GetSummaryInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSummaryInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSummaryInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSummaryInfoResponse) GoString() string {
	return s.String()
}

func (s *GetSummaryInfoResponse) SetHeaders(v map[string]*string) *GetSummaryInfoResponse {
	s.Headers = v
	return s
}

func (s *GetSummaryInfoResponse) SetStatusCode(v int32) *GetSummaryInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSummaryInfoResponse) SetBody(v *GetSummaryInfoResponseBody) *GetSummaryInfoResponse {
	s.Body = v
	return s
}

type GetTaskByUuidRequest struct {
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TaskId            *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	WithConversations *bool   `json:"WithConversations,omitempty" xml:"WithConversations,omitempty"`
}

func (s GetTaskByUuidRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTaskByUuidRequest) GoString() string {
	return s.String()
}

func (s *GetTaskByUuidRequest) SetInstanceId(v string) *GetTaskByUuidRequest {
	s.InstanceId = &v
	return s
}

func (s *GetTaskByUuidRequest) SetTaskId(v string) *GetTaskByUuidRequest {
	s.TaskId = &v
	return s
}

func (s *GetTaskByUuidRequest) SetWithConversations(v bool) *GetTaskByUuidRequest {
	s.WithConversations = &v
	return s
}

type GetTaskByUuidResponseBody struct {
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Task      *GetTaskByUuidResponseBodyTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Struct"`
}

func (s GetTaskByUuidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTaskByUuidResponseBody) GoString() string {
	return s.String()
}

func (s *GetTaskByUuidResponseBody) SetRequestId(v string) *GetTaskByUuidResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTaskByUuidResponseBody) SetTask(v *GetTaskByUuidResponseBodyTask) *GetTaskByUuidResponseBody {
	s.Task = v
	return s
}

type GetTaskByUuidResponseBodyTask struct {
	ActualTime    *int64  `json:"ActualTime,omitempty" xml:"ActualTime,omitempty"`
	CallId        *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CalledNumber  *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	EndReason     *int32  `json:"EndReason,omitempty" xml:"EndReason,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId    *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PlannedTime   *int64  `json:"PlannedTime,omitempty" xml:"PlannedTime,omitempty"`
}

func (s GetTaskByUuidResponseBodyTask) String() string {
	return tea.Prettify(s)
}

func (s GetTaskByUuidResponseBodyTask) GoString() string {
	return s.String()
}

func (s *GetTaskByUuidResponseBodyTask) SetActualTime(v int64) *GetTaskByUuidResponseBodyTask {
	s.ActualTime = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetCallId(v string) *GetTaskByUuidResponseBodyTask {
	s.CallId = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetCalledNumber(v string) *GetTaskByUuidResponseBodyTask {
	s.CalledNumber = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetCallingNumber(v string) *GetTaskByUuidResponseBodyTask {
	s.CallingNumber = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetEndReason(v int32) *GetTaskByUuidResponseBodyTask {
	s.EndReason = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetEndTime(v int64) *GetTaskByUuidResponseBodyTask {
	s.EndTime = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetId(v string) *GetTaskByUuidResponseBodyTask {
	s.Id = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetInstanceId(v string) *GetTaskByUuidResponseBodyTask {
	s.InstanceId = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetJobGroupId(v string) *GetTaskByUuidResponseBodyTask {
	s.JobGroupId = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetJobId(v string) *GetTaskByUuidResponseBodyTask {
	s.JobId = &v
	return s
}

func (s *GetTaskByUuidResponseBodyTask) SetPlannedTime(v int64) *GetTaskByUuidResponseBodyTask {
	s.PlannedTime = &v
	return s
}

type GetTaskByUuidResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetTaskByUuidResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTaskByUuidResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTaskByUuidResponse) GoString() string {
	return s.String()
}

func (s *GetTaskByUuidResponse) SetHeaders(v map[string]*string) *GetTaskByUuidResponse {
	s.Headers = v
	return s
}

func (s *GetTaskByUuidResponse) SetStatusCode(v int32) *GetTaskByUuidResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTaskByUuidResponse) SetBody(v *GetTaskByUuidResponseBody) *GetTaskByUuidResponse {
	s.Body = v
	return s
}

type GetVersionResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Version        *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVersionResponseBody) GoString() string {
	return s.String()
}

func (s *GetVersionResponseBody) SetCode(v string) *GetVersionResponseBody {
	s.Code = &v
	return s
}

func (s *GetVersionResponseBody) SetHttpStatusCode(v int32) *GetVersionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetVersionResponseBody) SetMessage(v string) *GetVersionResponseBody {
	s.Message = &v
	return s
}

func (s *GetVersionResponseBody) SetRequestId(v string) *GetVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVersionResponseBody) SetSuccess(v bool) *GetVersionResponseBody {
	s.Success = &v
	return s
}

func (s *GetVersionResponseBody) SetVersion(v string) *GetVersionResponseBody {
	s.Version = &v
	return s
}

type GetVersionResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVersionResponse) GoString() string {
	return s.String()
}

func (s *GetVersionResponse) SetHeaders(v map[string]*string) *GetVersionResponse {
	s.Headers = v
	return s
}

func (s *GetVersionResponse) SetStatusCode(v int32) *GetVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVersionResponse) SetBody(v *GetVersionResponseBody) *GetVersionResponse {
	s.Body = v
	return s
}

type ImportScriptRequest struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SignatureUrl *string `json:"SignatureUrl,omitempty" xml:"SignatureUrl,omitempty"`
}

func (s ImportScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportScriptRequest) GoString() string {
	return s.String()
}

func (s *ImportScriptRequest) SetInstanceId(v string) *ImportScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *ImportScriptRequest) SetSignatureUrl(v string) *ImportScriptRequest {
	s.SignatureUrl = &v
	return s
}

type ImportScriptResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptId       *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ImportScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportScriptResponseBody) GoString() string {
	return s.String()
}

func (s *ImportScriptResponseBody) SetCode(v string) *ImportScriptResponseBody {
	s.Code = &v
	return s
}

func (s *ImportScriptResponseBody) SetHttpStatusCode(v int32) *ImportScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportScriptResponseBody) SetMessage(v string) *ImportScriptResponseBody {
	s.Message = &v
	return s
}

func (s *ImportScriptResponseBody) SetRequestId(v string) *ImportScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportScriptResponseBody) SetScriptId(v string) *ImportScriptResponseBody {
	s.ScriptId = &v
	return s
}

func (s *ImportScriptResponseBody) SetSuccess(v bool) *ImportScriptResponseBody {
	s.Success = &v
	return s
}

type ImportScriptResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ImportScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportScriptResponse) GoString() string {
	return s.String()
}

func (s *ImportScriptResponse) SetHeaders(v map[string]*string) *ImportScriptResponse {
	s.Headers = v
	return s
}

func (s *ImportScriptResponse) SetStatusCode(v int32) *ImportScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportScriptResponse) SetBody(v *ImportScriptResponseBody) *ImportScriptResponse {
	s.Body = v
	return s
}

type InflightTaskTimeoutRequest struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceOwnerId *int64  `json:"InstanceOwnerId,omitempty" xml:"InstanceOwnerId,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s InflightTaskTimeoutRequest) String() string {
	return tea.Prettify(s)
}

func (s InflightTaskTimeoutRequest) GoString() string {
	return s.String()
}

func (s *InflightTaskTimeoutRequest) SetInstanceId(v string) *InflightTaskTimeoutRequest {
	s.InstanceId = &v
	return s
}

func (s *InflightTaskTimeoutRequest) SetInstanceOwnerId(v int64) *InflightTaskTimeoutRequest {
	s.InstanceOwnerId = &v
	return s
}

func (s *InflightTaskTimeoutRequest) SetTaskId(v string) *InflightTaskTimeoutRequest {
	s.TaskId = &v
	return s
}

type InflightTaskTimeoutResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InflightTaskTimeoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InflightTaskTimeoutResponseBody) GoString() string {
	return s.String()
}

func (s *InflightTaskTimeoutResponseBody) SetCode(v string) *InflightTaskTimeoutResponseBody {
	s.Code = &v
	return s
}

func (s *InflightTaskTimeoutResponseBody) SetHttpStatusCode(v int32) *InflightTaskTimeoutResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *InflightTaskTimeoutResponseBody) SetMessage(v string) *InflightTaskTimeoutResponseBody {
	s.Message = &v
	return s
}

func (s *InflightTaskTimeoutResponseBody) SetRequestId(v string) *InflightTaskTimeoutResponseBody {
	s.RequestId = &v
	return s
}

func (s *InflightTaskTimeoutResponseBody) SetSuccess(v bool) *InflightTaskTimeoutResponseBody {
	s.Success = &v
	return s
}

type InflightTaskTimeoutResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InflightTaskTimeoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InflightTaskTimeoutResponse) String() string {
	return tea.Prettify(s)
}

func (s InflightTaskTimeoutResponse) GoString() string {
	return s.String()
}

func (s *InflightTaskTimeoutResponse) SetHeaders(v map[string]*string) *InflightTaskTimeoutResponse {
	s.Headers = v
	return s
}

func (s *InflightTaskTimeoutResponse) SetStatusCode(v int32) *InflightTaskTimeoutResponse {
	s.StatusCode = &v
	return s
}

func (s *InflightTaskTimeoutResponse) SetBody(v *InflightTaskTimeoutResponseBody) *InflightTaskTimeoutResponse {
	s.Body = v
	return s
}

type ListAllTenantBindNumberBindingResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *ListAllTenantBindNumberBindingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAllTenantBindNumberBindingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllTenantBindNumberBindingResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllTenantBindNumberBindingResponseBody) SetCode(v string) *ListAllTenantBindNumberBindingResponseBody {
	s.Code = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBody) SetData(v *ListAllTenantBindNumberBindingResponseBodyData) *ListAllTenantBindNumberBindingResponseBody {
	s.Data = v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBody) SetHttpStatusCode(v int32) *ListAllTenantBindNumberBindingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBody) SetMessage(v string) *ListAllTenantBindNumberBindingResponseBody {
	s.Message = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBody) SetRequestId(v string) *ListAllTenantBindNumberBindingResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBody) SetSuccess(v bool) *ListAllTenantBindNumberBindingResponseBody {
	s.Success = &v
	return s
}

type ListAllTenantBindNumberBindingResponseBodyData struct {
	List []*ListAllTenantBindNumberBindingResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
}

func (s ListAllTenantBindNumberBindingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAllTenantBindNumberBindingResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAllTenantBindNumberBindingResponseBodyData) SetList(v []*ListAllTenantBindNumberBindingResponseBodyDataList) *ListAllTenantBindNumberBindingResponseBodyData {
	s.List = v
	return s
}

type ListAllTenantBindNumberBindingResponseBodyDataList struct {
	BillingType      *string   `json:"BillingType,omitempty" xml:"BillingType,omitempty"`
	BindingId        *string   `json:"BindingId,omitempty" xml:"BindingId,omitempty"`
	InstanceNameList []*string `json:"InstanceNameList,omitempty" xml:"InstanceNameList,omitempty" type:"Repeated"`
	Number           *string   `json:"Number,omitempty" xml:"Number,omitempty"`
	SerializedParams *string   `json:"SerializedParams,omitempty" xml:"SerializedParams,omitempty"`
	TrunkName        *string   `json:"TrunkName,omitempty" xml:"TrunkName,omitempty"`
}

func (s ListAllTenantBindNumberBindingResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListAllTenantBindNumberBindingResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListAllTenantBindNumberBindingResponseBodyDataList) SetBillingType(v string) *ListAllTenantBindNumberBindingResponseBodyDataList {
	s.BillingType = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBodyDataList) SetBindingId(v string) *ListAllTenantBindNumberBindingResponseBodyDataList {
	s.BindingId = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBodyDataList) SetInstanceNameList(v []*string) *ListAllTenantBindNumberBindingResponseBodyDataList {
	s.InstanceNameList = v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBodyDataList) SetNumber(v string) *ListAllTenantBindNumberBindingResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBodyDataList) SetSerializedParams(v string) *ListAllTenantBindNumberBindingResponseBodyDataList {
	s.SerializedParams = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponseBodyDataList) SetTrunkName(v string) *ListAllTenantBindNumberBindingResponseBodyDataList {
	s.TrunkName = &v
	return s
}

type ListAllTenantBindNumberBindingResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAllTenantBindNumberBindingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAllTenantBindNumberBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllTenantBindNumberBindingResponse) GoString() string {
	return s.String()
}

func (s *ListAllTenantBindNumberBindingResponse) SetHeaders(v map[string]*string) *ListAllTenantBindNumberBindingResponse {
	s.Headers = v
	return s
}

func (s *ListAllTenantBindNumberBindingResponse) SetStatusCode(v int32) *ListAllTenantBindNumberBindingResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllTenantBindNumberBindingResponse) SetBody(v *ListAllTenantBindNumberBindingResponseBody) *ListAllTenantBindNumberBindingResponse {
	s.Body = v
	return s
}

type ListChatbotInstancesRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListChatbotInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChatbotInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListChatbotInstancesRequest) SetPageNumber(v int32) *ListChatbotInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListChatbotInstancesRequest) SetPageSize(v int32) *ListChatbotInstancesRequest {
	s.PageSize = &v
	return s
}

type ListChatbotInstancesResponseBody struct {
	Bots           []*ListChatbotInstancesResponseBodyBots `json:"Bots,omitempty" xml:"Bots,omitempty" type:"Repeated"`
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber     *int64                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount     *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListChatbotInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListChatbotInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListChatbotInstancesResponseBody) SetBots(v []*ListChatbotInstancesResponseBodyBots) *ListChatbotInstancesResponseBody {
	s.Bots = v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetCode(v string) *ListChatbotInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetHttpStatusCode(v int32) *ListChatbotInstancesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetMessage(v string) *ListChatbotInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetPageNumber(v int64) *ListChatbotInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetPageSize(v int64) *ListChatbotInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetRequestId(v string) *ListChatbotInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetSuccess(v bool) *ListChatbotInstancesResponseBody {
	s.Success = &v
	return s
}

func (s *ListChatbotInstancesResponseBody) SetTotalCount(v int64) *ListChatbotInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type ListChatbotInstancesResponseBodyBots struct {
	Avatar       *string `json:"Avatar,omitempty" xml:"Avatar,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Introduction *string `json:"Introduction,omitempty" xml:"Introduction,omitempty"`
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TimeZone     *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s ListChatbotInstancesResponseBodyBots) String() string {
	return tea.Prettify(s)
}

func (s ListChatbotInstancesResponseBodyBots) GoString() string {
	return s.String()
}

func (s *ListChatbotInstancesResponseBodyBots) SetAvatar(v string) *ListChatbotInstancesResponseBodyBots {
	s.Avatar = &v
	return s
}

func (s *ListChatbotInstancesResponseBodyBots) SetCreateTime(v string) *ListChatbotInstancesResponseBodyBots {
	s.CreateTime = &v
	return s
}

func (s *ListChatbotInstancesResponseBodyBots) SetInstanceId(v string) *ListChatbotInstancesResponseBodyBots {
	s.InstanceId = &v
	return s
}

func (s *ListChatbotInstancesResponseBodyBots) SetIntroduction(v string) *ListChatbotInstancesResponseBodyBots {
	s.Introduction = &v
	return s
}

func (s *ListChatbotInstancesResponseBodyBots) SetLanguageCode(v string) *ListChatbotInstancesResponseBodyBots {
	s.LanguageCode = &v
	return s
}

func (s *ListChatbotInstancesResponseBodyBots) SetName(v string) *ListChatbotInstancesResponseBodyBots {
	s.Name = &v
	return s
}

func (s *ListChatbotInstancesResponseBodyBots) SetTimeZone(v string) *ListChatbotInstancesResponseBodyBots {
	s.TimeZone = &v
	return s
}

type ListChatbotInstancesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListChatbotInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListChatbotInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListChatbotInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListChatbotInstancesResponse) SetHeaders(v map[string]*string) *ListChatbotInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListChatbotInstancesResponse) SetStatusCode(v int32) *ListChatbotInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListChatbotInstancesResponse) SetBody(v *ListChatbotInstancesResponseBody) *ListChatbotInstancesResponse {
	s.Body = v
	return s
}

type ListDialogueFlowsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ListDialogueFlowsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDialogueFlowsRequest) GoString() string {
	return s.String()
}

func (s *ListDialogueFlowsRequest) SetInstanceId(v string) *ListDialogueFlowsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDialogueFlowsRequest) SetScriptId(v string) *ListDialogueFlowsRequest {
	s.ScriptId = &v
	return s
}

type ListDialogueFlowsResponseBody struct {
	Code           *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	DialogueFlows  []*ListDialogueFlowsResponseBodyDialogueFlows `json:"DialogueFlows,omitempty" xml:"DialogueFlows,omitempty" type:"Repeated"`
	HttpStatusCode *int32                                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDialogueFlowsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDialogueFlowsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDialogueFlowsResponseBody) SetCode(v string) *ListDialogueFlowsResponseBody {
	s.Code = &v
	return s
}

func (s *ListDialogueFlowsResponseBody) SetDialogueFlows(v []*ListDialogueFlowsResponseBodyDialogueFlows) *ListDialogueFlowsResponseBody {
	s.DialogueFlows = v
	return s
}

func (s *ListDialogueFlowsResponseBody) SetHttpStatusCode(v int32) *ListDialogueFlowsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDialogueFlowsResponseBody) SetMessage(v string) *ListDialogueFlowsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDialogueFlowsResponseBody) SetRequestId(v string) *ListDialogueFlowsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDialogueFlowsResponseBody) SetSuccess(v bool) *ListDialogueFlowsResponseBody {
	s.Success = &v
	return s
}

type ListDialogueFlowsResponseBodyDialogueFlows struct {
	DialogueFlowDefinition *string `json:"DialogueFlowDefinition,omitempty" xml:"DialogueFlowDefinition,omitempty"`
	DialogueFlowId         *string `json:"DialogueFlowId,omitempty" xml:"DialogueFlowId,omitempty"`
	DialogueFlowName       *string `json:"DialogueFlowName,omitempty" xml:"DialogueFlowName,omitempty"`
	DialogueFlowType       *string `json:"DialogueFlowType,omitempty" xml:"DialogueFlowType,omitempty"`
	ScriptId               *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptVersion          *string `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
}

func (s ListDialogueFlowsResponseBodyDialogueFlows) String() string {
	return tea.Prettify(s)
}

func (s ListDialogueFlowsResponseBodyDialogueFlows) GoString() string {
	return s.String()
}

func (s *ListDialogueFlowsResponseBodyDialogueFlows) SetDialogueFlowDefinition(v string) *ListDialogueFlowsResponseBodyDialogueFlows {
	s.DialogueFlowDefinition = &v
	return s
}

func (s *ListDialogueFlowsResponseBodyDialogueFlows) SetDialogueFlowId(v string) *ListDialogueFlowsResponseBodyDialogueFlows {
	s.DialogueFlowId = &v
	return s
}

func (s *ListDialogueFlowsResponseBodyDialogueFlows) SetDialogueFlowName(v string) *ListDialogueFlowsResponseBodyDialogueFlows {
	s.DialogueFlowName = &v
	return s
}

func (s *ListDialogueFlowsResponseBodyDialogueFlows) SetDialogueFlowType(v string) *ListDialogueFlowsResponseBodyDialogueFlows {
	s.DialogueFlowType = &v
	return s
}

func (s *ListDialogueFlowsResponseBodyDialogueFlows) SetScriptId(v string) *ListDialogueFlowsResponseBodyDialogueFlows {
	s.ScriptId = &v
	return s
}

func (s *ListDialogueFlowsResponseBodyDialogueFlows) SetScriptVersion(v string) *ListDialogueFlowsResponseBodyDialogueFlows {
	s.ScriptVersion = &v
	return s
}

type ListDialogueFlowsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListDialogueFlowsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDialogueFlowsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDialogueFlowsResponse) GoString() string {
	return s.String()
}

func (s *ListDialogueFlowsResponse) SetHeaders(v map[string]*string) *ListDialogueFlowsResponse {
	s.Headers = v
	return s
}

func (s *ListDialogueFlowsResponse) SetStatusCode(v int32) *ListDialogueFlowsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDialogueFlowsResponse) SetBody(v *ListDialogueFlowsResponseBody) *ListDialogueFlowsResponse {
	s.Body = v
	return s
}

type ListDownloadTasksRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListDownloadTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDownloadTasksRequest) GoString() string {
	return s.String()
}

func (s *ListDownloadTasksRequest) SetPageNumber(v int32) *ListDownloadTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDownloadTasksRequest) SetPageSize(v int32) *ListDownloadTasksRequest {
	s.PageSize = &v
	return s
}

type ListDownloadTasksResponseBody struct {
	Code           *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	DownloadTasks  *ListDownloadTasksResponseBodyDownloadTasks `json:"DownloadTasks,omitempty" xml:"DownloadTasks,omitempty" type:"Struct"`
	HttpStatusCode *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDownloadTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDownloadTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListDownloadTasksResponseBody) SetCode(v string) *ListDownloadTasksResponseBody {
	s.Code = &v
	return s
}

func (s *ListDownloadTasksResponseBody) SetDownloadTasks(v *ListDownloadTasksResponseBodyDownloadTasks) *ListDownloadTasksResponseBody {
	s.DownloadTasks = v
	return s
}

func (s *ListDownloadTasksResponseBody) SetHttpStatusCode(v int32) *ListDownloadTasksResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDownloadTasksResponseBody) SetMessage(v string) *ListDownloadTasksResponseBody {
	s.Message = &v
	return s
}

func (s *ListDownloadTasksResponseBody) SetRequestId(v string) *ListDownloadTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDownloadTasksResponseBody) SetSuccess(v bool) *ListDownloadTasksResponseBody {
	s.Success = &v
	return s
}

type ListDownloadTasksResponseBodyDownloadTasks struct {
	List       []*ListDownloadTasksResponseBodyDownloadTasksList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDownloadTasksResponseBodyDownloadTasks) String() string {
	return tea.Prettify(s)
}

func (s ListDownloadTasksResponseBodyDownloadTasks) GoString() string {
	return s.String()
}

func (s *ListDownloadTasksResponseBodyDownloadTasks) SetList(v []*ListDownloadTasksResponseBodyDownloadTasksList) *ListDownloadTasksResponseBodyDownloadTasks {
	s.List = v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasks) SetPageNumber(v int32) *ListDownloadTasksResponseBodyDownloadTasks {
	s.PageNumber = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasks) SetPageSize(v int32) *ListDownloadTasksResponseBodyDownloadTasks {
	s.PageSize = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasks) SetTotalCount(v int32) *ListDownloadTasksResponseBodyDownloadTasks {
	s.TotalCount = &v
	return s
}

type ListDownloadTasksResponseBodyDownloadTasksList struct {
	DownloadTaskFiles []*ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles `json:"DownloadTaskFiles,omitempty" xml:"DownloadTaskFiles,omitempty" type:"Repeated"`
	ExpireTime        *int64                                                             `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	Status            *string                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId            *string                                                            `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Title             *string                                                            `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListDownloadTasksResponseBodyDownloadTasksList) String() string {
	return tea.Prettify(s)
}

func (s ListDownloadTasksResponseBodyDownloadTasksList) GoString() string {
	return s.String()
}

func (s *ListDownloadTasksResponseBodyDownloadTasksList) SetDownloadTaskFiles(v []*ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles) *ListDownloadTasksResponseBodyDownloadTasksList {
	s.DownloadTaskFiles = v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasksList) SetExpireTime(v int64) *ListDownloadTasksResponseBodyDownloadTasksList {
	s.ExpireTime = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasksList) SetStatus(v string) *ListDownloadTasksResponseBodyDownloadTasksList {
	s.Status = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasksList) SetTaskId(v string) *ListDownloadTasksResponseBodyDownloadTasksList {
	s.TaskId = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasksList) SetTitle(v string) *ListDownloadTasksResponseBodyDownloadTasksList {
	s.Title = &v
	return s
}

type ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles struct {
	FileId   *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	Progress *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles) String() string {
	return tea.Prettify(s)
}

func (s ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles) GoString() string {
	return s.String()
}

func (s *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles) SetFileId(v string) *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles {
	s.FileId = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles) SetProgress(v int32) *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles {
	s.Progress = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles) SetStatus(v string) *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles {
	s.Status = &v
	return s
}

func (s *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles) SetTitle(v string) *ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles {
	s.Title = &v
	return s
}

type ListDownloadTasksResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListDownloadTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDownloadTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDownloadTasksResponse) GoString() string {
	return s.String()
}

func (s *ListDownloadTasksResponse) SetHeaders(v map[string]*string) *ListDownloadTasksResponse {
	s.Headers = v
	return s
}

func (s *ListDownloadTasksResponse) SetStatusCode(v int32) *ListDownloadTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDownloadTasksResponse) SetBody(v *ListDownloadTasksResponseBody) *ListDownloadTasksResponse {
	s.Body = v
	return s
}

type ListGlobalQuestionsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ListGlobalQuestionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGlobalQuestionsRequest) GoString() string {
	return s.String()
}

func (s *ListGlobalQuestionsRequest) SetInstanceId(v string) *ListGlobalQuestionsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListGlobalQuestionsRequest) SetPageNumber(v int32) *ListGlobalQuestionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListGlobalQuestionsRequest) SetPageSize(v int32) *ListGlobalQuestionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListGlobalQuestionsRequest) SetScriptId(v string) *ListGlobalQuestionsRequest {
	s.ScriptId = &v
	return s
}

type ListGlobalQuestionsResponseBody struct {
	Code            *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	GlobalQuestions *ListGlobalQuestionsResponseBodyGlobalQuestions `json:"GlobalQuestions,omitempty" xml:"GlobalQuestions,omitempty" type:"Struct"`
	HttpStatusCode  *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message         *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListGlobalQuestionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListGlobalQuestionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListGlobalQuestionsResponseBody) SetCode(v string) *ListGlobalQuestionsResponseBody {
	s.Code = &v
	return s
}

func (s *ListGlobalQuestionsResponseBody) SetGlobalQuestions(v *ListGlobalQuestionsResponseBodyGlobalQuestions) *ListGlobalQuestionsResponseBody {
	s.GlobalQuestions = v
	return s
}

func (s *ListGlobalQuestionsResponseBody) SetHttpStatusCode(v int32) *ListGlobalQuestionsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListGlobalQuestionsResponseBody) SetMessage(v string) *ListGlobalQuestionsResponseBody {
	s.Message = &v
	return s
}

func (s *ListGlobalQuestionsResponseBody) SetRequestId(v string) *ListGlobalQuestionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListGlobalQuestionsResponseBody) SetSuccess(v bool) *ListGlobalQuestionsResponseBody {
	s.Success = &v
	return s
}

type ListGlobalQuestionsResponseBodyGlobalQuestions struct {
	List       []*ListGlobalQuestionsResponseBodyGlobalQuestionsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListGlobalQuestionsResponseBodyGlobalQuestions) String() string {
	return tea.Prettify(s)
}

func (s ListGlobalQuestionsResponseBodyGlobalQuestions) GoString() string {
	return s.String()
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestions) SetList(v []*ListGlobalQuestionsResponseBodyGlobalQuestionsList) *ListGlobalQuestionsResponseBodyGlobalQuestions {
	s.List = v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestions) SetPageNumber(v int32) *ListGlobalQuestionsResponseBodyGlobalQuestions {
	s.PageNumber = &v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestions) SetPageSize(v int32) *ListGlobalQuestionsResponseBodyGlobalQuestions {
	s.PageSize = &v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestions) SetTotalCount(v int32) *ListGlobalQuestionsResponseBodyGlobalQuestions {
	s.TotalCount = &v
	return s
}

type ListGlobalQuestionsResponseBodyGlobalQuestionsList struct {
	Answers            *string `json:"Answers,omitempty" xml:"Answers,omitempty"`
	GlobalQuestionId   *string `json:"GlobalQuestionId,omitempty" xml:"GlobalQuestionId,omitempty"`
	GlobalQuestionName *string `json:"GlobalQuestionName,omitempty" xml:"GlobalQuestionName,omitempty"`
	GlobalQuestionType *string `json:"GlobalQuestionType,omitempty" xml:"GlobalQuestionType,omitempty"`
	Questions          *string `json:"Questions,omitempty" xml:"Questions,omitempty"`
	ScriptId           *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ListGlobalQuestionsResponseBodyGlobalQuestionsList) String() string {
	return tea.Prettify(s)
}

func (s ListGlobalQuestionsResponseBodyGlobalQuestionsList) GoString() string {
	return s.String()
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestionsList) SetAnswers(v string) *ListGlobalQuestionsResponseBodyGlobalQuestionsList {
	s.Answers = &v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestionsList) SetGlobalQuestionId(v string) *ListGlobalQuestionsResponseBodyGlobalQuestionsList {
	s.GlobalQuestionId = &v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestionsList) SetGlobalQuestionName(v string) *ListGlobalQuestionsResponseBodyGlobalQuestionsList {
	s.GlobalQuestionName = &v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestionsList) SetGlobalQuestionType(v string) *ListGlobalQuestionsResponseBodyGlobalQuestionsList {
	s.GlobalQuestionType = &v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestionsList) SetQuestions(v string) *ListGlobalQuestionsResponseBodyGlobalQuestionsList {
	s.Questions = &v
	return s
}

func (s *ListGlobalQuestionsResponseBodyGlobalQuestionsList) SetScriptId(v string) *ListGlobalQuestionsResponseBodyGlobalQuestionsList {
	s.ScriptId = &v
	return s
}

type ListGlobalQuestionsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListGlobalQuestionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListGlobalQuestionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListGlobalQuestionsResponse) GoString() string {
	return s.String()
}

func (s *ListGlobalQuestionsResponse) SetHeaders(v map[string]*string) *ListGlobalQuestionsResponse {
	s.Headers = v
	return s
}

func (s *ListGlobalQuestionsResponse) SetStatusCode(v int32) *ListGlobalQuestionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListGlobalQuestionsResponse) SetBody(v *ListGlobalQuestionsResponseBody) *ListGlobalQuestionsResponse {
	s.Body = v
	return s
}

type ListInstancesRequest struct {
	ResourceGroupId *string                    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag             []*ListInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListInstancesRequest) SetResourceGroupId(v string) *ListInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListInstancesRequest) SetTag(v []*ListInstancesRequestTag) *ListInstancesRequest {
	s.Tag = v
	return s
}

type ListInstancesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *ListInstancesRequestTag) SetKey(v string) *ListInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *ListInstancesRequestTag) SetValue(v string) *ListInstancesRequestTag {
	s.Value = &v
	return s
}

type ListInstancesResponseBody struct {
	Code           *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Instances      []*ListInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	Message        *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBody) SetCode(v string) *ListInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ListInstancesResponseBody) SetHttpStatusCode(v int32) *ListInstancesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInstancesResponseBody) SetInstances(v []*ListInstancesResponseBodyInstances) *ListInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *ListInstancesResponseBody) SetMessage(v string) *ListInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ListInstancesResponseBody) SetRequestId(v string) *ListInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstancesResponseBody) SetSuccess(v bool) *ListInstancesResponseBody {
	s.Success = &v
	return s
}

type ListInstancesResponseBodyInstances struct {
	CreationTime              *int64                                            `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CreatorId                 *int64                                            `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	CreatorName               *string                                           `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	InstanceDescription       *string                                           `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId                *string                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName              *string                                           `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	IsPreset                  *bool                                             `json:"IsPreset,omitempty" xml:"IsPreset,omitempty"`
	MaxConcurrentConversation *int32                                            `json:"MaxConcurrentConversation,omitempty" xml:"MaxConcurrentConversation,omitempty"`
	OwnerName                 *string                                           `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	ResourceGroupId           *string                                           `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceTags              []*ListInstancesResponseBodyInstancesResourceTags `json:"ResourceTags,omitempty" xml:"ResourceTags,omitempty" type:"Repeated"`
}

func (s ListInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstances) SetCreationTime(v int64) *ListInstancesResponseBodyInstances {
	s.CreationTime = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetCreatorId(v int64) *ListInstancesResponseBodyInstances {
	s.CreatorId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetCreatorName(v string) *ListInstancesResponseBodyInstances {
	s.CreatorName = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetInstanceDescription(v string) *ListInstancesResponseBodyInstances {
	s.InstanceDescription = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetInstanceId(v string) *ListInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetInstanceName(v string) *ListInstancesResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetIsPreset(v bool) *ListInstancesResponseBodyInstances {
	s.IsPreset = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetMaxConcurrentConversation(v int32) *ListInstancesResponseBodyInstances {
	s.MaxConcurrentConversation = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetOwnerName(v string) *ListInstancesResponseBodyInstances {
	s.OwnerName = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetResourceGroupId(v string) *ListInstancesResponseBodyInstances {
	s.ResourceGroupId = &v
	return s
}

func (s *ListInstancesResponseBodyInstances) SetResourceTags(v []*ListInstancesResponseBodyInstancesResourceTags) *ListInstancesResponseBodyInstances {
	s.ResourceTags = v
	return s
}

type ListInstancesResponseBodyInstancesResourceTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListInstancesResponseBodyInstancesResourceTags) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyInstancesResourceTags) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyInstancesResourceTags) SetKey(v string) *ListInstancesResponseBodyInstancesResourceTags {
	s.Key = &v
	return s
}

func (s *ListInstancesResponseBodyInstancesResourceTags) SetValue(v string) *ListInstancesResponseBodyInstancesResourceTags {
	s.Value = &v
	return s
}

type ListInstancesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesResponse) SetHeaders(v map[string]*string) *ListInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesResponse) SetStatusCode(v int32) *ListInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstancesResponse) SetBody(v *ListInstancesResponseBody) *ListInstancesResponse {
	s.Body = v
	return s
}

type ListIntentsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Keyword    *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ListIntentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIntentsRequest) GoString() string {
	return s.String()
}

func (s *ListIntentsRequest) SetInstanceId(v string) *ListIntentsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListIntentsRequest) SetKeyword(v string) *ListIntentsRequest {
	s.Keyword = &v
	return s
}

func (s *ListIntentsRequest) SetPageNumber(v int32) *ListIntentsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListIntentsRequest) SetPageSize(v int32) *ListIntentsRequest {
	s.PageSize = &v
	return s
}

func (s *ListIntentsRequest) SetScriptId(v string) *ListIntentsRequest {
	s.ScriptId = &v
	return s
}

type ListIntentsResponseBody struct {
	Code           *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Intents        *ListIntentsResponseBodyIntents `json:"Intents,omitempty" xml:"Intents,omitempty" type:"Struct"`
	Message        *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListIntentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIntentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListIntentsResponseBody) SetCode(v string) *ListIntentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListIntentsResponseBody) SetHttpStatusCode(v int32) *ListIntentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIntentsResponseBody) SetIntents(v *ListIntentsResponseBodyIntents) *ListIntentsResponseBody {
	s.Intents = v
	return s
}

func (s *ListIntentsResponseBody) SetMessage(v string) *ListIntentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListIntentsResponseBody) SetRequestId(v string) *ListIntentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListIntentsResponseBody) SetSuccess(v bool) *ListIntentsResponseBody {
	s.Success = &v
	return s
}

type ListIntentsResponseBodyIntents struct {
	List       []*ListIntentsResponseBodyIntentsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListIntentsResponseBodyIntents) String() string {
	return tea.Prettify(s)
}

func (s ListIntentsResponseBodyIntents) GoString() string {
	return s.String()
}

func (s *ListIntentsResponseBodyIntents) SetList(v []*ListIntentsResponseBodyIntentsList) *ListIntentsResponseBodyIntents {
	s.List = v
	return s
}

func (s *ListIntentsResponseBodyIntents) SetPageNumber(v int32) *ListIntentsResponseBodyIntents {
	s.PageNumber = &v
	return s
}

func (s *ListIntentsResponseBodyIntents) SetPageSize(v int32) *ListIntentsResponseBodyIntents {
	s.PageSize = &v
	return s
}

func (s *ListIntentsResponseBodyIntents) SetTotalCount(v int32) *ListIntentsResponseBodyIntents {
	s.TotalCount = &v
	return s
}

type ListIntentsResponseBodyIntentsList struct {
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IntentDescription *string `json:"IntentDescription,omitempty" xml:"IntentDescription,omitempty"`
	IntentId          *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	IntentName        *string `json:"IntentName,omitempty" xml:"IntentName,omitempty"`
	Keywords          *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	UpdateTime        *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Utterances        *string `json:"Utterances,omitempty" xml:"Utterances,omitempty"`
}

func (s ListIntentsResponseBodyIntentsList) String() string {
	return tea.Prettify(s)
}

func (s ListIntentsResponseBodyIntentsList) GoString() string {
	return s.String()
}

func (s *ListIntentsResponseBodyIntentsList) SetCreateTime(v int64) *ListIntentsResponseBodyIntentsList {
	s.CreateTime = &v
	return s
}

func (s *ListIntentsResponseBodyIntentsList) SetIntentDescription(v string) *ListIntentsResponseBodyIntentsList {
	s.IntentDescription = &v
	return s
}

func (s *ListIntentsResponseBodyIntentsList) SetIntentId(v string) *ListIntentsResponseBodyIntentsList {
	s.IntentId = &v
	return s
}

func (s *ListIntentsResponseBodyIntentsList) SetIntentName(v string) *ListIntentsResponseBodyIntentsList {
	s.IntentName = &v
	return s
}

func (s *ListIntentsResponseBodyIntentsList) SetKeywords(v string) *ListIntentsResponseBodyIntentsList {
	s.Keywords = &v
	return s
}

func (s *ListIntentsResponseBodyIntentsList) SetScriptId(v string) *ListIntentsResponseBodyIntentsList {
	s.ScriptId = &v
	return s
}

func (s *ListIntentsResponseBodyIntentsList) SetUpdateTime(v int64) *ListIntentsResponseBodyIntentsList {
	s.UpdateTime = &v
	return s
}

func (s *ListIntentsResponseBodyIntentsList) SetUtterances(v string) *ListIntentsResponseBodyIntentsList {
	s.Utterances = &v
	return s
}

type ListIntentsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListIntentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListIntentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIntentsResponse) GoString() string {
	return s.String()
}

func (s *ListIntentsResponse) SetHeaders(v map[string]*string) *ListIntentsResponse {
	s.Headers = v
	return s
}

func (s *ListIntentsResponse) SetStatusCode(v int32) *ListIntentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIntentsResponse) SetBody(v *ListIntentsResponseBody) *ListIntentsResponse {
	s.Body = v
	return s
}

type ListJobGroupsRequest struct {
	AsyncQuery           *bool   `json:"AsyncQuery,omitempty" xml:"AsyncQuery,omitempty"`
	EndTime              *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupStatusFilter *string `json:"JobGroupStatusFilter,omitempty" xml:"JobGroupStatusFilter,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchText           *string `json:"SearchText,omitempty" xml:"SearchText,omitempty"`
	StartTime            *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListJobGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListJobGroupsRequest) SetAsyncQuery(v bool) *ListJobGroupsRequest {
	s.AsyncQuery = &v
	return s
}

func (s *ListJobGroupsRequest) SetEndTime(v int64) *ListJobGroupsRequest {
	s.EndTime = &v
	return s
}

func (s *ListJobGroupsRequest) SetInstanceId(v string) *ListJobGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListJobGroupsRequest) SetJobGroupStatusFilter(v string) *ListJobGroupsRequest {
	s.JobGroupStatusFilter = &v
	return s
}

func (s *ListJobGroupsRequest) SetPageNumber(v int32) *ListJobGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListJobGroupsRequest) SetPageSize(v int32) *ListJobGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListJobGroupsRequest) SetSearchText(v string) *ListJobGroupsRequest {
	s.SearchText = &v
	return s
}

func (s *ListJobGroupsRequest) SetStartTime(v int64) *ListJobGroupsRequest {
	s.StartTime = &v
	return s
}

type ListJobGroupsResponseBody struct {
	AsyncTaskId    *string                             `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroups      *ListJobGroupsResponseBodyJobGroups `json:"JobGroups,omitempty" xml:"JobGroups,omitempty" type:"Struct"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListJobGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobGroupsResponseBody) SetAsyncTaskId(v string) *ListJobGroupsResponseBody {
	s.AsyncTaskId = &v
	return s
}

func (s *ListJobGroupsResponseBody) SetCode(v string) *ListJobGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListJobGroupsResponseBody) SetHttpStatusCode(v int32) *ListJobGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListJobGroupsResponseBody) SetJobGroups(v *ListJobGroupsResponseBodyJobGroups) *ListJobGroupsResponseBody {
	s.JobGroups = v
	return s
}

func (s *ListJobGroupsResponseBody) SetMessage(v string) *ListJobGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListJobGroupsResponseBody) SetRequestId(v string) *ListJobGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobGroupsResponseBody) SetSuccess(v bool) *ListJobGroupsResponseBody {
	s.Success = &v
	return s
}

type ListJobGroupsResponseBodyJobGroups struct {
	List       []*ListJobGroupsResponseBodyJobGroupsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListJobGroupsResponseBodyJobGroups) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsResponseBodyJobGroups) GoString() string {
	return s.String()
}

func (s *ListJobGroupsResponseBodyJobGroups) SetList(v []*ListJobGroupsResponseBodyJobGroupsList) *ListJobGroupsResponseBodyJobGroups {
	s.List = v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroups) SetPageNumber(v int32) *ListJobGroupsResponseBodyJobGroups {
	s.PageNumber = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroups) SetPageSize(v int32) *ListJobGroupsResponseBodyJobGroups {
	s.PageSize = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroups) SetTotalCount(v int32) *ListJobGroupsResponseBodyJobGroups {
	s.TotalCount = &v
	return s
}

type ListJobGroupsResponseBodyJobGroupsList struct {
	CreationTime         *int64                                                `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ExportProgress       *ListJobGroupsResponseBodyJobGroupsListExportProgress `json:"ExportProgress,omitempty" xml:"ExportProgress,omitempty" type:"Struct"`
	JobDataParsingTaskId *string                                               `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
	JobGroupDescription  *string                                               `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupId           *string                                               `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupName         *string                                               `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	ModifyTime           *string                                               `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Progress             *ListJobGroupsResponseBodyJobGroupsListProgress       `json:"Progress,omitempty" xml:"Progress,omitempty" type:"Struct"`
	ScriptId             *string                                               `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName           *string                                               `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptVersion        *string                                               `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
	Status               *string                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	Strategy             *ListJobGroupsResponseBodyJobGroupsListStrategy       `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
	TotalCallNum         *int32                                                `json:"TotalCallNum,omitempty" xml:"TotalCallNum,omitempty"`
}

func (s ListJobGroupsResponseBodyJobGroupsList) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsResponseBodyJobGroupsList) GoString() string {
	return s.String()
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetCreationTime(v int64) *ListJobGroupsResponseBodyJobGroupsList {
	s.CreationTime = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetExportProgress(v *ListJobGroupsResponseBodyJobGroupsListExportProgress) *ListJobGroupsResponseBodyJobGroupsList {
	s.ExportProgress = v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetJobDataParsingTaskId(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.JobDataParsingTaskId = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetJobGroupDescription(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.JobGroupDescription = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetJobGroupId(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.JobGroupId = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetJobGroupName(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.JobGroupName = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetModifyTime(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.ModifyTime = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetProgress(v *ListJobGroupsResponseBodyJobGroupsListProgress) *ListJobGroupsResponseBodyJobGroupsList {
	s.Progress = v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetScriptId(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.ScriptId = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetScriptName(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.ScriptName = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetScriptVersion(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.ScriptVersion = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetStatus(v string) *ListJobGroupsResponseBodyJobGroupsList {
	s.Status = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetStrategy(v *ListJobGroupsResponseBodyJobGroupsListStrategy) *ListJobGroupsResponseBodyJobGroupsList {
	s.Strategy = v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsList) SetTotalCallNum(v int32) *ListJobGroupsResponseBodyJobGroupsList {
	s.TotalCallNum = &v
	return s
}

type ListJobGroupsResponseBodyJobGroupsListExportProgress struct {
	FileHttpUrl *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	Progress    *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListJobGroupsResponseBodyJobGroupsListExportProgress) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsResponseBodyJobGroupsListExportProgress) GoString() string {
	return s.String()
}

func (s *ListJobGroupsResponseBodyJobGroupsListExportProgress) SetFileHttpUrl(v string) *ListJobGroupsResponseBodyJobGroupsListExportProgress {
	s.FileHttpUrl = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListExportProgress) SetProgress(v string) *ListJobGroupsResponseBodyJobGroupsListExportProgress {
	s.Progress = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListExportProgress) SetStatus(v string) *ListJobGroupsResponseBodyJobGroupsListExportProgress {
	s.Status = &v
	return s
}

type ListJobGroupsResponseBodyJobGroupsListProgress struct {
	CancelledNum     *int32  `json:"CancelledNum,omitempty" xml:"CancelledNum,omitempty"`
	Duration         *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ExecutingNum     *int32  `json:"ExecutingNum,omitempty" xml:"ExecutingNum,omitempty"`
	FailedNum        *int32  `json:"FailedNum,omitempty" xml:"FailedNum,omitempty"`
	PausedNum        *int32  `json:"PausedNum,omitempty" xml:"PausedNum,omitempty"`
	Scheduling       *int32  `json:"Scheduling,omitempty" xml:"Scheduling,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCompleted   *int32  `json:"TotalCompleted,omitempty" xml:"TotalCompleted,omitempty"`
	TotalJobs        *int32  `json:"TotalJobs,omitempty" xml:"TotalJobs,omitempty"`
	TotalNotAnswered *int32  `json:"TotalNotAnswered,omitempty" xml:"TotalNotAnswered,omitempty"`
}

func (s ListJobGroupsResponseBodyJobGroupsListProgress) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsResponseBodyJobGroupsListProgress) GoString() string {
	return s.String()
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetCancelledNum(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.CancelledNum = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetDuration(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.Duration = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetExecutingNum(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.ExecutingNum = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetFailedNum(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.FailedNum = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetPausedNum(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.PausedNum = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetScheduling(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.Scheduling = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetStartTime(v int64) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.StartTime = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetStatus(v string) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.Status = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetTotalCompleted(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.TotalCompleted = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetTotalJobs(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.TotalJobs = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListProgress) SetTotalNotAnswered(v int32) *ListJobGroupsResponseBodyJobGroupsListProgress {
	s.TotalNotAnswered = &v
	return s
}

type ListJobGroupsResponseBodyJobGroupsListStrategy struct {
	EndTime   *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListJobGroupsResponseBodyJobGroupsListStrategy) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsResponseBodyJobGroupsListStrategy) GoString() string {
	return s.String()
}

func (s *ListJobGroupsResponseBodyJobGroupsListStrategy) SetEndTime(v int64) *ListJobGroupsResponseBodyJobGroupsListStrategy {
	s.EndTime = &v
	return s
}

func (s *ListJobGroupsResponseBodyJobGroupsListStrategy) SetStartTime(v int64) *ListJobGroupsResponseBodyJobGroupsListStrategy {
	s.StartTime = &v
	return s
}

type ListJobGroupsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListJobGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListJobGroupsResponse) SetHeaders(v map[string]*string) *ListJobGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListJobGroupsResponse) SetStatusCode(v int32) *ListJobGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListJobGroupsResponse) SetBody(v *ListJobGroupsResponseBody) *ListJobGroupsResponse {
	s.Body = v
	return s
}

type ListJobGroupsAsyncRequest struct {
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
}

func (s ListJobGroupsAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsAsyncRequest) GoString() string {
	return s.String()
}

func (s *ListJobGroupsAsyncRequest) SetAsyncTaskId(v string) *ListJobGroupsAsyncRequest {
	s.AsyncTaskId = &v
	return s
}

type ListJobGroupsAsyncResponseBody struct {
	Code           *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroups      []*ListJobGroupsAsyncResponseBodyJobGroups `json:"JobGroups,omitempty" xml:"JobGroups,omitempty" type:"Repeated"`
	Message        *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber     *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Timeout        *bool                                      `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	TotalCount     *int32                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Vaild          *bool                                      `json:"Vaild,omitempty" xml:"Vaild,omitempty"`
}

func (s ListJobGroupsAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobGroupsAsyncResponseBody) SetCode(v string) *ListJobGroupsAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetHttpStatusCode(v int32) *ListJobGroupsAsyncResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetJobGroups(v []*ListJobGroupsAsyncResponseBodyJobGroups) *ListJobGroupsAsyncResponseBody {
	s.JobGroups = v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetMessage(v string) *ListJobGroupsAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetPageNumber(v int32) *ListJobGroupsAsyncResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetPageSize(v int32) *ListJobGroupsAsyncResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetRequestId(v string) *ListJobGroupsAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetSuccess(v bool) *ListJobGroupsAsyncResponseBody {
	s.Success = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetTimeout(v bool) *ListJobGroupsAsyncResponseBody {
	s.Timeout = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetTotalCount(v int32) *ListJobGroupsAsyncResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBody) SetVaild(v bool) *ListJobGroupsAsyncResponseBody {
	s.Vaild = &v
	return s
}

type ListJobGroupsAsyncResponseBodyJobGroups struct {
	CreationTime         *int64                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ExportProgress       *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress `json:"ExportProgress,omitempty" xml:"ExportProgress,omitempty" type:"Struct"`
	JobDataParsingTaskId *string                                                `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
	JobGroupDescription  *string                                                `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupId           *string                                                `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupName         *string                                                `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	ModifyTime           *string                                                `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Progress             *ListJobGroupsAsyncResponseBodyJobGroupsProgress       `json:"Progress,omitempty" xml:"Progress,omitempty" type:"Struct"`
	ScriptId             *string                                                `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName           *string                                                `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptVersion        *string                                                `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
	Status               *string                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	Strategy             *ListJobGroupsAsyncResponseBodyJobGroupsStrategy       `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
	TotalCallNum         *int32                                                 `json:"TotalCallNum,omitempty" xml:"TotalCallNum,omitempty"`
}

func (s ListJobGroupsAsyncResponseBodyJobGroups) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsAsyncResponseBodyJobGroups) GoString() string {
	return s.String()
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetCreationTime(v int64) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.CreationTime = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetExportProgress(v *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.ExportProgress = v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetJobDataParsingTaskId(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.JobDataParsingTaskId = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetJobGroupDescription(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.JobGroupDescription = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetJobGroupId(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.JobGroupId = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetJobGroupName(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.JobGroupName = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetModifyTime(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.ModifyTime = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetProgress(v *ListJobGroupsAsyncResponseBodyJobGroupsProgress) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.Progress = v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetScriptId(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.ScriptId = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetScriptName(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.ScriptName = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetScriptVersion(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.ScriptVersion = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetStatus(v string) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.Status = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetStrategy(v *ListJobGroupsAsyncResponseBodyJobGroupsStrategy) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.Strategy = v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroups) SetTotalCallNum(v int32) *ListJobGroupsAsyncResponseBodyJobGroups {
	s.TotalCallNum = &v
	return s
}

type ListJobGroupsAsyncResponseBodyJobGroupsExportProgress struct {
	FileHttpUrl *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	Progress    *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListJobGroupsAsyncResponseBodyJobGroupsExportProgress) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsAsyncResponseBodyJobGroupsExportProgress) GoString() string {
	return s.String()
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress) SetFileHttpUrl(v string) *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress {
	s.FileHttpUrl = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress) SetProgress(v string) *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress {
	s.Progress = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress) SetStatus(v string) *ListJobGroupsAsyncResponseBodyJobGroupsExportProgress {
	s.Status = &v
	return s
}

type ListJobGroupsAsyncResponseBodyJobGroupsProgress struct {
	CancelledNum     *int32  `json:"CancelledNum,omitempty" xml:"CancelledNum,omitempty"`
	Duration         *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ExecutingNum     *int32  `json:"ExecutingNum,omitempty" xml:"ExecutingNum,omitempty"`
	FailedNum        *int32  `json:"FailedNum,omitempty" xml:"FailedNum,omitempty"`
	PausedNum        *int32  `json:"PausedNum,omitempty" xml:"PausedNum,omitempty"`
	Scheduling       *int32  `json:"Scheduling,omitempty" xml:"Scheduling,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCompleted   *int32  `json:"TotalCompleted,omitempty" xml:"TotalCompleted,omitempty"`
	TotalJobs        *int32  `json:"TotalJobs,omitempty" xml:"TotalJobs,omitempty"`
	TotalNotAnswered *int32  `json:"TotalNotAnswered,omitempty" xml:"TotalNotAnswered,omitempty"`
}

func (s ListJobGroupsAsyncResponseBodyJobGroupsProgress) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsAsyncResponseBodyJobGroupsProgress) GoString() string {
	return s.String()
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetCancelledNum(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.CancelledNum = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetDuration(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.Duration = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetExecutingNum(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.ExecutingNum = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetFailedNum(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.FailedNum = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetPausedNum(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.PausedNum = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetScheduling(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.Scheduling = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetStartTime(v int64) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.StartTime = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetStatus(v string) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.Status = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetTotalCompleted(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.TotalCompleted = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetTotalJobs(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.TotalJobs = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsProgress) SetTotalNotAnswered(v int32) *ListJobGroupsAsyncResponseBodyJobGroupsProgress {
	s.TotalNotAnswered = &v
	return s
}

type ListJobGroupsAsyncResponseBodyJobGroupsStrategy struct {
	EndTime   *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListJobGroupsAsyncResponseBodyJobGroupsStrategy) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsAsyncResponseBodyJobGroupsStrategy) GoString() string {
	return s.String()
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsStrategy) SetEndTime(v int64) *ListJobGroupsAsyncResponseBodyJobGroupsStrategy {
	s.EndTime = &v
	return s
}

func (s *ListJobGroupsAsyncResponseBodyJobGroupsStrategy) SetStartTime(v int64) *ListJobGroupsAsyncResponseBodyJobGroupsStrategy {
	s.StartTime = &v
	return s
}

type ListJobGroupsAsyncResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListJobGroupsAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobGroupsAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobGroupsAsyncResponse) GoString() string {
	return s.String()
}

func (s *ListJobGroupsAsyncResponse) SetHeaders(v map[string]*string) *ListJobGroupsAsyncResponse {
	s.Headers = v
	return s
}

func (s *ListJobGroupsAsyncResponse) SetStatusCode(v int32) *ListJobGroupsAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *ListJobGroupsAsyncResponse) SetBody(v *ListJobGroupsAsyncResponseBody) *ListJobGroupsAsyncResponse {
	s.Body = v
	return s
}

type ListJobsRequest struct {
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId      []*string `json:"JobId,omitempty" xml:"JobId,omitempty" type:"Repeated"`
}

func (s ListJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobsRequest) GoString() string {
	return s.String()
}

func (s *ListJobsRequest) SetInstanceId(v string) *ListJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListJobsRequest) SetJobId(v []*string) *ListJobsRequest {
	s.JobId = v
	return s
}

type ListJobsResponseBody struct {
	Code           *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Jobs           []*ListJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	Message        *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBody) SetCode(v string) *ListJobsResponseBody {
	s.Code = &v
	return s
}

func (s *ListJobsResponseBody) SetHttpStatusCode(v int32) *ListJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListJobsResponseBody) SetJobs(v []*ListJobsResponseBodyJobs) *ListJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListJobsResponseBody) SetMessage(v string) *ListJobsResponseBody {
	s.Message = &v
	return s
}

func (s *ListJobsResponseBody) SetRequestId(v string) *ListJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobsResponseBody) SetSuccess(v bool) *ListJobsResponseBody {
	s.Success = &v
	return s
}

type ListJobsResponseBodyJobs struct {
	CallingNumbers []*string                           `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	Contacts       []*ListJobsResponseBodyJobsContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	Extras         []*ListJobsResponseBodyJobsExtras   `json:"Extras,omitempty" xml:"Extras,omitempty" type:"Repeated"`
	FailureReason  *string                             `json:"FailureReason,omitempty" xml:"FailureReason,omitempty"`
	JobGroupId     *string                             `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId          *string                             `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Priority       *int32                              `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ReferenceId    *string                             `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	ScenarioId     *string                             `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Status         *string                             `json:"Status,omitempty" xml:"Status,omitempty"`
	StrategyId     *string                             `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	Summary        []*ListJobsResponseBodyJobsSummary  `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
	SystemPriority *int32                              `json:"SystemPriority,omitempty" xml:"SystemPriority,omitempty"`
	Tasks          []*ListJobsResponseBodyJobsTasks    `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
}

func (s ListJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobs) SetCallingNumbers(v []*string) *ListJobsResponseBodyJobs {
	s.CallingNumbers = v
	return s
}

func (s *ListJobsResponseBodyJobs) SetContacts(v []*ListJobsResponseBodyJobsContacts) *ListJobsResponseBodyJobs {
	s.Contacts = v
	return s
}

func (s *ListJobsResponseBodyJobs) SetExtras(v []*ListJobsResponseBodyJobsExtras) *ListJobsResponseBodyJobs {
	s.Extras = v
	return s
}

func (s *ListJobsResponseBodyJobs) SetFailureReason(v string) *ListJobsResponseBodyJobs {
	s.FailureReason = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetJobGroupId(v string) *ListJobsResponseBodyJobs {
	s.JobGroupId = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetJobId(v string) *ListJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetPriority(v int32) *ListJobsResponseBodyJobs {
	s.Priority = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetReferenceId(v string) *ListJobsResponseBodyJobs {
	s.ReferenceId = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetScenarioId(v string) *ListJobsResponseBodyJobs {
	s.ScenarioId = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetStatus(v string) *ListJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetStrategyId(v string) *ListJobsResponseBodyJobs {
	s.StrategyId = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetSummary(v []*ListJobsResponseBodyJobsSummary) *ListJobsResponseBodyJobs {
	s.Summary = v
	return s
}

func (s *ListJobsResponseBodyJobs) SetSystemPriority(v int32) *ListJobsResponseBodyJobs {
	s.SystemPriority = &v
	return s
}

func (s *ListJobsResponseBodyJobs) SetTasks(v []*ListJobsResponseBodyJobsTasks) *ListJobsResponseBodyJobs {
	s.Tasks = v
	return s
}

type ListJobsResponseBodyJobsContacts struct {
	ContactId   *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Honorific   *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role        *string `json:"Role,omitempty" xml:"Role,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListJobsResponseBodyJobsContacts) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsContacts) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsContacts) SetContactId(v string) *ListJobsResponseBodyJobsContacts {
	s.ContactId = &v
	return s
}

func (s *ListJobsResponseBodyJobsContacts) SetContactName(v string) *ListJobsResponseBodyJobsContacts {
	s.ContactName = &v
	return s
}

func (s *ListJobsResponseBodyJobsContacts) SetHonorific(v string) *ListJobsResponseBodyJobsContacts {
	s.Honorific = &v
	return s
}

func (s *ListJobsResponseBodyJobsContacts) SetJobId(v string) *ListJobsResponseBodyJobsContacts {
	s.JobId = &v
	return s
}

func (s *ListJobsResponseBodyJobsContacts) SetPhoneNumber(v string) *ListJobsResponseBodyJobsContacts {
	s.PhoneNumber = &v
	return s
}

func (s *ListJobsResponseBodyJobsContacts) SetReferenceId(v string) *ListJobsResponseBodyJobsContacts {
	s.ReferenceId = &v
	return s
}

func (s *ListJobsResponseBodyJobsContacts) SetRole(v string) *ListJobsResponseBodyJobsContacts {
	s.Role = &v
	return s
}

func (s *ListJobsResponseBodyJobsContacts) SetState(v string) *ListJobsResponseBodyJobsContacts {
	s.State = &v
	return s
}

type ListJobsResponseBodyJobsExtras struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListJobsResponseBodyJobsExtras) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsExtras) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsExtras) SetKey(v string) *ListJobsResponseBodyJobsExtras {
	s.Key = &v
	return s
}

func (s *ListJobsResponseBodyJobsExtras) SetValue(v string) *ListJobsResponseBodyJobsExtras {
	s.Value = &v
	return s
}

type ListJobsResponseBodyJobsSummary struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	SummaryName *string `json:"SummaryName,omitempty" xml:"SummaryName,omitempty"`
}

func (s ListJobsResponseBodyJobsSummary) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsSummary) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsSummary) SetCategory(v string) *ListJobsResponseBodyJobsSummary {
	s.Category = &v
	return s
}

func (s *ListJobsResponseBodyJobsSummary) SetContent(v string) *ListJobsResponseBodyJobsSummary {
	s.Content = &v
	return s
}

func (s *ListJobsResponseBodyJobsSummary) SetSummaryName(v string) *ListJobsResponseBodyJobsSummary {
	s.SummaryName = &v
	return s
}

type ListJobsResponseBodyJobsTasks struct {
	ActualTime    *int64                                       `json:"ActualTime,omitempty" xml:"ActualTime,omitempty"`
	Brief         *string                                      `json:"Brief,omitempty" xml:"Brief,omitempty"`
	CallId        *string                                      `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CalledNumber  *string                                      `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber *string                                      `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ChatbotId     *string                                      `json:"ChatbotId,omitempty" xml:"ChatbotId,omitempty"`
	Contact       *ListJobsResponseBodyJobsTasksContact        `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Struct"`
	Conversation  []*ListJobsResponseBodyJobsTasksConversation `json:"Conversation,omitempty" xml:"Conversation,omitempty" type:"Repeated"`
	Duration      *int32                                       `json:"Duration,omitempty" xml:"Duration,omitempty"`
	JobId         *string                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PlanedTime    *int64                                       `json:"PlanedTime,omitempty" xml:"PlanedTime,omitempty"`
	ScenarioId    *string                                      `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Status        *string                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId        *string                                      `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListJobsResponseBodyJobsTasks) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsTasks) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsTasks) SetActualTime(v int64) *ListJobsResponseBodyJobsTasks {
	s.ActualTime = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetBrief(v string) *ListJobsResponseBodyJobsTasks {
	s.Brief = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetCallId(v string) *ListJobsResponseBodyJobsTasks {
	s.CallId = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetCalledNumber(v string) *ListJobsResponseBodyJobsTasks {
	s.CalledNumber = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetCallingNumber(v string) *ListJobsResponseBodyJobsTasks {
	s.CallingNumber = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetChatbotId(v string) *ListJobsResponseBodyJobsTasks {
	s.ChatbotId = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetContact(v *ListJobsResponseBodyJobsTasksContact) *ListJobsResponseBodyJobsTasks {
	s.Contact = v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetConversation(v []*ListJobsResponseBodyJobsTasksConversation) *ListJobsResponseBodyJobsTasks {
	s.Conversation = v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetDuration(v int32) *ListJobsResponseBodyJobsTasks {
	s.Duration = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetJobId(v string) *ListJobsResponseBodyJobsTasks {
	s.JobId = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetPlanedTime(v int64) *ListJobsResponseBodyJobsTasks {
	s.PlanedTime = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetScenarioId(v string) *ListJobsResponseBodyJobsTasks {
	s.ScenarioId = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetStatus(v string) *ListJobsResponseBodyJobsTasks {
	s.Status = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasks) SetTaskId(v string) *ListJobsResponseBodyJobsTasks {
	s.TaskId = &v
	return s
}

type ListJobsResponseBodyJobsTasksContact struct {
	ContactId   *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Honorific   *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role        *string `json:"Role,omitempty" xml:"Role,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListJobsResponseBodyJobsTasksContact) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsTasksContact) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsTasksContact) SetContactId(v string) *ListJobsResponseBodyJobsTasksContact {
	s.ContactId = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksContact) SetContactName(v string) *ListJobsResponseBodyJobsTasksContact {
	s.ContactName = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksContact) SetHonorific(v string) *ListJobsResponseBodyJobsTasksContact {
	s.Honorific = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksContact) SetJobId(v string) *ListJobsResponseBodyJobsTasksContact {
	s.JobId = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksContact) SetPhoneNumber(v string) *ListJobsResponseBodyJobsTasksContact {
	s.PhoneNumber = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksContact) SetReferenceId(v string) *ListJobsResponseBodyJobsTasksContact {
	s.ReferenceId = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksContact) SetRole(v string) *ListJobsResponseBodyJobsTasksContact {
	s.Role = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksContact) SetState(v string) *ListJobsResponseBodyJobsTasksContact {
	s.State = &v
	return s
}

type ListJobsResponseBodyJobsTasksConversation struct {
	Script    *string                                             `json:"Script,omitempty" xml:"Script,omitempty"`
	Speaker   *string                                             `json:"Speaker,omitempty" xml:"Speaker,omitempty"`
	Summary   []*ListJobsResponseBodyJobsTasksConversationSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
	Timestamp *int64                                              `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s ListJobsResponseBodyJobsTasksConversation) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsTasksConversation) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsTasksConversation) SetScript(v string) *ListJobsResponseBodyJobsTasksConversation {
	s.Script = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksConversation) SetSpeaker(v string) *ListJobsResponseBodyJobsTasksConversation {
	s.Speaker = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksConversation) SetSummary(v []*ListJobsResponseBodyJobsTasksConversationSummary) *ListJobsResponseBodyJobsTasksConversation {
	s.Summary = v
	return s
}

func (s *ListJobsResponseBodyJobsTasksConversation) SetTimestamp(v int64) *ListJobsResponseBodyJobsTasksConversation {
	s.Timestamp = &v
	return s
}

type ListJobsResponseBodyJobsTasksConversationSummary struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	SummaryName *string `json:"SummaryName,omitempty" xml:"SummaryName,omitempty"`
}

func (s ListJobsResponseBodyJobsTasksConversationSummary) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsTasksConversationSummary) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsTasksConversationSummary) SetCategory(v string) *ListJobsResponseBodyJobsTasksConversationSummary {
	s.Category = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksConversationSummary) SetContent(v string) *ListJobsResponseBodyJobsTasksConversationSummary {
	s.Content = &v
	return s
}

func (s *ListJobsResponseBodyJobsTasksConversationSummary) SetSummaryName(v string) *ListJobsResponseBodyJobsTasksConversationSummary {
	s.SummaryName = &v
	return s
}

type ListJobsResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponse) GoString() string {
	return s.String()
}

func (s *ListJobsResponse) SetHeaders(v map[string]*string) *ListJobsResponse {
	s.Headers = v
	return s
}

func (s *ListJobsResponse) SetStatusCode(v int32) *ListJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListJobsResponse) SetBody(v *ListJobsResponseBody) *ListJobsResponse {
	s.Body = v
	return s
}

type ListJobsByGroupRequest struct {
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobFailureReason *string `json:"JobFailureReason,omitempty" xml:"JobFailureReason,omitempty"`
	JobGroupId       *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobStatus        *string `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	PageNumber       *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListJobsByGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupRequest) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupRequest) SetInstanceId(v string) *ListJobsByGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListJobsByGroupRequest) SetJobFailureReason(v string) *ListJobsByGroupRequest {
	s.JobFailureReason = &v
	return s
}

func (s *ListJobsByGroupRequest) SetJobGroupId(v string) *ListJobsByGroupRequest {
	s.JobGroupId = &v
	return s
}

func (s *ListJobsByGroupRequest) SetJobStatus(v string) *ListJobsByGroupRequest {
	s.JobStatus = &v
	return s
}

func (s *ListJobsByGroupRequest) SetPageNumber(v int32) *ListJobsByGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListJobsByGroupRequest) SetPageSize(v int32) *ListJobsByGroupRequest {
	s.PageSize = &v
	return s
}

type ListJobsByGroupResponseBody struct {
	Code           *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Jobs           *ListJobsByGroupResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Struct"`
	Message        *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListJobsByGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupResponseBody) SetCode(v string) *ListJobsByGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListJobsByGroupResponseBody) SetHttpStatusCode(v int32) *ListJobsByGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListJobsByGroupResponseBody) SetJobs(v *ListJobsByGroupResponseBodyJobs) *ListJobsByGroupResponseBody {
	s.Jobs = v
	return s
}

func (s *ListJobsByGroupResponseBody) SetMessage(v string) *ListJobsByGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListJobsByGroupResponseBody) SetRequestId(v string) *ListJobsByGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobsByGroupResponseBody) SetSuccess(v bool) *ListJobsByGroupResponseBody {
	s.Success = &v
	return s
}

type ListJobsByGroupResponseBodyJobs struct {
	List       []*ListJobsByGroupResponseBodyJobsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListJobsByGroupResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupResponseBodyJobs) SetList(v []*ListJobsByGroupResponseBodyJobsList) *ListJobsByGroupResponseBodyJobs {
	s.List = v
	return s
}

func (s *ListJobsByGroupResponseBodyJobs) SetPageNumber(v int32) *ListJobsByGroupResponseBodyJobs {
	s.PageNumber = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobs) SetPageSize(v int32) *ListJobsByGroupResponseBodyJobs {
	s.PageSize = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobs) SetTotalCount(v int32) *ListJobsByGroupResponseBodyJobs {
	s.TotalCount = &v
	return s
}

type ListJobsByGroupResponseBodyJobsList struct {
	CallingNumbers []*string                                      `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	Contacts       []*ListJobsByGroupResponseBodyJobsListContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	Extras         []*ListJobsByGroupResponseBodyJobsListExtras   `json:"Extras,omitempty" xml:"Extras,omitempty" type:"Repeated"`
	FailureReason  *string                                        `json:"FailureReason,omitempty" xml:"FailureReason,omitempty"`
	JobGroupId     *string                                        `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId          *string                                        `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Priority       *int32                                         `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ReferenceId    *string                                        `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	ScenarioId     *string                                        `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Status         *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	StrategyId     *string                                        `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	Summary        []*ListJobsByGroupResponseBodyJobsListSummary  `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
	SystemPriority *int32                                         `json:"SystemPriority,omitempty" xml:"SystemPriority,omitempty"`
}

func (s ListJobsByGroupResponseBodyJobsList) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupResponseBodyJobsList) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupResponseBodyJobsList) SetCallingNumbers(v []*string) *ListJobsByGroupResponseBodyJobsList {
	s.CallingNumbers = v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetContacts(v []*ListJobsByGroupResponseBodyJobsListContacts) *ListJobsByGroupResponseBodyJobsList {
	s.Contacts = v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetExtras(v []*ListJobsByGroupResponseBodyJobsListExtras) *ListJobsByGroupResponseBodyJobsList {
	s.Extras = v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetFailureReason(v string) *ListJobsByGroupResponseBodyJobsList {
	s.FailureReason = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetJobGroupId(v string) *ListJobsByGroupResponseBodyJobsList {
	s.JobGroupId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetJobId(v string) *ListJobsByGroupResponseBodyJobsList {
	s.JobId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetPriority(v int32) *ListJobsByGroupResponseBodyJobsList {
	s.Priority = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetReferenceId(v string) *ListJobsByGroupResponseBodyJobsList {
	s.ReferenceId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetScenarioId(v string) *ListJobsByGroupResponseBodyJobsList {
	s.ScenarioId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetStatus(v string) *ListJobsByGroupResponseBodyJobsList {
	s.Status = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetStrategyId(v string) *ListJobsByGroupResponseBodyJobsList {
	s.StrategyId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetSummary(v []*ListJobsByGroupResponseBodyJobsListSummary) *ListJobsByGroupResponseBodyJobsList {
	s.Summary = v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsList) SetSystemPriority(v int32) *ListJobsByGroupResponseBodyJobsList {
	s.SystemPriority = &v
	return s
}

type ListJobsByGroupResponseBodyJobsListContacts struct {
	ContactId   *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Honorific   *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role        *string `json:"Role,omitempty" xml:"Role,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListJobsByGroupResponseBodyJobsListContacts) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupResponseBodyJobsListContacts) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetContactId(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.ContactId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetContactName(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.ContactName = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetHonorific(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.Honorific = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetJobId(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.JobId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetPhoneNumber(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.PhoneNumber = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetReferenceId(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.ReferenceId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetRole(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.Role = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListContacts) SetState(v string) *ListJobsByGroupResponseBodyJobsListContacts {
	s.State = &v
	return s
}

type ListJobsByGroupResponseBodyJobsListExtras struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListJobsByGroupResponseBodyJobsListExtras) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupResponseBodyJobsListExtras) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupResponseBodyJobsListExtras) SetKey(v string) *ListJobsByGroupResponseBodyJobsListExtras {
	s.Key = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListExtras) SetValue(v string) *ListJobsByGroupResponseBodyJobsListExtras {
	s.Value = &v
	return s
}

type ListJobsByGroupResponseBodyJobsListSummary struct {
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Content              *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ConversationDetailId *string `json:"ConversationDetailId,omitempty" xml:"ConversationDetailId,omitempty"`
	JobGroupId           *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	SummaryId            *string `json:"SummaryId,omitempty" xml:"SummaryId,omitempty"`
	SummaryName          *string `json:"SummaryName,omitempty" xml:"SummaryName,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListJobsByGroupResponseBodyJobsListSummary) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupResponseBodyJobsListSummary) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetCategory(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.Category = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetContent(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.Content = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetConversationDetailId(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.ConversationDetailId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetJobGroupId(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.JobGroupId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetJobId(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.JobId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetSummaryId(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.SummaryId = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetSummaryName(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.SummaryName = &v
	return s
}

func (s *ListJobsByGroupResponseBodyJobsListSummary) SetTaskId(v string) *ListJobsByGroupResponseBodyJobsListSummary {
	s.TaskId = &v
	return s
}

type ListJobsByGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListJobsByGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobsByGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobsByGroupResponse) GoString() string {
	return s.String()
}

func (s *ListJobsByGroupResponse) SetHeaders(v map[string]*string) *ListJobsByGroupResponse {
	s.Headers = v
	return s
}

func (s *ListJobsByGroupResponse) SetStatusCode(v int32) *ListJobsByGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListJobsByGroupResponse) SetBody(v *ListJobsByGroupResponseBody) *ListJobsByGroupResponse {
	s.Body = v
	return s
}

type ListOutboundCallNumbersRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListOutboundCallNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundCallNumbersRequest) GoString() string {
	return s.String()
}

func (s *ListOutboundCallNumbersRequest) SetInstanceId(v string) *ListOutboundCallNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOutboundCallNumbersRequest) SetPageNumber(v int32) *ListOutboundCallNumbersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOutboundCallNumbersRequest) SetPageSize(v int32) *ListOutboundCallNumbersRequest {
	s.PageSize = &v
	return s
}

type ListOutboundCallNumbersResponseBody struct {
	Code                *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode      *int32                                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message             *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	OutboundCallNumbers *ListOutboundCallNumbersResponseBodyOutboundCallNumbers `json:"OutboundCallNumbers,omitempty" xml:"OutboundCallNumbers,omitempty" type:"Struct"`
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success             *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListOutboundCallNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundCallNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ListOutboundCallNumbersResponseBody) SetCode(v string) *ListOutboundCallNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBody) SetHttpStatusCode(v int32) *ListOutboundCallNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBody) SetMessage(v string) *ListOutboundCallNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBody) SetOutboundCallNumbers(v *ListOutboundCallNumbersResponseBodyOutboundCallNumbers) *ListOutboundCallNumbersResponseBody {
	s.OutboundCallNumbers = v
	return s
}

func (s *ListOutboundCallNumbersResponseBody) SetRequestId(v string) *ListOutboundCallNumbersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBody) SetSuccess(v bool) *ListOutboundCallNumbersResponseBody {
	s.Success = &v
	return s
}

type ListOutboundCallNumbersResponseBodyOutboundCallNumbers struct {
	List       []*ListOutboundCallNumbersResponseBodyOutboundCallNumbersList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListOutboundCallNumbersResponseBodyOutboundCallNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundCallNumbersResponseBodyOutboundCallNumbers) GoString() string {
	return s.String()
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbers) SetList(v []*ListOutboundCallNumbersResponseBodyOutboundCallNumbersList) *ListOutboundCallNumbersResponseBodyOutboundCallNumbers {
	s.List = v
	return s
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbers) SetPageNumber(v int32) *ListOutboundCallNumbersResponseBodyOutboundCallNumbers {
	s.PageNumber = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbers) SetPageSize(v int32) *ListOutboundCallNumbersResponseBodyOutboundCallNumbers {
	s.PageSize = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbers) SetTotalCount(v int32) *ListOutboundCallNumbersResponseBodyOutboundCallNumbers {
	s.TotalCount = &v
	return s
}

type ListOutboundCallNumbersResponseBodyOutboundCallNumbersList struct {
	Number               *string `json:"Number,omitempty" xml:"Number,omitempty"`
	OutboundCallNumberId *string `json:"OutboundCallNumberId,omitempty" xml:"OutboundCallNumberId,omitempty"`
	RateLimitCount       *string `json:"RateLimitCount,omitempty" xml:"RateLimitCount,omitempty"`
	RateLimitPeriod      *string `json:"RateLimitPeriod,omitempty" xml:"RateLimitPeriod,omitempty"`
}

func (s ListOutboundCallNumbersResponseBodyOutboundCallNumbersList) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundCallNumbersResponseBodyOutboundCallNumbersList) GoString() string {
	return s.String()
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList) SetNumber(v string) *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList {
	s.Number = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList) SetOutboundCallNumberId(v string) *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList {
	s.OutboundCallNumberId = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList) SetRateLimitCount(v string) *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList {
	s.RateLimitCount = &v
	return s
}

func (s *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList) SetRateLimitPeriod(v string) *ListOutboundCallNumbersResponseBodyOutboundCallNumbersList {
	s.RateLimitPeriod = &v
	return s
}

type ListOutboundCallNumbersResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListOutboundCallNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOutboundCallNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundCallNumbersResponse) GoString() string {
	return s.String()
}

func (s *ListOutboundCallNumbersResponse) SetHeaders(v map[string]*string) *ListOutboundCallNumbersResponse {
	s.Headers = v
	return s
}

func (s *ListOutboundCallNumbersResponse) SetStatusCode(v int32) *ListOutboundCallNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOutboundCallNumbersResponse) SetBody(v *ListOutboundCallNumbersResponseBody) *ListOutboundCallNumbersResponse {
	s.Body = v
	return s
}

type ListResourceTagsRequest struct {
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ListResourceTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceTagsRequest) GoString() string {
	return s.String()
}

func (s *ListResourceTagsRequest) SetPageNumber(v int32) *ListResourceTagsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListResourceTagsRequest) SetPageSize(v int32) *ListResourceTagsRequest {
	s.PageSize = &v
	return s
}

func (s *ListResourceTagsRequest) SetResourceType(v string) *ListResourceTagsRequest {
	s.ResourceType = &v
	return s
}

type ListResourceTagsResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceTags   *ListResourceTagsResponseBodyResourceTags `json:"ResourceTags,omitempty" xml:"ResourceTags,omitempty" type:"Struct"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListResourceTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourceTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourceTagsResponseBody) SetCode(v string) *ListResourceTagsResponseBody {
	s.Code = &v
	return s
}

func (s *ListResourceTagsResponseBody) SetHttpStatusCode(v int32) *ListResourceTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListResourceTagsResponseBody) SetMessage(v string) *ListResourceTagsResponseBody {
	s.Message = &v
	return s
}

func (s *ListResourceTagsResponseBody) SetRequestId(v string) *ListResourceTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourceTagsResponseBody) SetResourceTags(v *ListResourceTagsResponseBodyResourceTags) *ListResourceTagsResponseBody {
	s.ResourceTags = v
	return s
}

func (s *ListResourceTagsResponseBody) SetSuccess(v bool) *ListResourceTagsResponseBody {
	s.Success = &v
	return s
}

type ListResourceTagsResponseBodyResourceTags struct {
	List       []*ListResourceTagsResponseBodyResourceTagsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListResourceTagsResponseBodyResourceTags) String() string {
	return tea.Prettify(s)
}

func (s ListResourceTagsResponseBodyResourceTags) GoString() string {
	return s.String()
}

func (s *ListResourceTagsResponseBodyResourceTags) SetList(v []*ListResourceTagsResponseBodyResourceTagsList) *ListResourceTagsResponseBodyResourceTags {
	s.List = v
	return s
}

func (s *ListResourceTagsResponseBodyResourceTags) SetPageNumber(v int32) *ListResourceTagsResponseBodyResourceTags {
	s.PageNumber = &v
	return s
}

func (s *ListResourceTagsResponseBodyResourceTags) SetPageSize(v int32) *ListResourceTagsResponseBodyResourceTags {
	s.PageSize = &v
	return s
}

func (s *ListResourceTagsResponseBodyResourceTags) SetTotalCount(v int32) *ListResourceTagsResponseBodyResourceTags {
	s.TotalCount = &v
	return s
}

type ListResourceTagsResponseBodyResourceTagsList struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListResourceTagsResponseBodyResourceTagsList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceTagsResponseBodyResourceTagsList) GoString() string {
	return s.String()
}

func (s *ListResourceTagsResponseBodyResourceTagsList) SetKey(v string) *ListResourceTagsResponseBodyResourceTagsList {
	s.Key = &v
	return s
}

func (s *ListResourceTagsResponseBodyResourceTagsList) SetValue(v string) *ListResourceTagsResponseBodyResourceTagsList {
	s.Value = &v
	return s
}

type ListResourceTagsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListResourceTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListResourceTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceTagsResponse) GoString() string {
	return s.String()
}

func (s *ListResourceTagsResponse) SetHeaders(v map[string]*string) *ListResourceTagsResponse {
	s.Headers = v
	return s
}

func (s *ListResourceTagsResponse) SetStatusCode(v int32) *ListResourceTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListResourceTagsResponse) SetBody(v *ListResourceTagsResponseBody) *ListResourceTagsResponse {
	s.Body = v
	return s
}

type ListSchedulerInstancesRequest struct {
	InstanceOwnerId *int64 `json:"InstanceOwnerId,omitempty" xml:"InstanceOwnerId,omitempty"`
}

func (s ListSchedulerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSchedulerInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListSchedulerInstancesRequest) SetInstanceOwnerId(v int64) *ListSchedulerInstancesRequest {
	s.InstanceOwnerId = &v
	return s
}

type ListSchedulerInstancesResponseBody struct {
	Code               *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode     *int32                                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message            *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SchedulerInstances []*ListSchedulerInstancesResponseBodySchedulerInstances `json:"SchedulerInstances,omitempty" xml:"SchedulerInstances,omitempty" type:"Repeated"`
	Success            *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSchedulerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSchedulerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSchedulerInstancesResponseBody) SetCode(v string) *ListSchedulerInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ListSchedulerInstancesResponseBody) SetHttpStatusCode(v int32) *ListSchedulerInstancesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSchedulerInstancesResponseBody) SetMessage(v string) *ListSchedulerInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ListSchedulerInstancesResponseBody) SetRequestId(v string) *ListSchedulerInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSchedulerInstancesResponseBody) SetSchedulerInstances(v []*ListSchedulerInstancesResponseBodySchedulerInstances) *ListSchedulerInstancesResponseBody {
	s.SchedulerInstances = v
	return s
}

func (s *ListSchedulerInstancesResponseBody) SetSuccess(v bool) *ListSchedulerInstancesResponseBody {
	s.Success = &v
	return s
}

type ListSchedulerInstancesResponseBodySchedulerInstances struct {
	BaseStrategy   *string `json:"BaseStrategy,omitempty" xml:"BaseStrategy,omitempty"`
	Business       *string `json:"Business,omitempty" xml:"Business,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MaxConcurrency *int32  `json:"MaxConcurrency,omitempty" xml:"MaxConcurrency,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ListSchedulerInstancesResponseBodySchedulerInstances) String() string {
	return tea.Prettify(s)
}

func (s ListSchedulerInstancesResponseBodySchedulerInstances) GoString() string {
	return s.String()
}

func (s *ListSchedulerInstancesResponseBodySchedulerInstances) SetBaseStrategy(v string) *ListSchedulerInstancesResponseBodySchedulerInstances {
	s.BaseStrategy = &v
	return s
}

func (s *ListSchedulerInstancesResponseBodySchedulerInstances) SetBusiness(v string) *ListSchedulerInstancesResponseBodySchedulerInstances {
	s.Business = &v
	return s
}

func (s *ListSchedulerInstancesResponseBodySchedulerInstances) SetInstanceId(v string) *ListSchedulerInstancesResponseBodySchedulerInstances {
	s.InstanceId = &v
	return s
}

func (s *ListSchedulerInstancesResponseBodySchedulerInstances) SetMaxConcurrency(v int32) *ListSchedulerInstancesResponseBodySchedulerInstances {
	s.MaxConcurrency = &v
	return s
}

func (s *ListSchedulerInstancesResponseBodySchedulerInstances) SetOwnerId(v string) *ListSchedulerInstancesResponseBodySchedulerInstances {
	s.OwnerId = &v
	return s
}

type ListSchedulerInstancesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSchedulerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSchedulerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSchedulerInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListSchedulerInstancesResponse) SetHeaders(v map[string]*string) *ListSchedulerInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListSchedulerInstancesResponse) SetStatusCode(v int32) *ListSchedulerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSchedulerInstancesResponse) SetBody(v *ListSchedulerInstancesResponseBody) *ListSchedulerInstancesResponse {
	s.Body = v
	return s
}

type ListScriptPublishHistoriesRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ListScriptPublishHistoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListScriptPublishHistoriesRequest) GoString() string {
	return s.String()
}

func (s *ListScriptPublishHistoriesRequest) SetInstanceId(v string) *ListScriptPublishHistoriesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListScriptPublishHistoriesRequest) SetPageNumber(v int32) *ListScriptPublishHistoriesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListScriptPublishHistoriesRequest) SetPageSize(v int32) *ListScriptPublishHistoriesRequest {
	s.PageSize = &v
	return s
}

func (s *ListScriptPublishHistoriesRequest) SetScriptId(v string) *ListScriptPublishHistoriesRequest {
	s.ScriptId = &v
	return s
}

type ListScriptPublishHistoriesResponseBody struct {
	Code                   *string                                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode         *int32                                                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                *string                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId              *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptPublishHistories *ListScriptPublishHistoriesResponseBodyScriptPublishHistories `json:"ScriptPublishHistories,omitempty" xml:"ScriptPublishHistories,omitempty" type:"Struct"`
	Success                *bool                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListScriptPublishHistoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScriptPublishHistoriesResponseBody) GoString() string {
	return s.String()
}

func (s *ListScriptPublishHistoriesResponseBody) SetCode(v string) *ListScriptPublishHistoriesResponseBody {
	s.Code = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBody) SetHttpStatusCode(v int32) *ListScriptPublishHistoriesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBody) SetMessage(v string) *ListScriptPublishHistoriesResponseBody {
	s.Message = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBody) SetRequestId(v string) *ListScriptPublishHistoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBody) SetScriptPublishHistories(v *ListScriptPublishHistoriesResponseBodyScriptPublishHistories) *ListScriptPublishHistoriesResponseBody {
	s.ScriptPublishHistories = v
	return s
}

func (s *ListScriptPublishHistoriesResponseBody) SetSuccess(v bool) *ListScriptPublishHistoriesResponseBody {
	s.Success = &v
	return s
}

type ListScriptPublishHistoriesResponseBodyScriptPublishHistories struct {
	List       []*ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListScriptPublishHistoriesResponseBodyScriptPublishHistories) String() string {
	return tea.Prettify(s)
}

func (s ListScriptPublishHistoriesResponseBodyScriptPublishHistories) GoString() string {
	return s.String()
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistories) SetList(v []*ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) *ListScriptPublishHistoriesResponseBodyScriptPublishHistories {
	s.List = v
	return s
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistories) SetPageNumber(v int32) *ListScriptPublishHistoriesResponseBodyScriptPublishHistories {
	s.PageNumber = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistories) SetPageSize(v int32) *ListScriptPublishHistoriesResponseBodyScriptPublishHistories {
	s.PageSize = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistories) SetTotalCount(v int32) *ListScriptPublishHistoriesResponseBodyScriptPublishHistories {
	s.TotalCount = &v
	return s
}

type ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList struct {
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PublishTime   *int64  `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
	ScriptId      *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptVersion *string `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
}

func (s ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) String() string {
	return tea.Prettify(s)
}

func (s ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) GoString() string {
	return s.String()
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) SetDescription(v string) *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList {
	s.Description = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) SetInstanceId(v string) *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList {
	s.InstanceId = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) SetPublishTime(v int64) *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList {
	s.PublishTime = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) SetScriptId(v string) *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList {
	s.ScriptId = &v
	return s
}

func (s *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList) SetScriptVersion(v string) *ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList {
	s.ScriptVersion = &v
	return s
}

type ListScriptPublishHistoriesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListScriptPublishHistoriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScriptPublishHistoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListScriptPublishHistoriesResponse) GoString() string {
	return s.String()
}

func (s *ListScriptPublishHistoriesResponse) SetHeaders(v map[string]*string) *ListScriptPublishHistoriesResponse {
	s.Headers = v
	return s
}

func (s *ListScriptPublishHistoriesResponse) SetStatusCode(v int32) *ListScriptPublishHistoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListScriptPublishHistoriesResponse) SetBody(v *ListScriptPublishHistoriesResponseBody) *ListScriptPublishHistoriesResponse {
	s.Body = v
	return s
}

type ListScriptRecordingRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	Search     *string `json:"Search,omitempty" xml:"Search,omitempty"`
	StatesJson *string `json:"StatesJson,omitempty" xml:"StatesJson,omitempty"`
	UuidsJson  *string `json:"UuidsJson,omitempty" xml:"UuidsJson,omitempty"`
}

func (s ListScriptRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s ListScriptRecordingRequest) GoString() string {
	return s.String()
}

func (s *ListScriptRecordingRequest) SetInstanceId(v string) *ListScriptRecordingRequest {
	s.InstanceId = &v
	return s
}

func (s *ListScriptRecordingRequest) SetPageNumber(v int32) *ListScriptRecordingRequest {
	s.PageNumber = &v
	return s
}

func (s *ListScriptRecordingRequest) SetPageSize(v int32) *ListScriptRecordingRequest {
	s.PageSize = &v
	return s
}

func (s *ListScriptRecordingRequest) SetScriptId(v string) *ListScriptRecordingRequest {
	s.ScriptId = &v
	return s
}

func (s *ListScriptRecordingRequest) SetSearch(v string) *ListScriptRecordingRequest {
	s.Search = &v
	return s
}

func (s *ListScriptRecordingRequest) SetStatesJson(v string) *ListScriptRecordingRequest {
	s.StatesJson = &v
	return s
}

func (s *ListScriptRecordingRequest) SetUuidsJson(v string) *ListScriptRecordingRequest {
	s.UuidsJson = &v
	return s
}

type ListScriptRecordingResponseBody struct {
	Code             *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode   *int32                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message          *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber       *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptRecordings []*ListScriptRecordingResponseBodyScriptRecordings `json:"ScriptRecordings,omitempty" xml:"ScriptRecordings,omitempty" type:"Repeated"`
	Success          *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount       *int64                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListScriptRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScriptRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *ListScriptRecordingResponseBody) SetCode(v string) *ListScriptRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *ListScriptRecordingResponseBody) SetHttpStatusCode(v int32) *ListScriptRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListScriptRecordingResponseBody) SetMessage(v string) *ListScriptRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *ListScriptRecordingResponseBody) SetPageNumber(v int32) *ListScriptRecordingResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListScriptRecordingResponseBody) SetPageSize(v int32) *ListScriptRecordingResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListScriptRecordingResponseBody) SetRequestId(v string) *ListScriptRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScriptRecordingResponseBody) SetScriptRecordings(v []*ListScriptRecordingResponseBodyScriptRecordings) *ListScriptRecordingResponseBody {
	s.ScriptRecordings = v
	return s
}

func (s *ListScriptRecordingResponseBody) SetSuccess(v bool) *ListScriptRecordingResponseBody {
	s.Success = &v
	return s
}

func (s *ListScriptRecordingResponseBody) SetTotalCount(v int64) *ListScriptRecordingResponseBody {
	s.TotalCount = &v
	return s
}

type ListScriptRecordingResponseBodyScriptRecordings struct {
	GmtCreate         *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified       *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtUpload         *int64  `json:"GmtUpload,omitempty" xml:"GmtUpload,omitempty"`
	InnerId           *string `json:"InnerId,omitempty" xml:"InnerId,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RecordingContent  *string `json:"RecordingContent,omitempty" xml:"RecordingContent,omitempty"`
	RecordingDuration *int32  `json:"RecordingDuration,omitempty" xml:"RecordingDuration,omitempty"`
	RecordingName     *string `json:"RecordingName,omitempty" xml:"RecordingName,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	State             *int32  `json:"State,omitempty" xml:"State,omitempty"`
	StateExtend       *string `json:"StateExtend,omitempty" xml:"StateExtend,omitempty"`
	StorageUuid       *string `json:"StorageUuid,omitempty" xml:"StorageUuid,omitempty"`
	Uuid              *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ListScriptRecordingResponseBodyScriptRecordings) String() string {
	return tea.Prettify(s)
}

func (s ListScriptRecordingResponseBodyScriptRecordings) GoString() string {
	return s.String()
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetGmtCreate(v int64) *ListScriptRecordingResponseBodyScriptRecordings {
	s.GmtCreate = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetGmtModified(v int64) *ListScriptRecordingResponseBodyScriptRecordings {
	s.GmtModified = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetGmtUpload(v int64) *ListScriptRecordingResponseBodyScriptRecordings {
	s.GmtUpload = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetInnerId(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.InnerId = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetInstanceId(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.InstanceId = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetRecordingContent(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.RecordingContent = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetRecordingDuration(v int32) *ListScriptRecordingResponseBodyScriptRecordings {
	s.RecordingDuration = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetRecordingName(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.RecordingName = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetScriptId(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.ScriptId = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetState(v int32) *ListScriptRecordingResponseBodyScriptRecordings {
	s.State = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetStateExtend(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.StateExtend = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetStorageUuid(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.StorageUuid = &v
	return s
}

func (s *ListScriptRecordingResponseBodyScriptRecordings) SetUuid(v string) *ListScriptRecordingResponseBodyScriptRecordings {
	s.Uuid = &v
	return s
}

type ListScriptRecordingResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListScriptRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScriptRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListScriptRecordingResponse) GoString() string {
	return s.String()
}

func (s *ListScriptRecordingResponse) SetHeaders(v map[string]*string) *ListScriptRecordingResponse {
	s.Headers = v
	return s
}

func (s *ListScriptRecordingResponse) SetStatusCode(v int32) *ListScriptRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *ListScriptRecordingResponse) SetBody(v *ListScriptRecordingResponseBody) *ListScriptRecordingResponse {
	s.Body = v
	return s
}

type ListScriptVoiceConfigsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ListScriptVoiceConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListScriptVoiceConfigsRequest) GoString() string {
	return s.String()
}

func (s *ListScriptVoiceConfigsRequest) SetInstanceId(v string) *ListScriptVoiceConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListScriptVoiceConfigsRequest) SetPageNumber(v int32) *ListScriptVoiceConfigsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListScriptVoiceConfigsRequest) SetPageSize(v int32) *ListScriptVoiceConfigsRequest {
	s.PageSize = &v
	return s
}

func (s *ListScriptVoiceConfigsRequest) SetScriptId(v string) *ListScriptVoiceConfigsRequest {
	s.ScriptId = &v
	return s
}

type ListScriptVoiceConfigsResponseBody struct {
	Code               *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode     *int32                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message            *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptVoiceConfigs *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs `json:"ScriptVoiceConfigs,omitempty" xml:"ScriptVoiceConfigs,omitempty" type:"Struct"`
	Success            *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListScriptVoiceConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScriptVoiceConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *ListScriptVoiceConfigsResponseBody) SetCode(v string) *ListScriptVoiceConfigsResponseBody {
	s.Code = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBody) SetHttpStatusCode(v int32) *ListScriptVoiceConfigsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBody) SetMessage(v string) *ListScriptVoiceConfigsResponseBody {
	s.Message = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBody) SetRequestId(v string) *ListScriptVoiceConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBody) SetScriptVoiceConfigs(v *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs) *ListScriptVoiceConfigsResponseBody {
	s.ScriptVoiceConfigs = v
	return s
}

func (s *ListScriptVoiceConfigsResponseBody) SetSuccess(v bool) *ListScriptVoiceConfigsResponseBody {
	s.Success = &v
	return s
}

type ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs struct {
	List       []*ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs) GoString() string {
	return s.String()
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs) SetList(v []*ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs {
	s.List = v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs) SetPageNumber(v int32) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs {
	s.PageNumber = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs) SetPageSize(v int32) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs {
	s.PageSize = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs) SetTotalCount(v int32) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs {
	s.TotalCount = &v
	return s
}

type ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptContent          *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	ScriptId               *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptVoiceConfigId    *string `json:"ScriptVoiceConfigId,omitempty" xml:"ScriptVoiceConfigId,omitempty"`
	ScriptWaveformRelation *string `json:"ScriptWaveformRelation,omitempty" xml:"ScriptWaveformRelation,omitempty"`
	Source                 *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) String() string {
	return tea.Prettify(s)
}

func (s ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) GoString() string {
	return s.String()
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) SetInstanceId(v string) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList {
	s.InstanceId = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) SetScriptContent(v string) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList {
	s.ScriptContent = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) SetScriptId(v string) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList {
	s.ScriptId = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) SetScriptVoiceConfigId(v string) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList {
	s.ScriptVoiceConfigId = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) SetScriptWaveformRelation(v string) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList {
	s.ScriptWaveformRelation = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) SetSource(v string) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList {
	s.Source = &v
	return s
}

func (s *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList) SetType(v string) *ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList {
	s.Type = &v
	return s
}

type ListScriptVoiceConfigsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListScriptVoiceConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScriptVoiceConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListScriptVoiceConfigsResponse) GoString() string {
	return s.String()
}

func (s *ListScriptVoiceConfigsResponse) SetHeaders(v map[string]*string) *ListScriptVoiceConfigsResponse {
	s.Headers = v
	return s
}

func (s *ListScriptVoiceConfigsResponse) SetStatusCode(v int32) *ListScriptVoiceConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListScriptVoiceConfigsResponse) SetBody(v *ListScriptVoiceConfigsResponseBody) *ListScriptVoiceConfigsResponse {
	s.Body = v
	return s
}

type ListScriptsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListScriptsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListScriptsRequest) GoString() string {
	return s.String()
}

func (s *ListScriptsRequest) SetInstanceId(v string) *ListScriptsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListScriptsRequest) SetPageNumber(v int32) *ListScriptsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListScriptsRequest) SetPageSize(v int32) *ListScriptsRequest {
	s.PageSize = &v
	return s
}

type ListScriptsResponseBody struct {
	Code           *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Scripts        *ListScriptsResponseBodyScripts `json:"Scripts,omitempty" xml:"Scripts,omitempty" type:"Struct"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListScriptsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScriptsResponseBody) GoString() string {
	return s.String()
}

func (s *ListScriptsResponseBody) SetCode(v string) *ListScriptsResponseBody {
	s.Code = &v
	return s
}

func (s *ListScriptsResponseBody) SetHttpStatusCode(v int32) *ListScriptsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListScriptsResponseBody) SetMessage(v string) *ListScriptsResponseBody {
	s.Message = &v
	return s
}

func (s *ListScriptsResponseBody) SetRequestId(v string) *ListScriptsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScriptsResponseBody) SetScripts(v *ListScriptsResponseBodyScripts) *ListScriptsResponseBody {
	s.Scripts = v
	return s
}

func (s *ListScriptsResponseBody) SetSuccess(v bool) *ListScriptsResponseBody {
	s.Success = &v
	return s
}

type ListScriptsResponseBodyScripts struct {
	List       []*ListScriptsResponseBodyScriptsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListScriptsResponseBodyScripts) String() string {
	return tea.Prettify(s)
}

func (s ListScriptsResponseBodyScripts) GoString() string {
	return s.String()
}

func (s *ListScriptsResponseBodyScripts) SetList(v []*ListScriptsResponseBodyScriptsList) *ListScriptsResponseBodyScripts {
	s.List = v
	return s
}

func (s *ListScriptsResponseBodyScripts) SetPageNumber(v int32) *ListScriptsResponseBodyScripts {
	s.PageNumber = &v
	return s
}

func (s *ListScriptsResponseBodyScripts) SetPageSize(v int32) *ListScriptsResponseBodyScripts {
	s.PageSize = &v
	return s
}

func (s *ListScriptsResponseBodyScripts) SetTotalCount(v int32) *ListScriptsResponseBodyScripts {
	s.TotalCount = &v
	return s
}

type ListScriptsResponseBodyScriptsList struct {
	DebugStatus        *string `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	EmotionEnable      *bool   `json:"EmotionEnable,omitempty" xml:"EmotionEnable,omitempty"`
	Industry           *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDebugDrafted     *bool   `json:"IsDebugDrafted,omitempty" xml:"IsDebugDrafted,omitempty"`
	IsDrafted          *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	IsPreset           *bool   `json:"IsPreset,omitempty" xml:"IsPreset,omitempty"`
	LongWaitEnable     *bool   `json:"LongWaitEnable,omitempty" xml:"LongWaitEnable,omitempty"`
	MiniPlaybackEnable *bool   `json:"MiniPlaybackEnable,omitempty" xml:"MiniPlaybackEnable,omitempty"`
	NewBargeInEnable   *bool   `json:"NewBargeInEnable,omitempty" xml:"NewBargeInEnable,omitempty"`
	RejectReason       *string `json:"RejectReason,omitempty" xml:"RejectReason,omitempty"`
	Scene              *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptDescription  *string `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId           *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName         *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdateTime         *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListScriptsResponseBodyScriptsList) String() string {
	return tea.Prettify(s)
}

func (s ListScriptsResponseBodyScriptsList) GoString() string {
	return s.String()
}

func (s *ListScriptsResponseBodyScriptsList) SetDebugStatus(v string) *ListScriptsResponseBodyScriptsList {
	s.DebugStatus = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetEmotionEnable(v bool) *ListScriptsResponseBodyScriptsList {
	s.EmotionEnable = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetIndustry(v string) *ListScriptsResponseBodyScriptsList {
	s.Industry = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetIsDebugDrafted(v bool) *ListScriptsResponseBodyScriptsList {
	s.IsDebugDrafted = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetIsDrafted(v bool) *ListScriptsResponseBodyScriptsList {
	s.IsDrafted = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetIsPreset(v bool) *ListScriptsResponseBodyScriptsList {
	s.IsPreset = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetLongWaitEnable(v bool) *ListScriptsResponseBodyScriptsList {
	s.LongWaitEnable = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetMiniPlaybackEnable(v bool) *ListScriptsResponseBodyScriptsList {
	s.MiniPlaybackEnable = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetNewBargeInEnable(v bool) *ListScriptsResponseBodyScriptsList {
	s.NewBargeInEnable = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetRejectReason(v string) *ListScriptsResponseBodyScriptsList {
	s.RejectReason = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetScene(v string) *ListScriptsResponseBodyScriptsList {
	s.Scene = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetScriptDescription(v string) *ListScriptsResponseBodyScriptsList {
	s.ScriptDescription = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetScriptId(v string) *ListScriptsResponseBodyScriptsList {
	s.ScriptId = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetScriptName(v string) *ListScriptsResponseBodyScriptsList {
	s.ScriptName = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetStatus(v string) *ListScriptsResponseBodyScriptsList {
	s.Status = &v
	return s
}

func (s *ListScriptsResponseBodyScriptsList) SetUpdateTime(v int64) *ListScriptsResponseBodyScriptsList {
	s.UpdateTime = &v
	return s
}

type ListScriptsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListScriptsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScriptsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListScriptsResponse) GoString() string {
	return s.String()
}

func (s *ListScriptsResponse) SetHeaders(v map[string]*string) *ListScriptsResponse {
	s.Headers = v
	return s
}

func (s *ListScriptsResponse) SetStatusCode(v int32) *ListScriptsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListScriptsResponse) SetBody(v *ListScriptsResponseBody) *ListScriptsResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	NextToken    *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId     *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId   []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	Code           *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	NextToken      *string                                     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	TagResources   []*ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetCode(v string) *ListTagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetHttpStatusCode(v int32) *ListTagResourcesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetMessage(v string) *ListTagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetSuccess(v bool) *ListTagResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v []*ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceId(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceType(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagKey(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagValue(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListTagsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ListTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagsRequest) GoString() string {
	return s.String()
}

func (s *ListTagsRequest) SetInstanceId(v string) *ListTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListTagsRequest) SetScriptId(v string) *ListTagsRequest {
	s.ScriptId = &v
	return s
}

type ListTagsResponseBody struct {
	Code           *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	TagGroups      []*ListTagsResponseBodyTagGroups `json:"TagGroups,omitempty" xml:"TagGroups,omitempty" type:"Repeated"`
	Tags           []*ListTagsResponseBodyTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagsResponseBody) SetCode(v string) *ListTagsResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagsResponseBody) SetHttpStatusCode(v int32) *ListTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTagsResponseBody) SetMessage(v string) *ListTagsResponseBody {
	s.Message = &v
	return s
}

func (s *ListTagsResponseBody) SetRequestId(v string) *ListTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagsResponseBody) SetSuccess(v bool) *ListTagsResponseBody {
	s.Success = &v
	return s
}

func (s *ListTagsResponseBody) SetTagGroups(v []*ListTagsResponseBodyTagGroups) *ListTagsResponseBody {
	s.TagGroups = v
	return s
}

func (s *ListTagsResponseBody) SetTags(v []*ListTagsResponseBodyTags) *ListTagsResponseBody {
	s.Tags = v
	return s
}

type ListTagsResponseBodyTagGroups struct {
	ScriptId      *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TagGroup      *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagGroupId    *string `json:"TagGroupId,omitempty" xml:"TagGroupId,omitempty"`
	TagGroupIndex *int32  `json:"TagGroupIndex,omitempty" xml:"TagGroupIndex,omitempty"`
}

func (s ListTagsResponseBodyTagGroups) String() string {
	return tea.Prettify(s)
}

func (s ListTagsResponseBodyTagGroups) GoString() string {
	return s.String()
}

func (s *ListTagsResponseBodyTagGroups) SetScriptId(v string) *ListTagsResponseBodyTagGroups {
	s.ScriptId = &v
	return s
}

func (s *ListTagsResponseBodyTagGroups) SetTagGroup(v string) *ListTagsResponseBodyTagGroups {
	s.TagGroup = &v
	return s
}

func (s *ListTagsResponseBodyTagGroups) SetTagGroupId(v string) *ListTagsResponseBodyTagGroups {
	s.TagGroupId = &v
	return s
}

func (s *ListTagsResponseBodyTagGroups) SetTagGroupIndex(v int32) *ListTagsResponseBodyTagGroups {
	s.TagGroupIndex = &v
	return s
}

type ListTagsResponseBodyTags struct {
	ScriptId *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TagGroup *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagId    *string `json:"TagId,omitempty" xml:"TagId,omitempty"`
	TagIndex *int32  `json:"TagIndex,omitempty" xml:"TagIndex,omitempty"`
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s ListTagsResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s ListTagsResponseBodyTags) GoString() string {
	return s.String()
}

func (s *ListTagsResponseBodyTags) SetScriptId(v string) *ListTagsResponseBodyTags {
	s.ScriptId = &v
	return s
}

func (s *ListTagsResponseBodyTags) SetTagGroup(v string) *ListTagsResponseBodyTags {
	s.TagGroup = &v
	return s
}

func (s *ListTagsResponseBodyTags) SetTagId(v string) *ListTagsResponseBodyTags {
	s.TagId = &v
	return s
}

func (s *ListTagsResponseBodyTags) SetTagIndex(v int32) *ListTagsResponseBodyTags {
	s.TagIndex = &v
	return s
}

func (s *ListTagsResponseBodyTags) SetTagName(v string) *ListTagsResponseBodyTags {
	s.TagName = &v
	return s
}

type ListTagsResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagsResponse) GoString() string {
	return s.String()
}

func (s *ListTagsResponse) SetHeaders(v map[string]*string) *ListTagsResponse {
	s.Headers = v
	return s
}

func (s *ListTagsResponse) SetStatusCode(v int32) *ListTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagsResponse) SetBody(v *ListTagsResponseBody) *ListTagsResponse {
	s.Body = v
	return s
}

type ModifyBatchJobsRequest struct {
	BatchJobName  *string   `json:"BatchJobName,omitempty" xml:"BatchJobName,omitempty"`
	CallingNumber []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	Description   *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobFilePath   *string   `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
	JobGroupId    *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	ScenarioId    *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptId      *string   `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	StrategyJson  *string   `json:"StrategyJson,omitempty" xml:"StrategyJson,omitempty"`
	Submitted     *bool     `json:"Submitted,omitempty" xml:"Submitted,omitempty"`
}

func (s ModifyBatchJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBatchJobsRequest) GoString() string {
	return s.String()
}

func (s *ModifyBatchJobsRequest) SetBatchJobName(v string) *ModifyBatchJobsRequest {
	s.BatchJobName = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetCallingNumber(v []*string) *ModifyBatchJobsRequest {
	s.CallingNumber = v
	return s
}

func (s *ModifyBatchJobsRequest) SetDescription(v string) *ModifyBatchJobsRequest {
	s.Description = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetInstanceId(v string) *ModifyBatchJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetJobFilePath(v string) *ModifyBatchJobsRequest {
	s.JobFilePath = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetJobGroupId(v string) *ModifyBatchJobsRequest {
	s.JobGroupId = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetScenarioId(v string) *ModifyBatchJobsRequest {
	s.ScenarioId = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetScriptId(v string) *ModifyBatchJobsRequest {
	s.ScriptId = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetStrategyJson(v string) *ModifyBatchJobsRequest {
	s.StrategyJson = &v
	return s
}

func (s *ModifyBatchJobsRequest) SetSubmitted(v bool) *ModifyBatchJobsRequest {
	s.Submitted = &v
	return s
}

type ModifyBatchJobsResponseBody struct {
	Code           *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroup       *ModifyBatchJobsResponseBodyJobGroup `json:"JobGroup,omitempty" xml:"JobGroup,omitempty" type:"Struct"`
	Message        *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyBatchJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBatchJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBatchJobsResponseBody) SetCode(v string) *ModifyBatchJobsResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyBatchJobsResponseBody) SetHttpStatusCode(v int32) *ModifyBatchJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyBatchJobsResponseBody) SetJobGroup(v *ModifyBatchJobsResponseBodyJobGroup) *ModifyBatchJobsResponseBody {
	s.JobGroup = v
	return s
}

func (s *ModifyBatchJobsResponseBody) SetMessage(v string) *ModifyBatchJobsResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyBatchJobsResponseBody) SetRequestId(v string) *ModifyBatchJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyBatchJobsResponseBody) SetSuccess(v bool) *ModifyBatchJobsResponseBody {
	s.Success = &v
	return s
}

type ModifyBatchJobsResponseBodyJobGroup struct {
	CallingNumbers      []*string                                    `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	CreationTime        *int64                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	JobFilePath         *string                                      `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
	JobGroupDescription *string                                      `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupId          *string                                      `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupName        *string                                      `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	ScenarioId          *string                                      `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Strategy            *ModifyBatchJobsResponseBodyJobGroupStrategy `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
}

func (s ModifyBatchJobsResponseBodyJobGroup) String() string {
	return tea.Prettify(s)
}

func (s ModifyBatchJobsResponseBodyJobGroup) GoString() string {
	return s.String()
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetCallingNumbers(v []*string) *ModifyBatchJobsResponseBodyJobGroup {
	s.CallingNumbers = v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetCreationTime(v int64) *ModifyBatchJobsResponseBodyJobGroup {
	s.CreationTime = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetJobFilePath(v string) *ModifyBatchJobsResponseBodyJobGroup {
	s.JobFilePath = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetJobGroupDescription(v string) *ModifyBatchJobsResponseBodyJobGroup {
	s.JobGroupDescription = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetJobGroupId(v string) *ModifyBatchJobsResponseBodyJobGroup {
	s.JobGroupId = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetJobGroupName(v string) *ModifyBatchJobsResponseBodyJobGroup {
	s.JobGroupName = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetScenarioId(v string) *ModifyBatchJobsResponseBodyJobGroup {
	s.ScenarioId = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroup) SetStrategy(v *ModifyBatchJobsResponseBodyJobGroupStrategy) *ModifyBatchJobsResponseBodyJobGroup {
	s.Strategy = v
	return s
}

type ModifyBatchJobsResponseBodyJobGroupStrategy struct {
	Customized          *string                                                   `json:"Customized,omitempty" xml:"Customized,omitempty"`
	EndTime             *int64                                                    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FollowUpStrategy    *string                                                   `json:"FollowUpStrategy,omitempty" xml:"FollowUpStrategy,omitempty"`
	IsTemplate          *bool                                                     `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	MaxAttemptsPerDay   *int32                                                    `json:"MaxAttemptsPerDay,omitempty" xml:"MaxAttemptsPerDay,omitempty"`
	MinAttemptInterval  *int32                                                    `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	RepeatBy            *string                                                   `json:"RepeatBy,omitempty" xml:"RepeatBy,omitempty"`
	RepeatDays          []*string                                                 `json:"RepeatDays,omitempty" xml:"RepeatDays,omitempty" type:"Repeated"`
	RoutingStrategy     *string                                                   `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	StartTime           *int64                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StrategyDescription *string                                                   `json:"StrategyDescription,omitempty" xml:"StrategyDescription,omitempty"`
	StrategyId          *string                                                   `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	StrategyName        *string                                                   `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	Type                *string                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkingTime         []*ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime `json:"WorkingTime,omitempty" xml:"WorkingTime,omitempty" type:"Repeated"`
}

func (s ModifyBatchJobsResponseBodyJobGroupStrategy) String() string {
	return tea.Prettify(s)
}

func (s ModifyBatchJobsResponseBodyJobGroupStrategy) GoString() string {
	return s.String()
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetCustomized(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.Customized = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetEndTime(v int64) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.EndTime = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetFollowUpStrategy(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.FollowUpStrategy = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetIsTemplate(v bool) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.IsTemplate = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetMaxAttemptsPerDay(v int32) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.MaxAttemptsPerDay = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetMinAttemptInterval(v int32) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.MinAttemptInterval = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetRepeatBy(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.RepeatBy = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetRepeatDays(v []*string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.RepeatDays = v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetRoutingStrategy(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.RoutingStrategy = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetStartTime(v int64) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.StartTime = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetStrategyDescription(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.StrategyDescription = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetStrategyId(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.StrategyId = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetStrategyName(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.StrategyName = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetType(v string) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.Type = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategy) SetWorkingTime(v []*ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime) *ModifyBatchJobsResponseBodyJobGroupStrategy {
	s.WorkingTime = v
	return s
}

type ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime struct {
	BeginTime *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime) String() string {
	return tea.Prettify(s)
}

func (s ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime) GoString() string {
	return s.String()
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime) SetBeginTime(v string) *ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime {
	s.BeginTime = &v
	return s
}

func (s *ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime) SetEndTime(v string) *ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime {
	s.EndTime = &v
	return s
}

type ModifyBatchJobsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyBatchJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyBatchJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBatchJobsResponse) GoString() string {
	return s.String()
}

func (s *ModifyBatchJobsResponse) SetHeaders(v map[string]*string) *ModifyBatchJobsResponse {
	s.Headers = v
	return s
}

func (s *ModifyBatchJobsResponse) SetStatusCode(v int32) *ModifyBatchJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBatchJobsResponse) SetBody(v *ModifyBatchJobsResponseBody) *ModifyBatchJobsResponse {
	s.Body = v
	return s
}

type ModifyDialogueFlowRequest struct {
	DialogueFlowDefinition *string `json:"DialogueFlowDefinition,omitempty" xml:"DialogueFlowDefinition,omitempty"`
	DialogueFlowId         *string `json:"DialogueFlowId,omitempty" xml:"DialogueFlowId,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IsDrafted              *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	ScriptId               *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ModifyDialogueFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDialogueFlowRequest) GoString() string {
	return s.String()
}

func (s *ModifyDialogueFlowRequest) SetDialogueFlowDefinition(v string) *ModifyDialogueFlowRequest {
	s.DialogueFlowDefinition = &v
	return s
}

func (s *ModifyDialogueFlowRequest) SetDialogueFlowId(v string) *ModifyDialogueFlowRequest {
	s.DialogueFlowId = &v
	return s
}

func (s *ModifyDialogueFlowRequest) SetInstanceId(v string) *ModifyDialogueFlowRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDialogueFlowRequest) SetIsDrafted(v bool) *ModifyDialogueFlowRequest {
	s.IsDrafted = &v
	return s
}

func (s *ModifyDialogueFlowRequest) SetScriptId(v string) *ModifyDialogueFlowRequest {
	s.ScriptId = &v
	return s
}

type ModifyDialogueFlowResponseBody struct {
	Code                   *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DialogueFlowDefinition *string `json:"DialogueFlowDefinition,omitempty" xml:"DialogueFlowDefinition,omitempty"`
	DialogueFlowId         *string `json:"DialogueFlowId,omitempty" xml:"DialogueFlowId,omitempty"`
	HttpStatusCode         *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDialogueFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDialogueFlowResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDialogueFlowResponseBody) SetCode(v string) *ModifyDialogueFlowResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyDialogueFlowResponseBody) SetDialogueFlowDefinition(v string) *ModifyDialogueFlowResponseBody {
	s.DialogueFlowDefinition = &v
	return s
}

func (s *ModifyDialogueFlowResponseBody) SetDialogueFlowId(v string) *ModifyDialogueFlowResponseBody {
	s.DialogueFlowId = &v
	return s
}

func (s *ModifyDialogueFlowResponseBody) SetHttpStatusCode(v int32) *ModifyDialogueFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyDialogueFlowResponseBody) SetMessage(v string) *ModifyDialogueFlowResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyDialogueFlowResponseBody) SetRequestId(v string) *ModifyDialogueFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDialogueFlowResponseBody) SetSuccess(v bool) *ModifyDialogueFlowResponseBody {
	s.Success = &v
	return s
}

type ModifyDialogueFlowResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDialogueFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDialogueFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDialogueFlowResponse) GoString() string {
	return s.String()
}

func (s *ModifyDialogueFlowResponse) SetHeaders(v map[string]*string) *ModifyDialogueFlowResponse {
	s.Headers = v
	return s
}

func (s *ModifyDialogueFlowResponse) SetStatusCode(v int32) *ModifyDialogueFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDialogueFlowResponse) SetBody(v *ModifyDialogueFlowResponseBody) *ModifyDialogueFlowResponse {
	s.Body = v
	return s
}

type ModifyEmptyNumberNoMoreCallsInfoRequest struct {
	EmptyNumberNoMoreCalls *bool   `json:"EmptyNumberNoMoreCalls,omitempty" xml:"EmptyNumberNoMoreCalls,omitempty"`
	EntryId                *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel          *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s ModifyEmptyNumberNoMoreCallsInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEmptyNumberNoMoreCallsInfoRequest) GoString() string {
	return s.String()
}

func (s *ModifyEmptyNumberNoMoreCallsInfoRequest) SetEmptyNumberNoMoreCalls(v bool) *ModifyEmptyNumberNoMoreCallsInfoRequest {
	s.EmptyNumberNoMoreCalls = &v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoRequest) SetEntryId(v string) *ModifyEmptyNumberNoMoreCallsInfoRequest {
	s.EntryId = &v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoRequest) SetStrategyLevel(v int32) *ModifyEmptyNumberNoMoreCallsInfoRequest {
	s.StrategyLevel = &v
	return s
}

type ModifyEmptyNumberNoMoreCallsInfoResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyEmptyNumberNoMoreCallsInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEmptyNumberNoMoreCallsInfoResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponseBody) SetCode(v string) *ModifyEmptyNumberNoMoreCallsInfoResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponseBody) SetHttpStatusCode(v int32) *ModifyEmptyNumberNoMoreCallsInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponseBody) SetMessage(v string) *ModifyEmptyNumberNoMoreCallsInfoResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponseBody) SetRequestId(v string) *ModifyEmptyNumberNoMoreCallsInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponseBody) SetSuccess(v bool) *ModifyEmptyNumberNoMoreCallsInfoResponseBody {
	s.Success = &v
	return s
}

type ModifyEmptyNumberNoMoreCallsInfoResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyEmptyNumberNoMoreCallsInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyEmptyNumberNoMoreCallsInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEmptyNumberNoMoreCallsInfoResponse) GoString() string {
	return s.String()
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponse) SetHeaders(v map[string]*string) *ModifyEmptyNumberNoMoreCallsInfoResponse {
	s.Headers = v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponse) SetStatusCode(v int32) *ModifyEmptyNumberNoMoreCallsInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEmptyNumberNoMoreCallsInfoResponse) SetBody(v *ModifyEmptyNumberNoMoreCallsInfoResponseBody) *ModifyEmptyNumberNoMoreCallsInfoResponse {
	s.Body = v
	return s
}

type ModifyGlobalQuestionRequest struct {
	Answers            *string `json:"Answers,omitempty" xml:"Answers,omitempty"`
	GlobalQuestionId   *string `json:"GlobalQuestionId,omitempty" xml:"GlobalQuestionId,omitempty"`
	GlobalQuestionName *string `json:"GlobalQuestionName,omitempty" xml:"GlobalQuestionName,omitempty"`
	GlobalQuestionType *string `json:"GlobalQuestionType,omitempty" xml:"GlobalQuestionType,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Questions          *string `json:"Questions,omitempty" xml:"Questions,omitempty"`
	ScriptId           *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s ModifyGlobalQuestionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyGlobalQuestionRequest) GoString() string {
	return s.String()
}

func (s *ModifyGlobalQuestionRequest) SetAnswers(v string) *ModifyGlobalQuestionRequest {
	s.Answers = &v
	return s
}

func (s *ModifyGlobalQuestionRequest) SetGlobalQuestionId(v string) *ModifyGlobalQuestionRequest {
	s.GlobalQuestionId = &v
	return s
}

func (s *ModifyGlobalQuestionRequest) SetGlobalQuestionName(v string) *ModifyGlobalQuestionRequest {
	s.GlobalQuestionName = &v
	return s
}

func (s *ModifyGlobalQuestionRequest) SetGlobalQuestionType(v string) *ModifyGlobalQuestionRequest {
	s.GlobalQuestionType = &v
	return s
}

func (s *ModifyGlobalQuestionRequest) SetInstanceId(v string) *ModifyGlobalQuestionRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyGlobalQuestionRequest) SetQuestions(v string) *ModifyGlobalQuestionRequest {
	s.Questions = &v
	return s
}

func (s *ModifyGlobalQuestionRequest) SetScriptId(v string) *ModifyGlobalQuestionRequest {
	s.ScriptId = &v
	return s
}

type ModifyGlobalQuestionResponseBody struct {
	Code               *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DialogueQuestionId *string `json:"DialogueQuestionId,omitempty" xml:"DialogueQuestionId,omitempty"`
	HttpStatusCode     *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message            *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyGlobalQuestionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyGlobalQuestionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyGlobalQuestionResponseBody) SetCode(v string) *ModifyGlobalQuestionResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyGlobalQuestionResponseBody) SetDialogueQuestionId(v string) *ModifyGlobalQuestionResponseBody {
	s.DialogueQuestionId = &v
	return s
}

func (s *ModifyGlobalQuestionResponseBody) SetHttpStatusCode(v int32) *ModifyGlobalQuestionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyGlobalQuestionResponseBody) SetMessage(v string) *ModifyGlobalQuestionResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyGlobalQuestionResponseBody) SetRequestId(v string) *ModifyGlobalQuestionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyGlobalQuestionResponseBody) SetSuccess(v bool) *ModifyGlobalQuestionResponseBody {
	s.Success = &v
	return s
}

type ModifyGlobalQuestionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyGlobalQuestionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyGlobalQuestionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyGlobalQuestionResponse) GoString() string {
	return s.String()
}

func (s *ModifyGlobalQuestionResponse) SetHeaders(v map[string]*string) *ModifyGlobalQuestionResponse {
	s.Headers = v
	return s
}

func (s *ModifyGlobalQuestionResponse) SetStatusCode(v int32) *ModifyGlobalQuestionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyGlobalQuestionResponse) SetBody(v *ModifyGlobalQuestionResponseBody) *ModifyGlobalQuestionResponse {
	s.Body = v
	return s
}

type ModifyInstanceRequest struct {
	CallingNumber             []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	InstanceDescription       *string   `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId                *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName              *string   `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxConcurrentConversation *int32    `json:"MaxConcurrentConversation,omitempty" xml:"MaxConcurrentConversation,omitempty"`
}

func (s ModifyInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceRequest) SetCallingNumber(v []*string) *ModifyInstanceRequest {
	s.CallingNumber = v
	return s
}

func (s *ModifyInstanceRequest) SetInstanceDescription(v string) *ModifyInstanceRequest {
	s.InstanceDescription = &v
	return s
}

func (s *ModifyInstanceRequest) SetInstanceId(v string) *ModifyInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceRequest) SetInstanceName(v string) *ModifyInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceRequest) SetMaxConcurrentConversation(v int32) *ModifyInstanceRequest {
	s.MaxConcurrentConversation = &v
	return s
}

type ModifyInstanceResponseBody struct {
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Instance       *ModifyInstanceResponseBodyInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponseBody) SetCode(v string) *ModifyInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetHttpStatusCode(v int32) *ModifyInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetInstance(v *ModifyInstanceResponseBodyInstance) *ModifyInstanceResponseBody {
	s.Instance = v
	return s
}

func (s *ModifyInstanceResponseBody) SetMessage(v string) *ModifyInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetRequestId(v string) *ModifyInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetSuccess(v bool) *ModifyInstanceResponseBody {
	s.Success = &v
	return s
}

type ModifyInstanceResponseBodyInstance struct {
	CreationTime              *int64  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CreatorId                 *int64  `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	CreatorName               *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	InstanceDescription       *string `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId                *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName              *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxConcurrentConversation *int32  `json:"MaxConcurrentConversation,omitempty" xml:"MaxConcurrentConversation,omitempty"`
	OwnerName                 *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
}

func (s ModifyInstanceResponseBodyInstance) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponseBodyInstance) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponseBodyInstance) SetCreationTime(v int64) *ModifyInstanceResponseBodyInstance {
	s.CreationTime = &v
	return s
}

func (s *ModifyInstanceResponseBodyInstance) SetCreatorId(v int64) *ModifyInstanceResponseBodyInstance {
	s.CreatorId = &v
	return s
}

func (s *ModifyInstanceResponseBodyInstance) SetCreatorName(v string) *ModifyInstanceResponseBodyInstance {
	s.CreatorName = &v
	return s
}

func (s *ModifyInstanceResponseBodyInstance) SetInstanceDescription(v string) *ModifyInstanceResponseBodyInstance {
	s.InstanceDescription = &v
	return s
}

func (s *ModifyInstanceResponseBodyInstance) SetInstanceId(v string) *ModifyInstanceResponseBodyInstance {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceResponseBodyInstance) SetInstanceName(v string) *ModifyInstanceResponseBodyInstance {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceResponseBodyInstance) SetMaxConcurrentConversation(v int32) *ModifyInstanceResponseBodyInstance {
	s.MaxConcurrentConversation = &v
	return s
}

func (s *ModifyInstanceResponseBodyInstance) SetOwnerName(v string) *ModifyInstanceResponseBodyInstance {
	s.OwnerName = &v
	return s
}

type ModifyInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponse) SetHeaders(v map[string]*string) *ModifyInstanceResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceResponse) SetStatusCode(v int32) *ModifyInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceResponse) SetBody(v *ModifyInstanceResponseBody) *ModifyInstanceResponse {
	s.Body = v
	return s
}

type ModifyIntentRequest struct {
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntentDescription *string `json:"IntentDescription,omitempty" xml:"IntentDescription,omitempty"`
	IntentId          *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	IntentName        *string `json:"IntentName,omitempty" xml:"IntentName,omitempty"`
	Keywords          *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	Utterances        *string `json:"Utterances,omitempty" xml:"Utterances,omitempty"`
}

func (s ModifyIntentRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIntentRequest) GoString() string {
	return s.String()
}

func (s *ModifyIntentRequest) SetInstanceId(v string) *ModifyIntentRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyIntentRequest) SetIntentDescription(v string) *ModifyIntentRequest {
	s.IntentDescription = &v
	return s
}

func (s *ModifyIntentRequest) SetIntentId(v string) *ModifyIntentRequest {
	s.IntentId = &v
	return s
}

func (s *ModifyIntentRequest) SetIntentName(v string) *ModifyIntentRequest {
	s.IntentName = &v
	return s
}

func (s *ModifyIntentRequest) SetKeywords(v string) *ModifyIntentRequest {
	s.Keywords = &v
	return s
}

func (s *ModifyIntentRequest) SetScriptId(v string) *ModifyIntentRequest {
	s.ScriptId = &v
	return s
}

func (s *ModifyIntentRequest) SetUtterances(v string) *ModifyIntentRequest {
	s.Utterances = &v
	return s
}

type ModifyIntentResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	IntentId       *string `json:"IntentId,omitempty" xml:"IntentId,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyIntentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyIntentResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyIntentResponseBody) SetCode(v string) *ModifyIntentResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyIntentResponseBody) SetHttpStatusCode(v int32) *ModifyIntentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyIntentResponseBody) SetIntentId(v string) *ModifyIntentResponseBody {
	s.IntentId = &v
	return s
}

func (s *ModifyIntentResponseBody) SetMessage(v string) *ModifyIntentResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyIntentResponseBody) SetRequestId(v string) *ModifyIntentResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyIntentResponseBody) SetSuccess(v bool) *ModifyIntentResponseBody {
	s.Success = &v
	return s
}

type ModifyIntentResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyIntentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyIntentResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIntentResponse) GoString() string {
	return s.String()
}

func (s *ModifyIntentResponse) SetHeaders(v map[string]*string) *ModifyIntentResponse {
	s.Headers = v
	return s
}

func (s *ModifyIntentResponse) SetStatusCode(v int32) *ModifyIntentResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyIntentResponse) SetBody(v *ModifyIntentResponseBody) *ModifyIntentResponse {
	s.Body = v
	return s
}

type ModifyJobGroupRequest struct {
	CallingNumber      []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	Description        *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId         *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId         *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupStatus     *string   `json:"JobGroupStatus,omitempty" xml:"JobGroupStatus,omitempty"`
	MinConcurrency     *int64    `json:"MinConcurrency,omitempty" xml:"MinConcurrency,omitempty"`
	Name               *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority           *string   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RecallStrategyJson *string   `json:"RecallStrategyJson,omitempty" xml:"RecallStrategyJson,omitempty"`
	RingingDuration    *int64    `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
	ScenarioId         *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptId           *string   `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	StrategyJson       *string   `json:"StrategyJson,omitempty" xml:"StrategyJson,omitempty"`
}

func (s ModifyJobGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupRequest) SetCallingNumber(v []*string) *ModifyJobGroupRequest {
	s.CallingNumber = v
	return s
}

func (s *ModifyJobGroupRequest) SetDescription(v string) *ModifyJobGroupRequest {
	s.Description = &v
	return s
}

func (s *ModifyJobGroupRequest) SetInstanceId(v string) *ModifyJobGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyJobGroupRequest) SetJobGroupId(v string) *ModifyJobGroupRequest {
	s.JobGroupId = &v
	return s
}

func (s *ModifyJobGroupRequest) SetJobGroupStatus(v string) *ModifyJobGroupRequest {
	s.JobGroupStatus = &v
	return s
}

func (s *ModifyJobGroupRequest) SetMinConcurrency(v int64) *ModifyJobGroupRequest {
	s.MinConcurrency = &v
	return s
}

func (s *ModifyJobGroupRequest) SetName(v string) *ModifyJobGroupRequest {
	s.Name = &v
	return s
}

func (s *ModifyJobGroupRequest) SetPriority(v string) *ModifyJobGroupRequest {
	s.Priority = &v
	return s
}

func (s *ModifyJobGroupRequest) SetRecallStrategyJson(v string) *ModifyJobGroupRequest {
	s.RecallStrategyJson = &v
	return s
}

func (s *ModifyJobGroupRequest) SetRingingDuration(v int64) *ModifyJobGroupRequest {
	s.RingingDuration = &v
	return s
}

func (s *ModifyJobGroupRequest) SetScenarioId(v string) *ModifyJobGroupRequest {
	s.ScenarioId = &v
	return s
}

func (s *ModifyJobGroupRequest) SetScriptId(v string) *ModifyJobGroupRequest {
	s.ScriptId = &v
	return s
}

func (s *ModifyJobGroupRequest) SetStrategyJson(v string) *ModifyJobGroupRequest {
	s.StrategyJson = &v
	return s
}

type ModifyJobGroupResponseBody struct {
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobGroup       *ModifyJobGroupResponseBodyJobGroup `json:"JobGroup,omitempty" xml:"JobGroup,omitempty" type:"Struct"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyJobGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupResponseBody) SetCode(v string) *ModifyJobGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyJobGroupResponseBody) SetHttpStatusCode(v int32) *ModifyJobGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyJobGroupResponseBody) SetJobGroup(v *ModifyJobGroupResponseBodyJobGroup) *ModifyJobGroupResponseBody {
	s.JobGroup = v
	return s
}

func (s *ModifyJobGroupResponseBody) SetMessage(v string) *ModifyJobGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyJobGroupResponseBody) SetRequestId(v string) *ModifyJobGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyJobGroupResponseBody) SetSuccess(v bool) *ModifyJobGroupResponseBody {
	s.Success = &v
	return s
}

type ModifyJobGroupResponseBodyJobGroup struct {
	CallingNumbers       []*string                                         `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	CreationTime         *int64                                            `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ExportProgress       *ModifyJobGroupResponseBodyJobGroupExportProgress `json:"ExportProgress,omitempty" xml:"ExportProgress,omitempty" type:"Struct"`
	JobDataParsingTaskId *string                                           `json:"JobDataParsingTaskId,omitempty" xml:"JobDataParsingTaskId,omitempty"`
	JobFilePath          *string                                           `json:"JobFilePath,omitempty" xml:"JobFilePath,omitempty"`
	JobGroupDescription  *string                                           `json:"JobGroupDescription,omitempty" xml:"JobGroupDescription,omitempty"`
	JobGroupId           *string                                           `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupName         *string                                           `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	MinConcurrency       *int64                                            `json:"MinConcurrency,omitempty" xml:"MinConcurrency,omitempty"`
	ModifyTime           *string                                           `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Priority             *string                                           `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RecallStrategy       *ModifyJobGroupResponseBodyJobGroupRecallStrategy `json:"RecallStrategy,omitempty" xml:"RecallStrategy,omitempty" type:"Struct"`
	RingingDuration      *int64                                            `json:"RingingDuration,omitempty" xml:"RingingDuration,omitempty"`
	ScenarioId           *string                                           `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptName           *string                                           `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptVersion        *string                                           `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
	Status               *string                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	Strategy             *ModifyJobGroupResponseBodyJobGroupStrategy       `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
}

func (s ModifyJobGroupResponseBodyJobGroup) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupResponseBodyJobGroup) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetCallingNumbers(v []*string) *ModifyJobGroupResponseBodyJobGroup {
	s.CallingNumbers = v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetCreationTime(v int64) *ModifyJobGroupResponseBodyJobGroup {
	s.CreationTime = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetExportProgress(v *ModifyJobGroupResponseBodyJobGroupExportProgress) *ModifyJobGroupResponseBodyJobGroup {
	s.ExportProgress = v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetJobDataParsingTaskId(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.JobDataParsingTaskId = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetJobFilePath(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.JobFilePath = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetJobGroupDescription(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.JobGroupDescription = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetJobGroupId(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.JobGroupId = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetJobGroupName(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.JobGroupName = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetMinConcurrency(v int64) *ModifyJobGroupResponseBodyJobGroup {
	s.MinConcurrency = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetModifyTime(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.ModifyTime = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetPriority(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.Priority = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetRecallStrategy(v *ModifyJobGroupResponseBodyJobGroupRecallStrategy) *ModifyJobGroupResponseBodyJobGroup {
	s.RecallStrategy = v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetRingingDuration(v int64) *ModifyJobGroupResponseBodyJobGroup {
	s.RingingDuration = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetScenarioId(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.ScenarioId = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetScriptName(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.ScriptName = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetScriptVersion(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.ScriptVersion = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetStatus(v string) *ModifyJobGroupResponseBodyJobGroup {
	s.Status = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroup) SetStrategy(v *ModifyJobGroupResponseBodyJobGroupStrategy) *ModifyJobGroupResponseBodyJobGroup {
	s.Strategy = v
	return s
}

type ModifyJobGroupResponseBodyJobGroupExportProgress struct {
	FileHttpUrl *string `json:"FileHttpUrl,omitempty" xml:"FileHttpUrl,omitempty"`
	Progress    *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyJobGroupResponseBodyJobGroupExportProgress) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupResponseBodyJobGroupExportProgress) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupResponseBodyJobGroupExportProgress) SetFileHttpUrl(v string) *ModifyJobGroupResponseBodyJobGroupExportProgress {
	s.FileHttpUrl = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupExportProgress) SetProgress(v string) *ModifyJobGroupResponseBodyJobGroupExportProgress {
	s.Progress = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupExportProgress) SetStatus(v string) *ModifyJobGroupResponseBodyJobGroupExportProgress {
	s.Status = &v
	return s
}

type ModifyJobGroupResponseBodyJobGroupRecallStrategy struct {
	EmptyNumberIgnore  *bool `json:"EmptyNumberIgnore,omitempty" xml:"EmptyNumberIgnore,omitempty"`
	InArrearsIgnore    *bool `json:"InArrearsIgnore,omitempty" xml:"InArrearsIgnore,omitempty"`
	OutOfServiceIgnore *bool `json:"OutOfServiceIgnore,omitempty" xml:"OutOfServiceIgnore,omitempty"`
}

func (s ModifyJobGroupResponseBodyJobGroupRecallStrategy) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupResponseBodyJobGroupRecallStrategy) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupResponseBodyJobGroupRecallStrategy) SetEmptyNumberIgnore(v bool) *ModifyJobGroupResponseBodyJobGroupRecallStrategy {
	s.EmptyNumberIgnore = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupRecallStrategy) SetInArrearsIgnore(v bool) *ModifyJobGroupResponseBodyJobGroupRecallStrategy {
	s.InArrearsIgnore = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupRecallStrategy) SetOutOfServiceIgnore(v bool) *ModifyJobGroupResponseBodyJobGroupRecallStrategy {
	s.OutOfServiceIgnore = &v
	return s
}

type ModifyJobGroupResponseBodyJobGroupStrategy struct {
	Customized          *string                                                  `json:"Customized,omitempty" xml:"Customized,omitempty"`
	EndTime             *int64                                                   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FollowUpStrategy    *string                                                  `json:"FollowUpStrategy,omitempty" xml:"FollowUpStrategy,omitempty"`
	IsTemplate          *bool                                                    `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	MaxAttemptsPerDay   *int32                                                   `json:"MaxAttemptsPerDay,omitempty" xml:"MaxAttemptsPerDay,omitempty"`
	MinAttemptInterval  *int32                                                   `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	RepeatBy            *string                                                  `json:"RepeatBy,omitempty" xml:"RepeatBy,omitempty"`
	RepeatDays          []*string                                                `json:"RepeatDays,omitempty" xml:"RepeatDays,omitempty" type:"Repeated"`
	RoutingStrategy     *string                                                  `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	StartTime           *int64                                                   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StrategyDescription *string                                                  `json:"StrategyDescription,omitempty" xml:"StrategyDescription,omitempty"`
	StrategyId          *string                                                  `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	StrategyName        *string                                                  `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	Type                *string                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkingTime         []*ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime `json:"WorkingTime,omitempty" xml:"WorkingTime,omitempty" type:"Repeated"`
}

func (s ModifyJobGroupResponseBodyJobGroupStrategy) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupResponseBodyJobGroupStrategy) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetCustomized(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.Customized = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetEndTime(v int64) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.EndTime = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetFollowUpStrategy(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.FollowUpStrategy = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetIsTemplate(v bool) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.IsTemplate = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetMaxAttemptsPerDay(v int32) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.MaxAttemptsPerDay = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetMinAttemptInterval(v int32) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.MinAttemptInterval = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetRepeatBy(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.RepeatBy = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetRepeatDays(v []*string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.RepeatDays = v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetRoutingStrategy(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.RoutingStrategy = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetStartTime(v int64) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.StartTime = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetStrategyDescription(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.StrategyDescription = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetStrategyId(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.StrategyId = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetStrategyName(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.StrategyName = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetType(v string) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.Type = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategy) SetWorkingTime(v []*ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime) *ModifyJobGroupResponseBodyJobGroupStrategy {
	s.WorkingTime = v
	return s
}

type ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime struct {
	BeginTime *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime) SetBeginTime(v string) *ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime {
	s.BeginTime = &v
	return s
}

func (s *ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime) SetEndTime(v string) *ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime {
	s.EndTime = &v
	return s
}

type ModifyJobGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyJobGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyJobGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyJobGroupResponse) SetHeaders(v map[string]*string) *ModifyJobGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyJobGroupResponse) SetStatusCode(v int32) *ModifyJobGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyJobGroupResponse) SetBody(v *ModifyJobGroupResponseBody) *ModifyJobGroupResponse {
	s.Body = v
	return s
}

type ModifyOutboundCallNumberRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number               *string `json:"Number,omitempty" xml:"Number,omitempty"`
	OutboundCallNumberId *string `json:"OutboundCallNumberId,omitempty" xml:"OutboundCallNumberId,omitempty"`
	RateLimitCount       *int32  `json:"RateLimitCount,omitempty" xml:"RateLimitCount,omitempty"`
	RateLimitPeriod      *int32  `json:"RateLimitPeriod,omitempty" xml:"RateLimitPeriod,omitempty"`
}

func (s ModifyOutboundCallNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyOutboundCallNumberRequest) GoString() string {
	return s.String()
}

func (s *ModifyOutboundCallNumberRequest) SetInstanceId(v string) *ModifyOutboundCallNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyOutboundCallNumberRequest) SetNumber(v string) *ModifyOutboundCallNumberRequest {
	s.Number = &v
	return s
}

func (s *ModifyOutboundCallNumberRequest) SetOutboundCallNumberId(v string) *ModifyOutboundCallNumberRequest {
	s.OutboundCallNumberId = &v
	return s
}

func (s *ModifyOutboundCallNumberRequest) SetRateLimitCount(v int32) *ModifyOutboundCallNumberRequest {
	s.RateLimitCount = &v
	return s
}

func (s *ModifyOutboundCallNumberRequest) SetRateLimitPeriod(v int32) *ModifyOutboundCallNumberRequest {
	s.RateLimitPeriod = &v
	return s
}

type ModifyOutboundCallNumberResponseBody struct {
	Code               *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode     *int32                                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message            *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	OutboundCallNumber *ModifyOutboundCallNumberResponseBodyOutboundCallNumber `json:"OutboundCallNumber,omitempty" xml:"OutboundCallNumber,omitempty" type:"Struct"`
	RequestId          *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyOutboundCallNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyOutboundCallNumberResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyOutboundCallNumberResponseBody) SetCode(v string) *ModifyOutboundCallNumberResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyOutboundCallNumberResponseBody) SetHttpStatusCode(v int32) *ModifyOutboundCallNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyOutboundCallNumberResponseBody) SetMessage(v string) *ModifyOutboundCallNumberResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyOutboundCallNumberResponseBody) SetOutboundCallNumber(v *ModifyOutboundCallNumberResponseBodyOutboundCallNumber) *ModifyOutboundCallNumberResponseBody {
	s.OutboundCallNumber = v
	return s
}

func (s *ModifyOutboundCallNumberResponseBody) SetRequestId(v string) *ModifyOutboundCallNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyOutboundCallNumberResponseBody) SetSuccess(v bool) *ModifyOutboundCallNumberResponseBody {
	s.Success = &v
	return s
}

type ModifyOutboundCallNumberResponseBodyOutboundCallNumber struct {
	Number               *string `json:"Number,omitempty" xml:"Number,omitempty"`
	OutboundCallNumberId *string `json:"OutboundCallNumberId,omitempty" xml:"OutboundCallNumberId,omitempty"`
	RateLimitCount       *string `json:"RateLimitCount,omitempty" xml:"RateLimitCount,omitempty"`
	RateLimitPeriod      *string `json:"RateLimitPeriod,omitempty" xml:"RateLimitPeriod,omitempty"`
}

func (s ModifyOutboundCallNumberResponseBodyOutboundCallNumber) String() string {
	return tea.Prettify(s)
}

func (s ModifyOutboundCallNumberResponseBodyOutboundCallNumber) GoString() string {
	return s.String()
}

func (s *ModifyOutboundCallNumberResponseBodyOutboundCallNumber) SetNumber(v string) *ModifyOutboundCallNumberResponseBodyOutboundCallNumber {
	s.Number = &v
	return s
}

func (s *ModifyOutboundCallNumberResponseBodyOutboundCallNumber) SetOutboundCallNumberId(v string) *ModifyOutboundCallNumberResponseBodyOutboundCallNumber {
	s.OutboundCallNumberId = &v
	return s
}

func (s *ModifyOutboundCallNumberResponseBodyOutboundCallNumber) SetRateLimitCount(v string) *ModifyOutboundCallNumberResponseBodyOutboundCallNumber {
	s.RateLimitCount = &v
	return s
}

func (s *ModifyOutboundCallNumberResponseBodyOutboundCallNumber) SetRateLimitPeriod(v string) *ModifyOutboundCallNumberResponseBodyOutboundCallNumber {
	s.RateLimitPeriod = &v
	return s
}

type ModifyOutboundCallNumberResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyOutboundCallNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyOutboundCallNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyOutboundCallNumberResponse) GoString() string {
	return s.String()
}

func (s *ModifyOutboundCallNumberResponse) SetHeaders(v map[string]*string) *ModifyOutboundCallNumberResponse {
	s.Headers = v
	return s
}

func (s *ModifyOutboundCallNumberResponse) SetStatusCode(v int32) *ModifyOutboundCallNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyOutboundCallNumberResponse) SetBody(v *ModifyOutboundCallNumberResponseBody) *ModifyOutboundCallNumberResponse {
	s.Body = v
	return s
}

type ModifyScriptRequest struct {
	AsrConfig                        *string   `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty"`
	ChatbotId                        *string   `json:"ChatbotId,omitempty" xml:"ChatbotId,omitempty"`
	EmotionEnable                    *bool     `json:"EmotionEnable,omitempty" xml:"EmotionEnable,omitempty"`
	Industry                         *string   `json:"Industry,omitempty" xml:"Industry,omitempty"`
	InstanceId                       *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LongWaitEnable                   *bool     `json:"LongWaitEnable,omitempty" xml:"LongWaitEnable,omitempty"`
	MiniPlaybackConfigListJsonString *string   `json:"MiniPlaybackConfigListJsonString,omitempty" xml:"MiniPlaybackConfigListJsonString,omitempty"`
	MiniPlaybackEnable               *bool     `json:"MiniPlaybackEnable,omitempty" xml:"MiniPlaybackEnable,omitempty"`
	NewBargeInEnable                 *bool     `json:"NewBargeInEnable,omitempty" xml:"NewBargeInEnable,omitempty"`
	NlsConfig                        *string   `json:"NlsConfig,omitempty" xml:"NlsConfig,omitempty"`
	Scene                            *string   `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptContent                    []*string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty" type:"Repeated"`
	ScriptDescription                *string   `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId                         *string   `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName                       *string   `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptWaveform                   []*string `json:"ScriptWaveform,omitempty" xml:"ScriptWaveform,omitempty" type:"Repeated"`
	TtsConfig                        *string   `json:"TtsConfig,omitempty" xml:"TtsConfig,omitempty"`
}

func (s ModifyScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptRequest) GoString() string {
	return s.String()
}

func (s *ModifyScriptRequest) SetAsrConfig(v string) *ModifyScriptRequest {
	s.AsrConfig = &v
	return s
}

func (s *ModifyScriptRequest) SetChatbotId(v string) *ModifyScriptRequest {
	s.ChatbotId = &v
	return s
}

func (s *ModifyScriptRequest) SetEmotionEnable(v bool) *ModifyScriptRequest {
	s.EmotionEnable = &v
	return s
}

func (s *ModifyScriptRequest) SetIndustry(v string) *ModifyScriptRequest {
	s.Industry = &v
	return s
}

func (s *ModifyScriptRequest) SetInstanceId(v string) *ModifyScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyScriptRequest) SetLongWaitEnable(v bool) *ModifyScriptRequest {
	s.LongWaitEnable = &v
	return s
}

func (s *ModifyScriptRequest) SetMiniPlaybackConfigListJsonString(v string) *ModifyScriptRequest {
	s.MiniPlaybackConfigListJsonString = &v
	return s
}

func (s *ModifyScriptRequest) SetMiniPlaybackEnable(v bool) *ModifyScriptRequest {
	s.MiniPlaybackEnable = &v
	return s
}

func (s *ModifyScriptRequest) SetNewBargeInEnable(v bool) *ModifyScriptRequest {
	s.NewBargeInEnable = &v
	return s
}

func (s *ModifyScriptRequest) SetNlsConfig(v string) *ModifyScriptRequest {
	s.NlsConfig = &v
	return s
}

func (s *ModifyScriptRequest) SetScene(v string) *ModifyScriptRequest {
	s.Scene = &v
	return s
}

func (s *ModifyScriptRequest) SetScriptContent(v []*string) *ModifyScriptRequest {
	s.ScriptContent = v
	return s
}

func (s *ModifyScriptRequest) SetScriptDescription(v string) *ModifyScriptRequest {
	s.ScriptDescription = &v
	return s
}

func (s *ModifyScriptRequest) SetScriptId(v string) *ModifyScriptRequest {
	s.ScriptId = &v
	return s
}

func (s *ModifyScriptRequest) SetScriptName(v string) *ModifyScriptRequest {
	s.ScriptName = &v
	return s
}

func (s *ModifyScriptRequest) SetScriptWaveform(v []*string) *ModifyScriptRequest {
	s.ScriptWaveform = v
	return s
}

func (s *ModifyScriptRequest) SetTtsConfig(v string) *ModifyScriptRequest {
	s.TtsConfig = &v
	return s
}

type ModifyScriptResponseBody struct {
	Code           *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Script         *ModifyScriptResponseBodyScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScriptResponseBody) SetCode(v string) *ModifyScriptResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyScriptResponseBody) SetHttpStatusCode(v int32) *ModifyScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyScriptResponseBody) SetMessage(v string) *ModifyScriptResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyScriptResponseBody) SetRequestId(v string) *ModifyScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyScriptResponseBody) SetScript(v *ModifyScriptResponseBodyScript) *ModifyScriptResponseBody {
	s.Script = v
	return s
}

func (s *ModifyScriptResponseBody) SetSuccess(v bool) *ModifyScriptResponseBody {
	s.Success = &v
	return s
}

type ModifyScriptResponseBodyScript struct {
	DebugStatus       *string `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	Industry          *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDebugDrafted    *bool   `json:"IsDebugDrafted,omitempty" xml:"IsDebugDrafted,omitempty"`
	IsDrafted         *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	Scene             *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptDescription *string `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName        *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdateTime        *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ModifyScriptResponseBodyScript) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptResponseBodyScript) GoString() string {
	return s.String()
}

func (s *ModifyScriptResponseBodyScript) SetDebugStatus(v string) *ModifyScriptResponseBodyScript {
	s.DebugStatus = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetIndustry(v string) *ModifyScriptResponseBodyScript {
	s.Industry = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetIsDebugDrafted(v bool) *ModifyScriptResponseBodyScript {
	s.IsDebugDrafted = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetIsDrafted(v bool) *ModifyScriptResponseBodyScript {
	s.IsDrafted = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetScene(v string) *ModifyScriptResponseBodyScript {
	s.Scene = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetScriptDescription(v string) *ModifyScriptResponseBodyScript {
	s.ScriptDescription = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetScriptId(v string) *ModifyScriptResponseBodyScript {
	s.ScriptId = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetScriptName(v string) *ModifyScriptResponseBodyScript {
	s.ScriptName = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetStatus(v string) *ModifyScriptResponseBodyScript {
	s.Status = &v
	return s
}

func (s *ModifyScriptResponseBodyScript) SetUpdateTime(v int64) *ModifyScriptResponseBodyScript {
	s.UpdateTime = &v
	return s
}

type ModifyScriptResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptResponse) GoString() string {
	return s.String()
}

func (s *ModifyScriptResponse) SetHeaders(v map[string]*string) *ModifyScriptResponse {
	s.Headers = v
	return s
}

func (s *ModifyScriptResponse) SetStatusCode(v int32) *ModifyScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyScriptResponse) SetBody(v *ModifyScriptResponseBody) *ModifyScriptResponse {
	s.Body = v
	return s
}

type ModifyScriptVoiceConfigRequest struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId               *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptVoiceConfigId    *string `json:"ScriptVoiceConfigId,omitempty" xml:"ScriptVoiceConfigId,omitempty"`
	ScriptWaveformRelation *string `json:"ScriptWaveformRelation,omitempty" xml:"ScriptWaveformRelation,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyScriptVoiceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptVoiceConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyScriptVoiceConfigRequest) SetInstanceId(v string) *ModifyScriptVoiceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyScriptVoiceConfigRequest) SetScriptId(v string) *ModifyScriptVoiceConfigRequest {
	s.ScriptId = &v
	return s
}

func (s *ModifyScriptVoiceConfigRequest) SetScriptVoiceConfigId(v string) *ModifyScriptVoiceConfigRequest {
	s.ScriptVoiceConfigId = &v
	return s
}

func (s *ModifyScriptVoiceConfigRequest) SetScriptWaveformRelation(v string) *ModifyScriptVoiceConfigRequest {
	s.ScriptWaveformRelation = &v
	return s
}

func (s *ModifyScriptVoiceConfigRequest) SetType(v string) *ModifyScriptVoiceConfigRequest {
	s.Type = &v
	return s
}

type ModifyScriptVoiceConfigResponseBody struct {
	Code              *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode    *int32                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message           *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptVoiceConfig *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig `json:"ScriptVoiceConfig,omitempty" xml:"ScriptVoiceConfig,omitempty" type:"Struct"`
	Success           *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyScriptVoiceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptVoiceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScriptVoiceConfigResponseBody) SetCode(v string) *ModifyScriptVoiceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBody) SetHttpStatusCode(v int32) *ModifyScriptVoiceConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBody) SetMessage(v string) *ModifyScriptVoiceConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBody) SetRequestId(v string) *ModifyScriptVoiceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBody) SetScriptVoiceConfig(v *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) *ModifyScriptVoiceConfigResponseBody {
	s.ScriptVoiceConfig = v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBody) SetSuccess(v bool) *ModifyScriptVoiceConfigResponseBody {
	s.Success = &v
	return s
}

type ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptContent          *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	ScriptId               *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptVoiceConfigId    *string `json:"ScriptVoiceConfigId,omitempty" xml:"ScriptVoiceConfigId,omitempty"`
	ScriptWaveformRelation *string `json:"ScriptWaveformRelation,omitempty" xml:"ScriptWaveformRelation,omitempty"`
	Source                 *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) GoString() string {
	return s.String()
}

func (s *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) SetInstanceId(v string) *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.InstanceId = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptContent(v string) *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptContent = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptId(v string) *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptId = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptVoiceConfigId(v string) *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptVoiceConfigId = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) SetScriptWaveformRelation(v string) *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.ScriptWaveformRelation = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) SetSource(v string) *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.Source = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig) SetType(v string) *ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig {
	s.Type = &v
	return s
}

type ModifyScriptVoiceConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyScriptVoiceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScriptVoiceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyScriptVoiceConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyScriptVoiceConfigResponse) SetHeaders(v map[string]*string) *ModifyScriptVoiceConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyScriptVoiceConfigResponse) SetStatusCode(v int32) *ModifyScriptVoiceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyScriptVoiceConfigResponse) SetBody(v *ModifyScriptVoiceConfigResponseBody) *ModifyScriptVoiceConfigResponse {
	s.Body = v
	return s
}

type ModifyTTSConfigRequest struct {
	AppKey         *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NlsServiceType *string `json:"NlsServiceType,omitempty" xml:"NlsServiceType,omitempty"`
	ScriptId       *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	SpeechRate     *string `json:"SpeechRate,omitempty" xml:"SpeechRate,omitempty"`
	Voice          *string `json:"Voice,omitempty" xml:"Voice,omitempty"`
	Volume         *string `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s ModifyTTSConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTTSConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyTTSConfigRequest) SetAppKey(v string) *ModifyTTSConfigRequest {
	s.AppKey = &v
	return s
}

func (s *ModifyTTSConfigRequest) SetInstanceId(v string) *ModifyTTSConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTTSConfigRequest) SetNlsServiceType(v string) *ModifyTTSConfigRequest {
	s.NlsServiceType = &v
	return s
}

func (s *ModifyTTSConfigRequest) SetScriptId(v string) *ModifyTTSConfigRequest {
	s.ScriptId = &v
	return s
}

func (s *ModifyTTSConfigRequest) SetSpeechRate(v string) *ModifyTTSConfigRequest {
	s.SpeechRate = &v
	return s
}

func (s *ModifyTTSConfigRequest) SetVoice(v string) *ModifyTTSConfigRequest {
	s.Voice = &v
	return s
}

func (s *ModifyTTSConfigRequest) SetVolume(v string) *ModifyTTSConfigRequest {
	s.Volume = &v
	return s
}

type ModifyTTSConfigResponseBody struct {
	Code           *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TTSConfig      *ModifyTTSConfigResponseBodyTTSConfig `json:"TTSConfig,omitempty" xml:"TTSConfig,omitempty" type:"Struct"`
}

func (s ModifyTTSConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTTSConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTTSConfigResponseBody) SetCode(v string) *ModifyTTSConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyTTSConfigResponseBody) SetHttpStatusCode(v int32) *ModifyTTSConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyTTSConfigResponseBody) SetMessage(v string) *ModifyTTSConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyTTSConfigResponseBody) SetRequestId(v string) *ModifyTTSConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTTSConfigResponseBody) SetSuccess(v bool) *ModifyTTSConfigResponseBody {
	s.Success = &v
	return s
}

func (s *ModifyTTSConfigResponseBody) SetTTSConfig(v *ModifyTTSConfigResponseBodyTTSConfig) *ModifyTTSConfigResponseBody {
	s.TTSConfig = v
	return s
}

type ModifyTTSConfigResponseBodyTTSConfig struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId    *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	SpeechRate  *string `json:"SpeechRate,omitempty" xml:"SpeechRate,omitempty"`
	TTSConfigId *string `json:"TTSConfigId,omitempty" xml:"TTSConfigId,omitempty"`
	Voice       *string `json:"Voice,omitempty" xml:"Voice,omitempty"`
	Volume      *string `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s ModifyTTSConfigResponseBodyTTSConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyTTSConfigResponseBodyTTSConfig) GoString() string {
	return s.String()
}

func (s *ModifyTTSConfigResponseBodyTTSConfig) SetInstanceId(v string) *ModifyTTSConfigResponseBodyTTSConfig {
	s.InstanceId = &v
	return s
}

func (s *ModifyTTSConfigResponseBodyTTSConfig) SetScriptId(v string) *ModifyTTSConfigResponseBodyTTSConfig {
	s.ScriptId = &v
	return s
}

func (s *ModifyTTSConfigResponseBodyTTSConfig) SetSpeechRate(v string) *ModifyTTSConfigResponseBodyTTSConfig {
	s.SpeechRate = &v
	return s
}

func (s *ModifyTTSConfigResponseBodyTTSConfig) SetTTSConfigId(v string) *ModifyTTSConfigResponseBodyTTSConfig {
	s.TTSConfigId = &v
	return s
}

func (s *ModifyTTSConfigResponseBodyTTSConfig) SetVoice(v string) *ModifyTTSConfigResponseBodyTTSConfig {
	s.Voice = &v
	return s
}

func (s *ModifyTTSConfigResponseBodyTTSConfig) SetVolume(v string) *ModifyTTSConfigResponseBodyTTSConfig {
	s.Volume = &v
	return s
}

type ModifyTTSConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyTTSConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyTTSConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTTSConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyTTSConfigResponse) SetHeaders(v map[string]*string) *ModifyTTSConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyTTSConfigResponse) SetStatusCode(v int32) *ModifyTTSConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTTSConfigResponse) SetBody(v *ModifyTTSConfigResponseBody) *ModifyTTSConfigResponse {
	s.Body = v
	return s
}

type ModifyTagGroupsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TagGroups  *string `json:"TagGroups,omitempty" xml:"TagGroups,omitempty"`
	Tags       *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ModifyTagGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagGroupsRequest) GoString() string {
	return s.String()
}

func (s *ModifyTagGroupsRequest) SetInstanceId(v string) *ModifyTagGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTagGroupsRequest) SetScriptId(v string) *ModifyTagGroupsRequest {
	s.ScriptId = &v
	return s
}

func (s *ModifyTagGroupsRequest) SetTagGroups(v string) *ModifyTagGroupsRequest {
	s.TagGroups = &v
	return s
}

func (s *ModifyTagGroupsRequest) SetTags(v string) *ModifyTagGroupsRequest {
	s.Tags = &v
	return s
}

type ModifyTagGroupsResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	TagGroups      []*ModifyTagGroupsResponseBodyTagGroups `json:"TagGroups,omitempty" xml:"TagGroups,omitempty" type:"Repeated"`
	Tags           []*ModifyTagGroupsResponseBodyTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ModifyTagGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTagGroupsResponseBody) SetCode(v string) *ModifyTagGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyTagGroupsResponseBody) SetHttpStatusCode(v int32) *ModifyTagGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyTagGroupsResponseBody) SetMessage(v string) *ModifyTagGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyTagGroupsResponseBody) SetRequestId(v string) *ModifyTagGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTagGroupsResponseBody) SetSuccess(v bool) *ModifyTagGroupsResponseBody {
	s.Success = &v
	return s
}

func (s *ModifyTagGroupsResponseBody) SetTagGroups(v []*ModifyTagGroupsResponseBodyTagGroups) *ModifyTagGroupsResponseBody {
	s.TagGroups = v
	return s
}

func (s *ModifyTagGroupsResponseBody) SetTags(v []*ModifyTagGroupsResponseBodyTags) *ModifyTagGroupsResponseBody {
	s.Tags = v
	return s
}

type ModifyTagGroupsResponseBodyTagGroups struct {
	ScriptId      *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TagGroup      *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagGroupId    *string `json:"TagGroupId,omitempty" xml:"TagGroupId,omitempty"`
	TagGroupIndex *int32  `json:"TagGroupIndex,omitempty" xml:"TagGroupIndex,omitempty"`
}

func (s ModifyTagGroupsResponseBodyTagGroups) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagGroupsResponseBodyTagGroups) GoString() string {
	return s.String()
}

func (s *ModifyTagGroupsResponseBodyTagGroups) SetScriptId(v string) *ModifyTagGroupsResponseBodyTagGroups {
	s.ScriptId = &v
	return s
}

func (s *ModifyTagGroupsResponseBodyTagGroups) SetTagGroup(v string) *ModifyTagGroupsResponseBodyTagGroups {
	s.TagGroup = &v
	return s
}

func (s *ModifyTagGroupsResponseBodyTagGroups) SetTagGroupId(v string) *ModifyTagGroupsResponseBodyTagGroups {
	s.TagGroupId = &v
	return s
}

func (s *ModifyTagGroupsResponseBodyTagGroups) SetTagGroupIndex(v int32) *ModifyTagGroupsResponseBodyTagGroups {
	s.TagGroupIndex = &v
	return s
}

type ModifyTagGroupsResponseBodyTags struct {
	ScriptId *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	TagGroup *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagId    *string `json:"TagId,omitempty" xml:"TagId,omitempty"`
	TagIndex *int32  `json:"TagIndex,omitempty" xml:"TagIndex,omitempty"`
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s ModifyTagGroupsResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagGroupsResponseBodyTags) GoString() string {
	return s.String()
}

func (s *ModifyTagGroupsResponseBodyTags) SetScriptId(v string) *ModifyTagGroupsResponseBodyTags {
	s.ScriptId = &v
	return s
}

func (s *ModifyTagGroupsResponseBodyTags) SetTagGroup(v string) *ModifyTagGroupsResponseBodyTags {
	s.TagGroup = &v
	return s
}

func (s *ModifyTagGroupsResponseBodyTags) SetTagId(v string) *ModifyTagGroupsResponseBodyTags {
	s.TagId = &v
	return s
}

func (s *ModifyTagGroupsResponseBodyTags) SetTagIndex(v int32) *ModifyTagGroupsResponseBodyTags {
	s.TagIndex = &v
	return s
}

func (s *ModifyTagGroupsResponseBodyTags) SetTagName(v string) *ModifyTagGroupsResponseBodyTags {
	s.TagName = &v
	return s
}

type ModifyTagGroupsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyTagGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyTagGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagGroupsResponse) GoString() string {
	return s.String()
}

func (s *ModifyTagGroupsResponse) SetHeaders(v map[string]*string) *ModifyTagGroupsResponse {
	s.Headers = v
	return s
}

func (s *ModifyTagGroupsResponse) SetStatusCode(v int32) *ModifyTagGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTagGroupsResponse) SetBody(v *ModifyTagGroupsResponseBody) *ModifyTagGroupsResponse {
	s.Body = v
	return s
}

type PublishScriptRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId    *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s PublishScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishScriptRequest) GoString() string {
	return s.String()
}

func (s *PublishScriptRequest) SetDescription(v string) *PublishScriptRequest {
	s.Description = &v
	return s
}

func (s *PublishScriptRequest) SetInstanceId(v string) *PublishScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *PublishScriptRequest) SetScriptId(v string) *PublishScriptRequest {
	s.ScriptId = &v
	return s
}

type PublishScriptResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PublishScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublishScriptResponseBody) GoString() string {
	return s.String()
}

func (s *PublishScriptResponseBody) SetCode(v string) *PublishScriptResponseBody {
	s.Code = &v
	return s
}

func (s *PublishScriptResponseBody) SetHttpStatusCode(v int32) *PublishScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PublishScriptResponseBody) SetMessage(v string) *PublishScriptResponseBody {
	s.Message = &v
	return s
}

func (s *PublishScriptResponseBody) SetRequestId(v string) *PublishScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *PublishScriptResponseBody) SetSuccess(v bool) *PublishScriptResponseBody {
	s.Success = &v
	return s
}

type PublishScriptResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PublishScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublishScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishScriptResponse) GoString() string {
	return s.String()
}

func (s *PublishScriptResponse) SetHeaders(v map[string]*string) *PublishScriptResponse {
	s.Headers = v
	return s
}

func (s *PublishScriptResponse) SetStatusCode(v int32) *PublishScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *PublishScriptResponse) SetBody(v *PublishScriptResponseBody) *PublishScriptResponse {
	s.Body = v
	return s
}

type PublishScriptForDebugRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s PublishScriptForDebugRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishScriptForDebugRequest) GoString() string {
	return s.String()
}

func (s *PublishScriptForDebugRequest) SetInstanceId(v string) *PublishScriptForDebugRequest {
	s.InstanceId = &v
	return s
}

func (s *PublishScriptForDebugRequest) SetScriptId(v string) *PublishScriptForDebugRequest {
	s.ScriptId = &v
	return s
}

type PublishScriptForDebugResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PublishScriptForDebugResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublishScriptForDebugResponseBody) GoString() string {
	return s.String()
}

func (s *PublishScriptForDebugResponseBody) SetCode(v string) *PublishScriptForDebugResponseBody {
	s.Code = &v
	return s
}

func (s *PublishScriptForDebugResponseBody) SetHttpStatusCode(v int32) *PublishScriptForDebugResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PublishScriptForDebugResponseBody) SetMessage(v string) *PublishScriptForDebugResponseBody {
	s.Message = &v
	return s
}

func (s *PublishScriptForDebugResponseBody) SetRequestId(v string) *PublishScriptForDebugResponseBody {
	s.RequestId = &v
	return s
}

func (s *PublishScriptForDebugResponseBody) SetSuccess(v bool) *PublishScriptForDebugResponseBody {
	s.Success = &v
	return s
}

type PublishScriptForDebugResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PublishScriptForDebugResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublishScriptForDebugResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishScriptForDebugResponse) GoString() string {
	return s.String()
}

func (s *PublishScriptForDebugResponse) SetHeaders(v map[string]*string) *PublishScriptForDebugResponse {
	s.Headers = v
	return s
}

func (s *PublishScriptForDebugResponse) SetStatusCode(v int32) *PublishScriptForDebugResponse {
	s.StatusCode = &v
	return s
}

func (s *PublishScriptForDebugResponse) SetBody(v *PublishScriptForDebugResponseBody) *PublishScriptForDebugResponse {
	s.Body = v
	return s
}

type QueryJobsRequest struct {
	ContactName   *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId    *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNumber   *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ScenarioId    *string `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TimeAlignment *string `json:"TimeAlignment,omitempty" xml:"TimeAlignment,omitempty"`
}

func (s QueryJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsRequest) GoString() string {
	return s.String()
}

func (s *QueryJobsRequest) SetContactName(v string) *QueryJobsRequest {
	s.ContactName = &v
	return s
}

func (s *QueryJobsRequest) SetEndTime(v int64) *QueryJobsRequest {
	s.EndTime = &v
	return s
}

func (s *QueryJobsRequest) SetInstanceId(v string) *QueryJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryJobsRequest) SetJobGroupId(v string) *QueryJobsRequest {
	s.JobGroupId = &v
	return s
}

func (s *QueryJobsRequest) SetPageNumber(v int32) *QueryJobsRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryJobsRequest) SetPageSize(v int32) *QueryJobsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryJobsRequest) SetPhoneNumber(v string) *QueryJobsRequest {
	s.PhoneNumber = &v
	return s
}

func (s *QueryJobsRequest) SetScenarioId(v string) *QueryJobsRequest {
	s.ScenarioId = &v
	return s
}

func (s *QueryJobsRequest) SetStartTime(v int64) *QueryJobsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryJobsRequest) SetTimeAlignment(v string) *QueryJobsRequest {
	s.TimeAlignment = &v
	return s
}

type QueryJobsResponseBody struct {
	Code           *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Jobs           *QueryJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Struct"`
	Message        *string                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBody) SetCode(v string) *QueryJobsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryJobsResponseBody) SetHttpStatusCode(v int32) *QueryJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *QueryJobsResponseBody) SetJobs(v *QueryJobsResponseBodyJobs) *QueryJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *QueryJobsResponseBody) SetMessage(v string) *QueryJobsResponseBody {
	s.Message = &v
	return s
}

func (s *QueryJobsResponseBody) SetRequestId(v string) *QueryJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryJobsResponseBody) SetSuccess(v bool) *QueryJobsResponseBody {
	s.Success = &v
	return s
}

type QueryJobsResponseBodyJobs struct {
	List       []*QueryJobsResponseBodyJobsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBodyJobs) SetList(v []*QueryJobsResponseBodyJobsList) *QueryJobsResponseBodyJobs {
	s.List = v
	return s
}

func (s *QueryJobsResponseBodyJobs) SetPageNumber(v int32) *QueryJobsResponseBodyJobs {
	s.PageNumber = &v
	return s
}

func (s *QueryJobsResponseBodyJobs) SetPageSize(v int32) *QueryJobsResponseBodyJobs {
	s.PageSize = &v
	return s
}

func (s *QueryJobsResponseBodyJobs) SetTotalCount(v int32) *QueryJobsResponseBodyJobs {
	s.TotalCount = &v
	return s
}

type QueryJobsResponseBodyJobsList struct {
	CallingNumbers []*string                                `json:"CallingNumbers,omitempty" xml:"CallingNumbers,omitempty" type:"Repeated"`
	Contacts       []*QueryJobsResponseBodyJobsListContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	Extras         []*QueryJobsResponseBodyJobsListExtras   `json:"Extras,omitempty" xml:"Extras,omitempty" type:"Repeated"`
	FailureReason  *string                                  `json:"FailureReason,omitempty" xml:"FailureReason,omitempty"`
	JobGroupId     *string                                  `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId          *string                                  `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Priority       *int32                                   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ReferenceId    *string                                  `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	ScenarioId     *string                                  `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Status         *string                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	StrategyId     *string                                  `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	Summary        []*QueryJobsResponseBodyJobsListSummary  `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
	Tasks          []*QueryJobsResponseBodyJobsListTasks    `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
}

func (s QueryJobsResponseBodyJobsList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBodyJobsList) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBodyJobsList) SetCallingNumbers(v []*string) *QueryJobsResponseBodyJobsList {
	s.CallingNumbers = v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetContacts(v []*QueryJobsResponseBodyJobsListContacts) *QueryJobsResponseBodyJobsList {
	s.Contacts = v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetExtras(v []*QueryJobsResponseBodyJobsListExtras) *QueryJobsResponseBodyJobsList {
	s.Extras = v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetFailureReason(v string) *QueryJobsResponseBodyJobsList {
	s.FailureReason = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetJobGroupId(v string) *QueryJobsResponseBodyJobsList {
	s.JobGroupId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetJobId(v string) *QueryJobsResponseBodyJobsList {
	s.JobId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetPriority(v int32) *QueryJobsResponseBodyJobsList {
	s.Priority = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetReferenceId(v string) *QueryJobsResponseBodyJobsList {
	s.ReferenceId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetScenarioId(v string) *QueryJobsResponseBodyJobsList {
	s.ScenarioId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetStatus(v string) *QueryJobsResponseBodyJobsList {
	s.Status = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetStrategyId(v string) *QueryJobsResponseBodyJobsList {
	s.StrategyId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetSummary(v []*QueryJobsResponseBodyJobsListSummary) *QueryJobsResponseBodyJobsList {
	s.Summary = v
	return s
}

func (s *QueryJobsResponseBodyJobsList) SetTasks(v []*QueryJobsResponseBodyJobsListTasks) *QueryJobsResponseBodyJobsList {
	s.Tasks = v
	return s
}

type QueryJobsResponseBodyJobsListContacts struct {
	ContactId   *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Honorific   *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role        *string `json:"Role,omitempty" xml:"Role,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryJobsResponseBodyJobsListContacts) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBodyJobsListContacts) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBodyJobsListContacts) SetContactId(v string) *QueryJobsResponseBodyJobsListContacts {
	s.ContactId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListContacts) SetContactName(v string) *QueryJobsResponseBodyJobsListContacts {
	s.ContactName = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListContacts) SetHonorific(v string) *QueryJobsResponseBodyJobsListContacts {
	s.Honorific = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListContacts) SetJobId(v string) *QueryJobsResponseBodyJobsListContacts {
	s.JobId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListContacts) SetPhoneNumber(v string) *QueryJobsResponseBodyJobsListContacts {
	s.PhoneNumber = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListContacts) SetReferenceId(v string) *QueryJobsResponseBodyJobsListContacts {
	s.ReferenceId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListContacts) SetRole(v string) *QueryJobsResponseBodyJobsListContacts {
	s.Role = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListContacts) SetState(v string) *QueryJobsResponseBodyJobsListContacts {
	s.State = &v
	return s
}

type QueryJobsResponseBodyJobsListExtras struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryJobsResponseBodyJobsListExtras) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBodyJobsListExtras) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBodyJobsListExtras) SetKey(v string) *QueryJobsResponseBodyJobsListExtras {
	s.Key = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListExtras) SetValue(v string) *QueryJobsResponseBodyJobsListExtras {
	s.Value = &v
	return s
}

type QueryJobsResponseBodyJobsListSummary struct {
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Content              *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ConversationDetailId *string `json:"ConversationDetailId,omitempty" xml:"ConversationDetailId,omitempty"`
	GroupId              *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	SummaryId            *string `json:"SummaryId,omitempty" xml:"SummaryId,omitempty"`
	SummaryName          *string `json:"SummaryName,omitempty" xml:"SummaryName,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s QueryJobsResponseBodyJobsListSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBodyJobsListSummary) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBodyJobsListSummary) SetCategory(v string) *QueryJobsResponseBodyJobsListSummary {
	s.Category = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListSummary) SetContent(v string) *QueryJobsResponseBodyJobsListSummary {
	s.Content = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListSummary) SetConversationDetailId(v string) *QueryJobsResponseBodyJobsListSummary {
	s.ConversationDetailId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListSummary) SetGroupId(v string) *QueryJobsResponseBodyJobsListSummary {
	s.GroupId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListSummary) SetJobId(v string) *QueryJobsResponseBodyJobsListSummary {
	s.JobId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListSummary) SetSummaryId(v string) *QueryJobsResponseBodyJobsListSummary {
	s.SummaryId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListSummary) SetSummaryName(v string) *QueryJobsResponseBodyJobsListSummary {
	s.SummaryName = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListSummary) SetTaskId(v string) *QueryJobsResponseBodyJobsListSummary {
	s.TaskId = &v
	return s
}

type QueryJobsResponseBodyJobsListTasks struct {
	ActualTime    *int64                                     `json:"ActualTime,omitempty" xml:"ActualTime,omitempty"`
	Brief         *string                                    `json:"Brief,omitempty" xml:"Brief,omitempty"`
	CallId        *string                                    `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CalledNumber  *string                                    `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber *string                                    `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ChatbotId     *string                                    `json:"ChatbotId,omitempty" xml:"ChatbotId,omitempty"`
	Contact       *QueryJobsResponseBodyJobsListTasksContact `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Struct"`
	Duration      *int32                                     `json:"Duration,omitempty" xml:"Duration,omitempty"`
	JobId         *string                                    `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PlanedTime    *int64                                     `json:"PlanedTime,omitempty" xml:"PlanedTime,omitempty"`
	ScenarioId    *string                                    `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	Status        *string                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId        *string                                    `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s QueryJobsResponseBodyJobsListTasks) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBodyJobsListTasks) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBodyJobsListTasks) SetActualTime(v int64) *QueryJobsResponseBodyJobsListTasks {
	s.ActualTime = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetBrief(v string) *QueryJobsResponseBodyJobsListTasks {
	s.Brief = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetCallId(v string) *QueryJobsResponseBodyJobsListTasks {
	s.CallId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetCalledNumber(v string) *QueryJobsResponseBodyJobsListTasks {
	s.CalledNumber = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetCallingNumber(v string) *QueryJobsResponseBodyJobsListTasks {
	s.CallingNumber = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetChatbotId(v string) *QueryJobsResponseBodyJobsListTasks {
	s.ChatbotId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetContact(v *QueryJobsResponseBodyJobsListTasksContact) *QueryJobsResponseBodyJobsListTasks {
	s.Contact = v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetDuration(v int32) *QueryJobsResponseBodyJobsListTasks {
	s.Duration = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetJobId(v string) *QueryJobsResponseBodyJobsListTasks {
	s.JobId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetPlanedTime(v int64) *QueryJobsResponseBodyJobsListTasks {
	s.PlanedTime = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetScenarioId(v string) *QueryJobsResponseBodyJobsListTasks {
	s.ScenarioId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetStatus(v string) *QueryJobsResponseBodyJobsListTasks {
	s.Status = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasks) SetTaskId(v string) *QueryJobsResponseBodyJobsListTasks {
	s.TaskId = &v
	return s
}

type QueryJobsResponseBodyJobsListTasksContact struct {
	ContactId   *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Honorific   *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role        *string `json:"Role,omitempty" xml:"Role,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryJobsResponseBodyJobsListTasksContact) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponseBodyJobsListTasksContact) GoString() string {
	return s.String()
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetContactId(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.ContactId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetContactName(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.ContactName = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetHonorific(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.Honorific = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetJobId(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.JobId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetPhoneNumber(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.PhoneNumber = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetReferenceId(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.ReferenceId = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetRole(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.Role = &v
	return s
}

func (s *QueryJobsResponseBodyJobsListTasksContact) SetState(v string) *QueryJobsResponseBodyJobsListTasksContact {
	s.State = &v
	return s
}

type QueryJobsResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsResponse) GoString() string {
	return s.String()
}

func (s *QueryJobsResponse) SetHeaders(v map[string]*string) *QueryJobsResponse {
	s.Headers = v
	return s
}

func (s *QueryJobsResponse) SetStatusCode(v int32) *QueryJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryJobsResponse) SetBody(v *QueryJobsResponseBody) *QueryJobsResponse {
	s.Body = v
	return s
}

type QueryJobsWithResultRequest struct {
	HasAnsweredFilter          *bool   `json:"HasAnsweredFilter,omitempty" xml:"HasAnsweredFilter,omitempty"`
	HasHangUpByRejectionFilter *bool   `json:"HasHangUpByRejectionFilter,omitempty" xml:"HasHangUpByRejectionFilter,omitempty"`
	HasReachedEndOfFlowFilter  *bool   `json:"HasReachedEndOfFlowFilter,omitempty" xml:"HasReachedEndOfFlowFilter,omitempty"`
	InstanceId                 *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId                 *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobStatusFilter            *string `json:"JobStatusFilter,omitempty" xml:"JobStatusFilter,omitempty"`
	PageNumber                 *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QueryText                  *string `json:"QueryText,omitempty" xml:"QueryText,omitempty"`
	TaskStatusFilter           *string `json:"TaskStatusFilter,omitempty" xml:"TaskStatusFilter,omitempty"`
}

func (s QueryJobsWithResultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultRequest) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultRequest) SetHasAnsweredFilter(v bool) *QueryJobsWithResultRequest {
	s.HasAnsweredFilter = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetHasHangUpByRejectionFilter(v bool) *QueryJobsWithResultRequest {
	s.HasHangUpByRejectionFilter = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetHasReachedEndOfFlowFilter(v bool) *QueryJobsWithResultRequest {
	s.HasReachedEndOfFlowFilter = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetInstanceId(v string) *QueryJobsWithResultRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetJobGroupId(v string) *QueryJobsWithResultRequest {
	s.JobGroupId = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetJobStatusFilter(v string) *QueryJobsWithResultRequest {
	s.JobStatusFilter = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetPageNumber(v int32) *QueryJobsWithResultRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetPageSize(v int32) *QueryJobsWithResultRequest {
	s.PageSize = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetQueryText(v string) *QueryJobsWithResultRequest {
	s.QueryText = &v
	return s
}

func (s *QueryJobsWithResultRequest) SetTaskStatusFilter(v string) *QueryJobsWithResultRequest {
	s.TaskStatusFilter = &v
	return s
}

type QueryJobsWithResultResponseBody struct {
	Code           *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Jobs           *QueryJobsWithResultResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Struct"`
	Message        *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
	VariableNames  []*string                            `json:"VariableNames,omitempty" xml:"VariableNames,omitempty" type:"Repeated"`
}

func (s QueryJobsWithResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBody) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBody) SetCode(v string) *QueryJobsWithResultResponseBody {
	s.Code = &v
	return s
}

func (s *QueryJobsWithResultResponseBody) SetHttpStatusCode(v int32) *QueryJobsWithResultResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *QueryJobsWithResultResponseBody) SetJobs(v *QueryJobsWithResultResponseBodyJobs) *QueryJobsWithResultResponseBody {
	s.Jobs = v
	return s
}

func (s *QueryJobsWithResultResponseBody) SetMessage(v string) *QueryJobsWithResultResponseBody {
	s.Message = &v
	return s
}

func (s *QueryJobsWithResultResponseBody) SetRequestId(v string) *QueryJobsWithResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryJobsWithResultResponseBody) SetSuccess(v bool) *QueryJobsWithResultResponseBody {
	s.Success = &v
	return s
}

func (s *QueryJobsWithResultResponseBody) SetVariableNames(v []*string) *QueryJobsWithResultResponseBody {
	s.VariableNames = v
	return s
}

type QueryJobsWithResultResponseBodyJobs struct {
	List       []*QueryJobsWithResultResponseBodyJobsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageCount  *int32                                     `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	PageNumber *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RowCount   *int32                                     `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
}

func (s QueryJobsWithResultResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBodyJobs) SetList(v []*QueryJobsWithResultResponseBodyJobsList) *QueryJobsWithResultResponseBodyJobs {
	s.List = v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobs) SetPageCount(v int32) *QueryJobsWithResultResponseBodyJobs {
	s.PageCount = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobs) SetPageNumber(v int32) *QueryJobsWithResultResponseBodyJobs {
	s.PageNumber = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobs) SetPageSize(v int32) *QueryJobsWithResultResponseBodyJobs {
	s.PageSize = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobs) SetRowCount(v int32) *QueryJobsWithResultResponseBodyJobs {
	s.RowCount = &v
	return s
}

type QueryJobsWithResultResponseBodyJobsList struct {
	Id               *string                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	JobFailureReason *string                                            `json:"JobFailureReason,omitempty" xml:"JobFailureReason,omitempty"`
	LatestTask       *QueryJobsWithResultResponseBodyJobsListLatestTask `json:"LatestTask,omitempty" xml:"LatestTask,omitempty" type:"Struct"`
	Status           *string                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusName       *string                                            `json:"StatusName,omitempty" xml:"StatusName,omitempty"`
}

func (s QueryJobsWithResultResponseBodyJobsList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBodyJobsList) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBodyJobsList) SetId(v string) *QueryJobsWithResultResponseBodyJobsList {
	s.Id = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsList) SetJobFailureReason(v string) *QueryJobsWithResultResponseBodyJobsList {
	s.JobFailureReason = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsList) SetLatestTask(v *QueryJobsWithResultResponseBodyJobsListLatestTask) *QueryJobsWithResultResponseBodyJobsList {
	s.LatestTask = v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsList) SetStatus(v string) *QueryJobsWithResultResponseBodyJobsList {
	s.Status = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsList) SetStatusName(v string) *QueryJobsWithResultResponseBodyJobsList {
	s.StatusName = &v
	return s
}

type QueryJobsWithResultResponseBodyJobsListLatestTask struct {
	CallDuration             *int32                                                                 `json:"CallDuration,omitempty" xml:"CallDuration,omitempty"`
	CallDurationDisplay      *string                                                                `json:"CallDurationDisplay,omitempty" xml:"CallDurationDisplay,omitempty"`
	CallTime                 *int64                                                                 `json:"CallTime,omitempty" xml:"CallTime,omitempty"`
	Contact                  *QueryJobsWithResultResponseBodyJobsListLatestTaskContact              `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Struct"`
	DialExceptionCodes       []*QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes `json:"DialExceptionCodes,omitempty" xml:"DialExceptionCodes,omitempty" type:"Repeated"`
	Extras                   []*QueryJobsWithResultResponseBodyJobsListLatestTaskExtras             `json:"Extras,omitempty" xml:"Extras,omitempty" type:"Repeated"`
	HasAnswered              *bool                                                                  `json:"HasAnswered,omitempty" xml:"HasAnswered,omitempty"`
	HasHangUpByRejection     *bool                                                                  `json:"HasHangUpByRejection,omitempty" xml:"HasHangUpByRejection,omitempty"`
	HasLastPlaybackCompleted *bool                                                                  `json:"HasLastPlaybackCompleted,omitempty" xml:"HasLastPlaybackCompleted,omitempty"`
	HasReachedEndOfFlow      *bool                                                                  `json:"HasReachedEndOfFlow,omitempty" xml:"HasReachedEndOfFlow,omitempty"`
	Status                   *string                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusName               *string                                                                `json:"StatusName,omitempty" xml:"StatusName,omitempty"`
	TagHits                  []*QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits            `json:"TagHits,omitempty" xml:"TagHits,omitempty" type:"Repeated"`
	TaskEndReason            *string                                                                `json:"TaskEndReason,omitempty" xml:"TaskEndReason,omitempty"`
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTask) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTask) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetCallDuration(v int32) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.CallDuration = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetCallDurationDisplay(v string) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.CallDurationDisplay = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetCallTime(v int64) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.CallTime = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetContact(v *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.Contact = v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetDialExceptionCodes(v []*QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.DialExceptionCodes = v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetExtras(v []*QueryJobsWithResultResponseBodyJobsListLatestTaskExtras) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.Extras = v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetHasAnswered(v bool) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.HasAnswered = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetHasHangUpByRejection(v bool) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.HasHangUpByRejection = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetHasLastPlaybackCompleted(v bool) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.HasLastPlaybackCompleted = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetHasReachedEndOfFlow(v bool) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.HasReachedEndOfFlow = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetStatus(v string) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.Status = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetStatusName(v string) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.StatusName = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetTagHits(v []*QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.TagHits = v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTask) SetTaskEndReason(v string) *QueryJobsWithResultResponseBodyJobsListLatestTask {
	s.TaskEndReason = &v
	return s
}

type QueryJobsWithResultResponseBodyJobsListLatestTaskContact struct {
	Honorific            *string `json:"Honorific,omitempty" xml:"Honorific,omitempty"`
	Id                   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	JobUuid              *string `json:"JobUuid,omitempty" xml:"JobUuid,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	PreferredPhoneNumber *string `json:"PreferredPhoneNumber,omitempty" xml:"PreferredPhoneNumber,omitempty"`
	ReferenceId          *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Round                *int32  `json:"Round,omitempty" xml:"Round,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskContact) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskContact) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetHonorific(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.Honorific = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetId(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.Id = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetJobUuid(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.JobUuid = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetName(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.Name = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetPhoneNumber(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.PhoneNumber = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetPreferredPhoneNumber(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.PreferredPhoneNumber = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetReferenceId(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.ReferenceId = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetRole(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.Role = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetRound(v int32) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.Round = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskContact) SetState(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskContact {
	s.State = &v
	return s
}

type QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Hint *string `json:"Hint,omitempty" xml:"Hint,omitempty"`
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes) SetCode(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes {
	s.Code = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes) SetHint(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes {
	s.Hint = &v
	return s
}

type QueryJobsWithResultResponseBodyJobsListLatestTaskExtras struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskExtras) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskExtras) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskExtras) SetKey(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskExtras {
	s.Key = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskExtras) SetValue(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskExtras {
	s.Value = &v
	return s
}

type QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits struct {
	TagGroup *string `json:"TagGroup,omitempty" xml:"TagGroup,omitempty"`
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits) SetTagGroup(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits {
	s.TagGroup = &v
	return s
}

func (s *QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits) SetTagName(v string) *QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits {
	s.TagName = &v
	return s
}

type QueryJobsWithResultResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryJobsWithResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryJobsWithResultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobsWithResultResponse) GoString() string {
	return s.String()
}

func (s *QueryJobsWithResultResponse) SetHeaders(v map[string]*string) *QueryJobsWithResultResponse {
	s.Headers = v
	return s
}

func (s *QueryJobsWithResultResponse) SetStatusCode(v int32) *QueryJobsWithResultResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryJobsWithResultResponse) SetBody(v *QueryJobsWithResultResponseBody) *QueryJobsWithResultResponse {
	s.Body = v
	return s
}

type QueryScriptWaveformsRequest struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptContent *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	ScriptId      *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s QueryScriptWaveformsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptWaveformsRequest) GoString() string {
	return s.String()
}

func (s *QueryScriptWaveformsRequest) SetInstanceId(v string) *QueryScriptWaveformsRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryScriptWaveformsRequest) SetScriptContent(v string) *QueryScriptWaveformsRequest {
	s.ScriptContent = &v
	return s
}

func (s *QueryScriptWaveformsRequest) SetScriptId(v string) *QueryScriptWaveformsRequest {
	s.ScriptId = &v
	return s
}

type QueryScriptWaveformsResponseBody struct {
	Code            *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode  *int32                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message         *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScriptWaveforms []*QueryScriptWaveformsResponseBodyScriptWaveforms `json:"ScriptWaveforms,omitempty" xml:"ScriptWaveforms,omitempty" type:"Repeated"`
	Success         *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryScriptWaveformsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptWaveformsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryScriptWaveformsResponseBody) SetCode(v string) *QueryScriptWaveformsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryScriptWaveformsResponseBody) SetHttpStatusCode(v int32) *QueryScriptWaveformsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *QueryScriptWaveformsResponseBody) SetMessage(v string) *QueryScriptWaveformsResponseBody {
	s.Message = &v
	return s
}

func (s *QueryScriptWaveformsResponseBody) SetRequestId(v string) *QueryScriptWaveformsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryScriptWaveformsResponseBody) SetScriptWaveforms(v []*QueryScriptWaveformsResponseBodyScriptWaveforms) *QueryScriptWaveformsResponseBody {
	s.ScriptWaveforms = v
	return s
}

func (s *QueryScriptWaveformsResponseBody) SetSuccess(v bool) *QueryScriptWaveformsResponseBody {
	s.Success = &v
	return s
}

type QueryScriptWaveformsResponseBodyScriptWaveforms struct {
	FileId           *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName         *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ScriptContent    *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	ScriptId         *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptWaveformId *string `json:"ScriptWaveformId,omitempty" xml:"ScriptWaveformId,omitempty"`
}

func (s QueryScriptWaveformsResponseBodyScriptWaveforms) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptWaveformsResponseBodyScriptWaveforms) GoString() string {
	return s.String()
}

func (s *QueryScriptWaveformsResponseBodyScriptWaveforms) SetFileId(v string) *QueryScriptWaveformsResponseBodyScriptWaveforms {
	s.FileId = &v
	return s
}

func (s *QueryScriptWaveformsResponseBodyScriptWaveforms) SetFileName(v string) *QueryScriptWaveformsResponseBodyScriptWaveforms {
	s.FileName = &v
	return s
}

func (s *QueryScriptWaveformsResponseBodyScriptWaveforms) SetScriptContent(v string) *QueryScriptWaveformsResponseBodyScriptWaveforms {
	s.ScriptContent = &v
	return s
}

func (s *QueryScriptWaveformsResponseBodyScriptWaveforms) SetScriptId(v string) *QueryScriptWaveformsResponseBodyScriptWaveforms {
	s.ScriptId = &v
	return s
}

func (s *QueryScriptWaveformsResponseBodyScriptWaveforms) SetScriptWaveformId(v string) *QueryScriptWaveformsResponseBodyScriptWaveforms {
	s.ScriptWaveformId = &v
	return s
}

type QueryScriptWaveformsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryScriptWaveformsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryScriptWaveformsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptWaveformsResponse) GoString() string {
	return s.String()
}

func (s *QueryScriptWaveformsResponse) SetHeaders(v map[string]*string) *QueryScriptWaveformsResponse {
	s.Headers = v
	return s
}

func (s *QueryScriptWaveformsResponse) SetStatusCode(v int32) *QueryScriptWaveformsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryScriptWaveformsResponse) SetBody(v *QueryScriptWaveformsResponseBody) *QueryScriptWaveformsResponse {
	s.Body = v
	return s
}

type QueryScriptsByStatusRequest struct {
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StatusList []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s QueryScriptsByStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptsByStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryScriptsByStatusRequest) SetInstanceId(v string) *QueryScriptsByStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryScriptsByStatusRequest) SetPageNumber(v int32) *QueryScriptsByStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryScriptsByStatusRequest) SetPageSize(v int32) *QueryScriptsByStatusRequest {
	s.PageSize = &v
	return s
}

func (s *QueryScriptsByStatusRequest) SetStatusList(v []*string) *QueryScriptsByStatusRequest {
	s.StatusList = v
	return s
}

type QueryScriptsByStatusResponseBody struct {
	Code           *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Scripts        *QueryScriptsByStatusResponseBodyScripts `json:"Scripts,omitempty" xml:"Scripts,omitempty" type:"Struct"`
	Success        *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryScriptsByStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptsByStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryScriptsByStatusResponseBody) SetCode(v string) *QueryScriptsByStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryScriptsByStatusResponseBody) SetHttpStatusCode(v int32) *QueryScriptsByStatusResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *QueryScriptsByStatusResponseBody) SetMessage(v string) *QueryScriptsByStatusResponseBody {
	s.Message = &v
	return s
}

func (s *QueryScriptsByStatusResponseBody) SetRequestId(v string) *QueryScriptsByStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryScriptsByStatusResponseBody) SetScripts(v *QueryScriptsByStatusResponseBodyScripts) *QueryScriptsByStatusResponseBody {
	s.Scripts = v
	return s
}

func (s *QueryScriptsByStatusResponseBody) SetSuccess(v bool) *QueryScriptsByStatusResponseBody {
	s.Success = &v
	return s
}

type QueryScriptsByStatusResponseBodyScripts struct {
	List       []*QueryScriptsByStatusResponseBodyScriptsList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryScriptsByStatusResponseBodyScripts) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptsByStatusResponseBodyScripts) GoString() string {
	return s.String()
}

func (s *QueryScriptsByStatusResponseBodyScripts) SetList(v []*QueryScriptsByStatusResponseBodyScriptsList) *QueryScriptsByStatusResponseBodyScripts {
	s.List = v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScripts) SetPageNumber(v int32) *QueryScriptsByStatusResponseBodyScripts {
	s.PageNumber = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScripts) SetPageSize(v int32) *QueryScriptsByStatusResponseBodyScripts {
	s.PageSize = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScripts) SetTotalCount(v int32) *QueryScriptsByStatusResponseBodyScripts {
	s.TotalCount = &v
	return s
}

type QueryScriptsByStatusResponseBodyScriptsList struct {
	AppliedVersion    *string `json:"AppliedVersion,omitempty" xml:"AppliedVersion,omitempty"`
	DebugStatus       *string `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	DebugVersion      *string `json:"DebugVersion,omitempty" xml:"DebugVersion,omitempty"`
	Industry          *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDebugDrafted    *bool   `json:"IsDebugDrafted,omitempty" xml:"IsDebugDrafted,omitempty"`
	IsDrafted         *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	Scene             *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptDescription *string `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName        *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdateTime        *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s QueryScriptsByStatusResponseBodyScriptsList) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptsByStatusResponseBodyScriptsList) GoString() string {
	return s.String()
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetAppliedVersion(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.AppliedVersion = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetDebugStatus(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.DebugStatus = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetDebugVersion(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.DebugVersion = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetIndustry(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.Industry = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetIsDebugDrafted(v bool) *QueryScriptsByStatusResponseBodyScriptsList {
	s.IsDebugDrafted = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetIsDrafted(v bool) *QueryScriptsByStatusResponseBodyScriptsList {
	s.IsDrafted = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetScene(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.Scene = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetScriptDescription(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.ScriptDescription = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetScriptId(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.ScriptId = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetScriptName(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.ScriptName = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetStatus(v string) *QueryScriptsByStatusResponseBodyScriptsList {
	s.Status = &v
	return s
}

func (s *QueryScriptsByStatusResponseBodyScriptsList) SetUpdateTime(v int64) *QueryScriptsByStatusResponseBodyScriptsList {
	s.UpdateTime = &v
	return s
}

type QueryScriptsByStatusResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryScriptsByStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryScriptsByStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryScriptsByStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryScriptsByStatusResponse) SetHeaders(v map[string]*string) *QueryScriptsByStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryScriptsByStatusResponse) SetStatusCode(v int32) *QueryScriptsByStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryScriptsByStatusResponse) SetBody(v *QueryScriptsByStatusResponseBody) *QueryScriptsByStatusResponse {
	s.Body = v
	return s
}

type RecordFailureRequest struct {
	ActualTime      *int64  `json:"ActualTime,omitempty" xml:"ActualTime,omitempty"`
	CallId          *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CalledNumber    *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber   *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	DispositionCode *string `json:"DispositionCode,omitempty" xml:"DispositionCode,omitempty"`
	ExceptionCodes  *string `json:"ExceptionCodes,omitempty" xml:"ExceptionCodes,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s RecordFailureRequest) String() string {
	return tea.Prettify(s)
}

func (s RecordFailureRequest) GoString() string {
	return s.String()
}

func (s *RecordFailureRequest) SetActualTime(v int64) *RecordFailureRequest {
	s.ActualTime = &v
	return s
}

func (s *RecordFailureRequest) SetCallId(v string) *RecordFailureRequest {
	s.CallId = &v
	return s
}

func (s *RecordFailureRequest) SetCalledNumber(v string) *RecordFailureRequest {
	s.CalledNumber = &v
	return s
}

func (s *RecordFailureRequest) SetCallingNumber(v string) *RecordFailureRequest {
	s.CallingNumber = &v
	return s
}

func (s *RecordFailureRequest) SetDispositionCode(v string) *RecordFailureRequest {
	s.DispositionCode = &v
	return s
}

func (s *RecordFailureRequest) SetExceptionCodes(v string) *RecordFailureRequest {
	s.ExceptionCodes = &v
	return s
}

func (s *RecordFailureRequest) SetInstanceId(v string) *RecordFailureRequest {
	s.InstanceId = &v
	return s
}

func (s *RecordFailureRequest) SetTaskId(v string) *RecordFailureRequest {
	s.TaskId = &v
	return s
}

type RecordFailureResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RecordFailureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecordFailureResponseBody) GoString() string {
	return s.String()
}

func (s *RecordFailureResponseBody) SetCode(v string) *RecordFailureResponseBody {
	s.Code = &v
	return s
}

func (s *RecordFailureResponseBody) SetHttpStatusCode(v int32) *RecordFailureResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RecordFailureResponseBody) SetMessage(v string) *RecordFailureResponseBody {
	s.Message = &v
	return s
}

func (s *RecordFailureResponseBody) SetRequestId(v string) *RecordFailureResponseBody {
	s.RequestId = &v
	return s
}

func (s *RecordFailureResponseBody) SetSuccess(v bool) *RecordFailureResponseBody {
	s.Success = &v
	return s
}

type RecordFailureResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RecordFailureResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RecordFailureResponse) String() string {
	return tea.Prettify(s)
}

func (s RecordFailureResponse) GoString() string {
	return s.String()
}

func (s *RecordFailureResponse) SetHeaders(v map[string]*string) *RecordFailureResponse {
	s.Headers = v
	return s
}

func (s *RecordFailureResponse) SetStatusCode(v int32) *RecordFailureResponse {
	s.StatusCode = &v
	return s
}

func (s *RecordFailureResponse) SetBody(v *RecordFailureResponseBody) *RecordFailureResponse {
	s.Body = v
	return s
}

type ResumeJobsRequest struct {
	All            *bool     `json:"All,omitempty" xml:"All,omitempty"`
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId     *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId          []*string `json:"JobId,omitempty" xml:"JobId,omitempty" type:"Repeated"`
	JobReferenceId []*string `json:"JobReferenceId,omitempty" xml:"JobReferenceId,omitempty" type:"Repeated"`
	ScenarioId     *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
}

func (s ResumeJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeJobsRequest) GoString() string {
	return s.String()
}

func (s *ResumeJobsRequest) SetAll(v bool) *ResumeJobsRequest {
	s.All = &v
	return s
}

func (s *ResumeJobsRequest) SetInstanceId(v string) *ResumeJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *ResumeJobsRequest) SetJobGroupId(v string) *ResumeJobsRequest {
	s.JobGroupId = &v
	return s
}

func (s *ResumeJobsRequest) SetJobId(v []*string) *ResumeJobsRequest {
	s.JobId = v
	return s
}

func (s *ResumeJobsRequest) SetJobReferenceId(v []*string) *ResumeJobsRequest {
	s.JobReferenceId = v
	return s
}

func (s *ResumeJobsRequest) SetScenarioId(v string) *ResumeJobsRequest {
	s.ScenarioId = &v
	return s
}

type ResumeJobsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ResumeJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeJobsResponseBody) SetCode(v string) *ResumeJobsResponseBody {
	s.Code = &v
	return s
}

func (s *ResumeJobsResponseBody) SetHttpStatusCode(v int32) *ResumeJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResumeJobsResponseBody) SetMessage(v string) *ResumeJobsResponseBody {
	s.Message = &v
	return s
}

func (s *ResumeJobsResponseBody) SetRequestId(v string) *ResumeJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeJobsResponseBody) SetSuccess(v bool) *ResumeJobsResponseBody {
	s.Success = &v
	return s
}

type ResumeJobsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResumeJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResumeJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeJobsResponse) GoString() string {
	return s.String()
}

func (s *ResumeJobsResponse) SetHeaders(v map[string]*string) *ResumeJobsResponse {
	s.Headers = v
	return s
}

func (s *ResumeJobsResponse) SetStatusCode(v int32) *ResumeJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeJobsResponse) SetBody(v *ResumeJobsResponseBody) *ResumeJobsResponse {
	s.Body = v
	return s
}

type RollbackScriptRequest struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RollbackVersion *string `json:"RollbackVersion,omitempty" xml:"RollbackVersion,omitempty"`
	ScriptId        *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s RollbackScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackScriptRequest) GoString() string {
	return s.String()
}

func (s *RollbackScriptRequest) SetInstanceId(v string) *RollbackScriptRequest {
	s.InstanceId = &v
	return s
}

func (s *RollbackScriptRequest) SetRollbackVersion(v string) *RollbackScriptRequest {
	s.RollbackVersion = &v
	return s
}

func (s *RollbackScriptRequest) SetScriptId(v string) *RollbackScriptRequest {
	s.ScriptId = &v
	return s
}

type RollbackScriptResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RollbackScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackScriptResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackScriptResponseBody) SetCode(v string) *RollbackScriptResponseBody {
	s.Code = &v
	return s
}

func (s *RollbackScriptResponseBody) SetHttpStatusCode(v int32) *RollbackScriptResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RollbackScriptResponseBody) SetMessage(v string) *RollbackScriptResponseBody {
	s.Message = &v
	return s
}

func (s *RollbackScriptResponseBody) SetRequestId(v string) *RollbackScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *RollbackScriptResponseBody) SetSuccess(v bool) *RollbackScriptResponseBody {
	s.Success = &v
	return s
}

type RollbackScriptResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RollbackScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackScriptResponse) GoString() string {
	return s.String()
}

func (s *RollbackScriptResponse) SetHeaders(v map[string]*string) *RollbackScriptResponse {
	s.Headers = v
	return s
}

func (s *RollbackScriptResponse) SetStatusCode(v int32) *RollbackScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *RollbackScriptResponse) SetBody(v *RollbackScriptResponseBody) *RollbackScriptResponse {
	s.Body = v
	return s
}

type SaveAfterAnswerDelayPlaybackRequest struct {
	AfterAnswerDelayPlayback *int32  `json:"AfterAnswerDelayPlayback,omitempty" xml:"AfterAnswerDelayPlayback,omitempty"`
	EntryId                  *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel            *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s SaveAfterAnswerDelayPlaybackRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveAfterAnswerDelayPlaybackRequest) GoString() string {
	return s.String()
}

func (s *SaveAfterAnswerDelayPlaybackRequest) SetAfterAnswerDelayPlayback(v int32) *SaveAfterAnswerDelayPlaybackRequest {
	s.AfterAnswerDelayPlayback = &v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackRequest) SetEntryId(v string) *SaveAfterAnswerDelayPlaybackRequest {
	s.EntryId = &v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackRequest) SetStrategyLevel(v int32) *SaveAfterAnswerDelayPlaybackRequest {
	s.StrategyLevel = &v
	return s
}

type SaveAfterAnswerDelayPlaybackResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveAfterAnswerDelayPlaybackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveAfterAnswerDelayPlaybackResponseBody) GoString() string {
	return s.String()
}

func (s *SaveAfterAnswerDelayPlaybackResponseBody) SetCode(v string) *SaveAfterAnswerDelayPlaybackResponseBody {
	s.Code = &v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackResponseBody) SetHttpStatusCode(v int32) *SaveAfterAnswerDelayPlaybackResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackResponseBody) SetMessage(v string) *SaveAfterAnswerDelayPlaybackResponseBody {
	s.Message = &v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackResponseBody) SetRequestId(v string) *SaveAfterAnswerDelayPlaybackResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackResponseBody) SetSuccess(v bool) *SaveAfterAnswerDelayPlaybackResponseBody {
	s.Success = &v
	return s
}

type SaveAfterAnswerDelayPlaybackResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveAfterAnswerDelayPlaybackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveAfterAnswerDelayPlaybackResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveAfterAnswerDelayPlaybackResponse) GoString() string {
	return s.String()
}

func (s *SaveAfterAnswerDelayPlaybackResponse) SetHeaders(v map[string]*string) *SaveAfterAnswerDelayPlaybackResponse {
	s.Headers = v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackResponse) SetStatusCode(v int32) *SaveAfterAnswerDelayPlaybackResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveAfterAnswerDelayPlaybackResponse) SetBody(v *SaveAfterAnswerDelayPlaybackResponseBody) *SaveAfterAnswerDelayPlaybackResponse {
	s.Body = v
	return s
}

type SaveBaseStrategyPeriodRequest struct {
	EntryId               *string   `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	OnlyWeekdays          *bool     `json:"OnlyWeekdays,omitempty" xml:"OnlyWeekdays,omitempty"`
	StrategyLevel         *int32    `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
	WorkingTime           []*string `json:"WorkingTime,omitempty" xml:"WorkingTime,omitempty" type:"Repeated"`
	WorkingTimeFramesJson *string   `json:"WorkingTimeFramesJson,omitempty" xml:"WorkingTimeFramesJson,omitempty"`
}

func (s SaveBaseStrategyPeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveBaseStrategyPeriodRequest) GoString() string {
	return s.String()
}

func (s *SaveBaseStrategyPeriodRequest) SetEntryId(v string) *SaveBaseStrategyPeriodRequest {
	s.EntryId = &v
	return s
}

func (s *SaveBaseStrategyPeriodRequest) SetOnlyWeekdays(v bool) *SaveBaseStrategyPeriodRequest {
	s.OnlyWeekdays = &v
	return s
}

func (s *SaveBaseStrategyPeriodRequest) SetStrategyLevel(v int32) *SaveBaseStrategyPeriodRequest {
	s.StrategyLevel = &v
	return s
}

func (s *SaveBaseStrategyPeriodRequest) SetWorkingTime(v []*string) *SaveBaseStrategyPeriodRequest {
	s.WorkingTime = v
	return s
}

func (s *SaveBaseStrategyPeriodRequest) SetWorkingTimeFramesJson(v string) *SaveBaseStrategyPeriodRequest {
	s.WorkingTimeFramesJson = &v
	return s
}

type SaveBaseStrategyPeriodResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveBaseStrategyPeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveBaseStrategyPeriodResponseBody) GoString() string {
	return s.String()
}

func (s *SaveBaseStrategyPeriodResponseBody) SetCode(v string) *SaveBaseStrategyPeriodResponseBody {
	s.Code = &v
	return s
}

func (s *SaveBaseStrategyPeriodResponseBody) SetHttpStatusCode(v int32) *SaveBaseStrategyPeriodResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveBaseStrategyPeriodResponseBody) SetMessage(v string) *SaveBaseStrategyPeriodResponseBody {
	s.Message = &v
	return s
}

func (s *SaveBaseStrategyPeriodResponseBody) SetRequestId(v string) *SaveBaseStrategyPeriodResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveBaseStrategyPeriodResponseBody) SetSuccess(v bool) *SaveBaseStrategyPeriodResponseBody {
	s.Success = &v
	return s
}

type SaveBaseStrategyPeriodResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveBaseStrategyPeriodResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveBaseStrategyPeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveBaseStrategyPeriodResponse) GoString() string {
	return s.String()
}

func (s *SaveBaseStrategyPeriodResponse) SetHeaders(v map[string]*string) *SaveBaseStrategyPeriodResponse {
	s.Headers = v
	return s
}

func (s *SaveBaseStrategyPeriodResponse) SetStatusCode(v int32) *SaveBaseStrategyPeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveBaseStrategyPeriodResponse) SetBody(v *SaveBaseStrategyPeriodResponseBody) *SaveBaseStrategyPeriodResponse {
	s.Body = v
	return s
}

type SaveContactBlockListRequest struct {
	ContactBlockListList  []*string `json:"ContactBlockListList,omitempty" xml:"ContactBlockListList,omitempty" type:"Repeated"`
	ContactBlockListsJson *string   `json:"ContactBlockListsJson,omitempty" xml:"ContactBlockListsJson,omitempty"`
	InstanceId            *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s SaveContactBlockListRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveContactBlockListRequest) GoString() string {
	return s.String()
}

func (s *SaveContactBlockListRequest) SetContactBlockListList(v []*string) *SaveContactBlockListRequest {
	s.ContactBlockListList = v
	return s
}

func (s *SaveContactBlockListRequest) SetContactBlockListsJson(v string) *SaveContactBlockListRequest {
	s.ContactBlockListsJson = &v
	return s
}

func (s *SaveContactBlockListRequest) SetInstanceId(v string) *SaveContactBlockListRequest {
	s.InstanceId = &v
	return s
}

type SaveContactBlockListResponseBody struct {
	AffectedRows   *int32  `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveContactBlockListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveContactBlockListResponseBody) GoString() string {
	return s.String()
}

func (s *SaveContactBlockListResponseBody) SetAffectedRows(v int32) *SaveContactBlockListResponseBody {
	s.AffectedRows = &v
	return s
}

func (s *SaveContactBlockListResponseBody) SetCode(v string) *SaveContactBlockListResponseBody {
	s.Code = &v
	return s
}

func (s *SaveContactBlockListResponseBody) SetHttpStatusCode(v int32) *SaveContactBlockListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveContactBlockListResponseBody) SetMessage(v string) *SaveContactBlockListResponseBody {
	s.Message = &v
	return s
}

func (s *SaveContactBlockListResponseBody) SetRequestId(v string) *SaveContactBlockListResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveContactBlockListResponseBody) SetSuccess(v bool) *SaveContactBlockListResponseBody {
	s.Success = &v
	return s
}

type SaveContactBlockListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveContactBlockListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveContactBlockListResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveContactBlockListResponse) GoString() string {
	return s.String()
}

func (s *SaveContactBlockListResponse) SetHeaders(v map[string]*string) *SaveContactBlockListResponse {
	s.Headers = v
	return s
}

func (s *SaveContactBlockListResponse) SetStatusCode(v int32) *SaveContactBlockListResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveContactBlockListResponse) SetBody(v *SaveContactBlockListResponseBody) *SaveContactBlockListResponse {
	s.Body = v
	return s
}

type SaveContactWhiteListRequest struct {
	ContactWhiteListList  []*string `json:"ContactWhiteListList,omitempty" xml:"ContactWhiteListList,omitempty" type:"Repeated"`
	ContactWhiteListsJson *string   `json:"ContactWhiteListsJson,omitempty" xml:"ContactWhiteListsJson,omitempty"`
	InstanceId            *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s SaveContactWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveContactWhiteListRequest) GoString() string {
	return s.String()
}

func (s *SaveContactWhiteListRequest) SetContactWhiteListList(v []*string) *SaveContactWhiteListRequest {
	s.ContactWhiteListList = v
	return s
}

func (s *SaveContactWhiteListRequest) SetContactWhiteListsJson(v string) *SaveContactWhiteListRequest {
	s.ContactWhiteListsJson = &v
	return s
}

func (s *SaveContactWhiteListRequest) SetInstanceId(v string) *SaveContactWhiteListRequest {
	s.InstanceId = &v
	return s
}

type SaveContactWhiteListResponseBody struct {
	AffectedRows   *int32  `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveContactWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveContactWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *SaveContactWhiteListResponseBody) SetAffectedRows(v int32) *SaveContactWhiteListResponseBody {
	s.AffectedRows = &v
	return s
}

func (s *SaveContactWhiteListResponseBody) SetCode(v string) *SaveContactWhiteListResponseBody {
	s.Code = &v
	return s
}

func (s *SaveContactWhiteListResponseBody) SetHttpStatusCode(v int32) *SaveContactWhiteListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveContactWhiteListResponseBody) SetMessage(v string) *SaveContactWhiteListResponseBody {
	s.Message = &v
	return s
}

func (s *SaveContactWhiteListResponseBody) SetRequestId(v string) *SaveContactWhiteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveContactWhiteListResponseBody) SetSuccess(v bool) *SaveContactWhiteListResponseBody {
	s.Success = &v
	return s
}

type SaveContactWhiteListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveContactWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveContactWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveContactWhiteListResponse) GoString() string {
	return s.String()
}

func (s *SaveContactWhiteListResponse) SetHeaders(v map[string]*string) *SaveContactWhiteListResponse {
	s.Headers = v
	return s
}

func (s *SaveContactWhiteListResponse) SetStatusCode(v int32) *SaveContactWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveContactWhiteListResponse) SetBody(v *SaveContactWhiteListResponseBody) *SaveContactWhiteListResponse {
	s.Body = v
	return s
}

type SaveEffectiveDaysRequest struct {
	EffectiveDays *int32  `json:"EffectiveDays,omitempty" xml:"EffectiveDays,omitempty"`
	EntryId       *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	StrategyLevel *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s SaveEffectiveDaysRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveEffectiveDaysRequest) GoString() string {
	return s.String()
}

func (s *SaveEffectiveDaysRequest) SetEffectiveDays(v int32) *SaveEffectiveDaysRequest {
	s.EffectiveDays = &v
	return s
}

func (s *SaveEffectiveDaysRequest) SetEntryId(v string) *SaveEffectiveDaysRequest {
	s.EntryId = &v
	return s
}

func (s *SaveEffectiveDaysRequest) SetStrategyLevel(v int32) *SaveEffectiveDaysRequest {
	s.StrategyLevel = &v
	return s
}

type SaveEffectiveDaysResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveEffectiveDaysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveEffectiveDaysResponseBody) GoString() string {
	return s.String()
}

func (s *SaveEffectiveDaysResponseBody) SetCode(v string) *SaveEffectiveDaysResponseBody {
	s.Code = &v
	return s
}

func (s *SaveEffectiveDaysResponseBody) SetHttpStatusCode(v int32) *SaveEffectiveDaysResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveEffectiveDaysResponseBody) SetMessage(v string) *SaveEffectiveDaysResponseBody {
	s.Message = &v
	return s
}

func (s *SaveEffectiveDaysResponseBody) SetRequestId(v string) *SaveEffectiveDaysResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveEffectiveDaysResponseBody) SetSuccess(v bool) *SaveEffectiveDaysResponseBody {
	s.Success = &v
	return s
}

type SaveEffectiveDaysResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveEffectiveDaysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveEffectiveDaysResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveEffectiveDaysResponse) GoString() string {
	return s.String()
}

func (s *SaveEffectiveDaysResponse) SetHeaders(v map[string]*string) *SaveEffectiveDaysResponse {
	s.Headers = v
	return s
}

func (s *SaveEffectiveDaysResponse) SetStatusCode(v int32) *SaveEffectiveDaysResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveEffectiveDaysResponse) SetBody(v *SaveEffectiveDaysResponseBody) *SaveEffectiveDaysResponse {
	s.Body = v
	return s
}

type SaveMaxAttemptsPerDayRequest struct {
	EntryId           *string `json:"EntryId,omitempty" xml:"EntryId,omitempty"`
	MaxAttemptsPerDay *int32  `json:"MaxAttemptsPerDay,omitempty" xml:"MaxAttemptsPerDay,omitempty"`
	StrategyLevel     *int32  `json:"StrategyLevel,omitempty" xml:"StrategyLevel,omitempty"`
}

func (s SaveMaxAttemptsPerDayRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveMaxAttemptsPerDayRequest) GoString() string {
	return s.String()
}

func (s *SaveMaxAttemptsPerDayRequest) SetEntryId(v string) *SaveMaxAttemptsPerDayRequest {
	s.EntryId = &v
	return s
}

func (s *SaveMaxAttemptsPerDayRequest) SetMaxAttemptsPerDay(v int32) *SaveMaxAttemptsPerDayRequest {
	s.MaxAttemptsPerDay = &v
	return s
}

func (s *SaveMaxAttemptsPerDayRequest) SetStrategyLevel(v int32) *SaveMaxAttemptsPerDayRequest {
	s.StrategyLevel = &v
	return s
}

type SaveMaxAttemptsPerDayResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveMaxAttemptsPerDayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveMaxAttemptsPerDayResponseBody) GoString() string {
	return s.String()
}

func (s *SaveMaxAttemptsPerDayResponseBody) SetCode(v string) *SaveMaxAttemptsPerDayResponseBody {
	s.Code = &v
	return s
}

func (s *SaveMaxAttemptsPerDayResponseBody) SetHttpStatusCode(v int32) *SaveMaxAttemptsPerDayResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveMaxAttemptsPerDayResponseBody) SetMessage(v string) *SaveMaxAttemptsPerDayResponseBody {
	s.Message = &v
	return s
}

func (s *SaveMaxAttemptsPerDayResponseBody) SetRequestId(v string) *SaveMaxAttemptsPerDayResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveMaxAttemptsPerDayResponseBody) SetSuccess(v bool) *SaveMaxAttemptsPerDayResponseBody {
	s.Success = &v
	return s
}

type SaveMaxAttemptsPerDayResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveMaxAttemptsPerDayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveMaxAttemptsPerDayResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveMaxAttemptsPerDayResponse) GoString() string {
	return s.String()
}

func (s *SaveMaxAttemptsPerDayResponse) SetHeaders(v map[string]*string) *SaveMaxAttemptsPerDayResponse {
	s.Headers = v
	return s
}

func (s *SaveMaxAttemptsPerDayResponse) SetStatusCode(v int32) *SaveMaxAttemptsPerDayResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveMaxAttemptsPerDayResponse) SetBody(v *SaveMaxAttemptsPerDayResponseBody) *SaveMaxAttemptsPerDayResponse {
	s.Body = v
	return s
}

type SearchTaskRequest struct {
	ActualTimeGte        *int64  `json:"ActualTimeGte,omitempty" xml:"ActualTimeGte,omitempty"`
	ActualTimeLte        *int64  `json:"ActualTimeLte,omitempty" xml:"ActualTimeLte,omitempty"`
	CallDurationGte      *int64  `json:"CallDurationGte,omitempty" xml:"CallDurationGte,omitempty"`
	CallDurationLte      *int64  `json:"CallDurationLte,omitempty" xml:"CallDurationLte,omitempty"`
	CalledNumber         *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId           *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupNameQuery    *string `json:"JobGroupNameQuery,omitempty" xml:"JobGroupNameQuery,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobStatusStringList  *string `json:"JobStatusStringList,omitempty" xml:"JobStatusStringList,omitempty"`
	OtherId              *string `json:"OtherId,omitempty" xml:"OtherId,omitempty"`
	PageIndex            *int32  `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecordingDurationGte *int64  `json:"RecordingDurationGte,omitempty" xml:"RecordingDurationGte,omitempty"`
	RecordingDurationLte *int64  `json:"RecordingDurationLte,omitempty" xml:"RecordingDurationLte,omitempty"`
	ScriptNameQuery      *string `json:"ScriptNameQuery,omitempty" xml:"ScriptNameQuery,omitempty"`
	SortBy               *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	SortOrder            *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	TaskCreateTimeGte    *int64  `json:"TaskCreateTimeGte,omitempty" xml:"TaskCreateTimeGte,omitempty"`
	TaskCreateTimeLte    *int64  `json:"TaskCreateTimeLte,omitempty" xml:"TaskCreateTimeLte,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskStatusStringList *string `json:"TaskStatusStringList,omitempty" xml:"TaskStatusStringList,omitempty"`
	UserIdMatch          *string `json:"UserIdMatch,omitempty" xml:"UserIdMatch,omitempty"`
}

func (s SearchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTaskRequest) GoString() string {
	return s.String()
}

func (s *SearchTaskRequest) SetActualTimeGte(v int64) *SearchTaskRequest {
	s.ActualTimeGte = &v
	return s
}

func (s *SearchTaskRequest) SetActualTimeLte(v int64) *SearchTaskRequest {
	s.ActualTimeLte = &v
	return s
}

func (s *SearchTaskRequest) SetCallDurationGte(v int64) *SearchTaskRequest {
	s.CallDurationGte = &v
	return s
}

func (s *SearchTaskRequest) SetCallDurationLte(v int64) *SearchTaskRequest {
	s.CallDurationLte = &v
	return s
}

func (s *SearchTaskRequest) SetCalledNumber(v string) *SearchTaskRequest {
	s.CalledNumber = &v
	return s
}

func (s *SearchTaskRequest) SetInstanceId(v string) *SearchTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *SearchTaskRequest) SetJobGroupId(v string) *SearchTaskRequest {
	s.JobGroupId = &v
	return s
}

func (s *SearchTaskRequest) SetJobGroupNameQuery(v string) *SearchTaskRequest {
	s.JobGroupNameQuery = &v
	return s
}

func (s *SearchTaskRequest) SetJobId(v string) *SearchTaskRequest {
	s.JobId = &v
	return s
}

func (s *SearchTaskRequest) SetJobStatusStringList(v string) *SearchTaskRequest {
	s.JobStatusStringList = &v
	return s
}

func (s *SearchTaskRequest) SetOtherId(v string) *SearchTaskRequest {
	s.OtherId = &v
	return s
}

func (s *SearchTaskRequest) SetPageIndex(v int32) *SearchTaskRequest {
	s.PageIndex = &v
	return s
}

func (s *SearchTaskRequest) SetPageSize(v int32) *SearchTaskRequest {
	s.PageSize = &v
	return s
}

func (s *SearchTaskRequest) SetRecordingDurationGte(v int64) *SearchTaskRequest {
	s.RecordingDurationGte = &v
	return s
}

func (s *SearchTaskRequest) SetRecordingDurationLte(v int64) *SearchTaskRequest {
	s.RecordingDurationLte = &v
	return s
}

func (s *SearchTaskRequest) SetScriptNameQuery(v string) *SearchTaskRequest {
	s.ScriptNameQuery = &v
	return s
}

func (s *SearchTaskRequest) SetSortBy(v string) *SearchTaskRequest {
	s.SortBy = &v
	return s
}

func (s *SearchTaskRequest) SetSortOrder(v string) *SearchTaskRequest {
	s.SortOrder = &v
	return s
}

func (s *SearchTaskRequest) SetTaskCreateTimeGte(v int64) *SearchTaskRequest {
	s.TaskCreateTimeGte = &v
	return s
}

func (s *SearchTaskRequest) SetTaskCreateTimeLte(v int64) *SearchTaskRequest {
	s.TaskCreateTimeLte = &v
	return s
}

func (s *SearchTaskRequest) SetTaskId(v string) *SearchTaskRequest {
	s.TaskId = &v
	return s
}

func (s *SearchTaskRequest) SetTaskStatusStringList(v string) *SearchTaskRequest {
	s.TaskStatusStringList = &v
	return s
}

func (s *SearchTaskRequest) SetUserIdMatch(v string) *SearchTaskRequest {
	s.UserIdMatch = &v
	return s
}

type SearchTaskResponseBody struct {
	Code               *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode     *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message            *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PageIndex          *int32                                      `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageSize           *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SearchTaskInfoList []*SearchTaskResponseBodySearchTaskInfoList `json:"SearchTaskInfoList,omitempty" xml:"SearchTaskInfoList,omitempty" type:"Repeated"`
	Success            *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Total              *int64                                      `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTaskResponseBody) SetCode(v string) *SearchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *SearchTaskResponseBody) SetHttpStatusCode(v int32) *SearchTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SearchTaskResponseBody) SetMessage(v string) *SearchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *SearchTaskResponseBody) SetPageIndex(v int32) *SearchTaskResponseBody {
	s.PageIndex = &v
	return s
}

func (s *SearchTaskResponseBody) SetPageSize(v int32) *SearchTaskResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchTaskResponseBody) SetRequestId(v string) *SearchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchTaskResponseBody) SetSearchTaskInfoList(v []*SearchTaskResponseBodySearchTaskInfoList) *SearchTaskResponseBody {
	s.SearchTaskInfoList = v
	return s
}

func (s *SearchTaskResponseBody) SetSuccess(v bool) *SearchTaskResponseBody {
	s.Success = &v
	return s
}

func (s *SearchTaskResponseBody) SetTotal(v int64) *SearchTaskResponseBody {
	s.Total = &v
	return s
}

type SearchTaskResponseBodySearchTaskInfoList struct {
	ActualTime               *int64    `json:"ActualTime,omitempty" xml:"ActualTime,omitempty"`
	CallDuration             *int32    `json:"CallDuration,omitempty" xml:"CallDuration,omitempty"`
	CallDurationDisplay      *string   `json:"CallDurationDisplay,omitempty" xml:"CallDurationDisplay,omitempty"`
	CalledNumber             *string   `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	DialException            *string   `json:"DialException,omitempty" xml:"DialException,omitempty"`
	DialExceptionCodes       []*string `json:"DialExceptionCodes,omitempty" xml:"DialExceptionCodes,omitempty" type:"Repeated"`
	DialExceptionOld         *string   `json:"DialExceptionOld,omitempty" xml:"DialExceptionOld,omitempty"`
	HasAnswered              *bool     `json:"HasAnswered,omitempty" xml:"HasAnswered,omitempty"`
	HasHangUpByRejection     *bool     `json:"HasHangUpByRejection,omitempty" xml:"HasHangUpByRejection,omitempty"`
	HasLastPlaybackCompleted *bool     `json:"HasLastPlaybackCompleted,omitempty" xml:"HasLastPlaybackCompleted,omitempty"`
	HasReachedEndOfFlow      *bool     `json:"HasReachedEndOfFlow,omitempty" xml:"HasReachedEndOfFlow,omitempty"`
	InstanceId               *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId               *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobGroupName             *string   `json:"JobGroupName,omitempty" xml:"JobGroupName,omitempty"`
	JobId                    *string   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobStatus                *int32    `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	JobStatusName            *string   `json:"JobStatusName,omitempty" xml:"JobStatusName,omitempty"`
	JobStatusString          *string   `json:"JobStatusString,omitempty" xml:"JobStatusString,omitempty"`
	RecordingDuration        *int32    `json:"RecordingDuration,omitempty" xml:"RecordingDuration,omitempty"`
	ScriptName               *string   `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	TaskCreateTime           *int64    `json:"TaskCreateTime,omitempty" xml:"TaskCreateTime,omitempty"`
	TaskEndReason            *int32    `json:"TaskEndReason,omitempty" xml:"TaskEndReason,omitempty"`
	TaskId                   *string   `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskStatus               *int32    `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskStatusName           *string   `json:"TaskStatusName,omitempty" xml:"TaskStatusName,omitempty"`
	TaskStatusString         *string   `json:"TaskStatusString,omitempty" xml:"TaskStatusString,omitempty"`
	UserId                   *string   `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName                 *string   `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s SearchTaskResponseBodySearchTaskInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchTaskResponseBodySearchTaskInfoList) GoString() string {
	return s.String()
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetActualTime(v int64) *SearchTaskResponseBodySearchTaskInfoList {
	s.ActualTime = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetCallDuration(v int32) *SearchTaskResponseBodySearchTaskInfoList {
	s.CallDuration = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetCallDurationDisplay(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.CallDurationDisplay = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetCalledNumber(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.CalledNumber = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetDialException(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.DialException = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetDialExceptionCodes(v []*string) *SearchTaskResponseBodySearchTaskInfoList {
	s.DialExceptionCodes = v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetDialExceptionOld(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.DialExceptionOld = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetHasAnswered(v bool) *SearchTaskResponseBodySearchTaskInfoList {
	s.HasAnswered = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetHasHangUpByRejection(v bool) *SearchTaskResponseBodySearchTaskInfoList {
	s.HasHangUpByRejection = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetHasLastPlaybackCompleted(v bool) *SearchTaskResponseBodySearchTaskInfoList {
	s.HasLastPlaybackCompleted = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetHasReachedEndOfFlow(v bool) *SearchTaskResponseBodySearchTaskInfoList {
	s.HasReachedEndOfFlow = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetInstanceId(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.InstanceId = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetJobGroupId(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.JobGroupId = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetJobGroupName(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.JobGroupName = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetJobId(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.JobId = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetJobStatus(v int32) *SearchTaskResponseBodySearchTaskInfoList {
	s.JobStatus = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetJobStatusName(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.JobStatusName = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetJobStatusString(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.JobStatusString = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetRecordingDuration(v int32) *SearchTaskResponseBodySearchTaskInfoList {
	s.RecordingDuration = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetScriptName(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.ScriptName = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetTaskCreateTime(v int64) *SearchTaskResponseBodySearchTaskInfoList {
	s.TaskCreateTime = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetTaskEndReason(v int32) *SearchTaskResponseBodySearchTaskInfoList {
	s.TaskEndReason = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetTaskId(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.TaskId = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetTaskStatus(v int32) *SearchTaskResponseBodySearchTaskInfoList {
	s.TaskStatus = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetTaskStatusName(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.TaskStatusName = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetTaskStatusString(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.TaskStatusString = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetUserId(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.UserId = &v
	return s
}

func (s *SearchTaskResponseBodySearchTaskInfoList) SetUserName(v string) *SearchTaskResponseBodySearchTaskInfoList {
	s.UserName = &v
	return s
}

type SearchTaskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SearchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTaskResponse) GoString() string {
	return s.String()
}

func (s *SearchTaskResponse) SetHeaders(v map[string]*string) *SearchTaskResponse {
	s.Headers = v
	return s
}

func (s *SearchTaskResponse) SetStatusCode(v int32) *SearchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchTaskResponse) SetBody(v *SearchTaskResponseBody) *SearchTaskResponse {
	s.Body = v
	return s
}

type StartJobRequest struct {
	CallingNumber []*string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty" type:"Repeated"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId    *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobJson       *string   `json:"JobJson,omitempty" xml:"JobJson,omitempty"`
	ScenarioId    *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	ScriptId      *string   `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s StartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StartJobRequest) GoString() string {
	return s.String()
}

func (s *StartJobRequest) SetCallingNumber(v []*string) *StartJobRequest {
	s.CallingNumber = v
	return s
}

func (s *StartJobRequest) SetInstanceId(v string) *StartJobRequest {
	s.InstanceId = &v
	return s
}

func (s *StartJobRequest) SetJobGroupId(v string) *StartJobRequest {
	s.JobGroupId = &v
	return s
}

func (s *StartJobRequest) SetJobJson(v string) *StartJobRequest {
	s.JobJson = &v
	return s
}

func (s *StartJobRequest) SetScenarioId(v string) *StartJobRequest {
	s.ScenarioId = &v
	return s
}

func (s *StartJobRequest) SetScriptId(v string) *StartJobRequest {
	s.ScriptId = &v
	return s
}

type StartJobResponseBody struct {
	CallIds        []*StartJobResponseBodyCallIds `json:"CallIds,omitempty" xml:"CallIds,omitempty" type:"Repeated"`
	Code           *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                          `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskIds        []*StartJobResponseBodyTaskIds `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
}

func (s StartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartJobResponseBody) GoString() string {
	return s.String()
}

func (s *StartJobResponseBody) SetCallIds(v []*StartJobResponseBodyCallIds) *StartJobResponseBody {
	s.CallIds = v
	return s
}

func (s *StartJobResponseBody) SetCode(v string) *StartJobResponseBody {
	s.Code = &v
	return s
}

func (s *StartJobResponseBody) SetHttpStatusCode(v int32) *StartJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartJobResponseBody) SetMessage(v string) *StartJobResponseBody {
	s.Message = &v
	return s
}

func (s *StartJobResponseBody) SetRequestId(v string) *StartJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartJobResponseBody) SetSuccess(v bool) *StartJobResponseBody {
	s.Success = &v
	return s
}

func (s *StartJobResponseBody) SetTaskIds(v []*StartJobResponseBodyTaskIds) *StartJobResponseBody {
	s.TaskIds = v
	return s
}

type StartJobResponseBodyCallIds struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s StartJobResponseBodyCallIds) String() string {
	return tea.Prettify(s)
}

func (s StartJobResponseBodyCallIds) GoString() string {
	return s.String()
}

func (s *StartJobResponseBodyCallIds) SetKey(v string) *StartJobResponseBodyCallIds {
	s.Key = &v
	return s
}

func (s *StartJobResponseBodyCallIds) SetValue(v string) *StartJobResponseBodyCallIds {
	s.Value = &v
	return s
}

type StartJobResponseBodyTaskIds struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s StartJobResponseBodyTaskIds) String() string {
	return tea.Prettify(s)
}

func (s StartJobResponseBodyTaskIds) GoString() string {
	return s.String()
}

func (s *StartJobResponseBodyTaskIds) SetKey(v string) *StartJobResponseBodyTaskIds {
	s.Key = &v
	return s
}

func (s *StartJobResponseBodyTaskIds) SetValue(v string) *StartJobResponseBodyTaskIds {
	s.Value = &v
	return s
}

type StartJobResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StartJobResponse) GoString() string {
	return s.String()
}

func (s *StartJobResponse) SetHeaders(v map[string]*string) *StartJobResponse {
	s.Headers = v
	return s
}

func (s *StartJobResponse) SetStatusCode(v int32) *StartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StartJobResponse) SetBody(v *StartJobResponseBody) *StartJobResponse {
	s.Body = v
	return s
}

type SubmitBatchJobsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId *string `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
}

func (s SubmitBatchJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchJobsRequest) GoString() string {
	return s.String()
}

func (s *SubmitBatchJobsRequest) SetInstanceId(v string) *SubmitBatchJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *SubmitBatchJobsRequest) SetJobGroupId(v string) *SubmitBatchJobsRequest {
	s.JobGroupId = &v
	return s
}

type SubmitBatchJobsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitBatchJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitBatchJobsResponseBody) SetCode(v string) *SubmitBatchJobsResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitBatchJobsResponseBody) SetHttpStatusCode(v int32) *SubmitBatchJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitBatchJobsResponseBody) SetMessage(v string) *SubmitBatchJobsResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitBatchJobsResponseBody) SetRequestId(v string) *SubmitBatchJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitBatchJobsResponseBody) SetSuccess(v bool) *SubmitBatchJobsResponseBody {
	s.Success = &v
	return s
}

type SubmitBatchJobsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitBatchJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitBatchJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchJobsResponse) GoString() string {
	return s.String()
}

func (s *SubmitBatchJobsResponse) SetHeaders(v map[string]*string) *SubmitBatchJobsResponse {
	s.Headers = v
	return s
}

func (s *SubmitBatchJobsResponse) SetStatusCode(v int32) *SubmitBatchJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitBatchJobsResponse) SetBody(v *SubmitBatchJobsResponseBody) *SubmitBatchJobsResponse {
	s.Body = v
	return s
}

type SubmitRecordingRequest struct {
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MergedRecording   *string `json:"MergedRecording,omitempty" xml:"MergedRecording,omitempty"`
	ResourceRecording *string `json:"ResourceRecording,omitempty" xml:"ResourceRecording,omitempty"`
	TaskId            *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SubmitRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitRecordingRequest) GoString() string {
	return s.String()
}

func (s *SubmitRecordingRequest) SetInstanceId(v string) *SubmitRecordingRequest {
	s.InstanceId = &v
	return s
}

func (s *SubmitRecordingRequest) SetMergedRecording(v string) *SubmitRecordingRequest {
	s.MergedRecording = &v
	return s
}

func (s *SubmitRecordingRequest) SetResourceRecording(v string) *SubmitRecordingRequest {
	s.ResourceRecording = &v
	return s
}

func (s *SubmitRecordingRequest) SetTaskId(v string) *SubmitRecordingRequest {
	s.TaskId = &v
	return s
}

type SubmitRecordingResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitRecordingResponseBody) SetCode(v string) *SubmitRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitRecordingResponseBody) SetHttpStatusCode(v int32) *SubmitRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitRecordingResponseBody) SetMessage(v string) *SubmitRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitRecordingResponseBody) SetRequestId(v string) *SubmitRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitRecordingResponseBody) SetSuccess(v bool) *SubmitRecordingResponseBody {
	s.Success = &v
	return s
}

type SubmitRecordingResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitRecordingResponse) GoString() string {
	return s.String()
}

func (s *SubmitRecordingResponse) SetHeaders(v map[string]*string) *SubmitRecordingResponse {
	s.Headers = v
	return s
}

func (s *SubmitRecordingResponse) SetStatusCode(v int32) *SubmitRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitRecordingResponse) SetBody(v *SubmitRecordingResponseBody) *SubmitRecordingResponse {
	s.Body = v
	return s
}

type SubmitScriptReviewRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId    *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s SubmitScriptReviewRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitScriptReviewRequest) GoString() string {
	return s.String()
}

func (s *SubmitScriptReviewRequest) SetDescription(v string) *SubmitScriptReviewRequest {
	s.Description = &v
	return s
}

func (s *SubmitScriptReviewRequest) SetInstanceId(v string) *SubmitScriptReviewRequest {
	s.InstanceId = &v
	return s
}

func (s *SubmitScriptReviewRequest) SetScriptId(v string) *SubmitScriptReviewRequest {
	s.ScriptId = &v
	return s
}

type SubmitScriptReviewResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitScriptReviewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitScriptReviewResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitScriptReviewResponseBody) SetCode(v string) *SubmitScriptReviewResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitScriptReviewResponseBody) SetHttpStatusCode(v int32) *SubmitScriptReviewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitScriptReviewResponseBody) SetMessage(v string) *SubmitScriptReviewResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitScriptReviewResponseBody) SetRequestId(v string) *SubmitScriptReviewResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitScriptReviewResponseBody) SetSuccess(v bool) *SubmitScriptReviewResponseBody {
	s.Success = &v
	return s
}

type SubmitScriptReviewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitScriptReviewResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitScriptReviewResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitScriptReviewResponse) GoString() string {
	return s.String()
}

func (s *SubmitScriptReviewResponse) SetHeaders(v map[string]*string) *SubmitScriptReviewResponse {
	s.Headers = v
	return s
}

func (s *SubmitScriptReviewResponse) SetStatusCode(v int32) *SubmitScriptReviewResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitScriptReviewResponse) SetBody(v *SubmitScriptReviewResponseBody) *SubmitScriptReviewResponse {
	s.Body = v
	return s
}

type SuspendCallRequest struct {
	CalledNumbers []*string `json:"CalledNumbers,omitempty" xml:"CalledNumbers,omitempty" type:"Repeated"`
	GroupId       *string   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s SuspendCallRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendCallRequest) GoString() string {
	return s.String()
}

func (s *SuspendCallRequest) SetCalledNumbers(v []*string) *SuspendCallRequest {
	s.CalledNumbers = v
	return s
}

func (s *SuspendCallRequest) SetGroupId(v string) *SuspendCallRequest {
	s.GroupId = &v
	return s
}

func (s *SuspendCallRequest) SetInstanceId(v string) *SuspendCallRequest {
	s.InstanceId = &v
	return s
}

type SuspendCallResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendCallResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendCallResponseBody) SetCode(v string) *SuspendCallResponseBody {
	s.Code = &v
	return s
}

func (s *SuspendCallResponseBody) SetHttpStatusCode(v int32) *SuspendCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SuspendCallResponseBody) SetMessage(v string) *SuspendCallResponseBody {
	s.Message = &v
	return s
}

func (s *SuspendCallResponseBody) SetRequestId(v string) *SuspendCallResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendCallResponseBody) SetSuccess(v bool) *SuspendCallResponseBody {
	s.Success = &v
	return s
}

type SuspendCallResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SuspendCallResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendCallResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendCallResponse) GoString() string {
	return s.String()
}

func (s *SuspendCallResponse) SetHeaders(v map[string]*string) *SuspendCallResponse {
	s.Headers = v
	return s
}

func (s *SuspendCallResponse) SetStatusCode(v int32) *SuspendCallResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendCallResponse) SetBody(v *SuspendCallResponseBody) *SuspendCallResponse {
	s.Body = v
	return s
}

type SuspendCallWithFileRequest struct {
	FilePath   *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s SuspendCallWithFileRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendCallWithFileRequest) GoString() string {
	return s.String()
}

func (s *SuspendCallWithFileRequest) SetFilePath(v string) *SuspendCallWithFileRequest {
	s.FilePath = &v
	return s
}

func (s *SuspendCallWithFileRequest) SetGroupId(v string) *SuspendCallWithFileRequest {
	s.GroupId = &v
	return s
}

func (s *SuspendCallWithFileRequest) SetInstanceId(v string) *SuspendCallWithFileRequest {
	s.InstanceId = &v
	return s
}

type SuspendCallWithFileResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendCallWithFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendCallWithFileResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendCallWithFileResponseBody) SetCode(v string) *SuspendCallWithFileResponseBody {
	s.Code = &v
	return s
}

func (s *SuspendCallWithFileResponseBody) SetHttpStatusCode(v int32) *SuspendCallWithFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SuspendCallWithFileResponseBody) SetMessage(v string) *SuspendCallWithFileResponseBody {
	s.Message = &v
	return s
}

func (s *SuspendCallWithFileResponseBody) SetRequestId(v string) *SuspendCallWithFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendCallWithFileResponseBody) SetSuccess(v bool) *SuspendCallWithFileResponseBody {
	s.Success = &v
	return s
}

type SuspendCallWithFileResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SuspendCallWithFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendCallWithFileResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendCallWithFileResponse) GoString() string {
	return s.String()
}

func (s *SuspendCallWithFileResponse) SetHeaders(v map[string]*string) *SuspendCallWithFileResponse {
	s.Headers = v
	return s
}

func (s *SuspendCallWithFileResponse) SetStatusCode(v int32) *SuspendCallWithFileResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendCallWithFileResponse) SetBody(v *SuspendCallWithFileResponseBody) *SuspendCallWithFileResponse {
	s.Body = v
	return s
}

type SuspendJobsRequest struct {
	All            *bool     `json:"All,omitempty" xml:"All,omitempty"`
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobGroupId     *string   `json:"JobGroupId,omitempty" xml:"JobGroupId,omitempty"`
	JobId          []*string `json:"JobId,omitempty" xml:"JobId,omitempty" type:"Repeated"`
	JobReferenceId []*string `json:"JobReferenceId,omitempty" xml:"JobReferenceId,omitempty" type:"Repeated"`
	ScenarioId     *string   `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
}

func (s SuspendJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendJobsRequest) GoString() string {
	return s.String()
}

func (s *SuspendJobsRequest) SetAll(v bool) *SuspendJobsRequest {
	s.All = &v
	return s
}

func (s *SuspendJobsRequest) SetInstanceId(v string) *SuspendJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *SuspendJobsRequest) SetJobGroupId(v string) *SuspendJobsRequest {
	s.JobGroupId = &v
	return s
}

func (s *SuspendJobsRequest) SetJobId(v []*string) *SuspendJobsRequest {
	s.JobId = v
	return s
}

func (s *SuspendJobsRequest) SetJobReferenceId(v []*string) *SuspendJobsRequest {
	s.JobReferenceId = v
	return s
}

func (s *SuspendJobsRequest) SetScenarioId(v string) *SuspendJobsRequest {
	s.ScenarioId = &v
	return s
}

type SuspendJobsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendJobsResponseBody) SetCode(v string) *SuspendJobsResponseBody {
	s.Code = &v
	return s
}

func (s *SuspendJobsResponseBody) SetHttpStatusCode(v int32) *SuspendJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SuspendJobsResponseBody) SetMessage(v string) *SuspendJobsResponseBody {
	s.Message = &v
	return s
}

func (s *SuspendJobsResponseBody) SetRequestId(v string) *SuspendJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendJobsResponseBody) SetSuccess(v bool) *SuspendJobsResponseBody {
	s.Success = &v
	return s
}

type SuspendJobsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SuspendJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendJobsResponse) GoString() string {
	return s.String()
}

func (s *SuspendJobsResponse) SetHeaders(v map[string]*string) *SuspendJobsResponse {
	s.Headers = v
	return s
}

func (s *SuspendJobsResponse) SetStatusCode(v int32) *SuspendJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendJobsResponse) SetBody(v *SuspendJobsResponseBody) *SuspendJobsResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	RegionId     *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId   []*string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceType *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetCode(v string) *TagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *TagResourcesResponseBody) SetHttpStatusCode(v int32) *TagResourcesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TagResourcesResponseBody) SetMessage(v string) *TagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesResponseBody) SetSuccess(v bool) *TagResourcesResponseBody {
	s.Success = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TaskPreparingRequest struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceOwnerId *int64  `json:"InstanceOwnerId,omitempty" xml:"InstanceOwnerId,omitempty"`
	JobId           *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s TaskPreparingRequest) String() string {
	return tea.Prettify(s)
}

func (s TaskPreparingRequest) GoString() string {
	return s.String()
}

func (s *TaskPreparingRequest) SetInstanceId(v string) *TaskPreparingRequest {
	s.InstanceId = &v
	return s
}

func (s *TaskPreparingRequest) SetInstanceOwnerId(v int64) *TaskPreparingRequest {
	s.InstanceOwnerId = &v
	return s
}

func (s *TaskPreparingRequest) SetJobId(v string) *TaskPreparingRequest {
	s.JobId = &v
	return s
}

type TaskPreparingResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s TaskPreparingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TaskPreparingResponseBody) GoString() string {
	return s.String()
}

func (s *TaskPreparingResponseBody) SetCode(v string) *TaskPreparingResponseBody {
	s.Code = &v
	return s
}

func (s *TaskPreparingResponseBody) SetHttpStatusCode(v int32) *TaskPreparingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TaskPreparingResponseBody) SetMessage(v string) *TaskPreparingResponseBody {
	s.Message = &v
	return s
}

func (s *TaskPreparingResponseBody) SetRequestId(v string) *TaskPreparingResponseBody {
	s.RequestId = &v
	return s
}

func (s *TaskPreparingResponseBody) SetSuccess(v bool) *TaskPreparingResponseBody {
	s.Success = &v
	return s
}

func (s *TaskPreparingResponseBody) SetTaskId(v string) *TaskPreparingResponseBody {
	s.TaskId = &v
	return s
}

type TaskPreparingResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TaskPreparingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TaskPreparingResponse) String() string {
	return tea.Prettify(s)
}

func (s TaskPreparingResponse) GoString() string {
	return s.String()
}

func (s *TaskPreparingResponse) SetHeaders(v map[string]*string) *TaskPreparingResponse {
	s.Headers = v
	return s
}

func (s *TaskPreparingResponse) SetStatusCode(v int32) *TaskPreparingResponse {
	s.StatusCode = &v
	return s
}

func (s *TaskPreparingResponse) SetBody(v *TaskPreparingResponseBody) *TaskPreparingResponse {
	s.Body = v
	return s
}

type TerminateCallRequest struct {
	CallId     *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s TerminateCallRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateCallRequest) GoString() string {
	return s.String()
}

func (s *TerminateCallRequest) SetCallId(v string) *TerminateCallRequest {
	s.CallId = &v
	return s
}

func (s *TerminateCallRequest) SetInstanceId(v string) *TerminateCallRequest {
	s.InstanceId = &v
	return s
}

type TerminateCallResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TerminateCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TerminateCallResponseBody) GoString() string {
	return s.String()
}

func (s *TerminateCallResponseBody) SetCode(v string) *TerminateCallResponseBody {
	s.Code = &v
	return s
}

func (s *TerminateCallResponseBody) SetHttpStatusCode(v int32) *TerminateCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TerminateCallResponseBody) SetMessage(v string) *TerminateCallResponseBody {
	s.Message = &v
	return s
}

func (s *TerminateCallResponseBody) SetRequestId(v string) *TerminateCallResponseBody {
	s.RequestId = &v
	return s
}

func (s *TerminateCallResponseBody) SetSuccess(v bool) *TerminateCallResponseBody {
	s.Success = &v
	return s
}

type TerminateCallResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TerminateCallResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TerminateCallResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateCallResponse) GoString() string {
	return s.String()
}

func (s *TerminateCallResponse) SetHeaders(v map[string]*string) *TerminateCallResponse {
	s.Headers = v
	return s
}

func (s *TerminateCallResponse) SetStatusCode(v int32) *TerminateCallResponse {
	s.StatusCode = &v
	return s
}

func (s *TerminateCallResponse) SetBody(v *TerminateCallResponseBody) *TerminateCallResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	All          *bool     `json:"All,omitempty" xml:"All,omitempty"`
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId   []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetCode(v string) *UntagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *UntagResourcesResponseBody) SetHttpStatusCode(v int32) *UntagResourcesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UntagResourcesResponseBody) SetMessage(v string) *UntagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesResponseBody) SetSuccess(v bool) *UntagResourcesResponseBody {
	s.Success = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UploadScriptRecordingRequest struct {
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	FileId     *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName   *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s UploadScriptRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadScriptRecordingRequest) GoString() string {
	return s.String()
}

func (s *UploadScriptRecordingRequest) SetContent(v string) *UploadScriptRecordingRequest {
	s.Content = &v
	return s
}

func (s *UploadScriptRecordingRequest) SetFileId(v string) *UploadScriptRecordingRequest {
	s.FileId = &v
	return s
}

func (s *UploadScriptRecordingRequest) SetFileName(v string) *UploadScriptRecordingRequest {
	s.FileName = &v
	return s
}

func (s *UploadScriptRecordingRequest) SetInstanceId(v string) *UploadScriptRecordingRequest {
	s.InstanceId = &v
	return s
}

func (s *UploadScriptRecordingRequest) SetScriptId(v string) *UploadScriptRecordingRequest {
	s.ScriptId = &v
	return s
}

type UploadScriptRecordingResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Uuid           *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s UploadScriptRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadScriptRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *UploadScriptRecordingResponseBody) SetCode(v string) *UploadScriptRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *UploadScriptRecordingResponseBody) SetHttpStatusCode(v int32) *UploadScriptRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UploadScriptRecordingResponseBody) SetMessage(v string) *UploadScriptRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *UploadScriptRecordingResponseBody) SetRequestId(v string) *UploadScriptRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadScriptRecordingResponseBody) SetSuccess(v bool) *UploadScriptRecordingResponseBody {
	s.Success = &v
	return s
}

func (s *UploadScriptRecordingResponseBody) SetUuid(v string) *UploadScriptRecordingResponseBody {
	s.Uuid = &v
	return s
}

type UploadScriptRecordingResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadScriptRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadScriptRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadScriptRecordingResponse) GoString() string {
	return s.String()
}

func (s *UploadScriptRecordingResponse) SetHeaders(v map[string]*string) *UploadScriptRecordingResponse {
	s.Headers = v
	return s
}

func (s *UploadScriptRecordingResponse) SetStatusCode(v int32) *UploadScriptRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadScriptRecordingResponse) SetBody(v *UploadScriptRecordingResponseBody) *UploadScriptRecordingResponse {
	s.Body = v
	return s
}

type WithdrawScriptReviewRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ScriptId   *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
}

func (s WithdrawScriptReviewRequest) String() string {
	return tea.Prettify(s)
}

func (s WithdrawScriptReviewRequest) GoString() string {
	return s.String()
}

func (s *WithdrawScriptReviewRequest) SetInstanceId(v string) *WithdrawScriptReviewRequest {
	s.InstanceId = &v
	return s
}

func (s *WithdrawScriptReviewRequest) SetScriptId(v string) *WithdrawScriptReviewRequest {
	s.ScriptId = &v
	return s
}

type WithdrawScriptReviewResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Script         *WithdrawScriptReviewResponseBodyScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WithdrawScriptReviewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WithdrawScriptReviewResponseBody) GoString() string {
	return s.String()
}

func (s *WithdrawScriptReviewResponseBody) SetCode(v string) *WithdrawScriptReviewResponseBody {
	s.Code = &v
	return s
}

func (s *WithdrawScriptReviewResponseBody) SetHttpStatusCode(v int32) *WithdrawScriptReviewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *WithdrawScriptReviewResponseBody) SetMessage(v string) *WithdrawScriptReviewResponseBody {
	s.Message = &v
	return s
}

func (s *WithdrawScriptReviewResponseBody) SetRequestId(v string) *WithdrawScriptReviewResponseBody {
	s.RequestId = &v
	return s
}

func (s *WithdrawScriptReviewResponseBody) SetScript(v *WithdrawScriptReviewResponseBodyScript) *WithdrawScriptReviewResponseBody {
	s.Script = v
	return s
}

func (s *WithdrawScriptReviewResponseBody) SetSuccess(v bool) *WithdrawScriptReviewResponseBody {
	s.Success = &v
	return s
}

type WithdrawScriptReviewResponseBodyScript struct {
	DebugStatus       *string `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	Industry          *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDebugDrafted    *bool   `json:"IsDebugDrafted,omitempty" xml:"IsDebugDrafted,omitempty"`
	IsDrafted         *bool   `json:"IsDrafted,omitempty" xml:"IsDrafted,omitempty"`
	Scene             *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	ScriptDescription *string `json:"ScriptDescription,omitempty" xml:"ScriptDescription,omitempty"`
	ScriptId          *string `json:"ScriptId,omitempty" xml:"ScriptId,omitempty"`
	ScriptName        *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdateTime        *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s WithdrawScriptReviewResponseBodyScript) String() string {
	return tea.Prettify(s)
}

func (s WithdrawScriptReviewResponseBodyScript) GoString() string {
	return s.String()
}

func (s *WithdrawScriptReviewResponseBodyScript) SetDebugStatus(v string) *WithdrawScriptReviewResponseBodyScript {
	s.DebugStatus = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetIndustry(v string) *WithdrawScriptReviewResponseBodyScript {
	s.Industry = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetIsDebugDrafted(v bool) *WithdrawScriptReviewResponseBodyScript {
	s.IsDebugDrafted = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetIsDrafted(v bool) *WithdrawScriptReviewResponseBodyScript {
	s.IsDrafted = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetScene(v string) *WithdrawScriptReviewResponseBodyScript {
	s.Scene = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetScriptDescription(v string) *WithdrawScriptReviewResponseBodyScript {
	s.ScriptDescription = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetScriptId(v string) *WithdrawScriptReviewResponseBodyScript {
	s.ScriptId = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetScriptName(v string) *WithdrawScriptReviewResponseBodyScript {
	s.ScriptName = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetStatus(v string) *WithdrawScriptReviewResponseBodyScript {
	s.Status = &v
	return s
}

func (s *WithdrawScriptReviewResponseBodyScript) SetUpdateTime(v int64) *WithdrawScriptReviewResponseBodyScript {
	s.UpdateTime = &v
	return s
}

type WithdrawScriptReviewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *WithdrawScriptReviewResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s WithdrawScriptReviewResponse) String() string {
	return tea.Prettify(s)
}

func (s WithdrawScriptReviewResponse) GoString() string {
	return s.String()
}

func (s *WithdrawScriptReviewResponse) SetHeaders(v map[string]*string) *WithdrawScriptReviewResponse {
	s.Headers = v
	return s
}

func (s *WithdrawScriptReviewResponse) SetStatusCode(v int32) *WithdrawScriptReviewResponse {
	s.StatusCode = &v
	return s
}

func (s *WithdrawScriptReviewResponse) SetBody(v *WithdrawScriptReviewResponseBody) *WithdrawScriptReviewResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("outboundbot"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyNumberDistrictInfoParsingResultWithOptions(request *ApplyNumberDistrictInfoParsingResultRequest, runtime *util.RuntimeOptions) (_result *ApplyNumberDistrictInfoParsingResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyNumberDistrictInfoParsingResult"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyNumberDistrictInfoParsingResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyNumberDistrictInfoParsingResult(request *ApplyNumberDistrictInfoParsingResultRequest) (_result *ApplyNumberDistrictInfoParsingResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyNumberDistrictInfoParsingResultResponse{}
	_body, _err := client.ApplyNumberDistrictInfoParsingResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssignJobsWithOptions(request *AssignJobsRequest, runtime *util.RuntimeOptions) (_result *AssignJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsAsynchrony)) {
		query["IsAsynchrony"] = request.IsAsynchrony
	}

	if !tea.BoolValue(util.IsUnset(request.JobDataParsingTaskId)) {
		query["JobDataParsingTaskId"] = request.JobDataParsingTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobsJson)) {
		query["JobsJson"] = request.JobsJson
	}

	if !tea.BoolValue(util.IsUnset(request.RosterType)) {
		query["RosterType"] = request.RosterType
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyJson)) {
		query["StrategyJson"] = request.StrategyJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssignJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssignJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssignJobs(request *AssignJobsRequest) (_result *AssignJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignJobsResponse{}
	_body, _err := client.AssignJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelJobsWithOptions(request *CancelJobsRequest, runtime *util.RuntimeOptions) (_result *CancelJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobReferenceId)) {
		query["JobReferenceId"] = request.JobReferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelJobs(request *CancelJobsRequest) (_result *CancelJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelJobsResponse{}
	_body, _err := client.CancelJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeResourceGroupWithOptions(request *ChangeResourceGroupRequest, runtime *util.RuntimeOptions) (_result *ChangeResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NewResourceGroupId)) {
		query["NewResourceGroupId"] = request.NewResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeResourceGroup"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeResourceGroup(request *ChangeResourceGroupRequest) (_result *ChangeResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeResourceGroupResponse{}
	_body, _err := client.ChangeResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBatchJobsWithOptions(request *CreateBatchJobsRequest, runtime *util.RuntimeOptions) (_result *CreateBatchJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BatchJobDescription)) {
		query["BatchJobDescription"] = request.BatchJobDescription
	}

	if !tea.BoolValue(util.IsUnset(request.BatchJobName)) {
		query["BatchJobName"] = request.BatchJobName
	}

	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobFilePath)) {
		query["JobFilePath"] = request.JobFilePath
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyJson)) {
		query["StrategyJson"] = request.StrategyJson
	}

	if !tea.BoolValue(util.IsUnset(request.Submitted)) {
		query["Submitted"] = request.Submitted
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBatchJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBatchJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBatchJobs(request *CreateBatchJobsRequest) (_result *CreateBatchJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBatchJobsResponse{}
	_body, _err := client.CreateBatchJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBatchRepeatJobWithOptions(request *CreateBatchRepeatJobRequest, runtime *util.RuntimeOptions) (_result *CreateBatchRepeatJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FilterStatus)) {
		query["FilterStatus"] = request.FilterStatus
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MinConcurrency)) {
		query["MinConcurrency"] = request.MinConcurrency
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RecallStrategyJson)) {
		query["RecallStrategyJson"] = request.RecallStrategyJson
	}

	if !tea.BoolValue(util.IsUnset(request.RingingDuration)) {
		query["RingingDuration"] = request.RingingDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceGroupId)) {
		query["SourceGroupId"] = request.SourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyJson)) {
		query["StrategyJson"] = request.StrategyJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBatchRepeatJob"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBatchRepeatJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBatchRepeatJob(request *CreateBatchRepeatJobRequest) (_result *CreateBatchRepeatJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBatchRepeatJobResponse{}
	_body, _err := client.CreateBatchRepeatJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDialogueFlowWithOptions(request *CreateDialogueFlowRequest, runtime *util.RuntimeOptions) (_result *CreateDialogueFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DialogueFlowType)) {
		query["DialogueFlowType"] = request.DialogueFlowType
	}

	if !tea.BoolValue(util.IsUnset(request.DialogueName)) {
		query["DialogueName"] = request.DialogueName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDialogueFlow"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDialogueFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDialogueFlow(request *CreateDialogueFlowRequest) (_result *CreateDialogueFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDialogueFlowResponse{}
	_body, _err := client.CreateDialogueFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDownloadUrlWithOptions(request *CreateDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *CreateDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDownloadUrl"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDownloadUrl(request *CreateDownloadUrlRequest) (_result *CreateDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDownloadUrlResponse{}
	_body, _err := client.CreateDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateGlobalQuestionWithOptions(request *CreateGlobalQuestionRequest, runtime *util.RuntimeOptions) (_result *CreateGlobalQuestionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Answers)) {
		query["Answers"] = request.Answers
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalQuestionName)) {
		query["GlobalQuestionName"] = request.GlobalQuestionName
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalQuestionType)) {
		query["GlobalQuestionType"] = request.GlobalQuestionType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Questions)) {
		query["Questions"] = request.Questions
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGlobalQuestion"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGlobalQuestionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateGlobalQuestion(request *CreateGlobalQuestionRequest) (_result *CreateGlobalQuestionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGlobalQuestionResponse{}
	_body, _err := client.CreateGlobalQuestionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceDescription)) {
		query["InstanceDescription"] = request.InstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.MaxConcurrentConversation)) {
		query["MaxConcurrentConversation"] = request.MaxConcurrentConversation
	}

	if !tea.BoolValue(util.IsUnset(request.NluServiceType)) {
		query["NluServiceType"] = request.NluServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceBindNumberWithOptions(request *CreateInstanceBindNumberRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceBindNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceList)) {
		query["InstanceList"] = request.InstanceList
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstanceBindNumber"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceBindNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstanceBindNumber(request *CreateInstanceBindNumberRequest) (_result *CreateInstanceBindNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceBindNumberResponse{}
	_body, _err := client.CreateInstanceBindNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIntentWithOptions(request *CreateIntentRequest, runtime *util.RuntimeOptions) (_result *CreateIntentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IntentDescription)) {
		query["IntentDescription"] = request.IntentDescription
	}

	if !tea.BoolValue(util.IsUnset(request.IntentName)) {
		query["IntentName"] = request.IntentName
	}

	if !tea.BoolValue(util.IsUnset(request.Keywords)) {
		query["Keywords"] = request.Keywords
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.Utterances)) {
		query["Utterances"] = request.Utterances
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIntent"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIntentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIntent(request *CreateIntentRequest) (_result *CreateIntentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIntentResponse{}
	_body, _err := client.CreateIntentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateJobDataParsingTaskWithOptions(request *CreateJobDataParsingTaskRequest, runtime *util.RuntimeOptions) (_result *CreateJobDataParsingTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobFilePath)) {
		query["JobFilePath"] = request.JobFilePath
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateJobDataParsingTask"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateJobDataParsingTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateJobDataParsingTask(request *CreateJobDataParsingTaskRequest) (_result *CreateJobDataParsingTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJobDataParsingTaskResponse{}
	_body, _err := client.CreateJobDataParsingTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateJobGroupWithOptions(request *CreateJobGroupRequest, runtime *util.RuntimeOptions) (_result *CreateJobGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupDescription)) {
		query["JobGroupDescription"] = request.JobGroupDescription
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupName)) {
		query["JobGroupName"] = request.JobGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.MinConcurrency)) {
		query["MinConcurrency"] = request.MinConcurrency
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RecallStrategyJson)) {
		query["RecallStrategyJson"] = request.RecallStrategyJson
	}

	if !tea.BoolValue(util.IsUnset(request.RingingDuration)) {
		query["RingingDuration"] = request.RingingDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyJson)) {
		query["StrategyJson"] = request.StrategyJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateJobGroup"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateJobGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateJobGroup(request *CreateJobGroupRequest) (_result *CreateJobGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJobGroupResponse{}
	_body, _err := client.CreateJobGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateJobGroupExportTaskWithOptions(request *CreateJobGroupExportTaskRequest, runtime *util.RuntimeOptions) (_result *CreateJobGroupExportTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Option)) {
		query["Option"] = request.Option
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateJobGroupExportTask"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateJobGroupExportTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateJobGroupExportTask(request *CreateJobGroupExportTaskRequest) (_result *CreateJobGroupExportTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJobGroupExportTaskResponse{}
	_body, _err := client.CreateJobGroupExportTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNumberDistrictInfoDownloadUrlWithOptions(request *CreateNumberDistrictInfoDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *CreateNumberDistrictInfoDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNumberDistrictInfoDownloadUrl"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNumberDistrictInfoDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNumberDistrictInfoDownloadUrl(request *CreateNumberDistrictInfoDownloadUrlRequest) (_result *CreateNumberDistrictInfoDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNumberDistrictInfoDownloadUrlResponse{}
	_body, _err := client.CreateNumberDistrictInfoDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNumberDistrictInfoParsingTaskWithOptions(request *CreateNumberDistrictInfoParsingTaskRequest, runtime *util.RuntimeOptions) (_result *CreateNumberDistrictInfoParsingTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.FileSize)) {
		query["FileSize"] = request.FileSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNumberDistrictInfoParsingTask"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNumberDistrictInfoParsingTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNumberDistrictInfoParsingTask(request *CreateNumberDistrictInfoParsingTaskRequest) (_result *CreateNumberDistrictInfoParsingTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNumberDistrictInfoParsingTaskResponse{}
	_body, _err := client.CreateNumberDistrictInfoParsingTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOutboundCallNumberWithOptions(request *CreateOutboundCallNumberRequest, runtime *util.RuntimeOptions) (_result *CreateOutboundCallNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.RateLimitCount)) {
		query["RateLimitCount"] = request.RateLimitCount
	}

	if !tea.BoolValue(util.IsUnset(request.RateLimitPeriod)) {
		query["RateLimitPeriod"] = request.RateLimitPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOutboundCallNumber"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOutboundCallNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOutboundCallNumber(request *CreateOutboundCallNumberRequest) (_result *CreateOutboundCallNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOutboundCallNumberResponse{}
	_body, _err := client.CreateOutboundCallNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateScriptWithOptions(request *CreateScriptRequest, runtime *util.RuntimeOptions) (_result *CreateScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AsrConfig)) {
		query["AsrConfig"] = request.AsrConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ChatbotId)) {
		query["ChatbotId"] = request.ChatbotId
	}

	if !tea.BoolValue(util.IsUnset(request.EmotionEnable)) {
		query["EmotionEnable"] = request.EmotionEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Industry)) {
		query["Industry"] = request.Industry
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LongWaitEnable)) {
		query["LongWaitEnable"] = request.LongWaitEnable
	}

	if !tea.BoolValue(util.IsUnset(request.MiniPlaybackEnable)) {
		query["MiniPlaybackEnable"] = request.MiniPlaybackEnable
	}

	if !tea.BoolValue(util.IsUnset(request.NewBargeInEnable)) {
		query["NewBargeInEnable"] = request.NewBargeInEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["Scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptContent)) {
		query["ScriptContent"] = request.ScriptContent
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptDescription)) {
		query["ScriptDescription"] = request.ScriptDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptName)) {
		query["ScriptName"] = request.ScriptName
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptWaveform)) {
		query["ScriptWaveform"] = request.ScriptWaveform
	}

	if !tea.BoolValue(util.IsUnset(request.TtsConfig)) {
		query["TtsConfig"] = request.TtsConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateScript(request *CreateScriptRequest) (_result *CreateScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateScriptResponse{}
	_body, _err := client.CreateScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateScriptWaveformWithOptions(request *CreateScriptWaveformRequest, runtime *util.RuntimeOptions) (_result *CreateScriptWaveformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptContent)) {
		query["ScriptContent"] = request.ScriptContent
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateScriptWaveform"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateScriptWaveformResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateScriptWaveform(request *CreateScriptWaveformRequest) (_result *CreateScriptWaveformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateScriptWaveformResponse{}
	_body, _err := client.CreateScriptWaveformWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTagWithOptions(request *CreateTagRequest, runtime *util.RuntimeOptions) (_result *CreateTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.TagGroup)) {
		query["TagGroup"] = request.TagGroup
	}

	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		query["TagName"] = request.TagName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTag"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTag(request *CreateTagRequest) (_result *CreateTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTagResponse{}
	_body, _err := client.CreateTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTaskExportTaskWithOptions(request *CreateTaskExportTaskRequest, runtime *util.RuntimeOptions) (_result *CreateTaskExportTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTaskExportTask"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTaskExportTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTaskExportTask(request *CreateTaskExportTaskRequest) (_result *CreateTaskExportTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTaskExportTaskResponse{}
	_body, _err := client.CreateTaskExportTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAllNumberDistrictInfoWithOptions(runtime *util.RuntimeOptions) (_result *DeleteAllNumberDistrictInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DeleteAllNumberDistrictInfo"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAllNumberDistrictInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAllNumberDistrictInfo() (_result *DeleteAllNumberDistrictInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAllNumberDistrictInfoResponse{}
	_body, _err := client.DeleteAllNumberDistrictInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteContactBlockListWithOptions(request *DeleteContactBlockListRequest, runtime *util.RuntimeOptions) (_result *DeleteContactBlockListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactBlockListId)) {
		query["ContactBlockListId"] = request.ContactBlockListId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Operator)) {
		query["Operator"] = request.Operator
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContactBlockList"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactBlockListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteContactBlockList(request *DeleteContactBlockListRequest) (_result *DeleteContactBlockListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactBlockListResponse{}
	_body, _err := client.DeleteContactBlockListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteContactWhiteListWithOptions(request *DeleteContactWhiteListRequest, runtime *util.RuntimeOptions) (_result *DeleteContactWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactWhiteListId)) {
		query["ContactWhiteListId"] = request.ContactWhiteListId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Operator)) {
		query["Operator"] = request.Operator
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContactWhiteList"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteContactWhiteList(request *DeleteContactWhiteListRequest) (_result *DeleteContactWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactWhiteListResponse{}
	_body, _err := client.DeleteContactWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDialogueFlowWithOptions(request *DeleteDialogueFlowRequest, runtime *util.RuntimeOptions) (_result *DeleteDialogueFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DialogueFlowId)) {
		query["DialogueFlowId"] = request.DialogueFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDialogueFlow"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDialogueFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDialogueFlow(request *DeleteDialogueFlowRequest) (_result *DeleteDialogueFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDialogueFlowResponse{}
	_body, _err := client.DeleteDialogueFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteGlobalQuestionWithOptions(request *DeleteGlobalQuestionRequest, runtime *util.RuntimeOptions) (_result *DeleteGlobalQuestionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GlobalQuestionId)) {
		query["GlobalQuestionId"] = request.GlobalQuestionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGlobalQuestion"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGlobalQuestionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteGlobalQuestion(request *DeleteGlobalQuestionRequest) (_result *DeleteGlobalQuestionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGlobalQuestionResponse{}
	_body, _err := client.DeleteGlobalQuestionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstanceWithOptions(request *DeleteInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInstance"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstance(request *DeleteInstanceRequest) (_result *DeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DeleteInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIntentWithOptions(request *DeleteIntentRequest, runtime *util.RuntimeOptions) (_result *DeleteIntentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IntentId)) {
		query["IntentId"] = request.IntentId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIntent"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIntentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIntent(request *DeleteIntentRequest) (_result *DeleteIntentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIntentResponse{}
	_body, _err := client.DeleteIntentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteJobGroupWithOptions(request *DeleteJobGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteJobGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteJobGroup"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteJobGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteJobGroup(request *DeleteJobGroupRequest) (_result *DeleteJobGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteJobGroupResponse{}
	_body, _err := client.DeleteJobGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteOutboundCallNumberWithOptions(request *DeleteOutboundCallNumberRequest, runtime *util.RuntimeOptions) (_result *DeleteOutboundCallNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundCallNumberId)) {
		query["OutboundCallNumberId"] = request.OutboundCallNumberId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteOutboundCallNumber"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteOutboundCallNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteOutboundCallNumber(request *DeleteOutboundCallNumberRequest) (_result *DeleteOutboundCallNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOutboundCallNumberResponse{}
	_body, _err := client.DeleteOutboundCallNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteScriptWithOptions(request *DeleteScriptRequest, runtime *util.RuntimeOptions) (_result *DeleteScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteScript(request *DeleteScriptRequest) (_result *DeleteScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteScriptResponse{}
	_body, _err := client.DeleteScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteScriptRecordingWithOptions(request *DeleteScriptRecordingRequest, runtime *util.RuntimeOptions) (_result *DeleteScriptRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.UuidsJson)) {
		query["UuidsJson"] = request.UuidsJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteScriptRecording"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteScriptRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteScriptRecording(request *DeleteScriptRecordingRequest) (_result *DeleteScriptRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteScriptRecordingResponse{}
	_body, _err := client.DeleteScriptRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteScriptWaveformWithOptions(request *DeleteScriptWaveformRequest, runtime *util.RuntimeOptions) (_result *DeleteScriptWaveformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptWaveformId)) {
		query["ScriptWaveformId"] = request.ScriptWaveformId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteScriptWaveform"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteScriptWaveformResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteScriptWaveform(request *DeleteScriptWaveformRequest) (_result *DeleteScriptWaveformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteScriptWaveformResponse{}
	_body, _err := client.DeleteScriptWaveformWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDialogueNodeStatisticsWithOptions(request *DescribeDialogueNodeStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeDialogueNodeStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDialogueNodeStatistics"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDialogueNodeStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDialogueNodeStatistics(request *DescribeDialogueNodeStatisticsRequest) (_result *DescribeDialogueNodeStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDialogueNodeStatisticsResponse{}
	_body, _err := client.DescribeDialogueNodeStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDsReportsWithOptions(request *DescribeDsReportsRequest, runtime *util.RuntimeOptions) (_result *DescribeDsReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDsReports"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDsReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDsReports(request *DescribeDsReportsRequest) (_result *DescribeDsReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDsReportsResponse{}
	_body, _err := client.DescribeDsReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGlobalQuestionWithOptions(request *DescribeGlobalQuestionRequest, runtime *util.RuntimeOptions) (_result *DescribeGlobalQuestionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GlobalQuestionId)) {
		query["GlobalQuestionId"] = request.GlobalQuestionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGlobalQuestion"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGlobalQuestionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGlobalQuestion(request *DescribeGlobalQuestionRequest) (_result *DescribeGlobalQuestionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGlobalQuestionResponse{}
	_body, _err := client.DescribeGlobalQuestionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGroupExecutingInfoWithOptions(request *DescribeGroupExecutingInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupExecutingInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupExecutingInfo"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupExecutingInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGroupExecutingInfo(request *DescribeGroupExecutingInfoRequest) (_result *DescribeGroupExecutingInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupExecutingInfoResponse{}
	_body, _err := client.DescribeGroupExecutingInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceWithOptions(request *DescribeInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstance"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstance(request *DescribeInstanceRequest) (_result *DescribeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceResponse{}
	_body, _err := client.DescribeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIntentWithOptions(request *DescribeIntentRequest, runtime *util.RuntimeOptions) (_result *DescribeIntentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IntentId)) {
		query["IntentId"] = request.IntentId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIntent"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIntentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIntent(request *DescribeIntentRequest) (_result *DescribeIntentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIntentResponse{}
	_body, _err := client.DescribeIntentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIntentStatisticsWithOptions(request *DescribeIntentStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeIntentStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIntentStatistics"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIntentStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIntentStatistics(request *DescribeIntentStatisticsRequest) (_result *DescribeIntentStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIntentStatisticsResponse{}
	_body, _err := client.DescribeIntentStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeJobWithOptions(request *DescribeJobRequest, runtime *util.RuntimeOptions) (_result *DescribeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.WithScript)) {
		query["WithScript"] = request.WithScript
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJob"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeJob(request *DescribeJobRequest) (_result *DescribeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeJobResponse{}
	_body, _err := client.DescribeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeJobDataParsingTaskProgressWithOptions(request *DescribeJobDataParsingTaskProgressRequest, runtime *util.RuntimeOptions) (_result *DescribeJobDataParsingTaskProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobDataParsingTaskId)) {
		query["JobDataParsingTaskId"] = request.JobDataParsingTaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJobDataParsingTaskProgress"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobDataParsingTaskProgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeJobDataParsingTaskProgress(request *DescribeJobDataParsingTaskProgressRequest) (_result *DescribeJobDataParsingTaskProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeJobDataParsingTaskProgressResponse{}
	_body, _err := client.DescribeJobDataParsingTaskProgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeJobGroupWithOptions(request *DescribeJobGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeJobGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BriefTypes)) {
		query["BriefTypes"] = request.BriefTypes
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJobGroup"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeJobGroup(request *DescribeJobGroupRequest) (_result *DescribeJobGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeJobGroupResponse{}
	_body, _err := client.DescribeJobGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeJobGroupExportTaskProgressWithOptions(request *DescribeJobGroupExportTaskProgressRequest, runtime *util.RuntimeOptions) (_result *DescribeJobGroupExportTaskProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJobGroupExportTaskProgress"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobGroupExportTaskProgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeJobGroupExportTaskProgress(request *DescribeJobGroupExportTaskProgressRequest) (_result *DescribeJobGroupExportTaskProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeJobGroupExportTaskProgressResponse{}
	_body, _err := client.DescribeJobGroupExportTaskProgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNumberDistrictInfoStatusWithOptions(runtime *util.RuntimeOptions) (_result *DescribeNumberDistrictInfoStatusResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeNumberDistrictInfoStatus"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNumberDistrictInfoStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNumberDistrictInfoStatus() (_result *DescribeNumberDistrictInfoStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNumberDistrictInfoStatusResponse{}
	_body, _err := client.DescribeNumberDistrictInfoStatusWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScriptWithOptions(request *DescribeScriptRequest, runtime *util.RuntimeOptions) (_result *DescribeScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScript(request *DescribeScriptRequest) (_result *DescribeScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScriptResponse{}
	_body, _err := client.DescribeScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScriptVoiceConfigWithOptions(request *DescribeScriptVoiceConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeScriptVoiceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptVoiceConfigId)) {
		query["ScriptVoiceConfigId"] = request.ScriptVoiceConfigId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScriptVoiceConfig"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScriptVoiceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScriptVoiceConfig(request *DescribeScriptVoiceConfigRequest) (_result *DescribeScriptVoiceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScriptVoiceConfigResponse{}
	_body, _err := client.DescribeScriptVoiceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTTSConfigWithOptions(request *DescribeTTSConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeTTSConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTTSConfig"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTTSConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTTSConfig(request *DescribeTTSConfigRequest) (_result *DescribeTTSConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTTSConfigResponse{}
	_body, _err := client.DescribeTTSConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTTSDemoWithOptions(request *DescribeTTSDemoRequest, runtime *util.RuntimeOptions) (_result *DescribeTTSDemoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PitchRate)) {
		query["PitchRate"] = request.PitchRate
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.SpeechRate)) {
		query["SpeechRate"] = request.SpeechRate
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	if !tea.BoolValue(util.IsUnset(request.Voice)) {
		query["Voice"] = request.Voice
	}

	if !tea.BoolValue(util.IsUnset(request.Volume)) {
		query["Volume"] = request.Volume
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTTSDemo"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTTSDemoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTTSDemo(request *DescribeTTSDemoRequest) (_result *DescribeTTSDemoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTTSDemoResponse{}
	_body, _err := client.DescribeTTSDemoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTagHitsSummaryWithOptions(request *DescribeTagHitsSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeTagHitsSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagHitsSummary"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagHitsSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTagHitsSummary(request *DescribeTagHitsSummaryRequest) (_result *DescribeTagHitsSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagHitsSummaryResponse{}
	_body, _err := client.DescribeTagHitsSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantBindNumberWithOptions(request *DescribeTenantBindNumberRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantBindNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantBindNumber"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantBindNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantBindNumber(request *DescribeTenantBindNumberRequest) (_result *DescribeTenantBindNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantBindNumberResponse{}
	_body, _err := client.DescribeTenantBindNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DialogueWithOptions(request *DialogueRequest, runtime *util.RuntimeOptions) (_result *DialogueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionKey)) {
		query["ActionKey"] = request.ActionKey
	}

	if !tea.BoolValue(util.IsUnset(request.ActionParams)) {
		query["ActionParams"] = request.ActionParams
	}

	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.CallType)) {
		query["CallType"] = request.CallType
	}

	if !tea.BoolValue(util.IsUnset(request.CalledNumber)) {
		query["CalledNumber"] = request.CalledNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Utterance)) {
		query["Utterance"] = request.Utterance
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("Dialogue"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DialogueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) Dialogue(request *DialogueRequest) (_result *DialogueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DialogueResponse{}
	_body, _err := client.DialogueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DismissNumberDistrictInfoParsingResultWithOptions(request *DismissNumberDistrictInfoParsingResultRequest, runtime *util.RuntimeOptions) (_result *DismissNumberDistrictInfoParsingResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DismissNumberDistrictInfoParsingResult"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DismissNumberDistrictInfoParsingResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DismissNumberDistrictInfoParsingResult(request *DismissNumberDistrictInfoParsingResultRequest) (_result *DismissNumberDistrictInfoParsingResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DismissNumberDistrictInfoParsingResultResponse{}
	_body, _err := client.DismissNumberDistrictInfoParsingResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DownloadRecordingWithOptions(request *DownloadRecordingRequest, runtime *util.RuntimeOptions) (_result *DownloadRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NeedVoiceSliceRecording)) {
		query["NeedVoiceSliceRecording"] = request.NeedVoiceSliceRecording
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadRecording"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DownloadRecording(request *DownloadRecordingRequest) (_result *DownloadRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadRecordingResponse{}
	_body, _err := client.DownloadRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DownloadScriptRecordingWithOptions(request *DownloadScriptRecordingRequest, runtime *util.RuntimeOptions) (_result *DownloadScriptRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadScriptRecording"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadScriptRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DownloadScriptRecording(request *DownloadScriptRecordingRequest) (_result *DownloadScriptRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadScriptRecordingResponse{}
	_body, _err := client.DownloadScriptRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DuplicateScriptWithOptions(request *DuplicateScriptRequest, runtime *util.RuntimeOptions) (_result *DuplicateScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SourceScriptId)) {
		query["SourceScriptId"] = request.SourceScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DuplicateScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DuplicateScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DuplicateScript(request *DuplicateScriptRequest) (_result *DuplicateScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DuplicateScriptResponse{}
	_body, _err := client.DuplicateScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportScriptWithOptions(request *ExportScriptRequest, runtime *util.RuntimeOptions) (_result *ExportScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportScript(request *ExportScriptRequest) (_result *ExportScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportScriptResponse{}
	_body, _err := client.ExportScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateUploadUrlWithOptions(request *GenerateUploadUrlRequest, runtime *util.RuntimeOptions) (_result *GenerateUploadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateUploadUrl"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateUploadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateUploadUrl(request *GenerateUploadUrlRequest) (_result *GenerateUploadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateUploadUrlResponse{}
	_body, _err := client.GenerateUploadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAfterAnswerDelayPlaybackWithOptions(request *GetAfterAnswerDelayPlaybackRequest, runtime *util.RuntimeOptions) (_result *GetAfterAnswerDelayPlaybackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAfterAnswerDelayPlayback"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAfterAnswerDelayPlaybackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAfterAnswerDelayPlayback(request *GetAfterAnswerDelayPlaybackRequest) (_result *GetAfterAnswerDelayPlaybackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAfterAnswerDelayPlaybackResponse{}
	_body, _err := client.GetAfterAnswerDelayPlaybackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAsrServerInfoWithOptions(request *GetAsrServerInfoRequest, runtime *util.RuntimeOptions) (_result *GetAsrServerInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsrServerInfo"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAsrServerInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAsrServerInfo(request *GetAsrServerInfoRequest) (_result *GetAsrServerInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsrServerInfoResponse{}
	_body, _err := client.GetAsrServerInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBaseStrategyPeriodWithOptions(request *GetBaseStrategyPeriodRequest, runtime *util.RuntimeOptions) (_result *GetBaseStrategyPeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBaseStrategyPeriod"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBaseStrategyPeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBaseStrategyPeriod(request *GetBaseStrategyPeriodRequest) (_result *GetBaseStrategyPeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBaseStrategyPeriodResponse{}
	_body, _err := client.GetBaseStrategyPeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetConcurrentConversationQuotaWithOptions(runtime *util.RuntimeOptions) (_result *GetConcurrentConversationQuotaResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetConcurrentConversationQuota"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetConcurrentConversationQuotaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetConcurrentConversationQuota() (_result *GetConcurrentConversationQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetConcurrentConversationQuotaResponse{}
	_body, _err := client.GetConcurrentConversationQuotaWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetContactBlockListWithOptions(request *GetContactBlockListRequest, runtime *util.RuntimeOptions) (_result *GetContactBlockListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CountTotalRow)) {
		query["CountTotalRow"] = request.CountTotalRow
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetContactBlockList"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetContactBlockListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetContactBlockList(request *GetContactBlockListRequest) (_result *GetContactBlockListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetContactBlockListResponse{}
	_body, _err := client.GetContactBlockListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetContactWhiteListWithOptions(request *GetContactWhiteListRequest, runtime *util.RuntimeOptions) (_result *GetContactWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CountTotalRow)) {
		query["CountTotalRow"] = request.CountTotalRow
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetContactWhiteList"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetContactWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetContactWhiteList(request *GetContactWhiteListRequest) (_result *GetContactWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetContactWhiteListResponse{}
	_body, _err := client.GetContactWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCurrentConcurrencyWithOptions(request *GetCurrentConcurrencyRequest, runtime *util.RuntimeOptions) (_result *GetCurrentConcurrencyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCurrentConcurrency"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCurrentConcurrencyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCurrentConcurrency(request *GetCurrentConcurrencyRequest) (_result *GetCurrentConcurrencyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCurrentConcurrencyResponse{}
	_body, _err := client.GetCurrentConcurrencyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEffectiveDaysWithOptions(request *GetEffectiveDaysRequest, runtime *util.RuntimeOptions) (_result *GetEffectiveDaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEffectiveDays"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEffectiveDaysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEffectiveDays(request *GetEffectiveDaysRequest) (_result *GetEffectiveDaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEffectiveDaysResponse{}
	_body, _err := client.GetEffectiveDaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEmptyNumberNoMoreCallsInfoWithOptions(request *GetEmptyNumberNoMoreCallsInfoRequest, runtime *util.RuntimeOptions) (_result *GetEmptyNumberNoMoreCallsInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEmptyNumberNoMoreCallsInfo"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEmptyNumberNoMoreCallsInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEmptyNumberNoMoreCallsInfo(request *GetEmptyNumberNoMoreCallsInfoRequest) (_result *GetEmptyNumberNoMoreCallsInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEmptyNumberNoMoreCallsInfoResponse{}
	_body, _err := client.GetEmptyNumberNoMoreCallsInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMaxAttemptsPerDayWithOptions(request *GetMaxAttemptsPerDayRequest, runtime *util.RuntimeOptions) (_result *GetMaxAttemptsPerDayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMaxAttemptsPerDay"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMaxAttemptsPerDayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMaxAttemptsPerDay(request *GetMaxAttemptsPerDayRequest) (_result *GetMaxAttemptsPerDayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMaxAttemptsPerDayResponse{}
	_body, _err := client.GetMaxAttemptsPerDayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNumberDistrictInfoTemplateDownloadUrlWithOptions(runtime *util.RuntimeOptions) (_result *GetNumberDistrictInfoTemplateDownloadUrlResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetNumberDistrictInfoTemplateDownloadUrl"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNumberDistrictInfoTemplateDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNumberDistrictInfoTemplateDownloadUrl() (_result *GetNumberDistrictInfoTemplateDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNumberDistrictInfoTemplateDownloadUrlResponse{}
	_body, _err := client.GetNumberDistrictInfoTemplateDownloadUrlWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSummaryInfoWithOptions(request *GetSummaryInfoRequest, runtime *util.RuntimeOptions) (_result *GetSummaryInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		query["InstanceIdList"] = request.InstanceIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSummaryInfo"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSummaryInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSummaryInfo(request *GetSummaryInfoRequest) (_result *GetSummaryInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSummaryInfoResponse{}
	_body, _err := client.GetSummaryInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTaskByUuidWithOptions(request *GetTaskByUuidRequest, runtime *util.RuntimeOptions) (_result *GetTaskByUuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTaskByUuid"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTaskByUuidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTaskByUuid(request *GetTaskByUuidRequest) (_result *GetTaskByUuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTaskByUuidResponse{}
	_body, _err := client.GetTaskByUuidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetVersionWithOptions(runtime *util.RuntimeOptions) (_result *GetVersionResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetVersion"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetVersion() (_result *GetVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVersionResponse{}
	_body, _err := client.GetVersionWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportScriptWithOptions(request *ImportScriptRequest, runtime *util.RuntimeOptions) (_result *ImportScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureUrl)) {
		query["SignatureUrl"] = request.SignatureUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportScript(request *ImportScriptRequest) (_result *ImportScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportScriptResponse{}
	_body, _err := client.ImportScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InflightTaskTimeoutWithOptions(request *InflightTaskTimeoutRequest, runtime *util.RuntimeOptions) (_result *InflightTaskTimeoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceOwnerId)) {
		query["InstanceOwnerId"] = request.InstanceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InflightTaskTimeout"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InflightTaskTimeoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InflightTaskTimeout(request *InflightTaskTimeoutRequest) (_result *InflightTaskTimeoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InflightTaskTimeoutResponse{}
	_body, _err := client.InflightTaskTimeoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAllTenantBindNumberBindingWithOptions(runtime *util.RuntimeOptions) (_result *ListAllTenantBindNumberBindingResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListAllTenantBindNumberBinding"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAllTenantBindNumberBindingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAllTenantBindNumberBinding() (_result *ListAllTenantBindNumberBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllTenantBindNumberBindingResponse{}
	_body, _err := client.ListAllTenantBindNumberBindingWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListChatbotInstancesWithOptions(request *ListChatbotInstancesRequest, runtime *util.RuntimeOptions) (_result *ListChatbotInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListChatbotInstances"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListChatbotInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListChatbotInstances(request *ListChatbotInstancesRequest) (_result *ListChatbotInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListChatbotInstancesResponse{}
	_body, _err := client.ListChatbotInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDialogueFlowsWithOptions(request *ListDialogueFlowsRequest, runtime *util.RuntimeOptions) (_result *ListDialogueFlowsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDialogueFlows"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDialogueFlowsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDialogueFlows(request *ListDialogueFlowsRequest) (_result *ListDialogueFlowsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDialogueFlowsResponse{}
	_body, _err := client.ListDialogueFlowsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDownloadTasksWithOptions(request *ListDownloadTasksRequest, runtime *util.RuntimeOptions) (_result *ListDownloadTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDownloadTasks"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDownloadTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDownloadTasks(request *ListDownloadTasksRequest) (_result *ListDownloadTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDownloadTasksResponse{}
	_body, _err := client.ListDownloadTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListGlobalQuestionsWithOptions(request *ListGlobalQuestionsRequest, runtime *util.RuntimeOptions) (_result *ListGlobalQuestionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListGlobalQuestions"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListGlobalQuestionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListGlobalQuestions(request *ListGlobalQuestionsRequest) (_result *ListGlobalQuestionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListGlobalQuestionsResponse{}
	_body, _err := client.ListGlobalQuestionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInstancesWithOptions(request *ListInstancesRequest, runtime *util.RuntimeOptions) (_result *ListInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInstances"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInstances(request *ListInstancesRequest) (_result *ListInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstancesResponse{}
	_body, _err := client.ListInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListIntentsWithOptions(request *ListIntentsRequest, runtime *util.RuntimeOptions) (_result *ListIntentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIntents"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIntentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListIntents(request *ListIntentsRequest) (_result *ListIntentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIntentsResponse{}
	_body, _err := client.ListIntentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobGroupsWithOptions(request *ListJobGroupsRequest, runtime *util.RuntimeOptions) (_result *ListJobGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AsyncQuery)) {
		query["AsyncQuery"] = request.AsyncQuery
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupStatusFilter)) {
		query["JobGroupStatusFilter"] = request.JobGroupStatusFilter
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchText)) {
		query["SearchText"] = request.SearchText
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListJobGroups"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListJobGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJobGroups(request *ListJobGroupsRequest) (_result *ListJobGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobGroupsResponse{}
	_body, _err := client.ListJobGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobGroupsAsyncWithOptions(request *ListJobGroupsAsyncRequest, runtime *util.RuntimeOptions) (_result *ListJobGroupsAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListJobGroupsAsync"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListJobGroupsAsyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJobGroupsAsync(request *ListJobGroupsAsyncRequest) (_result *ListJobGroupsAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobGroupsAsyncResponse{}
	_body, _err := client.ListJobGroupsAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobsWithOptions(request *ListJobsRequest, runtime *util.RuntimeOptions) (_result *ListJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJobs(request *ListJobsRequest) (_result *ListJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobsResponse{}
	_body, _err := client.ListJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobsByGroupWithOptions(request *ListJobsByGroupRequest, runtime *util.RuntimeOptions) (_result *ListJobsByGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobFailureReason)) {
		query["JobFailureReason"] = request.JobFailureReason
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobStatus)) {
		query["JobStatus"] = request.JobStatus
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListJobsByGroup"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListJobsByGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJobsByGroup(request *ListJobsByGroupRequest) (_result *ListJobsByGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobsByGroupResponse{}
	_body, _err := client.ListJobsByGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOutboundCallNumbersWithOptions(request *ListOutboundCallNumbersRequest, runtime *util.RuntimeOptions) (_result *ListOutboundCallNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOutboundCallNumbers"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOutboundCallNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOutboundCallNumbers(request *ListOutboundCallNumbersRequest) (_result *ListOutboundCallNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOutboundCallNumbersResponse{}
	_body, _err := client.ListOutboundCallNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListResourceTagsWithOptions(request *ListResourceTagsRequest, runtime *util.RuntimeOptions) (_result *ListResourceTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListResourceTags"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListResourceTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListResourceTags(request *ListResourceTagsRequest) (_result *ListResourceTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListResourceTagsResponse{}
	_body, _err := client.ListResourceTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSchedulerInstancesWithOptions(request *ListSchedulerInstancesRequest, runtime *util.RuntimeOptions) (_result *ListSchedulerInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceOwnerId)) {
		query["InstanceOwnerId"] = request.InstanceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSchedulerInstances"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSchedulerInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSchedulerInstances(request *ListSchedulerInstancesRequest) (_result *ListSchedulerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSchedulerInstancesResponse{}
	_body, _err := client.ListSchedulerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScriptPublishHistoriesWithOptions(request *ListScriptPublishHistoriesRequest, runtime *util.RuntimeOptions) (_result *ListScriptPublishHistoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScriptPublishHistories"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScriptPublishHistoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScriptPublishHistories(request *ListScriptPublishHistoriesRequest) (_result *ListScriptPublishHistoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScriptPublishHistoriesResponse{}
	_body, _err := client.ListScriptPublishHistoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScriptRecordingWithOptions(request *ListScriptRecordingRequest, runtime *util.RuntimeOptions) (_result *ListScriptRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["Search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.StatesJson)) {
		query["StatesJson"] = request.StatesJson
	}

	if !tea.BoolValue(util.IsUnset(request.UuidsJson)) {
		query["UuidsJson"] = request.UuidsJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScriptRecording"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScriptRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScriptRecording(request *ListScriptRecordingRequest) (_result *ListScriptRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScriptRecordingResponse{}
	_body, _err := client.ListScriptRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScriptVoiceConfigsWithOptions(request *ListScriptVoiceConfigsRequest, runtime *util.RuntimeOptions) (_result *ListScriptVoiceConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScriptVoiceConfigs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScriptVoiceConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScriptVoiceConfigs(request *ListScriptVoiceConfigsRequest) (_result *ListScriptVoiceConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScriptVoiceConfigsResponse{}
	_body, _err := client.ListScriptVoiceConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScriptsWithOptions(request *ListScriptsRequest, runtime *util.RuntimeOptions) (_result *ListScriptsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScripts"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScriptsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScripts(request *ListScriptsRequest) (_result *ListScriptsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScriptsResponse{}
	_body, _err := client.ListScriptsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagsWithOptions(request *ListTagsRequest, runtime *util.RuntimeOptions) (_result *ListTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTags"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTags(request *ListTagsRequest) (_result *ListTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagsResponse{}
	_body, _err := client.ListTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBatchJobsWithOptions(request *ModifyBatchJobsRequest, runtime *util.RuntimeOptions) (_result *ModifyBatchJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BatchJobName)) {
		query["BatchJobName"] = request.BatchJobName
	}

	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobFilePath)) {
		query["JobFilePath"] = request.JobFilePath
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyJson)) {
		query["StrategyJson"] = request.StrategyJson
	}

	if !tea.BoolValue(util.IsUnset(request.Submitted)) {
		query["Submitted"] = request.Submitted
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBatchJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBatchJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBatchJobs(request *ModifyBatchJobsRequest) (_result *ModifyBatchJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBatchJobsResponse{}
	_body, _err := client.ModifyBatchJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDialogueFlowWithOptions(request *ModifyDialogueFlowRequest, runtime *util.RuntimeOptions) (_result *ModifyDialogueFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DialogueFlowDefinition)) {
		query["DialogueFlowDefinition"] = request.DialogueFlowDefinition
	}

	if !tea.BoolValue(util.IsUnset(request.DialogueFlowId)) {
		query["DialogueFlowId"] = request.DialogueFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsDrafted)) {
		query["IsDrafted"] = request.IsDrafted
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDialogueFlow"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDialogueFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDialogueFlow(request *ModifyDialogueFlowRequest) (_result *ModifyDialogueFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDialogueFlowResponse{}
	_body, _err := client.ModifyDialogueFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEmptyNumberNoMoreCallsInfoWithOptions(request *ModifyEmptyNumberNoMoreCallsInfoRequest, runtime *util.RuntimeOptions) (_result *ModifyEmptyNumberNoMoreCallsInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EmptyNumberNoMoreCalls)) {
		query["EmptyNumberNoMoreCalls"] = request.EmptyNumberNoMoreCalls
	}

	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEmptyNumberNoMoreCallsInfo"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEmptyNumberNoMoreCallsInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEmptyNumberNoMoreCallsInfo(request *ModifyEmptyNumberNoMoreCallsInfoRequest) (_result *ModifyEmptyNumberNoMoreCallsInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEmptyNumberNoMoreCallsInfoResponse{}
	_body, _err := client.ModifyEmptyNumberNoMoreCallsInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyGlobalQuestionWithOptions(request *ModifyGlobalQuestionRequest, runtime *util.RuntimeOptions) (_result *ModifyGlobalQuestionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Answers)) {
		query["Answers"] = request.Answers
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalQuestionId)) {
		query["GlobalQuestionId"] = request.GlobalQuestionId
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalQuestionName)) {
		query["GlobalQuestionName"] = request.GlobalQuestionName
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalQuestionType)) {
		query["GlobalQuestionType"] = request.GlobalQuestionType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Questions)) {
		query["Questions"] = request.Questions
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyGlobalQuestion"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyGlobalQuestionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyGlobalQuestion(request *ModifyGlobalQuestionRequest) (_result *ModifyGlobalQuestionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyGlobalQuestionResponse{}
	_body, _err := client.ModifyGlobalQuestionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceWithOptions(request *ModifyInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceDescription)) {
		query["InstanceDescription"] = request.InstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.MaxConcurrentConversation)) {
		query["MaxConcurrentConversation"] = request.MaxConcurrentConversation
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstance"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstance(request *ModifyInstanceRequest) (_result *ModifyInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceResponse{}
	_body, _err := client.ModifyInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyIntentWithOptions(request *ModifyIntentRequest, runtime *util.RuntimeOptions) (_result *ModifyIntentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IntentDescription)) {
		query["IntentDescription"] = request.IntentDescription
	}

	if !tea.BoolValue(util.IsUnset(request.IntentId)) {
		query["IntentId"] = request.IntentId
	}

	if !tea.BoolValue(util.IsUnset(request.IntentName)) {
		query["IntentName"] = request.IntentName
	}

	if !tea.BoolValue(util.IsUnset(request.Keywords)) {
		query["Keywords"] = request.Keywords
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.Utterances)) {
		query["Utterances"] = request.Utterances
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyIntent"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyIntentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyIntent(request *ModifyIntentRequest) (_result *ModifyIntentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIntentResponse{}
	_body, _err := client.ModifyIntentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyJobGroupWithOptions(request *ModifyJobGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyJobGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupStatus)) {
		query["JobGroupStatus"] = request.JobGroupStatus
	}

	if !tea.BoolValue(util.IsUnset(request.MinConcurrency)) {
		query["MinConcurrency"] = request.MinConcurrency
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RecallStrategyJson)) {
		query["RecallStrategyJson"] = request.RecallStrategyJson
	}

	if !tea.BoolValue(util.IsUnset(request.RingingDuration)) {
		query["RingingDuration"] = request.RingingDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyJson)) {
		query["StrategyJson"] = request.StrategyJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyJobGroup"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyJobGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyJobGroup(request *ModifyJobGroupRequest) (_result *ModifyJobGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyJobGroupResponse{}
	_body, _err := client.ModifyJobGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyOutboundCallNumberWithOptions(request *ModifyOutboundCallNumberRequest, runtime *util.RuntimeOptions) (_result *ModifyOutboundCallNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundCallNumberId)) {
		query["OutboundCallNumberId"] = request.OutboundCallNumberId
	}

	if !tea.BoolValue(util.IsUnset(request.RateLimitCount)) {
		query["RateLimitCount"] = request.RateLimitCount
	}

	if !tea.BoolValue(util.IsUnset(request.RateLimitPeriod)) {
		query["RateLimitPeriod"] = request.RateLimitPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyOutboundCallNumber"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyOutboundCallNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyOutboundCallNumber(request *ModifyOutboundCallNumberRequest) (_result *ModifyOutboundCallNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyOutboundCallNumberResponse{}
	_body, _err := client.ModifyOutboundCallNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScriptWithOptions(request *ModifyScriptRequest, runtime *util.RuntimeOptions) (_result *ModifyScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AsrConfig)) {
		query["AsrConfig"] = request.AsrConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ChatbotId)) {
		query["ChatbotId"] = request.ChatbotId
	}

	if !tea.BoolValue(util.IsUnset(request.EmotionEnable)) {
		query["EmotionEnable"] = request.EmotionEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Industry)) {
		query["Industry"] = request.Industry
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LongWaitEnable)) {
		query["LongWaitEnable"] = request.LongWaitEnable
	}

	if !tea.BoolValue(util.IsUnset(request.MiniPlaybackConfigListJsonString)) {
		query["MiniPlaybackConfigListJsonString"] = request.MiniPlaybackConfigListJsonString
	}

	if !tea.BoolValue(util.IsUnset(request.MiniPlaybackEnable)) {
		query["MiniPlaybackEnable"] = request.MiniPlaybackEnable
	}

	if !tea.BoolValue(util.IsUnset(request.NewBargeInEnable)) {
		query["NewBargeInEnable"] = request.NewBargeInEnable
	}

	if !tea.BoolValue(util.IsUnset(request.NlsConfig)) {
		query["NlsConfig"] = request.NlsConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["Scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptContent)) {
		query["ScriptContent"] = request.ScriptContent
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptDescription)) {
		query["ScriptDescription"] = request.ScriptDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptName)) {
		query["ScriptName"] = request.ScriptName
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptWaveform)) {
		query["ScriptWaveform"] = request.ScriptWaveform
	}

	if !tea.BoolValue(util.IsUnset(request.TtsConfig)) {
		query["TtsConfig"] = request.TtsConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScript(request *ModifyScriptRequest) (_result *ModifyScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScriptResponse{}
	_body, _err := client.ModifyScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScriptVoiceConfigWithOptions(request *ModifyScriptVoiceConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyScriptVoiceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptVoiceConfigId)) {
		query["ScriptVoiceConfigId"] = request.ScriptVoiceConfigId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptWaveformRelation)) {
		query["ScriptWaveformRelation"] = request.ScriptWaveformRelation
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyScriptVoiceConfig"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyScriptVoiceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScriptVoiceConfig(request *ModifyScriptVoiceConfigRequest) (_result *ModifyScriptVoiceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScriptVoiceConfigResponse{}
	_body, _err := client.ModifyScriptVoiceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTTSConfigWithOptions(request *ModifyTTSConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyTTSConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NlsServiceType)) {
		query["NlsServiceType"] = request.NlsServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.SpeechRate)) {
		query["SpeechRate"] = request.SpeechRate
	}

	if !tea.BoolValue(util.IsUnset(request.Voice)) {
		query["Voice"] = request.Voice
	}

	if !tea.BoolValue(util.IsUnset(request.Volume)) {
		query["Volume"] = request.Volume
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTTSConfig"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTTSConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTTSConfig(request *ModifyTTSConfigRequest) (_result *ModifyTTSConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTTSConfigResponse{}
	_body, _err := client.ModifyTTSConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTagGroupsWithOptions(request *ModifyTagGroupsRequest, runtime *util.RuntimeOptions) (_result *ModifyTagGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	if !tea.BoolValue(util.IsUnset(request.TagGroups)) {
		query["TagGroups"] = request.TagGroups
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTagGroups"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTagGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTagGroups(request *ModifyTagGroupsRequest) (_result *ModifyTagGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTagGroupsResponse{}
	_body, _err := client.ModifyTagGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishScriptWithOptions(request *PublishScriptRequest, runtime *util.RuntimeOptions) (_result *PublishScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublishScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublishScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishScript(request *PublishScriptRequest) (_result *PublishScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishScriptResponse{}
	_body, _err := client.PublishScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishScriptForDebugWithOptions(request *PublishScriptForDebugRequest, runtime *util.RuntimeOptions) (_result *PublishScriptForDebugResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublishScriptForDebug"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublishScriptForDebugResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishScriptForDebug(request *PublishScriptForDebugRequest) (_result *PublishScriptForDebugResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishScriptForDebugResponse{}
	_body, _err := client.PublishScriptForDebugWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJobsWithOptions(request *QueryJobsRequest, runtime *util.RuntimeOptions) (_result *QueryJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TimeAlignment)) {
		query["TimeAlignment"] = request.TimeAlignment
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJobs(request *QueryJobsRequest) (_result *QueryJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobsResponse{}
	_body, _err := client.QueryJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJobsWithResultWithOptions(request *QueryJobsWithResultRequest, runtime *util.RuntimeOptions) (_result *QueryJobsWithResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HasAnsweredFilter)) {
		query["HasAnsweredFilter"] = request.HasAnsweredFilter
	}

	if !tea.BoolValue(util.IsUnset(request.HasHangUpByRejectionFilter)) {
		query["HasHangUpByRejectionFilter"] = request.HasHangUpByRejectionFilter
	}

	if !tea.BoolValue(util.IsUnset(request.HasReachedEndOfFlowFilter)) {
		query["HasReachedEndOfFlowFilter"] = request.HasReachedEndOfFlowFilter
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobStatusFilter)) {
		query["JobStatusFilter"] = request.JobStatusFilter
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryText)) {
		query["QueryText"] = request.QueryText
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatusFilter)) {
		query["TaskStatusFilter"] = request.TaskStatusFilter
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryJobsWithResult"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryJobsWithResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJobsWithResult(request *QueryJobsWithResultRequest) (_result *QueryJobsWithResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobsWithResultResponse{}
	_body, _err := client.QueryJobsWithResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryScriptWaveformsWithOptions(request *QueryScriptWaveformsRequest, runtime *util.RuntimeOptions) (_result *QueryScriptWaveformsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptContent)) {
		query["ScriptContent"] = request.ScriptContent
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryScriptWaveforms"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryScriptWaveformsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryScriptWaveforms(request *QueryScriptWaveformsRequest) (_result *QueryScriptWaveformsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryScriptWaveformsResponse{}
	_body, _err := client.QueryScriptWaveformsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryScriptsByStatusWithOptions(request *QueryScriptsByStatusRequest, runtime *util.RuntimeOptions) (_result *QueryScriptsByStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryScriptsByStatus"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryScriptsByStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryScriptsByStatus(request *QueryScriptsByStatusRequest) (_result *QueryScriptsByStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryScriptsByStatusResponse{}
	_body, _err := client.QueryScriptsByStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecordFailureWithOptions(request *RecordFailureRequest, runtime *util.RuntimeOptions) (_result *RecordFailureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActualTime)) {
		query["ActualTime"] = request.ActualTime
	}

	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.CalledNumber)) {
		query["CalledNumber"] = request.CalledNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.DispositionCode)) {
		query["DispositionCode"] = request.DispositionCode
	}

	if !tea.BoolValue(util.IsUnset(request.ExceptionCodes)) {
		query["ExceptionCodes"] = request.ExceptionCodes
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RecordFailure"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RecordFailureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecordFailure(request *RecordFailureRequest) (_result *RecordFailureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecordFailureResponse{}
	_body, _err := client.RecordFailureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeJobsWithOptions(request *ResumeJobsRequest, runtime *util.RuntimeOptions) (_result *ResumeJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobReferenceId)) {
		query["JobReferenceId"] = request.JobReferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeJobs(request *ResumeJobsRequest) (_result *ResumeJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeJobsResponse{}
	_body, _err := client.ResumeJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackScriptWithOptions(request *RollbackScriptRequest, runtime *util.RuntimeOptions) (_result *RollbackScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RollbackVersion)) {
		query["RollbackVersion"] = request.RollbackVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackScript"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RollbackScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackScript(request *RollbackScriptRequest) (_result *RollbackScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RollbackScriptResponse{}
	_body, _err := client.RollbackScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveAfterAnswerDelayPlaybackWithOptions(request *SaveAfterAnswerDelayPlaybackRequest, runtime *util.RuntimeOptions) (_result *SaveAfterAnswerDelayPlaybackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AfterAnswerDelayPlayback)) {
		query["AfterAnswerDelayPlayback"] = request.AfterAnswerDelayPlayback
	}

	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveAfterAnswerDelayPlayback"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveAfterAnswerDelayPlaybackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveAfterAnswerDelayPlayback(request *SaveAfterAnswerDelayPlaybackRequest) (_result *SaveAfterAnswerDelayPlaybackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveAfterAnswerDelayPlaybackResponse{}
	_body, _err := client.SaveAfterAnswerDelayPlaybackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveBaseStrategyPeriodWithOptions(request *SaveBaseStrategyPeriodRequest, runtime *util.RuntimeOptions) (_result *SaveBaseStrategyPeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyWeekdays)) {
		query["OnlyWeekdays"] = request.OnlyWeekdays
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	if !tea.BoolValue(util.IsUnset(request.WorkingTime)) {
		query["WorkingTime"] = request.WorkingTime
	}

	if !tea.BoolValue(util.IsUnset(request.WorkingTimeFramesJson)) {
		query["WorkingTimeFramesJson"] = request.WorkingTimeFramesJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveBaseStrategyPeriod"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveBaseStrategyPeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveBaseStrategyPeriod(request *SaveBaseStrategyPeriodRequest) (_result *SaveBaseStrategyPeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveBaseStrategyPeriodResponse{}
	_body, _err := client.SaveBaseStrategyPeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveContactBlockListWithOptions(request *SaveContactBlockListRequest, runtime *util.RuntimeOptions) (_result *SaveContactBlockListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactBlockListList)) {
		query["ContactBlockListList"] = request.ContactBlockListList
	}

	if !tea.BoolValue(util.IsUnset(request.ContactBlockListsJson)) {
		query["ContactBlockListsJson"] = request.ContactBlockListsJson
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveContactBlockList"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveContactBlockListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveContactBlockList(request *SaveContactBlockListRequest) (_result *SaveContactBlockListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveContactBlockListResponse{}
	_body, _err := client.SaveContactBlockListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveContactWhiteListWithOptions(request *SaveContactWhiteListRequest, runtime *util.RuntimeOptions) (_result *SaveContactWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactWhiteListList)) {
		query["ContactWhiteListList"] = request.ContactWhiteListList
	}

	if !tea.BoolValue(util.IsUnset(request.ContactWhiteListsJson)) {
		query["ContactWhiteListsJson"] = request.ContactWhiteListsJson
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveContactWhiteList"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveContactWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveContactWhiteList(request *SaveContactWhiteListRequest) (_result *SaveContactWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveContactWhiteListResponse{}
	_body, _err := client.SaveContactWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveEffectiveDaysWithOptions(request *SaveEffectiveDaysRequest, runtime *util.RuntimeOptions) (_result *SaveEffectiveDaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EffectiveDays)) {
		query["EffectiveDays"] = request.EffectiveDays
	}

	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveEffectiveDays"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveEffectiveDaysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveEffectiveDays(request *SaveEffectiveDaysRequest) (_result *SaveEffectiveDaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveEffectiveDaysResponse{}
	_body, _err := client.SaveEffectiveDaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveMaxAttemptsPerDayWithOptions(request *SaveMaxAttemptsPerDayRequest, runtime *util.RuntimeOptions) (_result *SaveMaxAttemptsPerDayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntryId)) {
		query["EntryId"] = request.EntryId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAttemptsPerDay)) {
		query["MaxAttemptsPerDay"] = request.MaxAttemptsPerDay
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyLevel)) {
		query["StrategyLevel"] = request.StrategyLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveMaxAttemptsPerDay"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveMaxAttemptsPerDayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveMaxAttemptsPerDay(request *SaveMaxAttemptsPerDayRequest) (_result *SaveMaxAttemptsPerDayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveMaxAttemptsPerDayResponse{}
	_body, _err := client.SaveMaxAttemptsPerDayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchTaskWithOptions(request *SearchTaskRequest, runtime *util.RuntimeOptions) (_result *SearchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTask"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchTask(request *SearchTaskRequest) (_result *SearchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTaskResponse{}
	_body, _err := client.SearchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartJobWithOptions(request *StartJobRequest, runtime *util.RuntimeOptions) (_result *StartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobJson)) {
		query["JobJson"] = request.JobJson
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartJob"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartJob(request *StartJobRequest) (_result *StartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartJobResponse{}
	_body, _err := client.StartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitBatchJobsWithOptions(request *SubmitBatchJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitBatchJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitBatchJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitBatchJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitBatchJobs(request *SubmitBatchJobsRequest) (_result *SubmitBatchJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitBatchJobsResponse{}
	_body, _err := client.SubmitBatchJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitRecordingWithOptions(request *SubmitRecordingRequest, runtime *util.RuntimeOptions) (_result *SubmitRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MergedRecording)) {
		query["MergedRecording"] = request.MergedRecording
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceRecording)) {
		query["ResourceRecording"] = request.ResourceRecording
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitRecording"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitRecording(request *SubmitRecordingRequest) (_result *SubmitRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitRecordingResponse{}
	_body, _err := client.SubmitRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitScriptReviewWithOptions(request *SubmitScriptReviewRequest, runtime *util.RuntimeOptions) (_result *SubmitScriptReviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitScriptReview"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitScriptReviewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitScriptReview(request *SubmitScriptReviewRequest) (_result *SubmitScriptReviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitScriptReviewResponse{}
	_body, _err := client.SubmitScriptReviewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendCallWithOptions(request *SuspendCallRequest, runtime *util.RuntimeOptions) (_result *SuspendCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalledNumbers)) {
		query["CalledNumbers"] = request.CalledNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendCall"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendCall(request *SuspendCallRequest) (_result *SuspendCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendCallResponse{}
	_body, _err := client.SuspendCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendCallWithFileWithOptions(request *SuspendCallWithFileRequest, runtime *util.RuntimeOptions) (_result *SuspendCallWithFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendCallWithFile"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendCallWithFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendCallWithFile(request *SuspendCallWithFileRequest) (_result *SuspendCallWithFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendCallWithFileResponse{}
	_body, _err := client.SuspendCallWithFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendJobsWithOptions(request *SuspendJobsRequest, runtime *util.RuntimeOptions) (_result *SuspendJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobGroupId)) {
		query["JobGroupId"] = request.JobGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobReferenceId)) {
		query["JobReferenceId"] = request.JobReferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendJobs"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendJobs(request *SuspendJobsRequest) (_result *SuspendJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendJobsResponse{}
	_body, _err := client.SuspendJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * **
 *
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * **
 *
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TaskPreparingWithOptions(request *TaskPreparingRequest, runtime *util.RuntimeOptions) (_result *TaskPreparingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceOwnerId)) {
		query["InstanceOwnerId"] = request.InstanceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TaskPreparing"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TaskPreparingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TaskPreparing(request *TaskPreparingRequest) (_result *TaskPreparingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TaskPreparingResponse{}
	_body, _err := client.TaskPreparingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminateCallWithOptions(request *TerminateCallRequest, runtime *util.RuntimeOptions) (_result *TerminateCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TerminateCall"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TerminateCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminateCall(request *TerminateCallRequest) (_result *TerminateCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateCallResponse{}
	_body, _err := client.TerminateCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadScriptRecordingWithOptions(request *UploadScriptRecordingRequest, runtime *util.RuntimeOptions) (_result *UploadScriptRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadScriptRecording"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadScriptRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadScriptRecording(request *UploadScriptRecordingRequest) (_result *UploadScriptRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadScriptRecordingResponse{}
	_body, _err := client.UploadScriptRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ****
 *
 * @param request WithdrawScriptReviewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return WithdrawScriptReviewResponse
 */
func (client *Client) WithdrawScriptReviewWithOptions(request *WithdrawScriptReviewRequest, runtime *util.RuntimeOptions) (_result *WithdrawScriptReviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptId)) {
		query["ScriptId"] = request.ScriptId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("WithdrawScriptReview"),
		Version:     tea.String("2019-12-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &WithdrawScriptReviewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ****
 *
 * @param request WithdrawScriptReviewRequest
 * @return WithdrawScriptReviewResponse
 */
func (client *Client) WithdrawScriptReview(request *WithdrawScriptReviewRequest) (_result *WithdrawScriptReviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &WithdrawScriptReviewResponse{}
	_body, _err := client.WithdrawScriptReviewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
