// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type BindVariableRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ApiRegionId *string `json:"apiRegionId,omitempty" xml:"apiRegionId,omitempty"`
	ApiType     *string `json:"apiType,omitempty" xml:"apiType,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	DefineId    *string `json:"defineId,omitempty" xml:"defineId,omitempty"`
	DefineIds   *string `json:"defineIds,omitempty" xml:"defineIds,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	EventCode      *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	ExceptionValue *string `json:"exceptionValue,omitempty" xml:"exceptionValue,omitempty"`
	Id             *int64  `json:"id,omitempty" xml:"id,omitempty"`
	OutputField    *string `json:"outputField,omitempty" xml:"outputField,omitempty"`
	OutputType     *string `json:"outputType,omitempty" xml:"outputType,omitempty"`
	Params         *string `json:"params,omitempty" xml:"params,omitempty"`
	ParamsList     *string `json:"paramsList,omitempty" xml:"paramsList,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
	SourceType     *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s BindVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s BindVariableRequest) GoString() string {
	return s.String()
}

func (s *BindVariableRequest) SetLang(v string) *BindVariableRequest {
	s.Lang = &v
	return s
}

func (s *BindVariableRequest) SetApiRegionId(v string) *BindVariableRequest {
	s.ApiRegionId = &v
	return s
}

func (s *BindVariableRequest) SetApiType(v string) *BindVariableRequest {
	s.ApiType = &v
	return s
}

func (s *BindVariableRequest) SetCreateType(v string) *BindVariableRequest {
	s.CreateType = &v
	return s
}

func (s *BindVariableRequest) SetDefineId(v string) *BindVariableRequest {
	s.DefineId = &v
	return s
}

func (s *BindVariableRequest) SetDefineIds(v string) *BindVariableRequest {
	s.DefineIds = &v
	return s
}

func (s *BindVariableRequest) SetDescription(v string) *BindVariableRequest {
	s.Description = &v
	return s
}

func (s *BindVariableRequest) SetEventCode(v string) *BindVariableRequest {
	s.EventCode = &v
	return s
}

func (s *BindVariableRequest) SetExceptionValue(v string) *BindVariableRequest {
	s.ExceptionValue = &v
	return s
}

func (s *BindVariableRequest) SetId(v int64) *BindVariableRequest {
	s.Id = &v
	return s
}

func (s *BindVariableRequest) SetOutputField(v string) *BindVariableRequest {
	s.OutputField = &v
	return s
}

func (s *BindVariableRequest) SetOutputType(v string) *BindVariableRequest {
	s.OutputType = &v
	return s
}

func (s *BindVariableRequest) SetParams(v string) *BindVariableRequest {
	s.Params = &v
	return s
}

func (s *BindVariableRequest) SetParamsList(v string) *BindVariableRequest {
	s.ParamsList = &v
	return s
}

func (s *BindVariableRequest) SetRegId(v string) *BindVariableRequest {
	s.RegId = &v
	return s
}

func (s *BindVariableRequest) SetSourceType(v string) *BindVariableRequest {
	s.SourceType = &v
	return s
}

func (s *BindVariableRequest) SetTitle(v string) *BindVariableRequest {
	s.Title = &v
	return s
}

type BindVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s BindVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindVariableResponseBody) GoString() string {
	return s.String()
}

func (s *BindVariableResponseBody) SetRequestId(v string) *BindVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindVariableResponseBody) SetResultObject(v bool) *BindVariableResponseBody {
	s.ResultObject = &v
	return s
}

type BindVariableResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s BindVariableResponse) GoString() string {
	return s.String()
}

func (s *BindVariableResponse) SetHeaders(v map[string]*string) *BindVariableResponse {
	s.Headers = v
	return s
}

func (s *BindVariableResponse) SetStatusCode(v int32) *BindVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *BindVariableResponse) SetBody(v *BindVariableResponseBody) *BindVariableResponse {
	s.Body = v
	return s
}

type CheckCustVariableLimitRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CheckCustVariableLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCustVariableLimitRequest) GoString() string {
	return s.String()
}

func (s *CheckCustVariableLimitRequest) SetLang(v string) *CheckCustVariableLimitRequest {
	s.Lang = &v
	return s
}

func (s *CheckCustVariableLimitRequest) SetCreateType(v string) *CheckCustVariableLimitRequest {
	s.CreateType = &v
	return s
}

func (s *CheckCustVariableLimitRequest) SetRegId(v string) *CheckCustVariableLimitRequest {
	s.RegId = &v
	return s
}

type CheckCustVariableLimitResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CheckCustVariableLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckCustVariableLimitResponseBody) GoString() string {
	return s.String()
}

func (s *CheckCustVariableLimitResponseBody) SetRequestId(v string) *CheckCustVariableLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckCustVariableLimitResponseBody) SetResultObject(v bool) *CheckCustVariableLimitResponseBody {
	s.ResultObject = &v
	return s
}

type CheckCustVariableLimitResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckCustVariableLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckCustVariableLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCustVariableLimitResponse) GoString() string {
	return s.String()
}

func (s *CheckCustVariableLimitResponse) SetHeaders(v map[string]*string) *CheckCustVariableLimitResponse {
	s.Headers = v
	return s
}

func (s *CheckCustVariableLimitResponse) SetStatusCode(v int32) *CheckCustVariableLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckCustVariableLimitResponse) SetBody(v *CheckCustVariableLimitResponseBody) *CheckCustVariableLimitResponse {
	s.Body = v
	return s
}

type CheckExpressionVariableLimitRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CheckExpressionVariableLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckExpressionVariableLimitRequest) GoString() string {
	return s.String()
}

func (s *CheckExpressionVariableLimitRequest) SetLang(v string) *CheckExpressionVariableLimitRequest {
	s.Lang = &v
	return s
}

func (s *CheckExpressionVariableLimitRequest) SetRegId(v string) *CheckExpressionVariableLimitRequest {
	s.RegId = &v
	return s
}

type CheckExpressionVariableLimitResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CheckExpressionVariableLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckExpressionVariableLimitResponseBody) GoString() string {
	return s.String()
}

func (s *CheckExpressionVariableLimitResponseBody) SetRequestId(v string) *CheckExpressionVariableLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckExpressionVariableLimitResponseBody) SetResultObject(v bool) *CheckExpressionVariableLimitResponseBody {
	s.ResultObject = &v
	return s
}

type CheckExpressionVariableLimitResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckExpressionVariableLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckExpressionVariableLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckExpressionVariableLimitResponse) GoString() string {
	return s.String()
}

func (s *CheckExpressionVariableLimitResponse) SetHeaders(v map[string]*string) *CheckExpressionVariableLimitResponse {
	s.Headers = v
	return s
}

func (s *CheckExpressionVariableLimitResponse) SetStatusCode(v int32) *CheckExpressionVariableLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckExpressionVariableLimitResponse) SetBody(v *CheckExpressionVariableLimitResponseBody) *CheckExpressionVariableLimitResponse {
	s.Body = v
	return s
}

type CheckFieldLimitRequest struct {
	Lang   *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s CheckFieldLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckFieldLimitRequest) GoString() string {
	return s.String()
}

func (s *CheckFieldLimitRequest) SetLang(v string) *CheckFieldLimitRequest {
	s.Lang = &v
	return s
}

func (s *CheckFieldLimitRequest) SetRegId(v string) *CheckFieldLimitRequest {
	s.RegId = &v
	return s
}

func (s *CheckFieldLimitRequest) SetSource(v string) *CheckFieldLimitRequest {
	s.Source = &v
	return s
}

type CheckFieldLimitResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CheckFieldLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckFieldLimitResponseBody) GoString() string {
	return s.String()
}

func (s *CheckFieldLimitResponseBody) SetRequestId(v string) *CheckFieldLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckFieldLimitResponseBody) SetResultObject(v bool) *CheckFieldLimitResponseBody {
	s.ResultObject = &v
	return s
}

type CheckFieldLimitResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckFieldLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckFieldLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckFieldLimitResponse) GoString() string {
	return s.String()
}

func (s *CheckFieldLimitResponse) SetHeaders(v map[string]*string) *CheckFieldLimitResponse {
	s.Headers = v
	return s
}

func (s *CheckFieldLimitResponse) SetStatusCode(v int32) *CheckFieldLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckFieldLimitResponse) SetBody(v *CheckFieldLimitResponseBody) *CheckFieldLimitResponse {
	s.Body = v
	return s
}

type CheckPermissionRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CheckPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckPermissionRequest) GoString() string {
	return s.String()
}

func (s *CheckPermissionRequest) SetLang(v string) *CheckPermissionRequest {
	s.Lang = &v
	return s
}

func (s *CheckPermissionRequest) SetRegId(v string) *CheckPermissionRequest {
	s.RegId = &v
	return s
}

type CheckPermissionResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CheckPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *CheckPermissionResponseBody) SetRequestId(v string) *CheckPermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckPermissionResponseBody) SetResultObject(v bool) *CheckPermissionResponseBody {
	s.ResultObject = &v
	return s
}

type CheckPermissionResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckPermissionResponse) GoString() string {
	return s.String()
}

func (s *CheckPermissionResponse) SetHeaders(v map[string]*string) *CheckPermissionResponse {
	s.Headers = v
	return s
}

func (s *CheckPermissionResponse) SetStatusCode(v int32) *CheckPermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckPermissionResponse) SetBody(v *CheckPermissionResponseBody) *CheckPermissionResponse {
	s.Body = v
	return s
}

type CheckUsageVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CheckUsageVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckUsageVariableRequest) GoString() string {
	return s.String()
}

func (s *CheckUsageVariableRequest) SetLang(v string) *CheckUsageVariableRequest {
	s.Lang = &v
	return s
}

func (s *CheckUsageVariableRequest) SetId(v int64) *CheckUsageVariableRequest {
	s.Id = &v
	return s
}

func (s *CheckUsageVariableRequest) SetRegId(v string) *CheckUsageVariableRequest {
	s.RegId = &v
	return s
}

type CheckUsageVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CheckUsageVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckUsageVariableResponseBody) GoString() string {
	return s.String()
}

func (s *CheckUsageVariableResponseBody) SetRequestId(v string) *CheckUsageVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckUsageVariableResponseBody) SetResultObject(v bool) *CheckUsageVariableResponseBody {
	s.ResultObject = &v
	return s
}

type CheckUsageVariableResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckUsageVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckUsageVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckUsageVariableResponse) GoString() string {
	return s.String()
}

func (s *CheckUsageVariableResponse) SetHeaders(v map[string]*string) *CheckUsageVariableResponse {
	s.Headers = v
	return s
}

func (s *CheckUsageVariableResponse) SetStatusCode(v int32) *CheckUsageVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckUsageVariableResponse) SetBody(v *CheckUsageVariableResponseBody) *CheckUsageVariableResponse {
	s.Body = v
	return s
}

type ClearNameListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	VariableId *int64 `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s ClearNameListRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearNameListRequest) GoString() string {
	return s.String()
}

func (s *ClearNameListRequest) SetLang(v string) *ClearNameListRequest {
	s.Lang = &v
	return s
}

func (s *ClearNameListRequest) SetRegId(v string) *ClearNameListRequest {
	s.RegId = &v
	return s
}

func (s *ClearNameListRequest) SetVariableId(v int64) *ClearNameListRequest {
	s.VariableId = &v
	return s
}

type ClearNameListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ClearNameListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearNameListResponseBody) GoString() string {
	return s.String()
}

func (s *ClearNameListResponseBody) SetRequestId(v string) *ClearNameListResponseBody {
	s.RequestId = &v
	return s
}

func (s *ClearNameListResponseBody) SetResultObject(v bool) *ClearNameListResponseBody {
	s.ResultObject = &v
	return s
}

type ClearNameListResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ClearNameListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ClearNameListResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearNameListResponse) GoString() string {
	return s.String()
}

func (s *ClearNameListResponse) SetHeaders(v map[string]*string) *ClearNameListResponse {
	s.Headers = v
	return s
}

func (s *ClearNameListResponse) SetStatusCode(v int32) *ClearNameListResponse {
	s.StatusCode = &v
	return s
}

func (s *ClearNameListResponse) SetBody(v *ClearNameListResponseBody) *ClearNameListResponse {
	s.Body = v
	return s
}

type CreateAnalysisConditionFavoriteRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// This parameter is required.
	EventBeginTime *int64 `json:"eventBeginTime,omitempty" xml:"eventBeginTime,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	// This parameter is required.
	EventEndTime *int64  `json:"eventEndTime,omitempty" xml:"eventEndTime,omitempty"`
	FieldName    *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldValue   *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateAnalysisConditionFavoriteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAnalysisConditionFavoriteRequest) GoString() string {
	return s.String()
}

func (s *CreateAnalysisConditionFavoriteRequest) SetLang(v string) *CreateAnalysisConditionFavoriteRequest {
	s.Lang = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetCondition(v string) *CreateAnalysisConditionFavoriteRequest {
	s.Condition = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetEventBeginTime(v int64) *CreateAnalysisConditionFavoriteRequest {
	s.EventBeginTime = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetEventCodes(v string) *CreateAnalysisConditionFavoriteRequest {
	s.EventCodes = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetEventEndTime(v int64) *CreateAnalysisConditionFavoriteRequest {
	s.EventEndTime = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetFieldName(v string) *CreateAnalysisConditionFavoriteRequest {
	s.FieldName = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetFieldValue(v string) *CreateAnalysisConditionFavoriteRequest {
	s.FieldValue = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetName(v string) *CreateAnalysisConditionFavoriteRequest {
	s.Name = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetRegId(v string) *CreateAnalysisConditionFavoriteRequest {
	s.RegId = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteRequest) SetType(v string) *CreateAnalysisConditionFavoriteRequest {
	s.Type = &v
	return s
}

type CreateAnalysisConditionFavoriteResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateAnalysisConditionFavoriteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAnalysisConditionFavoriteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAnalysisConditionFavoriteResponseBody) SetRequestId(v string) *CreateAnalysisConditionFavoriteResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteResponseBody) SetResultObject(v bool) *CreateAnalysisConditionFavoriteResponseBody {
	s.ResultObject = &v
	return s
}

type CreateAnalysisConditionFavoriteResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAnalysisConditionFavoriteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAnalysisConditionFavoriteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAnalysisConditionFavoriteResponse) GoString() string {
	return s.String()
}

func (s *CreateAnalysisConditionFavoriteResponse) SetHeaders(v map[string]*string) *CreateAnalysisConditionFavoriteResponse {
	s.Headers = v
	return s
}

func (s *CreateAnalysisConditionFavoriteResponse) SetStatusCode(v int32) *CreateAnalysisConditionFavoriteResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAnalysisConditionFavoriteResponse) SetBody(v *CreateAnalysisConditionFavoriteResponseBody) *CreateAnalysisConditionFavoriteResponse {
	s.Body = v
	return s
}

type CreateAnalysisExportTaskRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Columns    *string `json:"columns,omitempty" xml:"columns,omitempty"`
	Conditions *string `json:"conditions,omitempty" xml:"conditions,omitempty"`
	// This parameter is required.
	EventBeginTime *int64 `json:"eventBeginTime,omitempty" xml:"eventBeginTime,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	// This parameter is required.
	EventEndTime *int64  `json:"eventEndTime,omitempty" xml:"eventEndTime,omitempty"`
	FieldName    *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldValue   *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
	// This parameter is required.
	FileFormat *string `json:"fileFormat,omitempty" xml:"fileFormat,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// This parameter is required.
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateAnalysisExportTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAnalysisExportTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateAnalysisExportTaskRequest) SetLang(v string) *CreateAnalysisExportTaskRequest {
	s.Lang = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetColumns(v string) *CreateAnalysisExportTaskRequest {
	s.Columns = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetConditions(v string) *CreateAnalysisExportTaskRequest {
	s.Conditions = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetEventBeginTime(v int64) *CreateAnalysisExportTaskRequest {
	s.EventBeginTime = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetEventCodes(v string) *CreateAnalysisExportTaskRequest {
	s.EventCodes = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetEventEndTime(v int64) *CreateAnalysisExportTaskRequest {
	s.EventEndTime = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetFieldName(v string) *CreateAnalysisExportTaskRequest {
	s.FieldName = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetFieldValue(v string) *CreateAnalysisExportTaskRequest {
	s.FieldValue = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetFileFormat(v string) *CreateAnalysisExportTaskRequest {
	s.FileFormat = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetRegId(v string) *CreateAnalysisExportTaskRequest {
	s.RegId = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetScope(v string) *CreateAnalysisExportTaskRequest {
	s.Scope = &v
	return s
}

func (s *CreateAnalysisExportTaskRequest) SetType(v string) *CreateAnalysisExportTaskRequest {
	s.Type = &v
	return s
}

type CreateAnalysisExportTaskResponseBody struct {
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *CreateAnalysisExportTaskResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s CreateAnalysisExportTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAnalysisExportTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAnalysisExportTaskResponseBody) SetRequestId(v string) *CreateAnalysisExportTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBody) SetResultObject(v *CreateAnalysisExportTaskResponseBodyResultObject) *CreateAnalysisExportTaskResponseBody {
	s.ResultObject = v
	return s
}

type CreateAnalysisExportTaskResponseBodyResultObject struct {
	Columns        *string `json:"columns,omitempty" xml:"columns,omitempty"`
	Conditions     *string `json:"conditions,omitempty" xml:"conditions,omitempty"`
	EventBeginTime *int64  `json:"eventBeginTime,omitempty" xml:"eventBeginTime,omitempty"`
	EventCodes     *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	EventEndTime   *int64  `json:"eventEndTime,omitempty" xml:"eventEndTime,omitempty"`
	FileFormat     *string `json:"fileFormat,omitempty" xml:"fileFormat,omitempty"`
	OssKey         *string `json:"ossKey,omitempty" xml:"ossKey,omitempty"`
	Scope          *string `json:"scope,omitempty" xml:"scope,omitempty"`
	Status         *string `json:"status,omitempty" xml:"status,omitempty"`
	Type           *string `json:"type,omitempty" xml:"type,omitempty"`
	UserId         *int64  `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s CreateAnalysisExportTaskResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s CreateAnalysisExportTaskResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetColumns(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.Columns = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetConditions(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.Conditions = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetEventBeginTime(v int64) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.EventBeginTime = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetEventCodes(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.EventCodes = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetEventEndTime(v int64) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.EventEndTime = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetFileFormat(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.FileFormat = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetOssKey(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.OssKey = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetScope(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.Scope = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetStatus(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetType(v string) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.Type = &v
	return s
}

func (s *CreateAnalysisExportTaskResponseBodyResultObject) SetUserId(v int64) *CreateAnalysisExportTaskResponseBodyResultObject {
	s.UserId = &v
	return s
}

type CreateAnalysisExportTaskResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAnalysisExportTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAnalysisExportTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAnalysisExportTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateAnalysisExportTaskResponse) SetHeaders(v map[string]*string) *CreateAnalysisExportTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateAnalysisExportTaskResponse) SetStatusCode(v int32) *CreateAnalysisExportTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAnalysisExportTaskResponse) SetBody(v *CreateAnalysisExportTaskResponseBody) *CreateAnalysisExportTaskResponse {
	s.Body = v
	return s
}

type CreateAppKeyRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CreateAppKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppKeyRequest) GoString() string {
	return s.String()
}

func (s *CreateAppKeyRequest) SetLang(v string) *CreateAppKeyRequest {
	s.Lang = &v
	return s
}

func (s *CreateAppKeyRequest) SetRegId(v string) *CreateAppKeyRequest {
	s.RegId = &v
	return s
}

type CreateAppKeyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateAppKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAppKeyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAppKeyResponseBody) SetRequestId(v string) *CreateAppKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAppKeyResponseBody) SetData(v bool) *CreateAppKeyResponseBody {
	s.Data = &v
	return s
}

type CreateAppKeyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAppKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAppKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppKeyResponse) GoString() string {
	return s.String()
}

func (s *CreateAppKeyResponse) SetHeaders(v map[string]*string) *CreateAppKeyResponse {
	s.Headers = v
	return s
}

func (s *CreateAppKeyResponse) SetStatusCode(v int32) *CreateAppKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAppKeyResponse) SetBody(v *CreateAppKeyResponseBody) *CreateAppKeyResponse {
	s.Body = v
	return s
}

type CreateAuthorizationUserRequest struct {
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BindId          *int64  `json:"bindId,omitempty" xml:"bindId,omitempty"`
	CreateType      *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventTemplateId *int64  `json:"eventTemplateId,omitempty" xml:"eventTemplateId,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CreateAuthorizationUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthorizationUserRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthorizationUserRequest) SetLang(v string) *CreateAuthorizationUserRequest {
	s.Lang = &v
	return s
}

func (s *CreateAuthorizationUserRequest) SetBindId(v int64) *CreateAuthorizationUserRequest {
	s.BindId = &v
	return s
}

func (s *CreateAuthorizationUserRequest) SetCreateType(v string) *CreateAuthorizationUserRequest {
	s.CreateType = &v
	return s
}

func (s *CreateAuthorizationUserRequest) SetEventTemplateId(v int64) *CreateAuthorizationUserRequest {
	s.EventTemplateId = &v
	return s
}

func (s *CreateAuthorizationUserRequest) SetRegId(v string) *CreateAuthorizationUserRequest {
	s.RegId = &v
	return s
}

type CreateAuthorizationUserResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateAuthorizationUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthorizationUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAuthorizationUserResponseBody) SetRequestId(v string) *CreateAuthorizationUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAuthorizationUserResponseBody) SetResultObject(v bool) *CreateAuthorizationUserResponseBody {
	s.ResultObject = &v
	return s
}

type CreateAuthorizationUserResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAuthorizationUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAuthorizationUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthorizationUserResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthorizationUserResponse) SetHeaders(v map[string]*string) *CreateAuthorizationUserResponse {
	s.Headers = v
	return s
}

func (s *CreateAuthorizationUserResponse) SetStatusCode(v int32) *CreateAuthorizationUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAuthorizationUserResponse) SetBody(v *CreateAuthorizationUserResponseBody) *CreateAuthorizationUserResponse {
	s.Body = v
	return s
}

type CreateCustVariableRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Condition   *string `json:"condition,omitempty" xml:"condition,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	EventCodes       *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	HistoryValueType *string `json:"historyValueType,omitempty" xml:"historyValueType,omitempty"`
	Object           *string `json:"object,omitempty" xml:"object,omitempty"`
	Outputs          *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	RegId            *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// This parameter is required.
	TimeType *string `json:"timeType,omitempty" xml:"timeType,omitempty"`
	// This parameter is required.
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
	TwCount *int32  `json:"twCount,omitempty" xml:"twCount,omitempty"`
	// This parameter is required.
	VelocityFC *string `json:"velocityFC,omitempty" xml:"velocityFC,omitempty"`
	// This parameter is required.
	VelocityTW *string `json:"velocityTW,omitempty" xml:"velocityTW,omitempty"`
}

func (s CreateCustVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustVariableRequest) GoString() string {
	return s.String()
}

func (s *CreateCustVariableRequest) SetLang(v string) *CreateCustVariableRequest {
	s.Lang = &v
	return s
}

func (s *CreateCustVariableRequest) SetCondition(v string) *CreateCustVariableRequest {
	s.Condition = &v
	return s
}

func (s *CreateCustVariableRequest) SetCreateType(v string) *CreateCustVariableRequest {
	s.CreateType = &v
	return s
}

func (s *CreateCustVariableRequest) SetDescription(v string) *CreateCustVariableRequest {
	s.Description = &v
	return s
}

func (s *CreateCustVariableRequest) SetEventCodes(v string) *CreateCustVariableRequest {
	s.EventCodes = &v
	return s
}

func (s *CreateCustVariableRequest) SetHistoryValueType(v string) *CreateCustVariableRequest {
	s.HistoryValueType = &v
	return s
}

func (s *CreateCustVariableRequest) SetObject(v string) *CreateCustVariableRequest {
	s.Object = &v
	return s
}

func (s *CreateCustVariableRequest) SetOutputs(v string) *CreateCustVariableRequest {
	s.Outputs = &v
	return s
}

func (s *CreateCustVariableRequest) SetRegId(v string) *CreateCustVariableRequest {
	s.RegId = &v
	return s
}

func (s *CreateCustVariableRequest) SetSubject(v string) *CreateCustVariableRequest {
	s.Subject = &v
	return s
}

func (s *CreateCustVariableRequest) SetTimeType(v string) *CreateCustVariableRequest {
	s.TimeType = &v
	return s
}

func (s *CreateCustVariableRequest) SetTitle(v string) *CreateCustVariableRequest {
	s.Title = &v
	return s
}

func (s *CreateCustVariableRequest) SetTwCount(v int32) *CreateCustVariableRequest {
	s.TwCount = &v
	return s
}

func (s *CreateCustVariableRequest) SetVelocityFC(v string) *CreateCustVariableRequest {
	s.VelocityFC = &v
	return s
}

func (s *CreateCustVariableRequest) SetVelocityTW(v string) *CreateCustVariableRequest {
	s.VelocityTW = &v
	return s
}

type CreateCustVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateCustVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustVariableResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustVariableResponseBody) SetRequestId(v string) *CreateCustVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCustVariableResponseBody) SetResultObject(v bool) *CreateCustVariableResponseBody {
	s.ResultObject = &v
	return s
}

type CreateCustVariableResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCustVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCustVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustVariableResponse) GoString() string {
	return s.String()
}

func (s *CreateCustVariableResponse) SetHeaders(v map[string]*string) *CreateCustVariableResponse {
	s.Headers = v
	return s
}

func (s *CreateCustVariableResponse) SetStatusCode(v int32) *CreateCustVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustVariableResponse) SetBody(v *CreateCustVariableResponseBody) *CreateCustVariableResponse {
	s.Body = v
	return s
}

type CreateDataSourceRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	OssKey *string `json:"ossKey,omitempty" xml:"ossKey,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateDataSourceRequest) SetLang(v string) *CreateDataSourceRequest {
	s.Lang = &v
	return s
}

func (s *CreateDataSourceRequest) SetDescription(v string) *CreateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateDataSourceRequest) SetName(v string) *CreateDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateDataSourceRequest) SetOssKey(v string) *CreateDataSourceRequest {
	s.OssKey = &v
	return s
}

func (s *CreateDataSourceRequest) SetRegId(v string) *CreateDataSourceRequest {
	s.RegId = &v
	return s
}

func (s *CreateDataSourceRequest) SetType(v string) *CreateDataSourceRequest {
	s.Type = &v
	return s
}

type CreateDataSourceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponseBody) SetRequestId(v string) *CreateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDataSourceResponseBody) SetResultObject(v bool) *CreateDataSourceResponseBody {
	s.ResultObject = &v
	return s
}

type CreateDataSourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponse) SetHeaders(v map[string]*string) *CreateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateDataSourceResponse) SetStatusCode(v int32) *CreateDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataSourceResponse) SetBody(v *CreateDataSourceResponseBody) *CreateDataSourceResponse {
	s.Body = v
	return s
}

type CreateEventRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType     *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventName      *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	InputFieldsStr *string `json:"inputFieldsStr,omitempty" xml:"inputFieldsStr,omitempty"`
	Memo           *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateCode   *string `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	TemplateName   *string `json:"templateName,omitempty" xml:"templateName,omitempty"`
	TemplateType   *string `json:"templateType,omitempty" xml:"templateType,omitempty"`
}

func (s CreateEventRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequest) GoString() string {
	return s.String()
}

func (s *CreateEventRequest) SetLang(v string) *CreateEventRequest {
	s.Lang = &v
	return s
}

func (s *CreateEventRequest) SetCreateType(v string) *CreateEventRequest {
	s.CreateType = &v
	return s
}

func (s *CreateEventRequest) SetEventName(v string) *CreateEventRequest {
	s.EventName = &v
	return s
}

func (s *CreateEventRequest) SetInputFieldsStr(v string) *CreateEventRequest {
	s.InputFieldsStr = &v
	return s
}

func (s *CreateEventRequest) SetMemo(v string) *CreateEventRequest {
	s.Memo = &v
	return s
}

func (s *CreateEventRequest) SetRegId(v string) *CreateEventRequest {
	s.RegId = &v
	return s
}

func (s *CreateEventRequest) SetTemplateCode(v string) *CreateEventRequest {
	s.TemplateCode = &v
	return s
}

func (s *CreateEventRequest) SetTemplateName(v string) *CreateEventRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateEventRequest) SetTemplateType(v string) *CreateEventRequest {
	s.TemplateType = &v
	return s
}

type CreateEventResponseBody struct {
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s CreateEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBody) SetData(v bool) *CreateEventResponseBody {
	s.Data = &v
	return s
}

func (s *CreateEventResponseBody) SetRequestId(v string) *CreateEventResponseBody {
	s.RequestId = &v
	return s
}

type CreateEventResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEventResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponse) GoString() string {
	return s.String()
}

func (s *CreateEventResponse) SetHeaders(v map[string]*string) *CreateEventResponse {
	s.Headers = v
	return s
}

func (s *CreateEventResponse) SetStatusCode(v int32) *CreateEventResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEventResponse) SetBody(v *CreateEventResponseBody) *CreateEventResponse {
	s.Body = v
	return s
}

type CreateExpressionVariableRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	// This parameter is required.
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// This parameter is required.
	ExpressionTitle    *string `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	ExpressionVariable *string `json:"expressionVariable,omitempty" xml:"expressionVariable,omitempty"`
	// This parameter is required.
	Outlier *string `json:"outlier,omitempty" xml:"outlier,omitempty"`
	// This parameter is required.
	Outputs *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateExpressionVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExpressionVariableRequest) GoString() string {
	return s.String()
}

func (s *CreateExpressionVariableRequest) SetLang(v string) *CreateExpressionVariableRequest {
	s.Lang = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetDescription(v string) *CreateExpressionVariableRequest {
	s.Description = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetEventCode(v string) *CreateExpressionVariableRequest {
	s.EventCode = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetExpression(v string) *CreateExpressionVariableRequest {
	s.Expression = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetExpressionTitle(v string) *CreateExpressionVariableRequest {
	s.ExpressionTitle = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetExpressionVariable(v string) *CreateExpressionVariableRequest {
	s.ExpressionVariable = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetOutlier(v string) *CreateExpressionVariableRequest {
	s.Outlier = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetOutputs(v string) *CreateExpressionVariableRequest {
	s.Outputs = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetRegId(v string) *CreateExpressionVariableRequest {
	s.RegId = &v
	return s
}

func (s *CreateExpressionVariableRequest) SetTitle(v string) *CreateExpressionVariableRequest {
	s.Title = &v
	return s
}

type CreateExpressionVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateExpressionVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateExpressionVariableResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExpressionVariableResponseBody) SetRequestId(v string) *CreateExpressionVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateExpressionVariableResponseBody) SetResultObject(v bool) *CreateExpressionVariableResponseBody {
	s.ResultObject = &v
	return s
}

type CreateExpressionVariableResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateExpressionVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateExpressionVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExpressionVariableResponse) GoString() string {
	return s.String()
}

func (s *CreateExpressionVariableResponse) SetHeaders(v map[string]*string) *CreateExpressionVariableResponse {
	s.Headers = v
	return s
}

func (s *CreateExpressionVariableResponse) SetStatusCode(v int32) *CreateExpressionVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateExpressionVariableResponse) SetBody(v *CreateExpressionVariableResponseBody) *CreateExpressionVariableResponse {
	s.Body = v
	return s
}

type CreateFieldRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Classify    *string `json:"classify,omitempty" xml:"classify,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EnumData    *string `json:"enumData,omitempty" xml:"enumData,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	Title  *string `json:"title,omitempty" xml:"title,omitempty"`
	Type   *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFieldRequest) GoString() string {
	return s.String()
}

func (s *CreateFieldRequest) SetLang(v string) *CreateFieldRequest {
	s.Lang = &v
	return s
}

func (s *CreateFieldRequest) SetClassify(v string) *CreateFieldRequest {
	s.Classify = &v
	return s
}

func (s *CreateFieldRequest) SetDescription(v string) *CreateFieldRequest {
	s.Description = &v
	return s
}

func (s *CreateFieldRequest) SetEnumData(v string) *CreateFieldRequest {
	s.EnumData = &v
	return s
}

func (s *CreateFieldRequest) SetName(v string) *CreateFieldRequest {
	s.Name = &v
	return s
}

func (s *CreateFieldRequest) SetRegId(v string) *CreateFieldRequest {
	s.RegId = &v
	return s
}

func (s *CreateFieldRequest) SetSource(v string) *CreateFieldRequest {
	s.Source = &v
	return s
}

func (s *CreateFieldRequest) SetTitle(v string) *CreateFieldRequest {
	s.Title = &v
	return s
}

func (s *CreateFieldRequest) SetType(v string) *CreateFieldRequest {
	s.Type = &v
	return s
}

type CreateFieldResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFieldResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFieldResponseBody) SetRequestId(v string) *CreateFieldResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFieldResponseBody) SetResultObject(v bool) *CreateFieldResponseBody {
	s.ResultObject = &v
	return s
}

type CreateFieldResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFieldResponse) GoString() string {
	return s.String()
}

func (s *CreateFieldResponse) SetHeaders(v map[string]*string) *CreateFieldResponse {
	s.Headers = v
	return s
}

func (s *CreateFieldResponse) SetStatusCode(v int32) *CreateFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFieldResponse) SetBody(v *CreateFieldResponseBody) *CreateFieldResponse {
	s.Body = v
	return s
}

type CreateGroupSignRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	SignList *string `json:"SignList,omitempty" xml:"SignList,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CreateGroupSignRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupSignRequest) GoString() string {
	return s.String()
}

func (s *CreateGroupSignRequest) SetLang(v string) *CreateGroupSignRequest {
	s.Lang = &v
	return s
}

func (s *CreateGroupSignRequest) SetSignList(v string) *CreateGroupSignRequest {
	s.SignList = &v
	return s
}

func (s *CreateGroupSignRequest) SetRegId(v string) *CreateGroupSignRequest {
	s.RegId = &v
	return s
}

type CreateGroupSignResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateGroupSignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupSignResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGroupSignResponseBody) SetRequestId(v string) *CreateGroupSignResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGroupSignResponseBody) SetData(v bool) *CreateGroupSignResponseBody {
	s.Data = &v
	return s
}

type CreateGroupSignResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateGroupSignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGroupSignResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupSignResponse) GoString() string {
	return s.String()
}

func (s *CreateGroupSignResponse) SetHeaders(v map[string]*string) *CreateGroupSignResponse {
	s.Headers = v
	return s
}

func (s *CreateGroupSignResponse) SetStatusCode(v int32) *CreateGroupSignResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGroupSignResponse) SetBody(v *CreateGroupSignResponseBody) *CreateGroupSignResponse {
	s.Body = v
	return s
}

type CreateMonitorTaskRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BizType *string `json:"bizType,omitempty" xml:"bizType,omitempty"`
	// This parameter is required.
	CycleType *string `json:"cycleType,omitempty" xml:"cycleType,omitempty"`
	// This parameter is required.
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// This parameter is required.
	FilePath   *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	ListdayStr *string `json:"listdayStr,omitempty" xml:"listdayStr,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s CreateMonitorTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorTaskRequest) SetLang(v string) *CreateMonitorTaskRequest {
	s.Lang = &v
	return s
}

func (s *CreateMonitorTaskRequest) SetBizType(v string) *CreateMonitorTaskRequest {
	s.BizType = &v
	return s
}

func (s *CreateMonitorTaskRequest) SetCycleType(v string) *CreateMonitorTaskRequest {
	s.CycleType = &v
	return s
}

func (s *CreateMonitorTaskRequest) SetEndTime(v int64) *CreateMonitorTaskRequest {
	s.EndTime = &v
	return s
}

func (s *CreateMonitorTaskRequest) SetFilePath(v string) *CreateMonitorTaskRequest {
	s.FilePath = &v
	return s
}

func (s *CreateMonitorTaskRequest) SetListdayStr(v string) *CreateMonitorTaskRequest {
	s.ListdayStr = &v
	return s
}

func (s *CreateMonitorTaskRequest) SetRegId(v string) *CreateMonitorTaskRequest {
	s.RegId = &v
	return s
}

func (s *CreateMonitorTaskRequest) SetStartTime(v int64) *CreateMonitorTaskRequest {
	s.StartTime = &v
	return s
}

type CreateMonitorTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateMonitorTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorTaskResponseBody) SetRequestId(v string) *CreateMonitorTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMonitorTaskResponseBody) SetResultObject(v bool) *CreateMonitorTaskResponseBody {
	s.ResultObject = &v
	return s
}

type CreateMonitorTaskResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitorTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitorTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorTaskResponse) SetHeaders(v map[string]*string) *CreateMonitorTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorTaskResponse) SetStatusCode(v int32) *CreateMonitorTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorTaskResponse) SetBody(v *CreateMonitorTaskResponseBody) *CreateMonitorTaskResponse {
	s.Body = v
	return s
}

type CreatePocRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConfigStr   *string `json:"configStr,omitempty" xml:"configStr,omitempty"`
	FileName    *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	FileType    *string `json:"fileType,omitempty" xml:"fileType,omitempty"`
	FileUrl     *string `json:"fileUrl,omitempty" xml:"fileUrl,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
	ServiceName *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	TaskName    *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s CreatePocRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePocRequest) GoString() string {
	return s.String()
}

func (s *CreatePocRequest) SetLang(v string) *CreatePocRequest {
	s.Lang = &v
	return s
}

func (s *CreatePocRequest) SetConfigStr(v string) *CreatePocRequest {
	s.ConfigStr = &v
	return s
}

func (s *CreatePocRequest) SetFileName(v string) *CreatePocRequest {
	s.FileName = &v
	return s
}

func (s *CreatePocRequest) SetFileType(v string) *CreatePocRequest {
	s.FileType = &v
	return s
}

func (s *CreatePocRequest) SetFileUrl(v string) *CreatePocRequest {
	s.FileUrl = &v
	return s
}

func (s *CreatePocRequest) SetRegId(v string) *CreatePocRequest {
	s.RegId = &v
	return s
}

func (s *CreatePocRequest) SetServiceCode(v string) *CreatePocRequest {
	s.ServiceCode = &v
	return s
}

func (s *CreatePocRequest) SetServiceName(v string) *CreatePocRequest {
	s.ServiceName = &v
	return s
}

func (s *CreatePocRequest) SetTaskName(v string) *CreatePocRequest {
	s.TaskName = &v
	return s
}

type CreatePocResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreatePocResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePocResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePocResponseBody) SetRequestId(v string) *CreatePocResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePocResponseBody) SetResultObject(v bool) *CreatePocResponseBody {
	s.ResultObject = &v
	return s
}

type CreatePocResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePocResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePocResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePocResponse) GoString() string {
	return s.String()
}

func (s *CreatePocResponse) SetHeaders(v map[string]*string) *CreatePocResponse {
	s.Headers = v
	return s
}

func (s *CreatePocResponse) SetStatusCode(v int32) *CreatePocResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePocResponse) SetBody(v *CreatePocResponseBody) *CreatePocResponse {
	s.Body = v
	return s
}

type CreatePocEvRequest struct {
	DateFormat  *string `json:"DateFormat,omitempty" xml:"DateFormat,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileType    *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	FileUrl     *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId       *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
	ServiceCode *string `json:"ServiceCode,omitempty" xml:"ServiceCode,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Tab         *string `json:"Tab,omitempty" xml:"Tab,omitempty"`
	TaskName    *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreatePocEvRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePocEvRequest) GoString() string {
	return s.String()
}

func (s *CreatePocEvRequest) SetDateFormat(v string) *CreatePocEvRequest {
	s.DateFormat = &v
	return s
}

func (s *CreatePocEvRequest) SetFileName(v string) *CreatePocEvRequest {
	s.FileName = &v
	return s
}

func (s *CreatePocEvRequest) SetFileType(v string) *CreatePocEvRequest {
	s.FileType = &v
	return s
}

func (s *CreatePocEvRequest) SetFileUrl(v string) *CreatePocEvRequest {
	s.FileUrl = &v
	return s
}

func (s *CreatePocEvRequest) SetLang(v string) *CreatePocEvRequest {
	s.Lang = &v
	return s
}

func (s *CreatePocEvRequest) SetRegId(v string) *CreatePocEvRequest {
	s.RegId = &v
	return s
}

func (s *CreatePocEvRequest) SetServiceCode(v string) *CreatePocEvRequest {
	s.ServiceCode = &v
	return s
}

func (s *CreatePocEvRequest) SetServiceName(v string) *CreatePocEvRequest {
	s.ServiceName = &v
	return s
}

func (s *CreatePocEvRequest) SetTab(v string) *CreatePocEvRequest {
	s.Tab = &v
	return s
}

func (s *CreatePocEvRequest) SetTaskName(v string) *CreatePocEvRequest {
	s.TaskName = &v
	return s
}

func (s *CreatePocEvRequest) SetType(v string) *CreatePocEvRequest {
	s.Type = &v
	return s
}

type CreatePocEvResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject   *string `json:"ResultObject,omitempty" xml:"ResultObject,omitempty"`
}

func (s CreatePocEvResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePocEvResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePocEvResponseBody) SetCode(v string) *CreatePocEvResponseBody {
	s.Code = &v
	return s
}

func (s *CreatePocEvResponseBody) SetHttpStatusCode(v string) *CreatePocEvResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreatePocEvResponseBody) SetMessage(v string) *CreatePocEvResponseBody {
	s.Message = &v
	return s
}

func (s *CreatePocEvResponseBody) SetRequestId(v string) *CreatePocEvResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePocEvResponseBody) SetResultObject(v string) *CreatePocEvResponseBody {
	s.ResultObject = &v
	return s
}

type CreatePocEvResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePocEvResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePocEvResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePocEvResponse) GoString() string {
	return s.String()
}

func (s *CreatePocEvResponse) SetHeaders(v map[string]*string) *CreatePocEvResponse {
	s.Headers = v
	return s
}

func (s *CreatePocEvResponse) SetStatusCode(v int32) *CreatePocEvResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePocEvResponse) SetBody(v *CreatePocEvResponseBody) *CreatePocEvResponse {
	s.Body = v
	return s
}

type CreateQueryVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	DataSourceCode *string `json:"dataSourceCode,omitempty" xml:"dataSourceCode,omitempty"`
	Description    *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	// This parameter is required.
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// This parameter is required.
	ExpressionTitle *string `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	// This parameter is required.
	ExpressionVariable *string `json:"expressionVariable,omitempty" xml:"expressionVariable,omitempty"`
	// This parameter is required.
	Outlier *string `json:"outlier,omitempty" xml:"outlier,omitempty"`
	// This parameter is required.
	Outputs *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateQueryVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryVariableRequest) GoString() string {
	return s.String()
}

func (s *CreateQueryVariableRequest) SetLang(v string) *CreateQueryVariableRequest {
	s.Lang = &v
	return s
}

func (s *CreateQueryVariableRequest) SetDataSourceCode(v string) *CreateQueryVariableRequest {
	s.DataSourceCode = &v
	return s
}

func (s *CreateQueryVariableRequest) SetDescription(v string) *CreateQueryVariableRequest {
	s.Description = &v
	return s
}

func (s *CreateQueryVariableRequest) SetEventCode(v string) *CreateQueryVariableRequest {
	s.EventCode = &v
	return s
}

func (s *CreateQueryVariableRequest) SetExpression(v string) *CreateQueryVariableRequest {
	s.Expression = &v
	return s
}

func (s *CreateQueryVariableRequest) SetExpressionTitle(v string) *CreateQueryVariableRequest {
	s.ExpressionTitle = &v
	return s
}

func (s *CreateQueryVariableRequest) SetExpressionVariable(v string) *CreateQueryVariableRequest {
	s.ExpressionVariable = &v
	return s
}

func (s *CreateQueryVariableRequest) SetOutlier(v string) *CreateQueryVariableRequest {
	s.Outlier = &v
	return s
}

func (s *CreateQueryVariableRequest) SetOutputs(v string) *CreateQueryVariableRequest {
	s.Outputs = &v
	return s
}

func (s *CreateQueryVariableRequest) SetRegId(v string) *CreateQueryVariableRequest {
	s.RegId = &v
	return s
}

func (s *CreateQueryVariableRequest) SetTitle(v string) *CreateQueryVariableRequest {
	s.Title = &v
	return s
}

type CreateQueryVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateQueryVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryVariableResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQueryVariableResponseBody) SetRequestId(v string) *CreateQueryVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQueryVariableResponseBody) SetResultObject(v bool) *CreateQueryVariableResponseBody {
	s.ResultObject = &v
	return s
}

type CreateQueryVariableResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateQueryVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateQueryVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryVariableResponse) GoString() string {
	return s.String()
}

func (s *CreateQueryVariableResponse) SetHeaders(v map[string]*string) *CreateQueryVariableResponse {
	s.Headers = v
	return s
}

func (s *CreateQueryVariableResponse) SetStatusCode(v int32) *CreateQueryVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateQueryVariableResponse) SetBody(v *CreateQueryVariableResponseBody) *CreateQueryVariableResponse {
	s.Body = v
	return s
}

type CreateRecommendEventRuleRequest struct {
	Lang                *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCode           *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName           *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	RecommendRuleIdsStr *string `json:"recommendRuleIdsStr,omitempty" xml:"recommendRuleIdsStr,omitempty"`
	RegId               *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TaskId              *int64  `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s CreateRecommendEventRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRecommendEventRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateRecommendEventRuleRequest) SetLang(v string) *CreateRecommendEventRuleRequest {
	s.Lang = &v
	return s
}

func (s *CreateRecommendEventRuleRequest) SetEventCode(v string) *CreateRecommendEventRuleRequest {
	s.EventCode = &v
	return s
}

func (s *CreateRecommendEventRuleRequest) SetEventName(v string) *CreateRecommendEventRuleRequest {
	s.EventName = &v
	return s
}

func (s *CreateRecommendEventRuleRequest) SetRecommendRuleIdsStr(v string) *CreateRecommendEventRuleRequest {
	s.RecommendRuleIdsStr = &v
	return s
}

func (s *CreateRecommendEventRuleRequest) SetRegId(v string) *CreateRecommendEventRuleRequest {
	s.RegId = &v
	return s
}

func (s *CreateRecommendEventRuleRequest) SetTaskId(v int64) *CreateRecommendEventRuleRequest {
	s.TaskId = &v
	return s
}

type CreateRecommendEventRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateRecommendEventRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRecommendEventRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRecommendEventRuleResponseBody) SetRequestId(v string) *CreateRecommendEventRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRecommendEventRuleResponseBody) SetResultObject(v bool) *CreateRecommendEventRuleResponseBody {
	s.ResultObject = &v
	return s
}

type CreateRecommendEventRuleResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRecommendEventRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRecommendEventRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRecommendEventRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateRecommendEventRuleResponse) SetHeaders(v map[string]*string) *CreateRecommendEventRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateRecommendEventRuleResponse) SetStatusCode(v int32) *CreateRecommendEventRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRecommendEventRuleResponse) SetBody(v *CreateRecommendEventRuleResponseBody) *CreateRecommendEventRuleResponse {
	s.Body = v
	return s
}

type CreateRecommendTaskRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	SampleId *int64 `json:"sampleId,omitempty" xml:"sampleId,omitempty"`
	// This parameter is required.
	VariablesStr *string `json:"variablesStr,omitempty" xml:"variablesStr,omitempty"`
	// This parameter is required.
	VelocitiesStr *string `json:"velocitiesStr,omitempty" xml:"velocitiesStr,omitempty"`
}

func (s CreateRecommendTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRecommendTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateRecommendTaskRequest) SetLang(v string) *CreateRecommendTaskRequest {
	s.Lang = &v
	return s
}

func (s *CreateRecommendTaskRequest) SetName(v string) *CreateRecommendTaskRequest {
	s.Name = &v
	return s
}

func (s *CreateRecommendTaskRequest) SetRegId(v string) *CreateRecommendTaskRequest {
	s.RegId = &v
	return s
}

func (s *CreateRecommendTaskRequest) SetSampleId(v int64) *CreateRecommendTaskRequest {
	s.SampleId = &v
	return s
}

func (s *CreateRecommendTaskRequest) SetVariablesStr(v string) *CreateRecommendTaskRequest {
	s.VariablesStr = &v
	return s
}

func (s *CreateRecommendTaskRequest) SetVelocitiesStr(v string) *CreateRecommendTaskRequest {
	s.VelocitiesStr = &v
	return s
}

type CreateRecommendTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateRecommendTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRecommendTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRecommendTaskResponseBody) SetRequestId(v string) *CreateRecommendTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRecommendTaskResponseBody) SetResultObject(v bool) *CreateRecommendTaskResponseBody {
	s.ResultObject = &v
	return s
}

type CreateRecommendTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRecommendTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRecommendTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRecommendTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateRecommendTaskResponse) SetHeaders(v map[string]*string) *CreateRecommendTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateRecommendTaskResponse) SetStatusCode(v int32) *CreateRecommendTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRecommendTaskResponse) SetBody(v *CreateRecommendTaskResponseBody) *CreateRecommendTaskResponse {
	s.Body = v
	return s
}

type CreateReplenishTaskRequest struct {
	// This parameter is required.
	ClientFileName *string `json:"ClientFileName,omitempty" xml:"ClientFileName,omitempty"`
	// This parameter is required.
	ClientPath *string `json:"ClientPath,omitempty" xml:"ClientPath,omitempty"`
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CreateReplenishTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateReplenishTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateReplenishTaskRequest) SetClientFileName(v string) *CreateReplenishTaskRequest {
	s.ClientFileName = &v
	return s
}

func (s *CreateReplenishTaskRequest) SetClientPath(v string) *CreateReplenishTaskRequest {
	s.ClientPath = &v
	return s
}

func (s *CreateReplenishTaskRequest) SetLang(v string) *CreateReplenishTaskRequest {
	s.Lang = &v
	return s
}

func (s *CreateReplenishTaskRequest) SetTaskId(v string) *CreateReplenishTaskRequest {
	s.TaskId = &v
	return s
}

func (s *CreateReplenishTaskRequest) SetRegId(v string) *CreateReplenishTaskRequest {
	s.RegId = &v
	return s
}

type CreateReplenishTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateReplenishTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateReplenishTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateReplenishTaskResponseBody) SetRequestId(v string) *CreateReplenishTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateReplenishTaskResponseBody) SetData(v bool) *CreateReplenishTaskResponseBody {
	s.Data = &v
	return s
}

type CreateReplenishTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateReplenishTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateReplenishTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateReplenishTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateReplenishTaskResponse) SetHeaders(v map[string]*string) *CreateReplenishTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateReplenishTaskResponse) SetStatusCode(v int32) *CreateReplenishTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateReplenishTaskResponse) SetBody(v *CreateReplenishTaskResponseBody) *CreateReplenishTaskResponse {
	s.Body = v
	return s
}

type CreateRuleRequest struct {
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId   *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	CreateType      *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode       *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName       *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	LogicExpression *string `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	Memo            *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleActions     *string `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleExpressions *string `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleName        *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s CreateRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateRuleRequest) SetLang(v string) *CreateRuleRequest {
	s.Lang = &v
	return s
}

func (s *CreateRuleRequest) SetConsoleRuleId(v int64) *CreateRuleRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *CreateRuleRequest) SetCreateType(v string) *CreateRuleRequest {
	s.CreateType = &v
	return s
}

func (s *CreateRuleRequest) SetEventCode(v string) *CreateRuleRequest {
	s.EventCode = &v
	return s
}

func (s *CreateRuleRequest) SetEventName(v string) *CreateRuleRequest {
	s.EventName = &v
	return s
}

func (s *CreateRuleRequest) SetLogicExpression(v string) *CreateRuleRequest {
	s.LogicExpression = &v
	return s
}

func (s *CreateRuleRequest) SetMemo(v string) *CreateRuleRequest {
	s.Memo = &v
	return s
}

func (s *CreateRuleRequest) SetRegId(v string) *CreateRuleRequest {
	s.RegId = &v
	return s
}

func (s *CreateRuleRequest) SetRuleActions(v string) *CreateRuleRequest {
	s.RuleActions = &v
	return s
}

func (s *CreateRuleRequest) SetRuleExpressions(v string) *CreateRuleRequest {
	s.RuleExpressions = &v
	return s
}

func (s *CreateRuleRequest) SetRuleName(v string) *CreateRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateRuleRequest) SetRuleStatus(v string) *CreateRuleRequest {
	s.RuleStatus = &v
	return s
}

type CreateRuleResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRuleResponseBody) SetRequestId(v string) *CreateRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRuleResponseBody) SetResultObject(v bool) *CreateRuleResponseBody {
	s.ResultObject = &v
	return s
}

type CreateRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateRuleResponse) SetHeaders(v map[string]*string) *CreateRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateRuleResponse) SetStatusCode(v int32) *CreateRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRuleResponse) SetBody(v *CreateRuleResponseBody) *CreateRuleResponse {
	s.Body = v
	return s
}

type CreateSampleRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ClientFileName *string `json:"clientFileName,omitempty" xml:"clientFileName,omitempty"`
	ClientPath     *string `json:"clientPath,omitempty" xml:"clientPath,omitempty"`
	FileType       *string `json:"fileType,omitempty" xml:"fileType,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
	SampleTag      *string `json:"sampleTag,omitempty" xml:"sampleTag,omitempty"`
	SampleType     *string `json:"sampleType,omitempty" xml:"sampleType,omitempty"`
	SampleValues   *string `json:"sampleValues,omitempty" xml:"sampleValues,omitempty"`
	UploadType     *string `json:"uploadType,omitempty" xml:"uploadType,omitempty"`
}

func (s CreateSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleRequest) GoString() string {
	return s.String()
}

func (s *CreateSampleRequest) SetLang(v string) *CreateSampleRequest {
	s.Lang = &v
	return s
}

func (s *CreateSampleRequest) SetClientFileName(v string) *CreateSampleRequest {
	s.ClientFileName = &v
	return s
}

func (s *CreateSampleRequest) SetClientPath(v string) *CreateSampleRequest {
	s.ClientPath = &v
	return s
}

func (s *CreateSampleRequest) SetFileType(v string) *CreateSampleRequest {
	s.FileType = &v
	return s
}

func (s *CreateSampleRequest) SetRegId(v string) *CreateSampleRequest {
	s.RegId = &v
	return s
}

func (s *CreateSampleRequest) SetSampleTag(v string) *CreateSampleRequest {
	s.SampleTag = &v
	return s
}

func (s *CreateSampleRequest) SetSampleType(v string) *CreateSampleRequest {
	s.SampleType = &v
	return s
}

func (s *CreateSampleRequest) SetSampleValues(v string) *CreateSampleRequest {
	s.SampleValues = &v
	return s
}

func (s *CreateSampleRequest) SetUploadType(v string) *CreateSampleRequest {
	s.UploadType = &v
	return s
}

type CreateSampleResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *CreateSampleResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s CreateSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSampleResponseBody) SetRequestId(v string) *CreateSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSampleResponseBody) SetResultObject(v *CreateSampleResponseBodyResultObject) *CreateSampleResponseBody {
	s.ResultObject = v
	return s
}

type CreateSampleResponseBodyResultObject struct {
	CommunityCount    *int32  `json:"communityCount,omitempty" xml:"communityCount,omitempty"`
	FailCount         *int32  `json:"failCount,omitempty" xml:"failCount,omitempty"`
	RecallProbability *string `json:"recallProbability,omitempty" xml:"recallProbability,omitempty"`
	RiskDensity       *string `json:"riskDensity,omitempty" xml:"riskDensity,omitempty"`
	SampleCount       *int32  `json:"sampleCount,omitempty" xml:"sampleCount,omitempty"`
	SuccessCount      *int32  `json:"successCount,omitempty" xml:"successCount,omitempty"`
}

func (s CreateSampleResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *CreateSampleResponseBodyResultObject) SetCommunityCount(v int32) *CreateSampleResponseBodyResultObject {
	s.CommunityCount = &v
	return s
}

func (s *CreateSampleResponseBodyResultObject) SetFailCount(v int32) *CreateSampleResponseBodyResultObject {
	s.FailCount = &v
	return s
}

func (s *CreateSampleResponseBodyResultObject) SetRecallProbability(v string) *CreateSampleResponseBodyResultObject {
	s.RecallProbability = &v
	return s
}

func (s *CreateSampleResponseBodyResultObject) SetRiskDensity(v string) *CreateSampleResponseBodyResultObject {
	s.RiskDensity = &v
	return s
}

func (s *CreateSampleResponseBodyResultObject) SetSampleCount(v int32) *CreateSampleResponseBodyResultObject {
	s.SampleCount = &v
	return s
}

func (s *CreateSampleResponseBodyResultObject) SetSuccessCount(v int32) *CreateSampleResponseBodyResultObject {
	s.SuccessCount = &v
	return s
}

type CreateSampleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSampleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleResponse) GoString() string {
	return s.String()
}

func (s *CreateSampleResponse) SetHeaders(v map[string]*string) *CreateSampleResponse {
	s.Headers = v
	return s
}

func (s *CreateSampleResponse) SetStatusCode(v int32) *CreateSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSampleResponse) SetBody(v *CreateSampleResponseBody) *CreateSampleResponse {
	s.Body = v
	return s
}

type CreateSampleApiRequest struct {
	// example:
	//
	// ip/accountID
	DataType  *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	DataValue *string `json:"DataValue,omitempty" xml:"DataValue,omitempty"`
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// regionId
	//
	// example:
	//
	// cn-shanghai
	RegId           *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
	SampleBatchType *string `json:"SampleBatchType,omitempty" xml:"SampleBatchType,omitempty"`
	ServiceList     *string `json:"ServiceList,omitempty" xml:"ServiceList,omitempty"`
}

func (s CreateSampleApiRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleApiRequest) GoString() string {
	return s.String()
}

func (s *CreateSampleApiRequest) SetDataType(v string) *CreateSampleApiRequest {
	s.DataType = &v
	return s
}

func (s *CreateSampleApiRequest) SetDataValue(v string) *CreateSampleApiRequest {
	s.DataValue = &v
	return s
}

func (s *CreateSampleApiRequest) SetLang(v string) *CreateSampleApiRequest {
	s.Lang = &v
	return s
}

func (s *CreateSampleApiRequest) SetRegId(v string) *CreateSampleApiRequest {
	s.RegId = &v
	return s
}

func (s *CreateSampleApiRequest) SetSampleBatchType(v string) *CreateSampleApiRequest {
	s.SampleBatchType = &v
	return s
}

func (s *CreateSampleApiRequest) SetServiceList(v string) *CreateSampleApiRequest {
	s.ServiceList = &v
	return s
}

type CreateSampleApiResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// A32FE941-35F2-5378-B37C-4B8FDB16F094
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSampleApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleApiResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSampleApiResponseBody) SetRequestId(v string) *CreateSampleApiResponseBody {
	s.RequestId = &v
	return s
}

type CreateSampleApiResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSampleApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSampleApiResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleApiResponse) GoString() string {
	return s.String()
}

func (s *CreateSampleApiResponse) SetHeaders(v map[string]*string) *CreateSampleApiResponse {
	s.Headers = v
	return s
}

func (s *CreateSampleApiResponse) SetStatusCode(v int32) *CreateSampleApiResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSampleApiResponse) SetBody(v *CreateSampleApiResponseBody) *CreateSampleApiResponse {
	s.Body = v
	return s
}

type CreateSampleDataRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EncryptType *string `json:"encryptType,omitempty" xml:"encryptType,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RiskValue   *string `json:"riskValue,omitempty" xml:"riskValue,omitempty"`
	Scene       *string `json:"scene,omitempty" xml:"scene,omitempty"`
	StorePath   *string `json:"storePath,omitempty" xml:"storePath,omitempty"`
	StoreType   *string `json:"storeType,omitempty" xml:"storeType,omitempty"`
}

func (s CreateSampleDataRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleDataRequest) GoString() string {
	return s.String()
}

func (s *CreateSampleDataRequest) SetLang(v string) *CreateSampleDataRequest {
	s.Lang = &v
	return s
}

func (s *CreateSampleDataRequest) SetDescription(v string) *CreateSampleDataRequest {
	s.Description = &v
	return s
}

func (s *CreateSampleDataRequest) SetEncryptType(v string) *CreateSampleDataRequest {
	s.EncryptType = &v
	return s
}

func (s *CreateSampleDataRequest) SetName(v string) *CreateSampleDataRequest {
	s.Name = &v
	return s
}

func (s *CreateSampleDataRequest) SetRegId(v string) *CreateSampleDataRequest {
	s.RegId = &v
	return s
}

func (s *CreateSampleDataRequest) SetRiskValue(v string) *CreateSampleDataRequest {
	s.RiskValue = &v
	return s
}

func (s *CreateSampleDataRequest) SetScene(v string) *CreateSampleDataRequest {
	s.Scene = &v
	return s
}

func (s *CreateSampleDataRequest) SetStorePath(v string) *CreateSampleDataRequest {
	s.StorePath = &v
	return s
}

func (s *CreateSampleDataRequest) SetStoreType(v string) *CreateSampleDataRequest {
	s.StoreType = &v
	return s
}

type CreateSampleDataResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateSampleDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSampleDataResponseBody) SetRequestId(v string) *CreateSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSampleDataResponseBody) SetResultObject(v bool) *CreateSampleDataResponseBody {
	s.ResultObject = &v
	return s
}

type CreateSampleDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSampleDataResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleDataResponse) GoString() string {
	return s.String()
}

func (s *CreateSampleDataResponse) SetHeaders(v map[string]*string) *CreateSampleDataResponse {
	s.Headers = v
	return s
}

func (s *CreateSampleDataResponse) SetStatusCode(v int32) *CreateSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSampleDataResponse) SetBody(v *CreateSampleDataResponseBody) *CreateSampleDataResponse {
	s.Body = v
	return s
}

type CreateSimulationTaskRequest struct {
	Lang             *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	DataSourceConfig *string `json:"dataSourceConfig,omitempty" xml:"dataSourceConfig,omitempty"`
	DataSourceType   *string `json:"dataSourceType,omitempty" xml:"dataSourceType,omitempty"`
	// This parameter is required.
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// This parameter is required.
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	FiltersStr *string `json:"filtersStr,omitempty" xml:"filtersStr,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	RulesStr *string `json:"rulesStr,omitempty" xml:"rulesStr,omitempty"`
	// This parameter is required.
	RunTask *bool `json:"runTask,omitempty" xml:"runTask,omitempty"`
	// This parameter is required.
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// This parameter is required.
	TaskName *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s CreateSimulationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulationTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateSimulationTaskRequest) SetLang(v string) *CreateSimulationTaskRequest {
	s.Lang = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetDataSourceConfig(v string) *CreateSimulationTaskRequest {
	s.DataSourceConfig = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetDataSourceType(v string) *CreateSimulationTaskRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetEndTime(v int64) *CreateSimulationTaskRequest {
	s.EndTime = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetEventCode(v string) *CreateSimulationTaskRequest {
	s.EventCode = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetFiltersStr(v string) *CreateSimulationTaskRequest {
	s.FiltersStr = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetRegId(v string) *CreateSimulationTaskRequest {
	s.RegId = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetRulesStr(v string) *CreateSimulationTaskRequest {
	s.RulesStr = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetRunTask(v bool) *CreateSimulationTaskRequest {
	s.RunTask = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetStartTime(v int64) *CreateSimulationTaskRequest {
	s.StartTime = &v
	return s
}

func (s *CreateSimulationTaskRequest) SetTaskName(v string) *CreateSimulationTaskRequest {
	s.TaskName = &v
	return s
}

type CreateSimulationTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateSimulationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSimulationTaskResponseBody) SetRequestId(v string) *CreateSimulationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSimulationTaskResponseBody) SetResultObject(v bool) *CreateSimulationTaskResponseBody {
	s.ResultObject = &v
	return s
}

type CreateSimulationTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSimulationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSimulationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulationTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateSimulationTaskResponse) SetHeaders(v map[string]*string) *CreateSimulationTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateSimulationTaskResponse) SetStatusCode(v int32) *CreateSimulationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSimulationTaskResponse) SetBody(v *CreateSimulationTaskResponseBody) *CreateSimulationTaskResponse {
	s.Body = v
	return s
}

type CreateTaskRequest struct {
	ClientFileName *string `json:"ClientFileName,omitempty" xml:"ClientFileName,omitempty"`
	ClientPath     *string `json:"ClientPath,omitempty" xml:"ClientPath,omitempty"`
	Describe       *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SceneName      *string `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s CreateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateTaskRequest) SetClientFileName(v string) *CreateTaskRequest {
	s.ClientFileName = &v
	return s
}

func (s *CreateTaskRequest) SetClientPath(v string) *CreateTaskRequest {
	s.ClientPath = &v
	return s
}

func (s *CreateTaskRequest) SetDescribe(v string) *CreateTaskRequest {
	s.Describe = &v
	return s
}

func (s *CreateTaskRequest) SetLang(v string) *CreateTaskRequest {
	s.Lang = &v
	return s
}

func (s *CreateTaskRequest) SetSceneName(v string) *CreateTaskRequest {
	s.SceneName = &v
	return s
}

func (s *CreateTaskRequest) SetRegId(v string) *CreateTaskRequest {
	s.RegId = &v
	return s
}

type CreateTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTaskResponseBody) SetRequestId(v string) *CreateTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTaskResponseBody) SetData(v bool) *CreateTaskResponseBody {
	s.Data = &v
	return s
}

type CreateTaskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateTaskResponse) SetHeaders(v map[string]*string) *CreateTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateTaskResponse) SetStatusCode(v int32) *CreateTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTaskResponse) SetBody(v *CreateTaskResponseBody) *CreateTaskResponse {
	s.Body = v
	return s
}

type CreateTemplateRequest struct {
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType      *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode       *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName       *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	LogicExpression *string `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	Memo            *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleActions     *string `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleExpressions *string `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleName        *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s CreateTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateTemplateRequest) SetLang(v string) *CreateTemplateRequest {
	s.Lang = &v
	return s
}

func (s *CreateTemplateRequest) SetCreateType(v string) *CreateTemplateRequest {
	s.CreateType = &v
	return s
}

func (s *CreateTemplateRequest) SetEventCode(v string) *CreateTemplateRequest {
	s.EventCode = &v
	return s
}

func (s *CreateTemplateRequest) SetEventName(v string) *CreateTemplateRequest {
	s.EventName = &v
	return s
}

func (s *CreateTemplateRequest) SetLogicExpression(v string) *CreateTemplateRequest {
	s.LogicExpression = &v
	return s
}

func (s *CreateTemplateRequest) SetMemo(v string) *CreateTemplateRequest {
	s.Memo = &v
	return s
}

func (s *CreateTemplateRequest) SetRegId(v string) *CreateTemplateRequest {
	s.RegId = &v
	return s
}

func (s *CreateTemplateRequest) SetRuleActions(v string) *CreateTemplateRequest {
	s.RuleActions = &v
	return s
}

func (s *CreateTemplateRequest) SetRuleExpressions(v string) *CreateTemplateRequest {
	s.RuleExpressions = &v
	return s
}

func (s *CreateTemplateRequest) SetRuleName(v string) *CreateTemplateRequest {
	s.RuleName = &v
	return s
}

func (s *CreateTemplateRequest) SetRuleStatus(v string) *CreateTemplateRequest {
	s.RuleStatus = &v
	return s
}

type CreateTemplateResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s CreateTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTemplateResponseBody) SetRequestId(v string) *CreateTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTemplateResponseBody) SetResultObject(v bool) *CreateTemplateResponseBody {
	s.ResultObject = &v
	return s
}

type CreateTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateTemplateResponse) SetHeaders(v map[string]*string) *CreateTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateTemplateResponse) SetStatusCode(v int32) *CreateTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTemplateResponse) SetBody(v *CreateTemplateResponseBody) *CreateTemplateResponse {
	s.Body = v
	return s
}

type DeleteAnalysisConditionFavoriteRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteAnalysisConditionFavoriteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAnalysisConditionFavoriteRequest) GoString() string {
	return s.String()
}

func (s *DeleteAnalysisConditionFavoriteRequest) SetLang(v string) *DeleteAnalysisConditionFavoriteRequest {
	s.Lang = &v
	return s
}

func (s *DeleteAnalysisConditionFavoriteRequest) SetId(v int64) *DeleteAnalysisConditionFavoriteRequest {
	s.Id = &v
	return s
}

func (s *DeleteAnalysisConditionFavoriteRequest) SetRegId(v string) *DeleteAnalysisConditionFavoriteRequest {
	s.RegId = &v
	return s
}

type DeleteAnalysisConditionFavoriteResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteAnalysisConditionFavoriteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAnalysisConditionFavoriteResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAnalysisConditionFavoriteResponseBody) SetRequestId(v string) *DeleteAnalysisConditionFavoriteResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAnalysisConditionFavoriteResponseBody) SetResultObject(v bool) *DeleteAnalysisConditionFavoriteResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteAnalysisConditionFavoriteResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAnalysisConditionFavoriteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAnalysisConditionFavoriteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAnalysisConditionFavoriteResponse) GoString() string {
	return s.String()
}

func (s *DeleteAnalysisConditionFavoriteResponse) SetHeaders(v map[string]*string) *DeleteAnalysisConditionFavoriteResponse {
	s.Headers = v
	return s
}

func (s *DeleteAnalysisConditionFavoriteResponse) SetStatusCode(v int32) *DeleteAnalysisConditionFavoriteResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAnalysisConditionFavoriteResponse) SetBody(v *DeleteAnalysisConditionFavoriteResponseBody) *DeleteAnalysisConditionFavoriteResponse {
	s.Body = v
	return s
}

type DeleteAuthUserRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Id         *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteAuthUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAuthUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteAuthUserRequest) SetLang(v string) *DeleteAuthUserRequest {
	s.Lang = &v
	return s
}

func (s *DeleteAuthUserRequest) SetCreateType(v string) *DeleteAuthUserRequest {
	s.CreateType = &v
	return s
}

func (s *DeleteAuthUserRequest) SetEventCode(v string) *DeleteAuthUserRequest {
	s.EventCode = &v
	return s
}

func (s *DeleteAuthUserRequest) SetId(v int64) *DeleteAuthUserRequest {
	s.Id = &v
	return s
}

func (s *DeleteAuthUserRequest) SetRegId(v string) *DeleteAuthUserRequest {
	s.RegId = &v
	return s
}

type DeleteAuthUserResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteAuthUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAuthUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAuthUserResponseBody) SetRequestId(v string) *DeleteAuthUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAuthUserResponseBody) SetResultObject(v bool) *DeleteAuthUserResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteAuthUserResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAuthUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAuthUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAuthUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteAuthUserResponse) SetHeaders(v map[string]*string) *DeleteAuthUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteAuthUserResponse) SetStatusCode(v int32) *DeleteAuthUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAuthUserResponse) SetBody(v *DeleteAuthUserResponseBody) *DeleteAuthUserResponse {
	s.Body = v
	return s
}

type DeleteByPassShuntEventRequest struct {
	Lang    *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventId *int64  `json:"eventId,omitempty" xml:"eventId,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteByPassShuntEventRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteByPassShuntEventRequest) GoString() string {
	return s.String()
}

func (s *DeleteByPassShuntEventRequest) SetLang(v string) *DeleteByPassShuntEventRequest {
	s.Lang = &v
	return s
}

func (s *DeleteByPassShuntEventRequest) SetEventId(v int64) *DeleteByPassShuntEventRequest {
	s.EventId = &v
	return s
}

func (s *DeleteByPassShuntEventRequest) SetRegId(v string) *DeleteByPassShuntEventRequest {
	s.RegId = &v
	return s
}

type DeleteByPassShuntEventResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteByPassShuntEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteByPassShuntEventResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteByPassShuntEventResponseBody) SetCode(v string) *DeleteByPassShuntEventResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteByPassShuntEventResponseBody) SetHttpStatusCode(v string) *DeleteByPassShuntEventResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteByPassShuntEventResponseBody) SetMessage(v string) *DeleteByPassShuntEventResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteByPassShuntEventResponseBody) SetRequestId(v string) *DeleteByPassShuntEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteByPassShuntEventResponseBody) SetResultObject(v bool) *DeleteByPassShuntEventResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DeleteByPassShuntEventResponseBody) SetSuccess(v bool) *DeleteByPassShuntEventResponseBody {
	s.Success = &v
	return s
}

type DeleteByPassShuntEventResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteByPassShuntEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteByPassShuntEventResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteByPassShuntEventResponse) GoString() string {
	return s.String()
}

func (s *DeleteByPassShuntEventResponse) SetHeaders(v map[string]*string) *DeleteByPassShuntEventResponse {
	s.Headers = v
	return s
}

func (s *DeleteByPassShuntEventResponse) SetStatusCode(v int32) *DeleteByPassShuntEventResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteByPassShuntEventResponse) SetBody(v *DeleteByPassShuntEventResponseBody) *DeleteByPassShuntEventResponse {
	s.Body = v
	return s
}

type DeleteCustVariableRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	DataVersion *int64  `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	VariableId  *string `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s DeleteCustVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustVariableRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustVariableRequest) SetLang(v string) *DeleteCustVariableRequest {
	s.Lang = &v
	return s
}

func (s *DeleteCustVariableRequest) SetCreateType(v string) *DeleteCustVariableRequest {
	s.CreateType = &v
	return s
}

func (s *DeleteCustVariableRequest) SetDataVersion(v int64) *DeleteCustVariableRequest {
	s.DataVersion = &v
	return s
}

func (s *DeleteCustVariableRequest) SetRegId(v string) *DeleteCustVariableRequest {
	s.RegId = &v
	return s
}

func (s *DeleteCustVariableRequest) SetVariableId(v string) *DeleteCustVariableRequest {
	s.VariableId = &v
	return s
}

type DeleteCustVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteCustVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustVariableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustVariableResponseBody) SetRequestId(v string) *DeleteCustVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustVariableResponseBody) SetResultObject(v bool) *DeleteCustVariableResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteCustVariableResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustVariableResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustVariableResponse) SetHeaders(v map[string]*string) *DeleteCustVariableResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustVariableResponse) SetStatusCode(v int32) *DeleteCustVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustVariableResponse) SetBody(v *DeleteCustVariableResponseBody) *DeleteCustVariableResponse {
	s.Body = v
	return s
}

type DeleteDataSourceRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceRequest) SetLang(v string) *DeleteDataSourceRequest {
	s.Lang = &v
	return s
}

func (s *DeleteDataSourceRequest) SetId(v int64) *DeleteDataSourceRequest {
	s.Id = &v
	return s
}

func (s *DeleteDataSourceRequest) SetRegId(v string) *DeleteDataSourceRequest {
	s.RegId = &v
	return s
}

type DeleteDataSourceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponseBody) SetRequestId(v string) *DeleteDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetResultObject(v bool) *DeleteDataSourceResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteDataSourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponse) SetHeaders(v map[string]*string) *DeleteDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourceResponse) SetStatusCode(v int32) *DeleteDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataSourceResponse) SetBody(v *DeleteDataSourceResponseBody) *DeleteDataSourceResponse {
	s.Body = v
	return s
}

type DeleteExpressionVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	DataVersion *int64 `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteExpressionVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExpressionVariableRequest) GoString() string {
	return s.String()
}

func (s *DeleteExpressionVariableRequest) SetLang(v string) *DeleteExpressionVariableRequest {
	s.Lang = &v
	return s
}

func (s *DeleteExpressionVariableRequest) SetDataVersion(v int64) *DeleteExpressionVariableRequest {
	s.DataVersion = &v
	return s
}

func (s *DeleteExpressionVariableRequest) SetId(v int64) *DeleteExpressionVariableRequest {
	s.Id = &v
	return s
}

func (s *DeleteExpressionVariableRequest) SetRegId(v string) *DeleteExpressionVariableRequest {
	s.RegId = &v
	return s
}

type DeleteExpressionVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteExpressionVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteExpressionVariableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExpressionVariableResponseBody) SetRequestId(v string) *DeleteExpressionVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteExpressionVariableResponseBody) SetResultObject(v bool) *DeleteExpressionVariableResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteExpressionVariableResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteExpressionVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteExpressionVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExpressionVariableResponse) GoString() string {
	return s.String()
}

func (s *DeleteExpressionVariableResponse) SetHeaders(v map[string]*string) *DeleteExpressionVariableResponse {
	s.Headers = v
	return s
}

func (s *DeleteExpressionVariableResponse) SetStatusCode(v int32) *DeleteExpressionVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteExpressionVariableResponse) SetBody(v *DeleteExpressionVariableResponseBody) *DeleteExpressionVariableResponse {
	s.Body = v
	return s
}

type DeleteFieldRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFieldRequest) GoString() string {
	return s.String()
}

func (s *DeleteFieldRequest) SetLang(v string) *DeleteFieldRequest {
	s.Lang = &v
	return s
}

func (s *DeleteFieldRequest) SetId(v int64) *DeleteFieldRequest {
	s.Id = &v
	return s
}

func (s *DeleteFieldRequest) SetName(v string) *DeleteFieldRequest {
	s.Name = &v
	return s
}

func (s *DeleteFieldRequest) SetRegId(v string) *DeleteFieldRequest {
	s.RegId = &v
	return s
}

type DeleteFieldResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFieldResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFieldResponseBody) SetRequestId(v string) *DeleteFieldResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFieldResponseBody) SetResultObject(v bool) *DeleteFieldResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteFieldResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFieldResponse) GoString() string {
	return s.String()
}

func (s *DeleteFieldResponse) SetHeaders(v map[string]*string) *DeleteFieldResponse {
	s.Headers = v
	return s
}

func (s *DeleteFieldResponse) SetStatusCode(v int32) *DeleteFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFieldResponse) SetBody(v *DeleteFieldResponseBody) *DeleteFieldResponse {
	s.Body = v
	return s
}

type DeleteNameListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Ids   *string `json:"ids,omitempty" xml:"ids,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteNameListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNameListRequest) GoString() string {
	return s.String()
}

func (s *DeleteNameListRequest) SetLang(v string) *DeleteNameListRequest {
	s.Lang = &v
	return s
}

func (s *DeleteNameListRequest) SetIds(v string) *DeleteNameListRequest {
	s.Ids = &v
	return s
}

func (s *DeleteNameListRequest) SetRegId(v string) *DeleteNameListRequest {
	s.RegId = &v
	return s
}

type DeleteNameListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteNameListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNameListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNameListResponseBody) SetRequestId(v string) *DeleteNameListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteNameListResponseBody) SetResultObject(v bool) *DeleteNameListResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteNameListResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNameListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNameListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNameListResponse) GoString() string {
	return s.String()
}

func (s *DeleteNameListResponse) SetHeaders(v map[string]*string) *DeleteNameListResponse {
	s.Headers = v
	return s
}

func (s *DeleteNameListResponse) SetStatusCode(v int32) *DeleteNameListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNameListResponse) SetBody(v *DeleteNameListResponseBody) *DeleteNameListResponse {
	s.Body = v
	return s
}

type DeleteNameListDataRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	VariableId *string `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s DeleteNameListDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNameListDataRequest) GoString() string {
	return s.String()
}

func (s *DeleteNameListDataRequest) SetLang(v string) *DeleteNameListDataRequest {
	s.Lang = &v
	return s
}

func (s *DeleteNameListDataRequest) SetRegId(v string) *DeleteNameListDataRequest {
	s.RegId = &v
	return s
}

func (s *DeleteNameListDataRequest) SetVariableId(v string) *DeleteNameListDataRequest {
	s.VariableId = &v
	return s
}

type DeleteNameListDataResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteNameListDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNameListDataResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNameListDataResponseBody) SetRequestId(v string) *DeleteNameListDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteNameListDataResponseBody) SetResultObject(v bool) *DeleteNameListDataResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteNameListDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNameListDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNameListDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNameListDataResponse) GoString() string {
	return s.String()
}

func (s *DeleteNameListDataResponse) SetHeaders(v map[string]*string) *DeleteNameListDataResponse {
	s.Headers = v
	return s
}

func (s *DeleteNameListDataResponse) SetStatusCode(v int32) *DeleteNameListDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNameListDataResponse) SetBody(v *DeleteNameListDataResponseBody) *DeleteNameListDataResponse {
	s.Body = v
	return s
}

type DeleteQueryVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteQueryVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQueryVariableRequest) GoString() string {
	return s.String()
}

func (s *DeleteQueryVariableRequest) SetLang(v string) *DeleteQueryVariableRequest {
	s.Lang = &v
	return s
}

func (s *DeleteQueryVariableRequest) SetId(v int64) *DeleteQueryVariableRequest {
	s.Id = &v
	return s
}

func (s *DeleteQueryVariableRequest) SetRegId(v string) *DeleteQueryVariableRequest {
	s.RegId = &v
	return s
}

type DeleteQueryVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteQueryVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQueryVariableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQueryVariableResponseBody) SetRequestId(v string) *DeleteQueryVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteQueryVariableResponseBody) SetResultObject(v bool) *DeleteQueryVariableResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteQueryVariableResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteQueryVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteQueryVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQueryVariableResponse) GoString() string {
	return s.String()
}

func (s *DeleteQueryVariableResponse) SetHeaders(v map[string]*string) *DeleteQueryVariableResponse {
	s.Headers = v
	return s
}

func (s *DeleteQueryVariableResponse) SetStatusCode(v int32) *DeleteQueryVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteQueryVariableResponse) SetBody(v *DeleteQueryVariableResponseBody) *DeleteQueryVariableResponse {
	s.Body = v
	return s
}

type DeleteRuleRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleVersionId *int64  `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
}

func (s DeleteRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteRuleRequest) SetLang(v string) *DeleteRuleRequest {
	s.Lang = &v
	return s
}

func (s *DeleteRuleRequest) SetConsoleRuleId(v int64) *DeleteRuleRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *DeleteRuleRequest) SetRegId(v string) *DeleteRuleRequest {
	s.RegId = &v
	return s
}

func (s *DeleteRuleRequest) SetRuleId(v string) *DeleteRuleRequest {
	s.RuleId = &v
	return s
}

func (s *DeleteRuleRequest) SetRuleVersionId(v int64) *DeleteRuleRequest {
	s.RuleVersionId = &v
	return s
}

type DeleteRuleResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRuleResponseBody) SetRequestId(v string) *DeleteRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRuleResponseBody) SetResultObject(v bool) *DeleteRuleResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteRuleResponse) SetHeaders(v map[string]*string) *DeleteRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteRuleResponse) SetStatusCode(v int32) *DeleteRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRuleResponse) SetBody(v *DeleteRuleResponseBody) *DeleteRuleResponse {
	s.Body = v
	return s
}

type DeleteSampleBatchRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Ids   *string `json:"ids,omitempty" xml:"ids,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Versions *string `json:"versions,omitempty" xml:"versions,omitempty"`
}

func (s DeleteSampleBatchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSampleBatchRequest) GoString() string {
	return s.String()
}

func (s *DeleteSampleBatchRequest) SetLang(v string) *DeleteSampleBatchRequest {
	s.Lang = &v
	return s
}

func (s *DeleteSampleBatchRequest) SetIds(v string) *DeleteSampleBatchRequest {
	s.Ids = &v
	return s
}

func (s *DeleteSampleBatchRequest) SetRegId(v string) *DeleteSampleBatchRequest {
	s.RegId = &v
	return s
}

func (s *DeleteSampleBatchRequest) SetVersions(v string) *DeleteSampleBatchRequest {
	s.Versions = &v
	return s
}

type DeleteSampleBatchResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteSampleBatchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSampleBatchResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSampleBatchResponseBody) SetRequestId(v string) *DeleteSampleBatchResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSampleBatchResponseBody) SetData(v bool) *DeleteSampleBatchResponseBody {
	s.Data = &v
	return s
}

type DeleteSampleBatchResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSampleBatchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSampleBatchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSampleBatchResponse) GoString() string {
	return s.String()
}

func (s *DeleteSampleBatchResponse) SetHeaders(v map[string]*string) *DeleteSampleBatchResponse {
	s.Headers = v
	return s
}

func (s *DeleteSampleBatchResponse) SetStatusCode(v int32) *DeleteSampleBatchResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSampleBatchResponse) SetBody(v *DeleteSampleBatchResponseBody) *DeleteSampleBatchResponse {
	s.Body = v
	return s
}

type DeleteSampleDataRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Id    *string `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteSampleDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSampleDataRequest) GoString() string {
	return s.String()
}

func (s *DeleteSampleDataRequest) SetLang(v string) *DeleteSampleDataRequest {
	s.Lang = &v
	return s
}

func (s *DeleteSampleDataRequest) SetId(v string) *DeleteSampleDataRequest {
	s.Id = &v
	return s
}

func (s *DeleteSampleDataRequest) SetRegId(v string) *DeleteSampleDataRequest {
	s.RegId = &v
	return s
}

type DeleteSampleDataResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DeleteSampleDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSampleDataResponseBody) SetRequestId(v string) *DeleteSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSampleDataResponseBody) SetResultObject(v bool) *DeleteSampleDataResponseBody {
	s.ResultObject = &v
	return s
}

type DeleteSampleDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSampleDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSampleDataResponse) GoString() string {
	return s.String()
}

func (s *DeleteSampleDataResponse) SetHeaders(v map[string]*string) *DeleteSampleDataResponse {
	s.Headers = v
	return s
}

func (s *DeleteSampleDataResponse) SetStatusCode(v int32) *DeleteSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSampleDataResponse) SetBody(v *DeleteSampleDataResponseBody) *DeleteSampleDataResponse {
	s.Body = v
	return s
}

type DeleteTaskRequest struct {
	Lang   *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DeleteTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteTaskRequest) SetLang(v string) *DeleteTaskRequest {
	s.Lang = &v
	return s
}

func (s *DeleteTaskRequest) SetTaskId(v string) *DeleteTaskRequest {
	s.TaskId = &v
	return s
}

func (s *DeleteTaskRequest) SetRegId(v string) *DeleteTaskRequest {
	s.RegId = &v
	return s
}

type DeleteTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTaskResponseBody) SetRequestId(v string) *DeleteTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTaskResponseBody) SetData(v bool) *DeleteTaskResponseBody {
	s.Data = &v
	return s
}

type DeleteTaskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteTaskResponse) SetHeaders(v map[string]*string) *DeleteTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteTaskResponse) SetStatusCode(v int32) *DeleteTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTaskResponse) SetBody(v *DeleteTaskResponseBody) *DeleteTaskResponse {
	s.Body = v
	return s
}

type DescribeAdvanceSearchLeftVariableListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s DescribeAdvanceSearchLeftVariableListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchLeftVariableListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchLeftVariableListRequest) SetLang(v string) *DescribeAdvanceSearchLeftVariableListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListRequest) SetEventCodes(v string) *DescribeAdvanceSearchLeftVariableListRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListRequest) SetRegId(v string) *DescribeAdvanceSearchLeftVariableListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListRequest) SetScene(v string) *DescribeAdvanceSearchLeftVariableListRequest {
	s.Scene = &v
	return s
}

type DescribeAdvanceSearchLeftVariableListResponseBody struct {
	RequestId    *string                                                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeAdvanceSearchLeftVariableListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeAdvanceSearchLeftVariableListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchLeftVariableListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBody) SetRequestId(v string) *DescribeAdvanceSearchLeftVariableListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBody) SetResultObject(v []*DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) *DescribeAdvanceSearchLeftVariableListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAdvanceSearchLeftVariableListResponseBodyResultObject struct {
	Code        *string `json:"code,omitempty" xml:"code,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType *string `json:"displayType,omitempty" xml:"displayType,omitempty"`
	FieldRank   *int64  `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldType   *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	ParentName  *string `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType  *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetCode(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.Code = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetDescription(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetDisplayType(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.DisplayType = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetFieldRank(v int64) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.FieldRank = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetFieldType(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.FieldType = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetId(v int64) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetName(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetParentName(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.ParentName = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetSourceType(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.SourceType = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetTitle(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject) SetType(v string) *DescribeAdvanceSearchLeftVariableListResponseBodyResultObject {
	s.Type = &v
	return s
}

type DescribeAdvanceSearchLeftVariableListResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAdvanceSearchLeftVariableListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAdvanceSearchLeftVariableListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchLeftVariableListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchLeftVariableListResponse) SetHeaders(v map[string]*string) *DescribeAdvanceSearchLeftVariableListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponse) SetStatusCode(v int32) *DescribeAdvanceSearchLeftVariableListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAdvanceSearchLeftVariableListResponse) SetBody(v *DescribeAdvanceSearchLeftVariableListResponseBody) *DescribeAdvanceSearchLeftVariableListResponse {
	s.Body = v
	return s
}

type DescribeAdvanceSearchPageListRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// This parameter is required.
	CurrentPage *int64 `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// This parameter is required.
	EventBeginTime *int64 `json:"eventBeginTime,omitempty" xml:"eventBeginTime,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	// This parameter is required.
	EventEndTime *int64  `json:"eventEndTime,omitempty" xml:"eventEndTime,omitempty"`
	FieldName    *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldValue   *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
	// This parameter is required.
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAdvanceSearchPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchPageListRequest) SetLang(v string) *DescribeAdvanceSearchPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetCondition(v string) *DescribeAdvanceSearchPageListRequest {
	s.Condition = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetCurrentPage(v int64) *DescribeAdvanceSearchPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetEventBeginTime(v int64) *DescribeAdvanceSearchPageListRequest {
	s.EventBeginTime = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetEventCodes(v string) *DescribeAdvanceSearchPageListRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetEventEndTime(v int64) *DescribeAdvanceSearchPageListRequest {
	s.EventEndTime = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetFieldName(v string) *DescribeAdvanceSearchPageListRequest {
	s.FieldName = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetFieldValue(v string) *DescribeAdvanceSearchPageListRequest {
	s.FieldValue = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetPageSize(v int64) *DescribeAdvanceSearchPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAdvanceSearchPageListRequest) SetRegId(v string) *DescribeAdvanceSearchPageListRequest {
	s.RegId = &v
	return s
}

type DescribeAdvanceSearchPageListResponseBody struct {
	RequestId    *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeAdvanceSearchPageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeAdvanceSearchPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchPageListResponseBody) SetRequestId(v string) *DescribeAdvanceSearchPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBody) SetResultObject(v *DescribeAdvanceSearchPageListResponseBodyResultObject) *DescribeAdvanceSearchPageListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAdvanceSearchPageListResponseBodyResultObject struct {
	CurrentPage *int64                                                         `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Data        []map[string]interface{}                                       `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Header      []*DescribeAdvanceSearchPageListResponseBodyResultObjectHeader `json:"header,omitempty" xml:"header,omitempty" type:"Repeated"`
	PageSize    *int64                                                         `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	TotalItem   *int64                                                         `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage   *int64                                                         `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeAdvanceSearchPageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchPageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObject) SetCurrentPage(v int64) *DescribeAdvanceSearchPageListResponseBodyResultObject {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObject) SetData(v []map[string]interface{}) *DescribeAdvanceSearchPageListResponseBodyResultObject {
	s.Data = v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObject) SetHeader(v []*DescribeAdvanceSearchPageListResponseBodyResultObjectHeader) *DescribeAdvanceSearchPageListResponseBodyResultObject {
	s.Header = v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObject) SetPageSize(v int64) *DescribeAdvanceSearchPageListResponseBodyResultObject {
	s.PageSize = &v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObject) SetTotalItem(v int64) *DescribeAdvanceSearchPageListResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObject) SetTotalPage(v int64) *DescribeAdvanceSearchPageListResponseBodyResultObject {
	s.TotalPage = &v
	return s
}

type DescribeAdvanceSearchPageListResponseBodyResultObjectHeader struct {
	FieldName  *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldTitle *string `json:"fieldTitle,omitempty" xml:"fieldTitle,omitempty"`
	IsDefault  *bool   `json:"isDefault,omitempty" xml:"isDefault,omitempty"`
}

func (s DescribeAdvanceSearchPageListResponseBodyResultObjectHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchPageListResponseBodyResultObjectHeader) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObjectHeader) SetFieldName(v string) *DescribeAdvanceSearchPageListResponseBodyResultObjectHeader {
	s.FieldName = &v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObjectHeader) SetFieldTitle(v string) *DescribeAdvanceSearchPageListResponseBodyResultObjectHeader {
	s.FieldTitle = &v
	return s
}

func (s *DescribeAdvanceSearchPageListResponseBodyResultObjectHeader) SetIsDefault(v bool) *DescribeAdvanceSearchPageListResponseBodyResultObjectHeader {
	s.IsDefault = &v
	return s
}

type DescribeAdvanceSearchPageListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAdvanceSearchPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAdvanceSearchPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvanceSearchPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAdvanceSearchPageListResponse) SetHeaders(v map[string]*string) *DescribeAdvanceSearchPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAdvanceSearchPageListResponse) SetStatusCode(v int32) *DescribeAdvanceSearchPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAdvanceSearchPageListResponse) SetBody(v *DescribeAdvanceSearchPageListResponseBody) *DescribeAdvanceSearchPageListResponse {
	s.Body = v
	return s
}

type DescribeAllDataSourceRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAllDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllDataSourceRequest) SetLang(v string) *DescribeAllDataSourceRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAllDataSourceRequest) SetRegId(v string) *DescribeAllDataSourceRequest {
	s.RegId = &v
	return s
}

type DescribeAllDataSourceResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeAllDataSourceResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeAllDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllDataSourceResponseBody) SetRequestId(v string) *DescribeAllDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAllDataSourceResponseBody) SetResultObject(v []*DescribeAllDataSourceResponseBodyResultObject) *DescribeAllDataSourceResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAllDataSourceResponseBodyResultObject struct {
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	Id        *int64  `json:"id,omitempty" xml:"id,omitempty"`
}

func (s DescribeAllDataSourceResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllDataSourceResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAllDataSourceResponseBodyResultObject) SetEventCode(v string) *DescribeAllDataSourceResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeAllDataSourceResponseBodyResultObject) SetEventName(v string) *DescribeAllDataSourceResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeAllDataSourceResponseBodyResultObject) SetId(v int64) *DescribeAllDataSourceResponseBodyResultObject {
	s.Id = &v
	return s
}

type DescribeAllDataSourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAllDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAllDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllDataSourceResponse) SetHeaders(v map[string]*string) *DescribeAllDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllDataSourceResponse) SetStatusCode(v int32) *DescribeAllDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllDataSourceResponse) SetBody(v *DescribeAllDataSourceResponseBody) *DescribeAllDataSourceResponse {
	s.Body = v
	return s
}

type DescribeAllEventNameAndCodeRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAllEventNameAndCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEventNameAndCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllEventNameAndCodeRequest) SetLang(v string) *DescribeAllEventNameAndCodeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAllEventNameAndCodeRequest) SetCreateType(v string) *DescribeAllEventNameAndCodeRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeAllEventNameAndCodeRequest) SetRegId(v string) *DescribeAllEventNameAndCodeRequest {
	s.RegId = &v
	return s
}

type DescribeAllEventNameAndCodeResponseBody struct {
	Code           *string                                                `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                                `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                                `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeAllEventNameAndCodeResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                                  `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeAllEventNameAndCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEventNameAndCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllEventNameAndCodeResponseBody) SetCode(v string) *DescribeAllEventNameAndCodeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBody) SetHttpStatusCode(v string) *DescribeAllEventNameAndCodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBody) SetMessage(v string) *DescribeAllEventNameAndCodeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBody) SetRequestId(v string) *DescribeAllEventNameAndCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBody) SetResultObject(v []*DescribeAllEventNameAndCodeResponseBodyResultObject) *DescribeAllEventNameAndCodeResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBody) SetSuccess(v bool) *DescribeAllEventNameAndCodeResponseBody {
	s.Success = &v
	return s
}

type DescribeAllEventNameAndCodeResponseBodyResultObject struct {
	Children   []*DescribeAllEventNameAndCodeResponseBodyResultObjectChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
	CreateType *string                                                        `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode  *string                                                        `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName  *string                                                        `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventType  *string                                                        `json:"eventType,omitempty" xml:"eventType,omitempty"`
}

func (s DescribeAllEventNameAndCodeResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEventNameAndCodeResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObject) SetChildren(v []*DescribeAllEventNameAndCodeResponseBodyResultObjectChildren) *DescribeAllEventNameAndCodeResponseBodyResultObject {
	s.Children = v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObject) SetCreateType(v string) *DescribeAllEventNameAndCodeResponseBodyResultObject {
	s.CreateType = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObject) SetEventCode(v string) *DescribeAllEventNameAndCodeResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObject) SetEventName(v string) *DescribeAllEventNameAndCodeResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObject) SetEventType(v string) *DescribeAllEventNameAndCodeResponseBodyResultObject {
	s.EventType = &v
	return s
}

type DescribeAllEventNameAndCodeResponseBodyResultObjectChildren struct {
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName  *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventType  *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
}

func (s DescribeAllEventNameAndCodeResponseBodyResultObjectChildren) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEventNameAndCodeResponseBodyResultObjectChildren) GoString() string {
	return s.String()
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren) SetCreateType(v string) *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren {
	s.CreateType = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren) SetEventCode(v string) *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren {
	s.EventCode = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren) SetEventName(v string) *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren {
	s.EventName = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren) SetEventType(v string) *DescribeAllEventNameAndCodeResponseBodyResultObjectChildren {
	s.EventType = &v
	return s
}

type DescribeAllEventNameAndCodeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAllEventNameAndCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAllEventNameAndCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEventNameAndCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllEventNameAndCodeResponse) SetHeaders(v map[string]*string) *DescribeAllEventNameAndCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllEventNameAndCodeResponse) SetStatusCode(v int32) *DescribeAllEventNameAndCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllEventNameAndCodeResponse) SetBody(v *DescribeAllEventNameAndCodeResponseBody) *DescribeAllEventNameAndCodeResponse {
	s.Body = v
	return s
}

type DescribeAllRootVariableRequest struct {
	Lang                  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp              *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	DeviceVariableIds     *string `json:"deviceVariableIds,omitempty" xml:"deviceVariableIds,omitempty"`
	EventCode             *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	ExpressionVariableIds *string `json:"expressionVariableIds,omitempty" xml:"expressionVariableIds,omitempty"`
	Id                    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	NativeVariableIds     *string `json:"nativeVariableIds,omitempty" xml:"nativeVariableIds,omitempty"`
	QueryVariableIds      *string `json:"queryVariableIds,omitempty" xml:"queryVariableIds,omitempty"`
	RegId                 *string `json:"regId,omitempty" xml:"regId,omitempty"`
	VelocityVariableIds   *string `json:"velocityVariableIds,omitempty" xml:"velocityVariableIds,omitempty"`
}

func (s DescribeAllRootVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllRootVariableRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllRootVariableRequest) SetLang(v string) *DescribeAllRootVariableRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetSourceIp(v string) *DescribeAllRootVariableRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetDeviceVariableIds(v string) *DescribeAllRootVariableRequest {
	s.DeviceVariableIds = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetEventCode(v string) *DescribeAllRootVariableRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetExpressionVariableIds(v string) *DescribeAllRootVariableRequest {
	s.ExpressionVariableIds = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetId(v int64) *DescribeAllRootVariableRequest {
	s.Id = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetNativeVariableIds(v string) *DescribeAllRootVariableRequest {
	s.NativeVariableIds = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetQueryVariableIds(v string) *DescribeAllRootVariableRequest {
	s.QueryVariableIds = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetRegId(v string) *DescribeAllRootVariableRequest {
	s.RegId = &v
	return s
}

func (s *DescribeAllRootVariableRequest) SetVelocityVariableIds(v string) *DescribeAllRootVariableRequest {
	s.VelocityVariableIds = &v
	return s
}

type DescribeAllRootVariableResponseBody struct {
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeAllRootVariableResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeAllRootVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllRootVariableResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllRootVariableResponseBody) SetRequestId(v string) *DescribeAllRootVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAllRootVariableResponseBody) SetResultObject(v []*DescribeAllRootVariableResponseBodyResultObject) *DescribeAllRootVariableResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAllRootVariableResponseBodyResultObject struct {
	Code            *string                                                         `json:"code,omitempty" xml:"code,omitempty"`
	Description     *string                                                         `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType     *string                                                         `json:"displayType,omitempty" xml:"displayType,omitempty"`
	FavoriteFlag    *bool                                                           `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldRank       *int64                                                          `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldType       *string                                                         `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id              *int64                                                          `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType  *string                                                         `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	Inputs          *string                                                         `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name            *string                                                         `json:"name,omitempty" xml:"name,omitempty"`
	OutputThreshold *DescribeAllRootVariableResponseBodyResultObjectOutputThreshold `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	SourceType      *string                                                         `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title           *string                                                         `json:"title,omitempty" xml:"title,omitempty"`
	Type            *string                                                         `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeAllRootVariableResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllRootVariableResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetCode(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.Code = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetDescription(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetDisplayType(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.DisplayType = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetFavoriteFlag(v bool) *DescribeAllRootVariableResponseBodyResultObject {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetFieldRank(v int64) *DescribeAllRootVariableResponseBodyResultObject {
	s.FieldRank = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetFieldType(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.FieldType = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetId(v int64) *DescribeAllRootVariableResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetInputFieldType(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.InputFieldType = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetInputs(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.Inputs = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetName(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetOutputThreshold(v *DescribeAllRootVariableResponseBodyResultObjectOutputThreshold) *DescribeAllRootVariableResponseBodyResultObject {
	s.OutputThreshold = v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetSourceType(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.SourceType = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetTitle(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObject) SetType(v string) *DescribeAllRootVariableResponseBodyResultObject {
	s.Type = &v
	return s
}

type DescribeAllRootVariableResponseBodyResultObjectOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeAllRootVariableResponseBodyResultObjectOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllRootVariableResponseBodyResultObjectOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeAllRootVariableResponseBodyResultObjectOutputThreshold) SetMaxValue(v float64) *DescribeAllRootVariableResponseBodyResultObjectOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeAllRootVariableResponseBodyResultObjectOutputThreshold) SetMinValue(v float64) *DescribeAllRootVariableResponseBodyResultObjectOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeAllRootVariableResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAllRootVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAllRootVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllRootVariableResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllRootVariableResponse) SetHeaders(v map[string]*string) *DescribeAllRootVariableResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllRootVariableResponse) SetStatusCode(v int32) *DescribeAllRootVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllRootVariableResponse) SetBody(v *DescribeAllRootVariableResponseBody) *DescribeAllRootVariableResponse {
	s.Body = v
	return s
}

type DescribeAnalysisColumnFieldListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAnalysisColumnFieldListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisColumnFieldListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisColumnFieldListRequest) SetLang(v string) *DescribeAnalysisColumnFieldListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAnalysisColumnFieldListRequest) SetRegId(v string) *DescribeAnalysisColumnFieldListRequest {
	s.RegId = &v
	return s
}

type DescribeAnalysisColumnFieldListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeAnalysisColumnFieldListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisColumnFieldListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisColumnFieldListResponseBody) SetRequestId(v string) *DescribeAnalysisColumnFieldListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAnalysisColumnFieldListResponseBody) SetResultObject(v bool) *DescribeAnalysisColumnFieldListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeAnalysisColumnFieldListResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAnalysisColumnFieldListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAnalysisColumnFieldListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisColumnFieldListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisColumnFieldListResponse) SetHeaders(v map[string]*string) *DescribeAnalysisColumnFieldListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAnalysisColumnFieldListResponse) SetStatusCode(v int32) *DescribeAnalysisColumnFieldListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAnalysisColumnFieldListResponse) SetBody(v *DescribeAnalysisColumnFieldListResponseBody) *DescribeAnalysisColumnFieldListResponse {
	s.Body = v
	return s
}

type DescribeAnalysisColumnListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAnalysisColumnListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisColumnListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisColumnListRequest) SetLang(v string) *DescribeAnalysisColumnListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAnalysisColumnListRequest) SetRegId(v string) *DescribeAnalysisColumnListRequest {
	s.RegId = &v
	return s
}

type DescribeAnalysisColumnListResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeAnalysisColumnListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeAnalysisColumnListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisColumnListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisColumnListResponseBody) SetRequestId(v string) *DescribeAnalysisColumnListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAnalysisColumnListResponseBody) SetResultObject(v []*DescribeAnalysisColumnListResponseBodyResultObject) *DescribeAnalysisColumnListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAnalysisColumnListResponseBodyResultObject struct {
	EventCode     *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName     *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	IsDefault     *bool   `json:"isDefault,omitempty" xml:"isDefault,omitempty"`
	VariableName  *string `json:"variableName,omitempty" xml:"variableName,omitempty"`
	VariableTitle *string `json:"variableTitle,omitempty" xml:"variableTitle,omitempty"`
	VariableType  *string `json:"variableType,omitempty" xml:"variableType,omitempty"`
}

func (s DescribeAnalysisColumnListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisColumnListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisColumnListResponseBodyResultObject) SetEventCode(v string) *DescribeAnalysisColumnListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeAnalysisColumnListResponseBodyResultObject) SetEventName(v string) *DescribeAnalysisColumnListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeAnalysisColumnListResponseBodyResultObject) SetIsDefault(v bool) *DescribeAnalysisColumnListResponseBodyResultObject {
	s.IsDefault = &v
	return s
}

func (s *DescribeAnalysisColumnListResponseBodyResultObject) SetVariableName(v string) *DescribeAnalysisColumnListResponseBodyResultObject {
	s.VariableName = &v
	return s
}

func (s *DescribeAnalysisColumnListResponseBodyResultObject) SetVariableTitle(v string) *DescribeAnalysisColumnListResponseBodyResultObject {
	s.VariableTitle = &v
	return s
}

func (s *DescribeAnalysisColumnListResponseBodyResultObject) SetVariableType(v string) *DescribeAnalysisColumnListResponseBodyResultObject {
	s.VariableType = &v
	return s
}

type DescribeAnalysisColumnListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAnalysisColumnListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAnalysisColumnListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisColumnListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisColumnListResponse) SetHeaders(v map[string]*string) *DescribeAnalysisColumnListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAnalysisColumnListResponse) SetStatusCode(v int32) *DescribeAnalysisColumnListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAnalysisColumnListResponse) SetBody(v *DescribeAnalysisColumnListResponseBody) *DescribeAnalysisColumnListResponse {
	s.Body = v
	return s
}

type DescribeAnalysisConditionFavoriteListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAnalysisConditionFavoriteListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisConditionFavoriteListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisConditionFavoriteListRequest) SetLang(v string) *DescribeAnalysisConditionFavoriteListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListRequest) SetRegId(v string) *DescribeAnalysisConditionFavoriteListRequest {
	s.RegId = &v
	return s
}

type DescribeAnalysisConditionFavoriteListResponseBody struct {
	RequestId    *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeAnalysisConditionFavoriteListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeAnalysisConditionFavoriteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisConditionFavoriteListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisConditionFavoriteListResponseBody) SetRequestId(v string) *DescribeAnalysisConditionFavoriteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBody) SetResultObject(v []*DescribeAnalysisConditionFavoriteListResponseBodyResultObject) *DescribeAnalysisConditionFavoriteListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAnalysisConditionFavoriteListResponseBodyResultObject struct {
	Condition      *string `json:"condition,omitempty" xml:"condition,omitempty"`
	EventBeginTime *int64  `json:"eventBeginTime,omitempty" xml:"eventBeginTime,omitempty"`
	EventCodes     *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	EventEndTime   *int64  `json:"eventEndTime,omitempty" xml:"eventEndTime,omitempty"`
	FieldName      *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldValue     *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
	Id             *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name           *string `json:"name,omitempty" xml:"name,omitempty"`
	Type           *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeAnalysisConditionFavoriteListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisConditionFavoriteListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetCondition(v string) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.Condition = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetEventBeginTime(v int64) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.EventBeginTime = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetEventCodes(v string) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.EventCodes = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetEventEndTime(v int64) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.EventEndTime = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetFieldName(v string) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.FieldName = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetFieldValue(v string) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.FieldValue = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetId(v int64) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetName(v string) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponseBodyResultObject) SetType(v string) *DescribeAnalysisConditionFavoriteListResponseBodyResultObject {
	s.Type = &v
	return s
}

type DescribeAnalysisConditionFavoriteListResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAnalysisConditionFavoriteListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAnalysisConditionFavoriteListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisConditionFavoriteListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisConditionFavoriteListResponse) SetHeaders(v map[string]*string) *DescribeAnalysisConditionFavoriteListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponse) SetStatusCode(v int32) *DescribeAnalysisConditionFavoriteListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAnalysisConditionFavoriteListResponse) SetBody(v *DescribeAnalysisConditionFavoriteListResponseBody) *DescribeAnalysisConditionFavoriteListResponse {
	s.Body = v
	return s
}

type DescribeAnalysisExportTaskDownloadUrlRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAnalysisExportTaskDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisExportTaskDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisExportTaskDownloadUrlRequest) SetLang(v string) *DescribeAnalysisExportTaskDownloadUrlRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAnalysisExportTaskDownloadUrlRequest) SetRegId(v string) *DescribeAnalysisExportTaskDownloadUrlRequest {
	s.RegId = &v
	return s
}

type DescribeAnalysisExportTaskDownloadUrlResponseBody struct {
	RequestId    *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeAnalysisExportTaskDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisExportTaskDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponseBody) SetRequestId(v string) *DescribeAnalysisExportTaskDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponseBody) SetResultObject(v *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject) *DescribeAnalysisExportTaskDownloadUrlResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject struct {
	DownloadFileUrl *string `json:"downloadFileUrl,omitempty" xml:"downloadFileUrl,omitempty"`
	ExecuteTime     *int64  `json:"executeTime,omitempty" xml:"executeTime,omitempty"`
	Status          *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject) SetDownloadFileUrl(v string) *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject {
	s.DownloadFileUrl = &v
	return s
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject) SetExecuteTime(v int64) *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject) SetStatus(v string) *DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject {
	s.Status = &v
	return s
}

type DescribeAnalysisExportTaskDownloadUrlResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAnalysisExportTaskDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAnalysisExportTaskDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisExportTaskDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponse) SetHeaders(v map[string]*string) *DescribeAnalysisExportTaskDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponse) SetStatusCode(v int32) *DescribeAnalysisExportTaskDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAnalysisExportTaskDownloadUrlResponse) SetBody(v *DescribeAnalysisExportTaskDownloadUrlResponseBody) *DescribeAnalysisExportTaskDownloadUrlResponse {
	s.Body = v
	return s
}

type DescribeApiRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty"`
	// This parameter is required.
	ApiRegionId *string `json:"apiRegionId,omitempty" xml:"apiRegionId,omitempty"`
	// This parameter is required.
	ApiType *string `json:"apiType,omitempty" xml:"apiType,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiRequest) SetLang(v string) *DescribeApiRequest {
	s.Lang = &v
	return s
}

func (s *DescribeApiRequest) SetApiId(v string) *DescribeApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiRequest) SetApiRegionId(v string) *DescribeApiRequest {
	s.ApiRegionId = &v
	return s
}

func (s *DescribeApiRequest) SetApiType(v string) *DescribeApiRequest {
	s.ApiType = &v
	return s
}

func (s *DescribeApiRequest) SetRegId(v string) *DescribeApiRequest {
	s.RegId = &v
	return s
}

type DescribeApiResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBody) SetRequestId(v string) *DescribeApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiResponseBody) SetResultObject(v bool) *DescribeApiResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeApiResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiResponse) SetHeaders(v map[string]*string) *DescribeApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiResponse) SetStatusCode(v int32) *DescribeApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiResponse) SetBody(v *DescribeApiResponseBody) *DescribeApiResponse {
	s.Body = v
	return s
}

type DescribeApiGroupsRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	ApiRegionId *string `json:"apiRegionId,omitempty" xml:"apiRegionId,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeApiGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsRequest) SetLang(v string) *DescribeApiGroupsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetApiRegionId(v string) *DescribeApiGroupsRequest {
	s.ApiRegionId = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetRegId(v string) *DescribeApiGroupsRequest {
	s.RegId = &v
	return s
}

type DescribeApiGroupsResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeApiGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBody) SetRequestId(v string) *DescribeApiGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetResultObject(v bool) *DescribeApiGroupsResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeApiGroupsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponse) SetHeaders(v map[string]*string) *DescribeApiGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiGroupsResponse) SetStatusCode(v int32) *DescribeApiGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiGroupsResponse) SetBody(v *DescribeApiGroupsResponseBody) *DescribeApiGroupsResponse {
	s.Body = v
	return s
}

type DescribeApiLimitRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeApiLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLimitRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiLimitRequest) SetLang(v string) *DescribeApiLimitRequest {
	s.Lang = &v
	return s
}

func (s *DescribeApiLimitRequest) SetRegId(v string) *DescribeApiLimitRequest {
	s.RegId = &v
	return s
}

type DescribeApiLimitResponseBody struct {
	RequestId    *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeApiLimitResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeApiLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLimitResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiLimitResponseBody) SetRequestId(v string) *DescribeApiLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiLimitResponseBody) SetResultObject(v *DescribeApiLimitResponseBodyResultObject) *DescribeApiLimitResponseBody {
	s.ResultObject = v
	return s
}

type DescribeApiLimitResponseBodyResultObject struct {
	Limit        *bool  `json:"limit,omitempty" xml:"limit,omitempty"`
	MaxTotalItem *int64 `json:"maxTotalItem,omitempty" xml:"maxTotalItem,omitempty"`
	TotalItem    *int64 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
}

func (s DescribeApiLimitResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLimitResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeApiLimitResponseBodyResultObject) SetLimit(v bool) *DescribeApiLimitResponseBodyResultObject {
	s.Limit = &v
	return s
}

func (s *DescribeApiLimitResponseBodyResultObject) SetMaxTotalItem(v int64) *DescribeApiLimitResponseBodyResultObject {
	s.MaxTotalItem = &v
	return s
}

func (s *DescribeApiLimitResponseBodyResultObject) SetTotalItem(v int64) *DescribeApiLimitResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

type DescribeApiLimitResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLimitResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiLimitResponse) SetHeaders(v map[string]*string) *DescribeApiLimitResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiLimitResponse) SetStatusCode(v int32) *DescribeApiLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiLimitResponse) SetBody(v *DescribeApiLimitResponseBody) *DescribeApiLimitResponse {
	s.Body = v
	return s
}

type DescribeApiNameListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeApiNameListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiNameListRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiNameListRequest) SetLang(v string) *DescribeApiNameListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeApiNameListRequest) SetRegId(v string) *DescribeApiNameListRequest {
	s.RegId = &v
	return s
}

type DescribeApiNameListResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeApiNameListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeApiNameListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiNameListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiNameListResponseBody) SetRequestId(v string) *DescribeApiNameListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiNameListResponseBody) SetResultObject(v []*DescribeApiNameListResponseBodyResultObject) *DescribeApiNameListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeApiNameListResponseBodyResultObject struct {
	ApiId   *string `json:"apiId,omitempty" xml:"apiId,omitempty"`
	ApiName *string `json:"apiName,omitempty" xml:"apiName,omitempty"`
}

func (s DescribeApiNameListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiNameListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeApiNameListResponseBodyResultObject) SetApiId(v string) *DescribeApiNameListResponseBodyResultObject {
	s.ApiId = &v
	return s
}

func (s *DescribeApiNameListResponseBodyResultObject) SetApiName(v string) *DescribeApiNameListResponseBodyResultObject {
	s.ApiName = &v
	return s
}

type DescribeApiNameListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiNameListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiNameListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiNameListResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiNameListResponse) SetHeaders(v map[string]*string) *DescribeApiNameListResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiNameListResponse) SetStatusCode(v int32) *DescribeApiNameListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiNameListResponse) SetBody(v *DescribeApiNameListResponseBody) *DescribeApiNameListResponse {
	s.Body = v
	return s
}

type DescribeApiVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id    *string `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeApiVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiVariableRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiVariableRequest) SetLang(v string) *DescribeApiVariableRequest {
	s.Lang = &v
	return s
}

func (s *DescribeApiVariableRequest) SetId(v string) *DescribeApiVariableRequest {
	s.Id = &v
	return s
}

func (s *DescribeApiVariableRequest) SetRegId(v string) *DescribeApiVariableRequest {
	s.RegId = &v
	return s
}

type DescribeApiVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeApiVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiVariableResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiVariableResponseBody) SetRequestId(v string) *DescribeApiVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiVariableResponseBody) SetResultObject(v bool) *DescribeApiVariableResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeApiVariableResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiVariableResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiVariableResponse) SetHeaders(v map[string]*string) *DescribeApiVariableResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiVariableResponse) SetStatusCode(v int32) *DescribeApiVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiVariableResponse) SetBody(v *DescribeApiVariableResponseBody) *DescribeApiVariableResponse {
	s.Body = v
	return s
}

type DescribeApisRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	ApiGroupId *string `json:"apiGroupId,omitempty" xml:"apiGroupId,omitempty"`
	// This parameter is required.
	ApiRegionId *string `json:"apiRegionId,omitempty" xml:"apiRegionId,omitempty"`
	// This parameter is required.
	ApiType *string `json:"apiType,omitempty" xml:"apiType,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisRequest) SetLang(v string) *DescribeApisRequest {
	s.Lang = &v
	return s
}

func (s *DescribeApisRequest) SetApiGroupId(v string) *DescribeApisRequest {
	s.ApiGroupId = &v
	return s
}

func (s *DescribeApisRequest) SetApiRegionId(v string) *DescribeApisRequest {
	s.ApiRegionId = &v
	return s
}

func (s *DescribeApisRequest) SetApiType(v string) *DescribeApisRequest {
	s.ApiType = &v
	return s
}

func (s *DescribeApisRequest) SetRegId(v string) *DescribeApisRequest {
	s.RegId = &v
	return s
}

type DescribeApisResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBody) SetRequestId(v string) *DescribeApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisResponseBody) SetResultObject(v bool) *DescribeApisResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeApisResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisResponse) SetHeaders(v map[string]*string) *DescribeApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisResponse) SetStatusCode(v int32) *DescribeApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisResponse) SetBody(v *DescribeApisResponseBody) *DescribeApisResponse {
	s.Body = v
	return s
}

type DescribeAppKeyPageRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAppKeyPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppKeyPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppKeyPageRequest) SetLang(v string) *DescribeAppKeyPageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAppKeyPageRequest) SetCurrentPage(v string) *DescribeAppKeyPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAppKeyPageRequest) SetPageSize(v string) *DescribeAppKeyPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAppKeyPageRequest) SetRegId(v string) *DescribeAppKeyPageRequest {
	s.RegId = &v
	return s
}

type DescribeAppKeyPageResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                        `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                        `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeAppKeyPageResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                        `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                        `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeAppKeyPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppKeyPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppKeyPageResponseBody) SetRequestId(v string) *DescribeAppKeyPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppKeyPageResponseBody) SetCurrentPage(v int32) *DescribeAppKeyPageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAppKeyPageResponseBody) SetPageSize(v int32) *DescribeAppKeyPageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAppKeyPageResponseBody) SetResultObject(v []*DescribeAppKeyPageResponseBodyResultObject) *DescribeAppKeyPageResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeAppKeyPageResponseBody) SetTotalItem(v int32) *DescribeAppKeyPageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeAppKeyPageResponseBody) SetTotalPage(v int32) *DescribeAppKeyPageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeAppKeyPageResponseBodyResultObject struct {
	AndroidSdkUrl     *string `json:"androidSdkUrl,omitempty" xml:"androidSdkUrl,omitempty"`
	AndroidSdkVersion *string `json:"androidSdkVersion,omitempty" xml:"androidSdkVersion,omitempty"`
	AppKey            *string `json:"appKey,omitempty" xml:"appKey,omitempty"`
	GmtCreate         *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	IosSdkUrl         *string `json:"iosSdkUrl,omitempty" xml:"iosSdkUrl,omitempty"`
	IosSdkVersion     *string `json:"iosSdkVersion,omitempty" xml:"iosSdkVersion,omitempty"`
	Memo              *string `json:"memo,omitempty" xml:"memo,omitempty"`
	SdkItems          *string `json:"sdkItems,omitempty" xml:"sdkItems,omitempty"`
	Used              *string `json:"used,omitempty" xml:"used,omitempty"`
}

func (s DescribeAppKeyPageResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppKeyPageResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetAndroidSdkUrl(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.AndroidSdkUrl = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetAndroidSdkVersion(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.AndroidSdkVersion = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetAppKey(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.AppKey = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetGmtCreate(v int64) *DescribeAppKeyPageResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetIosSdkUrl(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.IosSdkUrl = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetIosSdkVersion(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.IosSdkVersion = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetMemo(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.Memo = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetSdkItems(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.SdkItems = &v
	return s
}

func (s *DescribeAppKeyPageResponseBodyResultObject) SetUsed(v string) *DescribeAppKeyPageResponseBodyResultObject {
	s.Used = &v
	return s
}

type DescribeAppKeyPageResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppKeyPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppKeyPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppKeyPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppKeyPageResponse) SetHeaders(v map[string]*string) *DescribeAppKeyPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppKeyPageResponse) SetStatusCode(v int32) *DescribeAppKeyPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppKeyPageResponse) SetBody(v *DescribeAppKeyPageResponseBody) *DescribeAppKeyPageResponse {
	s.Body = v
	return s
}

type DescribeAuditConfigRequest struct {
	Lang              *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	AuditRelationType *string `json:"auditRelationType,omitempty" xml:"auditRelationType,omitempty"`
	RegId             *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuditConfigRequest) SetLang(v string) *DescribeAuditConfigRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuditConfigRequest) SetAuditRelationType(v string) *DescribeAuditConfigRequest {
	s.AuditRelationType = &v
	return s
}

func (s *DescribeAuditConfigRequest) SetRegId(v string) *DescribeAuditConfigRequest {
	s.RegId = &v
	return s
}

type DescribeAuditConfigResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuditConfigResponseBody) SetCode(v string) *DescribeAuditConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAuditConfigResponseBody) SetHttpStatusCode(v string) *DescribeAuditConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAuditConfigResponseBody) SetMessage(v string) *DescribeAuditConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAuditConfigResponseBody) SetResultObject(v bool) *DescribeAuditConfigResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeAuditConfigResponseBody) SetSuccess(v bool) *DescribeAuditConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeAuditConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuditConfigResponse) SetHeaders(v map[string]*string) *DescribeAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuditConfigResponse) SetStatusCode(v int32) *DescribeAuditConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuditConfigResponse) SetBody(v *DescribeAuditConfigResponseBody) *DescribeAuditConfigResponse {
	s.Body = v
	return s
}

type DescribeAuditDetailsRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAuditDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuditDetailsRequest) SetLang(v string) *DescribeAuditDetailsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuditDetailsRequest) SetId(v int64) *DescribeAuditDetailsRequest {
	s.Id = &v
	return s
}

func (s *DescribeAuditDetailsRequest) SetRegId(v string) *DescribeAuditDetailsRequest {
	s.RegId = &v
	return s
}

type DescribeAuditDetailsResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeAuditDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuditDetailsResponseBody) SetCode(v string) *DescribeAuditDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAuditDetailsResponseBody) SetHttpStatusCode(v string) *DescribeAuditDetailsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAuditDetailsResponseBody) SetMessage(v string) *DescribeAuditDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAuditDetailsResponseBody) SetResultObject(v bool) *DescribeAuditDetailsResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeAuditDetailsResponseBody) SetSuccess(v bool) *DescribeAuditDetailsResponseBody {
	s.Success = &v
	return s
}

type DescribeAuditDetailsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuditDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuditDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuditDetailsResponse) SetHeaders(v map[string]*string) *DescribeAuditDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuditDetailsResponse) SetStatusCode(v int32) *DescribeAuditDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuditDetailsResponse) SetBody(v *DescribeAuditDetailsResponseBody) *DescribeAuditDetailsResponse {
	s.Body = v
	return s
}

type DescribeAuditPageListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	AuditStatus *string `json:"auditStatus,omitempty" xml:"auditStatus,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EventCode   *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleName    *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s DescribeAuditPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuditPageListRequest) SetLang(v string) *DescribeAuditPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuditPageListRequest) SetAuditStatus(v string) *DescribeAuditPageListRequest {
	s.AuditStatus = &v
	return s
}

func (s *DescribeAuditPageListRequest) SetCurrentPage(v string) *DescribeAuditPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAuditPageListRequest) SetEventCode(v string) *DescribeAuditPageListRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeAuditPageListRequest) SetPageSize(v string) *DescribeAuditPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAuditPageListRequest) SetRegId(v string) *DescribeAuditPageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeAuditPageListRequest) SetRuleName(v string) *DescribeAuditPageListRequest {
	s.RuleName = &v
	return s
}

type DescribeAuditPageListResponseBody struct {
	CurrentPage  *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	TotalItem    *int32  `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int64  `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeAuditPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuditPageListResponseBody) SetCurrentPage(v int32) *DescribeAuditPageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAuditPageListResponseBody) SetPageSize(v int32) *DescribeAuditPageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAuditPageListResponseBody) SetRequestId(v string) *DescribeAuditPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuditPageListResponseBody) SetResultObject(v bool) *DescribeAuditPageListResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeAuditPageListResponseBody) SetTotalItem(v int32) *DescribeAuditPageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeAuditPageListResponseBody) SetTotalPage(v int64) *DescribeAuditPageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeAuditPageListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuditPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuditPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuditPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuditPageListResponse) SetHeaders(v map[string]*string) *DescribeAuditPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuditPageListResponse) SetStatusCode(v int32) *DescribeAuditPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuditPageListResponse) SetBody(v *DescribeAuditPageListResponseBody) *DescribeAuditPageListResponse {
	s.Body = v
	return s
}

type DescribeAuthEventNameListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAuthEventNameListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthEventNameListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthEventNameListRequest) SetLang(v string) *DescribeAuthEventNameListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuthEventNameListRequest) SetRegId(v string) *DescribeAuthEventNameListRequest {
	s.RegId = &v
	return s
}

type DescribeAuthEventNameListResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeAuthEventNameListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthEventNameListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthEventNameListResponseBody) SetRequestId(v string) *DescribeAuthEventNameListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthEventNameListResponseBody) SetResultObject(v bool) *DescribeAuthEventNameListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeAuthEventNameListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuthEventNameListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuthEventNameListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthEventNameListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthEventNameListResponse) SetHeaders(v map[string]*string) *DescribeAuthEventNameListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthEventNameListResponse) SetStatusCode(v int32) *DescribeAuthEventNameListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthEventNameListResponse) SetBody(v *DescribeAuthEventNameListResponseBody) *DescribeAuthEventNameListResponse {
	s.Body = v
	return s
}

type DescribeAuthRulePageListRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	// This parameter is required.
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	Status   *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeAuthRulePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthRulePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthRulePageListRequest) SetLang(v string) *DescribeAuthRulePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuthRulePageListRequest) SetEventCode(v string) *DescribeAuthRulePageListRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeAuthRulePageListRequest) SetRegId(v string) *DescribeAuthRulePageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeAuthRulePageListRequest) SetRuleName(v string) *DescribeAuthRulePageListRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeAuthRulePageListRequest) SetStatus(v string) *DescribeAuthRulePageListRequest {
	s.Status = &v
	return s
}

type DescribeAuthRulePageListResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int64                                              `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int64                                              `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeAuthRulePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int64                                              `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int64                                              `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeAuthRulePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthRulePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthRulePageListResponseBody) SetRequestId(v string) *DescribeAuthRulePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBody) SetCurrentPage(v int64) *DescribeAuthRulePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBody) SetPageSize(v int64) *DescribeAuthRulePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBody) SetResultObject(v []*DescribeAuthRulePageListResponseBodyResultObject) *DescribeAuthRulePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeAuthRulePageListResponseBody) SetTotalItem(v int64) *DescribeAuthRulePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBody) SetTotalPage(v int64) *DescribeAuthRulePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeAuthRulePageListResponseBodyResultObject struct {
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	CreateType    *string `json:"createType,omitempty" xml:"createType,omitempty"`
	GmtModified   *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id            *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Memo          *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName      *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleVersionId *int64  `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
	Status        *string `json:"status,omitempty" xml:"status,omitempty"`
	Version       *int64  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeAuthRulePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthRulePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetConsoleRuleId(v int64) *DescribeAuthRulePageListResponseBodyResultObject {
	s.ConsoleRuleId = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetCreateType(v string) *DescribeAuthRulePageListResponseBodyResultObject {
	s.CreateType = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeAuthRulePageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetId(v int64) *DescribeAuthRulePageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetMemo(v string) *DescribeAuthRulePageListResponseBodyResultObject {
	s.Memo = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetRuleId(v string) *DescribeAuthRulePageListResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetRuleName(v string) *DescribeAuthRulePageListResponseBodyResultObject {
	s.RuleName = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetRuleVersionId(v int64) *DescribeAuthRulePageListResponseBodyResultObject {
	s.RuleVersionId = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetStatus(v string) *DescribeAuthRulePageListResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeAuthRulePageListResponseBodyResultObject) SetVersion(v int64) *DescribeAuthRulePageListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeAuthRulePageListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuthRulePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuthRulePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthRulePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthRulePageListResponse) SetHeaders(v map[string]*string) *DescribeAuthRulePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthRulePageListResponse) SetStatusCode(v int32) *DescribeAuthRulePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthRulePageListResponse) SetBody(v *DescribeAuthRulePageListResponseBody) *DescribeAuthRulePageListResponse {
	s.Body = v
	return s
}

type DescribeAuthSceneListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAuthSceneListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthSceneListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthSceneListRequest) SetLang(v string) *DescribeAuthSceneListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuthSceneListRequest) SetRegId(v string) *DescribeAuthSceneListRequest {
	s.RegId = &v
	return s
}

type DescribeAuthSceneListResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeAuthSceneListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeAuthSceneListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthSceneListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthSceneListResponseBody) SetRequestId(v string) *DescribeAuthSceneListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthSceneListResponseBody) SetResultObject(v []*DescribeAuthSceneListResponseBodyResultObject) *DescribeAuthSceneListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeAuthSceneListResponseBodyResultObject struct {
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
}

func (s DescribeAuthSceneListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthSceneListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAuthSceneListResponseBodyResultObject) SetServiceCode(v string) *DescribeAuthSceneListResponseBodyResultObject {
	s.ServiceCode = &v
	return s
}

type DescribeAuthSceneListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuthSceneListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuthSceneListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthSceneListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthSceneListResponse) SetHeaders(v map[string]*string) *DescribeAuthSceneListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthSceneListResponse) SetStatusCode(v int32) *DescribeAuthSceneListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthSceneListResponse) SetBody(v *DescribeAuthSceneListResponseBody) *DescribeAuthSceneListResponse {
	s.Body = v
	return s
}

type DescribeAuthScenePageListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId     *string `json:"regId,omitempty" xml:"regId,omitempty"`
	SceneName *string `json:"sceneName,omitempty" xml:"sceneName,omitempty"`
}

func (s DescribeAuthScenePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthScenePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthScenePageListRequest) SetLang(v string) *DescribeAuthScenePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuthScenePageListRequest) SetRegId(v string) *DescribeAuthScenePageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeAuthScenePageListRequest) SetSceneName(v string) *DescribeAuthScenePageListRequest {
	s.SceneName = &v
	return s
}

type DescribeAuthScenePageListResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int64                                               `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int64                                               `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeAuthScenePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int64                                               `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int64                                               `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeAuthScenePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthScenePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthScenePageListResponseBody) SetRequestId(v string) *DescribeAuthScenePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBody) SetCurrentPage(v int64) *DescribeAuthScenePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBody) SetPageSize(v int64) *DescribeAuthScenePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBody) SetResultObject(v []*DescribeAuthScenePageListResponseBodyResultObject) *DescribeAuthScenePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeAuthScenePageListResponseBody) SetTotalItem(v int64) *DescribeAuthScenePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBody) SetTotalPage(v int64) *DescribeAuthScenePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeAuthScenePageListResponseBodyResultObject struct {
	CommonRuleCount *int64  `json:"commonRuleCount,omitempty" xml:"commonRuleCount,omitempty"`
	CustomRuleCount *int64  `json:"customRuleCount,omitempty" xml:"customRuleCount,omitempty"`
	EventCode       *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	SceneName       *string `json:"sceneName,omitempty" xml:"sceneName,omitempty"`
	ServerName      *string `json:"serverName,omitempty" xml:"serverName,omitempty"`
}

func (s DescribeAuthScenePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthScenePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAuthScenePageListResponseBodyResultObject) SetCommonRuleCount(v int64) *DescribeAuthScenePageListResponseBodyResultObject {
	s.CommonRuleCount = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBodyResultObject) SetCustomRuleCount(v int64) *DescribeAuthScenePageListResponseBodyResultObject {
	s.CustomRuleCount = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBodyResultObject) SetEventCode(v string) *DescribeAuthScenePageListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBodyResultObject) SetSceneName(v string) *DescribeAuthScenePageListResponseBodyResultObject {
	s.SceneName = &v
	return s
}

func (s *DescribeAuthScenePageListResponseBodyResultObject) SetServerName(v string) *DescribeAuthScenePageListResponseBodyResultObject {
	s.ServerName = &v
	return s
}

type DescribeAuthScenePageListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuthScenePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuthScenePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthScenePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthScenePageListResponse) SetHeaders(v map[string]*string) *DescribeAuthScenePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthScenePageListResponse) SetStatusCode(v int32) *DescribeAuthScenePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthScenePageListResponse) SetBody(v *DescribeAuthScenePageListResponseBody) *DescribeAuthScenePageListResponse {
	s.Body = v
	return s
}

type DescribeAuthStatusRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAuthStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthStatusRequest) SetLang(v string) *DescribeAuthStatusRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAuthStatusRequest) SetRegId(v string) *DescribeAuthStatusRequest {
	s.RegId = &v
	return s
}

type DescribeAuthStatusResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeAuthStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthStatusResponseBody) SetRequestId(v string) *DescribeAuthStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthStatusResponseBody) SetResultObject(v bool) *DescribeAuthStatusResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeAuthStatusResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuthStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuthStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthStatusResponse) SetHeaders(v map[string]*string) *DescribeAuthStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthStatusResponse) SetStatusCode(v int32) *DescribeAuthStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthStatusResponse) SetBody(v *DescribeAuthStatusResponseBody) *DescribeAuthStatusResponse {
	s.Body = v
	return s
}

type DescribeAvgExecuteCostReportRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeAvgExecuteCostReportRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvgExecuteCostReportRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvgExecuteCostReportRequest) SetLang(v string) *DescribeAvgExecuteCostReportRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAvgExecuteCostReportRequest) SetRegId(v string) *DescribeAvgExecuteCostReportRequest {
	s.RegId = &v
	return s
}

type DescribeAvgExecuteCostReportResponseBody struct {
	Code           *string                                                 `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                                 `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                                 `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeAvgExecuteCostReportResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                                   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeAvgExecuteCostReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvgExecuteCostReportResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvgExecuteCostReportResponseBody) SetCode(v string) *DescribeAvgExecuteCostReportResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAvgExecuteCostReportResponseBody) SetHttpStatusCode(v string) *DescribeAvgExecuteCostReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAvgExecuteCostReportResponseBody) SetMessage(v string) *DescribeAvgExecuteCostReportResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAvgExecuteCostReportResponseBody) SetRequestId(v string) *DescribeAvgExecuteCostReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvgExecuteCostReportResponseBody) SetResultObject(v []*DescribeAvgExecuteCostReportResponseBodyResultObject) *DescribeAvgExecuteCostReportResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeAvgExecuteCostReportResponseBody) SetSuccess(v bool) *DescribeAvgExecuteCostReportResponseBody {
	s.Success = &v
	return s
}

type DescribeAvgExecuteCostReportResponseBodyResultObject struct {
	Ratio *string `json:"ratio,omitempty" xml:"ratio,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeAvgExecuteCostReportResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvgExecuteCostReportResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeAvgExecuteCostReportResponseBodyResultObject) SetRatio(v string) *DescribeAvgExecuteCostReportResponseBodyResultObject {
	s.Ratio = &v
	return s
}

func (s *DescribeAvgExecuteCostReportResponseBodyResultObject) SetValue(v string) *DescribeAvgExecuteCostReportResponseBodyResultObject {
	s.Value = &v
	return s
}

type DescribeAvgExecuteCostReportResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvgExecuteCostReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvgExecuteCostReportResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvgExecuteCostReportResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvgExecuteCostReportResponse) SetHeaders(v map[string]*string) *DescribeAvgExecuteCostReportResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvgExecuteCostReportResponse) SetStatusCode(v int32) *DescribeAvgExecuteCostReportResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvgExecuteCostReportResponse) SetBody(v *DescribeAvgExecuteCostReportResponseBody) *DescribeAvgExecuteCostReportResponse {
	s.Body = v
	return s
}

type DescribeBasicSearchPageListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	CurrentPage *int64 `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// This parameter is required.
	EventBeginTime *int64 `json:"eventBeginTime,omitempty" xml:"eventBeginTime,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	// This parameter is required.
	EventEndTime *int64  `json:"eventEndTime,omitempty" xml:"eventEndTime,omitempty"`
	FieldName    *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldValue   *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
	// This parameter is required.
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeBasicSearchPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicSearchPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeBasicSearchPageListRequest) SetLang(v string) *DescribeBasicSearchPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetCurrentPage(v int64) *DescribeBasicSearchPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetEventBeginTime(v int64) *DescribeBasicSearchPageListRequest {
	s.EventBeginTime = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetEventCodes(v string) *DescribeBasicSearchPageListRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetEventEndTime(v int64) *DescribeBasicSearchPageListRequest {
	s.EventEndTime = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetFieldName(v string) *DescribeBasicSearchPageListRequest {
	s.FieldName = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetFieldValue(v string) *DescribeBasicSearchPageListRequest {
	s.FieldValue = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetPageSize(v int64) *DescribeBasicSearchPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBasicSearchPageListRequest) SetRegId(v string) *DescribeBasicSearchPageListRequest {
	s.RegId = &v
	return s
}

type DescribeBasicSearchPageListResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeBasicSearchPageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeBasicSearchPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicSearchPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBasicSearchPageListResponseBody) SetRequestId(v string) *DescribeBasicSearchPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBasicSearchPageListResponseBody) SetResultObject(v *DescribeBasicSearchPageListResponseBodyResultObject) *DescribeBasicSearchPageListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeBasicSearchPageListResponseBodyResultObject struct {
	CurrentPage *int64                                                       `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Data        []map[string]interface{}                                     `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Header      []*DescribeBasicSearchPageListResponseBodyResultObjectHeader `json:"header,omitempty" xml:"header,omitempty" type:"Repeated"`
	PageSize    *int64                                                       `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	TotalItem   *int64                                                       `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage   *int64                                                       `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeBasicSearchPageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicSearchPageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeBasicSearchPageListResponseBodyResultObject) SetCurrentPage(v int64) *DescribeBasicSearchPageListResponseBodyResultObject {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBasicSearchPageListResponseBodyResultObject) SetData(v []map[string]interface{}) *DescribeBasicSearchPageListResponseBodyResultObject {
	s.Data = v
	return s
}

func (s *DescribeBasicSearchPageListResponseBodyResultObject) SetHeader(v []*DescribeBasicSearchPageListResponseBodyResultObjectHeader) *DescribeBasicSearchPageListResponseBodyResultObject {
	s.Header = v
	return s
}

func (s *DescribeBasicSearchPageListResponseBodyResultObject) SetPageSize(v int64) *DescribeBasicSearchPageListResponseBodyResultObject {
	s.PageSize = &v
	return s
}

func (s *DescribeBasicSearchPageListResponseBodyResultObject) SetTotalItem(v int64) *DescribeBasicSearchPageListResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

func (s *DescribeBasicSearchPageListResponseBodyResultObject) SetTotalPage(v int64) *DescribeBasicSearchPageListResponseBodyResultObject {
	s.TotalPage = &v
	return s
}

type DescribeBasicSearchPageListResponseBodyResultObjectHeader struct {
	FieldName  *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldTitle *string `json:"fieldTitle,omitempty" xml:"fieldTitle,omitempty"`
	IsDefault  *bool   `json:"isDefault,omitempty" xml:"isDefault,omitempty"`
}

func (s DescribeBasicSearchPageListResponseBodyResultObjectHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicSearchPageListResponseBodyResultObjectHeader) GoString() string {
	return s.String()
}

func (s *DescribeBasicSearchPageListResponseBodyResultObjectHeader) SetFieldName(v string) *DescribeBasicSearchPageListResponseBodyResultObjectHeader {
	s.FieldName = &v
	return s
}

func (s *DescribeBasicSearchPageListResponseBodyResultObjectHeader) SetFieldTitle(v string) *DescribeBasicSearchPageListResponseBodyResultObjectHeader {
	s.FieldTitle = &v
	return s
}

func (s *DescribeBasicSearchPageListResponseBodyResultObjectHeader) SetIsDefault(v bool) *DescribeBasicSearchPageListResponseBodyResultObjectHeader {
	s.IsDefault = &v
	return s
}

type DescribeBasicSearchPageListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBasicSearchPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBasicSearchPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicSearchPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeBasicSearchPageListResponse) SetHeaders(v map[string]*string) *DescribeBasicSearchPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeBasicSearchPageListResponse) SetStatusCode(v int32) *DescribeBasicSearchPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBasicSearchPageListResponse) SetBody(v *DescribeBasicSearchPageListResponseBody) *DescribeBasicSearchPageListResponse {
	s.Body = v
	return s
}

type DescribeBasicStartRequest struct {
	AppKey  *string `json:"appKey,omitempty" xml:"appKey,omitempty"`
	EndDs   *string `json:"endDs,omitempty" xml:"endDs,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
	StartDs *string `json:"startDs,omitempty" xml:"startDs,omitempty"`
}

func (s DescribeBasicStartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicStartRequest) GoString() string {
	return s.String()
}

func (s *DescribeBasicStartRequest) SetAppKey(v string) *DescribeBasicStartRequest {
	s.AppKey = &v
	return s
}

func (s *DescribeBasicStartRequest) SetEndDs(v string) *DescribeBasicStartRequest {
	s.EndDs = &v
	return s
}

func (s *DescribeBasicStartRequest) SetRegId(v string) *DescribeBasicStartRequest {
	s.RegId = &v
	return s
}

func (s *DescribeBasicStartRequest) SetService(v string) *DescribeBasicStartRequest {
	s.Service = &v
	return s
}

func (s *DescribeBasicStartRequest) SetStartDs(v string) *DescribeBasicStartRequest {
	s.StartDs = &v
	return s
}

type DescribeBasicStartResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeBasicStartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicStartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBasicStartResponseBody) SetCode(v string) *DescribeBasicStartResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeBasicStartResponseBody) SetHttpStatusCode(v string) *DescribeBasicStartResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeBasicStartResponseBody) SetMessage(v string) *DescribeBasicStartResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeBasicStartResponseBody) SetRequestId(v string) *DescribeBasicStartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBasicStartResponseBody) SetResultObject(v bool) *DescribeBasicStartResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeBasicStartResponseBody) SetSuccess(v bool) *DescribeBasicStartResponseBody {
	s.Success = &v
	return s
}

type DescribeBasicStartResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBasicStartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBasicStartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBasicStartResponse) GoString() string {
	return s.String()
}

func (s *DescribeBasicStartResponse) SetHeaders(v map[string]*string) *DescribeBasicStartResponse {
	s.Headers = v
	return s
}

func (s *DescribeBasicStartResponse) SetStatusCode(v int32) *DescribeBasicStartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBasicStartResponse) SetBody(v *DescribeBasicStartResponseBody) *DescribeBasicStartResponse {
	s.Body = v
	return s
}

type DescribeByPassShuntEventRequest struct {
	Lang    *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventId *int64  `json:"eventId,omitempty" xml:"eventId,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeByPassShuntEventRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeByPassShuntEventRequest) GoString() string {
	return s.String()
}

func (s *DescribeByPassShuntEventRequest) SetLang(v string) *DescribeByPassShuntEventRequest {
	s.Lang = &v
	return s
}

func (s *DescribeByPassShuntEventRequest) SetEventId(v int64) *DescribeByPassShuntEventRequest {
	s.EventId = &v
	return s
}

func (s *DescribeByPassShuntEventRequest) SetRegId(v string) *DescribeByPassShuntEventRequest {
	s.RegId = &v
	return s
}

type DescribeByPassShuntEventResponseBody struct {
	Code           *string                                           `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                           `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                           `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeByPassShuntEventResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                             `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeByPassShuntEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeByPassShuntEventResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeByPassShuntEventResponseBody) SetCode(v string) *DescribeByPassShuntEventResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeByPassShuntEventResponseBody) SetHttpStatusCode(v string) *DescribeByPassShuntEventResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeByPassShuntEventResponseBody) SetMessage(v string) *DescribeByPassShuntEventResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeByPassShuntEventResponseBody) SetRequestId(v string) *DescribeByPassShuntEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeByPassShuntEventResponseBody) SetResultObject(v *DescribeByPassShuntEventResponseBodyResultObject) *DescribeByPassShuntEventResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeByPassShuntEventResponseBody) SetSuccess(v bool) *DescribeByPassShuntEventResponseBody {
	s.Success = &v
	return s
}

type DescribeByPassShuntEventResponseBodyResultObject struct {
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
}

func (s DescribeByPassShuntEventResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeByPassShuntEventResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeByPassShuntEventResponseBodyResultObject) SetEventName(v string) *DescribeByPassShuntEventResponseBodyResultObject {
	s.EventName = &v
	return s
}

type DescribeByPassShuntEventResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeByPassShuntEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeByPassShuntEventResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeByPassShuntEventResponse) GoString() string {
	return s.String()
}

func (s *DescribeByPassShuntEventResponse) SetHeaders(v map[string]*string) *DescribeByPassShuntEventResponse {
	s.Headers = v
	return s
}

func (s *DescribeByPassShuntEventResponse) SetStatusCode(v int32) *DescribeByPassShuntEventResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeByPassShuntEventResponse) SetBody(v *DescribeByPassShuntEventResponseBody) *DescribeByPassShuntEventResponse {
	s.Body = v
	return s
}

type DescribeCustVariableConfigListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BizType  *string `json:"bizType,omitempty" xml:"bizType,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TimeType *string `json:"timeType,omitempty" xml:"timeType,omitempty"`
}

func (s DescribeCustVariableConfigListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableConfigListRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableConfigListRequest) SetLang(v string) *DescribeCustVariableConfigListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCustVariableConfigListRequest) SetBizType(v string) *DescribeCustVariableConfigListRequest {
	s.BizType = &v
	return s
}

func (s *DescribeCustVariableConfigListRequest) SetRegId(v string) *DescribeCustVariableConfigListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeCustVariableConfigListRequest) SetTimeType(v string) *DescribeCustVariableConfigListRequest {
	s.TimeType = &v
	return s
}

type DescribeCustVariableConfigListResponseBody struct {
	RequestId    *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeCustVariableConfigListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeCustVariableConfigListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableConfigListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableConfigListResponseBody) SetRequestId(v string) *DescribeCustVariableConfigListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCustVariableConfigListResponseBody) SetResultObject(v []*DescribeCustVariableConfigListResponseBodyResultObject) *DescribeCustVariableConfigListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeCustVariableConfigListResponseBodyResultObject struct {
	ConfigKey   *string `json:"configKey,omitempty" xml:"configKey,omitempty"`
	ConfigValue *string `json:"configValue,omitempty" xml:"configValue,omitempty"`
}

func (s DescribeCustVariableConfigListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableConfigListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableConfigListResponseBodyResultObject) SetConfigKey(v string) *DescribeCustVariableConfigListResponseBodyResultObject {
	s.ConfigKey = &v
	return s
}

func (s *DescribeCustVariableConfigListResponseBodyResultObject) SetConfigValue(v string) *DescribeCustVariableConfigListResponseBodyResultObject {
	s.ConfigValue = &v
	return s
}

type DescribeCustVariableConfigListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustVariableConfigListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustVariableConfigListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableConfigListResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableConfigListResponse) SetHeaders(v map[string]*string) *DescribeCustVariableConfigListResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustVariableConfigListResponse) SetStatusCode(v int32) *DescribeCustVariableConfigListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustVariableConfigListResponse) SetBody(v *DescribeCustVariableConfigListResponseBody) *DescribeCustVariableConfigListResponse {
	s.Body = v
	return s
}

type DescribeCustVariableDetailRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeCustVariableDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableDetailRequest) SetLang(v string) *DescribeCustVariableDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCustVariableDetailRequest) SetId(v int64) *DescribeCustVariableDetailRequest {
	s.Id = &v
	return s
}

func (s *DescribeCustVariableDetailRequest) SetRegId(v string) *DescribeCustVariableDetailRequest {
	s.RegId = &v
	return s
}

type DescribeCustVariableDetailResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeCustVariableDetailResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeCustVariableDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableDetailResponseBody) SetRequestId(v string) *DescribeCustVariableDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBody) SetResultObject(v []*DescribeCustVariableDetailResponseBodyResultObject) *DescribeCustVariableDetailResponseBody {
	s.ResultObject = v
	return s
}

type DescribeCustVariableDetailResponseBodyResultObject struct {
	Condition        *string `json:"condition,omitempty" xml:"condition,omitempty"`
	DataVersion      *int64  `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	Description      *string `json:"description,omitempty" xml:"description,omitempty"`
	EventCodes       *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	HistoryValueType *string `json:"historyValueType,omitempty" xml:"historyValueType,omitempty"`
	Id               *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Object           *string `json:"object,omitempty" xml:"object,omitempty"`
	Outputs          *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	Subject          *string `json:"subject,omitempty" xml:"subject,omitempty"`
	TimeType         *string `json:"timeType,omitempty" xml:"timeType,omitempty"`
	Title            *string `json:"title,omitempty" xml:"title,omitempty"`
	TwCount          *string `json:"twCount,omitempty" xml:"twCount,omitempty"`
	VelocityFC       *string `json:"velocityFC,omitempty" xml:"velocityFC,omitempty"`
	VelocityTW       *string `json:"velocityTW,omitempty" xml:"velocityTW,omitempty"`
}

func (s DescribeCustVariableDetailResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableDetailResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetCondition(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.Condition = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetDataVersion(v int64) *DescribeCustVariableDetailResponseBodyResultObject {
	s.DataVersion = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetDescription(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetEventCodes(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.EventCodes = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetHistoryValueType(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.HistoryValueType = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetId(v int64) *DescribeCustVariableDetailResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetObject(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.Object = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetOutputs(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.Outputs = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetSubject(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.Subject = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetTimeType(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.TimeType = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetTitle(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetTwCount(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.TwCount = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetVelocityFC(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.VelocityFC = &v
	return s
}

func (s *DescribeCustVariableDetailResponseBodyResultObject) SetVelocityTW(v string) *DescribeCustVariableDetailResponseBodyResultObject {
	s.VelocityTW = &v
	return s
}

type DescribeCustVariableDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustVariableDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustVariableDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariableDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustVariableDetailResponse) SetHeaders(v map[string]*string) *DescribeCustVariableDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustVariableDetailResponse) SetStatusCode(v int32) *DescribeCustVariableDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustVariableDetailResponse) SetBody(v *DescribeCustVariableDetailResponseBody) *DescribeCustVariableDetailResponse {
	s.Body = v
	return s
}

type DescribeCustVariablePageRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	CurrentPage *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EventCode   *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	PageSize    *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeCustVariablePageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariablePageRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustVariablePageRequest) SetLang(v string) *DescribeCustVariablePageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCustVariablePageRequest) SetCreateType(v string) *DescribeCustVariablePageRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeCustVariablePageRequest) SetCurrentPage(v int32) *DescribeCustVariablePageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCustVariablePageRequest) SetDescription(v string) *DescribeCustVariablePageRequest {
	s.Description = &v
	return s
}

func (s *DescribeCustVariablePageRequest) SetEventCode(v string) *DescribeCustVariablePageRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeCustVariablePageRequest) SetPageSize(v int32) *DescribeCustVariablePageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCustVariablePageRequest) SetRegId(v string) *DescribeCustVariablePageRequest {
	s.RegId = &v
	return s
}

type DescribeCustVariablePageResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                              `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                              `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeCustVariablePageResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                              `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                              `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeCustVariablePageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariablePageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustVariablePageResponseBody) SetRequestId(v string) *DescribeCustVariablePageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCustVariablePageResponseBody) SetCurrentPage(v int32) *DescribeCustVariablePageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCustVariablePageResponseBody) SetPageSize(v int32) *DescribeCustVariablePageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCustVariablePageResponseBody) SetResultObject(v []*DescribeCustVariablePageResponseBodyResultObject) *DescribeCustVariablePageResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeCustVariablePageResponseBody) SetTotalItem(v int32) *DescribeCustVariablePageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeCustVariablePageResponseBody) SetTotalPage(v int32) *DescribeCustVariablePageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeCustVariablePageResponseBodyResultObject struct {
	DataVersion *int64  `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Status      *string `json:"status,omitempty" xml:"status,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeCustVariablePageResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariablePageResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeCustVariablePageResponseBodyResultObject) SetDataVersion(v int64) *DescribeCustVariablePageResponseBodyResultObject {
	s.DataVersion = &v
	return s
}

func (s *DescribeCustVariablePageResponseBodyResultObject) SetDescription(v string) *DescribeCustVariablePageResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeCustVariablePageResponseBodyResultObject) SetGmtModified(v int64) *DescribeCustVariablePageResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeCustVariablePageResponseBodyResultObject) SetId(v int64) *DescribeCustVariablePageResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeCustVariablePageResponseBodyResultObject) SetName(v string) *DescribeCustVariablePageResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeCustVariablePageResponseBodyResultObject) SetStatus(v string) *DescribeCustVariablePageResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeCustVariablePageResponseBodyResultObject) SetTitle(v string) *DescribeCustVariablePageResponseBodyResultObject {
	s.Title = &v
	return s
}

type DescribeCustVariablePageResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustVariablePageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustVariablePageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustVariablePageResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustVariablePageResponse) SetHeaders(v map[string]*string) *DescribeCustVariablePageResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustVariablePageResponse) SetStatusCode(v int32) *DescribeCustVariablePageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustVariablePageResponse) SetBody(v *DescribeCustVariablePageResponseBody) *DescribeCustVariablePageResponse {
	s.Body = v
	return s
}

type DescribeDataSourceDataDownloadUrlRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	DataSourceId *int64 `json:"dataSourceId,omitempty" xml:"dataSourceId,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeDataSourceDataDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceDataDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceDataDownloadUrlRequest) SetLang(v string) *DescribeDataSourceDataDownloadUrlRequest {
	s.Lang = &v
	return s
}

func (s *DescribeDataSourceDataDownloadUrlRequest) SetDataSourceId(v int64) *DescribeDataSourceDataDownloadUrlRequest {
	s.DataSourceId = &v
	return s
}

func (s *DescribeDataSourceDataDownloadUrlRequest) SetRegId(v string) *DescribeDataSourceDataDownloadUrlRequest {
	s.RegId = &v
	return s
}

type DescribeDataSourceDataDownloadUrlResponseBody struct {
	RequestId    *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeDataSourceDataDownloadUrlResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeDataSourceDataDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceDataDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceDataDownloadUrlResponseBody) SetRequestId(v string) *DescribeDataSourceDataDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataSourceDataDownloadUrlResponseBody) SetResultObject(v *DescribeDataSourceDataDownloadUrlResponseBodyResultObject) *DescribeDataSourceDataDownloadUrlResponseBody {
	s.ResultObject = v
	return s
}

type DescribeDataSourceDataDownloadUrlResponseBodyResultObject struct {
	DownloadFileUrl *string `json:"downloadFileUrl,omitempty" xml:"downloadFileUrl,omitempty"`
}

func (s DescribeDataSourceDataDownloadUrlResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceDataDownloadUrlResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceDataDownloadUrlResponseBodyResultObject) SetDownloadFileUrl(v string) *DescribeDataSourceDataDownloadUrlResponseBodyResultObject {
	s.DownloadFileUrl = &v
	return s
}

type DescribeDataSourceDataDownloadUrlResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataSourceDataDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataSourceDataDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceDataDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceDataDownloadUrlResponse) SetHeaders(v map[string]*string) *DescribeDataSourceDataDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataSourceDataDownloadUrlResponse) SetStatusCode(v int32) *DescribeDataSourceDataDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataSourceDataDownloadUrlResponse) SetBody(v *DescribeDataSourceDataDownloadUrlResponseBody) *DescribeDataSourceDataDownloadUrlResponse {
	s.Body = v
	return s
}

type DescribeDataSourceFieldsRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	DataSourceCode *string `json:"dataSourceCode,omitempty" xml:"dataSourceCode,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeDataSourceFieldsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceFieldsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceFieldsRequest) SetLang(v string) *DescribeDataSourceFieldsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeDataSourceFieldsRequest) SetDataSourceCode(v string) *DescribeDataSourceFieldsRequest {
	s.DataSourceCode = &v
	return s
}

func (s *DescribeDataSourceFieldsRequest) SetRegId(v string) *DescribeDataSourceFieldsRequest {
	s.RegId = &v
	return s
}

type DescribeDataSourceFieldsResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeDataSourceFieldsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceFieldsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceFieldsResponseBody) SetRequestId(v string) *DescribeDataSourceFieldsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataSourceFieldsResponseBody) SetResultObject(v bool) *DescribeDataSourceFieldsResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeDataSourceFieldsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataSourceFieldsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataSourceFieldsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceFieldsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceFieldsResponse) SetHeaders(v map[string]*string) *DescribeDataSourceFieldsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataSourceFieldsResponse) SetStatusCode(v int32) *DescribeDataSourceFieldsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataSourceFieldsResponse) SetBody(v *DescribeDataSourceFieldsResponseBody) *DescribeDataSourceFieldsResponse {
	s.Body = v
	return s
}

type DescribeDataSourcePageListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp    *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	CurrentPage *int64  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	PageSize    *int64  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeDataSourcePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcePageListRequest) SetLang(v string) *DescribeDataSourcePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeDataSourcePageListRequest) SetSourceIp(v string) *DescribeDataSourcePageListRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeDataSourcePageListRequest) SetCurrentPage(v int64) *DescribeDataSourcePageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeDataSourcePageListRequest) SetName(v string) *DescribeDataSourcePageListRequest {
	s.Name = &v
	return s
}

func (s *DescribeDataSourcePageListRequest) SetPageSize(v int64) *DescribeDataSourcePageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataSourcePageListRequest) SetRegId(v string) *DescribeDataSourcePageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeDataSourcePageListRequest) SetType(v string) *DescribeDataSourcePageListRequest {
	s.Type = &v
	return s
}

type DescribeDataSourcePageListResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                                `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                                `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeDataSourcePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                                `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                                `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeDataSourcePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcePageListResponseBody) SetRequestId(v string) *DescribeDataSourcePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBody) SetCurrentPage(v int32) *DescribeDataSourcePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBody) SetPageSize(v int32) *DescribeDataSourcePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBody) SetResultObject(v []*DescribeDataSourcePageListResponseBodyResultObject) *DescribeDataSourcePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeDataSourcePageListResponseBody) SetTotalItem(v int32) *DescribeDataSourcePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBody) SetTotalPage(v int32) *DescribeDataSourcePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeDataSourcePageListResponseBodyResultObject struct {
	Creator     *string `json:"creator,omitempty" xml:"creator,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtCreate   *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Modifier    *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Total       *int64  `json:"total,omitempty" xml:"total,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeDataSourcePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetCreator(v string) *DescribeDataSourcePageListResponseBodyResultObject {
	s.Creator = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetDescription(v string) *DescribeDataSourcePageListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetGmtCreate(v string) *DescribeDataSourcePageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetGmtModified(v string) *DescribeDataSourcePageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetId(v int64) *DescribeDataSourcePageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetModifier(v string) *DescribeDataSourcePageListResponseBodyResultObject {
	s.Modifier = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetName(v string) *DescribeDataSourcePageListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetTotal(v int64) *DescribeDataSourcePageListResponseBodyResultObject {
	s.Total = &v
	return s
}

func (s *DescribeDataSourcePageListResponseBodyResultObject) SetType(v string) *DescribeDataSourcePageListResponseBodyResultObject {
	s.Type = &v
	return s
}

type DescribeDataSourcePageListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataSourcePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataSourcePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcePageListResponse) SetHeaders(v map[string]*string) *DescribeDataSourcePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataSourcePageListResponse) SetStatusCode(v int32) *DescribeDataSourcePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataSourcePageListResponse) SetBody(v *DescribeDataSourcePageListResponseBody) *DescribeDataSourcePageListResponse {
	s.Body = v
	return s
}

type DescribeDecisionResultFluctuationRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeDecisionResultFluctuationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultFluctuationRequest) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultFluctuationRequest) SetLang(v string) *DescribeDecisionResultFluctuationRequest {
	s.Lang = &v
	return s
}

func (s *DescribeDecisionResultFluctuationRequest) SetEventCodes(v string) *DescribeDecisionResultFluctuationRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeDecisionResultFluctuationRequest) SetRegId(v string) *DescribeDecisionResultFluctuationRequest {
	s.RegId = &v
	return s
}

type DescribeDecisionResultFluctuationResponseBody struct {
	Code           *string                                                      `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                                      `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                                      `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeDecisionResultFluctuationResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                                        `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeDecisionResultFluctuationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultFluctuationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultFluctuationResponseBody) SetCode(v string) *DescribeDecisionResultFluctuationResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBody) SetHttpStatusCode(v string) *DescribeDecisionResultFluctuationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBody) SetMessage(v string) *DescribeDecisionResultFluctuationResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBody) SetRequestId(v string) *DescribeDecisionResultFluctuationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBody) SetResultObject(v []*DescribeDecisionResultFluctuationResponseBodyResultObject) *DescribeDecisionResultFluctuationResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBody) SetSuccess(v bool) *DescribeDecisionResultFluctuationResponseBody {
	s.Success = &v
	return s
}

type DescribeDecisionResultFluctuationResponseBodyResultObject struct {
	Status             *string `json:"status,omitempty" xml:"status,omitempty"`
	TodayNum           *int64  `json:"todayNum,omitempty" xml:"todayNum,omitempty"`
	WithinSevenDayNum  *string `json:"withinSevenDayNum,omitempty" xml:"withinSevenDayNum,omitempty"`
	WithinThirtyDayNum *string `json:"withinThirtyDayNum,omitempty" xml:"withinThirtyDayNum,omitempty"`
	WithinThreeDayNum  *string `json:"withinThreeDayNum,omitempty" xml:"withinThreeDayNum,omitempty"`
	YesterdayNum       *int64  `json:"yesterdayNum,omitempty" xml:"yesterdayNum,omitempty"`
}

func (s DescribeDecisionResultFluctuationResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultFluctuationResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultFluctuationResponseBodyResultObject) SetStatus(v string) *DescribeDecisionResultFluctuationResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBodyResultObject) SetTodayNum(v int64) *DescribeDecisionResultFluctuationResponseBodyResultObject {
	s.TodayNum = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBodyResultObject) SetWithinSevenDayNum(v string) *DescribeDecisionResultFluctuationResponseBodyResultObject {
	s.WithinSevenDayNum = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBodyResultObject) SetWithinThirtyDayNum(v string) *DescribeDecisionResultFluctuationResponseBodyResultObject {
	s.WithinThirtyDayNum = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBodyResultObject) SetWithinThreeDayNum(v string) *DescribeDecisionResultFluctuationResponseBodyResultObject {
	s.WithinThreeDayNum = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponseBodyResultObject) SetYesterdayNum(v int64) *DescribeDecisionResultFluctuationResponseBodyResultObject {
	s.YesterdayNum = &v
	return s
}

type DescribeDecisionResultFluctuationResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDecisionResultFluctuationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDecisionResultFluctuationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultFluctuationResponse) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultFluctuationResponse) SetHeaders(v map[string]*string) *DescribeDecisionResultFluctuationResponse {
	s.Headers = v
	return s
}

func (s *DescribeDecisionResultFluctuationResponse) SetStatusCode(v int32) *DescribeDecisionResultFluctuationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDecisionResultFluctuationResponse) SetBody(v *DescribeDecisionResultFluctuationResponseBody) *DescribeDecisionResultFluctuationResponse {
	s.Body = v
	return s
}

type DescribeDecisionResultTrendRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BeginTime  *int64  `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeDecisionResultTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultTrendRequest) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultTrendRequest) SetLang(v string) *DescribeDecisionResultTrendRequest {
	s.Lang = &v
	return s
}

func (s *DescribeDecisionResultTrendRequest) SetBeginTime(v int64) *DescribeDecisionResultTrendRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeDecisionResultTrendRequest) SetEndTime(v int64) *DescribeDecisionResultTrendRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDecisionResultTrendRequest) SetEventCodes(v string) *DescribeDecisionResultTrendRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeDecisionResultTrendRequest) SetRegId(v string) *DescribeDecisionResultTrendRequest {
	s.RegId = &v
	return s
}

type DescribeDecisionResultTrendResponseBody struct {
	Code           *string                                              `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                              `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                              `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeDecisionResultTrendResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                                `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeDecisionResultTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultTrendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultTrendResponseBody) SetCode(v string) *DescribeDecisionResultTrendResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDecisionResultTrendResponseBody) SetHttpStatusCode(v string) *DescribeDecisionResultTrendResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDecisionResultTrendResponseBody) SetMessage(v string) *DescribeDecisionResultTrendResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDecisionResultTrendResponseBody) SetRequestId(v string) *DescribeDecisionResultTrendResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDecisionResultTrendResponseBody) SetResultObject(v *DescribeDecisionResultTrendResponseBodyResultObject) *DescribeDecisionResultTrendResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeDecisionResultTrendResponseBody) SetSuccess(v bool) *DescribeDecisionResultTrendResponseBody {
	s.Success = &v
	return s
}

type DescribeDecisionResultTrendResponseBodyResultObject struct {
	Series []*DescribeDecisionResultTrendResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeDecisionResultTrendResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeDecisionResultTrendResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultTrendResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultTrendResponseBodyResultObject) SetSeries(v []*DescribeDecisionResultTrendResponseBodyResultObjectSeries) *DescribeDecisionResultTrendResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeDecisionResultTrendResponseBodyResultObject) SetXaxis(v *DescribeDecisionResultTrendResponseBodyResultObjectXaxis) *DescribeDecisionResultTrendResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeDecisionResultTrendResponseBodyResultObjectSeries struct {
	Data []*DescribeDecisionResultTrendResponseBodyResultObjectSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string                                                          `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeDecisionResultTrendResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultTrendResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultTrendResponseBodyResultObjectSeries) SetData(v []*DescribeDecisionResultTrendResponseBodyResultObjectSeriesData) *DescribeDecisionResultTrendResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeDecisionResultTrendResponseBodyResultObjectSeries) SetName(v string) *DescribeDecisionResultTrendResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeDecisionResultTrendResponseBodyResultObjectSeriesData struct {
	Num   *int64  `json:"num,omitempty" xml:"num,omitempty"`
	Scale *string `json:"scale,omitempty" xml:"scale,omitempty"`
}

func (s DescribeDecisionResultTrendResponseBodyResultObjectSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultTrendResponseBodyResultObjectSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultTrendResponseBodyResultObjectSeriesData) SetNum(v int64) *DescribeDecisionResultTrendResponseBodyResultObjectSeriesData {
	s.Num = &v
	return s
}

func (s *DescribeDecisionResultTrendResponseBodyResultObjectSeriesData) SetScale(v string) *DescribeDecisionResultTrendResponseBodyResultObjectSeriesData {
	s.Scale = &v
	return s
}

type DescribeDecisionResultTrendResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeDecisionResultTrendResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultTrendResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultTrendResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeDecisionResultTrendResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeDecisionResultTrendResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDecisionResultTrendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDecisionResultTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDecisionResultTrendResponse) GoString() string {
	return s.String()
}

func (s *DescribeDecisionResultTrendResponse) SetHeaders(v map[string]*string) *DescribeDecisionResultTrendResponse {
	s.Headers = v
	return s
}

func (s *DescribeDecisionResultTrendResponse) SetStatusCode(v int32) *DescribeDecisionResultTrendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDecisionResultTrendResponse) SetBody(v *DescribeDecisionResultTrendResponseBody) *DescribeDecisionResultTrendResponse {
	s.Body = v
	return s
}

type DescribeDetailStartRequest struct {
	AppKey  *string `json:"appKey,omitempty" xml:"appKey,omitempty"`
	EndDs   *string `json:"endDs,omitempty" xml:"endDs,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
	StartDs *string `json:"startDs,omitempty" xml:"startDs,omitempty"`
}

func (s DescribeDetailStartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetailStartRequest) GoString() string {
	return s.String()
}

func (s *DescribeDetailStartRequest) SetAppKey(v string) *DescribeDetailStartRequest {
	s.AppKey = &v
	return s
}

func (s *DescribeDetailStartRequest) SetEndDs(v string) *DescribeDetailStartRequest {
	s.EndDs = &v
	return s
}

func (s *DescribeDetailStartRequest) SetRegId(v string) *DescribeDetailStartRequest {
	s.RegId = &v
	return s
}

func (s *DescribeDetailStartRequest) SetService(v string) *DescribeDetailStartRequest {
	s.Service = &v
	return s
}

func (s *DescribeDetailStartRequest) SetStartDs(v string) *DescribeDetailStartRequest {
	s.StartDs = &v
	return s
}

type DescribeDetailStartResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeDetailStartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetailStartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDetailStartResponseBody) SetCode(v string) *DescribeDetailStartResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDetailStartResponseBody) SetHttpStatusCode(v string) *DescribeDetailStartResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDetailStartResponseBody) SetMessage(v string) *DescribeDetailStartResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDetailStartResponseBody) SetRequestId(v string) *DescribeDetailStartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDetailStartResponseBody) SetResultObject(v bool) *DescribeDetailStartResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeDetailStartResponseBody) SetSuccess(v bool) *DescribeDetailStartResponseBody {
	s.Success = &v
	return s
}

type DescribeDetailStartResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDetailStartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDetailStartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetailStartResponse) GoString() string {
	return s.String()
}

func (s *DescribeDetailStartResponse) SetHeaders(v map[string]*string) *DescribeDetailStartResponse {
	s.Headers = v
	return s
}

func (s *DescribeDetailStartResponse) SetStatusCode(v int32) *DescribeDetailStartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDetailStartResponse) SetBody(v *DescribeDetailStartResponseBody) *DescribeDetailStartResponse {
	s.Body = v
	return s
}

type DescribeDownloadUrlRequest struct {
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId    *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
	TaskId   *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadUrlRequest) SetFileType(v string) *DescribeDownloadUrlRequest {
	s.FileType = &v
	return s
}

func (s *DescribeDownloadUrlRequest) SetLang(v string) *DescribeDownloadUrlRequest {
	s.Lang = &v
	return s
}

func (s *DescribeDownloadUrlRequest) SetRegId(v string) *DescribeDownloadUrlRequest {
	s.RegId = &v
	return s
}

func (s *DescribeDownloadUrlRequest) SetTaskId(v int64) *DescribeDownloadUrlRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeDownloadUrlRequest) SetType(v string) *DescribeDownloadUrlRequest {
	s.Type = &v
	return s
}

type DescribeDownloadUrlResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *string `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadUrlResponseBody) SetRequestId(v string) *DescribeDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDownloadUrlResponseBody) SetResultObject(v string) *DescribeDownloadUrlResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeDownloadUrlResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadUrlResponse) SetHeaders(v map[string]*string) *DescribeDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadUrlResponse) SetStatusCode(v int32) *DescribeDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadUrlResponse) SetBody(v *DescribeDownloadUrlResponseBody) *DescribeDownloadUrlResponse {
	s.Body = v
	return s
}

type DescribeEventBaseInfoByEventCodeRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventBaseInfoByEventCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventBaseInfoByEventCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventBaseInfoByEventCodeRequest) SetLang(v string) *DescribeEventBaseInfoByEventCodeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeRequest) SetCreateType(v string) *DescribeEventBaseInfoByEventCodeRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeRequest) SetEventCode(v string) *DescribeEventBaseInfoByEventCodeRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeRequest) SetRegId(v string) *DescribeEventBaseInfoByEventCodeRequest {
	s.RegId = &v
	return s
}

type DescribeEventBaseInfoByEventCodeResponseBody struct {
	RequestId    *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeEventBaseInfoByEventCodeResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeEventBaseInfoByEventCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventBaseInfoByEventCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventBaseInfoByEventCodeResponseBody) SetRequestId(v string) *DescribeEventBaseInfoByEventCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBody) SetResultObject(v *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) *DescribeEventBaseInfoByEventCodeResponseBody {
	s.ResultObject = v
	return s
}

type DescribeEventBaseInfoByEventCodeResponseBodyResultObject struct {
	BizVersion   *int32                                                                 `json:"bizVersion,omitempty" xml:"bizVersion,omitempty"`
	EventCode    *string                                                                `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName    *string                                                                `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventStauts  *string                                                                `json:"eventStauts,omitempty" xml:"eventStauts,omitempty"`
	InputFields  []*DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields `json:"inputFields,omitempty" xml:"inputFields,omitempty" type:"Repeated"`
	Memo         *string                                                                `json:"memo,omitempty" xml:"memo,omitempty"`
	RuleDetails  []*DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails `json:"ruleDetails,omitempty" xml:"ruleDetails,omitempty" type:"Repeated"`
	TemplateCode *string                                                                `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	TemplateName *string                                                                `json:"templateName,omitempty" xml:"templateName,omitempty"`
	TemplateType *string                                                                `json:"templateType,omitempty" xml:"templateType,omitempty"`
}

func (s DescribeEventBaseInfoByEventCodeResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventBaseInfoByEventCodeResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetBizVersion(v int32) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.BizVersion = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetEventCode(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetEventName(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetEventStauts(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.EventStauts = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetInputFields(v []*DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.InputFields = v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetMemo(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.Memo = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetRuleDetails(v []*DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.RuleDetails = v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetTemplateCode(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.TemplateCode = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetTemplateName(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.TemplateName = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObject) SetTemplateType(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObject {
	s.TemplateType = &v
	return s
}

type DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	FieldCode   *string `json:"fieldCode,omitempty" xml:"fieldCode,omitempty"`
	FieldRank   *string `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource *string `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType   *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) GoString() string {
	return s.String()
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) SetDescription(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields {
	s.Description = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) SetFieldCode(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields {
	s.FieldCode = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) SetFieldRank(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) SetFieldSource(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) SetFieldType(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields {
	s.FieldType = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields) SetTitle(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields {
	s.Title = &v
	return s
}

type DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails struct {
	LogicExpression *string `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	Memo            *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RuleActions     *string `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleAuthType    *string `json:"ruleAuthType,omitempty" xml:"ruleAuthType,omitempty"`
	RuleExpressions *string `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleId          *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName        *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) GoString() string {
	return s.String()
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetLogicExpression(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.LogicExpression = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetMemo(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.Memo = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetRuleActions(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.RuleActions = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetRuleAuthType(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.RuleAuthType = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetRuleExpressions(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.RuleExpressions = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetRuleId(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.RuleId = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetRuleName(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.RuleName = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails) SetRuleStatus(v string) *DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails {
	s.RuleStatus = &v
	return s
}

type DescribeEventBaseInfoByEventCodeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventBaseInfoByEventCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventBaseInfoByEventCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventBaseInfoByEventCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventBaseInfoByEventCodeResponse) SetHeaders(v map[string]*string) *DescribeEventBaseInfoByEventCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponse) SetStatusCode(v int32) *DescribeEventBaseInfoByEventCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventBaseInfoByEventCodeResponse) SetBody(v *DescribeEventBaseInfoByEventCodeResponseBody) *DescribeEventBaseInfoByEventCodeResponse {
	s.Body = v
	return s
}

type DescribeEventCountRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventCountRequest) SetLang(v string) *DescribeEventCountRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventCountRequest) SetCreateType(v string) *DescribeEventCountRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeEventCountRequest) SetRegId(v string) *DescribeEventCountRequest {
	s.RegId = &v
	return s
}

type DescribeEventCountResponseBody struct {
	Code           *string                                     `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                     `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                     `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeEventCountResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                       `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeEventCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventCountResponseBody) SetCode(v string) *DescribeEventCountResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventCountResponseBody) SetHttpStatusCode(v string) *DescribeEventCountResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeEventCountResponseBody) SetMessage(v string) *DescribeEventCountResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventCountResponseBody) SetRequestId(v string) *DescribeEventCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventCountResponseBody) SetResultObject(v *DescribeEventCountResponseBodyResultObject) *DescribeEventCountResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeEventCountResponseBody) SetSuccess(v bool) *DescribeEventCountResponseBody {
	s.Success = &v
	return s
}

type DescribeEventCountResponseBodyResultObject struct {
	Limit        *bool  `json:"limit,omitempty" xml:"limit,omitempty"`
	MaxTotalItem *int32 `json:"maxTotalItem,omitempty" xml:"maxTotalItem,omitempty"`
	TotalItem    *int32 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
}

func (s DescribeEventCountResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventCountResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventCountResponseBodyResultObject) SetLimit(v bool) *DescribeEventCountResponseBodyResultObject {
	s.Limit = &v
	return s
}

func (s *DescribeEventCountResponseBodyResultObject) SetMaxTotalItem(v int32) *DescribeEventCountResponseBodyResultObject {
	s.MaxTotalItem = &v
	return s
}

func (s *DescribeEventCountResponseBodyResultObject) SetTotalItem(v int32) *DescribeEventCountResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

type DescribeEventCountResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventCountResponse) SetHeaders(v map[string]*string) *DescribeEventCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventCountResponse) SetStatusCode(v int32) *DescribeEventCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventCountResponse) SetBody(v *DescribeEventCountResponseBody) *DescribeEventCountResponse {
	s.Body = v
	return s
}

type DescribeEventDetailByRequestIdRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventTime *int64  `json:"eventTime,omitempty" xml:"eventTime,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	SRequestId *string `json:"sRequestId,omitempty" xml:"sRequestId,omitempty"`
}

func (s DescribeEventDetailByRequestIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventDetailByRequestIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventDetailByRequestIdRequest) SetLang(v string) *DescribeEventDetailByRequestIdRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventDetailByRequestIdRequest) SetEventCode(v string) *DescribeEventDetailByRequestIdRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeEventDetailByRequestIdRequest) SetEventTime(v int64) *DescribeEventDetailByRequestIdRequest {
	s.EventTime = &v
	return s
}

func (s *DescribeEventDetailByRequestIdRequest) SetRegId(v string) *DescribeEventDetailByRequestIdRequest {
	s.RegId = &v
	return s
}

func (s *DescribeEventDetailByRequestIdRequest) SetSRequestId(v string) *DescribeEventDetailByRequestIdRequest {
	s.SRequestId = &v
	return s
}

type DescribeEventDetailByRequestIdResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeEventDetailByRequestIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventDetailByRequestIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventDetailByRequestIdResponseBody) SetRequestId(v string) *DescribeEventDetailByRequestIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventDetailByRequestIdResponseBody) SetResultObject(v bool) *DescribeEventDetailByRequestIdResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeEventDetailByRequestIdResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventDetailByRequestIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventDetailByRequestIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventDetailByRequestIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventDetailByRequestIdResponse) SetHeaders(v map[string]*string) *DescribeEventDetailByRequestIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventDetailByRequestIdResponse) SetStatusCode(v int32) *DescribeEventDetailByRequestIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventDetailByRequestIdResponse) SetBody(v *DescribeEventDetailByRequestIdResponseBody) *DescribeEventDetailByRequestIdResponse {
	s.Body = v
	return s
}

type DescribeEventLogDetailRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	ReqIdByLog *string `json:"reqIdByLog,omitempty" xml:"reqIdByLog,omitempty"`
}

func (s DescribeEventLogDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLogDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventLogDetailRequest) SetLang(v string) *DescribeEventLogDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventLogDetailRequest) SetRegId(v string) *DescribeEventLogDetailRequest {
	s.RegId = &v
	return s
}

func (s *DescribeEventLogDetailRequest) SetReqIdByLog(v string) *DescribeEventLogDetailRequest {
	s.ReqIdByLog = &v
	return s
}

type DescribeEventLogDetailResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeEventLogDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLogDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventLogDetailResponseBody) SetRequestId(v string) *DescribeEventLogDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventLogDetailResponseBody) SetResultObject(v bool) *DescribeEventLogDetailResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeEventLogDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventLogDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventLogDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLogDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventLogDetailResponse) SetHeaders(v map[string]*string) *DescribeEventLogDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventLogDetailResponse) SetStatusCode(v int32) *DescribeEventLogDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventLogDetailResponse) SetBody(v *DescribeEventLogDetailResponseBody) *DescribeEventLogDetailResponse {
	s.Body = v
	return s
}

type DescribeEventLogPageRequest struct {
	Lang             *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	AccountIdPRP     *string `json:"accountIdPRP,omitempty" xml:"accountIdPRP,omitempty"`
	BeginTime        *int64  `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	Condition1AL     *string `json:"condition1AL,omitempty" xml:"condition1AL,omitempty"`
	Condition2AL     *string `json:"condition2AL,omitempty" xml:"condition2AL,omitempty"`
	Condition3AL     *string `json:"condition3AL,omitempty" xml:"condition3AL,omitempty"`
	CurrentPage      *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	DeviceTypeLRP    *string `json:"deviceTypeLRP,omitempty" xml:"deviceTypeLRP,omitempty"`
	EmailPRP         *string `json:"emailPRP,omitempty" xml:"emailPRP,omitempty"`
	EndTime          *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	FailReasonLRP    *string `json:"failReasonLRP,omitempty" xml:"failReasonLRP,omitempty"`
	IpPRP            *string `json:"ipPRP,omitempty" xml:"ipPRP,omitempty"`
	LoginResultARP   *string `json:"loginResultARP,omitempty" xml:"loginResultARP,omitempty"`
	LoginTypeLRP     *string `json:"loginTypeLRP,omitempty" xml:"loginTypeLRP,omitempty"`
	MacPRP           *string `json:"macPRP,omitempty" xml:"macPRP,omitempty"`
	MobilePRP        *string `json:"mobilePRP,omitempty" xml:"mobilePRP,omitempty"`
	NickNamePRP      *string `json:"nickNamePRP,omitempty" xml:"nickNamePRP,omitempty"`
	OperateSourceLRP *string `json:"operateSourceLRP,omitempty" xml:"operateSourceLRP,omitempty"`
	PageSize         *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ReferPRP         *string `json:"referPRP,omitempty" xml:"referPRP,omitempty"`
	RegId            *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RegisterIpPRP    *string `json:"registerIpPRP,omitempty" xml:"registerIpPRP,omitempty"`
	ReqIdPBS         *string `json:"reqIdPBS,omitempty" xml:"reqIdPBS,omitempty"`
	ScoreEBS         *int32  `json:"scoreEBS,omitempty" xml:"scoreEBS,omitempty"`
	ScoreSBS         *int32  `json:"scoreSBS,omitempty" xml:"scoreSBS,omitempty"`
	ServiceABS       *string `json:"serviceABS,omitempty" xml:"serviceABS,omitempty"`
	TagsLBS          *string `json:"tagsLBS,omitempty" xml:"tagsLBS,omitempty"`
	UmidPDI          *string `json:"umidPDI,omitempty" xml:"umidPDI,omitempty"`
	UserAgentPRP     *string `json:"userAgentPRP,omitempty" xml:"userAgentPRP,omitempty"`
	UserNameTypeLRP  *string `json:"userNameTypeLRP,omitempty" xml:"userNameTypeLRP,omitempty"`
}

func (s DescribeEventLogPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLogPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventLogPageRequest) SetLang(v string) *DescribeEventLogPageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetAccountIdPRP(v string) *DescribeEventLogPageRequest {
	s.AccountIdPRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetBeginTime(v int64) *DescribeEventLogPageRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetCondition1AL(v string) *DescribeEventLogPageRequest {
	s.Condition1AL = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetCondition2AL(v string) *DescribeEventLogPageRequest {
	s.Condition2AL = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetCondition3AL(v string) *DescribeEventLogPageRequest {
	s.Condition3AL = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetCurrentPage(v int32) *DescribeEventLogPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetDeviceTypeLRP(v string) *DescribeEventLogPageRequest {
	s.DeviceTypeLRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetEmailPRP(v string) *DescribeEventLogPageRequest {
	s.EmailPRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetEndTime(v int64) *DescribeEventLogPageRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetFailReasonLRP(v string) *DescribeEventLogPageRequest {
	s.FailReasonLRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetIpPRP(v string) *DescribeEventLogPageRequest {
	s.IpPRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetLoginResultARP(v string) *DescribeEventLogPageRequest {
	s.LoginResultARP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetLoginTypeLRP(v string) *DescribeEventLogPageRequest {
	s.LoginTypeLRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetMacPRP(v string) *DescribeEventLogPageRequest {
	s.MacPRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetMobilePRP(v string) *DescribeEventLogPageRequest {
	s.MobilePRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetNickNamePRP(v string) *DescribeEventLogPageRequest {
	s.NickNamePRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetOperateSourceLRP(v string) *DescribeEventLogPageRequest {
	s.OperateSourceLRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetPageSize(v int32) *DescribeEventLogPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetReferPRP(v string) *DescribeEventLogPageRequest {
	s.ReferPRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetRegId(v string) *DescribeEventLogPageRequest {
	s.RegId = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetRegisterIpPRP(v string) *DescribeEventLogPageRequest {
	s.RegisterIpPRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetReqIdPBS(v string) *DescribeEventLogPageRequest {
	s.ReqIdPBS = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetScoreEBS(v int32) *DescribeEventLogPageRequest {
	s.ScoreEBS = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetScoreSBS(v int32) *DescribeEventLogPageRequest {
	s.ScoreSBS = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetServiceABS(v string) *DescribeEventLogPageRequest {
	s.ServiceABS = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetTagsLBS(v string) *DescribeEventLogPageRequest {
	s.TagsLBS = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetUmidPDI(v string) *DescribeEventLogPageRequest {
	s.UmidPDI = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetUserAgentPRP(v string) *DescribeEventLogPageRequest {
	s.UserAgentPRP = &v
	return s
}

func (s *DescribeEventLogPageRequest) SetUserNameTypeLRP(v string) *DescribeEventLogPageRequest {
	s.UserNameTypeLRP = &v
	return s
}

type DescribeEventLogPageResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                          `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                          `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeEventLogPageResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                          `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                          `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeEventLogPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLogPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventLogPageResponseBody) SetRequestId(v string) *DescribeEventLogPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventLogPageResponseBody) SetCurrentPage(v int32) *DescribeEventLogPageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEventLogPageResponseBody) SetPageSize(v int32) *DescribeEventLogPageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEventLogPageResponseBody) SetResultObject(v []*DescribeEventLogPageResponseBodyResultObject) *DescribeEventLogPageResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeEventLogPageResponseBody) SetTotalItem(v int32) *DescribeEventLogPageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeEventLogPageResponseBody) SetTotalPage(v int32) *DescribeEventLogPageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeEventLogPageResponseBodyResultObject struct {
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	Email     *string `json:"email,omitempty" xml:"email,omitempty"`
	Ip        *string `json:"ip,omitempty" xml:"ip,omitempty"`
	Mobile    *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	NickName  *string `json:"nickName,omitempty" xml:"nickName,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Score     *string `json:"score,omitempty" xml:"score,omitempty"`
	Service   *string `json:"service,omitempty" xml:"service,omitempty"`
	Tags      *string `json:"tags,omitempty" xml:"tags,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	Umid      *string `json:"umid,omitempty" xml:"umid,omitempty"`
}

func (s DescribeEventLogPageResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLogPageResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetAccountId(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.AccountId = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetEmail(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Email = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetIp(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Ip = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetMobile(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Mobile = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetNickName(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.NickName = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetRequestId(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.RequestId = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetScore(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Score = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetService(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Service = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetTags(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Tags = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetTimestamp(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Timestamp = &v
	return s
}

func (s *DescribeEventLogPageResponseBodyResultObject) SetUmid(v string) *DescribeEventLogPageResponseBodyResultObject {
	s.Umid = &v
	return s
}

type DescribeEventLogPageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventLogPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventLogPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLogPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventLogPageResponse) SetHeaders(v map[string]*string) *DescribeEventLogPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventLogPageResponse) SetStatusCode(v int32) *DescribeEventLogPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventLogPageResponse) SetBody(v *DescribeEventLogPageResponseBody) *DescribeEventLogPageResponse {
	s.Body = v
	return s
}

type DescribeEventPageListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	CurrentPage *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EventCode   *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName   *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventStatus *string `json:"eventStatus,omitempty" xml:"eventStatus,omitempty"`
	PageSize    *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventPageListRequest) SetLang(v string) *DescribeEventPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventPageListRequest) SetCreateType(v string) *DescribeEventPageListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeEventPageListRequest) SetCurrentPage(v int32) *DescribeEventPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEventPageListRequest) SetEventCode(v string) *DescribeEventPageListRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeEventPageListRequest) SetEventName(v string) *DescribeEventPageListRequest {
	s.EventName = &v
	return s
}

func (s *DescribeEventPageListRequest) SetEventStatus(v string) *DescribeEventPageListRequest {
	s.EventStatus = &v
	return s
}

func (s *DescribeEventPageListRequest) SetPageSize(v int32) *DescribeEventPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEventPageListRequest) SetRegId(v string) *DescribeEventPageListRequest {
	s.RegId = &v
	return s
}

type DescribeEventPageListResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                           `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                           `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeEventPageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                           `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                           `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeEventPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventPageListResponseBody) SetRequestId(v string) *DescribeEventPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventPageListResponseBody) SetCurrentPage(v int32) *DescribeEventPageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEventPageListResponseBody) SetPageSize(v int32) *DescribeEventPageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEventPageListResponseBody) SetResultObject(v []*DescribeEventPageListResponseBodyResultObject) *DescribeEventPageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeEventPageListResponseBody) SetTotalItem(v int32) *DescribeEventPageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeEventPageListResponseBody) SetTotalPage(v int32) *DescribeEventPageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeEventPageListResponseBodyResultObject struct {
	Children     []*DescribeEventPageListResponseBodyResultObjectChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
	EventCode    *string                                                  `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName    *string                                                  `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventStatus  *string                                                  `json:"eventStatus,omitempty" xml:"eventStatus,omitempty"`
	EventType    *string                                                  `json:"eventType,omitempty" xml:"eventType,omitempty"`
	GmtCreate    *int64                                                   `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified  *int64                                                   `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id           *int64                                                   `json:"id,omitempty" xml:"id,omitempty"`
	RuleCount    *int32                                                   `json:"ruleCount,omitempty" xml:"ruleCount,omitempty"`
	TemplateCode *string                                                  `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	TemplateName *string                                                  `json:"templateName,omitempty" xml:"templateName,omitempty"`
	TemplateType *string                                                  `json:"templateType,omitempty" xml:"templateType,omitempty"`
	UserCount    *int32                                                   `json:"userCount,omitempty" xml:"userCount,omitempty"`
}

func (s DescribeEventPageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventPageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventPageListResponseBodyResultObject) SetChildren(v []*DescribeEventPageListResponseBodyResultObjectChildren) *DescribeEventPageListResponseBodyResultObject {
	s.Children = v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetEventCode(v string) *DescribeEventPageListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetEventName(v string) *DescribeEventPageListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetEventStatus(v string) *DescribeEventPageListResponseBodyResultObject {
	s.EventStatus = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetEventType(v string) *DescribeEventPageListResponseBodyResultObject {
	s.EventType = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeEventPageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeEventPageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetId(v int64) *DescribeEventPageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetRuleCount(v int32) *DescribeEventPageListResponseBodyResultObject {
	s.RuleCount = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetTemplateCode(v string) *DescribeEventPageListResponseBodyResultObject {
	s.TemplateCode = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetTemplateName(v string) *DescribeEventPageListResponseBodyResultObject {
	s.TemplateName = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetTemplateType(v string) *DescribeEventPageListResponseBodyResultObject {
	s.TemplateType = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObject) SetUserCount(v int32) *DescribeEventPageListResponseBodyResultObject {
	s.UserCount = &v
	return s
}

type DescribeEventPageListResponseBodyResultObjectChildren struct {
	EventCode   *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName   *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventStatus *string `json:"eventStatus,omitempty" xml:"eventStatus,omitempty"`
	EventType   *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
	GmtCreate   *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RuleCount   *int64  `json:"ruleCount,omitempty" xml:"ruleCount,omitempty"`
}

func (s DescribeEventPageListResponseBodyResultObjectChildren) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventPageListResponseBodyResultObjectChildren) GoString() string {
	return s.String()
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetEventCode(v string) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.EventCode = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetEventName(v string) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.EventName = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetEventStatus(v string) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.EventStatus = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetEventType(v string) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.EventType = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetGmtCreate(v int64) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.GmtCreate = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetGmtModified(v int64) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.GmtModified = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetId(v int64) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.Id = &v
	return s
}

func (s *DescribeEventPageListResponseBodyResultObjectChildren) SetRuleCount(v int64) *DescribeEventPageListResponseBodyResultObjectChildren {
	s.RuleCount = &v
	return s
}

type DescribeEventPageListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventPageListResponse) SetHeaders(v map[string]*string) *DescribeEventPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventPageListResponse) SetStatusCode(v int32) *DescribeEventPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventPageListResponse) SetBody(v *DescribeEventPageListResponseBody) *DescribeEventPageListResponse {
	s.Body = v
	return s
}

type DescribeEventResultBarChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime *int64 `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	// This parameter is required.
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventResultBarChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultBarChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventResultBarChartRequest) SetLang(v string) *DescribeEventResultBarChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventResultBarChartRequest) SetBeginTime(v int64) *DescribeEventResultBarChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeEventResultBarChartRequest) SetEndTime(v int64) *DescribeEventResultBarChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEventResultBarChartRequest) SetEventCodes(v string) *DescribeEventResultBarChartRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeEventResultBarChartRequest) SetRegId(v string) *DescribeEventResultBarChartRequest {
	s.RegId = &v
	return s
}

type DescribeEventResultBarChartResponseBody struct {
	Code           *string                                              `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                              `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                              `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeEventResultBarChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                                `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeEventResultBarChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultBarChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventResultBarChartResponseBody) SetCode(v string) *DescribeEventResultBarChartResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventResultBarChartResponseBody) SetHttpStatusCode(v string) *DescribeEventResultBarChartResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeEventResultBarChartResponseBody) SetMessage(v string) *DescribeEventResultBarChartResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventResultBarChartResponseBody) SetRequestId(v string) *DescribeEventResultBarChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventResultBarChartResponseBody) SetResultObject(v *DescribeEventResultBarChartResponseBodyResultObject) *DescribeEventResultBarChartResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeEventResultBarChartResponseBody) SetSuccess(v bool) *DescribeEventResultBarChartResponseBody {
	s.Success = &v
	return s
}

type DescribeEventResultBarChartResponseBodyResultObject struct {
	Series []*DescribeEventResultBarChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeEventResultBarChartResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeEventResultBarChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultBarChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventResultBarChartResponseBodyResultObject) SetSeries(v []*DescribeEventResultBarChartResponseBodyResultObjectSeries) *DescribeEventResultBarChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeEventResultBarChartResponseBodyResultObject) SetXaxis(v *DescribeEventResultBarChartResponseBodyResultObjectXaxis) *DescribeEventResultBarChartResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeEventResultBarChartResponseBodyResultObjectSeries struct {
	Data  []*DescribeEventResultBarChartResponseBodyResultObjectSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name  *string                                                          `json:"name,omitempty" xml:"name,omitempty"`
	Stack *string                                                          `json:"stack,omitempty" xml:"stack,omitempty"`
}

func (s DescribeEventResultBarChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultBarChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeEventResultBarChartResponseBodyResultObjectSeries) SetData(v []*DescribeEventResultBarChartResponseBodyResultObjectSeriesData) *DescribeEventResultBarChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeEventResultBarChartResponseBodyResultObjectSeries) SetName(v string) *DescribeEventResultBarChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

func (s *DescribeEventResultBarChartResponseBodyResultObjectSeries) SetStack(v string) *DescribeEventResultBarChartResponseBodyResultObjectSeries {
	s.Stack = &v
	return s
}

type DescribeEventResultBarChartResponseBodyResultObjectSeriesData struct {
	Num   *int64  `json:"num,omitempty" xml:"num,omitempty"`
	Scale *string `json:"scale,omitempty" xml:"scale,omitempty"`
}

func (s DescribeEventResultBarChartResponseBodyResultObjectSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultBarChartResponseBodyResultObjectSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeEventResultBarChartResponseBodyResultObjectSeriesData) SetNum(v int64) *DescribeEventResultBarChartResponseBodyResultObjectSeriesData {
	s.Num = &v
	return s
}

func (s *DescribeEventResultBarChartResponseBodyResultObjectSeriesData) SetScale(v string) *DescribeEventResultBarChartResponseBodyResultObjectSeriesData {
	s.Scale = &v
	return s
}

type DescribeEventResultBarChartResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeEventResultBarChartResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultBarChartResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeEventResultBarChartResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeEventResultBarChartResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeEventResultBarChartResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventResultBarChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventResultBarChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultBarChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventResultBarChartResponse) SetHeaders(v map[string]*string) *DescribeEventResultBarChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventResultBarChartResponse) SetStatusCode(v int32) *DescribeEventResultBarChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventResultBarChartResponse) SetBody(v *DescribeEventResultBarChartResponseBody) *DescribeEventResultBarChartResponse {
	s.Body = v
	return s
}

type DescribeEventResultListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime   *int64 `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	CurrentPage *int64 `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// This parameter is required.
	EndTime  *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	PageSize *int64  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventResultListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventResultListRequest) SetLang(v string) *DescribeEventResultListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventResultListRequest) SetBeginTime(v int64) *DescribeEventResultListRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeEventResultListRequest) SetCurrentPage(v int64) *DescribeEventResultListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEventResultListRequest) SetEndTime(v int64) *DescribeEventResultListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEventResultListRequest) SetPageSize(v int64) *DescribeEventResultListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEventResultListRequest) SetRegId(v string) *DescribeEventResultListRequest {
	s.RegId = &v
	return s
}

type DescribeEventResultListResponseBody struct {
	Code           *string                                            `json:"code,omitempty" xml:"code,omitempty"`
	CurrentPage    *int64                                             `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	HttpStatusCode *string                                            `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                            `json:"message,omitempty" xml:"message,omitempty"`
	PageSize       *int64                                             `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RequestId      *string                                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeEventResultListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                              `json:"success,omitempty" xml:"success,omitempty"`
	TotalItem      *int64                                             `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage      *int64                                             `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeEventResultListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventResultListResponseBody) SetCode(v string) *DescribeEventResultListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetCurrentPage(v int64) *DescribeEventResultListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetHttpStatusCode(v string) *DescribeEventResultListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetMessage(v string) *DescribeEventResultListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetPageSize(v int64) *DescribeEventResultListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetRequestId(v string) *DescribeEventResultListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetResultObject(v []*DescribeEventResultListResponseBodyResultObject) *DescribeEventResultListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeEventResultListResponseBody) SetSuccess(v bool) *DescribeEventResultListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetTotalItem(v int64) *DescribeEventResultListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeEventResultListResponseBody) SetTotalPage(v int64) *DescribeEventResultListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeEventResultListResponseBodyResultObject struct {
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName  *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	PassNum    *int64  `json:"passNum,omitempty" xml:"passNum,omitempty"`
	PendingNum *int64  `json:"pendingNum,omitempty" xml:"pendingNum,omitempty"`
	RejectNum  *int64  `json:"rejectNum,omitempty" xml:"rejectNum,omitempty"`
	TotalNum   *int64  `json:"totalNum,omitempty" xml:"totalNum,omitempty"`
}

func (s DescribeEventResultListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventResultListResponseBodyResultObject) SetEventCode(v string) *DescribeEventResultListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeEventResultListResponseBodyResultObject) SetEventName(v string) *DescribeEventResultListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeEventResultListResponseBodyResultObject) SetPassNum(v int64) *DescribeEventResultListResponseBodyResultObject {
	s.PassNum = &v
	return s
}

func (s *DescribeEventResultListResponseBodyResultObject) SetPendingNum(v int64) *DescribeEventResultListResponseBodyResultObject {
	s.PendingNum = &v
	return s
}

func (s *DescribeEventResultListResponseBodyResultObject) SetRejectNum(v int64) *DescribeEventResultListResponseBodyResultObject {
	s.RejectNum = &v
	return s
}

func (s *DescribeEventResultListResponseBodyResultObject) SetTotalNum(v int64) *DescribeEventResultListResponseBodyResultObject {
	s.TotalNum = &v
	return s
}

type DescribeEventResultListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventResultListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventResultListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventResultListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventResultListResponse) SetHeaders(v map[string]*string) *DescribeEventResultListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventResultListResponse) SetStatusCode(v int32) *DescribeEventResultListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventResultListResponse) SetBody(v *DescribeEventResultListResponseBody) *DescribeEventResultListResponse {
	s.Body = v
	return s
}

type DescribeEventTaskHistoryRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventTaskHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTaskHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventTaskHistoryRequest) SetLang(v string) *DescribeEventTaskHistoryRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventTaskHistoryRequest) SetRegId(v string) *DescribeEventTaskHistoryRequest {
	s.RegId = &v
	return s
}

type DescribeEventTaskHistoryResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeEventTaskHistoryResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeEventTaskHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTaskHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventTaskHistoryResponseBody) SetRequestId(v string) *DescribeEventTaskHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventTaskHistoryResponseBody) SetResultObject(v []*DescribeEventTaskHistoryResponseBodyResultObject) *DescribeEventTaskHistoryResponseBody {
	s.ResultObject = v
	return s
}

type DescribeEventTaskHistoryResponseBodyResultObject struct {
	TaskCode   *string `json:"taskCode,omitempty" xml:"taskCode,omitempty"`
	TaskName   *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
	TaskStatus *string `json:"taskStatus,omitempty" xml:"taskStatus,omitempty"`
	Url        *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s DescribeEventTaskHistoryResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTaskHistoryResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventTaskHistoryResponseBodyResultObject) SetTaskCode(v string) *DescribeEventTaskHistoryResponseBodyResultObject {
	s.TaskCode = &v
	return s
}

func (s *DescribeEventTaskHistoryResponseBodyResultObject) SetTaskName(v string) *DescribeEventTaskHistoryResponseBodyResultObject {
	s.TaskName = &v
	return s
}

func (s *DescribeEventTaskHistoryResponseBodyResultObject) SetTaskStatus(v string) *DescribeEventTaskHistoryResponseBodyResultObject {
	s.TaskStatus = &v
	return s
}

func (s *DescribeEventTaskHistoryResponseBodyResultObject) SetUrl(v string) *DescribeEventTaskHistoryResponseBodyResultObject {
	s.Url = &v
	return s
}

type DescribeEventTaskHistoryResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventTaskHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventTaskHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTaskHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventTaskHistoryResponse) SetHeaders(v map[string]*string) *DescribeEventTaskHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventTaskHistoryResponse) SetStatusCode(v int32) *DescribeEventTaskHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventTaskHistoryResponse) SetBody(v *DescribeEventTaskHistoryResponseBody) *DescribeEventTaskHistoryResponse {
	s.Body = v
	return s
}

type DescribeEventTotalCountReportRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventTotalCountReportRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTotalCountReportRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventTotalCountReportRequest) SetLang(v string) *DescribeEventTotalCountReportRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventTotalCountReportRequest) SetRegId(v string) *DescribeEventTotalCountReportRequest {
	s.RegId = &v
	return s
}

type DescribeEventTotalCountReportResponseBody struct {
	Code           *string                                                `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                                `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                                `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeEventTotalCountReportResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                                  `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeEventTotalCountReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTotalCountReportResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventTotalCountReportResponseBody) SetCode(v string) *DescribeEventTotalCountReportResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventTotalCountReportResponseBody) SetHttpStatusCode(v string) *DescribeEventTotalCountReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeEventTotalCountReportResponseBody) SetMessage(v string) *DescribeEventTotalCountReportResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventTotalCountReportResponseBody) SetRequestId(v string) *DescribeEventTotalCountReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventTotalCountReportResponseBody) SetResultObject(v *DescribeEventTotalCountReportResponseBodyResultObject) *DescribeEventTotalCountReportResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeEventTotalCountReportResponseBody) SetSuccess(v bool) *DescribeEventTotalCountReportResponseBody {
	s.Success = &v
	return s
}

type DescribeEventTotalCountReportResponseBodyResultObject struct {
	Ratio *string `json:"ratio,omitempty" xml:"ratio,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeEventTotalCountReportResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTotalCountReportResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventTotalCountReportResponseBodyResultObject) SetRatio(v string) *DescribeEventTotalCountReportResponseBodyResultObject {
	s.Ratio = &v
	return s
}

func (s *DescribeEventTotalCountReportResponseBodyResultObject) SetValue(v string) *DescribeEventTotalCountReportResponseBodyResultObject {
	s.Value = &v
	return s
}

type DescribeEventTotalCountReportResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventTotalCountReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventTotalCountReportResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTotalCountReportResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventTotalCountReportResponse) SetHeaders(v map[string]*string) *DescribeEventTotalCountReportResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventTotalCountReportResponse) SetStatusCode(v int32) *DescribeEventTotalCountReportResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventTotalCountReportResponse) SetBody(v *DescribeEventTotalCountReportResponseBody) *DescribeEventTotalCountReportResponse {
	s.Body = v
	return s
}

type DescribeEventUploadPolicyRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeEventUploadPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventUploadPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventUploadPolicyRequest) SetLang(v string) *DescribeEventUploadPolicyRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventUploadPolicyRequest) SetRegId(v string) *DescribeEventUploadPolicyRequest {
	s.RegId = &v
	return s
}

type DescribeEventUploadPolicyResponseBody struct {
	AccessId  *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Key       *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	StsToken  *string `json:"StsToken,omitempty" xml:"StsToken,omitempty"`
}

func (s DescribeEventUploadPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventUploadPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventUploadPolicyResponseBody) SetAccessId(v string) *DescribeEventUploadPolicyResponseBody {
	s.AccessId = &v
	return s
}

func (s *DescribeEventUploadPolicyResponseBody) SetHost(v string) *DescribeEventUploadPolicyResponseBody {
	s.Host = &v
	return s
}

func (s *DescribeEventUploadPolicyResponseBody) SetKey(v string) *DescribeEventUploadPolicyResponseBody {
	s.Key = &v
	return s
}

func (s *DescribeEventUploadPolicyResponseBody) SetPolicy(v string) *DescribeEventUploadPolicyResponseBody {
	s.Policy = &v
	return s
}

func (s *DescribeEventUploadPolicyResponseBody) SetRequestId(v string) *DescribeEventUploadPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventUploadPolicyResponseBody) SetSignature(v string) *DescribeEventUploadPolicyResponseBody {
	s.Signature = &v
	return s
}

func (s *DescribeEventUploadPolicyResponseBody) SetStsToken(v string) *DescribeEventUploadPolicyResponseBody {
	s.StsToken = &v
	return s
}

type DescribeEventUploadPolicyResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventUploadPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventUploadPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventUploadPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventUploadPolicyResponse) SetHeaders(v map[string]*string) *DescribeEventUploadPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventUploadPolicyResponse) SetStatusCode(v int32) *DescribeEventUploadPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventUploadPolicyResponse) SetBody(v *DescribeEventUploadPolicyResponseBody) *DescribeEventUploadPolicyResponse {
	s.Body = v
	return s
}

type DescribeEventVariableListRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	FilterDTO  *string `json:"filterDTO,omitempty" xml:"filterDTO,omitempty"`
	// This parameter is required.
	RefObjId *string `json:"refObjId,omitempty" xml:"refObjId,omitempty"`
	// This parameter is required.
	RefObjType *string `json:"refObjType,omitempty" xml:"refObjType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Type       *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeEventVariableListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListRequest) SetLang(v string) *DescribeEventVariableListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventVariableListRequest) SetCreateType(v string) *DescribeEventVariableListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeEventVariableListRequest) SetFilterDTO(v string) *DescribeEventVariableListRequest {
	s.FilterDTO = &v
	return s
}

func (s *DescribeEventVariableListRequest) SetRefObjId(v string) *DescribeEventVariableListRequest {
	s.RefObjId = &v
	return s
}

func (s *DescribeEventVariableListRequest) SetRefObjType(v string) *DescribeEventVariableListRequest {
	s.RefObjType = &v
	return s
}

func (s *DescribeEventVariableListRequest) SetRegId(v string) *DescribeEventVariableListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeEventVariableListRequest) SetType(v string) *DescribeEventVariableListRequest {
	s.Type = &v
	return s
}

type DescribeEventVariableListResponseBody struct {
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeEventVariableListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeEventVariableListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBody) SetRequestId(v string) *DescribeEventVariableListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventVariableListResponseBody) SetResultObject(v *DescribeEventVariableListResponseBodyResultObject) *DescribeEventVariableListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeEventVariableListResponseBodyResultObject struct {
	Actions                 []*DescribeEventVariableListResponseBodyResultObjectActions                 `json:"actions,omitempty" xml:"actions,omitempty" type:"Repeated"`
	DeviceVariables         []*DescribeEventVariableListResponseBodyResultObjectDeviceVariables         `json:"deviceVariables,omitempty" xml:"deviceVariables,omitempty" type:"Repeated"`
	ExpressionVariables     []*DescribeEventVariableListResponseBodyResultObjectExpressionVariables     `json:"expressionVariables,omitempty" xml:"expressionVariables,omitempty" type:"Repeated"`
	FavoriteVariables       []*DescribeEventVariableListResponseBodyResultObjectFavoriteVariables       `json:"favoriteVariables,omitempty" xml:"favoriteVariables,omitempty" type:"Repeated"`
	MiddleVariables         []*DescribeEventVariableListResponseBodyResultObjectMiddleVariables         `json:"middleVariables,omitempty" xml:"middleVariables,omitempty" type:"Repeated"`
	ModelVariables          []*DescribeEventVariableListResponseBodyResultObjectModelVariables          `json:"modelVariables,omitempty" xml:"modelVariables,omitempty" type:"Repeated"`
	NameList                []*DescribeEventVariableListResponseBodyResultObjectNameList                `json:"nameList,omitempty" xml:"nameList,omitempty" type:"Repeated"`
	NativeVariableFunctions []*DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions `json:"nativeVariableFunctions,omitempty" xml:"nativeVariableFunctions,omitempty" type:"Repeated"`
	NativeVariables         []*DescribeEventVariableListResponseBodyResultObjectNativeVariables         `json:"nativeVariables,omitempty" xml:"nativeVariables,omitempty" type:"Repeated"`
	QueryVariables          []*DescribeEventVariableListResponseBodyResultObjectQueryVariables          `json:"queryVariables,omitempty" xml:"queryVariables,omitempty" type:"Repeated"`
	SelfVariables           []*DescribeEventVariableListResponseBodyResultObjectSelfVariables           `json:"selfVariables,omitempty" xml:"selfVariables,omitempty" type:"Repeated"`
	SysVariables            []*DescribeEventVariableListResponseBodyResultObjectSysVariables            `json:"sysVariables,omitempty" xml:"sysVariables,omitempty" type:"Repeated"`
	ThirdVariables          map[string]interface{}                                                      `json:"thirdVariables,omitempty" xml:"thirdVariables,omitempty"`
	VelocityVariables       []*DescribeEventVariableListResponseBodyResultObjectVelocityVariables       `json:"velocityVariables,omitempty" xml:"velocityVariables,omitempty" type:"Repeated"`
}

func (s DescribeEventVariableListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetActions(v []*DescribeEventVariableListResponseBodyResultObjectActions) *DescribeEventVariableListResponseBodyResultObject {
	s.Actions = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetDeviceVariables(v []*DescribeEventVariableListResponseBodyResultObjectDeviceVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.DeviceVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetExpressionVariables(v []*DescribeEventVariableListResponseBodyResultObjectExpressionVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.ExpressionVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetFavoriteVariables(v []*DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.FavoriteVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetMiddleVariables(v []*DescribeEventVariableListResponseBodyResultObjectMiddleVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.MiddleVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetModelVariables(v []*DescribeEventVariableListResponseBodyResultObjectModelVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.ModelVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetNameList(v []*DescribeEventVariableListResponseBodyResultObjectNameList) *DescribeEventVariableListResponseBodyResultObject {
	s.NameList = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetNativeVariableFunctions(v []*DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) *DescribeEventVariableListResponseBodyResultObject {
	s.NativeVariableFunctions = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetNativeVariables(v []*DescribeEventVariableListResponseBodyResultObjectNativeVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.NativeVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetQueryVariables(v []*DescribeEventVariableListResponseBodyResultObjectQueryVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.QueryVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetSelfVariables(v []*DescribeEventVariableListResponseBodyResultObjectSelfVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.SelfVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetSysVariables(v []*DescribeEventVariableListResponseBodyResultObjectSysVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.SysVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetThirdVariables(v map[string]interface{}) *DescribeEventVariableListResponseBodyResultObject {
	s.ThirdVariables = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObject) SetVelocityVariables(v []*DescribeEventVariableListResponseBodyResultObjectVelocityVariables) *DescribeEventVariableListResponseBodyResultObject {
	s.VelocityVariables = v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectActions struct {
	Code             *string                                                                   `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                   `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                   `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                   `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                   `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                   `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                     `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                   `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                    `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                   `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                   `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                    `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                   `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                   `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                   `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                   `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                   `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                   `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                   `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                   `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                   `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                   `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                   `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectActions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectActions) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActions) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectActions {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectDeviceVariables struct {
	Code             *string                                                                           `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                           `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                           `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                           `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                           `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                           `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                             `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                           `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                            `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                           `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                           `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                            `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                           `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                           `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                           `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                           `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                           `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                           `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                           `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                           `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                           `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                           `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                           `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectDeviceVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectDeviceVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectExpressionVariables struct {
	Code             *string                                                                               `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                               `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                               `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                               `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                               `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                               `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                                 `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                               `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                                `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                               `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                               `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                                `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                               `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                               `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                               `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                               `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                               `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                               `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                               `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                               `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                               `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                               `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                               `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectExpressionVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectExpressionVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectFavoriteVariables struct {
	Code             *string                                                                             `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                             `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                             `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                             `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                             `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                             `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                               `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                             `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                              `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                             `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                             `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                              `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                             `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                             `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                             `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                             `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                             `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                             `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                             `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                             `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                             `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                             `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                             `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectMiddleVariables struct {
	Code             *string                                                                           `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                           `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                           `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                           `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                           `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                           `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                             `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                           `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                            `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                           `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                           `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                            `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                           `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                           `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                           `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                           `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                           `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                           `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                           `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                           `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                           `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                           `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                           `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectMiddleVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectMiddleVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectModelVariables struct {
	Code             *string                                                                          `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                          `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                          `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                          `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                          `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                          `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                            `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                          `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                           `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                          `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                          `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                           `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                          `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                          `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                          `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                          `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                          `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                          `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                          `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                          `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                          `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                          `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                          `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectModelVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectModelVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNameList struct {
	Code             *string                                                                    `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                    `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                    `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                    `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                    `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                    `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                      `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                    `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                     `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                    `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                    `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                     `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                    `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                    `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                    `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                    `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                    `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                    `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                    `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                    `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                    `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                    `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                    `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNameList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNameList) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameList) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectNameList {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions struct {
	Code             *string                                                                                   `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                                   `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                                   `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                                   `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                                   `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                                   `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                                     `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                                   `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                                    `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                                   `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                                   `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                                    `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                                   `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                                   `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                                   `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                                   `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                                   `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                                   `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                                   `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                                   `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                                   `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                                   `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                                   `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNativeVariables struct {
	Code             *string                                                                           `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                           `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                           `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                           `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                           `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                           `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                             `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                           `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                            `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                           `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                           `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                            `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                           `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                           `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                           `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                           `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                           `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                           `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                           `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                           `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                           `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                           `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                           `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectQueryVariables struct {
	Code             *string                                                                          `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                          `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                          `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                          `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                          `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                          `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                            `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                          `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                           `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                          `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                          `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                           `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                          `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                          `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                          `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                          `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                          `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                          `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                          `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                          `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                          `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                          `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                          `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectQueryVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectQueryVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectSelfVariables struct {
	Code             *string                                                                         `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                         `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                         `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                         `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                         `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                         `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                           `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                         `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                          `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                         `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                         `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                          `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                         `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                         `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                         `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                         `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                         `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                         `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                         `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                         `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                         `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                         `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                         `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectSelfVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectSelfVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectSysVariables struct {
	Code             *string                                                                        `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                        `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                        `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                        `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                        `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                        `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                          `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                        `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                         `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                        `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                        `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                         `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                        `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                        `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                        `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                        `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                        `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                        `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                        `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                        `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                        `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                        `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                        `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectSysVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectSysVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectVelocityVariables struct {
	Code             *string                                                                             `json:"code,omitempty" xml:"code,omitempty"`
	DataDisplay      *string                                                                             `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DefineId         *string                                                                             `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description      *string                                                                             `json:"description,omitempty" xml:"description,omitempty"`
	DisplayType      *string                                                                             `json:"displayType,omitempty" xml:"displayType,omitempty"`
	ExpressionTitle  *string                                                                             `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	FavoriteFlag     *bool                                                                               `json:"favoriteFlag,omitempty" xml:"favoriteFlag,omitempty"`
	FieldDetail      *string                                                                             `json:"fieldDetail,omitempty" xml:"fieldDetail,omitempty"`
	FieldRank        *int32                                                                              `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource      *string                                                                             `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType        *string                                                                             `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id               *int64                                                                              `json:"id,omitempty" xml:"id,omitempty"`
	InputFieldType   *string                                                                             `json:"inputFieldType,omitempty" xml:"inputFieldType,omitempty"`
	InputRequired    *string                                                                             `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs           *string                                                                             `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Name             *string                                                                             `json:"name,omitempty" xml:"name,omitempty"`
	Outlier          *string                                                                             `json:"outlier,omitempty" xml:"outlier,omitempty"`
	OutputThreshold  *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold  `json:"outputThreshold,omitempty" xml:"outputThreshold,omitempty" type:"Struct"`
	ParentName       *string                                                                             `json:"parentName,omitempty" xml:"parentName,omitempty"`
	SourceType       *string                                                                             `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title            *string                                                                             `json:"title,omitempty" xml:"title,omitempty"`
	Type             *string                                                                             `json:"type,omitempty" xml:"type,omitempty"`
	VariableVelocity *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity `json:"variableVelocity,omitempty" xml:"variableVelocity,omitempty" type:"Struct"`
	XLabel           *string                                                                             `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel           *string                                                                             `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectVelocityVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectVelocityVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetCode(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetDataDisplay(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.DataDisplay = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetDefineId(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.DefineId = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetDescription(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetDisplayType(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.DisplayType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetExpressionTitle(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetFavoriteFlag(v bool) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.FavoriteFlag = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetFieldDetail(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.FieldDetail = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetFieldRank(v int32) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.FieldRank = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetFieldSource(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.FieldSource = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetId(v int64) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetInputFieldType(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.InputFieldType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetInputRequired(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.InputRequired = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetInputs(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetName(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetOutlier(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Outlier = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetOutputThreshold(v *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.OutputThreshold = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetParentName(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.ParentName = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetSourceType(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.SourceType = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetTitle(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetType(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.Type = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetVariableVelocity(v *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.VariableVelocity = v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetXLabel(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.XLabel = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariables) SetYLabel(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariables {
	s.YLabel = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold struct {
	MaxValue *float64 `json:"maxValue,omitempty" xml:"maxValue,omitempty"`
	MinValue *float64 `json:"minValue,omitempty" xml:"minValue,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold) SetMaxValue(v float64) *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold {
	s.MaxValue = &v
	return s
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold) SetMinValue(v float64) *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold {
	s.MinValue = &v
	return s
}

type DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity struct {
	Iv *string `json:"iv,omitempty" xml:"iv,omitempty"`
}

func (s DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity) SetIv(v string) *DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity {
	s.Iv = &v
	return s
}

type DescribeEventVariableListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventVariableListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventVariableListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableListResponse) SetHeaders(v map[string]*string) *DescribeEventVariableListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventVariableListResponse) SetStatusCode(v int32) *DescribeEventVariableListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventVariableListResponse) SetBody(v *DescribeEventVariableListResponseBody) *DescribeEventVariableListResponse {
	s.Body = v
	return s
}

type DescribeEventVariableTemplateBindRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Inputs       *string `json:"inputs,omitempty" xml:"inputs,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateCode *string `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	// This parameter is required.
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeEventVariableTemplateBindRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateBindRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateBindRequest) SetLang(v string) *DescribeEventVariableTemplateBindRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventVariableTemplateBindRequest) SetInputs(v string) *DescribeEventVariableTemplateBindRequest {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableTemplateBindRequest) SetRegId(v string) *DescribeEventVariableTemplateBindRequest {
	s.RegId = &v
	return s
}

func (s *DescribeEventVariableTemplateBindRequest) SetTemplateCode(v string) *DescribeEventVariableTemplateBindRequest {
	s.TemplateCode = &v
	return s
}

func (s *DescribeEventVariableTemplateBindRequest) SetType(v string) *DescribeEventVariableTemplateBindRequest {
	s.Type = &v
	return s
}

type DescribeEventVariableTemplateBindResponseBody struct {
	RequestId    *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeEventVariableTemplateBindResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeEventVariableTemplateBindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateBindResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateBindResponseBody) SetRequestId(v string) *DescribeEventVariableTemplateBindResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBody) SetResultObject(v *DescribeEventVariableTemplateBindResponseBodyResultObject) *DescribeEventVariableTemplateBindResponseBody {
	s.ResultObject = v
	return s
}

type DescribeEventVariableTemplateBindResponseBodyResultObject struct {
	ChargeVariables []*DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables `json:"chargeVariables,omitempty" xml:"chargeVariables,omitempty" type:"Repeated"`
	FreeVariables   []*DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables   `json:"freeVariables,omitempty" xml:"freeVariables,omitempty" type:"Repeated"`
	TemplateCode    *string                                                                     `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	TotalCount      *string                                                                     `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s DescribeEventVariableTemplateBindResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateBindResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObject) SetChargeVariables(v []*DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) *DescribeEventVariableTemplateBindResponseBodyResultObject {
	s.ChargeVariables = v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObject) SetFreeVariables(v []*DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) *DescribeEventVariableTemplateBindResponseBodyResultObject {
	s.FreeVariables = v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObject) SetTemplateCode(v string) *DescribeEventVariableTemplateBindResponseBodyResultObject {
	s.TemplateCode = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObject) SetTotalCount(v string) *DescribeEventVariableTemplateBindResponseBodyResultObject {
	s.TotalCount = &v
	return s
}

type DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables struct {
	Code        *string `json:"code,omitempty" xml:"code,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	FieldType   *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) SetCode(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) SetDescription(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) SetFieldType(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) SetId(v int64) *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) SetName(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) SetTitle(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables) SetType(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables {
	s.Type = &v
	return s
}

type DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables struct {
	Code        *string `json:"code,omitempty" xml:"code,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	FieldType   *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) SetCode(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) SetDescription(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) SetFieldType(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) SetId(v int64) *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) SetName(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) SetTitle(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables) SetType(v string) *DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables {
	s.Type = &v
	return s
}

type DescribeEventVariableTemplateBindResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventVariableTemplateBindResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventVariableTemplateBindResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateBindResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateBindResponse) SetHeaders(v map[string]*string) *DescribeEventVariableTemplateBindResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventVariableTemplateBindResponse) SetStatusCode(v int32) *DescribeEventVariableTemplateBindResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventVariableTemplateBindResponse) SetBody(v *DescribeEventVariableTemplateBindResponseBody) *DescribeEventVariableTemplateBindResponse {
	s.Body = v
	return s
}

type DescribeEventVariableTemplateListRequest struct {
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Inputs       *string `json:"inputs,omitempty" xml:"inputs,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateCode *string `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	Type         *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeEventVariableTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateListRequest) SetLang(v string) *DescribeEventVariableTemplateListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventVariableTemplateListRequest) SetInputs(v string) *DescribeEventVariableTemplateListRequest {
	s.Inputs = &v
	return s
}

func (s *DescribeEventVariableTemplateListRequest) SetRegId(v string) *DescribeEventVariableTemplateListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeEventVariableTemplateListRequest) SetTemplateCode(v string) *DescribeEventVariableTemplateListRequest {
	s.TemplateCode = &v
	return s
}

func (s *DescribeEventVariableTemplateListRequest) SetType(v string) *DescribeEventVariableTemplateListRequest {
	s.Type = &v
	return s
}

type DescribeEventVariableTemplateListResponseBody struct {
	RequestId    *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeEventVariableTemplateListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeEventVariableTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateListResponseBody) SetRequestId(v string) *DescribeEventVariableTemplateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBody) SetResultObject(v []*DescribeEventVariableTemplateListResponseBodyResultObject) *DescribeEventVariableTemplateListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeEventVariableTemplateListResponseBodyResultObject struct {
	TemplateCode *string                                                               `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	TemplateName *string                                                               `json:"templateName,omitempty" xml:"templateName,omitempty"`
	Variables    []*DescribeEventVariableTemplateListResponseBodyResultObjectVariables `json:"variables,omitempty" xml:"variables,omitempty" type:"Repeated"`
}

func (s DescribeEventVariableTemplateListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObject) SetTemplateCode(v string) *DescribeEventVariableTemplateListResponseBodyResultObject {
	s.TemplateCode = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObject) SetTemplateName(v string) *DescribeEventVariableTemplateListResponseBodyResultObject {
	s.TemplateName = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObject) SetVariables(v []*DescribeEventVariableTemplateListResponseBodyResultObjectVariables) *DescribeEventVariableTemplateListResponseBodyResultObject {
	s.Variables = v
	return s
}

type DescribeEventVariableTemplateListResponseBodyResultObjectVariables struct {
	Code        *string `json:"code,omitempty" xml:"code,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	FieldType   *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeEventVariableTemplateListResponseBodyResultObjectVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateListResponseBodyResultObjectVariables) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObjectVariables) SetCode(v string) *DescribeEventVariableTemplateListResponseBodyResultObjectVariables {
	s.Code = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObjectVariables) SetDescription(v string) *DescribeEventVariableTemplateListResponseBodyResultObjectVariables {
	s.Description = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObjectVariables) SetFieldType(v string) *DescribeEventVariableTemplateListResponseBodyResultObjectVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObjectVariables) SetId(v int64) *DescribeEventVariableTemplateListResponseBodyResultObjectVariables {
	s.Id = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObjectVariables) SetName(v string) *DescribeEventVariableTemplateListResponseBodyResultObjectVariables {
	s.Name = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObjectVariables) SetTitle(v string) *DescribeEventVariableTemplateListResponseBodyResultObjectVariables {
	s.Title = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponseBodyResultObjectVariables) SetType(v string) *DescribeEventVariableTemplateListResponseBodyResultObjectVariables {
	s.Type = &v
	return s
}

type DescribeEventVariableTemplateListResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventVariableTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventVariableTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventVariableTemplateListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventVariableTemplateListResponse) SetHeaders(v map[string]*string) *DescribeEventVariableTemplateListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventVariableTemplateListResponse) SetStatusCode(v int32) *DescribeEventVariableTemplateListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventVariableTemplateListResponse) SetBody(v *DescribeEventVariableTemplateListResponseBody) *DescribeEventVariableTemplateListResponse {
	s.Body = v
	return s
}

type DescribeEventsVariableListRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	FilterDTO  *string `json:"filterDTO,omitempty" xml:"filterDTO,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s DescribeEventsVariableListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsVariableListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventsVariableListRequest) SetLang(v string) *DescribeEventsVariableListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEventsVariableListRequest) SetCreateType(v string) *DescribeEventsVariableListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeEventsVariableListRequest) SetEventCodes(v string) *DescribeEventsVariableListRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeEventsVariableListRequest) SetFilterDTO(v string) *DescribeEventsVariableListRequest {
	s.FilterDTO = &v
	return s
}

func (s *DescribeEventsVariableListRequest) SetRegId(v string) *DescribeEventsVariableListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeEventsVariableListRequest) SetScene(v string) *DescribeEventsVariableListRequest {
	s.Scene = &v
	return s
}

type DescribeEventsVariableListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeEventsVariableListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsVariableListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventsVariableListResponseBody) SetRequestId(v string) *DescribeEventsVariableListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventsVariableListResponseBody) SetResultObject(v bool) *DescribeEventsVariableListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeEventsVariableListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventsVariableListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventsVariableListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsVariableListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventsVariableListResponse) SetHeaders(v map[string]*string) *DescribeEventsVariableListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventsVariableListResponse) SetStatusCode(v int32) *DescribeEventsVariableListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventsVariableListResponse) SetBody(v *DescribeEventsVariableListResponseBody) *DescribeEventsVariableListResponse {
	s.Body = v
	return s
}

type DescribeExcuteNumRequest struct {
	// This parameter is required.
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Degree    *string `json:"Degree,omitempty" xml:"Degree,omitempty"`
	EndDate   *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp  *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s DescribeExcuteNumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcuteNumRequest) GoString() string {
	return s.String()
}

func (s *DescribeExcuteNumRequest) SetCode(v string) *DescribeExcuteNumRequest {
	s.Code = &v
	return s
}

func (s *DescribeExcuteNumRequest) SetDegree(v string) *DescribeExcuteNumRequest {
	s.Degree = &v
	return s
}

func (s *DescribeExcuteNumRequest) SetEndDate(v string) *DescribeExcuteNumRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeExcuteNumRequest) SetLang(v string) *DescribeExcuteNumRequest {
	s.Lang = &v
	return s
}

func (s *DescribeExcuteNumRequest) SetSourceIp(v string) *DescribeExcuteNumRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeExcuteNumRequest) SetStartDate(v string) *DescribeExcuteNumRequest {
	s.StartDate = &v
	return s
}

type DescribeExcuteNumResponseBody struct {
	Categories []*string `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	Data       []*string `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	RequestId  *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExcuteNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcuteNumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExcuteNumResponseBody) SetCategories(v []*string) *DescribeExcuteNumResponseBody {
	s.Categories = v
	return s
}

func (s *DescribeExcuteNumResponseBody) SetData(v []*string) *DescribeExcuteNumResponseBody {
	s.Data = v
	return s
}

func (s *DescribeExcuteNumResponseBody) SetRequestId(v string) *DescribeExcuteNumResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExcuteNumResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExcuteNumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExcuteNumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcuteNumResponse) GoString() string {
	return s.String()
}

func (s *DescribeExcuteNumResponse) SetHeaders(v map[string]*string) *DescribeExcuteNumResponse {
	s.Headers = v
	return s
}

func (s *DescribeExcuteNumResponse) SetStatusCode(v int32) *DescribeExcuteNumResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExcuteNumResponse) SetBody(v *DescribeExcuteNumResponseBody) *DescribeExcuteNumResponse {
	s.Body = v
	return s
}

type DescribeExistNameRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeExistNameRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExistNameRequest) GoString() string {
	return s.String()
}

func (s *DescribeExistNameRequest) SetLang(v string) *DescribeExistNameRequest {
	s.Lang = &v
	return s
}

func (s *DescribeExistNameRequest) SetName(v string) *DescribeExistNameRequest {
	s.Name = &v
	return s
}

func (s *DescribeExistNameRequest) SetRegId(v string) *DescribeExistNameRequest {
	s.RegId = &v
	return s
}

type DescribeExistNameResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeExistNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExistNameResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExistNameResponseBody) SetRequestId(v string) *DescribeExistNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExistNameResponseBody) SetResultObject(v bool) *DescribeExistNameResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeExistNameResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExistNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExistNameResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExistNameResponse) GoString() string {
	return s.String()
}

func (s *DescribeExistNameResponse) SetHeaders(v map[string]*string) *DescribeExistNameResponse {
	s.Headers = v
	return s
}

func (s *DescribeExistNameResponse) SetStatusCode(v int32) *DescribeExistNameResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExistNameResponse) SetBody(v *DescribeExistNameResponseBody) *DescribeExistNameResponse {
	s.Body = v
	return s
}

type DescribeExistSceneRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SceneName *string `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	RegId     *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeExistSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExistSceneRequest) GoString() string {
	return s.String()
}

func (s *DescribeExistSceneRequest) SetLang(v string) *DescribeExistSceneRequest {
	s.Lang = &v
	return s
}

func (s *DescribeExistSceneRequest) SetSceneName(v string) *DescribeExistSceneRequest {
	s.SceneName = &v
	return s
}

func (s *DescribeExistSceneRequest) SetRegId(v string) *DescribeExistSceneRequest {
	s.RegId = &v
	return s
}

type DescribeExistSceneResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DescribeExistSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExistSceneResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExistSceneResponseBody) SetRequestId(v string) *DescribeExistSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExistSceneResponseBody) SetData(v bool) *DescribeExistSceneResponseBody {
	s.Data = &v
	return s
}

type DescribeExistSceneResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExistSceneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExistSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExistSceneResponse) GoString() string {
	return s.String()
}

func (s *DescribeExistSceneResponse) SetHeaders(v map[string]*string) *DescribeExistSceneResponse {
	s.Headers = v
	return s
}

func (s *DescribeExistSceneResponse) SetStatusCode(v int32) *DescribeExistSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExistSceneResponse) SetBody(v *DescribeExistSceneResponseBody) *DescribeExistSceneResponse {
	s.Body = v
	return s
}

type DescribeExpressionVariableDetailRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeExpressionVariableDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariableDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariableDetailRequest) SetLang(v string) *DescribeExpressionVariableDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeExpressionVariableDetailRequest) SetId(v int64) *DescribeExpressionVariableDetailRequest {
	s.Id = &v
	return s
}

func (s *DescribeExpressionVariableDetailRequest) SetRegId(v string) *DescribeExpressionVariableDetailRequest {
	s.RegId = &v
	return s
}

type DescribeExpressionVariableDetailResponseBody struct {
	RequestId    *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject map[string]interface{} `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeExpressionVariableDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariableDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariableDetailResponseBody) SetRequestId(v string) *DescribeExpressionVariableDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExpressionVariableDetailResponseBody) SetResultObject(v map[string]interface{}) *DescribeExpressionVariableDetailResponseBody {
	s.ResultObject = v
	return s
}

type DescribeExpressionVariableDetailResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExpressionVariableDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExpressionVariableDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariableDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariableDetailResponse) SetHeaders(v map[string]*string) *DescribeExpressionVariableDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeExpressionVariableDetailResponse) SetStatusCode(v int32) *DescribeExpressionVariableDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExpressionVariableDetailResponse) SetBody(v *DescribeExpressionVariableDetailResponseBody) *DescribeExpressionVariableDetailResponse {
	s.Body = v
	return s
}

type DescribeExpressionVariableFunctionListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeExpressionVariableFunctionListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariableFunctionListRequest) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariableFunctionListRequest) SetLang(v string) *DescribeExpressionVariableFunctionListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListRequest) SetRegId(v string) *DescribeExpressionVariableFunctionListRequest {
	s.RegId = &v
	return s
}

type DescribeExpressionVariableFunctionListResponseBody struct {
	RequestId    *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeExpressionVariableFunctionListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeExpressionVariableFunctionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariableFunctionListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariableFunctionListResponseBody) SetRequestId(v string) *DescribeExpressionVariableFunctionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBody) SetResultObject(v []*DescribeExpressionVariableFunctionListResponseBodyResultObject) *DescribeExpressionVariableFunctionListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeExpressionVariableFunctionListResponseBodyResultObject struct {
	Description  *string `json:"description,omitempty" xml:"description,omitempty"`
	Key          *string `json:"key,omitempty" xml:"key,omitempty"`
	MaxParamSize *int64  `json:"maxParamSize,omitempty" xml:"maxParamSize,omitempty"`
	MinParamSize *int64  `json:"minParamSize,omitempty" xml:"minParamSize,omitempty"`
	ParamTypes   *string `json:"paramTypes,omitempty" xml:"paramTypes,omitempty"`
	Redirect     *bool   `json:"redirect,omitempty" xml:"redirect,omitempty"`
	ReturnTypes  *string `json:"returnTypes,omitempty" xml:"returnTypes,omitempty"`
	Value        *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeExpressionVariableFunctionListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariableFunctionListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetDescription(v string) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetKey(v string) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.Key = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetMaxParamSize(v int64) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.MaxParamSize = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetMinParamSize(v int64) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.MinParamSize = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetParamTypes(v string) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.ParamTypes = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetRedirect(v bool) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.Redirect = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetReturnTypes(v string) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.ReturnTypes = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponseBodyResultObject) SetValue(v string) *DescribeExpressionVariableFunctionListResponseBodyResultObject {
	s.Value = &v
	return s
}

type DescribeExpressionVariableFunctionListResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExpressionVariableFunctionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExpressionVariableFunctionListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariableFunctionListResponse) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariableFunctionListResponse) SetHeaders(v map[string]*string) *DescribeExpressionVariableFunctionListResponse {
	s.Headers = v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponse) SetStatusCode(v int32) *DescribeExpressionVariableFunctionListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExpressionVariableFunctionListResponse) SetBody(v *DescribeExpressionVariableFunctionListResponseBody) *DescribeExpressionVariableFunctionListResponse {
	s.Body = v
	return s
}

type DescribeExpressionVariablePageRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EventCode   *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Outputs     *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	// This parameter is required.
	PageSize *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	Value  *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeExpressionVariablePageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariablePageRequest) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariablePageRequest) SetLang(v string) *DescribeExpressionVariablePageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeExpressionVariablePageRequest) SetCurrentPage(v string) *DescribeExpressionVariablePageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExpressionVariablePageRequest) SetEventCode(v string) *DescribeExpressionVariablePageRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeExpressionVariablePageRequest) SetOutputs(v string) *DescribeExpressionVariablePageRequest {
	s.Outputs = &v
	return s
}

func (s *DescribeExpressionVariablePageRequest) SetPageSize(v string) *DescribeExpressionVariablePageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeExpressionVariablePageRequest) SetRegId(v string) *DescribeExpressionVariablePageRequest {
	s.RegId = &v
	return s
}

func (s *DescribeExpressionVariablePageRequest) SetStatus(v string) *DescribeExpressionVariablePageRequest {
	s.Status = &v
	return s
}

func (s *DescribeExpressionVariablePageRequest) SetValue(v string) *DescribeExpressionVariablePageRequest {
	s.Value = &v
	return s
}

type DescribeExpressionVariablePageResponseBody struct {
	RequestId    *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                                    `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                                    `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeExpressionVariablePageResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                                    `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                                    `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeExpressionVariablePageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariablePageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariablePageResponseBody) SetRequestId(v string) *DescribeExpressionVariablePageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBody) SetCurrentPage(v int32) *DescribeExpressionVariablePageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBody) SetPageSize(v int32) *DescribeExpressionVariablePageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBody) SetResultObject(v []*DescribeExpressionVariablePageResponseBodyResultObject) *DescribeExpressionVariablePageResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeExpressionVariablePageResponseBody) SetTotalItem(v int32) *DescribeExpressionVariablePageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBody) SetTotalPage(v int32) *DescribeExpressionVariablePageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeExpressionVariablePageResponseBodyResultObject struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EventName   *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Outputs     *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	Status      *string `json:"status,omitempty" xml:"status,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Version     *int64  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeExpressionVariablePageResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariablePageResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetDescription(v string) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetEventName(v string) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetGmtModified(v int64) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetId(v int64) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetOutputs(v string) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.Outputs = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetStatus(v string) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetTitle(v string) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeExpressionVariablePageResponseBodyResultObject) SetVersion(v int64) *DescribeExpressionVariablePageResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeExpressionVariablePageResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExpressionVariablePageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExpressionVariablePageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExpressionVariablePageResponse) GoString() string {
	return s.String()
}

func (s *DescribeExpressionVariablePageResponse) SetHeaders(v map[string]*string) *DescribeExpressionVariablePageResponse {
	s.Headers = v
	return s
}

func (s *DescribeExpressionVariablePageResponse) SetStatusCode(v int32) *DescribeExpressionVariablePageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExpressionVariablePageResponse) SetBody(v *DescribeExpressionVariablePageResponseBody) *DescribeExpressionVariablePageResponse {
	s.Body = v
	return s
}

type DescribeFieldByIdRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeFieldByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldByIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeFieldByIdRequest) SetLang(v string) *DescribeFieldByIdRequest {
	s.Lang = &v
	return s
}

func (s *DescribeFieldByIdRequest) SetId(v int64) *DescribeFieldByIdRequest {
	s.Id = &v
	return s
}

func (s *DescribeFieldByIdRequest) SetRegId(v string) *DescribeFieldByIdRequest {
	s.RegId = &v
	return s
}

type DescribeFieldByIdResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeFieldByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldByIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFieldByIdResponseBody) SetRequestId(v string) *DescribeFieldByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFieldByIdResponseBody) SetResultObject(v bool) *DescribeFieldByIdResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeFieldByIdResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFieldByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFieldByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldByIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeFieldByIdResponse) SetHeaders(v map[string]*string) *DescribeFieldByIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeFieldByIdResponse) SetStatusCode(v int32) *DescribeFieldByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFieldByIdResponse) SetBody(v *DescribeFieldByIdResponseBody) *DescribeFieldByIdResponse {
	s.Body = v
	return s
}

type DescribeFieldListRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	Inputs    *string `json:"inputs,omitempty" xml:"inputs,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeFieldListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldListRequest) GoString() string {
	return s.String()
}

func (s *DescribeFieldListRequest) SetLang(v string) *DescribeFieldListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeFieldListRequest) SetCondition(v string) *DescribeFieldListRequest {
	s.Condition = &v
	return s
}

func (s *DescribeFieldListRequest) SetInputs(v string) *DescribeFieldListRequest {
	s.Inputs = &v
	return s
}

func (s *DescribeFieldListRequest) SetRegId(v string) *DescribeFieldListRequest {
	s.RegId = &v
	return s
}

type DescribeFieldListResponseBody struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                       `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                       `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeFieldListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                       `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                       `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeFieldListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFieldListResponseBody) SetRequestId(v string) *DescribeFieldListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFieldListResponseBody) SetCurrentPage(v int32) *DescribeFieldListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeFieldListResponseBody) SetPageSize(v int32) *DescribeFieldListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeFieldListResponseBody) SetResultObject(v []*DescribeFieldListResponseBodyResultObject) *DescribeFieldListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeFieldListResponseBody) SetTotalItem(v int32) *DescribeFieldListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeFieldListResponseBody) SetTotalPage(v int32) *DescribeFieldListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeFieldListResponseBodyResultObject struct {
	Classify    *string `json:"classify,omitempty" xml:"classify,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EnumData    *string `json:"enumData,omitempty" xml:"enumData,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Source      *string `json:"source,omitempty" xml:"source,omitempty"`
	Status      *string `json:"status,omitempty" xml:"status,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeFieldListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeFieldListResponseBodyResultObject) SetClassify(v string) *DescribeFieldListResponseBodyResultObject {
	s.Classify = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetDescription(v string) *DescribeFieldListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetEnumData(v string) *DescribeFieldListResponseBodyResultObject {
	s.EnumData = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetId(v int64) *DescribeFieldListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetName(v string) *DescribeFieldListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetSource(v string) *DescribeFieldListResponseBodyResultObject {
	s.Source = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetStatus(v string) *DescribeFieldListResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetTitle(v string) *DescribeFieldListResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeFieldListResponseBodyResultObject) SetType(v string) *DescribeFieldListResponseBodyResultObject {
	s.Type = &v
	return s
}

type DescribeFieldListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFieldListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFieldListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldListResponse) GoString() string {
	return s.String()
}

func (s *DescribeFieldListResponse) SetHeaders(v map[string]*string) *DescribeFieldListResponse {
	s.Headers = v
	return s
}

func (s *DescribeFieldListResponse) SetStatusCode(v int32) *DescribeFieldListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFieldListResponse) SetBody(v *DescribeFieldListResponseBody) *DescribeFieldListResponse {
	s.Body = v
	return s
}

type DescribeFieldPageRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Classify    *string `json:"classify,omitempty" xml:"classify,omitempty"`
	Condition   *string `json:"condition,omitempty" xml:"condition,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Source      *string `json:"source,omitempty" xml:"source,omitempty"`
	Status      *string `json:"status,omitempty" xml:"status,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeFieldPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeFieldPageRequest) SetLang(v string) *DescribeFieldPageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeFieldPageRequest) SetClassify(v string) *DescribeFieldPageRequest {
	s.Classify = &v
	return s
}

func (s *DescribeFieldPageRequest) SetCondition(v string) *DescribeFieldPageRequest {
	s.Condition = &v
	return s
}

func (s *DescribeFieldPageRequest) SetCurrentPage(v string) *DescribeFieldPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeFieldPageRequest) SetName(v string) *DescribeFieldPageRequest {
	s.Name = &v
	return s
}

func (s *DescribeFieldPageRequest) SetPageSize(v string) *DescribeFieldPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFieldPageRequest) SetRegId(v string) *DescribeFieldPageRequest {
	s.RegId = &v
	return s
}

func (s *DescribeFieldPageRequest) SetSource(v string) *DescribeFieldPageRequest {
	s.Source = &v
	return s
}

func (s *DescribeFieldPageRequest) SetStatus(v string) *DescribeFieldPageRequest {
	s.Status = &v
	return s
}

func (s *DescribeFieldPageRequest) SetTitle(v string) *DescribeFieldPageRequest {
	s.Title = &v
	return s
}

func (s *DescribeFieldPageRequest) SetType(v string) *DescribeFieldPageRequest {
	s.Type = &v
	return s
}

type DescribeFieldPageResponseBody struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                       `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                       `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeFieldPageResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                       `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                       `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeFieldPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFieldPageResponseBody) SetRequestId(v string) *DescribeFieldPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFieldPageResponseBody) SetCurrentPage(v int32) *DescribeFieldPageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeFieldPageResponseBody) SetPageSize(v int32) *DescribeFieldPageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeFieldPageResponseBody) SetResultObject(v []*DescribeFieldPageResponseBodyResultObject) *DescribeFieldPageResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeFieldPageResponseBody) SetTotalItem(v int32) *DescribeFieldPageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeFieldPageResponseBody) SetTotalPage(v int32) *DescribeFieldPageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeFieldPageResponseBodyResultObject struct {
	Classify    *string `json:"classify,omitempty" xml:"classify,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EnumData    *string `json:"enumData,omitempty" xml:"enumData,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Source      *string `json:"source,omitempty" xml:"source,omitempty"`
	Status      *string `json:"status,omitempty" xml:"status,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeFieldPageResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldPageResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeFieldPageResponseBodyResultObject) SetClassify(v string) *DescribeFieldPageResponseBodyResultObject {
	s.Classify = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetDescription(v string) *DescribeFieldPageResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetEnumData(v string) *DescribeFieldPageResponseBodyResultObject {
	s.EnumData = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetId(v int64) *DescribeFieldPageResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetName(v string) *DescribeFieldPageResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetSource(v string) *DescribeFieldPageResponseBodyResultObject {
	s.Source = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetStatus(v string) *DescribeFieldPageResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetTitle(v string) *DescribeFieldPageResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeFieldPageResponseBodyResultObject) SetType(v string) *DescribeFieldPageResponseBodyResultObject {
	s.Type = &v
	return s
}

type DescribeFieldPageResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFieldPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFieldPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeFieldPageResponse) SetHeaders(v map[string]*string) *DescribeFieldPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeFieldPageResponse) SetStatusCode(v int32) *DescribeFieldPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFieldPageResponse) SetBody(v *DescribeFieldPageResponseBody) *DescribeFieldPageResponse {
	s.Body = v
	return s
}

type DescribeGroupAccountPageRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CommunityNo *string `json:"communityNo,omitempty" xml:"communityNo,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Direction   *string `json:"direction,omitempty" xml:"direction,omitempty"`
	FieldKey    *string `json:"fieldKey,omitempty" xml:"fieldKey,omitempty"`
	FieldVal    *string `json:"fieldVal,omitempty" xml:"fieldVal,omitempty"`
	IsPage      *bool   `json:"isPage,omitempty" xml:"isPage,omitempty"`
	Order       *string `json:"order,omitempty" xml:"order,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TaskId      *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s DescribeGroupAccountPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupAccountPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupAccountPageRequest) SetLang(v string) *DescribeGroupAccountPageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetCommunityNo(v string) *DescribeGroupAccountPageRequest {
	s.CommunityNo = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetCurrentPage(v string) *DescribeGroupAccountPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetDirection(v string) *DescribeGroupAccountPageRequest {
	s.Direction = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetFieldKey(v string) *DescribeGroupAccountPageRequest {
	s.FieldKey = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetFieldVal(v string) *DescribeGroupAccountPageRequest {
	s.FieldVal = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetIsPage(v bool) *DescribeGroupAccountPageRequest {
	s.IsPage = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetOrder(v string) *DescribeGroupAccountPageRequest {
	s.Order = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetPageSize(v string) *DescribeGroupAccountPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetRegId(v string) *DescribeGroupAccountPageRequest {
	s.RegId = &v
	return s
}

func (s *DescribeGroupAccountPageRequest) SetTaskId(v string) *DescribeGroupAccountPageRequest {
	s.TaskId = &v
	return s
}

type DescribeGroupAccountPageResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Data        *bool   `json:"data,omitempty" xml:"data,omitempty"`
	PageSize    *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	TotalItem   *int32  `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage   *int32  `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeGroupAccountPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupAccountPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupAccountPageResponseBody) SetRequestId(v string) *DescribeGroupAccountPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupAccountPageResponseBody) SetCurrentPage(v int32) *DescribeGroupAccountPageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupAccountPageResponseBody) SetData(v bool) *DescribeGroupAccountPageResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeGroupAccountPageResponseBody) SetPageSize(v int32) *DescribeGroupAccountPageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupAccountPageResponseBody) SetTotalItem(v int32) *DescribeGroupAccountPageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeGroupAccountPageResponseBody) SetTotalPage(v int32) *DescribeGroupAccountPageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeGroupAccountPageResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupAccountPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupAccountPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupAccountPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupAccountPageResponse) SetHeaders(v map[string]*string) *DescribeGroupAccountPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupAccountPageResponse) SetStatusCode(v int32) *DescribeGroupAccountPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupAccountPageResponse) SetBody(v *DescribeGroupAccountPageResponseBody) *DescribeGroupAccountPageResponse {
	s.Body = v
	return s
}

type DescribeGroupConditionListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeGroupConditionListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupConditionListRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupConditionListRequest) SetLang(v string) *DescribeGroupConditionListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupConditionListRequest) SetRegId(v string) *DescribeGroupConditionListRequest {
	s.RegId = &v
	return s
}

type DescribeGroupConditionListResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeGroupConditionListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeGroupConditionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupConditionListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupConditionListResponseBody) SetRequestId(v string) *DescribeGroupConditionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupConditionListResponseBody) SetResultObject(v []*DescribeGroupConditionListResponseBodyResultObject) *DescribeGroupConditionListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeGroupConditionListResponseBodyResultObject struct {
	FieldKey   *string `json:"fieldKey,omitempty" xml:"fieldKey,omitempty"`
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
}

func (s DescribeGroupConditionListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupConditionListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeGroupConditionListResponseBodyResultObject) SetFieldKey(v string) *DescribeGroupConditionListResponseBodyResultObject {
	s.FieldKey = &v
	return s
}

func (s *DescribeGroupConditionListResponseBodyResultObject) SetFieldValue(v string) *DescribeGroupConditionListResponseBodyResultObject {
	s.FieldValue = &v
	return s
}

type DescribeGroupConditionListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupConditionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupConditionListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupConditionListResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupConditionListResponse) SetHeaders(v map[string]*string) *DescribeGroupConditionListResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupConditionListResponse) SetStatusCode(v int32) *DescribeGroupConditionListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupConditionListResponse) SetBody(v *DescribeGroupConditionListResponseBody) *DescribeGroupConditionListResponse {
	s.Body = v
	return s
}

type DescribeGroupPageRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Direction   *string `json:"direction,omitempty" xml:"direction,omitempty"`
	Order       *string `json:"order,omitempty" xml:"order,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TaskId      *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
	TimeType    *string `json:"timeType,omitempty" xml:"timeType,omitempty"`
}

func (s DescribeGroupPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupPageRequest) SetLang(v string) *DescribeGroupPageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupPageRequest) SetCurrentPage(v string) *DescribeGroupPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupPageRequest) SetDirection(v string) *DescribeGroupPageRequest {
	s.Direction = &v
	return s
}

func (s *DescribeGroupPageRequest) SetOrder(v string) *DescribeGroupPageRequest {
	s.Order = &v
	return s
}

func (s *DescribeGroupPageRequest) SetPageSize(v string) *DescribeGroupPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupPageRequest) SetRegId(v string) *DescribeGroupPageRequest {
	s.RegId = &v
	return s
}

func (s *DescribeGroupPageRequest) SetTaskId(v string) *DescribeGroupPageRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeGroupPageRequest) SetTimeType(v string) *DescribeGroupPageRequest {
	s.TimeType = &v
	return s
}

type DescribeGroupPageResponseBody struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                       `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                       `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeGroupPageResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                       `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                       `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeGroupPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupPageResponseBody) SetRequestId(v string) *DescribeGroupPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupPageResponseBody) SetCurrentPage(v int32) *DescribeGroupPageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupPageResponseBody) SetPageSize(v int32) *DescribeGroupPageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupPageResponseBody) SetResultObject(v []*DescribeGroupPageResponseBodyResultObject) *DescribeGroupPageResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeGroupPageResponseBody) SetTotalItem(v int32) *DescribeGroupPageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeGroupPageResponseBody) SetTotalPage(v int32) *DescribeGroupPageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeGroupPageResponseBodyResultObject struct {
	CommunityNo *string `json:"communityNo,omitempty" xml:"communityNo,omitempty"`
	CreateTime  *int64  `json:"createTime,omitempty" xml:"createTime,omitempty"`
	GroupRisk   *string `json:"groupRisk,omitempty" xml:"groupRisk,omitempty"`
	GroupScale  *string `json:"groupScale,omitempty" xml:"groupScale,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	SceneName   *string `json:"sceneName,omitempty" xml:"sceneName,omitempty"`
	TaskId      *int64  `json:"taskId,omitempty" xml:"taskId,omitempty"`
	UserId      *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s DescribeGroupPageResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupPageResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeGroupPageResponseBodyResultObject) SetCommunityNo(v string) *DescribeGroupPageResponseBodyResultObject {
	s.CommunityNo = &v
	return s
}

func (s *DescribeGroupPageResponseBodyResultObject) SetCreateTime(v int64) *DescribeGroupPageResponseBodyResultObject {
	s.CreateTime = &v
	return s
}

func (s *DescribeGroupPageResponseBodyResultObject) SetGroupRisk(v string) *DescribeGroupPageResponseBodyResultObject {
	s.GroupRisk = &v
	return s
}

func (s *DescribeGroupPageResponseBodyResultObject) SetGroupScale(v string) *DescribeGroupPageResponseBodyResultObject {
	s.GroupScale = &v
	return s
}

func (s *DescribeGroupPageResponseBodyResultObject) SetId(v int64) *DescribeGroupPageResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeGroupPageResponseBodyResultObject) SetSceneName(v string) *DescribeGroupPageResponseBodyResultObject {
	s.SceneName = &v
	return s
}

func (s *DescribeGroupPageResponseBodyResultObject) SetTaskId(v int64) *DescribeGroupPageResponseBodyResultObject {
	s.TaskId = &v
	return s
}

func (s *DescribeGroupPageResponseBodyResultObject) SetUserId(v string) *DescribeGroupPageResponseBodyResultObject {
	s.UserId = &v
	return s
}

type DescribeGroupPageResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupPageResponse) SetHeaders(v map[string]*string) *DescribeGroupPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupPageResponse) SetStatusCode(v int32) *DescribeGroupPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupPageResponse) SetBody(v *DescribeGroupPageResponseBody) *DescribeGroupPageResponse {
	s.Body = v
	return s
}

type DescribeGroupStatisticsByTodayRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeGroupStatisticsByTodayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupStatisticsByTodayRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupStatisticsByTodayRequest) SetLang(v string) *DescribeGroupStatisticsByTodayRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupStatisticsByTodayRequest) SetRegId(v string) *DescribeGroupStatisticsByTodayRequest {
	s.RegId = &v
	return s
}

type DescribeGroupStatisticsByTodayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DescribeGroupStatisticsByTodayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupStatisticsByTodayResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupStatisticsByTodayResponseBody) SetRequestId(v string) *DescribeGroupStatisticsByTodayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupStatisticsByTodayResponseBody) SetData(v bool) *DescribeGroupStatisticsByTodayResponseBody {
	s.Data = &v
	return s
}

type DescribeGroupStatisticsByTodayResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupStatisticsByTodayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupStatisticsByTodayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupStatisticsByTodayResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupStatisticsByTodayResponse) SetHeaders(v map[string]*string) *DescribeGroupStatisticsByTodayResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupStatisticsByTodayResponse) SetStatusCode(v int32) *DescribeGroupStatisticsByTodayResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupStatisticsByTodayResponse) SetBody(v *DescribeGroupStatisticsByTodayResponseBody) *DescribeGroupStatisticsByTodayResponse {
	s.Body = v
	return s
}

type DescribeGroupTrendRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Day   *string `json:"day,omitempty" xml:"day,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeGroupTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrendRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrendRequest) SetLang(v string) *DescribeGroupTrendRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupTrendRequest) SetDay(v string) *DescribeGroupTrendRequest {
	s.Day = &v
	return s
}

func (s *DescribeGroupTrendRequest) SetRegId(v string) *DescribeGroupTrendRequest {
	s.RegId = &v
	return s
}

type DescribeGroupTrendResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DescribeGroupTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrendResponseBody) SetRequestId(v string) *DescribeGroupTrendResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupTrendResponseBody) SetData(v bool) *DescribeGroupTrendResponseBody {
	s.Data = &v
	return s
}

type DescribeGroupTrendResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupTrendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrendResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrendResponse) SetHeaders(v map[string]*string) *DescribeGroupTrendResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupTrendResponse) SetStatusCode(v int32) *DescribeGroupTrendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupTrendResponse) SetBody(v *DescribeGroupTrendResponseBody) *DescribeGroupTrendResponse {
	s.Body = v
	return s
}

type DescribeHasRuleNameByEventCodeRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCode     *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	ExcludeRuleId *string `json:"excludeRuleId,omitempty" xml:"excludeRuleId,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleName      *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s DescribeHasRuleNameByEventCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHasRuleNameByEventCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeHasRuleNameByEventCodeRequest) SetLang(v string) *DescribeHasRuleNameByEventCodeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeHasRuleNameByEventCodeRequest) SetEventCode(v string) *DescribeHasRuleNameByEventCodeRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeHasRuleNameByEventCodeRequest) SetExcludeRuleId(v string) *DescribeHasRuleNameByEventCodeRequest {
	s.ExcludeRuleId = &v
	return s
}

func (s *DescribeHasRuleNameByEventCodeRequest) SetRegId(v string) *DescribeHasRuleNameByEventCodeRequest {
	s.RegId = &v
	return s
}

func (s *DescribeHasRuleNameByEventCodeRequest) SetRuleName(v string) *DescribeHasRuleNameByEventCodeRequest {
	s.RuleName = &v
	return s
}

type DescribeHasRuleNameByEventCodeResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeHasRuleNameByEventCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHasRuleNameByEventCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHasRuleNameByEventCodeResponseBody) SetRequestId(v string) *DescribeHasRuleNameByEventCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHasRuleNameByEventCodeResponseBody) SetResultObject(v bool) *DescribeHasRuleNameByEventCodeResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeHasRuleNameByEventCodeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHasRuleNameByEventCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHasRuleNameByEventCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHasRuleNameByEventCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeHasRuleNameByEventCodeResponse) SetHeaders(v map[string]*string) *DescribeHasRuleNameByEventCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeHasRuleNameByEventCodeResponse) SetStatusCode(v int32) *DescribeHasRuleNameByEventCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHasRuleNameByEventCodeResponse) SetBody(v *DescribeHasRuleNameByEventCodeResponseBody) *DescribeHasRuleNameByEventCodeResponse {
	s.Body = v
	return s
}

type DescribeHighRiskPieChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime *int64 `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	// This parameter is required.
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeHighRiskPieChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartRequest) SetLang(v string) *DescribeHighRiskPieChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeHighRiskPieChartRequest) SetBeginTime(v int64) *DescribeHighRiskPieChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeHighRiskPieChartRequest) SetEndTime(v int64) *DescribeHighRiskPieChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeHighRiskPieChartRequest) SetEventCodes(v string) *DescribeHighRiskPieChartRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeHighRiskPieChartRequest) SetRegId(v string) *DescribeHighRiskPieChartRequest {
	s.RegId = &v
	return s
}

type DescribeHighRiskPieChartResponseBody struct {
	Code           *string                                           `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                           `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                           `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeHighRiskPieChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                             `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBody) SetCode(v string) *DescribeHighRiskPieChartResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBody) SetHttpStatusCode(v string) *DescribeHighRiskPieChartResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBody) SetMessage(v string) *DescribeHighRiskPieChartResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBody) SetRequestId(v string) *DescribeHighRiskPieChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBody) SetResultObject(v *DescribeHighRiskPieChartResponseBodyResultObject) *DescribeHighRiskPieChartResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBody) SetSuccess(v bool) *DescribeHighRiskPieChartResponseBody {
	s.Success = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObject struct {
	HighRiskIPCity         *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity         `json:"highRiskIPCity,omitempty" xml:"highRiskIPCity,omitempty" type:"Struct"`
	HighRiskIPProvince     *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince     `json:"highRiskIPProvince,omitempty" xml:"highRiskIPProvince,omitempty" type:"Struct"`
	HighRiskMobileCity     *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity     `json:"highRiskMobileCity,omitempty" xml:"highRiskMobileCity,omitempty" type:"Struct"`
	HighRiskMobileProvince *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince `json:"highRiskMobileProvince,omitempty" xml:"highRiskMobileProvince,omitempty" type:"Struct"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObject) SetHighRiskIPCity(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity) *DescribeHighRiskPieChartResponseBodyResultObject {
	s.HighRiskIPCity = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObject) SetHighRiskIPProvince(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince) *DescribeHighRiskPieChartResponseBodyResultObject {
	s.HighRiskIPProvince = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObject) SetHighRiskMobileCity(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity) *DescribeHighRiskPieChartResponseBodyResultObject {
	s.HighRiskMobileCity = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObject) SetHighRiskMobileProvince(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince) *DescribeHighRiskPieChartResponseBodyResultObject {
	s.HighRiskMobileProvince = v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity struct {
	Animation *bool                                                                   `json:"animation,omitempty" xml:"animation,omitempty"`
	Grid      *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid     `json:"grid,omitempty" xml:"grid,omitempty" type:"Struct"`
	Series    []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity) SetAnimation(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity {
	s.Animation = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity) SetGrid(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity {
	s.Grid = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity) SetSeries(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity {
	s.Series = v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid struct {
	Show *bool `json:"show,omitempty" xml:"show,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid) SetShow(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid {
	s.Show = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries struct {
	Data     []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name     *string                                                                     `json:"name,omitempty" xml:"name,omitempty"`
	RoseType *string                                                                     `json:"roseType,omitempty" xml:"roseType,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries) SetData(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries {
	s.Data = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries) SetRoseType(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries {
	s.RoseType = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData) SetValue(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData {
	s.Value = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince struct {
	Animation *bool                                                                       `json:"animation,omitempty" xml:"animation,omitempty"`
	Grid      *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid     `json:"grid,omitempty" xml:"grid,omitempty" type:"Struct"`
	Series    []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince) SetAnimation(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince {
	s.Animation = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince) SetGrid(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince {
	s.Grid = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince) SetSeries(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince {
	s.Series = v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid struct {
	Show *bool `json:"show,omitempty" xml:"show,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid) SetShow(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid {
	s.Show = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries struct {
	Data     []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name     *string                                                                         `json:"name,omitempty" xml:"name,omitempty"`
	RoseType *string                                                                         `json:"roseType,omitempty" xml:"roseType,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries) SetData(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries {
	s.Data = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries) SetRoseType(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries {
	s.RoseType = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData) SetValue(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData {
	s.Value = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity struct {
	Animation *bool                                                                       `json:"animation,omitempty" xml:"animation,omitempty"`
	Grid      *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid     `json:"grid,omitempty" xml:"grid,omitempty" type:"Struct"`
	Series    []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity) SetAnimation(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity {
	s.Animation = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity) SetGrid(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity {
	s.Grid = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity) SetSeries(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity {
	s.Series = v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid struct {
	Show *bool `json:"show,omitempty" xml:"show,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid) SetShow(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid {
	s.Show = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries struct {
	Data     []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name     *string                                                                         `json:"name,omitempty" xml:"name,omitempty"`
	RoseType *string                                                                         `json:"roseType,omitempty" xml:"roseType,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries) SetData(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries {
	s.Data = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries) SetRoseType(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries {
	s.RoseType = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData) SetValue(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData {
	s.Value = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince struct {
	Animation *bool                                                                           `json:"animation,omitempty" xml:"animation,omitempty"`
	Grid      *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid     `json:"grid,omitempty" xml:"grid,omitempty" type:"Struct"`
	Series    []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince) SetAnimation(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince {
	s.Animation = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince) SetGrid(v *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince {
	s.Grid = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince) SetSeries(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince {
	s.Series = v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid struct {
	Show *bool `json:"show,omitempty" xml:"show,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid) SetShow(v bool) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid {
	s.Show = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries struct {
	Data     []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name     *string                                                                             `json:"name,omitempty" xml:"name,omitempty"`
	RoseType *string                                                                             `json:"roseType,omitempty" xml:"roseType,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries) SetData(v []*DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries {
	s.Data = v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries) SetRoseType(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries {
	s.RoseType = &v
	return s
}

type DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData) SetName(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData {
	s.Name = &v
	return s
}

func (s *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData) SetValue(v string) *DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData {
	s.Value = &v
	return s
}

type DescribeHighRiskPieChartResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHighRiskPieChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHighRiskPieChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHighRiskPieChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeHighRiskPieChartResponse) SetHeaders(v map[string]*string) *DescribeHighRiskPieChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeHighRiskPieChartResponse) SetStatusCode(v int32) *DescribeHighRiskPieChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHighRiskPieChartResponse) SetBody(v *DescribeHighRiskPieChartResponseBody) *DescribeHighRiskPieChartResponse {
	s.Body = v
	return s
}

type DescribeHitRuleFluctuationRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleStatus *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeHitRuleFluctuationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleFluctuationRequest) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleFluctuationRequest) SetLang(v string) *DescribeHitRuleFluctuationRequest {
	s.Lang = &v
	return s
}

func (s *DescribeHitRuleFluctuationRequest) SetEventCodes(v string) *DescribeHitRuleFluctuationRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeHitRuleFluctuationRequest) SetRegId(v string) *DescribeHitRuleFluctuationRequest {
	s.RegId = &v
	return s
}

func (s *DescribeHitRuleFluctuationRequest) SetRuleStatus(v string) *DescribeHitRuleFluctuationRequest {
	s.RuleStatus = &v
	return s
}

type DescribeHitRuleFluctuationResponseBody struct {
	Code           *string                                               `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                               `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                               `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeHitRuleFluctuationResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                                 `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeHitRuleFluctuationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleFluctuationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleFluctuationResponseBody) SetCode(v string) *DescribeHitRuleFluctuationResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBody) SetHttpStatusCode(v string) *DescribeHitRuleFluctuationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBody) SetMessage(v string) *DescribeHitRuleFluctuationResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBody) SetRequestId(v string) *DescribeHitRuleFluctuationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBody) SetResultObject(v []*DescribeHitRuleFluctuationResponseBodyResultObject) *DescribeHitRuleFluctuationResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBody) SetSuccess(v bool) *DescribeHitRuleFluctuationResponseBody {
	s.Success = &v
	return s
}

type DescribeHitRuleFluctuationResponseBodyResultObject struct {
	RuleId             *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName           *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	TodayNum           *int64  `json:"todayNum,omitempty" xml:"todayNum,omitempty"`
	WithinSevenDayNum  *string `json:"withinSevenDayNum,omitempty" xml:"withinSevenDayNum,omitempty"`
	WithinThirtyDayNum *string `json:"withinThirtyDayNum,omitempty" xml:"withinThirtyDayNum,omitempty"`
	WithinThreeDayNum  *string `json:"withinThreeDayNum,omitempty" xml:"withinThreeDayNum,omitempty"`
	YesterdayNum       *int64  `json:"yesterdayNum,omitempty" xml:"yesterdayNum,omitempty"`
}

func (s DescribeHitRuleFluctuationResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleFluctuationResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleFluctuationResponseBodyResultObject) SetRuleId(v string) *DescribeHitRuleFluctuationResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBodyResultObject) SetRuleName(v string) *DescribeHitRuleFluctuationResponseBodyResultObject {
	s.RuleName = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBodyResultObject) SetTodayNum(v int64) *DescribeHitRuleFluctuationResponseBodyResultObject {
	s.TodayNum = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBodyResultObject) SetWithinSevenDayNum(v string) *DescribeHitRuleFluctuationResponseBodyResultObject {
	s.WithinSevenDayNum = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBodyResultObject) SetWithinThirtyDayNum(v string) *DescribeHitRuleFluctuationResponseBodyResultObject {
	s.WithinThirtyDayNum = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBodyResultObject) SetWithinThreeDayNum(v string) *DescribeHitRuleFluctuationResponseBodyResultObject {
	s.WithinThreeDayNum = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponseBodyResultObject) SetYesterdayNum(v int64) *DescribeHitRuleFluctuationResponseBodyResultObject {
	s.YesterdayNum = &v
	return s
}

type DescribeHitRuleFluctuationResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHitRuleFluctuationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHitRuleFluctuationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleFluctuationResponse) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleFluctuationResponse) SetHeaders(v map[string]*string) *DescribeHitRuleFluctuationResponse {
	s.Headers = v
	return s
}

func (s *DescribeHitRuleFluctuationResponse) SetStatusCode(v int32) *DescribeHitRuleFluctuationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHitRuleFluctuationResponse) SetBody(v *DescribeHitRuleFluctuationResponseBody) *DescribeHitRuleFluctuationResponse {
	s.Body = v
	return s
}

type DescribeHitRuleListRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BeginTime  *int64  `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	EventType  *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeHitRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleListRequest) SetLang(v string) *DescribeHitRuleListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeHitRuleListRequest) SetBeginTime(v int64) *DescribeHitRuleListRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeHitRuleListRequest) SetEndTime(v int64) *DescribeHitRuleListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeHitRuleListRequest) SetEventCodes(v string) *DescribeHitRuleListRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeHitRuleListRequest) SetEventType(v string) *DescribeHitRuleListRequest {
	s.EventType = &v
	return s
}

func (s *DescribeHitRuleListRequest) SetRegId(v string) *DescribeHitRuleListRequest {
	s.RegId = &v
	return s
}

type DescribeHitRuleListResponseBody struct {
	RequestId    *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeHitRuleListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeHitRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleListResponseBody) SetRequestId(v string) *DescribeHitRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHitRuleListResponseBody) SetResultObject(v []*DescribeHitRuleListResponseBodyResultObject) *DescribeHitRuleListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeHitRuleListResponseBodyResultObject struct {
	HitCount *int32  `json:"hitCount,omitempty" xml:"hitCount,omitempty"`
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s DescribeHitRuleListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleListResponseBodyResultObject) SetHitCount(v int32) *DescribeHitRuleListResponseBodyResultObject {
	s.HitCount = &v
	return s
}

func (s *DescribeHitRuleListResponseBodyResultObject) SetRuleName(v string) *DescribeHitRuleListResponseBodyResultObject {
	s.RuleName = &v
	return s
}

type DescribeHitRuleListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHitRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHitRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleListResponse) SetHeaders(v map[string]*string) *DescribeHitRuleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeHitRuleListResponse) SetStatusCode(v int32) *DescribeHitRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHitRuleListResponse) SetBody(v *DescribeHitRuleListResponseBody) *DescribeHitRuleListResponse {
	s.Body = v
	return s
}

type DescribeHitRuleTrendRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BeginTime  *int64  `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleStatus *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeHitRuleTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleTrendRequest) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleTrendRequest) SetLang(v string) *DescribeHitRuleTrendRequest {
	s.Lang = &v
	return s
}

func (s *DescribeHitRuleTrendRequest) SetBeginTime(v int64) *DescribeHitRuleTrendRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeHitRuleTrendRequest) SetEndTime(v int64) *DescribeHitRuleTrendRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeHitRuleTrendRequest) SetEventCodes(v string) *DescribeHitRuleTrendRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeHitRuleTrendRequest) SetRegId(v string) *DescribeHitRuleTrendRequest {
	s.RegId = &v
	return s
}

func (s *DescribeHitRuleTrendRequest) SetRuleStatus(v string) *DescribeHitRuleTrendRequest {
	s.RuleStatus = &v
	return s
}

type DescribeHitRuleTrendResponseBody struct {
	Code           *string                                       `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                       `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                       `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeHitRuleTrendResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                         `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeHitRuleTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleTrendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleTrendResponseBody) SetCode(v string) *DescribeHitRuleTrendResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHitRuleTrendResponseBody) SetHttpStatusCode(v string) *DescribeHitRuleTrendResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeHitRuleTrendResponseBody) SetMessage(v string) *DescribeHitRuleTrendResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHitRuleTrendResponseBody) SetRequestId(v string) *DescribeHitRuleTrendResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHitRuleTrendResponseBody) SetResultObject(v *DescribeHitRuleTrendResponseBodyResultObject) *DescribeHitRuleTrendResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeHitRuleTrendResponseBody) SetSuccess(v bool) *DescribeHitRuleTrendResponseBody {
	s.Success = &v
	return s
}

type DescribeHitRuleTrendResponseBodyResultObject struct {
	Series []*DescribeHitRuleTrendResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeHitRuleTrendResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeHitRuleTrendResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleTrendResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleTrendResponseBodyResultObject) SetSeries(v []*DescribeHitRuleTrendResponseBodyResultObjectSeries) *DescribeHitRuleTrendResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeHitRuleTrendResponseBodyResultObject) SetXaxis(v *DescribeHitRuleTrendResponseBodyResultObjectXaxis) *DescribeHitRuleTrendResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeHitRuleTrendResponseBodyResultObjectSeries struct {
	Data []*DescribeHitRuleTrendResponseBodyResultObjectSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string                                                   `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeHitRuleTrendResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleTrendResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleTrendResponseBodyResultObjectSeries) SetData(v []*DescribeHitRuleTrendResponseBodyResultObjectSeriesData) *DescribeHitRuleTrendResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeHitRuleTrendResponseBodyResultObjectSeries) SetName(v string) *DescribeHitRuleTrendResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeHitRuleTrendResponseBodyResultObjectSeriesData struct {
	Num   *int64  `json:"num,omitempty" xml:"num,omitempty"`
	Scale *string `json:"scale,omitempty" xml:"scale,omitempty"`
}

func (s DescribeHitRuleTrendResponseBodyResultObjectSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleTrendResponseBodyResultObjectSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleTrendResponseBodyResultObjectSeriesData) SetNum(v int64) *DescribeHitRuleTrendResponseBodyResultObjectSeriesData {
	s.Num = &v
	return s
}

func (s *DescribeHitRuleTrendResponseBodyResultObjectSeriesData) SetScale(v string) *DescribeHitRuleTrendResponseBodyResultObjectSeriesData {
	s.Scale = &v
	return s
}

type DescribeHitRuleTrendResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeHitRuleTrendResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleTrendResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleTrendResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeHitRuleTrendResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeHitRuleTrendResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHitRuleTrendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHitRuleTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHitRuleTrendResponse) GoString() string {
	return s.String()
}

func (s *DescribeHitRuleTrendResponse) SetHeaders(v map[string]*string) *DescribeHitRuleTrendResponse {
	s.Headers = v
	return s
}

func (s *DescribeHitRuleTrendResponse) SetStatusCode(v int32) *DescribeHitRuleTrendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHitRuleTrendResponse) SetBody(v *DescribeHitRuleTrendResponseBody) *DescribeHitRuleTrendResponse {
	s.Body = v
	return s
}

type DescribeInputFeildCountByEventCodeRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeInputFeildCountByEventCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInputFeildCountByEventCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInputFeildCountByEventCodeRequest) SetLang(v string) *DescribeInputFeildCountByEventCodeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeInputFeildCountByEventCodeRequest) SetCreateType(v string) *DescribeInputFeildCountByEventCodeRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeInputFeildCountByEventCodeRequest) SetEventCode(v string) *DescribeInputFeildCountByEventCodeRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeInputFeildCountByEventCodeRequest) SetRegId(v string) *DescribeInputFeildCountByEventCodeRequest {
	s.RegId = &v
	return s
}

type DescribeInputFeildCountByEventCodeResponseBody struct {
	RequestId    *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeInputFeildCountByEventCodeResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeInputFeildCountByEventCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInputFeildCountByEventCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInputFeildCountByEventCodeResponseBody) SetRequestId(v string) *DescribeInputFeildCountByEventCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInputFeildCountByEventCodeResponseBody) SetResultObject(v *DescribeInputFeildCountByEventCodeResponseBodyResultObject) *DescribeInputFeildCountByEventCodeResponseBody {
	s.ResultObject = v
	return s
}

type DescribeInputFeildCountByEventCodeResponseBodyResultObject struct {
	Limit        *bool  `json:"limit,omitempty" xml:"limit,omitempty"`
	MaxTotalItem *int32 `json:"maxTotalItem,omitempty" xml:"maxTotalItem,omitempty"`
	TotalItem    *int32 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
}

func (s DescribeInputFeildCountByEventCodeResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeInputFeildCountByEventCodeResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeInputFeildCountByEventCodeResponseBodyResultObject) SetLimit(v bool) *DescribeInputFeildCountByEventCodeResponseBodyResultObject {
	s.Limit = &v
	return s
}

func (s *DescribeInputFeildCountByEventCodeResponseBodyResultObject) SetMaxTotalItem(v int32) *DescribeInputFeildCountByEventCodeResponseBodyResultObject {
	s.MaxTotalItem = &v
	return s
}

func (s *DescribeInputFeildCountByEventCodeResponseBodyResultObject) SetTotalItem(v int32) *DescribeInputFeildCountByEventCodeResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

type DescribeInputFeildCountByEventCodeResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInputFeildCountByEventCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInputFeildCountByEventCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInputFeildCountByEventCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInputFeildCountByEventCodeResponse) SetHeaders(v map[string]*string) *DescribeInputFeildCountByEventCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInputFeildCountByEventCodeResponse) SetStatusCode(v int32) *DescribeInputFeildCountByEventCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInputFeildCountByEventCodeResponse) SetBody(v *DescribeInputFeildCountByEventCodeResponseBody) *DescribeInputFeildCountByEventCodeResponse {
	s.Body = v
	return s
}

type DescribeListPocRequest struct {
	CurrentPage *int64  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegId       *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeListPocRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeListPocRequest) GoString() string {
	return s.String()
}

func (s *DescribeListPocRequest) SetCurrentPage(v int64) *DescribeListPocRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeListPocRequest) SetLang(v string) *DescribeListPocRequest {
	s.Lang = &v
	return s
}

func (s *DescribeListPocRequest) SetPageSize(v int64) *DescribeListPocRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeListPocRequest) SetRegId(v string) *DescribeListPocRequest {
	s.RegId = &v
	return s
}

func (s *DescribeListPocRequest) SetType(v string) *DescribeListPocRequest {
	s.Type = &v
	return s
}

type DescribeListPocResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	CurrentPage    *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PageSize       *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject   *bool   `json:"ResultObject,omitempty" xml:"ResultObject,omitempty"`
	TotalItem      *string `json:"TotalItem,omitempty" xml:"TotalItem,omitempty"`
	TotalPage      *string `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeListPocResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeListPocResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeListPocResponseBody) SetCode(v string) *DescribeListPocResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeListPocResponseBody) SetCurrentPage(v string) *DescribeListPocResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeListPocResponseBody) SetHttpStatusCode(v string) *DescribeListPocResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeListPocResponseBody) SetMessage(v string) *DescribeListPocResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeListPocResponseBody) SetPageSize(v string) *DescribeListPocResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeListPocResponseBody) SetRequestId(v string) *DescribeListPocResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeListPocResponseBody) SetResultObject(v bool) *DescribeListPocResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeListPocResponseBody) SetTotalItem(v string) *DescribeListPocResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeListPocResponseBody) SetTotalPage(v string) *DescribeListPocResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeListPocResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeListPocResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeListPocResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeListPocResponse) GoString() string {
	return s.String()
}

func (s *DescribeListPocResponse) SetHeaders(v map[string]*string) *DescribeListPocResponse {
	s.Headers = v
	return s
}

func (s *DescribeListPocResponse) SetStatusCode(v int32) *DescribeListPocResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeListPocResponse) SetBody(v *DescribeListPocResponseBody) *DescribeListPocResponse {
	s.Body = v
	return s
}

type DescribeLoanExecListRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BatchNo       *string `json:"batchNo,omitempty" xml:"batchNo,omitempty"`
	CurrentPage   *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	MonitorObj    *string `json:"monitorObj,omitempty" xml:"monitorObj,omitempty"`
	MonitorStatus *string `json:"monitorStatus,omitempty" xml:"monitorStatus,omitempty"`
	PageSize      *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeLoanExecListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoanExecListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoanExecListRequest) SetLang(v string) *DescribeLoanExecListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeLoanExecListRequest) SetBatchNo(v string) *DescribeLoanExecListRequest {
	s.BatchNo = &v
	return s
}

func (s *DescribeLoanExecListRequest) SetCurrentPage(v string) *DescribeLoanExecListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeLoanExecListRequest) SetMonitorObj(v string) *DescribeLoanExecListRequest {
	s.MonitorObj = &v
	return s
}

func (s *DescribeLoanExecListRequest) SetMonitorStatus(v string) *DescribeLoanExecListRequest {
	s.MonitorStatus = &v
	return s
}

func (s *DescribeLoanExecListRequest) SetPageSize(v string) *DescribeLoanExecListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLoanExecListRequest) SetRegId(v string) *DescribeLoanExecListRequest {
	s.RegId = &v
	return s
}

type DescribeLoanExecListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	TotalItem    *int32  `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32  `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeLoanExecListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoanExecListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoanExecListResponseBody) SetRequestId(v string) *DescribeLoanExecListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoanExecListResponseBody) SetCurrentPage(v int32) *DescribeLoanExecListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeLoanExecListResponseBody) SetPageSize(v int32) *DescribeLoanExecListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoanExecListResponseBody) SetResultObject(v bool) *DescribeLoanExecListResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeLoanExecListResponseBody) SetTotalItem(v int32) *DescribeLoanExecListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeLoanExecListResponseBody) SetTotalPage(v int32) *DescribeLoanExecListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLoanExecListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoanExecListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoanExecListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoanExecListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoanExecListResponse) SetHeaders(v map[string]*string) *DescribeLoanExecListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoanExecListResponse) SetStatusCode(v int32) *DescribeLoanExecListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoanExecListResponse) SetBody(v *DescribeLoanExecListResponseBody) *DescribeLoanExecListResponse {
	s.Body = v
	return s
}

type DescribeLoanTaskListRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BatchNo       *string `json:"batchNo,omitempty" xml:"batchNo,omitempty"`
	CurrentPage   *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	MonitorStatus *string `json:"monitorStatus,omitempty" xml:"monitorStatus,omitempty"`
	PageSize      *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeLoanTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoanTaskListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoanTaskListRequest) SetLang(v string) *DescribeLoanTaskListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeLoanTaskListRequest) SetBatchNo(v string) *DescribeLoanTaskListRequest {
	s.BatchNo = &v
	return s
}

func (s *DescribeLoanTaskListRequest) SetCurrentPage(v string) *DescribeLoanTaskListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeLoanTaskListRequest) SetMonitorStatus(v string) *DescribeLoanTaskListRequest {
	s.MonitorStatus = &v
	return s
}

func (s *DescribeLoanTaskListRequest) SetPageSize(v string) *DescribeLoanTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLoanTaskListRequest) SetRegId(v string) *DescribeLoanTaskListRequest {
	s.RegId = &v
	return s
}

type DescribeLoanTaskListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	TotalItem    *int32  `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32  `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeLoanTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoanTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoanTaskListResponseBody) SetRequestId(v string) *DescribeLoanTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoanTaskListResponseBody) SetCurrentPage(v int32) *DescribeLoanTaskListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeLoanTaskListResponseBody) SetPageSize(v int32) *DescribeLoanTaskListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoanTaskListResponseBody) SetResultObject(v bool) *DescribeLoanTaskListResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeLoanTaskListResponseBody) SetTotalItem(v int32) *DescribeLoanTaskListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeLoanTaskListResponseBody) SetTotalPage(v int32) *DescribeLoanTaskListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLoanTaskListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoanTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoanTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoanTaskListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoanTaskListResponse) SetHeaders(v map[string]*string) *DescribeLoanTaskListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoanTaskListResponse) SetStatusCode(v int32) *DescribeLoanTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoanTaskListResponse) SetBody(v *DescribeLoanTaskListResponseBody) *DescribeLoanTaskListResponse {
	s.Body = v
	return s
}

type DescribeMarkPageRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Direction   *string `json:"direction,omitempty" xml:"direction,omitempty"`
	IsPage      *bool   `json:"isPage,omitempty" xml:"isPage,omitempty"`
	Order       *string `json:"order,omitempty" xml:"order,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TaskLogId   *string `json:"taskLogId,omitempty" xml:"taskLogId,omitempty"`
}

func (s DescribeMarkPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarkPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMarkPageRequest) SetLang(v string) *DescribeMarkPageRequest {
	s.Lang = &v
	return s
}

func (s *DescribeMarkPageRequest) SetCurrentPage(v string) *DescribeMarkPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeMarkPageRequest) SetDirection(v string) *DescribeMarkPageRequest {
	s.Direction = &v
	return s
}

func (s *DescribeMarkPageRequest) SetIsPage(v bool) *DescribeMarkPageRequest {
	s.IsPage = &v
	return s
}

func (s *DescribeMarkPageRequest) SetOrder(v string) *DescribeMarkPageRequest {
	s.Order = &v
	return s
}

func (s *DescribeMarkPageRequest) SetPageSize(v string) *DescribeMarkPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMarkPageRequest) SetRegId(v string) *DescribeMarkPageRequest {
	s.RegId = &v
	return s
}

func (s *DescribeMarkPageRequest) SetTaskLogId(v string) *DescribeMarkPageRequest {
	s.TaskLogId = &v
	return s
}

type DescribeMarkPageResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                      `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                      `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeMarkPageResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                      `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                      `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeMarkPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarkPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMarkPageResponseBody) SetRequestId(v string) *DescribeMarkPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMarkPageResponseBody) SetCurrentPage(v int32) *DescribeMarkPageResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeMarkPageResponseBody) SetPageSize(v int32) *DescribeMarkPageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMarkPageResponseBody) SetResultObject(v []*DescribeMarkPageResponseBodyResultObject) *DescribeMarkPageResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeMarkPageResponseBody) SetTotalItem(v int32) *DescribeMarkPageResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeMarkPageResponseBody) SetTotalPage(v int32) *DescribeMarkPageResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeMarkPageResponseBodyResultObject struct {
	FieldName  *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
	Id         *int64  `json:"id,omitempty" xml:"id,omitempty"`
	MarkType   *string `json:"markType,omitempty" xml:"markType,omitempty"`
}

func (s DescribeMarkPageResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarkPageResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeMarkPageResponseBodyResultObject) SetFieldName(v string) *DescribeMarkPageResponseBodyResultObject {
	s.FieldName = &v
	return s
}

func (s *DescribeMarkPageResponseBodyResultObject) SetFieldValue(v string) *DescribeMarkPageResponseBodyResultObject {
	s.FieldValue = &v
	return s
}

func (s *DescribeMarkPageResponseBodyResultObject) SetId(v int64) *DescribeMarkPageResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeMarkPageResponseBodyResultObject) SetMarkType(v string) *DescribeMarkPageResponseBodyResultObject {
	s.MarkType = &v
	return s
}

type DescribeMarkPageResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMarkPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMarkPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarkPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMarkPageResponse) SetHeaders(v map[string]*string) *DescribeMarkPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMarkPageResponse) SetStatusCode(v int32) *DescribeMarkPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMarkPageResponse) SetBody(v *DescribeMarkPageResponseBody) *DescribeMarkPageResponse {
	s.Body = v
	return s
}

type DescribeMenuPermissionRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PermissionType *string `json:"permissionType,omitempty" xml:"permissionType,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeMenuPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMenuPermissionRequest) GoString() string {
	return s.String()
}

func (s *DescribeMenuPermissionRequest) SetLang(v string) *DescribeMenuPermissionRequest {
	s.Lang = &v
	return s
}

func (s *DescribeMenuPermissionRequest) SetPermissionType(v string) *DescribeMenuPermissionRequest {
	s.PermissionType = &v
	return s
}

func (s *DescribeMenuPermissionRequest) SetRegId(v string) *DescribeMenuPermissionRequest {
	s.RegId = &v
	return s
}

type DescribeMenuPermissionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeMenuPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMenuPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMenuPermissionResponseBody) SetRequestId(v string) *DescribeMenuPermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMenuPermissionResponseBody) SetResultObject(v bool) *DescribeMenuPermissionResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeMenuPermissionResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMenuPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMenuPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMenuPermissionResponse) GoString() string {
	return s.String()
}

func (s *DescribeMenuPermissionResponse) SetHeaders(v map[string]*string) *DescribeMenuPermissionResponse {
	s.Headers = v
	return s
}

func (s *DescribeMenuPermissionResponse) SetStatusCode(v int32) *DescribeMenuPermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMenuPermissionResponse) SetBody(v *DescribeMenuPermissionResponseBody) *DescribeMenuPermissionResponse {
	s.Body = v
	return s
}

type DescribeMonitorTaskLimitRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeMonitorTaskLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorTaskLimitRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorTaskLimitRequest) SetLang(v string) *DescribeMonitorTaskLimitRequest {
	s.Lang = &v
	return s
}

func (s *DescribeMonitorTaskLimitRequest) SetRegId(v string) *DescribeMonitorTaskLimitRequest {
	s.RegId = &v
	return s
}

type DescribeMonitorTaskLimitResponseBody struct {
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeMonitorTaskLimitResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeMonitorTaskLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorTaskLimitResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorTaskLimitResponseBody) SetRequestId(v string) *DescribeMonitorTaskLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorTaskLimitResponseBody) SetResultObject(v *DescribeMonitorTaskLimitResponseBodyResultObject) *DescribeMonitorTaskLimitResponseBody {
	s.ResultObject = v
	return s
}

type DescribeMonitorTaskLimitResponseBodyResultObject struct {
	Limit        *bool  `json:"limit,omitempty" xml:"limit,omitempty"`
	MaxTotalItem *int32 `json:"maxTotalItem,omitempty" xml:"maxTotalItem,omitempty"`
	TotalItem    *int32 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
}

func (s DescribeMonitorTaskLimitResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorTaskLimitResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeMonitorTaskLimitResponseBodyResultObject) SetLimit(v bool) *DescribeMonitorTaskLimitResponseBodyResultObject {
	s.Limit = &v
	return s
}

func (s *DescribeMonitorTaskLimitResponseBodyResultObject) SetMaxTotalItem(v int32) *DescribeMonitorTaskLimitResponseBodyResultObject {
	s.MaxTotalItem = &v
	return s
}

func (s *DescribeMonitorTaskLimitResponseBodyResultObject) SetTotalItem(v int32) *DescribeMonitorTaskLimitResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

type DescribeMonitorTaskLimitResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorTaskLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorTaskLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorTaskLimitResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorTaskLimitResponse) SetHeaders(v map[string]*string) *DescribeMonitorTaskLimitResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorTaskLimitResponse) SetStatusCode(v int32) *DescribeMonitorTaskLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorTaskLimitResponse) SetBody(v *DescribeMonitorTaskLimitResponseBody) *DescribeMonitorTaskLimitResponse {
	s.Body = v
	return s
}

type DescribeNameListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Value       *string `json:"value,omitempty" xml:"value,omitempty"`
	VariableId  *string `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s DescribeNameListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListRequest) GoString() string {
	return s.String()
}

func (s *DescribeNameListRequest) SetLang(v string) *DescribeNameListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeNameListRequest) SetCreateType(v string) *DescribeNameListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeNameListRequest) SetCurrentPage(v string) *DescribeNameListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNameListRequest) SetPageSize(v string) *DescribeNameListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNameListRequest) SetRegId(v string) *DescribeNameListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeNameListRequest) SetValue(v string) *DescribeNameListRequest {
	s.Value = &v
	return s
}

func (s *DescribeNameListRequest) SetVariableId(v string) *DescribeNameListRequest {
	s.VariableId = &v
	return s
}

type DescribeNameListResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                      `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                      `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeNameListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                      `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                      `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeNameListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNameListResponseBody) SetRequestId(v string) *DescribeNameListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNameListResponseBody) SetCurrentPage(v int32) *DescribeNameListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNameListResponseBody) SetPageSize(v int32) *DescribeNameListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNameListResponseBody) SetResultObject(v []*DescribeNameListResponseBodyResultObject) *DescribeNameListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeNameListResponseBody) SetTotalItem(v int32) *DescribeNameListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeNameListResponseBody) SetTotalPage(v int32) *DescribeNameListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeNameListResponseBodyResultObject struct {
	GmtCreate   *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Identifier  *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Value       *string `json:"value,omitempty" xml:"value,omitempty"`
	VariableId  *int64  `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s DescribeNameListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeNameListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeNameListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeNameListResponseBodyResultObject) SetGmtModified(v int64) *DescribeNameListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeNameListResponseBodyResultObject) SetId(v int64) *DescribeNameListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeNameListResponseBodyResultObject) SetIdentifier(v string) *DescribeNameListResponseBodyResultObject {
	s.Identifier = &v
	return s
}

func (s *DescribeNameListResponseBodyResultObject) SetTitle(v string) *DescribeNameListResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeNameListResponseBodyResultObject) SetValue(v string) *DescribeNameListResponseBodyResultObject {
	s.Value = &v
	return s
}

func (s *DescribeNameListResponseBodyResultObject) SetVariableId(v int64) *DescribeNameListResponseBodyResultObject {
	s.VariableId = &v
	return s
}

type DescribeNameListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNameListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNameListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListResponse) GoString() string {
	return s.String()
}

func (s *DescribeNameListResponse) SetHeaders(v map[string]*string) *DescribeNameListResponse {
	s.Headers = v
	return s
}

func (s *DescribeNameListResponse) SetStatusCode(v int32) *DescribeNameListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNameListResponse) SetBody(v *DescribeNameListResponseBody) *DescribeNameListResponse {
	s.Body = v
	return s
}

type DescribeNameListDownloadUrlRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	VariableId *int64 `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s DescribeNameListDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeNameListDownloadUrlRequest) SetLang(v string) *DescribeNameListDownloadUrlRequest {
	s.Lang = &v
	return s
}

func (s *DescribeNameListDownloadUrlRequest) SetRegId(v string) *DescribeNameListDownloadUrlRequest {
	s.RegId = &v
	return s
}

func (s *DescribeNameListDownloadUrlRequest) SetVariableId(v int64) *DescribeNameListDownloadUrlRequest {
	s.VariableId = &v
	return s
}

type DescribeNameListDownloadUrlResponseBody struct {
	RequestId    *string                                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeNameListDownloadUrlResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeNameListDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNameListDownloadUrlResponseBody) SetRequestId(v string) *DescribeNameListDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNameListDownloadUrlResponseBody) SetResultObject(v *DescribeNameListDownloadUrlResponseBodyResultObject) *DescribeNameListDownloadUrlResponseBody {
	s.ResultObject = v
	return s
}

type DescribeNameListDownloadUrlResponseBodyResultObject struct {
	DownloadFileUrl *string `json:"downloadFileUrl,omitempty" xml:"downloadFileUrl,omitempty"`
}

func (s DescribeNameListDownloadUrlResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListDownloadUrlResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeNameListDownloadUrlResponseBodyResultObject) SetDownloadFileUrl(v string) *DescribeNameListDownloadUrlResponseBodyResultObject {
	s.DownloadFileUrl = &v
	return s
}

type DescribeNameListDownloadUrlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNameListDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNameListDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeNameListDownloadUrlResponse) SetHeaders(v map[string]*string) *DescribeNameListDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeNameListDownloadUrlResponse) SetStatusCode(v int32) *DescribeNameListDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNameListDownloadUrlResponse) SetBody(v *DescribeNameListDownloadUrlResponseBody) *DescribeNameListDownloadUrlResponse {
	s.Body = v
	return s
}

type DescribeNameListLimitRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeNameListLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListLimitRequest) GoString() string {
	return s.String()
}

func (s *DescribeNameListLimitRequest) SetLang(v string) *DescribeNameListLimitRequest {
	s.Lang = &v
	return s
}

func (s *DescribeNameListLimitRequest) SetCreateType(v string) *DescribeNameListLimitRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeNameListLimitRequest) SetRegId(v string) *DescribeNameListLimitRequest {
	s.RegId = &v
	return s
}

type DescribeNameListLimitResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeNameListLimitResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeNameListLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListLimitResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNameListLimitResponseBody) SetRequestId(v string) *DescribeNameListLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNameListLimitResponseBody) SetResultObject(v *DescribeNameListLimitResponseBodyResultObject) *DescribeNameListLimitResponseBody {
	s.ResultObject = v
	return s
}

type DescribeNameListLimitResponseBodyResultObject struct {
	Limit        *bool  `json:"limit,omitempty" xml:"limit,omitempty"`
	MaxTotalItem *int64 `json:"maxTotalItem,omitempty" xml:"maxTotalItem,omitempty"`
	TotalItem    *int64 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
}

func (s DescribeNameListLimitResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListLimitResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeNameListLimitResponseBodyResultObject) SetLimit(v bool) *DescribeNameListLimitResponseBodyResultObject {
	s.Limit = &v
	return s
}

func (s *DescribeNameListLimitResponseBodyResultObject) SetMaxTotalItem(v int64) *DescribeNameListLimitResponseBodyResultObject {
	s.MaxTotalItem = &v
	return s
}

func (s *DescribeNameListLimitResponseBodyResultObject) SetTotalItem(v int64) *DescribeNameListLimitResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

type DescribeNameListLimitResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNameListLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNameListLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListLimitResponse) GoString() string {
	return s.String()
}

func (s *DescribeNameListLimitResponse) SetHeaders(v map[string]*string) *DescribeNameListLimitResponse {
	s.Headers = v
	return s
}

func (s *DescribeNameListLimitResponse) SetStatusCode(v int32) *DescribeNameListLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNameListLimitResponse) SetBody(v *DescribeNameListLimitResponseBody) *DescribeNameListLimitResponse {
	s.Body = v
	return s
}

type DescribeNameListPageListRequest struct {
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage     *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize        *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	UpdateBeginTime *int64  `json:"updateBeginTime,omitempty" xml:"updateBeginTime,omitempty"`
	UpdateEndTime   *int64  `json:"updateEndTime,omitempty" xml:"updateEndTime,omitempty"`
	Value           *string `json:"value,omitempty" xml:"value,omitempty"`
	// This parameter is required.
	VariableId *int64 `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s DescribeNameListPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeNameListPageListRequest) SetLang(v string) *DescribeNameListPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeNameListPageListRequest) SetCurrentPage(v int32) *DescribeNameListPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNameListPageListRequest) SetPageSize(v int32) *DescribeNameListPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNameListPageListRequest) SetRegId(v string) *DescribeNameListPageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeNameListPageListRequest) SetUpdateBeginTime(v int64) *DescribeNameListPageListRequest {
	s.UpdateBeginTime = &v
	return s
}

func (s *DescribeNameListPageListRequest) SetUpdateEndTime(v int64) *DescribeNameListPageListRequest {
	s.UpdateEndTime = &v
	return s
}

func (s *DescribeNameListPageListRequest) SetValue(v string) *DescribeNameListPageListRequest {
	s.Value = &v
	return s
}

func (s *DescribeNameListPageListRequest) SetVariableId(v int64) *DescribeNameListPageListRequest {
	s.VariableId = &v
	return s
}

type DescribeNameListPageListResponseBody struct {
	CurrentPage  *string                                             `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *string                                             `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RequestId    *string                                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeNameListPageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *string                                             `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *string                                             `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeNameListPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNameListPageListResponseBody) SetCurrentPage(v string) *DescribeNameListPageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNameListPageListResponseBody) SetPageSize(v string) *DescribeNameListPageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNameListPageListResponseBody) SetRequestId(v string) *DescribeNameListPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNameListPageListResponseBody) SetResultObject(v []*DescribeNameListPageListResponseBodyResultObject) *DescribeNameListPageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeNameListPageListResponseBody) SetTotalItem(v string) *DescribeNameListPageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeNameListPageListResponseBody) SetTotalPage(v string) *DescribeNameListPageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeNameListPageListResponseBodyResultObject struct {
	GmtCreate    *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified  *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id           *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name         *string `json:"name,omitempty" xml:"name,omitempty"`
	NameListType *string `json:"nameListType,omitempty" xml:"nameListType,omitempty"`
	Title        *string `json:"title,omitempty" xml:"title,omitempty"`
	UserId       *string `json:"userId,omitempty" xml:"userId,omitempty"`
	Value        *string `json:"value,omitempty" xml:"value,omitempty"`
	VariableId   *int64  `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s DescribeNameListPageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListPageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeNameListPageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeNameListPageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetId(v int64) *DescribeNameListPageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetName(v string) *DescribeNameListPageListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetNameListType(v string) *DescribeNameListPageListResponseBodyResultObject {
	s.NameListType = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetTitle(v string) *DescribeNameListPageListResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetUserId(v string) *DescribeNameListPageListResponseBodyResultObject {
	s.UserId = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetValue(v string) *DescribeNameListPageListResponseBodyResultObject {
	s.Value = &v
	return s
}

func (s *DescribeNameListPageListResponseBodyResultObject) SetVariableId(v int64) *DescribeNameListPageListResponseBodyResultObject {
	s.VariableId = &v
	return s
}

type DescribeNameListPageListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNameListPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNameListPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeNameListPageListResponse) SetHeaders(v map[string]*string) *DescribeNameListPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeNameListPageListResponse) SetStatusCode(v int32) *DescribeNameListPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNameListPageListResponse) SetBody(v *DescribeNameListPageListResponseBody) *DescribeNameListPageListResponse {
	s.Body = v
	return s
}

type DescribeNameListTypeListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeNameListTypeListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListTypeListRequest) GoString() string {
	return s.String()
}

func (s *DescribeNameListTypeListRequest) SetLang(v string) *DescribeNameListTypeListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeNameListTypeListRequest) SetRegId(v string) *DescribeNameListTypeListRequest {
	s.RegId = &v
	return s
}

type DescribeNameListTypeListResponseBody struct {
	RequestId    *string                                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeNameListTypeListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeNameListTypeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListTypeListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNameListTypeListResponseBody) SetRequestId(v string) *DescribeNameListTypeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNameListTypeListResponseBody) SetResultObject(v []*DescribeNameListTypeListResponseBodyResultObject) *DescribeNameListTypeListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeNameListTypeListResponseBodyResultObject struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeNameListTypeListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListTypeListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeNameListTypeListResponseBodyResultObject) SetKey(v string) *DescribeNameListTypeListResponseBodyResultObject {
	s.Key = &v
	return s
}

func (s *DescribeNameListTypeListResponseBodyResultObject) SetValue(v string) *DescribeNameListTypeListResponseBodyResultObject {
	s.Value = &v
	return s
}

type DescribeNameListTypeListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNameListTypeListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNameListTypeListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListTypeListResponse) GoString() string {
	return s.String()
}

func (s *DescribeNameListTypeListResponse) SetHeaders(v map[string]*string) *DescribeNameListTypeListResponse {
	s.Headers = v
	return s
}

func (s *DescribeNameListTypeListResponse) SetStatusCode(v int32) *DescribeNameListTypeListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNameListTypeListResponse) SetBody(v *DescribeNameListTypeListResponseBody) *DescribeNameListTypeListResponse {
	s.Body = v
	return s
}

type DescribeNameListVariablePageListRequest struct {
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage  *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Name         *string `json:"name,omitempty" xml:"name,omitempty"`
	NameListType *string `json:"nameListType,omitempty" xml:"nameListType,omitempty"`
	PageSize     *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Value        *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeNameListVariablePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListVariablePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeNameListVariablePageListRequest) SetLang(v string) *DescribeNameListVariablePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeNameListVariablePageListRequest) SetCurrentPage(v int32) *DescribeNameListVariablePageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNameListVariablePageListRequest) SetName(v string) *DescribeNameListVariablePageListRequest {
	s.Name = &v
	return s
}

func (s *DescribeNameListVariablePageListRequest) SetNameListType(v string) *DescribeNameListVariablePageListRequest {
	s.NameListType = &v
	return s
}

func (s *DescribeNameListVariablePageListRequest) SetPageSize(v int32) *DescribeNameListVariablePageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNameListVariablePageListRequest) SetRegId(v string) *DescribeNameListVariablePageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeNameListVariablePageListRequest) SetValue(v string) *DescribeNameListVariablePageListRequest {
	s.Value = &v
	return s
}

type DescribeNameListVariablePageListResponseBody struct {
	CurrentPage  *int32                                                      `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                                      `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RequestId    *string                                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeNameListVariablePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                                      `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                                      `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeNameListVariablePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListVariablePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNameListVariablePageListResponseBody) SetCurrentPage(v int32) *DescribeNameListVariablePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBody) SetPageSize(v int32) *DescribeNameListVariablePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBody) SetRequestId(v string) *DescribeNameListVariablePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBody) SetResultObject(v []*DescribeNameListVariablePageListResponseBodyResultObject) *DescribeNameListVariablePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeNameListVariablePageListResponseBody) SetTotalItem(v int32) *DescribeNameListVariablePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBody) SetTotalPage(v int32) *DescribeNameListVariablePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeNameListVariablePageListResponseBodyResultObject struct {
	Capacity     *int64  `json:"capacity,omitempty" xml:"capacity,omitempty"`
	Description  *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtCreate    *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified  *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id           *int64  `json:"id,omitempty" xml:"id,omitempty"`
	LeftCapacity *int64  `json:"leftCapacity,omitempty" xml:"leftCapacity,omitempty"`
	Name         *string `json:"name,omitempty" xml:"name,omitempty"`
	NameListType *string `json:"nameListType,omitempty" xml:"nameListType,omitempty"`
	RefObjId     *string `json:"refObjId,omitempty" xml:"refObjId,omitempty"`
	RefObjType   *int64  `json:"refObjType,omitempty" xml:"refObjType,omitempty"`
	SourceType   *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title        *string `json:"title,omitempty" xml:"title,omitempty"`
	Type         *string `json:"type,omitempty" xml:"type,omitempty"`
	UserId       *int64  `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s DescribeNameListVariablePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListVariablePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetCapacity(v int64) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.Capacity = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetDescription(v string) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetId(v int64) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetLeftCapacity(v int64) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.LeftCapacity = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetName(v string) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetNameListType(v string) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.NameListType = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetRefObjId(v string) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.RefObjId = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetRefObjType(v int64) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.RefObjType = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetSourceType(v string) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.SourceType = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetTitle(v string) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetType(v string) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.Type = &v
	return s
}

func (s *DescribeNameListVariablePageListResponseBodyResultObject) SetUserId(v int64) *DescribeNameListVariablePageListResponseBodyResultObject {
	s.UserId = &v
	return s
}

type DescribeNameListVariablePageListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNameListVariablePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNameListVariablePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNameListVariablePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeNameListVariablePageListResponse) SetHeaders(v map[string]*string) *DescribeNameListVariablePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeNameListVariablePageListResponse) SetStatusCode(v int32) *DescribeNameListVariablePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNameListVariablePageListResponse) SetBody(v *DescribeNameListVariablePageListResponseBody) *DescribeNameListVariablePageListResponse {
	s.Body = v
	return s
}

type DescribeOperationLogPageListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EndDate     *int64  `json:"endDate,omitempty" xml:"endDate,omitempty"`
	PageSize    *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	StartDate   *int64  `json:"startDate,omitempty" xml:"startDate,omitempty"`
}

func (s DescribeOperationLogPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperationLogPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeOperationLogPageListRequest) SetLang(v string) *DescribeOperationLogPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeOperationLogPageListRequest) SetCurrentPage(v int32) *DescribeOperationLogPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOperationLogPageListRequest) SetEndDate(v int64) *DescribeOperationLogPageListRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeOperationLogPageListRequest) SetPageSize(v int32) *DescribeOperationLogPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeOperationLogPageListRequest) SetRegId(v string) *DescribeOperationLogPageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeOperationLogPageListRequest) SetStartDate(v int64) *DescribeOperationLogPageListRequest {
	s.StartDate = &v
	return s
}

type DescribeOperationLogPageListResponseBody struct {
	RequestId    *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                                  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                                  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeOperationLogPageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                                  `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                                  `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeOperationLogPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperationLogPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOperationLogPageListResponseBody) SetRequestId(v string) *DescribeOperationLogPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBody) SetCurrentPage(v int32) *DescribeOperationLogPageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBody) SetPageSize(v int32) *DescribeOperationLogPageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBody) SetResultObject(v []*DescribeOperationLogPageListResponseBodyResultObject) *DescribeOperationLogPageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeOperationLogPageListResponseBody) SetTotalItem(v int32) *DescribeOperationLogPageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBody) SetTotalPage(v int32) *DescribeOperationLogPageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeOperationLogPageListResponseBodyResultObject struct {
	ClientIp         *string `json:"clientIp,omitempty" xml:"clientIp,omitempty"`
	GmtCreate        *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	NewContent       *string `json:"newContent,omitempty" xml:"newContent,omitempty"`
	OldContent       *string `json:"oldContent,omitempty" xml:"oldContent,omitempty"`
	OperationSummary *string `json:"operationSummary,omitempty" xml:"operationSummary,omitempty"`
	OperationType    *string `json:"operationType,omitempty" xml:"operationType,omitempty"`
	UserName         *string `json:"userName,omitempty" xml:"userName,omitempty"`
}

func (s DescribeOperationLogPageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperationLogPageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeOperationLogPageListResponseBodyResultObject) SetClientIp(v string) *DescribeOperationLogPageListResponseBodyResultObject {
	s.ClientIp = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeOperationLogPageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBodyResultObject) SetNewContent(v string) *DescribeOperationLogPageListResponseBodyResultObject {
	s.NewContent = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBodyResultObject) SetOldContent(v string) *DescribeOperationLogPageListResponseBodyResultObject {
	s.OldContent = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBodyResultObject) SetOperationSummary(v string) *DescribeOperationLogPageListResponseBodyResultObject {
	s.OperationSummary = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBodyResultObject) SetOperationType(v string) *DescribeOperationLogPageListResponseBodyResultObject {
	s.OperationType = &v
	return s
}

func (s *DescribeOperationLogPageListResponseBodyResultObject) SetUserName(v string) *DescribeOperationLogPageListResponseBodyResultObject {
	s.UserName = &v
	return s
}

type DescribeOperationLogPageListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOperationLogPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOperationLogPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperationLogPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeOperationLogPageListResponse) SetHeaders(v map[string]*string) *DescribeOperationLogPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeOperationLogPageListResponse) SetStatusCode(v int32) *DescribeOperationLogPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOperationLogPageListResponse) SetBody(v *DescribeOperationLogPageListResponseBody) *DescribeOperationLogPageListResponse {
	s.Body = v
	return s
}

type DescribeOperatorListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeOperatorListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListRequest) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListRequest) SetLang(v string) *DescribeOperatorListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeOperatorListRequest) SetRegId(v string) *DescribeOperatorListRequest {
	s.RegId = &v
	return s
}

type DescribeOperatorListResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeOperatorListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListResponseBody) SetRequestId(v string) *DescribeOperatorListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOperatorListResponseBody) SetResultObject(v []*DescribeOperatorListResponseBodyResultObject) *DescribeOperatorListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeOperatorListResponseBodyResultObject struct {
	FieldType *string                                                  `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Operators []*DescribeOperatorListResponseBodyResultObjectOperators `json:"operators,omitempty" xml:"operators,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListResponseBodyResultObject) SetFieldType(v string) *DescribeOperatorListResponseBodyResultObject {
	s.FieldType = &v
	return s
}

func (s *DescribeOperatorListResponseBodyResultObject) SetOperators(v []*DescribeOperatorListResponseBodyResultObjectOperators) *DescribeOperatorListResponseBodyResultObject {
	s.Operators = v
	return s
}

type DescribeOperatorListResponseBodyResultObjectOperators struct {
	Code             *string                                                                `json:"code,omitempty" xml:"code,omitempty"`
	HasRightVariable *bool                                                                  `json:"hasRightVariable,omitempty" xml:"hasRightVariable,omitempty"`
	Memo             *string                                                                `json:"memo,omitempty" xml:"memo,omitempty"`
	Name             *string                                                                `json:"name,omitempty" xml:"name,omitempty"`
	RightVariables   []*DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables `json:"rightVariables,omitempty" xml:"rightVariables,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListResponseBodyResultObjectOperators) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListResponseBodyResultObjectOperators) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListResponseBodyResultObjectOperators) SetCode(v string) *DescribeOperatorListResponseBodyResultObjectOperators {
	s.Code = &v
	return s
}

func (s *DescribeOperatorListResponseBodyResultObjectOperators) SetHasRightVariable(v bool) *DescribeOperatorListResponseBodyResultObjectOperators {
	s.HasRightVariable = &v
	return s
}

func (s *DescribeOperatorListResponseBodyResultObjectOperators) SetMemo(v string) *DescribeOperatorListResponseBodyResultObjectOperators {
	s.Memo = &v
	return s
}

func (s *DescribeOperatorListResponseBodyResultObjectOperators) SetName(v string) *DescribeOperatorListResponseBodyResultObjectOperators {
	s.Name = &v
	return s
}

func (s *DescribeOperatorListResponseBodyResultObjectOperators) SetRightVariables(v []*DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables) *DescribeOperatorListResponseBodyResultObjectOperators {
	s.RightVariables = v
	return s
}

type DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables struct {
	FieldName  *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldType  *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
}

func (s DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables) SetFieldName(v string) *DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables {
	s.FieldName = &v
	return s
}

func (s *DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables) SetFieldType(v string) *DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables) SetFieldValue(v string) *DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables {
	s.FieldValue = &v
	return s
}

type DescribeOperatorListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOperatorListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOperatorListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListResponse) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListResponse) SetHeaders(v map[string]*string) *DescribeOperatorListResponse {
	s.Headers = v
	return s
}

func (s *DescribeOperatorListResponse) SetStatusCode(v int32) *DescribeOperatorListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOperatorListResponse) SetBody(v *DescribeOperatorListResponseBody) *DescribeOperatorListResponse {
	s.Body = v
	return s
}

type DescribeOperatorListBySceneRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s DescribeOperatorListBySceneRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListBySceneRequest) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListBySceneRequest) SetLang(v string) *DescribeOperatorListBySceneRequest {
	s.Lang = &v
	return s
}

func (s *DescribeOperatorListBySceneRequest) SetRegId(v string) *DescribeOperatorListBySceneRequest {
	s.RegId = &v
	return s
}

func (s *DescribeOperatorListBySceneRequest) SetScene(v string) *DescribeOperatorListBySceneRequest {
	s.Scene = &v
	return s
}

type DescribeOperatorListBySceneResponseBody struct {
	RequestId    *string                                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeOperatorListBySceneResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListBySceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListBySceneResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListBySceneResponseBody) SetRequestId(v string) *DescribeOperatorListBySceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBody) SetResultObject(v []*DescribeOperatorListBySceneResponseBodyResultObject) *DescribeOperatorListBySceneResponseBody {
	s.ResultObject = v
	return s
}

type DescribeOperatorListBySceneResponseBodyResultObject struct {
	FieldType *string                                                         `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Operators []*DescribeOperatorListBySceneResponseBodyResultObjectOperators `json:"operators,omitempty" xml:"operators,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListBySceneResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListBySceneResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListBySceneResponseBodyResultObject) SetFieldType(v string) *DescribeOperatorListBySceneResponseBodyResultObject {
	s.FieldType = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBodyResultObject) SetOperators(v []*DescribeOperatorListBySceneResponseBodyResultObjectOperators) *DescribeOperatorListBySceneResponseBodyResultObject {
	s.Operators = v
	return s
}

type DescribeOperatorListBySceneResponseBodyResultObjectOperators struct {
	Code             *string                                                                       `json:"code,omitempty" xml:"code,omitempty"`
	HasRightVariable *bool                                                                         `json:"hasRightVariable,omitempty" xml:"hasRightVariable,omitempty"`
	Memo             *string                                                                       `json:"memo,omitempty" xml:"memo,omitempty"`
	Name             *string                                                                       `json:"name,omitempty" xml:"name,omitempty"`
	RightVariables   []*DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables `json:"rightVariables,omitempty" xml:"rightVariables,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListBySceneResponseBodyResultObjectOperators) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListBySceneResponseBodyResultObjectOperators) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperators) SetCode(v string) *DescribeOperatorListBySceneResponseBodyResultObjectOperators {
	s.Code = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperators) SetHasRightVariable(v bool) *DescribeOperatorListBySceneResponseBodyResultObjectOperators {
	s.HasRightVariable = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperators) SetMemo(v string) *DescribeOperatorListBySceneResponseBodyResultObjectOperators {
	s.Memo = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperators) SetName(v string) *DescribeOperatorListBySceneResponseBodyResultObjectOperators {
	s.Name = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperators) SetRightVariables(v []*DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables) *DescribeOperatorListBySceneResponseBodyResultObjectOperators {
	s.RightVariables = v
	return s
}

type DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables struct {
	FieldName  *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldType  *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
}

func (s DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables) SetFieldName(v string) *DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables {
	s.FieldName = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables) SetFieldType(v string) *DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables {
	s.FieldType = &v
	return s
}

func (s *DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables) SetFieldValue(v string) *DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables {
	s.FieldValue = &v
	return s
}

type DescribeOperatorListBySceneResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOperatorListBySceneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOperatorListBySceneResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListBySceneResponse) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListBySceneResponse) SetHeaders(v map[string]*string) *DescribeOperatorListBySceneResponse {
	s.Headers = v
	return s
}

func (s *DescribeOperatorListBySceneResponse) SetStatusCode(v int32) *DescribeOperatorListBySceneResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOperatorListBySceneResponse) SetBody(v *DescribeOperatorListBySceneResponseBody) *DescribeOperatorListBySceneResponse {
	s.Body = v
	return s
}

type DescribeOperatorListByTypeRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeOperatorListByTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListByTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListByTypeRequest) SetLang(v string) *DescribeOperatorListByTypeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeOperatorListByTypeRequest) SetRegId(v string) *DescribeOperatorListByTypeRequest {
	s.RegId = &v
	return s
}

type DescribeOperatorListByTypeResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeOperatorListByTypeResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListByTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListByTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListByTypeResponseBody) SetRequestId(v string) *DescribeOperatorListByTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOperatorListByTypeResponseBody) SetResultObject(v []*DescribeOperatorListByTypeResponseBodyResultObject) *DescribeOperatorListByTypeResponseBody {
	s.ResultObject = v
	return s
}

type DescribeOperatorListByTypeResponseBodyResultObject struct {
	FieldType *string                                                        `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Operators []*DescribeOperatorListByTypeResponseBodyResultObjectOperators `json:"operators,omitempty" xml:"operators,omitempty" type:"Repeated"`
}

func (s DescribeOperatorListByTypeResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListByTypeResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListByTypeResponseBodyResultObject) SetFieldType(v string) *DescribeOperatorListByTypeResponseBodyResultObject {
	s.FieldType = &v
	return s
}

func (s *DescribeOperatorListByTypeResponseBodyResultObject) SetOperators(v []*DescribeOperatorListByTypeResponseBodyResultObjectOperators) *DescribeOperatorListByTypeResponseBodyResultObject {
	s.Operators = v
	return s
}

type DescribeOperatorListByTypeResponseBodyResultObjectOperators struct {
	Code             *string `json:"code,omitempty" xml:"code,omitempty"`
	HasRightVariable *bool   `json:"hasRightVariable,omitempty" xml:"hasRightVariable,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeOperatorListByTypeResponseBodyResultObjectOperators) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListByTypeResponseBodyResultObjectOperators) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListByTypeResponseBodyResultObjectOperators) SetCode(v string) *DescribeOperatorListByTypeResponseBodyResultObjectOperators {
	s.Code = &v
	return s
}

func (s *DescribeOperatorListByTypeResponseBodyResultObjectOperators) SetHasRightVariable(v bool) *DescribeOperatorListByTypeResponseBodyResultObjectOperators {
	s.HasRightVariable = &v
	return s
}

func (s *DescribeOperatorListByTypeResponseBodyResultObjectOperators) SetName(v string) *DescribeOperatorListByTypeResponseBodyResultObjectOperators {
	s.Name = &v
	return s
}

type DescribeOperatorListByTypeResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOperatorListByTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOperatorListByTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOperatorListByTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeOperatorListByTypeResponse) SetHeaders(v map[string]*string) *DescribeOperatorListByTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeOperatorListByTypeResponse) SetStatusCode(v int32) *DescribeOperatorListByTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOperatorListByTypeResponse) SetBody(v *DescribeOperatorListByTypeResponseBody) *DescribeOperatorListByTypeResponse {
	s.Body = v
	return s
}

type DescribeOssAuthStatusRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeOssAuthStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssAuthStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssAuthStatusRequest) SetLang(v string) *DescribeOssAuthStatusRequest {
	s.Lang = &v
	return s
}

func (s *DescribeOssAuthStatusRequest) SetRegId(v string) *DescribeOssAuthStatusRequest {
	s.RegId = &v
	return s
}

type DescribeOssAuthStatusResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *string `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeOssAuthStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssAuthStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOssAuthStatusResponseBody) SetRequestId(v string) *DescribeOssAuthStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOssAuthStatusResponseBody) SetResultObject(v string) *DescribeOssAuthStatusResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeOssAuthStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOssAuthStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOssAuthStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssAuthStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssAuthStatusResponse) SetHeaders(v map[string]*string) *DescribeOssAuthStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeOssAuthStatusResponse) SetStatusCode(v int32) *DescribeOssAuthStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOssAuthStatusResponse) SetBody(v *DescribeOssAuthStatusResponseBody) *DescribeOssAuthStatusResponse {
	s.Body = v
	return s
}

type DescribeOssPolicyRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s DescribeOssPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssPolicyRequest) SetLang(v string) *DescribeOssPolicyRequest {
	s.Lang = &v
	return s
}

func (s *DescribeOssPolicyRequest) SetRegId(v string) *DescribeOssPolicyRequest {
	s.RegId = &v
	return s
}

func (s *DescribeOssPolicyRequest) SetScene(v string) *DescribeOssPolicyRequest {
	s.Scene = &v
	return s
}

type DescribeOssPolicyResponseBody struct {
	AccessId  *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Key       *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s DescribeOssPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOssPolicyResponseBody) SetAccessId(v string) *DescribeOssPolicyResponseBody {
	s.AccessId = &v
	return s
}

func (s *DescribeOssPolicyResponseBody) SetHost(v string) *DescribeOssPolicyResponseBody {
	s.Host = &v
	return s
}

func (s *DescribeOssPolicyResponseBody) SetKey(v string) *DescribeOssPolicyResponseBody {
	s.Key = &v
	return s
}

func (s *DescribeOssPolicyResponseBody) SetPolicy(v string) *DescribeOssPolicyResponseBody {
	s.Policy = &v
	return s
}

func (s *DescribeOssPolicyResponseBody) SetSignature(v string) *DescribeOssPolicyResponseBody {
	s.Signature = &v
	return s
}

func (s *DescribeOssPolicyResponseBody) SetRequestId(v string) *DescribeOssPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOssPolicyResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOssPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOssPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssPolicyResponse) SetHeaders(v map[string]*string) *DescribeOssPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeOssPolicyResponse) SetStatusCode(v int32) *DescribeOssPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOssPolicyResponse) SetBody(v *DescribeOssPolicyResponseBody) *DescribeOssPolicyResponse {
	s.Body = v
	return s
}

type DescribeOssTokenRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	FileName   *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	UploadType *string `json:"uploadType,omitempty" xml:"uploadType,omitempty"`
}

func (s DescribeOssTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssTokenRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssTokenRequest) SetLang(v string) *DescribeOssTokenRequest {
	s.Lang = &v
	return s
}

func (s *DescribeOssTokenRequest) SetFileName(v string) *DescribeOssTokenRequest {
	s.FileName = &v
	return s
}

func (s *DescribeOssTokenRequest) SetRegId(v string) *DescribeOssTokenRequest {
	s.RegId = &v
	return s
}

func (s *DescribeOssTokenRequest) SetUploadType(v string) *DescribeOssTokenRequest {
	s.UploadType = &v
	return s
}

type DescribeOssTokenResponseBody struct {
	AccessId  *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Key       *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	StsToken  *string `json:"StsToken,omitempty" xml:"StsToken,omitempty"`
}

func (s DescribeOssTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssTokenResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOssTokenResponseBody) SetAccessId(v string) *DescribeOssTokenResponseBody {
	s.AccessId = &v
	return s
}

func (s *DescribeOssTokenResponseBody) SetHost(v string) *DescribeOssTokenResponseBody {
	s.Host = &v
	return s
}

func (s *DescribeOssTokenResponseBody) SetKey(v string) *DescribeOssTokenResponseBody {
	s.Key = &v
	return s
}

func (s *DescribeOssTokenResponseBody) SetPolicy(v string) *DescribeOssTokenResponseBody {
	s.Policy = &v
	return s
}

func (s *DescribeOssTokenResponseBody) SetRequestId(v string) *DescribeOssTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOssTokenResponseBody) SetSignature(v string) *DescribeOssTokenResponseBody {
	s.Signature = &v
	return s
}

func (s *DescribeOssTokenResponseBody) SetStsToken(v string) *DescribeOssTokenResponseBody {
	s.StsToken = &v
	return s
}

type DescribeOssTokenResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOssTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOssTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssTokenResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssTokenResponse) SetHeaders(v map[string]*string) *DescribeOssTokenResponse {
	s.Headers = v
	return s
}

func (s *DescribeOssTokenResponse) SetStatusCode(v int32) *DescribeOssTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOssTokenResponse) SetBody(v *DescribeOssTokenResponseBody) *DescribeOssTokenResponse {
	s.Body = v
	return s
}

type DescribeParamByEventCodesRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	Parma      *string `json:"parma,omitempty" xml:"parma,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeParamByEventCodesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParamByEventCodesRequest) GoString() string {
	return s.String()
}

func (s *DescribeParamByEventCodesRequest) SetLang(v string) *DescribeParamByEventCodesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeParamByEventCodesRequest) SetEventCodes(v string) *DescribeParamByEventCodesRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeParamByEventCodesRequest) SetParma(v string) *DescribeParamByEventCodesRequest {
	s.Parma = &v
	return s
}

func (s *DescribeParamByEventCodesRequest) SetRegId(v string) *DescribeParamByEventCodesRequest {
	s.RegId = &v
	return s
}

type DescribeParamByEventCodesResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeParamByEventCodesResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeParamByEventCodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParamByEventCodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParamByEventCodesResponseBody) SetRequestId(v string) *DescribeParamByEventCodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParamByEventCodesResponseBody) SetResultObject(v []*DescribeParamByEventCodesResponseBodyResultObject) *DescribeParamByEventCodesResponseBody {
	s.ResultObject = v
	return s
}

type DescribeParamByEventCodesResponseBodyResultObject struct {
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeParamByEventCodesResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeParamByEventCodesResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeParamByEventCodesResponseBodyResultObject) SetCode(v string) *DescribeParamByEventCodesResponseBodyResultObject {
	s.Code = &v
	return s
}

func (s *DescribeParamByEventCodesResponseBodyResultObject) SetName(v string) *DescribeParamByEventCodesResponseBodyResultObject {
	s.Name = &v
	return s
}

type DescribeParamByEventCodesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParamByEventCodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParamByEventCodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParamByEventCodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeParamByEventCodesResponse) SetHeaders(v map[string]*string) *DescribeParamByEventCodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeParamByEventCodesResponse) SetStatusCode(v int32) *DescribeParamByEventCodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParamByEventCodesResponse) SetBody(v *DescribeParamByEventCodesResponseBody) *DescribeParamByEventCodesResponse {
	s.Body = v
	return s
}

type DescribeParamListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	FileUrl     *string `json:"fileUrl,omitempty" xml:"fileUrl,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
}

func (s DescribeParamListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParamListRequest) GoString() string {
	return s.String()
}

func (s *DescribeParamListRequest) SetLang(v string) *DescribeParamListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeParamListRequest) SetFileUrl(v string) *DescribeParamListRequest {
	s.FileUrl = &v
	return s
}

func (s *DescribeParamListRequest) SetRegId(v string) *DescribeParamListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeParamListRequest) SetServiceCode(v string) *DescribeParamListRequest {
	s.ServiceCode = &v
	return s
}

type DescribeParamListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeParamListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParamListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParamListResponseBody) SetRequestId(v string) *DescribeParamListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParamListResponseBody) SetResultObject(v bool) *DescribeParamListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeParamListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParamListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParamListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParamListResponse) GoString() string {
	return s.String()
}

func (s *DescribeParamListResponse) SetHeaders(v map[string]*string) *DescribeParamListResponse {
	s.Headers = v
	return s
}

func (s *DescribeParamListResponse) SetStatusCode(v int32) *DescribeParamListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParamListResponse) SetBody(v *DescribeParamListResponseBody) *DescribeParamListResponse {
	s.Body = v
	return s
}

type DescribePocDetailRequest struct {
	Lang   *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
	Type   *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribePocDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePocDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePocDetailRequest) SetLang(v string) *DescribePocDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribePocDetailRequest) SetRegId(v string) *DescribePocDetailRequest {
	s.RegId = &v
	return s
}

func (s *DescribePocDetailRequest) SetTaskId(v string) *DescribePocDetailRequest {
	s.TaskId = &v
	return s
}

func (s *DescribePocDetailRequest) SetType(v string) *DescribePocDetailRequest {
	s.Type = &v
	return s
}

type DescribePocDetailResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribePocDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePocDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePocDetailResponseBody) SetRequestId(v string) *DescribePocDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePocDetailResponseBody) SetResultObject(v bool) *DescribePocDetailResponseBody {
	s.ResultObject = &v
	return s
}

type DescribePocDetailResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePocDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePocDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePocDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePocDetailResponse) SetHeaders(v map[string]*string) *DescribePocDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePocDetailResponse) SetStatusCode(v int32) *DescribePocDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePocDetailResponse) SetBody(v *DescribePocDetailResponseBody) *DescribePocDetailResponse {
	s.Body = v
	return s
}

type DescribePocOssTokenRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribePocOssTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePocOssTokenRequest) GoString() string {
	return s.String()
}

func (s *DescribePocOssTokenRequest) SetLang(v string) *DescribePocOssTokenRequest {
	s.Lang = &v
	return s
}

func (s *DescribePocOssTokenRequest) SetRegId(v string) *DescribePocOssTokenRequest {
	s.RegId = &v
	return s
}

type DescribePocOssTokenResponseBody struct {
	AccessId     *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	Host         *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Key          *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Policy       *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Signature    *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribePocOssTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePocOssTokenResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePocOssTokenResponseBody) SetAccessId(v string) *DescribePocOssTokenResponseBody {
	s.AccessId = &v
	return s
}

func (s *DescribePocOssTokenResponseBody) SetHost(v string) *DescribePocOssTokenResponseBody {
	s.Host = &v
	return s
}

func (s *DescribePocOssTokenResponseBody) SetKey(v string) *DescribePocOssTokenResponseBody {
	s.Key = &v
	return s
}

func (s *DescribePocOssTokenResponseBody) SetPolicy(v string) *DescribePocOssTokenResponseBody {
	s.Policy = &v
	return s
}

func (s *DescribePocOssTokenResponseBody) SetRequestId(v string) *DescribePocOssTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePocOssTokenResponseBody) SetSignature(v string) *DescribePocOssTokenResponseBody {
	s.Signature = &v
	return s
}

func (s *DescribePocOssTokenResponseBody) SetResultObject(v bool) *DescribePocOssTokenResponseBody {
	s.ResultObject = &v
	return s
}

type DescribePocOssTokenResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePocOssTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePocOssTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePocOssTokenResponse) GoString() string {
	return s.String()
}

func (s *DescribePocOssTokenResponse) SetHeaders(v map[string]*string) *DescribePocOssTokenResponse {
	s.Headers = v
	return s
}

func (s *DescribePocOssTokenResponse) SetStatusCode(v int32) *DescribePocOssTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePocOssTokenResponse) SetBody(v *DescribePocOssTokenResponseBody) *DescribePocOssTokenResponse {
	s.Body = v
	return s
}

type DescribePocTaskListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribePocTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePocTaskListRequest) GoString() string {
	return s.String()
}

func (s *DescribePocTaskListRequest) SetLang(v string) *DescribePocTaskListRequest {
	s.Lang = &v
	return s
}

func (s *DescribePocTaskListRequest) SetCurrentPage(v int32) *DescribePocTaskListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePocTaskListRequest) SetPageSize(v int32) *DescribePocTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePocTaskListRequest) SetRegId(v string) *DescribePocTaskListRequest {
	s.RegId = &v
	return s
}

func (s *DescribePocTaskListRequest) SetType(v string) *DescribePocTaskListRequest {
	s.Type = &v
	return s
}

type DescribePocTaskListResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                         `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                         `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribePocTaskListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                         `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                         `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribePocTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePocTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePocTaskListResponseBody) SetRequestId(v string) *DescribePocTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePocTaskListResponseBody) SetCurrentPage(v int32) *DescribePocTaskListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribePocTaskListResponseBody) SetPageSize(v int32) *DescribePocTaskListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePocTaskListResponseBody) SetResultObject(v []*DescribePocTaskListResponseBodyResultObject) *DescribePocTaskListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribePocTaskListResponseBody) SetTotalItem(v int32) *DescribePocTaskListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribePocTaskListResponseBody) SetTotalPage(v int32) *DescribePocTaskListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribePocTaskListResponseBodyResultObject struct {
	CreateTime  *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	DownloadUrl *string `json:"downloadUrl,omitempty" xml:"downloadUrl,omitempty"`
	FileType    *string `json:"fileType,omitempty" xml:"fileType,omitempty"`
	ServiceName *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	Status      *string `json:"status,omitempty" xml:"status,omitempty"`
	TaskId      *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
	TaskName    *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
	UpdateTime  *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s DescribePocTaskListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribePocTaskListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribePocTaskListResponseBodyResultObject) SetCreateTime(v string) *DescribePocTaskListResponseBodyResultObject {
	s.CreateTime = &v
	return s
}

func (s *DescribePocTaskListResponseBodyResultObject) SetDownloadUrl(v string) *DescribePocTaskListResponseBodyResultObject {
	s.DownloadUrl = &v
	return s
}

func (s *DescribePocTaskListResponseBodyResultObject) SetFileType(v string) *DescribePocTaskListResponseBodyResultObject {
	s.FileType = &v
	return s
}

func (s *DescribePocTaskListResponseBodyResultObject) SetServiceName(v string) *DescribePocTaskListResponseBodyResultObject {
	s.ServiceName = &v
	return s
}

func (s *DescribePocTaskListResponseBodyResultObject) SetStatus(v string) *DescribePocTaskListResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribePocTaskListResponseBodyResultObject) SetTaskId(v string) *DescribePocTaskListResponseBodyResultObject {
	s.TaskId = &v
	return s
}

func (s *DescribePocTaskListResponseBodyResultObject) SetTaskName(v string) *DescribePocTaskListResponseBodyResultObject {
	s.TaskName = &v
	return s
}

func (s *DescribePocTaskListResponseBodyResultObject) SetUpdateTime(v string) *DescribePocTaskListResponseBodyResultObject {
	s.UpdateTime = &v
	return s
}

type DescribePocTaskListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePocTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePocTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePocTaskListResponse) GoString() string {
	return s.String()
}

func (s *DescribePocTaskListResponse) SetHeaders(v map[string]*string) *DescribePocTaskListResponse {
	s.Headers = v
	return s
}

func (s *DescribePocTaskListResponse) SetStatusCode(v int32) *DescribePocTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePocTaskListResponse) SetBody(v *DescribePocTaskListResponseBody) *DescribePocTaskListResponse {
	s.Body = v
	return s
}

type DescribePrivateStackRequest struct {
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribePrivateStackRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivateStackRequest) GoString() string {
	return s.String()
}

func (s *DescribePrivateStackRequest) SetRegId(v string) *DescribePrivateStackRequest {
	s.RegId = &v
	return s
}

type DescribePrivateStackResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribePrivateStackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivateStackResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePrivateStackResponseBody) SetRequestId(v string) *DescribePrivateStackResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePrivateStackResponseBody) SetResultObject(v bool) *DescribePrivateStackResponseBody {
	s.ResultObject = &v
	return s
}

type DescribePrivateStackResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePrivateStackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePrivateStackResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivateStackResponse) GoString() string {
	return s.String()
}

func (s *DescribePrivateStackResponse) SetHeaders(v map[string]*string) *DescribePrivateStackResponse {
	s.Headers = v
	return s
}

func (s *DescribePrivateStackResponse) SetStatusCode(v int32) *DescribePrivateStackResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePrivateStackResponse) SetBody(v *DescribePrivateStackResponseBody) *DescribePrivateStackResponse {
	s.Body = v
	return s
}

type DescribeQueryVariableDetailRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeQueryVariableDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariableDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariableDetailRequest) SetLang(v string) *DescribeQueryVariableDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeQueryVariableDetailRequest) SetId(v int64) *DescribeQueryVariableDetailRequest {
	s.Id = &v
	return s
}

func (s *DescribeQueryVariableDetailRequest) SetRegId(v string) *DescribeQueryVariableDetailRequest {
	s.RegId = &v
	return s
}

type DescribeQueryVariableDetailResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeQueryVariableDetailResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeQueryVariableDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariableDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariableDetailResponseBody) SetRequestId(v string) *DescribeQueryVariableDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBody) SetResultObject(v *DescribeQueryVariableDetailResponseBodyResultObject) *DescribeQueryVariableDetailResponseBody {
	s.ResultObject = v
	return s
}

type DescribeQueryVariableDetailResponseBodyResultObject struct {
	DataSourceCode     *int64  `json:"dataSourceCode,omitempty" xml:"dataSourceCode,omitempty"`
	DataSourceName     *string `json:"dataSourceName,omitempty" xml:"dataSourceName,omitempty"`
	Description        *string `json:"description,omitempty" xml:"description,omitempty"`
	EventCode          *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Expression         *string `json:"expression,omitempty" xml:"expression,omitempty"`
	ExpressionTitle    *string `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	ExpressionVariable *string `json:"expressionVariable,omitempty" xml:"expressionVariable,omitempty"`
	Id                 *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Outlier            *string `json:"outlier,omitempty" xml:"outlier,omitempty"`
	Outputs            *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	Title              *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeQueryVariableDetailResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariableDetailResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetDataSourceCode(v int64) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.DataSourceCode = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetDataSourceName(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.DataSourceName = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetDescription(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetEventCode(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetExpression(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.Expression = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetExpressionTitle(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.ExpressionTitle = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetExpressionVariable(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.ExpressionVariable = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetId(v int64) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetOutlier(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.Outlier = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetOutputs(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.Outputs = &v
	return s
}

func (s *DescribeQueryVariableDetailResponseBodyResultObject) SetTitle(v string) *DescribeQueryVariableDetailResponseBodyResultObject {
	s.Title = &v
	return s
}

type DescribeQueryVariableDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeQueryVariableDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeQueryVariableDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariableDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariableDetailResponse) SetHeaders(v map[string]*string) *DescribeQueryVariableDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeQueryVariableDetailResponse) SetStatusCode(v int32) *DescribeQueryVariableDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQueryVariableDetailResponse) SetBody(v *DescribeQueryVariableDetailResponseBody) *DescribeQueryVariableDetailResponse {
	s.Body = v
	return s
}

type DescribeQueryVariablePageListRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage    *int64  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	DataSourceCode *string `json:"dataSourceCode,omitempty" xml:"dataSourceCode,omitempty"`
	EventCode      *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Name           *string `json:"name,omitempty" xml:"name,omitempty"`
	PageSize       *int64  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeQueryVariablePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariablePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariablePageListRequest) SetLang(v string) *DescribeQueryVariablePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeQueryVariablePageListRequest) SetCurrentPage(v int64) *DescribeQueryVariablePageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeQueryVariablePageListRequest) SetDataSourceCode(v string) *DescribeQueryVariablePageListRequest {
	s.DataSourceCode = &v
	return s
}

func (s *DescribeQueryVariablePageListRequest) SetEventCode(v string) *DescribeQueryVariablePageListRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeQueryVariablePageListRequest) SetName(v string) *DescribeQueryVariablePageListRequest {
	s.Name = &v
	return s
}

func (s *DescribeQueryVariablePageListRequest) SetPageSize(v int64) *DescribeQueryVariablePageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeQueryVariablePageListRequest) SetRegId(v string) *DescribeQueryVariablePageListRequest {
	s.RegId = &v
	return s
}

type DescribeQueryVariablePageListResponseBody struct {
	RequestId    *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int64                                                   `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int64                                                   `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeQueryVariablePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int64                                                   `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int64                                                   `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeQueryVariablePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariablePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariablePageListResponseBody) SetRequestId(v string) *DescribeQueryVariablePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBody) SetCurrentPage(v int64) *DescribeQueryVariablePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBody) SetPageSize(v int64) *DescribeQueryVariablePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBody) SetResultObject(v []*DescribeQueryVariablePageListResponseBodyResultObject) *DescribeQueryVariablePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeQueryVariablePageListResponseBody) SetTotalItem(v int64) *DescribeQueryVariablePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBody) SetTotalPage(v int64) *DescribeQueryVariablePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeQueryVariablePageListResponseBodyResultObject struct {
	DataSourceCode *int64  `json:"dataSourceCode,omitempty" xml:"dataSourceCode,omitempty"`
	DataSourceName *string `json:"dataSourceName,omitempty" xml:"dataSourceName,omitempty"`
	Description    *string `json:"description,omitempty" xml:"description,omitempty"`
	EventName      *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	FieldType      *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	GmtCreate      *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified    *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id             *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name           *string `json:"name,omitempty" xml:"name,omitempty"`
	Status         *string `json:"status,omitempty" xml:"status,omitempty"`
	Total          *int64  `json:"total,omitempty" xml:"total,omitempty"`
	Version        *int64  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeQueryVariablePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariablePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetDataSourceCode(v int64) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.DataSourceCode = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetDataSourceName(v string) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.DataSourceName = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetDescription(v string) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetEventName(v string) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetFieldType(v string) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.FieldType = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetId(v int64) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetName(v string) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetStatus(v string) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetTotal(v int64) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.Total = &v
	return s
}

func (s *DescribeQueryVariablePageListResponseBodyResultObject) SetVersion(v int64) *DescribeQueryVariablePageListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeQueryVariablePageListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeQueryVariablePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeQueryVariablePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryVariablePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeQueryVariablePageListResponse) SetHeaders(v map[string]*string) *DescribeQueryVariablePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeQueryVariablePageListResponse) SetStatusCode(v int32) *DescribeQueryVariablePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQueryVariablePageListResponse) SetBody(v *DescribeQueryVariablePageListResponseBody) *DescribeQueryVariablePageListResponse {
	s.Body = v
	return s
}

type DescribeRecommendSceneVariablesRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	SampleId *int64 `json:"sampleId,omitempty" xml:"sampleId,omitempty"`
}

func (s DescribeRecommendSceneVariablesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendSceneVariablesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendSceneVariablesRequest) SetLang(v string) *DescribeRecommendSceneVariablesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRecommendSceneVariablesRequest) SetRegId(v string) *DescribeRecommendSceneVariablesRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRecommendSceneVariablesRequest) SetSampleId(v int64) *DescribeRecommendSceneVariablesRequest {
	s.SampleId = &v
	return s
}

type DescribeRecommendSceneVariablesResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeRecommendSceneVariablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendSceneVariablesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendSceneVariablesResponseBody) SetRequestId(v string) *DescribeRecommendSceneVariablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecommendSceneVariablesResponseBody) SetResultObject(v bool) *DescribeRecommendSceneVariablesResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeRecommendSceneVariablesResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecommendSceneVariablesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecommendSceneVariablesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendSceneVariablesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendSceneVariablesResponse) SetHeaders(v map[string]*string) *DescribeRecommendSceneVariablesResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendSceneVariablesResponse) SetStatusCode(v int32) *DescribeRecommendSceneVariablesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecommendSceneVariablesResponse) SetBody(v *DescribeRecommendSceneVariablesResponseBody) *DescribeRecommendSceneVariablesResponse {
	s.Body = v
	return s
}

type DescribeRecommendTaskDetailRequest struct {
	Lang   *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TaskId *int64  `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s DescribeRecommendTaskDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskDetailRequest) SetLang(v string) *DescribeRecommendTaskDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRecommendTaskDetailRequest) SetRegId(v string) *DescribeRecommendTaskDetailRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRecommendTaskDetailRequest) SetTaskId(v int64) *DescribeRecommendTaskDetailRequest {
	s.TaskId = &v
	return s
}

type DescribeRecommendTaskDetailResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeRecommendTaskDetailResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeRecommendTaskDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskDetailResponseBody) SetRequestId(v string) *DescribeRecommendTaskDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBody) SetResultObject(v *DescribeRecommendTaskDetailResponseBodyResultObject) *DescribeRecommendTaskDetailResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRecommendTaskDetailResponseBodyResultObject struct {
	EventCode             *string                                                                     `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName             *string                                                                     `json:"eventName,omitempty" xml:"eventName,omitempty"`
	ExpectVelocities      []*string                                                                   `json:"expectVelocities,omitempty" xml:"expectVelocities,omitempty" type:"Repeated"`
	GmtCreate             *int64                                                                      `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	NormalSize            *int64                                                                      `json:"normalSize,omitempty" xml:"normalSize,omitempty"`
	RecommendRuleDTOs     []*DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs     `json:"recommendRuleDTOs,omitempty" xml:"recommendRuleDTOs,omitempty" type:"Repeated"`
	RecommendVariableDTOs []*DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs `json:"recommendVariableDTOs,omitempty" xml:"recommendVariableDTOs,omitempty" type:"Repeated"`
	RiskSize              *int64                                                                      `json:"riskSize,omitempty" xml:"riskSize,omitempty"`
	SampleName            *string                                                                     `json:"sampleName,omitempty" xml:"sampleName,omitempty"`
	SampleScene           *string                                                                     `json:"sampleScene,omitempty" xml:"sampleScene,omitempty"`
	SampleSceneName       *string                                                                     `json:"sampleSceneName,omitempty" xml:"sampleSceneName,omitempty"`
	TaskId                *int64                                                                      `json:"taskId,omitempty" xml:"taskId,omitempty"`
	TaskName              *string                                                                     `json:"taskName,omitempty" xml:"taskName,omitempty"`
	TaskStatus            *string                                                                     `json:"taskStatus,omitempty" xml:"taskStatus,omitempty"`
}

func (s DescribeRecommendTaskDetailResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskDetailResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetEventCode(v string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetEventName(v string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetExpectVelocities(v []*string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.ExpectVelocities = v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetGmtCreate(v int64) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetNormalSize(v int64) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.NormalSize = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetRecommendRuleDTOs(v []*DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.RecommendRuleDTOs = v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetRecommendVariableDTOs(v []*DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.RecommendVariableDTOs = v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetRiskSize(v int64) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.RiskSize = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetSampleName(v string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.SampleName = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetSampleScene(v string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.SampleScene = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetSampleSceneName(v string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.SampleSceneName = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetTaskId(v int64) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.TaskId = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetTaskName(v string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.TaskName = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObject) SetTaskStatus(v string) *DescribeRecommendTaskDetailResponseBodyResultObject {
	s.TaskStatus = &v
	return s
}

type DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs struct {
	ComputeExpression *string                                                                               `json:"computeExpression,omitempty" xml:"computeExpression,omitempty"`
	HitSample         *int64                                                                                `json:"hitSample,omitempty" xml:"hitSample,omitempty"`
	Id                *int64                                                                                `json:"id,omitempty" xml:"id,omitempty"`
	NotHitSample      *int64                                                                                `json:"notHitSample,omitempty" xml:"notHitSample,omitempty"`
	RecommendRules    []*DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules `json:"recommendRules,omitempty" xml:"recommendRules,omitempty" type:"Repeated"`
	RuleId            *string                                                                               `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName          *string                                                                               `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	Status            *string                                                                               `json:"status,omitempty" xml:"status,omitempty"`
	Velocities        *string                                                                               `json:"velocities,omitempty" xml:"velocities,omitempty"`
}

func (s DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetComputeExpression(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.ComputeExpression = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetHitSample(v int64) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.HitSample = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetId(v int64) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.Id = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetNotHitSample(v int64) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.NotHitSample = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetRecommendRules(v []*DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.RecommendRules = v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetRuleId(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.RuleId = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetRuleName(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.RuleName = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetStatus(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.Status = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs) SetVelocities(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs {
	s.Velocities = &v
	return s
}

type DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules struct {
	Left     *string `json:"left,omitempty" xml:"left,omitempty"`
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	Right    *string `json:"right,omitempty" xml:"right,omitempty"`
}

func (s DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules) SetLeft(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules {
	s.Left = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules) SetOperator(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules {
	s.Operator = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules) SetRight(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules {
	s.Right = &v
	return s
}

type DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs) SetId(v int64) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs {
	s.Id = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs) SetTitle(v string) *DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs {
	s.Title = &v
	return s
}

type DescribeRecommendTaskDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecommendTaskDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecommendTaskDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskDetailResponse) SetHeaders(v map[string]*string) *DescribeRecommendTaskDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendTaskDetailResponse) SetStatusCode(v int32) *DescribeRecommendTaskDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecommendTaskDetailResponse) SetBody(v *DescribeRecommendTaskDetailResponseBody) *DescribeRecommendTaskDetailResponse {
	s.Body = v
	return s
}

type DescribeRecommendTaskPageListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TaskName    *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s DescribeRecommendTaskPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskPageListRequest) SetLang(v string) *DescribeRecommendTaskPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRecommendTaskPageListRequest) SetCurrentPage(v string) *DescribeRecommendTaskPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRecommendTaskPageListRequest) SetPageSize(v string) *DescribeRecommendTaskPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRecommendTaskPageListRequest) SetRegId(v string) *DescribeRecommendTaskPageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRecommendTaskPageListRequest) SetTaskName(v string) *DescribeRecommendTaskPageListRequest {
	s.TaskName = &v
	return s
}

type DescribeRecommendTaskPageListResponseBody struct {
	RequestId    *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                                   `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                                   `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeRecommendTaskPageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                                   `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                                   `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeRecommendTaskPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskPageListResponseBody) SetRequestId(v string) *DescribeRecommendTaskPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBody) SetCurrentPage(v int32) *DescribeRecommendTaskPageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBody) SetPageSize(v int32) *DescribeRecommendTaskPageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBody) SetResultObject(v []*DescribeRecommendTaskPageListResponseBodyResultObject) *DescribeRecommendTaskPageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBody) SetTotalItem(v int32) *DescribeRecommendTaskPageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBody) SetTotalPage(v int32) *DescribeRecommendTaskPageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeRecommendTaskPageListResponseBodyResultObject struct {
	ExpectVelocities []*string `json:"expectVelocities,omitempty" xml:"expectVelocities,omitempty" type:"Repeated"`
	GmtCreate        *int64    `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	NormalCount      *int64    `json:"normalCount,omitempty" xml:"normalCount,omitempty"`
	NormalSize       *int64    `json:"normalSize,omitempty" xml:"normalSize,omitempty"`
	RiskCount        *int64    `json:"riskCount,omitempty" xml:"riskCount,omitempty"`
	RiskSize         *int64    `json:"riskSize,omitempty" xml:"riskSize,omitempty"`
	SampleName       *string   `json:"sampleName,omitempty" xml:"sampleName,omitempty"`
	SampleScene      *string   `json:"sampleScene,omitempty" xml:"sampleScene,omitempty"`
	TaskId           *int64    `json:"taskId,omitempty" xml:"taskId,omitempty"`
	TaskName         *string   `json:"taskName,omitempty" xml:"taskName,omitempty"`
	TaskStatus       *string   `json:"taskStatus,omitempty" xml:"taskStatus,omitempty"`
}

func (s DescribeRecommendTaskPageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskPageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetExpectVelocities(v []*string) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.ExpectVelocities = v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetNormalCount(v int64) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.NormalCount = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetNormalSize(v int64) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.NormalSize = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetRiskCount(v int64) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.RiskCount = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetRiskSize(v int64) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.RiskSize = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetSampleName(v string) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.SampleName = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetSampleScene(v string) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.SampleScene = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetTaskId(v int64) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.TaskId = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetTaskName(v string) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.TaskName = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponseBodyResultObject) SetTaskStatus(v string) *DescribeRecommendTaskPageListResponseBodyResultObject {
	s.TaskStatus = &v
	return s
}

type DescribeRecommendTaskPageListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecommendTaskPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecommendTaskPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendTaskPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendTaskPageListResponse) SetHeaders(v map[string]*string) *DescribeRecommendTaskPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendTaskPageListResponse) SetStatusCode(v int32) *DescribeRecommendTaskPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecommendTaskPageListResponse) SetBody(v *DescribeRecommendTaskPageListResponseBody) *DescribeRecommendTaskPageListResponse {
	s.Body = v
	return s
}

type DescribeRecommendVariablesVelocityRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	TaskId         *int64  `json:"taskId,omitempty" xml:"taskId,omitempty"`
	VariableIdsStr *string `json:"variableIdsStr,omitempty" xml:"variableIdsStr,omitempty"`
}

func (s DescribeRecommendVariablesVelocityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendVariablesVelocityRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendVariablesVelocityRequest) SetLang(v string) *DescribeRecommendVariablesVelocityRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRecommendVariablesVelocityRequest) SetRegId(v string) *DescribeRecommendVariablesVelocityRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRecommendVariablesVelocityRequest) SetTaskId(v int64) *DescribeRecommendVariablesVelocityRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeRecommendVariablesVelocityRequest) SetVariableIdsStr(v string) *DescribeRecommendVariablesVelocityRequest {
	s.VariableIdsStr = &v
	return s
}

type DescribeRecommendVariablesVelocityResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeRecommendVariablesVelocityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendVariablesVelocityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendVariablesVelocityResponseBody) SetRequestId(v string) *DescribeRecommendVariablesVelocityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecommendVariablesVelocityResponseBody) SetResultObject(v bool) *DescribeRecommendVariablesVelocityResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeRecommendVariablesVelocityResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecommendVariablesVelocityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecommendVariablesVelocityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendVariablesVelocityResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendVariablesVelocityResponse) SetHeaders(v map[string]*string) *DescribeRecommendVariablesVelocityResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendVariablesVelocityResponse) SetStatusCode(v int32) *DescribeRecommendVariablesVelocityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecommendVariablesVelocityResponse) SetBody(v *DescribeRecommendVariablesVelocityResponseBody) *DescribeRecommendVariablesVelocityResponse {
	s.Body = v
	return s
}

type DescribeRecommendVelocitiesRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Code  *string `json:"code,omitempty" xml:"code,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Type  *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeRecommendVelocitiesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendVelocitiesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendVelocitiesRequest) SetLang(v string) *DescribeRecommendVelocitiesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRecommendVelocitiesRequest) SetCode(v string) *DescribeRecommendVelocitiesRequest {
	s.Code = &v
	return s
}

func (s *DescribeRecommendVelocitiesRequest) SetRegId(v string) *DescribeRecommendVelocitiesRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRecommendVelocitiesRequest) SetType(v string) *DescribeRecommendVelocitiesRequest {
	s.Type = &v
	return s
}

type DescribeRecommendVelocitiesResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeRecommendVelocitiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendVelocitiesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendVelocitiesResponseBody) SetRequestId(v string) *DescribeRecommendVelocitiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecommendVelocitiesResponseBody) SetResultObject(v bool) *DescribeRecommendVelocitiesResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeRecommendVelocitiesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecommendVelocitiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecommendVelocitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendVelocitiesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendVelocitiesResponse) SetHeaders(v map[string]*string) *DescribeRecommendVelocitiesResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendVelocitiesResponse) SetStatusCode(v int32) *DescribeRecommendVelocitiesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecommendVelocitiesResponse) SetBody(v *DescribeRecommendVelocitiesResponseBody) *DescribeRecommendVelocitiesResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetLang(v string) *DescribeRegionsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRegionsRequest) SetRegId(v string) *DescribeRegionsRequest {
	s.RegId = &v
	return s
}

type DescribeRegionsResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponseBody) SetResultObject(v bool) *DescribeRegionsResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeRequestHitRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	SRequestId *string `json:"sRequestId,omitempty" xml:"sRequestId,omitempty"`
}

func (s DescribeRequestHitRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestHitRequest) GoString() string {
	return s.String()
}

func (s *DescribeRequestHitRequest) SetLang(v string) *DescribeRequestHitRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRequestHitRequest) SetRegId(v string) *DescribeRequestHitRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRequestHitRequest) SetSRequestId(v string) *DescribeRequestHitRequest {
	s.SRequestId = &v
	return s
}

type DescribeRequestHitResponseBody struct {
	RequestId    *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeRequestHitResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeRequestHitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestHitResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRequestHitResponseBody) SetRequestId(v string) *DescribeRequestHitResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRequestHitResponseBody) SetResultObject(v *DescribeRequestHitResponseBodyResultObject) *DescribeRequestHitResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRequestHitResponseBodyResultObject struct {
	EventCode      *string                                                     `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName      *string                                                     `json:"eventName,omitempty" xml:"eventName,omitempty"`
	Inputs         *string                                                     `json:"inputs,omitempty" xml:"inputs,omitempty"`
	Outputs        *string                                                     `json:"outputs,omitempty" xml:"outputs,omitempty"`
	RequestTime    *int64                                                      `json:"requestTime,omitempty" xml:"requestTime,omitempty"`
	RuleHitRecords []*DescribeRequestHitResponseBodyResultObjectRuleHitRecords `json:"ruleHitRecords,omitempty" xml:"ruleHitRecords,omitempty" type:"Repeated"`
	SRequestId     *string                                                     `json:"sRequestId,omitempty" xml:"sRequestId,omitempty"`
	TotalCost      *int64                                                      `json:"totalCost,omitempty" xml:"totalCost,omitempty"`
}

func (s DescribeRequestHitResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestHitResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRequestHitResponseBodyResultObject) SetEventCode(v string) *DescribeRequestHitResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObject) SetEventName(v string) *DescribeRequestHitResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObject) SetInputs(v string) *DescribeRequestHitResponseBodyResultObject {
	s.Inputs = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObject) SetOutputs(v string) *DescribeRequestHitResponseBodyResultObject {
	s.Outputs = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObject) SetRequestTime(v int64) *DescribeRequestHitResponseBodyResultObject {
	s.RequestTime = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObject) SetRuleHitRecords(v []*DescribeRequestHitResponseBodyResultObjectRuleHitRecords) *DescribeRequestHitResponseBodyResultObject {
	s.RuleHitRecords = v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObject) SetSRequestId(v string) *DescribeRequestHitResponseBodyResultObject {
	s.SRequestId = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObject) SetTotalCost(v int64) *DescribeRequestHitResponseBodyResultObject {
	s.TotalCost = &v
	return s
}

type DescribeRequestHitResponseBodyResultObjectRuleHitRecords struct {
	Cost           *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	HitSuccessful  *bool   `json:"hitSuccessful,omitempty" xml:"hitSuccessful,omitempty"`
	IsShowDetail   *bool   `json:"isShowDetail,omitempty" xml:"isShowDetail,omitempty"`
	Order          *int32  `json:"order,omitempty" xml:"order,omitempty"`
	RuleId         *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName       *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleSnapshotId *string `json:"ruleSnapshotId,omitempty" xml:"ruleSnapshotId,omitempty"`
	RuleStatus     *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeRequestHitResponseBodyResultObjectRuleHitRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestHitResponseBodyResultObjectRuleHitRecords) GoString() string {
	return s.String()
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetCost(v int32) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.Cost = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetHitSuccessful(v bool) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.HitSuccessful = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetIsShowDetail(v bool) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.IsShowDetail = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetOrder(v int32) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.Order = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetRuleId(v string) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.RuleId = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetRuleName(v string) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.RuleName = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetRuleSnapshotId(v string) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.RuleSnapshotId = &v
	return s
}

func (s *DescribeRequestHitResponseBodyResultObjectRuleHitRecords) SetRuleStatus(v string) *DescribeRequestHitResponseBodyResultObjectRuleHitRecords {
	s.RuleStatus = &v
	return s
}

type DescribeRequestHitResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRequestHitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRequestHitResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestHitResponse) GoString() string {
	return s.String()
}

func (s *DescribeRequestHitResponse) SetHeaders(v map[string]*string) *DescribeRequestHitResponse {
	s.Headers = v
	return s
}

func (s *DescribeRequestHitResponse) SetStatusCode(v int32) *DescribeRequestHitResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRequestHitResponse) SetBody(v *DescribeRequestHitResponseBody) *DescribeRequestHitResponse {
	s.Body = v
	return s
}

type DescribeRequestPeakReportRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeRequestPeakReportRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestPeakReportRequest) GoString() string {
	return s.String()
}

func (s *DescribeRequestPeakReportRequest) SetLang(v string) *DescribeRequestPeakReportRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRequestPeakReportRequest) SetRegId(v string) *DescribeRequestPeakReportRequest {
	s.RegId = &v
	return s
}

type DescribeRequestPeakReportResponseBody struct {
	Code           *string                                              `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                              `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                              `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeRequestPeakReportResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                                `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeRequestPeakReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestPeakReportResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRequestPeakReportResponseBody) SetCode(v string) *DescribeRequestPeakReportResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRequestPeakReportResponseBody) SetHttpStatusCode(v string) *DescribeRequestPeakReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeRequestPeakReportResponseBody) SetMessage(v string) *DescribeRequestPeakReportResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRequestPeakReportResponseBody) SetRequestId(v string) *DescribeRequestPeakReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRequestPeakReportResponseBody) SetResultObject(v []*DescribeRequestPeakReportResponseBodyResultObject) *DescribeRequestPeakReportResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeRequestPeakReportResponseBody) SetSuccess(v bool) *DescribeRequestPeakReportResponseBody {
	s.Success = &v
	return s
}

type DescribeRequestPeakReportResponseBodyResultObject struct {
	Ratio *string `json:"ratio,omitempty" xml:"ratio,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeRequestPeakReportResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestPeakReportResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRequestPeakReportResponseBodyResultObject) SetRatio(v string) *DescribeRequestPeakReportResponseBodyResultObject {
	s.Ratio = &v
	return s
}

func (s *DescribeRequestPeakReportResponseBodyResultObject) SetValue(v string) *DescribeRequestPeakReportResponseBodyResultObject {
	s.Value = &v
	return s
}

type DescribeRequestPeakReportResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRequestPeakReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRequestPeakReportResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRequestPeakReportResponse) GoString() string {
	return s.String()
}

func (s *DescribeRequestPeakReportResponse) SetHeaders(v map[string]*string) *DescribeRequestPeakReportResponse {
	s.Headers = v
	return s
}

func (s *DescribeRequestPeakReportResponse) SetStatusCode(v int32) *DescribeRequestPeakReportResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRequestPeakReportResponse) SetBody(v *DescribeRequestPeakReportResponseBody) *DescribeRequestPeakReportResponse {
	s.Body = v
	return s
}

type DescribeResultCountRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime *int64 `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	// This parameter is required.
	EndTime *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeResultCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResultCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeResultCountRequest) SetLang(v string) *DescribeResultCountRequest {
	s.Lang = &v
	return s
}

func (s *DescribeResultCountRequest) SetBeginTime(v int64) *DescribeResultCountRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeResultCountRequest) SetEndTime(v int64) *DescribeResultCountRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeResultCountRequest) SetRegId(v string) *DescribeResultCountRequest {
	s.RegId = &v
	return s
}

type DescribeResultCountResponseBody struct {
	Code           *string                                        `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                        `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                        `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeResultCountResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                          `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeResultCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResultCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResultCountResponseBody) SetCode(v string) *DescribeResultCountResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeResultCountResponseBody) SetHttpStatusCode(v string) *DescribeResultCountResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeResultCountResponseBody) SetMessage(v string) *DescribeResultCountResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeResultCountResponseBody) SetRequestId(v string) *DescribeResultCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResultCountResponseBody) SetResultObject(v []*DescribeResultCountResponseBodyResultObject) *DescribeResultCountResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeResultCountResponseBody) SetSuccess(v bool) *DescribeResultCountResponseBody {
	s.Success = &v
	return s
}

type DescribeResultCountResponseBodyResultObject struct {
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	Total  *string `json:"total,omitempty" xml:"total,omitempty"`
}

func (s DescribeResultCountResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeResultCountResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeResultCountResponseBodyResultObject) SetResult(v string) *DescribeResultCountResponseBodyResultObject {
	s.Result = &v
	return s
}

func (s *DescribeResultCountResponseBodyResultObject) SetTotal(v string) *DescribeResultCountResponseBodyResultObject {
	s.Total = &v
	return s
}

type DescribeResultCountResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResultCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResultCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResultCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeResultCountResponse) SetHeaders(v map[string]*string) *DescribeResultCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeResultCountResponse) SetStatusCode(v int32) *DescribeResultCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResultCountResponse) SetBody(v *DescribeResultCountResponseBody) *DescribeResultCountResponse {
	s.Body = v
	return s
}

type DescribeRiskLineChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime *int64 `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	// This parameter is required.
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeRiskLineChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskLineChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskLineChartRequest) SetLang(v string) *DescribeRiskLineChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRiskLineChartRequest) SetBeginTime(v int64) *DescribeRiskLineChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeRiskLineChartRequest) SetEndTime(v int64) *DescribeRiskLineChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRiskLineChartRequest) SetEventCodes(v string) *DescribeRiskLineChartRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeRiskLineChartRequest) SetRegId(v string) *DescribeRiskLineChartRequest {
	s.RegId = &v
	return s
}

type DescribeRiskLineChartResponseBody struct {
	Code           *string                                        `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                        `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                        `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeRiskLineChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                          `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeRiskLineChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskLineChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskLineChartResponseBody) SetCode(v string) *DescribeRiskLineChartResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskLineChartResponseBody) SetHttpStatusCode(v string) *DescribeRiskLineChartResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeRiskLineChartResponseBody) SetMessage(v string) *DescribeRiskLineChartResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskLineChartResponseBody) SetRequestId(v string) *DescribeRiskLineChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskLineChartResponseBody) SetResultObject(v *DescribeRiskLineChartResponseBodyResultObject) *DescribeRiskLineChartResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeRiskLineChartResponseBody) SetSuccess(v bool) *DescribeRiskLineChartResponseBody {
	s.Success = &v
	return s
}

type DescribeRiskLineChartResponseBodyResultObject struct {
	Series []*DescribeRiskLineChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeRiskLineChartResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeRiskLineChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskLineChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRiskLineChartResponseBodyResultObject) SetSeries(v []*DescribeRiskLineChartResponseBodyResultObjectSeries) *DescribeRiskLineChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeRiskLineChartResponseBodyResultObject) SetXaxis(v *DescribeRiskLineChartResponseBodyResultObjectXaxis) *DescribeRiskLineChartResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeRiskLineChartResponseBodyResultObjectSeries struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string   `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeRiskLineChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskLineChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeRiskLineChartResponseBodyResultObjectSeries) SetData(v []*string) *DescribeRiskLineChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeRiskLineChartResponseBodyResultObjectSeries) SetName(v string) *DescribeRiskLineChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeRiskLineChartResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeRiskLineChartResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskLineChartResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeRiskLineChartResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeRiskLineChartResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeRiskLineChartResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskLineChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskLineChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskLineChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskLineChartResponse) SetHeaders(v map[string]*string) *DescribeRiskLineChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskLineChartResponse) SetStatusCode(v int32) *DescribeRiskLineChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskLineChartResponse) SetBody(v *DescribeRiskLineChartResponseBody) *DescribeRiskLineChartResponse {
	s.Body = v
	return s
}

type DescribeRuleBarChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime *int64 `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	// This parameter is required.
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeRuleBarChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleBarChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeRuleBarChartRequest) SetLang(v string) *DescribeRuleBarChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRuleBarChartRequest) SetBeginTime(v int64) *DescribeRuleBarChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeRuleBarChartRequest) SetEndTime(v int64) *DescribeRuleBarChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRuleBarChartRequest) SetEventCodes(v string) *DescribeRuleBarChartRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeRuleBarChartRequest) SetRegId(v string) *DescribeRuleBarChartRequest {
	s.RegId = &v
	return s
}

type DescribeRuleBarChartResponseBody struct {
	Code           *string                                       `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                       `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                       `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeRuleBarChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                         `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeRuleBarChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleBarChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRuleBarChartResponseBody) SetCode(v string) *DescribeRuleBarChartResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRuleBarChartResponseBody) SetHttpStatusCode(v string) *DescribeRuleBarChartResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeRuleBarChartResponseBody) SetMessage(v string) *DescribeRuleBarChartResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRuleBarChartResponseBody) SetRequestId(v string) *DescribeRuleBarChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRuleBarChartResponseBody) SetResultObject(v *DescribeRuleBarChartResponseBodyResultObject) *DescribeRuleBarChartResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeRuleBarChartResponseBody) SetSuccess(v bool) *DescribeRuleBarChartResponseBody {
	s.Success = &v
	return s
}

type DescribeRuleBarChartResponseBodyResultObject struct {
	Series []*DescribeRuleBarChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Yaxis  *DescribeRuleBarChartResponseBodyResultObjectYaxis    `json:"yaxis,omitempty" xml:"yaxis,omitempty" type:"Struct"`
}

func (s DescribeRuleBarChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleBarChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRuleBarChartResponseBodyResultObject) SetSeries(v []*DescribeRuleBarChartResponseBodyResultObjectSeries) *DescribeRuleBarChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeRuleBarChartResponseBodyResultObject) SetYaxis(v *DescribeRuleBarChartResponseBodyResultObjectYaxis) *DescribeRuleBarChartResponseBodyResultObject {
	s.Yaxis = v
	return s
}

type DescribeRuleBarChartResponseBodyResultObjectSeries struct {
	Data []*DescribeRuleBarChartResponseBodyResultObjectSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Type *string                                                   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeRuleBarChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleBarChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeRuleBarChartResponseBodyResultObjectSeries) SetData(v []*DescribeRuleBarChartResponseBodyResultObjectSeriesData) *DescribeRuleBarChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeRuleBarChartResponseBodyResultObjectSeries) SetType(v string) *DescribeRuleBarChartResponseBodyResultObjectSeries {
	s.Type = &v
	return s
}

type DescribeRuleBarChartResponseBodyResultObjectSeriesData struct {
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	Num       *int64  `json:"num,omitempty" xml:"num,omitempty"`
	RuleName  *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	Status    *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeRuleBarChartResponseBodyResultObjectSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleBarChartResponseBodyResultObjectSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeRuleBarChartResponseBodyResultObjectSeriesData) SetEventName(v string) *DescribeRuleBarChartResponseBodyResultObjectSeriesData {
	s.EventName = &v
	return s
}

func (s *DescribeRuleBarChartResponseBodyResultObjectSeriesData) SetNum(v int64) *DescribeRuleBarChartResponseBodyResultObjectSeriesData {
	s.Num = &v
	return s
}

func (s *DescribeRuleBarChartResponseBodyResultObjectSeriesData) SetRuleName(v string) *DescribeRuleBarChartResponseBodyResultObjectSeriesData {
	s.RuleName = &v
	return s
}

func (s *DescribeRuleBarChartResponseBodyResultObjectSeriesData) SetStatus(v string) *DescribeRuleBarChartResponseBodyResultObjectSeriesData {
	s.Status = &v
	return s
}

type DescribeRuleBarChartResponseBodyResultObjectYaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeRuleBarChartResponseBodyResultObjectYaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleBarChartResponseBodyResultObjectYaxis) GoString() string {
	return s.String()
}

func (s *DescribeRuleBarChartResponseBodyResultObjectYaxis) SetData(v []*string) *DescribeRuleBarChartResponseBodyResultObjectYaxis {
	s.Data = v
	return s
}

type DescribeRuleBarChartResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRuleBarChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRuleBarChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleBarChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeRuleBarChartResponse) SetHeaders(v map[string]*string) *DescribeRuleBarChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeRuleBarChartResponse) SetStatusCode(v int32) *DescribeRuleBarChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRuleBarChartResponse) SetBody(v *DescribeRuleBarChartResponseBody) *DescribeRuleBarChartResponse {
	s.Body = v
	return s
}

type DescribeRuleCountByUserIdRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeRuleCountByUserIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleCountByUserIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeRuleCountByUserIdRequest) SetLang(v string) *DescribeRuleCountByUserIdRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRuleCountByUserIdRequest) SetCreateType(v string) *DescribeRuleCountByUserIdRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeRuleCountByUserIdRequest) SetRegId(v string) *DescribeRuleCountByUserIdRequest {
	s.RegId = &v
	return s
}

type DescribeRuleCountByUserIdResponseBody struct {
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeRuleCountByUserIdResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeRuleCountByUserIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleCountByUserIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRuleCountByUserIdResponseBody) SetRequestId(v string) *DescribeRuleCountByUserIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRuleCountByUserIdResponseBody) SetResultObject(v *DescribeRuleCountByUserIdResponseBodyResultObject) *DescribeRuleCountByUserIdResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRuleCountByUserIdResponseBodyResultObject struct {
	Limit        *bool  `json:"limit,omitempty" xml:"limit,omitempty"`
	MaxTotalItem *int32 `json:"maxTotalItem,omitempty" xml:"maxTotalItem,omitempty"`
	TotalItem    *int32 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
}

func (s DescribeRuleCountByUserIdResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleCountByUserIdResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRuleCountByUserIdResponseBodyResultObject) SetLimit(v bool) *DescribeRuleCountByUserIdResponseBodyResultObject {
	s.Limit = &v
	return s
}

func (s *DescribeRuleCountByUserIdResponseBodyResultObject) SetMaxTotalItem(v int32) *DescribeRuleCountByUserIdResponseBodyResultObject {
	s.MaxTotalItem = &v
	return s
}

func (s *DescribeRuleCountByUserIdResponseBodyResultObject) SetTotalItem(v int32) *DescribeRuleCountByUserIdResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

type DescribeRuleCountByUserIdResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRuleCountByUserIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRuleCountByUserIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleCountByUserIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeRuleCountByUserIdResponse) SetHeaders(v map[string]*string) *DescribeRuleCountByUserIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeRuleCountByUserIdResponse) SetStatusCode(v int32) *DescribeRuleCountByUserIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRuleCountByUserIdResponse) SetBody(v *DescribeRuleCountByUserIdResponseBody) *DescribeRuleCountByUserIdResponse {
	s.Body = v
	return s
}

type DescribeRuleDetailByRuleIdRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleVersionId *int64  `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
}

func (s DescribeRuleDetailByRuleIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleDetailByRuleIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeRuleDetailByRuleIdRequest) SetLang(v string) *DescribeRuleDetailByRuleIdRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdRequest) SetConsoleRuleId(v int64) *DescribeRuleDetailByRuleIdRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdRequest) SetRegId(v string) *DescribeRuleDetailByRuleIdRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdRequest) SetRuleId(v string) *DescribeRuleDetailByRuleIdRequest {
	s.RuleId = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdRequest) SetRuleVersionId(v int64) *DescribeRuleDetailByRuleIdRequest {
	s.RuleVersionId = &v
	return s
}

type DescribeRuleDetailByRuleIdResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeRuleDetailByRuleIdResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeRuleDetailByRuleIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleDetailByRuleIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRuleDetailByRuleIdResponseBody) SetRequestId(v string) *DescribeRuleDetailByRuleIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBody) SetResultObject(v *DescribeRuleDetailByRuleIdResponseBodyResultObject) *DescribeRuleDetailByRuleIdResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRuleDetailByRuleIdResponseBodyResultObject struct {
	BizVersion      *string                `json:"bizVersion,omitempty" xml:"bizVersion,omitempty"`
	ConsoleRuleId   *int64                 `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	EventCode       *string                `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName       *string                `json:"eventName,omitempty" xml:"eventName,omitempty"`
	GmtCreate       *int64                 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified     *int64                 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	LogicExpression *string                `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	MainEventCode   *string                `json:"mainEventCode,omitempty" xml:"mainEventCode,omitempty"`
	Memo            *string                `json:"memo,omitempty" xml:"memo,omitempty"`
	RuleActionMap   map[string]interface{} `json:"ruleActionMap,omitempty" xml:"ruleActionMap,omitempty"`
	RuleActions     *string                `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleExpressions *string                `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleId          *string                `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName        *string                `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string                `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
	RuleVersionId   *int64                 `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
}

func (s DescribeRuleDetailByRuleIdResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleDetailByRuleIdResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetBizVersion(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.BizVersion = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetConsoleRuleId(v int64) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.ConsoleRuleId = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetEventCode(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetEventName(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetGmtCreate(v int64) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetGmtModified(v int64) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetLogicExpression(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.LogicExpression = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetMainEventCode(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.MainEventCode = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetMemo(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.Memo = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetRuleActionMap(v map[string]interface{}) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleActionMap = v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetRuleActions(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleActions = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetRuleExpressions(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleExpressions = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetRuleId(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetRuleName(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleName = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetRuleStatus(v string) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleStatus = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponseBodyResultObject) SetRuleVersionId(v int64) *DescribeRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleVersionId = &v
	return s
}

type DescribeRuleDetailByRuleIdResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRuleDetailByRuleIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRuleDetailByRuleIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleDetailByRuleIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeRuleDetailByRuleIdResponse) SetHeaders(v map[string]*string) *DescribeRuleDetailByRuleIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponse) SetStatusCode(v int32) *DescribeRuleDetailByRuleIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRuleDetailByRuleIdResponse) SetBody(v *DescribeRuleDetailByRuleIdResponseBody) *DescribeRuleDetailByRuleIdResponse {
	s.Body = v
	return s
}

type DescribeRuleHitRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId         *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleSnapshotId *string `json:"ruleSnapshotId,omitempty" xml:"ruleSnapshotId,omitempty"`
	SRequestId     *string `json:"sRequestId,omitempty" xml:"sRequestId,omitempty"`
}

func (s DescribeRuleHitRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleHitRequest) GoString() string {
	return s.String()
}

func (s *DescribeRuleHitRequest) SetLang(v string) *DescribeRuleHitRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRuleHitRequest) SetRegId(v string) *DescribeRuleHitRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRuleHitRequest) SetRuleId(v string) *DescribeRuleHitRequest {
	s.RuleId = &v
	return s
}

func (s *DescribeRuleHitRequest) SetRuleSnapshotId(v string) *DescribeRuleHitRequest {
	s.RuleSnapshotId = &v
	return s
}

func (s *DescribeRuleHitRequest) SetSRequestId(v string) *DescribeRuleHitRequest {
	s.SRequestId = &v
	return s
}

type DescribeRuleHitResponseBody struct {
	RequestId    *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject map[string]interface{} `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeRuleHitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleHitResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRuleHitResponseBody) SetRequestId(v string) *DescribeRuleHitResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRuleHitResponseBody) SetResultObject(v map[string]interface{}) *DescribeRuleHitResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRuleHitResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRuleHitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRuleHitResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleHitResponse) GoString() string {
	return s.String()
}

func (s *DescribeRuleHitResponse) SetHeaders(v map[string]*string) *DescribeRuleHitResponse {
	s.Headers = v
	return s
}

func (s *DescribeRuleHitResponse) SetStatusCode(v int32) *DescribeRuleHitResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRuleHitResponse) SetBody(v *DescribeRuleHitResponseBody) *DescribeRuleHitResponse {
	s.Body = v
	return s
}

type DescribeRuleListByEventCodesListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeRuleListByEventCodesListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleListByEventCodesListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRuleListByEventCodesListRequest) SetLang(v string) *DescribeRuleListByEventCodesListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRuleListByEventCodesListRequest) SetEventCodes(v string) *DescribeRuleListByEventCodesListRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeRuleListByEventCodesListRequest) SetRegId(v string) *DescribeRuleListByEventCodesListRequest {
	s.RegId = &v
	return s
}

type DescribeRuleListByEventCodesListResponseBody struct {
	RequestId    *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeRuleListByEventCodesListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeRuleListByEventCodesListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleListByEventCodesListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRuleListByEventCodesListResponseBody) SetRequestId(v string) *DescribeRuleListByEventCodesListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRuleListByEventCodesListResponseBody) SetResultObject(v []*DescribeRuleListByEventCodesListResponseBodyResultObject) *DescribeRuleListByEventCodesListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRuleListByEventCodesListResponseBodyResultObject struct {
	RuleId   *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s DescribeRuleListByEventCodesListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleListByEventCodesListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRuleListByEventCodesListResponseBodyResultObject) SetRuleId(v string) *DescribeRuleListByEventCodesListResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeRuleListByEventCodesListResponseBodyResultObject) SetRuleName(v string) *DescribeRuleListByEventCodesListResponseBodyResultObject {
	s.RuleName = &v
	return s
}

type DescribeRuleListByEventCodesListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRuleListByEventCodesListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRuleListByEventCodesListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleListByEventCodesListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRuleListByEventCodesListResponse) SetHeaders(v map[string]*string) *DescribeRuleListByEventCodesListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRuleListByEventCodesListResponse) SetStatusCode(v int32) *DescribeRuleListByEventCodesListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRuleListByEventCodesListResponse) SetBody(v *DescribeRuleListByEventCodesListResponseBody) *DescribeRuleListByEventCodesListResponse {
	s.Body = v
	return s
}

type DescribeRulePageListRequest struct {
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType   *string `json:"createType,omitempty" xml:"createType,omitempty"`
	CurrentPage  *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EventCode    *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	PageSize     *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleAuthType *string `json:"ruleAuthType,omitempty" xml:"ruleAuthType,omitempty"`
	RuleName     *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus   *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeRulePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRulePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRulePageListRequest) SetLang(v string) *DescribeRulePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRulePageListRequest) SetCreateType(v string) *DescribeRulePageListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeRulePageListRequest) SetCurrentPage(v string) *DescribeRulePageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRulePageListRequest) SetEventCode(v string) *DescribeRulePageListRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeRulePageListRequest) SetPageSize(v string) *DescribeRulePageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRulePageListRequest) SetRegId(v string) *DescribeRulePageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRulePageListRequest) SetRuleAuthType(v string) *DescribeRulePageListRequest {
	s.RuleAuthType = &v
	return s
}

func (s *DescribeRulePageListRequest) SetRuleName(v string) *DescribeRulePageListRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeRulePageListRequest) SetRuleStatus(v string) *DescribeRulePageListRequest {
	s.RuleStatus = &v
	return s
}

type DescribeRulePageListResponseBody struct {
	CurrentPage  *int32                                          `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                          `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RequestId    *string                                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeRulePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                          `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                          `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeRulePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRulePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRulePageListResponseBody) SetCurrentPage(v int32) *DescribeRulePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRulePageListResponseBody) SetPageSize(v int32) *DescribeRulePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeRulePageListResponseBody) SetRequestId(v string) *DescribeRulePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRulePageListResponseBody) SetResultObject(v []*DescribeRulePageListResponseBodyResultObject) *DescribeRulePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeRulePageListResponseBody) SetTotalItem(v int32) *DescribeRulePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeRulePageListResponseBody) SetTotalPage(v int32) *DescribeRulePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeRulePageListResponseBodyResultObject struct {
	AuthType         *string                                                   `json:"authType,omitempty" xml:"authType,omitempty"`
	ConsoleAudit     *DescribeRulePageListResponseBodyResultObjectConsoleAudit `json:"consoleAudit,omitempty" xml:"consoleAudit,omitempty" type:"Struct"`
	EventCode        *string                                                   `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName        *string                                                   `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventType        *string                                                   `json:"eventType,omitempty" xml:"eventType,omitempty"`
	ExternalRuleName *string                                                   `json:"externalRuleName,omitempty" xml:"externalRuleName,omitempty"`
	GmtCreate        *int64                                                    `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified      *int64                                                    `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id               *int64                                                    `json:"id,omitempty" xml:"id,omitempty"`
	MainRuleId       *string                                                   `json:"mainRuleId,omitempty" xml:"mainRuleId,omitempty"`
	Priority         *int64                                                    `json:"priority,omitempty" xml:"priority,omitempty"`
	RuleAuthType     *string                                                   `json:"ruleAuthType,omitempty" xml:"ruleAuthType,omitempty"`
	RuleId           *string                                                   `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleMemo         *string                                                   `json:"ruleMemo,omitempty" xml:"ruleMemo,omitempty"`
	RuleName         *string                                                   `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus       *string                                                   `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
	RuleVersionId    *int64                                                    `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
	TemplateId       *int64                                                    `json:"templateId,omitempty" xml:"templateId,omitempty"`
	Version          *int32                                                    `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeRulePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRulePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRulePageListResponseBodyResultObject) SetAuthType(v string) *DescribeRulePageListResponseBodyResultObject {
	s.AuthType = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetConsoleAudit(v *DescribeRulePageListResponseBodyResultObjectConsoleAudit) *DescribeRulePageListResponseBodyResultObject {
	s.ConsoleAudit = v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetEventCode(v string) *DescribeRulePageListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetEventName(v string) *DescribeRulePageListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetEventType(v string) *DescribeRulePageListResponseBodyResultObject {
	s.EventType = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetExternalRuleName(v string) *DescribeRulePageListResponseBodyResultObject {
	s.ExternalRuleName = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeRulePageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeRulePageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetId(v int64) *DescribeRulePageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetMainRuleId(v string) *DescribeRulePageListResponseBodyResultObject {
	s.MainRuleId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetPriority(v int64) *DescribeRulePageListResponseBodyResultObject {
	s.Priority = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetRuleAuthType(v string) *DescribeRulePageListResponseBodyResultObject {
	s.RuleAuthType = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetRuleId(v string) *DescribeRulePageListResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetRuleMemo(v string) *DescribeRulePageListResponseBodyResultObject {
	s.RuleMemo = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetRuleName(v string) *DescribeRulePageListResponseBodyResultObject {
	s.RuleName = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetRuleStatus(v string) *DescribeRulePageListResponseBodyResultObject {
	s.RuleStatus = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetRuleVersionId(v int64) *DescribeRulePageListResponseBodyResultObject {
	s.RuleVersionId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetTemplateId(v int64) *DescribeRulePageListResponseBodyResultObject {
	s.TemplateId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObject) SetVersion(v int32) *DescribeRulePageListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeRulePageListResponseBodyResultObjectConsoleAudit struct {
	ApplyUserId       *string `json:"applyUserId,omitempty" xml:"applyUserId,omitempty"`
	ApplyUserName     *string `json:"applyUserName,omitempty" xml:"applyUserName,omitempty"`
	AuditMsg          *string `json:"auditMsg,omitempty" xml:"auditMsg,omitempty"`
	AuditRealUserId   *string `json:"auditRealUserId,omitempty" xml:"auditRealUserId,omitempty"`
	AuditRealUserName *string `json:"auditRealUserName,omitempty" xml:"auditRealUserName,omitempty"`
	AuditRemark       *string `json:"auditRemark,omitempty" xml:"auditRemark,omitempty"`
	AuditStatus       *string `json:"auditStatus,omitempty" xml:"auditStatus,omitempty"`
	AuditTime         *int64  `json:"auditTime,omitempty" xml:"auditTime,omitempty"`
	AuditUserId       *string `json:"auditUserId,omitempty" xml:"auditUserId,omitempty"`
	AuditUserName     *string `json:"auditUserName,omitempty" xml:"auditUserName,omitempty"`
	GmtCreate         *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	Id                *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RelationExt       *string `json:"relationExt,omitempty" xml:"relationExt,omitempty"`
	RelationId        *int64  `json:"relationId,omitempty" xml:"relationId,omitempty"`
	RelationName      *string `json:"relationName,omitempty" xml:"relationName,omitempty"`
	RelationType      *string `json:"relationType,omitempty" xml:"relationType,omitempty"`
}

func (s DescribeRulePageListResponseBodyResultObjectConsoleAudit) String() string {
	return tea.Prettify(s)
}

func (s DescribeRulePageListResponseBodyResultObjectConsoleAudit) GoString() string {
	return s.String()
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetApplyUserId(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.ApplyUserId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetApplyUserName(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.ApplyUserName = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditMsg(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditMsg = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditRealUserId(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditRealUserId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditRealUserName(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditRealUserName = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditRemark(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditRemark = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditStatus(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditStatus = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditTime(v int64) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditTime = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditUserId(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditUserId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetAuditUserName(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditUserName = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetGmtCreate(v int64) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetId(v int64) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.Id = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetRelationExt(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationExt = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetRelationId(v int64) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationId = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetRelationName(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationName = &v
	return s
}

func (s *DescribeRulePageListResponseBodyResultObjectConsoleAudit) SetRelationType(v string) *DescribeRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationType = &v
	return s
}

type DescribeRulePageListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRulePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRulePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRulePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRulePageListResponse) SetHeaders(v map[string]*string) *DescribeRulePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRulePageListResponse) SetStatusCode(v int32) *DescribeRulePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRulePageListResponse) SetBody(v *DescribeRulePageListResponseBody) *DescribeRulePageListResponse {
	s.Body = v
	return s
}

type DescribeRuleSnapshotRequest struct {
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId          *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	SnapshotVersion *string `json:"snapshotVersion,omitempty" xml:"snapshotVersion,omitempty"`
}

func (s DescribeRuleSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleSnapshotRequest) GoString() string {
	return s.String()
}

func (s *DescribeRuleSnapshotRequest) SetLang(v string) *DescribeRuleSnapshotRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRuleSnapshotRequest) SetRegId(v string) *DescribeRuleSnapshotRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRuleSnapshotRequest) SetRuleId(v string) *DescribeRuleSnapshotRequest {
	s.RuleId = &v
	return s
}

func (s *DescribeRuleSnapshotRequest) SetSnapshotVersion(v string) *DescribeRuleSnapshotRequest {
	s.SnapshotVersion = &v
	return s
}

type DescribeRuleSnapshotResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeRuleSnapshotResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeRuleSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRuleSnapshotResponseBody) SetRequestId(v string) *DescribeRuleSnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBody) SetResultObject(v *DescribeRuleSnapshotResponseBodyResultObject) *DescribeRuleSnapshotResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRuleSnapshotResponseBodyResultObject struct {
	BizVersion      *string `json:"bizVersion,omitempty" xml:"bizVersion,omitempty"`
	EventCode       *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName       *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	GmtCreate       *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified     *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	LogicExpression *string `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	Memo            *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RuleActions     *string `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleExpressions *string `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleId          *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName        *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeRuleSnapshotResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleSnapshotResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetBizVersion(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.BizVersion = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetEventCode(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetEventName(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetGmtCreate(v int64) *DescribeRuleSnapshotResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetGmtModified(v int64) *DescribeRuleSnapshotResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetLogicExpression(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.LogicExpression = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetMemo(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.Memo = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetRuleActions(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.RuleActions = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetRuleExpressions(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.RuleExpressions = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetRuleId(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetRuleName(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.RuleName = &v
	return s
}

func (s *DescribeRuleSnapshotResponseBodyResultObject) SetRuleStatus(v string) *DescribeRuleSnapshotResponseBodyResultObject {
	s.RuleStatus = &v
	return s
}

type DescribeRuleSnapshotResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRuleSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRuleSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleSnapshotResponse) GoString() string {
	return s.String()
}

func (s *DescribeRuleSnapshotResponse) SetHeaders(v map[string]*string) *DescribeRuleSnapshotResponse {
	s.Headers = v
	return s
}

func (s *DescribeRuleSnapshotResponse) SetStatusCode(v int32) *DescribeRuleSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRuleSnapshotResponse) SetBody(v *DescribeRuleSnapshotResponseBody) *DescribeRuleSnapshotResponse {
	s.Body = v
	return s
}

type DescribeRuleVersionListRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
}

func (s DescribeRuleVersionListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleVersionListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRuleVersionListRequest) SetLang(v string) *DescribeRuleVersionListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRuleVersionListRequest) SetConsoleRuleId(v int64) *DescribeRuleVersionListRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *DescribeRuleVersionListRequest) SetRegId(v string) *DescribeRuleVersionListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeRuleVersionListRequest) SetRuleId(v string) *DescribeRuleVersionListRequest {
	s.RuleId = &v
	return s
}

type DescribeRuleVersionListResponseBody struct {
	RequestId    *string                                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeRuleVersionListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeRuleVersionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleVersionListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRuleVersionListResponseBody) SetRequestId(v string) *DescribeRuleVersionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRuleVersionListResponseBody) SetResultObject(v []*DescribeRuleVersionListResponseBodyResultObject) *DescribeRuleVersionListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeRuleVersionListResponseBodyResultObject struct {
	ConsoleAudit    *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit `json:"consoleAudit,omitempty" xml:"consoleAudit,omitempty" type:"Struct"`
	ConsoleRuleId   *int64                                                       `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	ConsoleRuleMemo *string                                                      `json:"consoleRuleMemo,omitempty" xml:"consoleRuleMemo,omitempty"`
	ConsoleRuleName *string                                                      `json:"consoleRuleName,omitempty" xml:"consoleRuleName,omitempty"`
	EventCode       *string                                                      `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventType       *string                                                      `json:"eventType,omitempty" xml:"eventType,omitempty"`
	GmtCreate       *int64                                                       `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified     *int64                                                       `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id              *int64                                                       `json:"id,omitempty" xml:"id,omitempty"`
	LastOperator    *string                                                      `json:"lastOperator,omitempty" xml:"lastOperator,omitempty"`
	Priority        *int64                                                       `json:"priority,omitempty" xml:"priority,omitempty"`
	RuleId          *string                                                      `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleStatus      *string                                                      `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
	Version         *int64                                                       `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeRuleVersionListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleVersionListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetConsoleAudit(v *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) *DescribeRuleVersionListResponseBodyResultObject {
	s.ConsoleAudit = v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetConsoleRuleId(v int64) *DescribeRuleVersionListResponseBodyResultObject {
	s.ConsoleRuleId = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetConsoleRuleMemo(v string) *DescribeRuleVersionListResponseBodyResultObject {
	s.ConsoleRuleMemo = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetConsoleRuleName(v string) *DescribeRuleVersionListResponseBodyResultObject {
	s.ConsoleRuleName = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetEventCode(v string) *DescribeRuleVersionListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetEventType(v string) *DescribeRuleVersionListResponseBodyResultObject {
	s.EventType = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeRuleVersionListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetGmtModified(v int64) *DescribeRuleVersionListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetId(v int64) *DescribeRuleVersionListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetLastOperator(v string) *DescribeRuleVersionListResponseBodyResultObject {
	s.LastOperator = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetPriority(v int64) *DescribeRuleVersionListResponseBodyResultObject {
	s.Priority = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetRuleId(v string) *DescribeRuleVersionListResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetRuleStatus(v string) *DescribeRuleVersionListResponseBodyResultObject {
	s.RuleStatus = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObject) SetVersion(v int64) *DescribeRuleVersionListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeRuleVersionListResponseBodyResultObjectConsoleAudit struct {
	ApplyUserId       *string `json:"applyUserId,omitempty" xml:"applyUserId,omitempty"`
	ApplyUserName     *string `json:"applyUserName,omitempty" xml:"applyUserName,omitempty"`
	AuditMsg          *string `json:"auditMsg,omitempty" xml:"auditMsg,omitempty"`
	AuditRealUserId   *string `json:"auditRealUserId,omitempty" xml:"auditRealUserId,omitempty"`
	AuditRealUserName *string `json:"auditRealUserName,omitempty" xml:"auditRealUserName,omitempty"`
	AuditRemark       *string `json:"auditRemark,omitempty" xml:"auditRemark,omitempty"`
	AuditStatus       *string `json:"auditStatus,omitempty" xml:"auditStatus,omitempty"`
	AuditTime         *int64  `json:"auditTime,omitempty" xml:"auditTime,omitempty"`
	AuditUserId       *string `json:"auditUserId,omitempty" xml:"auditUserId,omitempty"`
	AuditUserName     *string `json:"auditUserName,omitempty" xml:"auditUserName,omitempty"`
	GmtCreate         *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	Id                *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RelationExt       *string `json:"relationExt,omitempty" xml:"relationExt,omitempty"`
	RelationId        *int64  `json:"relationId,omitempty" xml:"relationId,omitempty"`
	RelationName      *string `json:"relationName,omitempty" xml:"relationName,omitempty"`
	RelationType      *string `json:"relationType,omitempty" xml:"relationType,omitempty"`
}

func (s DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) GoString() string {
	return s.String()
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetApplyUserId(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.ApplyUserId = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetApplyUserName(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.ApplyUserName = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditMsg(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditMsg = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditRealUserId(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditRealUserId = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditRealUserName(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditRealUserName = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditRemark(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditRemark = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditStatus(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditStatus = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditTime(v int64) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditTime = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditUserId(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditUserId = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetAuditUserName(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.AuditUserName = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetGmtCreate(v int64) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetId(v int64) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.Id = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetRelationExt(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.RelationExt = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetRelationId(v int64) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.RelationId = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetRelationName(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.RelationName = &v
	return s
}

func (s *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit) SetRelationType(v string) *DescribeRuleVersionListResponseBodyResultObjectConsoleAudit {
	s.RelationType = &v
	return s
}

type DescribeRuleVersionListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRuleVersionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRuleVersionListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRuleVersionListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRuleVersionListResponse) SetHeaders(v map[string]*string) *DescribeRuleVersionListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRuleVersionListResponse) SetStatusCode(v int32) *DescribeRuleVersionListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRuleVersionListResponse) SetBody(v *DescribeRuleVersionListResponseBody) *DescribeRuleVersionListResponse {
	s.Body = v
	return s
}

type DescribeSDKDownloadListRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	DeviceType *string `json:"deviceType,omitempty" xml:"deviceType,omitempty"`
	ListType   *string `json:"listType,omitempty" xml:"listType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSDKDownloadListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDKDownloadListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSDKDownloadListRequest) SetLang(v string) *DescribeSDKDownloadListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSDKDownloadListRequest) SetDeviceType(v string) *DescribeSDKDownloadListRequest {
	s.DeviceType = &v
	return s
}

func (s *DescribeSDKDownloadListRequest) SetListType(v string) *DescribeSDKDownloadListRequest {
	s.ListType = &v
	return s
}

func (s *DescribeSDKDownloadListRequest) SetRegId(v string) *DescribeSDKDownloadListRequest {
	s.RegId = &v
	return s
}

type DescribeSDKDownloadListResponseBody struct {
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeSDKDownloadListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeSDKDownloadListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDKDownloadListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSDKDownloadListResponseBody) SetRequestId(v string) *DescribeSDKDownloadListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBody) SetResultObject(v []*DescribeSDKDownloadListResponseBodyResultObject) *DescribeSDKDownloadListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeSDKDownloadListResponseBodyResultObject struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	Developer   *string `json:"developer,omitempty" xml:"developer,omitempty"`
	DeviceType  *string `json:"deviceType,omitempty" xml:"deviceType,omitempty"`
	DownloadUrl *string `json:"downloadUrl,omitempty" xml:"downloadUrl,omitempty"`
	Md5         *string `json:"md5,omitempty" xml:"md5,omitempty"`
	PackageName *string `json:"packageName,omitempty" xml:"packageName,omitempty"`
	PrivacyLink *string `json:"privacyLink,omitempty" xml:"privacyLink,omitempty"`
	PushTime    *string `json:"pushTime,omitempty" xml:"pushTime,omitempty"`
	SdkVersion  *string `json:"sdkVersion,omitempty" xml:"sdkVersion,omitempty"`
	Size        *string `json:"size,omitempty" xml:"size,omitempty"`
}

func (s DescribeSDKDownloadListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDKDownloadListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetDescription(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetDeveloper(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.Developer = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetDeviceType(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.DeviceType = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetDownloadUrl(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.DownloadUrl = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetMd5(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.Md5 = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetPackageName(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.PackageName = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetPrivacyLink(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.PrivacyLink = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetPushTime(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.PushTime = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetSdkVersion(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.SdkVersion = &v
	return s
}

func (s *DescribeSDKDownloadListResponseBodyResultObject) SetSize(v string) *DescribeSDKDownloadListResponseBodyResultObject {
	s.Size = &v
	return s
}

type DescribeSDKDownloadListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSDKDownloadListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSDKDownloadListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDKDownloadListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSDKDownloadListResponse) SetHeaders(v map[string]*string) *DescribeSDKDownloadListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSDKDownloadListResponse) SetStatusCode(v int32) *DescribeSDKDownloadListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSDKDownloadListResponse) SetBody(v *DescribeSDKDownloadListResponseBody) *DescribeSDKDownloadListResponse {
	s.Body = v
	return s
}

type DescribeSafConsoleRequest struct {
	Lang    *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// This parameter is required.
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s DescribeSafConsoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafConsoleRequest) GoString() string {
	return s.String()
}

func (s *DescribeSafConsoleRequest) SetLang(v string) *DescribeSafConsoleRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSafConsoleRequest) SetContent(v string) *DescribeSafConsoleRequest {
	s.Content = &v
	return s
}

func (s *DescribeSafConsoleRequest) SetService(v string) *DescribeSafConsoleRequest {
	s.Service = &v
	return s
}

type DescribeSafConsoleResponseBody struct {
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	BizData   []*string `json:"bizData,omitempty" xml:"bizData,omitempty" type:"Repeated"`
}

func (s DescribeSafConsoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafConsoleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSafConsoleResponseBody) SetRequestId(v string) *DescribeSafConsoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSafConsoleResponseBody) SetBizData(v []*string) *DescribeSafConsoleResponseBody {
	s.BizData = v
	return s
}

type DescribeSafConsoleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSafConsoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSafConsoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafConsoleResponse) GoString() string {
	return s.String()
}

func (s *DescribeSafConsoleResponse) SetHeaders(v map[string]*string) *DescribeSafConsoleResponse {
	s.Headers = v
	return s
}

func (s *DescribeSafConsoleResponse) SetStatusCode(v int32) *DescribeSafConsoleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSafConsoleResponse) SetBody(v *DescribeSafConsoleResponseBody) *DescribeSafConsoleResponse {
	s.Body = v
	return s
}

type DescribeSafDeOrderRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EndDate     *string `json:"endDate,omitempty" xml:"endDate,omitempty"`
	PageSize    *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	StartDate   *string `json:"startDate,omitempty" xml:"startDate,omitempty"`
}

func (s DescribeSafDeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafDeOrderRequest) GoString() string {
	return s.String()
}

func (s *DescribeSafDeOrderRequest) SetLang(v string) *DescribeSafDeOrderRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSafDeOrderRequest) SetCurrentPage(v int32) *DescribeSafDeOrderRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSafDeOrderRequest) SetEndDate(v string) *DescribeSafDeOrderRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeSafDeOrderRequest) SetPageSize(v int32) *DescribeSafDeOrderRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSafDeOrderRequest) SetRegId(v string) *DescribeSafDeOrderRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSafDeOrderRequest) SetStartDate(v string) *DescribeSafDeOrderRequest {
	s.StartDate = &v
	return s
}

type DescribeSafDeOrderResponseBody struct {
	RequestId    *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeSafDeOrderResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeSafDeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafDeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSafDeOrderResponseBody) SetRequestId(v string) *DescribeSafDeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSafDeOrderResponseBody) SetResultObject(v *DescribeSafDeOrderResponseBodyResultObject) *DescribeSafDeOrderResponseBody {
	s.ResultObject = v
	return s
}

type DescribeSafDeOrderResponseBodyResultObject struct {
	ExpirationDate *int64 `json:"expirationDate,omitempty" xml:"expirationDate,omitempty"`
	OpenUserType   *int32 `json:"openUserType,omitempty" xml:"openUserType,omitempty"`
}

func (s DescribeSafDeOrderResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafDeOrderResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSafDeOrderResponseBodyResultObject) SetExpirationDate(v int64) *DescribeSafDeOrderResponseBodyResultObject {
	s.ExpirationDate = &v
	return s
}

func (s *DescribeSafDeOrderResponseBodyResultObject) SetOpenUserType(v int32) *DescribeSafDeOrderResponseBodyResultObject {
	s.OpenUserType = &v
	return s
}

type DescribeSafDeOrderResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSafDeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSafDeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafDeOrderResponse) GoString() string {
	return s.String()
}

func (s *DescribeSafDeOrderResponse) SetHeaders(v map[string]*string) *DescribeSafDeOrderResponse {
	s.Headers = v
	return s
}

func (s *DescribeSafDeOrderResponse) SetStatusCode(v int32) *DescribeSafDeOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSafDeOrderResponse) SetBody(v *DescribeSafDeOrderResponseBody) *DescribeSafDeOrderResponse {
	s.Body = v
	return s
}

type DescribeSafOrderRequest struct {
	Lang             *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage      *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EndDate          *string `json:"endDate,omitempty" xml:"endDate,omitempty"`
	ExactProductCode *string `json:"exactProductCode,omitempty" xml:"exactProductCode,omitempty"`
	PageSize         *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId            *string `json:"regId,omitempty" xml:"regId,omitempty"`
	StartDate        *string `json:"startDate,omitempty" xml:"startDate,omitempty"`
}

func (s DescribeSafOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafOrderRequest) GoString() string {
	return s.String()
}

func (s *DescribeSafOrderRequest) SetLang(v string) *DescribeSafOrderRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSafOrderRequest) SetCurrentPage(v int32) *DescribeSafOrderRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSafOrderRequest) SetEndDate(v string) *DescribeSafOrderRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeSafOrderRequest) SetExactProductCode(v string) *DescribeSafOrderRequest {
	s.ExactProductCode = &v
	return s
}

func (s *DescribeSafOrderRequest) SetPageSize(v int32) *DescribeSafOrderRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSafOrderRequest) SetRegId(v string) *DescribeSafOrderRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSafOrderRequest) SetStartDate(v string) *DescribeSafOrderRequest {
	s.StartDate = &v
	return s
}

type DescribeSafOrderResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeSafOrderResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeSafOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafOrderResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSafOrderResponseBody) SetRequestId(v string) *DescribeSafOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSafOrderResponseBody) SetResultObject(v *DescribeSafOrderResponseBodyResultObject) *DescribeSafOrderResponseBody {
	s.ResultObject = v
	return s
}

type DescribeSafOrderResponseBodyResultObject struct {
	ExpirationDate *int64 `json:"expirationDate,omitempty" xml:"expirationDate,omitempty"`
}

func (s DescribeSafOrderResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafOrderResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSafOrderResponseBodyResultObject) SetExpirationDate(v int64) *DescribeSafOrderResponseBodyResultObject {
	s.ExpirationDate = &v
	return s
}

type DescribeSafOrderResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSafOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSafOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafOrderResponse) GoString() string {
	return s.String()
}

func (s *DescribeSafOrderResponse) SetHeaders(v map[string]*string) *DescribeSafOrderResponse {
	s.Headers = v
	return s
}

func (s *DescribeSafOrderResponse) SetStatusCode(v int32) *DescribeSafOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSafOrderResponse) SetBody(v *DescribeSafOrderResponseBody) *DescribeSafOrderResponse {
	s.Body = v
	return s
}

type DescribeSafStartConfigRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSafStartConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeSafStartConfigRequest) SetLang(v string) *DescribeSafStartConfigRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSafStartConfigRequest) SetRegId(v string) *DescribeSafStartConfigRequest {
	s.RegId = &v
	return s
}

type DescribeSafStartConfigResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeSafStartConfigResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeSafStartConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSafStartConfigResponseBody) SetRequestId(v string) *DescribeSafStartConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSafStartConfigResponseBody) SetResultObject(v *DescribeSafStartConfigResponseBodyResultObject) *DescribeSafStartConfigResponseBody {
	s.ResultObject = v
	return s
}

type DescribeSafStartConfigResponseBodyResultObject struct {
	DeviceTypes   []*string `json:"deviceTypes,omitempty" xml:"deviceTypes,omitempty" type:"Repeated"`
	EventCodes    []*string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty" type:"Repeated"`
	Languages     []*string `json:"languages,omitempty" xml:"languages,omitempty" type:"Repeated"`
	ServerRegions []*string `json:"serverRegions,omitempty" xml:"serverRegions,omitempty" type:"Repeated"`
}

func (s DescribeSafStartConfigResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartConfigResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSafStartConfigResponseBodyResultObject) SetDeviceTypes(v []*string) *DescribeSafStartConfigResponseBodyResultObject {
	s.DeviceTypes = v
	return s
}

func (s *DescribeSafStartConfigResponseBodyResultObject) SetEventCodes(v []*string) *DescribeSafStartConfigResponseBodyResultObject {
	s.EventCodes = v
	return s
}

func (s *DescribeSafStartConfigResponseBodyResultObject) SetLanguages(v []*string) *DescribeSafStartConfigResponseBodyResultObject {
	s.Languages = v
	return s
}

func (s *DescribeSafStartConfigResponseBodyResultObject) SetServerRegions(v []*string) *DescribeSafStartConfigResponseBodyResultObject {
	s.ServerRegions = v
	return s
}

type DescribeSafStartConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSafStartConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSafStartConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeSafStartConfigResponse) SetHeaders(v map[string]*string) *DescribeSafStartConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeSafStartConfigResponse) SetStatusCode(v int32) *DescribeSafStartConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSafStartConfigResponse) SetBody(v *DescribeSafStartConfigResponseBody) *DescribeSafStartConfigResponse {
	s.Body = v
	return s
}

type DescribeSafStartStepsRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	AliyunServer   *bool   `json:"aliyunServer,omitempty" xml:"aliyunServer,omitempty"`
	DeviceTypesStr *string `json:"deviceTypesStr,omitempty" xml:"deviceTypesStr,omitempty"`
	EventCode      *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Language       *string `json:"language,omitempty" xml:"language,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ServerRegion   *string `json:"serverRegion,omitempty" xml:"serverRegion,omitempty"`
}

func (s DescribeSafStartStepsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartStepsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSafStartStepsRequest) SetLang(v string) *DescribeSafStartStepsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSafStartStepsRequest) SetAliyunServer(v bool) *DescribeSafStartStepsRequest {
	s.AliyunServer = &v
	return s
}

func (s *DescribeSafStartStepsRequest) SetDeviceTypesStr(v string) *DescribeSafStartStepsRequest {
	s.DeviceTypesStr = &v
	return s
}

func (s *DescribeSafStartStepsRequest) SetEventCode(v string) *DescribeSafStartStepsRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeSafStartStepsRequest) SetLanguage(v string) *DescribeSafStartStepsRequest {
	s.Language = &v
	return s
}

func (s *DescribeSafStartStepsRequest) SetRegId(v string) *DescribeSafStartStepsRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSafStartStepsRequest) SetServerRegion(v string) *DescribeSafStartStepsRequest {
	s.ServerRegion = &v
	return s
}

type DescribeSafStartStepsResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeSafStartStepsResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeSafStartStepsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartStepsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSafStartStepsResponseBody) SetRequestId(v string) *DescribeSafStartStepsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSafStartStepsResponseBody) SetResultObject(v []*DescribeSafStartStepsResponseBodyResultObject) *DescribeSafStartStepsResponseBody {
	s.ResultObject = v
	return s
}

type DescribeSafStartStepsResponseBodyResultObject struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Id      *string `json:"id,omitempty" xml:"id,omitempty"`
	Type    *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeSafStartStepsResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartStepsResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSafStartStepsResponseBodyResultObject) SetContent(v string) *DescribeSafStartStepsResponseBodyResultObject {
	s.Content = &v
	return s
}

func (s *DescribeSafStartStepsResponseBodyResultObject) SetId(v string) *DescribeSafStartStepsResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeSafStartStepsResponseBodyResultObject) SetType(v string) *DescribeSafStartStepsResponseBodyResultObject {
	s.Type = &v
	return s
}

type DescribeSafStartStepsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSafStartStepsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSafStartStepsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafStartStepsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSafStartStepsResponse) SetHeaders(v map[string]*string) *DescribeSafStartStepsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSafStartStepsResponse) SetStatusCode(v int32) *DescribeSafStartStepsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSafStartStepsResponse) SetBody(v *DescribeSafStartStepsResponseBody) *DescribeSafStartStepsResponse {
	s.Body = v
	return s
}

type DescribeSafTagListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ApiId       *string `json:"apiId,omitempty" xml:"apiId,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSafTagListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafTagListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSafTagListRequest) SetLang(v string) *DescribeSafTagListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSafTagListRequest) SetApiId(v string) *DescribeSafTagListRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeSafTagListRequest) SetCurrentPage(v string) *DescribeSafTagListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSafTagListRequest) SetPageSize(v string) *DescribeSafTagListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSafTagListRequest) SetRegId(v string) *DescribeSafTagListRequest {
	s.RegId = &v
	return s
}

type DescribeSafTagListResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                        `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                        `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeSafTagListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                        `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                        `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeSafTagListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafTagListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSafTagListResponseBody) SetRequestId(v string) *DescribeSafTagListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSafTagListResponseBody) SetCurrentPage(v int32) *DescribeSafTagListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSafTagListResponseBody) SetPageSize(v int32) *DescribeSafTagListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSafTagListResponseBody) SetResultObject(v []*DescribeSafTagListResponseBodyResultObject) *DescribeSafTagListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeSafTagListResponseBody) SetTotalItem(v int32) *DescribeSafTagListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeSafTagListResponseBody) SetTotalPage(v int32) *DescribeSafTagListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeSafTagListResponseBodyResultObject struct {
	TagDesc    *string `json:"tagDesc,omitempty" xml:"tagDesc,omitempty"`
	TagMean    *string `json:"tagMean,omitempty" xml:"tagMean,omitempty"`
	TagName    *string `json:"tagName,omitempty" xml:"tagName,omitempty"`
	TagState   *string `json:"tagState,omitempty" xml:"tagState,omitempty"`
	TagType    *string `json:"tagType,omitempty" xml:"tagType,omitempty"`
	TagUid     *string `json:"tagUid,omitempty" xml:"tagUid,omitempty"`
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s DescribeSafTagListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafTagListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSafTagListResponseBodyResultObject) SetTagDesc(v string) *DescribeSafTagListResponseBodyResultObject {
	s.TagDesc = &v
	return s
}

func (s *DescribeSafTagListResponseBodyResultObject) SetTagMean(v string) *DescribeSafTagListResponseBodyResultObject {
	s.TagMean = &v
	return s
}

func (s *DescribeSafTagListResponseBodyResultObject) SetTagName(v string) *DescribeSafTagListResponseBodyResultObject {
	s.TagName = &v
	return s
}

func (s *DescribeSafTagListResponseBodyResultObject) SetTagState(v string) *DescribeSafTagListResponseBodyResultObject {
	s.TagState = &v
	return s
}

func (s *DescribeSafTagListResponseBodyResultObject) SetTagType(v string) *DescribeSafTagListResponseBodyResultObject {
	s.TagType = &v
	return s
}

func (s *DescribeSafTagListResponseBodyResultObject) SetTagUid(v string) *DescribeSafTagListResponseBodyResultObject {
	s.TagUid = &v
	return s
}

func (s *DescribeSafTagListResponseBodyResultObject) SetUpdateTime(v string) *DescribeSafTagListResponseBodyResultObject {
	s.UpdateTime = &v
	return s
}

type DescribeSafTagListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSafTagListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSafTagListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSafTagListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSafTagListResponse) SetHeaders(v map[string]*string) *DescribeSafTagListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSafTagListResponse) SetStatusCode(v int32) *DescribeSafTagListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSafTagListResponse) SetBody(v *DescribeSafTagListResponseBody) *DescribeSafTagListResponse {
	s.Body = v
	return s
}

type DescribeSampleDataListRequest struct {
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage  *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	DeleteTag    *string `json:"deleteTag,omitempty" xml:"deleteTag,omitempty"`
	PageSize     *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	QueryContent *string `json:"queryContent,omitempty" xml:"queryContent,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	SampleId     *int64  `json:"sampleId,omitempty" xml:"sampleId,omitempty"`
	Scene        *string `json:"scene,omitempty" xml:"scene,omitempty"`
	Status       *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeSampleDataListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDataListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataListRequest) SetLang(v string) *DescribeSampleDataListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetCurrentPage(v string) *DescribeSampleDataListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetDeleteTag(v string) *DescribeSampleDataListRequest {
	s.DeleteTag = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetPageSize(v string) *DescribeSampleDataListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetQueryContent(v string) *DescribeSampleDataListRequest {
	s.QueryContent = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetRegId(v string) *DescribeSampleDataListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetSampleId(v int64) *DescribeSampleDataListRequest {
	s.SampleId = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetScene(v string) *DescribeSampleDataListRequest {
	s.Scene = &v
	return s
}

func (s *DescribeSampleDataListRequest) SetStatus(v string) *DescribeSampleDataListRequest {
	s.Status = &v
	return s
}

type DescribeSampleDataListResponseBody struct {
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                            `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                            `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeSampleDataListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                            `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                            `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeSampleDataListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDataListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataListResponseBody) SetRequestId(v string) *DescribeSampleDataListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleDataListResponseBody) SetCurrentPage(v int32) *DescribeSampleDataListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSampleDataListResponseBody) SetPageSize(v int32) *DescribeSampleDataListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSampleDataListResponseBody) SetResultObject(v []*DescribeSampleDataListResponseBodyResultObject) *DescribeSampleDataListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeSampleDataListResponseBody) SetTotalItem(v int32) *DescribeSampleDataListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeSampleDataListResponseBody) SetTotalPage(v int32) *DescribeSampleDataListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeSampleDataListResponseBodyResultObject struct {
	ClassificationType *string `json:"classificationType,omitempty" xml:"classificationType,omitempty"`
	DataDistributed    *string `json:"dataDistributed,omitempty" xml:"dataDistributed,omitempty"`
	DataTitle          *string `json:"dataTitle,omitempty" xml:"dataTitle,omitempty"`
	DeleteTag          *string `json:"deleteTag,omitempty" xml:"deleteTag,omitempty"`
	Description        *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtCreate          *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified        *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id                 *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name               *string `json:"name,omitempty" xml:"name,omitempty"`
	NormalSize         *int64  `json:"normalSize,omitempty" xml:"normalSize,omitempty"`
	RecallConfig       *string `json:"recallConfig,omitempty" xml:"recallConfig,omitempty"`
	RiskSize           *int64  `json:"riskSize,omitempty" xml:"riskSize,omitempty"`
	RiskValue          *string `json:"riskValue,omitempty" xml:"riskValue,omitempty"`
	SampleLabelDetail  *string `json:"sampleLabelDetail,omitempty" xml:"sampleLabelDetail,omitempty"`
	SampleSize         *int64  `json:"sampleSize,omitempty" xml:"sampleSize,omitempty"`
	Scene              *string `json:"scene,omitempty" xml:"scene,omitempty"`
	Status             *string `json:"status,omitempty" xml:"status,omitempty"`
	StorePath          *string `json:"storePath,omitempty" xml:"storePath,omitempty"`
	StoreType          *string `json:"storeType,omitempty" xml:"storeType,omitempty"`
	SupportRecall      *string `json:"supportRecall,omitempty" xml:"supportRecall,omitempty"`
	UserId             *int64  `json:"userId,omitempty" xml:"userId,omitempty"`
	Version            *int32  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeSampleDataListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDataListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetClassificationType(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.ClassificationType = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetDataDistributed(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.DataDistributed = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetDataTitle(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.DataTitle = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetDeleteTag(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.DeleteTag = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetDescription(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeSampleDataListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetGmtModified(v int64) *DescribeSampleDataListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetId(v int64) *DescribeSampleDataListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetName(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetNormalSize(v int64) *DescribeSampleDataListResponseBodyResultObject {
	s.NormalSize = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetRecallConfig(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.RecallConfig = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetRiskSize(v int64) *DescribeSampleDataListResponseBodyResultObject {
	s.RiskSize = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetRiskValue(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.RiskValue = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetSampleLabelDetail(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.SampleLabelDetail = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetSampleSize(v int64) *DescribeSampleDataListResponseBodyResultObject {
	s.SampleSize = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetScene(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.Scene = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetStatus(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetStorePath(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.StorePath = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetStoreType(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.StoreType = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetSupportRecall(v string) *DescribeSampleDataListResponseBodyResultObject {
	s.SupportRecall = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetUserId(v int64) *DescribeSampleDataListResponseBodyResultObject {
	s.UserId = &v
	return s
}

func (s *DescribeSampleDataListResponseBodyResultObject) SetVersion(v int32) *DescribeSampleDataListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeSampleDataListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleDataListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleDataListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDataListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataListResponse) SetHeaders(v map[string]*string) *DescribeSampleDataListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleDataListResponse) SetStatusCode(v int32) *DescribeSampleDataListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleDataListResponse) SetBody(v *DescribeSampleDataListResponseBody) *DescribeSampleDataListResponse {
	s.Body = v
	return s
}

type DescribeSampleDemoDownloadUrlRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s DescribeSampleDemoDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDemoDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleDemoDownloadUrlRequest) SetLang(v string) *DescribeSampleDemoDownloadUrlRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleDemoDownloadUrlRequest) SetRegId(v string) *DescribeSampleDemoDownloadUrlRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSampleDemoDownloadUrlRequest) SetScene(v string) *DescribeSampleDemoDownloadUrlRequest {
	s.Scene = &v
	return s
}

type DescribeSampleDemoDownloadUrlResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeSampleDemoDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDemoDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleDemoDownloadUrlResponseBody) SetRequestId(v string) *DescribeSampleDemoDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleDemoDownloadUrlResponseBody) SetResultObject(v bool) *DescribeSampleDemoDownloadUrlResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeSampleDemoDownloadUrlResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleDemoDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleDemoDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDemoDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleDemoDownloadUrlResponse) SetHeaders(v map[string]*string) *DescribeSampleDemoDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleDemoDownloadUrlResponse) SetStatusCode(v int32) *DescribeSampleDemoDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleDemoDownloadUrlResponse) SetBody(v *DescribeSampleDemoDownloadUrlResponseBody) *DescribeSampleDemoDownloadUrlResponse {
	s.Body = v
	return s
}

type DescribeSampleDownloadUrlRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	SampleId *int64 `json:"sampleId,omitempty" xml:"sampleId,omitempty"`
}

func (s DescribeSampleDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleDownloadUrlRequest) SetLang(v string) *DescribeSampleDownloadUrlRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleDownloadUrlRequest) SetRegId(v string) *DescribeSampleDownloadUrlRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSampleDownloadUrlRequest) SetSampleId(v int64) *DescribeSampleDownloadUrlRequest {
	s.SampleId = &v
	return s
}

type DescribeSampleDownloadUrlResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeSampleDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleDownloadUrlResponseBody) SetRequestId(v string) *DescribeSampleDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleDownloadUrlResponseBody) SetResultObject(v bool) *DescribeSampleDownloadUrlResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeSampleDownloadUrlResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleDownloadUrlResponse) SetHeaders(v map[string]*string) *DescribeSampleDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleDownloadUrlResponse) SetStatusCode(v int32) *DescribeSampleDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleDownloadUrlResponse) SetBody(v *DescribeSampleDownloadUrlResponseBody) *DescribeSampleDownloadUrlResponse {
	s.Body = v
	return s
}

type DescribeSampleInfoRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Id       *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Versions *int32  `json:"versions,omitempty" xml:"versions,omitempty"`
}

func (s DescribeSampleInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleInfoRequest) SetLang(v string) *DescribeSampleInfoRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleInfoRequest) SetId(v int64) *DescribeSampleInfoRequest {
	s.Id = &v
	return s
}

func (s *DescribeSampleInfoRequest) SetRegId(v string) *DescribeSampleInfoRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSampleInfoRequest) SetVersions(v int32) *DescribeSampleInfoRequest {
	s.Versions = &v
	return s
}

type DescribeSampleInfoResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeSampleInfoResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeSampleInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleInfoResponseBody) SetRequestId(v string) *DescribeSampleInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleInfoResponseBody) SetResultObject(v *DescribeSampleInfoResponseBodyResultObject) *DescribeSampleInfoResponseBody {
	s.ResultObject = v
	return s
}

type DescribeSampleInfoResponseBodyResultObject struct {
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	SampleTags  *string `json:"sampleTags,omitempty" xml:"sampleTags,omitempty"`
	SampleType  *string `json:"sampleType,omitempty" xml:"sampleType,omitempty"`
	SampleValue *string `json:"sampleValue,omitempty" xml:"sampleValue,omitempty"`
	UpdateTime  *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
	Version     *int32  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeSampleInfoResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleInfoResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSampleInfoResponseBodyResultObject) SetId(v int64) *DescribeSampleInfoResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeSampleInfoResponseBodyResultObject) SetSampleTags(v string) *DescribeSampleInfoResponseBodyResultObject {
	s.SampleTags = &v
	return s
}

func (s *DescribeSampleInfoResponseBodyResultObject) SetSampleType(v string) *DescribeSampleInfoResponseBodyResultObject {
	s.SampleType = &v
	return s
}

func (s *DescribeSampleInfoResponseBodyResultObject) SetSampleValue(v string) *DescribeSampleInfoResponseBodyResultObject {
	s.SampleValue = &v
	return s
}

func (s *DescribeSampleInfoResponseBodyResultObject) SetUpdateTime(v string) *DescribeSampleInfoResponseBodyResultObject {
	s.UpdateTime = &v
	return s
}

func (s *DescribeSampleInfoResponseBodyResultObject) SetVersion(v int32) *DescribeSampleInfoResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeSampleInfoResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleInfoResponse) SetHeaders(v map[string]*string) *DescribeSampleInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleInfoResponse) SetStatusCode(v int32) *DescribeSampleInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleInfoResponse) SetBody(v *DescribeSampleInfoResponseBody) *DescribeSampleInfoResponse {
	s.Body = v
	return s
}

type DescribeSampleListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	SampleType  *string `json:"sampleType,omitempty" xml:"sampleType,omitempty"`
	SampleValue *string `json:"sampleValue,omitempty" xml:"sampleValue,omitempty"`
}

func (s DescribeSampleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleListRequest) SetLang(v string) *DescribeSampleListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleListRequest) SetCurrentPage(v int32) *DescribeSampleListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSampleListRequest) SetPageSize(v int32) *DescribeSampleListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSampleListRequest) SetRegId(v string) *DescribeSampleListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSampleListRequest) SetSampleType(v string) *DescribeSampleListRequest {
	s.SampleType = &v
	return s
}

func (s *DescribeSampleListRequest) SetSampleValue(v string) *DescribeSampleListRequest {
	s.SampleValue = &v
	return s
}

type DescribeSampleListResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                        `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                        `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeSampleListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                        `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                        `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeSampleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleListResponseBody) SetRequestId(v string) *DescribeSampleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleListResponseBody) SetCurrentPage(v int32) *DescribeSampleListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSampleListResponseBody) SetPageSize(v int32) *DescribeSampleListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSampleListResponseBody) SetResultObject(v []*DescribeSampleListResponseBodyResultObject) *DescribeSampleListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeSampleListResponseBody) SetTotalItem(v int32) *DescribeSampleListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeSampleListResponseBody) SetTotalPage(v int32) *DescribeSampleListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeSampleListResponseBodyResultObject struct {
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	SampleTags  *string `json:"sampleTags,omitempty" xml:"sampleTags,omitempty"`
	SampleType  *int32  `json:"sampleType,omitempty" xml:"sampleType,omitempty"`
	SampleValue *string `json:"sampleValue,omitempty" xml:"sampleValue,omitempty"`
	UpdateTime  *int64  `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
	Version     *int32  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeSampleListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSampleListResponseBodyResultObject) SetId(v int64) *DescribeSampleListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeSampleListResponseBodyResultObject) SetSampleTags(v string) *DescribeSampleListResponseBodyResultObject {
	s.SampleTags = &v
	return s
}

func (s *DescribeSampleListResponseBodyResultObject) SetSampleType(v int32) *DescribeSampleListResponseBodyResultObject {
	s.SampleType = &v
	return s
}

func (s *DescribeSampleListResponseBodyResultObject) SetSampleValue(v string) *DescribeSampleListResponseBodyResultObject {
	s.SampleValue = &v
	return s
}

func (s *DescribeSampleListResponseBodyResultObject) SetUpdateTime(v int64) *DescribeSampleListResponseBodyResultObject {
	s.UpdateTime = &v
	return s
}

func (s *DescribeSampleListResponseBodyResultObject) SetVersion(v int32) *DescribeSampleListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeSampleListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleListResponse) SetHeaders(v map[string]*string) *DescribeSampleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleListResponse) SetStatusCode(v int32) *DescribeSampleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleListResponse) SetBody(v *DescribeSampleListResponseBody) *DescribeSampleListResponse {
	s.Body = v
	return s
}

type DescribeSampleSceneListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSampleSceneListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSceneListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleSceneListRequest) SetLang(v string) *DescribeSampleSceneListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleSceneListRequest) SetRegId(v string) *DescribeSampleSceneListRequest {
	s.RegId = &v
	return s
}

type DescribeSampleSceneListResponseBody struct {
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                             `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                             `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeSampleSceneListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                             `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                             `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeSampleSceneListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSceneListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleSceneListResponseBody) SetRequestId(v string) *DescribeSampleSceneListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleSceneListResponseBody) SetCurrentPage(v int32) *DescribeSampleSceneListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSampleSceneListResponseBody) SetPageSize(v int32) *DescribeSampleSceneListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSampleSceneListResponseBody) SetResultObject(v []*DescribeSampleSceneListResponseBodyResultObject) *DescribeSampleSceneListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeSampleSceneListResponseBody) SetTotalItem(v int32) *DescribeSampleSceneListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeSampleSceneListResponseBody) SetTotalPage(v int32) *DescribeSampleSceneListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeSampleSceneListResponseBodyResultObject struct {
	BizType              *string `json:"bizType,omitempty" xml:"bizType,omitempty"`
	ConfigKey            *string `json:"configKey,omitempty" xml:"configKey,omitempty"`
	ConfigValue          *string `json:"configValue,omitempty" xml:"configValue,omitempty"`
	Creator              *string `json:"creator,omitempty" xml:"creator,omitempty"`
	Description          *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtCreate            *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified          *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id                   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	LastModifiedOperator *string `json:"lastModifiedOperator,omitempty" xml:"lastModifiedOperator,omitempty"`
	Status               *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeSampleSceneListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSceneListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetBizType(v string) *DescribeSampleSceneListResponseBodyResultObject {
	s.BizType = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetConfigKey(v string) *DescribeSampleSceneListResponseBodyResultObject {
	s.ConfigKey = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetConfigValue(v string) *DescribeSampleSceneListResponseBodyResultObject {
	s.ConfigValue = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetCreator(v string) *DescribeSampleSceneListResponseBodyResultObject {
	s.Creator = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetDescription(v string) *DescribeSampleSceneListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeSampleSceneListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetGmtModified(v int64) *DescribeSampleSceneListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetId(v int64) *DescribeSampleSceneListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetLastModifiedOperator(v string) *DescribeSampleSceneListResponseBodyResultObject {
	s.LastModifiedOperator = &v
	return s
}

func (s *DescribeSampleSceneListResponseBodyResultObject) SetStatus(v string) *DescribeSampleSceneListResponseBodyResultObject {
	s.Status = &v
	return s
}

type DescribeSampleSceneListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleSceneListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleSceneListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSceneListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleSceneListResponse) SetHeaders(v map[string]*string) *DescribeSampleSceneListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleSceneListResponse) SetStatusCode(v int32) *DescribeSampleSceneListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleSceneListResponse) SetBody(v *DescribeSampleSceneListResponseBody) *DescribeSampleSceneListResponse {
	s.Body = v
	return s
}

type DescribeSampleTagListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSampleTagListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleTagListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleTagListRequest) SetLang(v string) *DescribeSampleTagListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleTagListRequest) SetRegId(v string) *DescribeSampleTagListRequest {
	s.RegId = &v
	return s
}

type DescribeSampleTagListResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeSampleTagListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleTagListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleTagListResponseBody) SetRequestId(v string) *DescribeSampleTagListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleTagListResponseBody) SetResultObject(v bool) *DescribeSampleTagListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeSampleTagListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleTagListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleTagListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleTagListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleTagListResponse) SetHeaders(v map[string]*string) *DescribeSampleTagListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleTagListResponse) SetStatusCode(v int32) *DescribeSampleTagListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleTagListResponse) SetBody(v *DescribeSampleTagListResponseBody) *DescribeSampleTagListResponse {
	s.Body = v
	return s
}

type DescribeSampleUploadPolicyRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSampleUploadPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleUploadPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleUploadPolicyRequest) SetLang(v string) *DescribeSampleUploadPolicyRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSampleUploadPolicyRequest) SetRegId(v string) *DescribeSampleUploadPolicyRequest {
	s.RegId = &v
	return s
}

type DescribeSampleUploadPolicyResponseBody struct {
	AccessId  *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Key       *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	StsToken  *string `json:"StsToken,omitempty" xml:"StsToken,omitempty"`
}

func (s DescribeSampleUploadPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleUploadPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleUploadPolicyResponseBody) SetAccessId(v string) *DescribeSampleUploadPolicyResponseBody {
	s.AccessId = &v
	return s
}

func (s *DescribeSampleUploadPolicyResponseBody) SetHost(v string) *DescribeSampleUploadPolicyResponseBody {
	s.Host = &v
	return s
}

func (s *DescribeSampleUploadPolicyResponseBody) SetKey(v string) *DescribeSampleUploadPolicyResponseBody {
	s.Key = &v
	return s
}

func (s *DescribeSampleUploadPolicyResponseBody) SetPolicy(v string) *DescribeSampleUploadPolicyResponseBody {
	s.Policy = &v
	return s
}

func (s *DescribeSampleUploadPolicyResponseBody) SetRequestId(v string) *DescribeSampleUploadPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleUploadPolicyResponseBody) SetSignature(v string) *DescribeSampleUploadPolicyResponseBody {
	s.Signature = &v
	return s
}

func (s *DescribeSampleUploadPolicyResponseBody) SetStsToken(v string) *DescribeSampleUploadPolicyResponseBody {
	s.StsToken = &v
	return s
}

type DescribeSampleUploadPolicyResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleUploadPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleUploadPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleUploadPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleUploadPolicyResponse) SetHeaders(v map[string]*string) *DescribeSampleUploadPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleUploadPolicyResponse) SetStatusCode(v int32) *DescribeSampleUploadPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleUploadPolicyResponse) SetBody(v *DescribeSampleUploadPolicyResponseBody) *DescribeSampleUploadPolicyResponse {
	s.Body = v
	return s
}

type DescribeSceneAllEventNameCodeListRequest struct {
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// NORMAL
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSceneAllEventNameCodeListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneAllEventNameCodeListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneAllEventNameCodeListRequest) SetLang(v string) *DescribeSceneAllEventNameCodeListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListRequest) SetCreateType(v string) *DescribeSceneAllEventNameCodeListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListRequest) SetRegId(v string) *DescribeSceneAllEventNameCodeListRequest {
	s.RegId = &v
	return s
}

type DescribeSceneAllEventNameCodeListResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	// example:
	//
	// The input parameter data is not valid. order_storage_company_num component not found
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// AE7E6105-7DEB-5125-9B24-DCBC139F6CD2
	RequestId    *string                                                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeSceneAllEventNameCodeListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeSceneAllEventNameCodeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneAllEventNameCodeListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneAllEventNameCodeListResponseBody) SetCode(v string) *DescribeSceneAllEventNameCodeListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBody) SetHttpStatusCode(v string) *DescribeSceneAllEventNameCodeListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBody) SetMessage(v string) *DescribeSceneAllEventNameCodeListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBody) SetRequestId(v string) *DescribeSceneAllEventNameCodeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBody) SetResultObject(v []*DescribeSceneAllEventNameCodeListResponseBodyResultObject) *DescribeSceneAllEventNameCodeListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBody) SetSuccess(v bool) *DescribeSceneAllEventNameCodeListResponseBody {
	s.Success = &v
	return s
}

type DescribeSceneAllEventNameCodeListResponseBodyResultObject struct {
	Children []*DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
	// example:
	//
	// MORMAL
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	// example:
	//
	// de_aszbjb7236
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	// example:
	//
	// MAIN
	EventType *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
}

func (s DescribeSceneAllEventNameCodeListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneAllEventNameCodeListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObject) SetChildren(v []*DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren) *DescribeSceneAllEventNameCodeListResponseBodyResultObject {
	s.Children = v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObject) SetCreateType(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObject {
	s.CreateType = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObject) SetEventCode(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObject) SetEventName(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObject) SetEventType(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObject {
	s.EventType = &v
	return s
}

type DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren struct {
	// example:
	//
	// NORMAL
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	// example:
	//
	// de_aamexg3015
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	// example:
	//
	// BYPASS
	EventType *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
}

func (s DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren) GoString() string {
	return s.String()
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren) SetCreateType(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren {
	s.CreateType = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren) SetEventCode(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren {
	s.EventCode = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren) SetEventName(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren {
	s.EventName = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren) SetEventType(v string) *DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren {
	s.EventType = &v
	return s
}

type DescribeSceneAllEventNameCodeListResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneAllEventNameCodeListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneAllEventNameCodeListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneAllEventNameCodeListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneAllEventNameCodeListResponse) SetHeaders(v map[string]*string) *DescribeSceneAllEventNameCodeListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponse) SetStatusCode(v int32) *DescribeSceneAllEventNameCodeListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneAllEventNameCodeListResponse) SetBody(v *DescribeSceneAllEventNameCodeListResponseBody) *DescribeSceneAllEventNameCodeListResponse {
	s.Body = v
	return s
}

type DescribeSceneEventPageListRequest struct {
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 1
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// example:
	//
	// servicer_code
	NameOrCode *string `json:"nameOrCode,omitempty" xml:"nameOrCode,omitempty"`
	// example:
	//
	// 10
	PageSize *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSceneEventPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneEventPageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneEventPageListRequest) SetLang(v string) *DescribeSceneEventPageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSceneEventPageListRequest) SetCurrentPage(v string) *DescribeSceneEventPageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSceneEventPageListRequest) SetNameOrCode(v string) *DescribeSceneEventPageListRequest {
	s.NameOrCode = &v
	return s
}

func (s *DescribeSceneEventPageListRequest) SetPageSize(v string) *DescribeSceneEventPageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSceneEventPageListRequest) SetRegId(v string) *DescribeSceneEventPageListRequest {
	s.RegId = &v
	return s
}

type DescribeSceneEventPageListResponseBody struct {
	// example:
	//
	// 1
	CurrentPage *int32 `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// AE7E6105-7DEB-5125-9B24-DCBC139F6CD2
	RequestId    *string                                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeSceneEventPageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	// example:
	//
	// 3
	TotalItem *int32 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	// example:
	//
	// 9
	TotalPage *int32 `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeSceneEventPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneEventPageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneEventPageListResponseBody) SetCurrentPage(v int32) *DescribeSceneEventPageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBody) SetPageSize(v int32) *DescribeSceneEventPageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBody) SetRequestId(v string) *DescribeSceneEventPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBody) SetResultObject(v []*DescribeSceneEventPageListResponseBodyResultObject) *DescribeSceneEventPageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeSceneEventPageListResponseBody) SetTotalItem(v int32) *DescribeSceneEventPageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBody) SetTotalPage(v int32) *DescribeSceneEventPageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeSceneEventPageListResponseBodyResultObject struct {
	// example:
	//
	// 10
	CommonRuleCount *string `json:"commonRuleCount,omitempty" xml:"commonRuleCount,omitempty"`
	// example:
	//
	// 10
	CustomRuleCount *string `json:"customRuleCount,omitempty" xml:"customRuleCount,omitempty"`
	// example:
	//
	// de_aszbjb7236
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	// example:
	//
	// 1565701886000
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Modifier    *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// 10
	NormalRuleCount *string `json:"normalRuleCount,omitempty" xml:"normalRuleCount,omitempty"`
	// example:
	//
	// device_risk
	Service   *string `json:"service,omitempty" xml:"service,omitempty"`
	UseStatus *string `json:"useStatus,omitempty" xml:"useStatus,omitempty"`
	// example:
	//
	// 10
	WhiteBoxRuleCount *string `json:"whiteBoxRuleCount,omitempty" xml:"whiteBoxRuleCount,omitempty"`
}

func (s DescribeSceneEventPageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneEventPageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetCommonRuleCount(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.CommonRuleCount = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetCustomRuleCount(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.CustomRuleCount = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetEventCode(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetEventName(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetGmtModified(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetModifier(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.Modifier = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetNormalRuleCount(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.NormalRuleCount = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetService(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.Service = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetUseStatus(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.UseStatus = &v
	return s
}

func (s *DescribeSceneEventPageListResponseBodyResultObject) SetWhiteBoxRuleCount(v string) *DescribeSceneEventPageListResponseBodyResultObject {
	s.WhiteBoxRuleCount = &v
	return s
}

type DescribeSceneEventPageListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneEventPageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneEventPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneEventPageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneEventPageListResponse) SetHeaders(v map[string]*string) *DescribeSceneEventPageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneEventPageListResponse) SetStatusCode(v int32) *DescribeSceneEventPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneEventPageListResponse) SetBody(v *DescribeSceneEventPageListResponseBody) *DescribeSceneEventPageListResponse {
	s.Body = v
	return s
}

type DescribeSceneRulePageListRequest struct {
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// NOMAL
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	// example:
	//
	// 1
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// example:
	//
	// de_ahgctb7098
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	// example:
	//
	// 20
	PageSize *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// example:
	//
	// CUSTMER
	RuleAuthType *string `json:"ruleAuthType,omitempty" xml:"ruleAuthType,omitempty"`
	RuleName     *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// example:
	//
	// RUNNING
	RuleStatus *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeSceneRulePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneRulePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneRulePageListRequest) SetLang(v string) *DescribeSceneRulePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetCreateType(v string) *DescribeSceneRulePageListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetCurrentPage(v string) *DescribeSceneRulePageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetEventCode(v string) *DescribeSceneRulePageListRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetPageSize(v string) *DescribeSceneRulePageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetRegId(v string) *DescribeSceneRulePageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetRuleAuthType(v string) *DescribeSceneRulePageListRequest {
	s.RuleAuthType = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetRuleName(v string) *DescribeSceneRulePageListRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeSceneRulePageListRequest) SetRuleStatus(v string) *DescribeSceneRulePageListRequest {
	s.RuleStatus = &v
	return s
}

type DescribeSceneRulePageListResponseBody struct {
	// example:
	//
	// 1
	CurrentPage *int32 `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// AE7E6105-7DEB-5125-9B24-DCBC139F6CD2
	RequestId    *string                                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeSceneRulePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	// example:
	//
	// 3
	TotalItem *int32 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	// example:
	//
	// 9
	TotalPage *int32 `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeSceneRulePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneRulePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneRulePageListResponseBody) SetCurrentPage(v int32) *DescribeSceneRulePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBody) SetPageSize(v int32) *DescribeSceneRulePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBody) SetRequestId(v string) *DescribeSceneRulePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBody) SetResultObject(v []*DescribeSceneRulePageListResponseBodyResultObject) *DescribeSceneRulePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeSceneRulePageListResponseBody) SetTotalItem(v int32) *DescribeSceneRulePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBody) SetTotalPage(v int32) *DescribeSceneRulePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeSceneRulePageListResponseBodyResultObject struct {
	// example:
	//
	// admin
	AuthType     *string                                                        `json:"authType,omitempty" xml:"authType,omitempty"`
	ConsoleAudit *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit `json:"consoleAudit,omitempty" xml:"consoleAudit,omitempty" type:"Struct"`
	// example:
	//
	// de_aszbjb7236
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	// example:
	//
	// MAIN
	EventType        *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
	ExternalRuleName *string `json:"externalRuleName,omitempty" xml:"externalRuleName,omitempty"`
	// example:
	//
	// 1621578648000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1565701886000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 497
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 4399
	MainRuleId *string `json:"mainRuleId,omitempty" xml:"mainRuleId,omitempty"`
	// example:
	//
	// 10
	Priority *int64 `json:"priority,omitempty" xml:"priority,omitempty"`
	// example:
	//
	// CUSTMER
	RuleAuthType *string `json:"ruleAuthType,omitempty" xml:"ruleAuthType,omitempty"`
	// example:
	//
	// 4730
	RuleId   *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleMemo *string `json:"ruleMemo,omitempty" xml:"ruleMemo,omitempty"`
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// example:
	//
	// RUNNING
	RuleStatus *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
	// example:
	//
	// 3823
	RuleVersionId *int64 `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
	// example:
	//
	// 6
	TemplateId *int64 `json:"templateId,omitempty" xml:"templateId,omitempty"`
	// example:
	//
	// 1.0
	Version *int32 `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeSceneRulePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneRulePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetAuthType(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.AuthType = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetConsoleAudit(v *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) *DescribeSceneRulePageListResponseBodyResultObject {
	s.ConsoleAudit = v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetEventCode(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetEventName(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetEventType(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.EventType = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetExternalRuleName(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.ExternalRuleName = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeSceneRulePageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeSceneRulePageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetId(v int64) *DescribeSceneRulePageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetMainRuleId(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.MainRuleId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetPriority(v int64) *DescribeSceneRulePageListResponseBodyResultObject {
	s.Priority = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetRuleAuthType(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.RuleAuthType = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetRuleId(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetRuleMemo(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.RuleMemo = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetRuleName(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.RuleName = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetRuleStatus(v string) *DescribeSceneRulePageListResponseBodyResultObject {
	s.RuleStatus = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetRuleVersionId(v int64) *DescribeSceneRulePageListResponseBodyResultObject {
	s.RuleVersionId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetTemplateId(v int64) *DescribeSceneRulePageListResponseBodyResultObject {
	s.TemplateId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObject) SetVersion(v int32) *DescribeSceneRulePageListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit struct {
	// example:
	//
	// 1234567890999
	ApplyUserId   *string `json:"applyUserId,omitempty" xml:"applyUserId,omitempty"`
	ApplyUserName *string `json:"applyUserName,omitempty" xml:"applyUserName,omitempty"`
	AuditMsg      *string `json:"auditMsg,omitempty" xml:"auditMsg,omitempty"`
	// example:
	//
	// 1234567890
	AuditRealUserId   *string `json:"auditRealUserId,omitempty" xml:"auditRealUserId,omitempty"`
	AuditRealUserName *string `json:"auditRealUserName,omitempty" xml:"auditRealUserName,omitempty"`
	AuditRemark       *string `json:"auditRemark,omitempty" xml:"auditRemark,omitempty"`
	// example:
	//
	// AGREE
	AuditStatus *string `json:"auditStatus,omitempty" xml:"auditStatus,omitempty"`
	// example:
	//
	// 1545726028000
	AuditTime *int64 `json:"auditTime,omitempty" xml:"auditTime,omitempty"`
	// example:
	//
	// 123
	AuditUserId   *string `json:"auditUserId,omitempty" xml:"auditUserId,omitempty"`
	AuditUserName *string `json:"auditUserName,omitempty" xml:"auditUserName,omitempty"`
	// example:
	//
	// 1545726028000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1728
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// {}
	RelationExt *string `json:"relationExt,omitempty" xml:"relationExt,omitempty"`
	// example:
	//
	// 123
	RelationId *int64 `json:"relationId,omitempty" xml:"relationId,omitempty"`
	// example:
	//
	// t
	RelationName *string `json:"relationName,omitempty" xml:"relationName,omitempty"`
	// example:
	//
	// RULE
	RelationType *string `json:"relationType,omitempty" xml:"relationType,omitempty"`
}

func (s DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) GoString() string {
	return s.String()
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetApplyUserId(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.ApplyUserId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetApplyUserName(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.ApplyUserName = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditMsg(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditMsg = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditRealUserId(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditRealUserId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditRealUserName(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditRealUserName = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditRemark(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditRemark = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditStatus(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditStatus = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditTime(v int64) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditTime = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditUserId(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditUserId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetAuditUserName(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.AuditUserName = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetGmtCreate(v int64) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.GmtCreate = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetId(v int64) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.Id = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetRelationExt(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationExt = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetRelationId(v int64) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationId = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetRelationName(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationName = &v
	return s
}

func (s *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit) SetRelationType(v string) *DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit {
	s.RelationType = &v
	return s
}

type DescribeSceneRulePageListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneRulePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneRulePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneRulePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneRulePageListResponse) SetHeaders(v map[string]*string) *DescribeSceneRulePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneRulePageListResponse) SetStatusCode(v int32) *DescribeSceneRulePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneRulePageListResponse) SetBody(v *DescribeSceneRulePageListResponseBody) *DescribeSceneRulePageListResponse {
	s.Body = v
	return s
}

type DescribeScoreSectionNumLineChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime        *string `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	ByPassEventCodes *string `json:"byPassEventCodes,omitempty" xml:"byPassEventCodes,omitempty"`
	// This parameter is required.
	EndTime         *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	MainEventCodes  *string `json:"mainEventCodes,omitempty" xml:"mainEventCodes,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ShuntEventCodes *string `json:"shuntEventCodes,omitempty" xml:"shuntEventCodes,omitempty"`
}

func (s DescribeScoreSectionNumLineChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionNumLineChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionNumLineChartRequest) SetLang(v string) *DescribeScoreSectionNumLineChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartRequest) SetBeginTime(v string) *DescribeScoreSectionNumLineChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartRequest) SetByPassEventCodes(v string) *DescribeScoreSectionNumLineChartRequest {
	s.ByPassEventCodes = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartRequest) SetEndTime(v string) *DescribeScoreSectionNumLineChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartRequest) SetMainEventCodes(v string) *DescribeScoreSectionNumLineChartRequest {
	s.MainEventCodes = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartRequest) SetRegId(v string) *DescribeScoreSectionNumLineChartRequest {
	s.RegId = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartRequest) SetShuntEventCodes(v string) *DescribeScoreSectionNumLineChartRequest {
	s.ShuntEventCodes = &v
	return s
}

type DescribeScoreSectionNumLineChartResponseBody struct {
	RequestId    *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeScoreSectionNumLineChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeScoreSectionNumLineChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionNumLineChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionNumLineChartResponseBody) SetRequestId(v string) *DescribeScoreSectionNumLineChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartResponseBody) SetResultObject(v *DescribeScoreSectionNumLineChartResponseBodyResultObject) *DescribeScoreSectionNumLineChartResponseBody {
	s.ResultObject = v
	return s
}

type DescribeScoreSectionNumLineChartResponseBodyResultObject struct {
	Series []*DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeScoreSectionNumLineChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionNumLineChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionNumLineChartResponseBodyResultObject) SetSeries(v []*DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries) *DescribeScoreSectionNumLineChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeScoreSectionNumLineChartResponseBodyResultObject) SetXaxis(v *DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis) *DescribeScoreSectionNumLineChartResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string   `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries) SetData(v []*string) *DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries) SetName(v string) *DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeScoreSectionNumLineChartResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeScoreSectionNumLineChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeScoreSectionNumLineChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionNumLineChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionNumLineChartResponse) SetHeaders(v map[string]*string) *DescribeScoreSectionNumLineChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeScoreSectionNumLineChartResponse) SetStatusCode(v int32) *DescribeScoreSectionNumLineChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScoreSectionNumLineChartResponse) SetBody(v *DescribeScoreSectionNumLineChartResponseBody) *DescribeScoreSectionNumLineChartResponse {
	s.Body = v
	return s
}

type DescribeScoreSectionPieChartRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BeginTime  *int64  `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	EventType  *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeScoreSectionPieChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionPieChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionPieChartRequest) SetLang(v string) *DescribeScoreSectionPieChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeScoreSectionPieChartRequest) SetBeginTime(v int64) *DescribeScoreSectionPieChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeScoreSectionPieChartRequest) SetEndTime(v int64) *DescribeScoreSectionPieChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeScoreSectionPieChartRequest) SetEventCodes(v string) *DescribeScoreSectionPieChartRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeScoreSectionPieChartRequest) SetEventType(v string) *DescribeScoreSectionPieChartRequest {
	s.EventType = &v
	return s
}

func (s *DescribeScoreSectionPieChartRequest) SetRegId(v string) *DescribeScoreSectionPieChartRequest {
	s.RegId = &v
	return s
}

type DescribeScoreSectionPieChartResponseBody struct {
	RequestId    *string                                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeScoreSectionPieChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeScoreSectionPieChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionPieChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionPieChartResponseBody) SetRequestId(v string) *DescribeScoreSectionPieChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScoreSectionPieChartResponseBody) SetResultObject(v *DescribeScoreSectionPieChartResponseBodyResultObject) *DescribeScoreSectionPieChartResponseBody {
	s.ResultObject = v
	return s
}

type DescribeScoreSectionPieChartResponseBodyResultObject struct {
	Animation *bool                                                         `json:"animation,omitempty" xml:"animation,omitempty"`
	Grid      *DescribeScoreSectionPieChartResponseBodyResultObjectGrid     `json:"grid,omitempty" xml:"grid,omitempty" type:"Struct"`
	Series    []*DescribeScoreSectionPieChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
}

func (s DescribeScoreSectionPieChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionPieChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObject) SetAnimation(v bool) *DescribeScoreSectionPieChartResponseBodyResultObject {
	s.Animation = &v
	return s
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObject) SetGrid(v *DescribeScoreSectionPieChartResponseBodyResultObjectGrid) *DescribeScoreSectionPieChartResponseBodyResultObject {
	s.Grid = v
	return s
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObject) SetSeries(v []*DescribeScoreSectionPieChartResponseBodyResultObjectSeries) *DescribeScoreSectionPieChartResponseBodyResultObject {
	s.Series = v
	return s
}

type DescribeScoreSectionPieChartResponseBodyResultObjectGrid struct {
	Show *bool `json:"show,omitempty" xml:"show,omitempty"`
}

func (s DescribeScoreSectionPieChartResponseBodyResultObjectGrid) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionPieChartResponseBodyResultObjectGrid) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObjectGrid) SetShow(v bool) *DescribeScoreSectionPieChartResponseBodyResultObjectGrid {
	s.Show = &v
	return s
}

type DescribeScoreSectionPieChartResponseBodyResultObjectSeries struct {
	Data     []*DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name     *string                                                           `json:"name,omitempty" xml:"name,omitempty"`
	RoseType *bool                                                             `json:"roseType,omitempty" xml:"roseType,omitempty"`
}

func (s DescribeScoreSectionPieChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionPieChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObjectSeries) SetData(v []*DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData) *DescribeScoreSectionPieChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObjectSeries) SetName(v string) *DescribeScoreSectionPieChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObjectSeries) SetRoseType(v bool) *DescribeScoreSectionPieChartResponseBodyResultObjectSeries {
	s.RoseType = &v
	return s
}

type DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData) SetName(v string) *DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData {
	s.Name = &v
	return s
}

func (s *DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData) SetValue(v string) *DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData {
	s.Value = &v
	return s
}

type DescribeScoreSectionPieChartResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeScoreSectionPieChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeScoreSectionPieChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionPieChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionPieChartResponse) SetHeaders(v map[string]*string) *DescribeScoreSectionPieChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeScoreSectionPieChartResponse) SetStatusCode(v int32) *DescribeScoreSectionPieChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScoreSectionPieChartResponse) SetBody(v *DescribeScoreSectionPieChartResponseBody) *DescribeScoreSectionPieChartResponse {
	s.Body = v
	return s
}

type DescribeScoreSectionRatioLineChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime        *string `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	ByPassEventCodes *string `json:"byPassEventCodes,omitempty" xml:"byPassEventCodes,omitempty"`
	// This parameter is required.
	EndTime         *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	MainEventCodes  *string `json:"mainEventCodes,omitempty" xml:"mainEventCodes,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ShuntEventCodes *string `json:"shuntEventCodes,omitempty" xml:"shuntEventCodes,omitempty"`
}

func (s DescribeScoreSectionRatioLineChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionRatioLineChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionRatioLineChartRequest) SetLang(v string) *DescribeScoreSectionRatioLineChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartRequest) SetBeginTime(v string) *DescribeScoreSectionRatioLineChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartRequest) SetByPassEventCodes(v string) *DescribeScoreSectionRatioLineChartRequest {
	s.ByPassEventCodes = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartRequest) SetEndTime(v string) *DescribeScoreSectionRatioLineChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartRequest) SetMainEventCodes(v string) *DescribeScoreSectionRatioLineChartRequest {
	s.MainEventCodes = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartRequest) SetRegId(v string) *DescribeScoreSectionRatioLineChartRequest {
	s.RegId = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartRequest) SetShuntEventCodes(v string) *DescribeScoreSectionRatioLineChartRequest {
	s.ShuntEventCodes = &v
	return s
}

type DescribeScoreSectionRatioLineChartResponseBody struct {
	RequestId    *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeScoreSectionRatioLineChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeScoreSectionRatioLineChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionRatioLineChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionRatioLineChartResponseBody) SetRequestId(v string) *DescribeScoreSectionRatioLineChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartResponseBody) SetResultObject(v *DescribeScoreSectionRatioLineChartResponseBodyResultObject) *DescribeScoreSectionRatioLineChartResponseBody {
	s.ResultObject = v
	return s
}

type DescribeScoreSectionRatioLineChartResponseBodyResultObject struct {
	Series []*DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeScoreSectionRatioLineChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionRatioLineChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionRatioLineChartResponseBodyResultObject) SetSeries(v []*DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries) *DescribeScoreSectionRatioLineChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeScoreSectionRatioLineChartResponseBodyResultObject) SetXaxis(v *DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis) *DescribeScoreSectionRatioLineChartResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string   `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries) SetData(v []*string) *DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries) SetName(v string) *DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeScoreSectionRatioLineChartResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeScoreSectionRatioLineChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeScoreSectionRatioLineChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScoreSectionRatioLineChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeScoreSectionRatioLineChartResponse) SetHeaders(v map[string]*string) *DescribeScoreSectionRatioLineChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeScoreSectionRatioLineChartResponse) SetStatusCode(v int32) *DescribeScoreSectionRatioLineChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScoreSectionRatioLineChartResponse) SetBody(v *DescribeScoreSectionRatioLineChartResponseBody) *DescribeScoreSectionRatioLineChartResponse {
	s.Body = v
	return s
}

type DescribeSelectItemRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSelectItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelectItemRequest) GoString() string {
	return s.String()
}

func (s *DescribeSelectItemRequest) SetLang(v string) *DescribeSelectItemRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSelectItemRequest) SetRegId(v string) *DescribeSelectItemRequest {
	s.RegId = &v
	return s
}

type DescribeSelectItemResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeSelectItemResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeSelectItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelectItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSelectItemResponseBody) SetRequestId(v string) *DescribeSelectItemResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSelectItemResponseBody) SetResultObject(v *DescribeSelectItemResponseBodyResultObject) *DescribeSelectItemResponseBody {
	s.ResultObject = v
	return s
}

type DescribeSelectItemResponseBodyResultObject struct {
	MonitorStatusList []*string `json:"monitorStatusList,omitempty" xml:"monitorStatusList,omitempty" type:"Repeated"`
	TaskIdList        []*string `json:"taskIdList,omitempty" xml:"taskIdList,omitempty" type:"Repeated"`
}

func (s DescribeSelectItemResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelectItemResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeSelectItemResponseBodyResultObject) SetMonitorStatusList(v []*string) *DescribeSelectItemResponseBodyResultObject {
	s.MonitorStatusList = v
	return s
}

func (s *DescribeSelectItemResponseBodyResultObject) SetTaskIdList(v []*string) *DescribeSelectItemResponseBodyResultObject {
	s.TaskIdList = v
	return s
}

type DescribeSelectItemResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSelectItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSelectItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelectItemResponse) GoString() string {
	return s.String()
}

func (s *DescribeSelectItemResponse) SetHeaders(v map[string]*string) *DescribeSelectItemResponse {
	s.Headers = v
	return s
}

func (s *DescribeSelectItemResponse) SetStatusCode(v int32) *DescribeSelectItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSelectItemResponse) SetBody(v *DescribeSelectItemResponseBody) *DescribeSelectItemResponse {
	s.Body = v
	return s
}

type DescribeServiceAppKeyRequest struct {
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeServiceAppKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceAppKeyRequest) GoString() string {
	return s.String()
}

func (s *DescribeServiceAppKeyRequest) SetRegId(v string) *DescribeServiceAppKeyRequest {
	s.RegId = &v
	return s
}

type DescribeServiceAppKeyResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Uccess         *bool   `json:"uccess,omitempty" xml:"uccess,omitempty"`
}

func (s DescribeServiceAppKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceAppKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServiceAppKeyResponseBody) SetCode(v string) *DescribeServiceAppKeyResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeServiceAppKeyResponseBody) SetHttpStatusCode(v string) *DescribeServiceAppKeyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeServiceAppKeyResponseBody) SetMessage(v string) *DescribeServiceAppKeyResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeServiceAppKeyResponseBody) SetRequestId(v string) *DescribeServiceAppKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServiceAppKeyResponseBody) SetResultObject(v bool) *DescribeServiceAppKeyResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeServiceAppKeyResponseBody) SetUccess(v bool) *DescribeServiceAppKeyResponseBody {
	s.Uccess = &v
	return s
}

type DescribeServiceAppKeyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeServiceAppKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeServiceAppKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceAppKeyResponse) GoString() string {
	return s.String()
}

func (s *DescribeServiceAppKeyResponse) SetHeaders(v map[string]*string) *DescribeServiceAppKeyResponse {
	s.Headers = v
	return s
}

func (s *DescribeServiceAppKeyResponse) SetStatusCode(v int32) *DescribeServiceAppKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServiceAppKeyResponse) SetBody(v *DescribeServiceAppKeyResponseBody) *DescribeServiceAppKeyResponse {
	s.Body = v
	return s
}

type DescribeServiceConsumeRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	// This parameter is required.
	EndDate  *string `json:"endDate,omitempty" xml:"endDate,omitempty"`
	PageSize *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
	// This parameter is required.
	StartDate *string `json:"startDate,omitempty" xml:"startDate,omitempty"`
}

func (s DescribeServiceConsumeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeRequest) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeRequest) SetLang(v string) *DescribeServiceConsumeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeServiceConsumeRequest) SetCurrentPage(v string) *DescribeServiceConsumeRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeServiceConsumeRequest) SetEndDate(v string) *DescribeServiceConsumeRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeServiceConsumeRequest) SetPageSize(v string) *DescribeServiceConsumeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeServiceConsumeRequest) SetRegId(v string) *DescribeServiceConsumeRequest {
	s.RegId = &v
	return s
}

func (s *DescribeServiceConsumeRequest) SetServiceCode(v string) *DescribeServiceConsumeRequest {
	s.ServiceCode = &v
	return s
}

func (s *DescribeServiceConsumeRequest) SetStartDate(v string) *DescribeServiceConsumeRequest {
	s.StartDate = &v
	return s
}

type DescribeServiceConsumeResponseBody struct {
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ConsumeRecords []*DescribeServiceConsumeResponseBodyConsumeRecords `json:"consumeRecords,omitempty" xml:"consumeRecords,omitempty" type:"Repeated"`
	CurrentPage    *int32                                              `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize       *int32                                              `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	TotalItem      *int32                                              `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage      *int32                                              `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeServiceConsumeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeResponseBody) SetRequestId(v string) *DescribeServiceConsumeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServiceConsumeResponseBody) SetConsumeRecords(v []*DescribeServiceConsumeResponseBodyConsumeRecords) *DescribeServiceConsumeResponseBody {
	s.ConsumeRecords = v
	return s
}

func (s *DescribeServiceConsumeResponseBody) SetCurrentPage(v int32) *DescribeServiceConsumeResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeServiceConsumeResponseBody) SetPageSize(v int32) *DescribeServiceConsumeResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeServiceConsumeResponseBody) SetTotalItem(v int32) *DescribeServiceConsumeResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeServiceConsumeResponseBody) SetTotalPage(v int32) *DescribeServiceConsumeResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeServiceConsumeResponseBodyConsumeRecords struct {
	Date    *string                                                    `json:"date,omitempty" xml:"date,omitempty"`
	Records []*DescribeServiceConsumeResponseBodyConsumeRecordsRecords `json:"records,omitempty" xml:"records,omitempty" type:"Repeated"`
}

func (s DescribeServiceConsumeResponseBodyConsumeRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeResponseBodyConsumeRecords) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeResponseBodyConsumeRecords) SetDate(v string) *DescribeServiceConsumeResponseBodyConsumeRecords {
	s.Date = &v
	return s
}

func (s *DescribeServiceConsumeResponseBodyConsumeRecords) SetRecords(v []*DescribeServiceConsumeResponseBodyConsumeRecordsRecords) *DescribeServiceConsumeResponseBodyConsumeRecords {
	s.Records = v
	return s
}

type DescribeServiceConsumeResponseBodyConsumeRecordsRecords struct {
	Count       *int32  `json:"count,omitempty" xml:"count,omitempty"`
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
}

func (s DescribeServiceConsumeResponseBodyConsumeRecordsRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeResponseBodyConsumeRecordsRecords) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeResponseBodyConsumeRecordsRecords) SetCount(v int32) *DescribeServiceConsumeResponseBodyConsumeRecordsRecords {
	s.Count = &v
	return s
}

func (s *DescribeServiceConsumeResponseBodyConsumeRecordsRecords) SetServiceCode(v string) *DescribeServiceConsumeResponseBodyConsumeRecordsRecords {
	s.ServiceCode = &v
	return s
}

type DescribeServiceConsumeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeServiceConsumeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeServiceConsumeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeResponse) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeResponse) SetHeaders(v map[string]*string) *DescribeServiceConsumeResponse {
	s.Headers = v
	return s
}

func (s *DescribeServiceConsumeResponse) SetStatusCode(v int32) *DescribeServiceConsumeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServiceConsumeResponse) SetBody(v *DescribeServiceConsumeResponseBody) *DescribeServiceConsumeResponse {
	s.Body = v
	return s
}

type DescribeServiceConsumeDownloadUrlRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	EndDate *string `json:"endDate,omitempty" xml:"endDate,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
	// This parameter is required.
	StartDate *string `json:"startDate,omitempty" xml:"startDate,omitempty"`
}

func (s DescribeServiceConsumeDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeDownloadUrlRequest) SetLang(v string) *DescribeServiceConsumeDownloadUrlRequest {
	s.Lang = &v
	return s
}

func (s *DescribeServiceConsumeDownloadUrlRequest) SetEndDate(v string) *DescribeServiceConsumeDownloadUrlRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeServiceConsumeDownloadUrlRequest) SetRegId(v string) *DescribeServiceConsumeDownloadUrlRequest {
	s.RegId = &v
	return s
}

func (s *DescribeServiceConsumeDownloadUrlRequest) SetServiceCode(v string) *DescribeServiceConsumeDownloadUrlRequest {
	s.ServiceCode = &v
	return s
}

func (s *DescribeServiceConsumeDownloadUrlRequest) SetStartDate(v string) *DescribeServiceConsumeDownloadUrlRequest {
	s.StartDate = &v
	return s
}

type DescribeServiceConsumeDownloadUrlResponseBody struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DownloadFileUrl *string `json:"downloadFileUrl,omitempty" xml:"downloadFileUrl,omitempty"`
}

func (s DescribeServiceConsumeDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeDownloadUrlResponseBody) SetRequestId(v string) *DescribeServiceConsumeDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServiceConsumeDownloadUrlResponseBody) SetDownloadFileUrl(v string) *DescribeServiceConsumeDownloadUrlResponseBody {
	s.DownloadFileUrl = &v
	return s
}

type DescribeServiceConsumeDownloadUrlResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeServiceConsumeDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeServiceConsumeDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceConsumeDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeServiceConsumeDownloadUrlResponse) SetHeaders(v map[string]*string) *DescribeServiceConsumeDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeServiceConsumeDownloadUrlResponse) SetStatusCode(v int32) *DescribeServiceConsumeDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServiceConsumeDownloadUrlResponse) SetBody(v *DescribeServiceConsumeDownloadUrlResponseBody) *DescribeServiceConsumeDownloadUrlResponse {
	s.Body = v
	return s
}

type DescribeServiceListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeServiceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeServiceListRequest) SetLang(v string) *DescribeServiceListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeServiceListRequest) SetRegId(v string) *DescribeServiceListRequest {
	s.RegId = &v
	return s
}

type DescribeServiceListResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*DescribeServiceListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s DescribeServiceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServiceListResponseBody) SetRequestId(v string) *DescribeServiceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServiceListResponseBody) SetResultObject(v []*DescribeServiceListResponseBodyResultObject) *DescribeServiceListResponseBody {
	s.ResultObject = v
	return s
}

type DescribeServiceListResponseBodyResultObject struct {
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
	ServiceName *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
}

func (s DescribeServiceListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeServiceListResponseBodyResultObject) SetServiceCode(v string) *DescribeServiceListResponseBodyResultObject {
	s.ServiceCode = &v
	return s
}

func (s *DescribeServiceListResponseBodyResultObject) SetServiceName(v string) *DescribeServiceListResponseBodyResultObject {
	s.ServiceName = &v
	return s
}

type DescribeServiceListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeServiceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeServiceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeServiceListResponse) SetHeaders(v map[string]*string) *DescribeServiceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeServiceListResponse) SetStatusCode(v int32) *DescribeServiceListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServiceListResponse) SetBody(v *DescribeServiceListResponseBody) *DescribeServiceListResponse {
	s.Body = v
	return s
}

type DescribeSimulationPreditInfoRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	RegId     *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	RulesStr *string `json:"rulesStr,omitempty" xml:"rulesStr,omitempty"`
}

func (s DescribeSimulationPreditInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationPreditInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeSimulationPreditInfoRequest) SetLang(v string) *DescribeSimulationPreditInfoRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSimulationPreditInfoRequest) SetEventCode(v string) *DescribeSimulationPreditInfoRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeSimulationPreditInfoRequest) SetRegId(v string) *DescribeSimulationPreditInfoRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSimulationPreditInfoRequest) SetRulesStr(v string) *DescribeSimulationPreditInfoRequest {
	s.RulesStr = &v
	return s
}

type DescribeSimulationPreditInfoResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeSimulationPreditInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationPreditInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSimulationPreditInfoResponseBody) SetRequestId(v string) *DescribeSimulationPreditInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSimulationPreditInfoResponseBody) SetResultObject(v bool) *DescribeSimulationPreditInfoResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeSimulationPreditInfoResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSimulationPreditInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSimulationPreditInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationPreditInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeSimulationPreditInfoResponse) SetHeaders(v map[string]*string) *DescribeSimulationPreditInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeSimulationPreditInfoResponse) SetStatusCode(v int32) *DescribeSimulationPreditInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSimulationPreditInfoResponse) SetBody(v *DescribeSimulationPreditInfoResponseBody) *DescribeSimulationPreditInfoResponse {
	s.Body = v
	return s
}

type DescribeSimulationTaskCountRequest struct {
	Lang             *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	DataSourceConfig *string `json:"dataSourceConfig,omitempty" xml:"dataSourceConfig,omitempty"`
	DataSourceType   *string `json:"dataSourceType,omitempty" xml:"dataSourceType,omitempty"`
	// This parameter is required.
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// This parameter is required.
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	FiltersStr *string `json:"filtersStr,omitempty" xml:"filtersStr,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s DescribeSimulationTaskCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationTaskCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeSimulationTaskCountRequest) SetLang(v string) *DescribeSimulationTaskCountRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSimulationTaskCountRequest) SetDataSourceConfig(v string) *DescribeSimulationTaskCountRequest {
	s.DataSourceConfig = &v
	return s
}

func (s *DescribeSimulationTaskCountRequest) SetDataSourceType(v string) *DescribeSimulationTaskCountRequest {
	s.DataSourceType = &v
	return s
}

func (s *DescribeSimulationTaskCountRequest) SetEndTime(v int64) *DescribeSimulationTaskCountRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSimulationTaskCountRequest) SetEventCode(v string) *DescribeSimulationTaskCountRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeSimulationTaskCountRequest) SetFiltersStr(v string) *DescribeSimulationTaskCountRequest {
	s.FiltersStr = &v
	return s
}

func (s *DescribeSimulationTaskCountRequest) SetRegId(v string) *DescribeSimulationTaskCountRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSimulationTaskCountRequest) SetStartTime(v int64) *DescribeSimulationTaskCountRequest {
	s.StartTime = &v
	return s
}

type DescribeSimulationTaskCountResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeSimulationTaskCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationTaskCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSimulationTaskCountResponseBody) SetRequestId(v string) *DescribeSimulationTaskCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSimulationTaskCountResponseBody) SetResultObject(v bool) *DescribeSimulationTaskCountResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeSimulationTaskCountResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSimulationTaskCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSimulationTaskCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationTaskCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeSimulationTaskCountResponse) SetHeaders(v map[string]*string) *DescribeSimulationTaskCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeSimulationTaskCountResponse) SetStatusCode(v int32) *DescribeSimulationTaskCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSimulationTaskCountResponse) SetBody(v *DescribeSimulationTaskCountResponseBody) *DescribeSimulationTaskCountResponse {
	s.Body = v
	return s
}

type DescribeSimulationTaskListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Id          *string `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeSimulationTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationTaskListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSimulationTaskListRequest) SetLang(v string) *DescribeSimulationTaskListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSimulationTaskListRequest) SetCurrentPage(v string) *DescribeSimulationTaskListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSimulationTaskListRequest) SetId(v string) *DescribeSimulationTaskListRequest {
	s.Id = &v
	return s
}

func (s *DescribeSimulationTaskListRequest) SetName(v string) *DescribeSimulationTaskListRequest {
	s.Name = &v
	return s
}

func (s *DescribeSimulationTaskListRequest) SetPageSize(v string) *DescribeSimulationTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSimulationTaskListRequest) SetRegId(v string) *DescribeSimulationTaskListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeSimulationTaskListRequest) SetTitle(v string) *DescribeSimulationTaskListRequest {
	s.Title = &v
	return s
}

type DescribeSimulationTaskListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	TotalItem    *int32  `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32  `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeSimulationTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSimulationTaskListResponseBody) SetRequestId(v string) *DescribeSimulationTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSimulationTaskListResponseBody) SetCurrentPage(v int32) *DescribeSimulationTaskListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSimulationTaskListResponseBody) SetPageSize(v int32) *DescribeSimulationTaskListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSimulationTaskListResponseBody) SetResultObject(v bool) *DescribeSimulationTaskListResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeSimulationTaskListResponseBody) SetTotalItem(v int32) *DescribeSimulationTaskListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeSimulationTaskListResponseBody) SetTotalPage(v int32) *DescribeSimulationTaskListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeSimulationTaskListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSimulationTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSimulationTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimulationTaskListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSimulationTaskListResponse) SetHeaders(v map[string]*string) *DescribeSimulationTaskListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSimulationTaskListResponse) SetStatusCode(v int32) *DescribeSimulationTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSimulationTaskListResponse) SetBody(v *DescribeSimulationTaskListResponseBody) *DescribeSimulationTaskListResponse {
	s.Body = v
	return s
}

type DescribeSlsUrlConfigRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSlsUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlsUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlsUrlConfigRequest) SetLang(v string) *DescribeSlsUrlConfigRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSlsUrlConfigRequest) SetRegId(v string) *DescribeSlsUrlConfigRequest {
	s.RegId = &v
	return s
}

type DescribeSlsUrlConfigResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *string `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeSlsUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlsUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSlsUrlConfigResponseBody) SetRequestId(v string) *DescribeSlsUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSlsUrlConfigResponseBody) SetResultObject(v string) *DescribeSlsUrlConfigResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeSlsUrlConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSlsUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSlsUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlsUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlsUrlConfigResponse) SetHeaders(v map[string]*string) *DescribeSlsUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeSlsUrlConfigResponse) SetStatusCode(v int32) *DescribeSlsUrlConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSlsUrlConfigResponse) SetBody(v *DescribeSlsUrlConfigResponseBody) *DescribeSlsUrlConfigResponse {
	s.Body = v
	return s
}

type DescribeSupportRuleListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	RegId     *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeSupportRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportRuleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSupportRuleListRequest) SetLang(v string) *DescribeSupportRuleListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSupportRuleListRequest) SetEventCode(v string) *DescribeSupportRuleListRequest {
	s.EventCode = &v
	return s
}

func (s *DescribeSupportRuleListRequest) SetRegId(v string) *DescribeSupportRuleListRequest {
	s.RegId = &v
	return s
}

type DescribeSupportRuleListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeSupportRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSupportRuleListResponseBody) SetRequestId(v string) *DescribeSupportRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSupportRuleListResponseBody) SetResultObject(v bool) *DescribeSupportRuleListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeSupportRuleListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSupportRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSupportRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportRuleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSupportRuleListResponse) SetHeaders(v map[string]*string) *DescribeSupportRuleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSupportRuleListResponse) SetStatusCode(v int32) *DescribeSupportRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSupportRuleListResponse) SetBody(v *DescribeSupportRuleListResponseBody) *DescribeSupportRuleListResponse {
	s.Body = v
	return s
}

type DescribeTagListRequest struct {
	Id    *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
}

func (s DescribeTagListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagListRequest) SetId(v string) *DescribeTagListRequest {
	s.Id = &v
	return s
}

func (s *DescribeTagListRequest) SetLang(v string) *DescribeTagListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTagListRequest) SetRegId(v string) *DescribeTagListRequest {
	s.RegId = &v
	return s
}

type DescribeTagListResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject   *string `json:"ResultObject,omitempty" xml:"ResultObject,omitempty"`
}

func (s DescribeTagListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagListResponseBody) SetCode(v string) *DescribeTagListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTagListResponseBody) SetHttpStatusCode(v string) *DescribeTagListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTagListResponseBody) SetMessage(v string) *DescribeTagListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTagListResponseBody) SetRequestId(v string) *DescribeTagListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagListResponseBody) SetResultObject(v string) *DescribeTagListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeTagListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagListResponse) SetHeaders(v map[string]*string) *DescribeTagListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagListResponse) SetStatusCode(v int32) *DescribeTagListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagListResponse) SetBody(v *DescribeTagListResponseBody) *DescribeTagListResponse {
	s.Body = v
	return s
}

type DescribeTagsBarChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime *int64 `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	// This parameter is required.
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Result     *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DescribeTagsBarChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsBarChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsBarChartRequest) SetLang(v string) *DescribeTagsBarChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTagsBarChartRequest) SetBeginTime(v int64) *DescribeTagsBarChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeTagsBarChartRequest) SetEndTime(v int64) *DescribeTagsBarChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTagsBarChartRequest) SetEventCodes(v string) *DescribeTagsBarChartRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeTagsBarChartRequest) SetRegId(v string) *DescribeTagsBarChartRequest {
	s.RegId = &v
	return s
}

func (s *DescribeTagsBarChartRequest) SetResult(v string) *DescribeTagsBarChartRequest {
	s.Result = &v
	return s
}

type DescribeTagsBarChartResponseBody struct {
	Code           *string                                       `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                       `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                       `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeTagsBarChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                         `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeTagsBarChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsBarChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsBarChartResponseBody) SetCode(v string) *DescribeTagsBarChartResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTagsBarChartResponseBody) SetHttpStatusCode(v string) *DescribeTagsBarChartResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTagsBarChartResponseBody) SetMessage(v string) *DescribeTagsBarChartResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTagsBarChartResponseBody) SetRequestId(v string) *DescribeTagsBarChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsBarChartResponseBody) SetResultObject(v *DescribeTagsBarChartResponseBodyResultObject) *DescribeTagsBarChartResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeTagsBarChartResponseBody) SetSuccess(v bool) *DescribeTagsBarChartResponseBody {
	s.Success = &v
	return s
}

type DescribeTagsBarChartResponseBodyResultObject struct {
	Series []*DescribeTagsBarChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeTagsBarChartResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeTagsBarChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsBarChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTagsBarChartResponseBodyResultObject) SetSeries(v []*DescribeTagsBarChartResponseBodyResultObjectSeries) *DescribeTagsBarChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeTagsBarChartResponseBodyResultObject) SetXaxis(v *DescribeTagsBarChartResponseBodyResultObjectXaxis) *DescribeTagsBarChartResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeTagsBarChartResponseBodyResultObjectSeries struct {
	Data  []*DescribeTagsBarChartResponseBodyResultObjectSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name  *string                                                   `json:"name,omitempty" xml:"name,omitempty"`
	Stack *string                                                   `json:"stack,omitempty" xml:"stack,omitempty"`
}

func (s DescribeTagsBarChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsBarChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeTagsBarChartResponseBodyResultObjectSeries) SetData(v []*DescribeTagsBarChartResponseBodyResultObjectSeriesData) *DescribeTagsBarChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeTagsBarChartResponseBodyResultObjectSeries) SetName(v string) *DescribeTagsBarChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

func (s *DescribeTagsBarChartResponseBodyResultObjectSeries) SetStack(v string) *DescribeTagsBarChartResponseBodyResultObjectSeries {
	s.Stack = &v
	return s
}

type DescribeTagsBarChartResponseBodyResultObjectSeriesData struct {
	Num   *int64  `json:"num,omitempty" xml:"num,omitempty"`
	Scale *string `json:"scale,omitempty" xml:"scale,omitempty"`
}

func (s DescribeTagsBarChartResponseBodyResultObjectSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsBarChartResponseBodyResultObjectSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeTagsBarChartResponseBodyResultObjectSeriesData) SetNum(v int64) *DescribeTagsBarChartResponseBodyResultObjectSeriesData {
	s.Num = &v
	return s
}

func (s *DescribeTagsBarChartResponseBodyResultObjectSeriesData) SetScale(v string) *DescribeTagsBarChartResponseBodyResultObjectSeriesData {
	s.Scale = &v
	return s
}

type DescribeTagsBarChartResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeTagsBarChartResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsBarChartResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeTagsBarChartResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeTagsBarChartResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeTagsBarChartResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsBarChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsBarChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsBarChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsBarChartResponse) SetHeaders(v map[string]*string) *DescribeTagsBarChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsBarChartResponse) SetStatusCode(v int32) *DescribeTagsBarChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsBarChartResponse) SetBody(v *DescribeTagsBarChartResponseBody) *DescribeTagsBarChartResponse {
	s.Body = v
	return s
}

type DescribeTagsFluctuationRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeTagsFluctuationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsFluctuationRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsFluctuationRequest) SetLang(v string) *DescribeTagsFluctuationRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTagsFluctuationRequest) SetEventCodes(v string) *DescribeTagsFluctuationRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeTagsFluctuationRequest) SetRegId(v string) *DescribeTagsFluctuationRequest {
	s.RegId = &v
	return s
}

type DescribeTagsFluctuationResponseBody struct {
	Code           *string                                            `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                            `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                            `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   []*DescribeTagsFluctuationResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	Success        *bool                                              `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeTagsFluctuationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsFluctuationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsFluctuationResponseBody) SetCode(v string) *DescribeTagsFluctuationResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBody) SetHttpStatusCode(v string) *DescribeTagsFluctuationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBody) SetMessage(v string) *DescribeTagsFluctuationResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBody) SetRequestId(v string) *DescribeTagsFluctuationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBody) SetResultObject(v []*DescribeTagsFluctuationResponseBodyResultObject) *DescribeTagsFluctuationResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeTagsFluctuationResponseBody) SetSuccess(v bool) *DescribeTagsFluctuationResponseBody {
	s.Success = &v
	return s
}

type DescribeTagsFluctuationResponseBodyResultObject struct {
	TableName          *string `json:"tableName,omitempty" xml:"tableName,omitempty"`
	TodayNum           *int64  `json:"todayNum,omitempty" xml:"todayNum,omitempty"`
	WithinSevenDayNum  *string `json:"withinSevenDayNum,omitempty" xml:"withinSevenDayNum,omitempty"`
	WithinThirtyDayNum *string `json:"withinThirtyDayNum,omitempty" xml:"withinThirtyDayNum,omitempty"`
	WithinThreeDayNum  *string `json:"withinThreeDayNum,omitempty" xml:"withinThreeDayNum,omitempty"`
	YesterdayNum       *int64  `json:"yesterdayNum,omitempty" xml:"yesterdayNum,omitempty"`
}

func (s DescribeTagsFluctuationResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsFluctuationResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTagsFluctuationResponseBodyResultObject) SetTableName(v string) *DescribeTagsFluctuationResponseBodyResultObject {
	s.TableName = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBodyResultObject) SetTodayNum(v int64) *DescribeTagsFluctuationResponseBodyResultObject {
	s.TodayNum = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBodyResultObject) SetWithinSevenDayNum(v string) *DescribeTagsFluctuationResponseBodyResultObject {
	s.WithinSevenDayNum = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBodyResultObject) SetWithinThirtyDayNum(v string) *DescribeTagsFluctuationResponseBodyResultObject {
	s.WithinThirtyDayNum = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBodyResultObject) SetWithinThreeDayNum(v string) *DescribeTagsFluctuationResponseBodyResultObject {
	s.WithinThreeDayNum = &v
	return s
}

func (s *DescribeTagsFluctuationResponseBodyResultObject) SetYesterdayNum(v int64) *DescribeTagsFluctuationResponseBodyResultObject {
	s.YesterdayNum = &v
	return s
}

type DescribeTagsFluctuationResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsFluctuationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsFluctuationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsFluctuationResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsFluctuationResponse) SetHeaders(v map[string]*string) *DescribeTagsFluctuationResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsFluctuationResponse) SetStatusCode(v int32) *DescribeTagsFluctuationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsFluctuationResponse) SetBody(v *DescribeTagsFluctuationResponseBody) *DescribeTagsFluctuationResponse {
	s.Body = v
	return s
}

type DescribeTagsListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeTagsListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsListRequest) SetLang(v string) *DescribeTagsListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTagsListRequest) SetRegId(v string) *DescribeTagsListRequest {
	s.RegId = &v
	return s
}

type DescribeTagsListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeTagsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsListResponseBody) SetRequestId(v string) *DescribeTagsListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsListResponseBody) SetResultObject(v bool) *DescribeTagsListResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeTagsListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsListResponse) SetHeaders(v map[string]*string) *DescribeTagsListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsListResponse) SetStatusCode(v int32) *DescribeTagsListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsListResponse) SetBody(v *DescribeTagsListResponseBody) *DescribeTagsListResponse {
	s.Body = v
	return s
}

type DescribeTagsNumLineChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime        *string `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	ByPassEventCodes *string `json:"byPassEventCodes,omitempty" xml:"byPassEventCodes,omitempty"`
	// This parameter is required.
	EndTime         *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	MainEventCodes  *string `json:"mainEventCodes,omitempty" xml:"mainEventCodes,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ShuntEventCodes *string `json:"shuntEventCodes,omitempty" xml:"shuntEventCodes,omitempty"`
}

func (s DescribeTagsNumLineChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsNumLineChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsNumLineChartRequest) SetLang(v string) *DescribeTagsNumLineChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTagsNumLineChartRequest) SetBeginTime(v string) *DescribeTagsNumLineChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeTagsNumLineChartRequest) SetByPassEventCodes(v string) *DescribeTagsNumLineChartRequest {
	s.ByPassEventCodes = &v
	return s
}

func (s *DescribeTagsNumLineChartRequest) SetEndTime(v string) *DescribeTagsNumLineChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTagsNumLineChartRequest) SetMainEventCodes(v string) *DescribeTagsNumLineChartRequest {
	s.MainEventCodes = &v
	return s
}

func (s *DescribeTagsNumLineChartRequest) SetRegId(v string) *DescribeTagsNumLineChartRequest {
	s.RegId = &v
	return s
}

func (s *DescribeTagsNumLineChartRequest) SetShuntEventCodes(v string) *DescribeTagsNumLineChartRequest {
	s.ShuntEventCodes = &v
	return s
}

type DescribeTagsNumLineChartResponseBody struct {
	RequestId    *string                                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeTagsNumLineChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeTagsNumLineChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsNumLineChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsNumLineChartResponseBody) SetRequestId(v string) *DescribeTagsNumLineChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsNumLineChartResponseBody) SetResultObject(v *DescribeTagsNumLineChartResponseBodyResultObject) *DescribeTagsNumLineChartResponseBody {
	s.ResultObject = v
	return s
}

type DescribeTagsNumLineChartResponseBodyResultObject struct {
	Series []*DescribeTagsNumLineChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeTagsNumLineChartResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeTagsNumLineChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsNumLineChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTagsNumLineChartResponseBodyResultObject) SetSeries(v []*DescribeTagsNumLineChartResponseBodyResultObjectSeries) *DescribeTagsNumLineChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeTagsNumLineChartResponseBodyResultObject) SetXaxis(v *DescribeTagsNumLineChartResponseBodyResultObjectXaxis) *DescribeTagsNumLineChartResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeTagsNumLineChartResponseBodyResultObjectSeries struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string   `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeTagsNumLineChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsNumLineChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeTagsNumLineChartResponseBodyResultObjectSeries) SetData(v []*string) *DescribeTagsNumLineChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeTagsNumLineChartResponseBodyResultObjectSeries) SetName(v string) *DescribeTagsNumLineChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeTagsNumLineChartResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeTagsNumLineChartResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsNumLineChartResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeTagsNumLineChartResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeTagsNumLineChartResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeTagsNumLineChartResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsNumLineChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsNumLineChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsNumLineChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsNumLineChartResponse) SetHeaders(v map[string]*string) *DescribeTagsNumLineChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsNumLineChartResponse) SetStatusCode(v int32) *DescribeTagsNumLineChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsNumLineChartResponse) SetBody(v *DescribeTagsNumLineChartResponseBody) *DescribeTagsNumLineChartResponse {
	s.Body = v
	return s
}

type DescribeTagsRatioLineChartRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BeginTime        *int64  `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	ByPassEventCodes *string `json:"byPassEventCodes,omitempty" xml:"byPassEventCodes,omitempty"`
	// This parameter is required.
	EndTime        *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	MainEventCodes *string `json:"mainEventCodes,omitempty" xml:"mainEventCodes,omitempty"`
	// This parameter is required.
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ShuntEventCodes *string `json:"shuntEventCodes,omitempty" xml:"shuntEventCodes,omitempty"`
}

func (s DescribeTagsRatioLineChartRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRatioLineChartRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsRatioLineChartRequest) SetLang(v string) *DescribeTagsRatioLineChartRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTagsRatioLineChartRequest) SetBeginTime(v int64) *DescribeTagsRatioLineChartRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeTagsRatioLineChartRequest) SetByPassEventCodes(v string) *DescribeTagsRatioLineChartRequest {
	s.ByPassEventCodes = &v
	return s
}

func (s *DescribeTagsRatioLineChartRequest) SetEndTime(v int64) *DescribeTagsRatioLineChartRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTagsRatioLineChartRequest) SetMainEventCodes(v string) *DescribeTagsRatioLineChartRequest {
	s.MainEventCodes = &v
	return s
}

func (s *DescribeTagsRatioLineChartRequest) SetRegId(v string) *DescribeTagsRatioLineChartRequest {
	s.RegId = &v
	return s
}

func (s *DescribeTagsRatioLineChartRequest) SetShuntEventCodes(v string) *DescribeTagsRatioLineChartRequest {
	s.ShuntEventCodes = &v
	return s
}

type DescribeTagsRatioLineChartResponseBody struct {
	RequestId    *string                                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeTagsRatioLineChartResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeTagsRatioLineChartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRatioLineChartResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsRatioLineChartResponseBody) SetRequestId(v string) *DescribeTagsRatioLineChartResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsRatioLineChartResponseBody) SetResultObject(v *DescribeTagsRatioLineChartResponseBodyResultObject) *DescribeTagsRatioLineChartResponseBody {
	s.ResultObject = v
	return s
}

type DescribeTagsRatioLineChartResponseBodyResultObject struct {
	Series []*DescribeTagsRatioLineChartResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeTagsRatioLineChartResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeTagsRatioLineChartResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRatioLineChartResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTagsRatioLineChartResponseBodyResultObject) SetSeries(v []*DescribeTagsRatioLineChartResponseBodyResultObjectSeries) *DescribeTagsRatioLineChartResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeTagsRatioLineChartResponseBodyResultObject) SetXaxis(v *DescribeTagsRatioLineChartResponseBodyResultObjectXaxis) *DescribeTagsRatioLineChartResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeTagsRatioLineChartResponseBodyResultObjectSeries struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string   `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeTagsRatioLineChartResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRatioLineChartResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeTagsRatioLineChartResponseBodyResultObjectSeries) SetData(v []*string) *DescribeTagsRatioLineChartResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeTagsRatioLineChartResponseBodyResultObjectSeries) SetName(v string) *DescribeTagsRatioLineChartResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeTagsRatioLineChartResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeTagsRatioLineChartResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRatioLineChartResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeTagsRatioLineChartResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeTagsRatioLineChartResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeTagsRatioLineChartResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsRatioLineChartResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsRatioLineChartResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRatioLineChartResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsRatioLineChartResponse) SetHeaders(v map[string]*string) *DescribeTagsRatioLineChartResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsRatioLineChartResponse) SetStatusCode(v int32) *DescribeTagsRatioLineChartResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsRatioLineChartResponse) SetBody(v *DescribeTagsRatioLineChartResponseBody) *DescribeTagsRatioLineChartResponse {
	s.Body = v
	return s
}

type DescribeTagsTrendRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BeginTime  *int64  `json:"beginTime,omitempty" xml:"beginTime,omitempty"`
	EndTime    *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	EventCodes *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Result     *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DescribeTagsTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsTrendRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsTrendRequest) SetLang(v string) *DescribeTagsTrendRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTagsTrendRequest) SetBeginTime(v int64) *DescribeTagsTrendRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeTagsTrendRequest) SetEndTime(v int64) *DescribeTagsTrendRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTagsTrendRequest) SetEventCodes(v string) *DescribeTagsTrendRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeTagsTrendRequest) SetRegId(v string) *DescribeTagsTrendRequest {
	s.RegId = &v
	return s
}

func (s *DescribeTagsTrendRequest) SetResult(v string) *DescribeTagsTrendRequest {
	s.Result = &v
	return s
}

type DescribeTagsTrendResponseBody struct {
	Code           *string                                    `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                    `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                    `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *DescribeTagsTrendResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                      `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeTagsTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsTrendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsTrendResponseBody) SetCode(v string) *DescribeTagsTrendResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTagsTrendResponseBody) SetHttpStatusCode(v string) *DescribeTagsTrendResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeTagsTrendResponseBody) SetMessage(v string) *DescribeTagsTrendResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTagsTrendResponseBody) SetRequestId(v string) *DescribeTagsTrendResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsTrendResponseBody) SetResultObject(v *DescribeTagsTrendResponseBodyResultObject) *DescribeTagsTrendResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeTagsTrendResponseBody) SetSuccess(v bool) *DescribeTagsTrendResponseBody {
	s.Success = &v
	return s
}

type DescribeTagsTrendResponseBodyResultObject struct {
	Series []*DescribeTagsTrendResponseBodyResultObjectSeries `json:"series,omitempty" xml:"series,omitempty" type:"Repeated"`
	Xaxis  *DescribeTagsTrendResponseBodyResultObjectXaxis    `json:"xaxis,omitempty" xml:"xaxis,omitempty" type:"Struct"`
}

func (s DescribeTagsTrendResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsTrendResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTagsTrendResponseBodyResultObject) SetSeries(v []*DescribeTagsTrendResponseBodyResultObjectSeries) *DescribeTagsTrendResponseBodyResultObject {
	s.Series = v
	return s
}

func (s *DescribeTagsTrendResponseBodyResultObject) SetXaxis(v *DescribeTagsTrendResponseBodyResultObjectXaxis) *DescribeTagsTrendResponseBodyResultObject {
	s.Xaxis = v
	return s
}

type DescribeTagsTrendResponseBodyResultObjectSeries struct {
	Data []*DescribeTagsTrendResponseBodyResultObjectSeriesData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	Name *string                                                `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeTagsTrendResponseBodyResultObjectSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsTrendResponseBodyResultObjectSeries) GoString() string {
	return s.String()
}

func (s *DescribeTagsTrendResponseBodyResultObjectSeries) SetData(v []*DescribeTagsTrendResponseBodyResultObjectSeriesData) *DescribeTagsTrendResponseBodyResultObjectSeries {
	s.Data = v
	return s
}

func (s *DescribeTagsTrendResponseBodyResultObjectSeries) SetName(v string) *DescribeTagsTrendResponseBodyResultObjectSeries {
	s.Name = &v
	return s
}

type DescribeTagsTrendResponseBodyResultObjectSeriesData struct {
	Num   *int64  `json:"num,omitempty" xml:"num,omitempty"`
	Scale *string `json:"scale,omitempty" xml:"scale,omitempty"`
}

func (s DescribeTagsTrendResponseBodyResultObjectSeriesData) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsTrendResponseBodyResultObjectSeriesData) GoString() string {
	return s.String()
}

func (s *DescribeTagsTrendResponseBodyResultObjectSeriesData) SetNum(v int64) *DescribeTagsTrendResponseBodyResultObjectSeriesData {
	s.Num = &v
	return s
}

func (s *DescribeTagsTrendResponseBodyResultObjectSeriesData) SetScale(v string) *DescribeTagsTrendResponseBodyResultObjectSeriesData {
	s.Scale = &v
	return s
}

type DescribeTagsTrendResponseBodyResultObjectXaxis struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DescribeTagsTrendResponseBodyResultObjectXaxis) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsTrendResponseBodyResultObjectXaxis) GoString() string {
	return s.String()
}

func (s *DescribeTagsTrendResponseBodyResultObjectXaxis) SetData(v []*string) *DescribeTagsTrendResponseBodyResultObjectXaxis {
	s.Data = v
	return s
}

type DescribeTagsTrendResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsTrendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsTrendResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsTrendResponse) SetHeaders(v map[string]*string) *DescribeTagsTrendResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsTrendResponse) SetStatusCode(v int32) *DescribeTagsTrendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsTrendResponse) SetBody(v *DescribeTagsTrendResponseBody) *DescribeTagsTrendResponse {
	s.Body = v
	return s
}

type DescribeTaskListRequest struct {
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	IsPage      *bool   `json:"IsPage,omitempty" xml:"IsPage,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTaskListRequest) SetCurrentPage(v string) *DescribeTaskListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeTaskListRequest) SetIsPage(v bool) *DescribeTaskListRequest {
	s.IsPage = &v
	return s
}

func (s *DescribeTaskListRequest) SetLang(v string) *DescribeTaskListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTaskListRequest) SetPageSize(v string) *DescribeTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTaskListRequest) SetRegId(v string) *DescribeTaskListRequest {
	s.RegId = &v
	return s
}

type DescribeTaskListResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                      `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                      `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeTaskListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                      `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                      `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTaskListResponseBody) SetRequestId(v string) *DescribeTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTaskListResponseBody) SetCurrentPage(v int32) *DescribeTaskListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeTaskListResponseBody) SetPageSize(v int32) *DescribeTaskListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTaskListResponseBody) SetResultObject(v []*DescribeTaskListResponseBodyResultObject) *DescribeTaskListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeTaskListResponseBody) SetTotalItem(v int32) *DescribeTaskListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeTaskListResponseBody) SetTotalPage(v int32) *DescribeTaskListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeTaskListResponseBodyResultObject struct {
	CompletionTime *int64  `json:"completionTime,omitempty" xml:"completionTime,omitempty"`
	CreateTime     *int64  `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Id             *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Mark           *int32  `json:"mark,omitempty" xml:"mark,omitempty"`
	Remark         *string `json:"remark,omitempty" xml:"remark,omitempty"`
	SceneName      *string `json:"sceneName,omitempty" xml:"sceneName,omitempty"`
	Status         *string `json:"status,omitempty" xml:"status,omitempty"`
	TaskLogId      *int64  `json:"taskLogId,omitempty" xml:"taskLogId,omitempty"`
	TaskType       *string `json:"taskType,omitempty" xml:"taskType,omitempty"`
}

func (s DescribeTaskListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTaskListResponseBodyResultObject) SetCompletionTime(v int64) *DescribeTaskListResponseBodyResultObject {
	s.CompletionTime = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetCreateTime(v int64) *DescribeTaskListResponseBodyResultObject {
	s.CreateTime = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetId(v int64) *DescribeTaskListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetMark(v int32) *DescribeTaskListResponseBodyResultObject {
	s.Mark = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetRemark(v string) *DescribeTaskListResponseBodyResultObject {
	s.Remark = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetSceneName(v string) *DescribeTaskListResponseBodyResultObject {
	s.SceneName = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetStatus(v string) *DescribeTaskListResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetTaskLogId(v int64) *DescribeTaskListResponseBodyResultObject {
	s.TaskLogId = &v
	return s
}

func (s *DescribeTaskListResponseBodyResultObject) SetTaskType(v string) *DescribeTaskListResponseBodyResultObject {
	s.TaskType = &v
	return s
}

type DescribeTaskListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTaskListResponse) SetHeaders(v map[string]*string) *DescribeTaskListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTaskListResponse) SetStatusCode(v int32) *DescribeTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTaskListResponse) SetBody(v *DescribeTaskListResponseBody) *DescribeTaskListResponse {
	s.Body = v
	return s
}

type DescribeTaskLogListRequest struct {
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	IsPage      *bool   `json:"IsPage,omitempty" xml:"IsPage,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskLogId   *string `json:"TaskLogId,omitempty" xml:"TaskLogId,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeTaskLogListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskLogListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTaskLogListRequest) SetCurrentPage(v string) *DescribeTaskLogListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeTaskLogListRequest) SetIsPage(v bool) *DescribeTaskLogListRequest {
	s.IsPage = &v
	return s
}

func (s *DescribeTaskLogListRequest) SetLang(v string) *DescribeTaskLogListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTaskLogListRequest) SetPageSize(v string) *DescribeTaskLogListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTaskLogListRequest) SetTaskId(v string) *DescribeTaskLogListRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeTaskLogListRequest) SetTaskLogId(v string) *DescribeTaskLogListRequest {
	s.TaskLogId = &v
	return s
}

func (s *DescribeTaskLogListRequest) SetRegId(v string) *DescribeTaskLogListRequest {
	s.RegId = &v
	return s
}

type DescribeTaskLogListResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                         `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                         `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeTaskLogListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                         `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                         `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeTaskLogListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskLogListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTaskLogListResponseBody) SetRequestId(v string) *DescribeTaskLogListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTaskLogListResponseBody) SetCurrentPage(v int32) *DescribeTaskLogListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeTaskLogListResponseBody) SetPageSize(v int32) *DescribeTaskLogListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTaskLogListResponseBody) SetResultObject(v []*DescribeTaskLogListResponseBodyResultObject) *DescribeTaskLogListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeTaskLogListResponseBody) SetTotalItem(v int32) *DescribeTaskLogListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeTaskLogListResponseBody) SetTotalPage(v int32) *DescribeTaskLogListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeTaskLogListResponseBodyResultObject struct {
	CompletionTime *int64  `json:"completionTime,omitempty" xml:"completionTime,omitempty"`
	CreateTime     *int64  `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Id             *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Remark         *string `json:"remark,omitempty" xml:"remark,omitempty"`
	SceneName      *string `json:"sceneName,omitempty" xml:"sceneName,omitempty"`
	Status         *string `json:"status,omitempty" xml:"status,omitempty"`
	TaskType       *string `json:"taskType,omitempty" xml:"taskType,omitempty"`
}

func (s DescribeTaskLogListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskLogListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTaskLogListResponseBodyResultObject) SetCompletionTime(v int64) *DescribeTaskLogListResponseBodyResultObject {
	s.CompletionTime = &v
	return s
}

func (s *DescribeTaskLogListResponseBodyResultObject) SetCreateTime(v int64) *DescribeTaskLogListResponseBodyResultObject {
	s.CreateTime = &v
	return s
}

func (s *DescribeTaskLogListResponseBodyResultObject) SetId(v int64) *DescribeTaskLogListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeTaskLogListResponseBodyResultObject) SetRemark(v string) *DescribeTaskLogListResponseBodyResultObject {
	s.Remark = &v
	return s
}

func (s *DescribeTaskLogListResponseBodyResultObject) SetSceneName(v string) *DescribeTaskLogListResponseBodyResultObject {
	s.SceneName = &v
	return s
}

func (s *DescribeTaskLogListResponseBodyResultObject) SetStatus(v string) *DescribeTaskLogListResponseBodyResultObject {
	s.Status = &v
	return s
}

func (s *DescribeTaskLogListResponseBodyResultObject) SetTaskType(v string) *DescribeTaskLogListResponseBodyResultObject {
	s.TaskType = &v
	return s
}

type DescribeTaskLogListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTaskLogListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTaskLogListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskLogListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTaskLogListResponse) SetHeaders(v map[string]*string) *DescribeTaskLogListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTaskLogListResponse) SetStatusCode(v int32) *DescribeTaskLogListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTaskLogListResponse) SetBody(v *DescribeTaskLogListResponseBody) *DescribeTaskLogListResponse {
	s.Body = v
	return s
}

type DescribeTemplateBaseInfoByTemplateIdRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateId *int64  `json:"templateId,omitempty" xml:"templateId,omitempty"`
}

func (s DescribeTemplateBaseInfoByTemplateIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateBaseInfoByTemplateIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeTemplateBaseInfoByTemplateIdRequest) SetLang(v string) *DescribeTemplateBaseInfoByTemplateIdRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdRequest) SetRegId(v string) *DescribeTemplateBaseInfoByTemplateIdRequest {
	s.RegId = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdRequest) SetTemplateId(v int64) *DescribeTemplateBaseInfoByTemplateIdRequest {
	s.TemplateId = &v
	return s
}

type DescribeTemplateBaseInfoByTemplateIdResponseBody struct {
	RequestId    *string                                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBody) SetRequestId(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBody) SetResultObject(v *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) *DescribeTemplateBaseInfoByTemplateIdResponseBody {
	s.ResultObject = v
	return s
}

type DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject struct {
	Description  *string                                                                    `json:"description,omitempty" xml:"description,omitempty"`
	EventCode    *string                                                                    `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName    *string                                                                    `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventStauts  *string                                                                    `json:"eventStauts,omitempty" xml:"eventStauts,omitempty"`
	InputFields  []*DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields `json:"inputFields,omitempty" xml:"inputFields,omitempty" type:"Repeated"`
	RuleDetails  []*DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails `json:"ruleDetails,omitempty" xml:"ruleDetails,omitempty" type:"Repeated"`
	TemplateCode *string                                                                    `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	TemplateName *string                                                                    `json:"templateName,omitempty" xml:"templateName,omitempty"`
	TemplateType *string                                                                    `json:"templateType,omitempty" xml:"templateType,omitempty"`
	Version      *int32                                                                     `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetDescription(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetEventCode(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetEventName(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetEventStauts(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.EventStauts = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetInputFields(v []*DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.InputFields = v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetRuleDetails(v []*DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.RuleDetails = v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetTemplateCode(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.TemplateCode = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetTemplateName(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.TemplateName = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetTemplateType(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.TemplateType = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject) SetVersion(v int32) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	FieldCode   *string `json:"fieldCode,omitempty" xml:"fieldCode,omitempty"`
	FieldRank   *string `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource *string `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType   *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) GoString() string {
	return s.String()
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) SetDescription(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields {
	s.Description = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) SetFieldCode(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields {
	s.FieldCode = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) SetFieldRank(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields {
	s.FieldRank = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) SetFieldSource(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields {
	s.FieldSource = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) SetFieldType(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields {
	s.FieldType = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields) SetTitle(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields {
	s.Title = &v
	return s
}

type DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails struct {
	LogicExpression *string `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	Memo            *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RuleActions     *string `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleExpressions *string `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleId          *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName        *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) GoString() string {
	return s.String()
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) SetLogicExpression(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails {
	s.LogicExpression = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) SetMemo(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails {
	s.Memo = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) SetRuleActions(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails {
	s.RuleActions = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) SetRuleExpressions(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails {
	s.RuleExpressions = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) SetRuleId(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails {
	s.RuleId = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) SetRuleName(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails {
	s.RuleName = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails) SetRuleStatus(v string) *DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails {
	s.RuleStatus = &v
	return s
}

type DescribeTemplateBaseInfoByTemplateIdResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTemplateBaseInfoByTemplateIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTemplateBaseInfoByTemplateIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateBaseInfoByTemplateIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponse) SetHeaders(v map[string]*string) *DescribeTemplateBaseInfoByTemplateIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponse) SetStatusCode(v int32) *DescribeTemplateBaseInfoByTemplateIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTemplateBaseInfoByTemplateIdResponse) SetBody(v *DescribeTemplateBaseInfoByTemplateIdResponseBody) *DescribeTemplateBaseInfoByTemplateIdResponse {
	s.Body = v
	return s
}

type DescribeTemplateCountRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeTemplateCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeTemplateCountRequest) SetLang(v string) *DescribeTemplateCountRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTemplateCountRequest) SetRegId(v string) *DescribeTemplateCountRequest {
	s.RegId = &v
	return s
}

type DescribeTemplateCountResponseBody struct {
	RequestId    *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *DescribeTemplateCountResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeTemplateCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTemplateCountResponseBody) SetRequestId(v string) *DescribeTemplateCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTemplateCountResponseBody) SetResultObject(v *DescribeTemplateCountResponseBodyResultObject) *DescribeTemplateCountResponseBody {
	s.ResultObject = v
	return s
}

type DescribeTemplateCountResponseBodyResultObject struct {
	Limit        *bool  `json:"limit,omitempty" xml:"limit,omitempty"`
	MaxTotalItem *int32 `json:"maxTotalItem,omitempty" xml:"maxTotalItem,omitempty"`
	TotalItem    *int32 `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
}

func (s DescribeTemplateCountResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateCountResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTemplateCountResponseBodyResultObject) SetLimit(v bool) *DescribeTemplateCountResponseBodyResultObject {
	s.Limit = &v
	return s
}

func (s *DescribeTemplateCountResponseBodyResultObject) SetMaxTotalItem(v int32) *DescribeTemplateCountResponseBodyResultObject {
	s.MaxTotalItem = &v
	return s
}

func (s *DescribeTemplateCountResponseBodyResultObject) SetTotalItem(v int32) *DescribeTemplateCountResponseBodyResultObject {
	s.TotalItem = &v
	return s
}

type DescribeTemplateCountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTemplateCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTemplateCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeTemplateCountResponse) SetHeaders(v map[string]*string) *DescribeTemplateCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeTemplateCountResponse) SetStatusCode(v int32) *DescribeTemplateCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTemplateCountResponse) SetBody(v *DescribeTemplateCountResponseBody) *DescribeTemplateCountResponse {
	s.Body = v
	return s
}

type DescribeTemplateDownloadRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeTemplateDownloadRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateDownloadRequest) GoString() string {
	return s.String()
}

func (s *DescribeTemplateDownloadRequest) SetLang(v string) *DescribeTemplateDownloadRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTemplateDownloadRequest) SetRegId(v string) *DescribeTemplateDownloadRequest {
	s.RegId = &v
	return s
}

type DescribeTemplateDownloadResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DescribeTemplateDownloadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateDownloadResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTemplateDownloadResponseBody) SetRequestId(v string) *DescribeTemplateDownloadResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTemplateDownloadResponseBody) SetData(v bool) *DescribeTemplateDownloadResponseBody {
	s.Data = &v
	return s
}

type DescribeTemplateDownloadResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTemplateDownloadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTemplateDownloadResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplateDownloadResponse) GoString() string {
	return s.String()
}

func (s *DescribeTemplateDownloadResponse) SetHeaders(v map[string]*string) *DescribeTemplateDownloadResponse {
	s.Headers = v
	return s
}

func (s *DescribeTemplateDownloadResponse) SetStatusCode(v int32) *DescribeTemplateDownloadResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTemplateDownloadResponse) SetBody(v *DescribeTemplateDownloadResponseBody) *DescribeTemplateDownloadResponse {
	s.Body = v
	return s
}

type DescribeTemplatePageListRequest struct {
	Lang               *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CurrentPage        *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	EventCodes         *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	PageSize           *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RegId              *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateName       *string `json:"templateName,omitempty" xml:"templateName,omitempty"`
	TemplateSearchItem *string `json:"templateSearchItem,omitempty" xml:"templateSearchItem,omitempty"`
	TemplateStatus     *string `json:"templateStatus,omitempty" xml:"templateStatus,omitempty"`
	TemplateType       *string `json:"templateType,omitempty" xml:"templateType,omitempty"`
}

func (s DescribeTemplatePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatePageListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTemplatePageListRequest) SetLang(v string) *DescribeTemplatePageListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetCurrentPage(v string) *DescribeTemplatePageListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetEventCodes(v string) *DescribeTemplatePageListRequest {
	s.EventCodes = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetPageSize(v string) *DescribeTemplatePageListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetRegId(v string) *DescribeTemplatePageListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetTemplateName(v string) *DescribeTemplatePageListRequest {
	s.TemplateName = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetTemplateSearchItem(v string) *DescribeTemplatePageListRequest {
	s.TemplateSearchItem = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetTemplateStatus(v string) *DescribeTemplatePageListRequest {
	s.TemplateStatus = &v
	return s
}

func (s *DescribeTemplatePageListRequest) SetTemplateType(v string) *DescribeTemplatePageListRequest {
	s.TemplateType = &v
	return s
}

type DescribeTemplatePageListResponseBody struct {
	CurrentPage  *int32                                              `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                              `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RequestId    *string                                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*DescribeTemplatePageListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                              `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                              `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeTemplatePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatePageListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTemplatePageListResponseBody) SetCurrentPage(v int32) *DescribeTemplatePageListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeTemplatePageListResponseBody) SetPageSize(v int32) *DescribeTemplatePageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTemplatePageListResponseBody) SetRequestId(v string) *DescribeTemplatePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTemplatePageListResponseBody) SetResultObject(v []*DescribeTemplatePageListResponseBodyResultObject) *DescribeTemplatePageListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeTemplatePageListResponseBody) SetTotalItem(v int32) *DescribeTemplatePageListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeTemplatePageListResponseBody) SetTotalPage(v int32) *DescribeTemplatePageListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeTemplatePageListResponseBodyResultObject struct {
	Description    *string `json:"description,omitempty" xml:"description,omitempty"`
	EventCode      *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName      *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	GmtCreate      *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified    *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id             *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RuleCount      *int32  `json:"ruleCount,omitempty" xml:"ruleCount,omitempty"`
	TemplateCode   *string `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
	TemplateName   *string `json:"templateName,omitempty" xml:"templateName,omitempty"`
	TemplateStatus *string `json:"templateStatus,omitempty" xml:"templateStatus,omitempty"`
	TemplateType   *string `json:"templateType,omitempty" xml:"templateType,omitempty"`
	UserCount      *int32  `json:"userCount,omitempty" xml:"userCount,omitempty"`
	Version        *int32  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeTemplatePageListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatePageListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetDescription(v string) *DescribeTemplatePageListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetEventCode(v string) *DescribeTemplatePageListResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetEventName(v string) *DescribeTemplatePageListResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeTemplatePageListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetGmtModified(v int64) *DescribeTemplatePageListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetId(v int64) *DescribeTemplatePageListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetRuleCount(v int32) *DescribeTemplatePageListResponseBodyResultObject {
	s.RuleCount = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetTemplateCode(v string) *DescribeTemplatePageListResponseBodyResultObject {
	s.TemplateCode = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetTemplateName(v string) *DescribeTemplatePageListResponseBodyResultObject {
	s.TemplateName = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetTemplateStatus(v string) *DescribeTemplatePageListResponseBodyResultObject {
	s.TemplateStatus = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetTemplateType(v string) *DescribeTemplatePageListResponseBodyResultObject {
	s.TemplateType = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetUserCount(v int32) *DescribeTemplatePageListResponseBodyResultObject {
	s.UserCount = &v
	return s
}

func (s *DescribeTemplatePageListResponseBodyResultObject) SetVersion(v int32) *DescribeTemplatePageListResponseBodyResultObject {
	s.Version = &v
	return s
}

type DescribeTemplatePageListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTemplatePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTemplatePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatePageListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTemplatePageListResponse) SetHeaders(v map[string]*string) *DescribeTemplatePageListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTemplatePageListResponse) SetStatusCode(v int32) *DescribeTemplatePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTemplatePageListResponse) SetBody(v *DescribeTemplatePageListResponseBody) *DescribeTemplatePageListResponse {
	s.Body = v
	return s
}

type DescribeUsedServiceRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeUsedServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsedServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeUsedServiceRequest) SetLang(v string) *DescribeUsedServiceRequest {
	s.Lang = &v
	return s
}

func (s *DescribeUsedServiceRequest) SetRegId(v string) *DescribeUsedServiceRequest {
	s.RegId = &v
	return s
}

type DescribeUsedServiceResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Records   []*DescribeUsedServiceResponseBodyRecords `json:"records,omitempty" xml:"records,omitempty" type:"Repeated"`
}

func (s DescribeUsedServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsedServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUsedServiceResponseBody) SetRequestId(v string) *DescribeUsedServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUsedServiceResponseBody) SetRecords(v []*DescribeUsedServiceResponseBodyRecords) *DescribeUsedServiceResponseBody {
	s.Records = v
	return s
}

type DescribeUsedServiceResponseBodyRecords struct {
	EnName      *string `json:"enName,omitempty" xml:"enName,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
}

func (s DescribeUsedServiceResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsedServiceResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeUsedServiceResponseBodyRecords) SetEnName(v string) *DescribeUsedServiceResponseBodyRecords {
	s.EnName = &v
	return s
}

func (s *DescribeUsedServiceResponseBodyRecords) SetName(v string) *DescribeUsedServiceResponseBodyRecords {
	s.Name = &v
	return s
}

func (s *DescribeUsedServiceResponseBodyRecords) SetServiceCode(v string) *DescribeUsedServiceResponseBodyRecords {
	s.ServiceCode = &v
	return s
}

type DescribeUsedServiceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUsedServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUsedServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsedServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeUsedServiceResponse) SetHeaders(v map[string]*string) *DescribeUsedServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeUsedServiceResponse) SetStatusCode(v int32) *DescribeUsedServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUsedServiceResponse) SetBody(v *DescribeUsedServiceResponseBody) *DescribeUsedServiceResponse {
	s.Body = v
	return s
}

type DescribeUserInfoRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeUserInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserInfoRequest) SetLang(v string) *DescribeUserInfoRequest {
	s.Lang = &v
	return s
}

func (s *DescribeUserInfoRequest) SetRegId(v string) *DescribeUserInfoRequest {
	s.RegId = &v
	return s
}

type DescribeUserInfoResponseBody struct {
	Code           *string                                   `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string                                   `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string                                   `json:"message,omitempty" xml:"message,omitempty"`
	ResultObject   *DescribeUserInfoResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
	Success        *bool                                     `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DescribeUserInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserInfoResponseBody) SetCode(v string) *DescribeUserInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeUserInfoResponseBody) SetHttpStatusCode(v string) *DescribeUserInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeUserInfoResponseBody) SetMessage(v string) *DescribeUserInfoResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeUserInfoResponseBody) SetResultObject(v *DescribeUserInfoResponseBodyResultObject) *DescribeUserInfoResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeUserInfoResponseBody) SetSuccess(v bool) *DescribeUserInfoResponseBody {
	s.Success = &v
	return s
}

type DescribeUserInfoResponseBodyResultObject struct {
	ClientIp *string `json:"clientIp,omitempty" xml:"clientIp,omitempty"`
	SubId    *string `json:"subId,omitempty" xml:"subId,omitempty"`
	UserId   *int64  `json:"userId,omitempty" xml:"userId,omitempty"`
	UserName *string `json:"userName,omitempty" xml:"userName,omitempty"`
}

func (s DescribeUserInfoResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserInfoResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeUserInfoResponseBodyResultObject) SetClientIp(v string) *DescribeUserInfoResponseBodyResultObject {
	s.ClientIp = &v
	return s
}

func (s *DescribeUserInfoResponseBodyResultObject) SetSubId(v string) *DescribeUserInfoResponseBodyResultObject {
	s.SubId = &v
	return s
}

func (s *DescribeUserInfoResponseBodyResultObject) SetUserId(v int64) *DescribeUserInfoResponseBodyResultObject {
	s.UserId = &v
	return s
}

func (s *DescribeUserInfoResponseBodyResultObject) SetUserName(v string) *DescribeUserInfoResponseBodyResultObject {
	s.UserName = &v
	return s
}

type DescribeUserInfoResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserInfoResponse) SetHeaders(v map[string]*string) *DescribeUserInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserInfoResponse) SetStatusCode(v int32) *DescribeUserInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserInfoResponse) SetBody(v *DescribeUserInfoResponseBody) *DescribeUserInfoResponse {
	s.Body = v
	return s
}

type DescribeVariableBindDetailRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	DefineId *int64  `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Id       *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeVariableBindDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableBindDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeVariableBindDetailRequest) SetLang(v string) *DescribeVariableBindDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVariableBindDetailRequest) SetDefineId(v int64) *DescribeVariableBindDetailRequest {
	s.DefineId = &v
	return s
}

func (s *DescribeVariableBindDetailRequest) SetId(v int64) *DescribeVariableBindDetailRequest {
	s.Id = &v
	return s
}

func (s *DescribeVariableBindDetailRequest) SetRegId(v string) *DescribeVariableBindDetailRequest {
	s.RegId = &v
	return s
}

type DescribeVariableBindDetailResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeVariableBindDetailResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeVariableBindDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableBindDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVariableBindDetailResponseBody) SetRequestId(v string) *DescribeVariableBindDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBody) SetResultObject(v *DescribeVariableBindDetailResponseBodyResultObject) *DescribeVariableBindDetailResponseBody {
	s.ResultObject = v
	return s
}

type DescribeVariableBindDetailResponseBodyResultObject struct {
	AllowModify   *bool                                                              `json:"allowModify,omitempty" xml:"allowModify,omitempty"`
	DefineId      *int64                                                             `json:"defineId,omitempty" xml:"defineId,omitempty"`
	DefineTitle   *string                                                            `json:"defineTitle,omitempty" xml:"defineTitle,omitempty"`
	Description   *string                                                            `json:"description,omitempty" xml:"description,omitempty"`
	EventCode     *string                                                            `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Id            *int64                                                             `json:"id,omitempty" xml:"id,omitempty"`
	Params        []*DescribeVariableBindDetailResponseBodyResultObjectParams        `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	RelationRules []*DescribeVariableBindDetailResponseBodyResultObjectRelationRules `json:"relationRules,omitempty" xml:"relationRules,omitempty" type:"Repeated"`
	Title         *string                                                            `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeVariableBindDetailResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableBindDetailResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetAllowModify(v bool) *DescribeVariableBindDetailResponseBodyResultObject {
	s.AllowModify = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetDefineId(v int64) *DescribeVariableBindDetailResponseBodyResultObject {
	s.DefineId = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetDefineTitle(v string) *DescribeVariableBindDetailResponseBodyResultObject {
	s.DefineTitle = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetDescription(v string) *DescribeVariableBindDetailResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetEventCode(v string) *DescribeVariableBindDetailResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetId(v int64) *DescribeVariableBindDetailResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetParams(v []*DescribeVariableBindDetailResponseBodyResultObjectParams) *DescribeVariableBindDetailResponseBodyResultObject {
	s.Params = v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetRelationRules(v []*DescribeVariableBindDetailResponseBodyResultObjectRelationRules) *DescribeVariableBindDetailResponseBodyResultObject {
	s.RelationRules = v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObject) SetTitle(v string) *DescribeVariableBindDetailResponseBodyResultObject {
	s.Title = &v
	return s
}

type DescribeVariableBindDetailResponseBodyResultObjectParams struct {
	EventFieldName *string `json:"eventFieldName,omitempty" xml:"eventFieldName,omitempty"`
	Required       *bool   `json:"required,omitempty" xml:"required,omitempty"`
	VariableName   *string `json:"variableName,omitempty" xml:"variableName,omitempty"`
}

func (s DescribeVariableBindDetailResponseBodyResultObjectParams) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableBindDetailResponseBodyResultObjectParams) GoString() string {
	return s.String()
}

func (s *DescribeVariableBindDetailResponseBodyResultObjectParams) SetEventFieldName(v string) *DescribeVariableBindDetailResponseBodyResultObjectParams {
	s.EventFieldName = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObjectParams) SetRequired(v bool) *DescribeVariableBindDetailResponseBodyResultObjectParams {
	s.Required = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObjectParams) SetVariableName(v string) *DescribeVariableBindDetailResponseBodyResultObjectParams {
	s.VariableName = &v
	return s
}

type DescribeVariableBindDetailResponseBodyResultObjectRelationRules struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeVariableBindDetailResponseBodyResultObjectRelationRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableBindDetailResponseBodyResultObjectRelationRules) GoString() string {
	return s.String()
}

func (s *DescribeVariableBindDetailResponseBodyResultObjectRelationRules) SetKey(v string) *DescribeVariableBindDetailResponseBodyResultObjectRelationRules {
	s.Key = &v
	return s
}

func (s *DescribeVariableBindDetailResponseBodyResultObjectRelationRules) SetValue(v string) *DescribeVariableBindDetailResponseBodyResultObjectRelationRules {
	s.Value = &v
	return s
}

type DescribeVariableBindDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVariableBindDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVariableBindDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableBindDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeVariableBindDetailResponse) SetHeaders(v map[string]*string) *DescribeVariableBindDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeVariableBindDetailResponse) SetStatusCode(v int32) *DescribeVariableBindDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVariableBindDetailResponse) SetBody(v *DescribeVariableBindDetailResponseBody) *DescribeVariableBindDetailResponse {
	s.Body = v
	return s
}

type DescribeVariableDetailRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeVariableDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeVariableDetailRequest) SetLang(v string) *DescribeVariableDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVariableDetailRequest) SetId(v int64) *DescribeVariableDetailRequest {
	s.Id = &v
	return s
}

func (s *DescribeVariableDetailRequest) SetRegId(v string) *DescribeVariableDetailRequest {
	s.RegId = &v
	return s
}

type DescribeVariableDetailResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *DescribeVariableDetailResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s DescribeVariableDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVariableDetailResponseBody) SetRequestId(v string) *DescribeVariableDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVariableDetailResponseBody) SetResultObject(v *DescribeVariableDetailResponseBodyResultObject) *DescribeVariableDetailResponseBody {
	s.ResultObject = v
	return s
}

type DescribeVariableDetailResponseBodyResultObject struct {
	BaseInfo *DescribeVariableDetailResponseBodyResultObjectBaseInfo `json:"baseInfo,omitempty" xml:"baseInfo,omitempty" type:"Struct"`
}

func (s DescribeVariableDetailResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableDetailResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeVariableDetailResponseBodyResultObject) SetBaseInfo(v *DescribeVariableDetailResponseBodyResultObjectBaseInfo) *DescribeVariableDetailResponseBodyResultObject {
	s.BaseInfo = v
	return s
}

type DescribeVariableDetailResponseBodyResultObjectBaseInfo struct {
	AllowBind            *string   `json:"allowBind,omitempty" xml:"allowBind,omitempty"`
	ChargingMode         *string   `json:"chargingMode,omitempty" xml:"chargingMode,omitempty"`
	ChargingModeDesc     *string   `json:"chargingModeDesc,omitempty" xml:"chargingModeDesc,omitempty"`
	Creator              *string   `json:"creator,omitempty" xml:"creator,omitempty"`
	DataDisplay          *string   `json:"dataDisplay,omitempty" xml:"dataDisplay,omitempty"`
	DataThreshold        *string   `json:"dataThreshold,omitempty" xml:"dataThreshold,omitempty"`
	DeductionFactor      *int32    `json:"deductionFactor,omitempty" xml:"deductionFactor,omitempty"`
	Description          *string   `json:"description,omitempty" xml:"description,omitempty"`
	FrontAllowBind       *string   `json:"frontAllowBind,omitempty" xml:"frontAllowBind,omitempty"`
	GmtCreate            *int64    `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified          *int64    `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id                   *int64    `json:"id,omitempty" xml:"id,omitempty"`
	InputRequired        *string   `json:"inputRequired,omitempty" xml:"inputRequired,omitempty"`
	Inputs               *string   `json:"inputs,omitempty" xml:"inputs,omitempty"`
	InputsDesc           *string   `json:"inputsDesc,omitempty" xml:"inputsDesc,omitempty"`
	InvokeKey            *string   `json:"invokeKey,omitempty" xml:"invokeKey,omitempty"`
	InvokeRt             *int32    `json:"invokeRt,omitempty" xml:"invokeRt,omitempty"`
	InvokeSuccessRate    *string   `json:"invokeSuccessRate,omitempty" xml:"invokeSuccessRate,omitempty"`
	InvokeTimes          *int64    `json:"invokeTimes,omitempty" xml:"invokeTimes,omitempty"`
	LastModifiedOperator *string   `json:"lastModifiedOperator,omitempty" xml:"lastModifiedOperator,omitempty"`
	Name                 *string   `json:"name,omitempty" xml:"name,omitempty"`
	Outputs              *string   `json:"outputs,omitempty" xml:"outputs,omitempty"`
	OutputsDesc          *string   `json:"outputsDesc,omitempty" xml:"outputsDesc,omitempty"`
	Scene                []*string `json:"scene,omitempty" xml:"scene,omitempty" type:"Repeated"`
	SceneDesc            []*string `json:"sceneDesc,omitempty" xml:"sceneDesc,omitempty" type:"Repeated"`
	ShowOrder            *string   `json:"showOrder,omitempty" xml:"showOrder,omitempty"`
	Source               *string   `json:"source,omitempty" xml:"source,omitempty"`
	SourceDesc           *string   `json:"sourceDesc,omitempty" xml:"sourceDesc,omitempty"`
	Status               *string   `json:"status,omitempty" xml:"status,omitempty"`
	SupportRegions       []*string `json:"supportRegions,omitempty" xml:"supportRegions,omitempty" type:"Repeated"`
	Title                *string   `json:"title,omitempty" xml:"title,omitempty"`
	Type                 *string   `json:"type,omitempty" xml:"type,omitempty"`
	TypeDesc             *string   `json:"typeDesc,omitempty" xml:"typeDesc,omitempty"`
	XLabel               *string   `json:"xLabel,omitempty" xml:"xLabel,omitempty"`
	YLabel               *string   `json:"yLabel,omitempty" xml:"yLabel,omitempty"`
}

func (s DescribeVariableDetailResponseBodyResultObjectBaseInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableDetailResponseBodyResultObjectBaseInfo) GoString() string {
	return s.String()
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetAllowBind(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.AllowBind = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetChargingMode(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.ChargingMode = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetChargingModeDesc(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.ChargingModeDesc = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetCreator(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Creator = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetDataDisplay(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.DataDisplay = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetDataThreshold(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.DataThreshold = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetDeductionFactor(v int32) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.DeductionFactor = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetDescription(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Description = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetFrontAllowBind(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.FrontAllowBind = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetGmtCreate(v int64) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.GmtCreate = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetGmtModified(v int64) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.GmtModified = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetId(v int64) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Id = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetInputRequired(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.InputRequired = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetInputs(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Inputs = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetInputsDesc(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.InputsDesc = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetInvokeKey(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.InvokeKey = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetInvokeRt(v int32) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.InvokeRt = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetInvokeSuccessRate(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.InvokeSuccessRate = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetInvokeTimes(v int64) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.InvokeTimes = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetLastModifiedOperator(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.LastModifiedOperator = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetName(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Name = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetOutputs(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Outputs = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetOutputsDesc(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.OutputsDesc = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetScene(v []*string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Scene = v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetSceneDesc(v []*string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.SceneDesc = v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetShowOrder(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.ShowOrder = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetSource(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Source = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetSourceDesc(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.SourceDesc = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetStatus(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Status = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetSupportRegions(v []*string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.SupportRegions = v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetTitle(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Title = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetType(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.Type = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetTypeDesc(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.TypeDesc = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetXLabel(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.XLabel = &v
	return s
}

func (s *DescribeVariableDetailResponseBodyResultObjectBaseInfo) SetYLabel(v string) *DescribeVariableDetailResponseBodyResultObjectBaseInfo {
	s.YLabel = &v
	return s
}

type DescribeVariableDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVariableDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVariableDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeVariableDetailResponse) SetHeaders(v map[string]*string) *DescribeVariableDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeVariableDetailResponse) SetStatusCode(v int32) *DescribeVariableDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVariableDetailResponse) SetBody(v *DescribeVariableDetailResponseBody) *DescribeVariableDetailResponse {
	s.Body = v
	return s
}

type DescribeVariableFeeRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Ids   []*int64 `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	RegId *string  `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeVariableFeeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableFeeRequest) GoString() string {
	return s.String()
}

func (s *DescribeVariableFeeRequest) SetLang(v string) *DescribeVariableFeeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVariableFeeRequest) SetIds(v []*int64) *DescribeVariableFeeRequest {
	s.Ids = v
	return s
}

func (s *DescribeVariableFeeRequest) SetRegId(v string) *DescribeVariableFeeRequest {
	s.RegId = &v
	return s
}

type DescribeVariableFeeResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s DescribeVariableFeeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableFeeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVariableFeeResponseBody) SetRequestId(v string) *DescribeVariableFeeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVariableFeeResponseBody) SetResultObject(v bool) *DescribeVariableFeeResponseBody {
	s.ResultObject = &v
	return s
}

type DescribeVariableFeeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVariableFeeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVariableFeeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableFeeResponse) GoString() string {
	return s.String()
}

func (s *DescribeVariableFeeResponse) SetHeaders(v map[string]*string) *DescribeVariableFeeResponse {
	s.Headers = v
	return s
}

func (s *DescribeVariableFeeResponse) SetStatusCode(v int32) *DescribeVariableFeeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVariableFeeResponse) SetBody(v *DescribeVariableFeeResponseBody) *DescribeVariableFeeResponse {
	s.Body = v
	return s
}

type DescribeVariableListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RefObjId    *string `json:"refObjId,omitempty" xml:"refObjId,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	SourceType  *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
	TypesStr    *string `json:"typesStr,omitempty" xml:"typesStr,omitempty"`
	Value       *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeVariableListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVariableListRequest) SetLang(v string) *DescribeVariableListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVariableListRequest) SetCreateType(v string) *DescribeVariableListRequest {
	s.CreateType = &v
	return s
}

func (s *DescribeVariableListRequest) SetCurrentPage(v string) *DescribeVariableListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVariableListRequest) SetPageSize(v string) *DescribeVariableListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVariableListRequest) SetRefObjId(v string) *DescribeVariableListRequest {
	s.RefObjId = &v
	return s
}

func (s *DescribeVariableListRequest) SetRegId(v string) *DescribeVariableListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeVariableListRequest) SetSourceType(v string) *DescribeVariableListRequest {
	s.SourceType = &v
	return s
}

func (s *DescribeVariableListRequest) SetType(v string) *DescribeVariableListRequest {
	s.Type = &v
	return s
}

func (s *DescribeVariableListRequest) SetTypesStr(v string) *DescribeVariableListRequest {
	s.TypesStr = &v
	return s
}

func (s *DescribeVariableListRequest) SetValue(v string) *DescribeVariableListRequest {
	s.Value = &v
	return s
}

type DescribeVariableListResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                          `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                          `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeVariableListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                          `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                          `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeVariableListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVariableListResponseBody) SetRequestId(v string) *DescribeVariableListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVariableListResponseBody) SetCurrentPage(v int32) *DescribeVariableListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVariableListResponseBody) SetPageSize(v int32) *DescribeVariableListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVariableListResponseBody) SetResultObject(v []*DescribeVariableListResponseBodyResultObject) *DescribeVariableListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeVariableListResponseBody) SetTotalItem(v int32) *DescribeVariableListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeVariableListResponseBody) SetTotalPage(v int32) *DescribeVariableListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeVariableListResponseBodyResultObject struct {
	Capacity     *int64                 `json:"capacity,omitempty" xml:"capacity,omitempty"`
	DefineId     *string                `json:"defineId,omitempty" xml:"defineId,omitempty"`
	Description  *string                `json:"description,omitempty" xml:"description,omitempty"`
	ExtendInfo   map[string]interface{} `json:"extendInfo,omitempty" xml:"extendInfo,omitempty"`
	GmtCreate    *int64                 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified  *int64                 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id           *int64                 `json:"id,omitempty" xml:"id,omitempty"`
	LeftCapacity *int64                 `json:"leftCapacity,omitempty" xml:"leftCapacity,omitempty"`
	Name         *string                `json:"name,omitempty" xml:"name,omitempty"`
	OutputsType  *string                `json:"outputsType,omitempty" xml:"outputsType,omitempty"`
	RefObjId     *string                `json:"refObjId,omitempty" xml:"refObjId,omitempty"`
	RefObjName   *string                `json:"refObjName,omitempty" xml:"refObjName,omitempty"`
	RefObjType   *string                `json:"refObjType,omitempty" xml:"refObjType,omitempty"`
	SourceType   *string                `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	Title        *string                `json:"title,omitempty" xml:"title,omitempty"`
	Type         *string                `json:"type,omitempty" xml:"type,omitempty"`
	UserId       *int64                 `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s DescribeVariableListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeVariableListResponseBodyResultObject) SetCapacity(v int64) *DescribeVariableListResponseBodyResultObject {
	s.Capacity = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetDefineId(v string) *DescribeVariableListResponseBodyResultObject {
	s.DefineId = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetDescription(v string) *DescribeVariableListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetExtendInfo(v map[string]interface{}) *DescribeVariableListResponseBodyResultObject {
	s.ExtendInfo = v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeVariableListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetGmtModified(v int64) *DescribeVariableListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetId(v int64) *DescribeVariableListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetLeftCapacity(v int64) *DescribeVariableListResponseBodyResultObject {
	s.LeftCapacity = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetName(v string) *DescribeVariableListResponseBodyResultObject {
	s.Name = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetOutputsType(v string) *DescribeVariableListResponseBodyResultObject {
	s.OutputsType = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetRefObjId(v string) *DescribeVariableListResponseBodyResultObject {
	s.RefObjId = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetRefObjName(v string) *DescribeVariableListResponseBodyResultObject {
	s.RefObjName = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetRefObjType(v string) *DescribeVariableListResponseBodyResultObject {
	s.RefObjType = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetSourceType(v string) *DescribeVariableListResponseBodyResultObject {
	s.SourceType = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetTitle(v string) *DescribeVariableListResponseBodyResultObject {
	s.Title = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetType(v string) *DescribeVariableListResponseBodyResultObject {
	s.Type = &v
	return s
}

func (s *DescribeVariableListResponseBodyResultObject) SetUserId(v int64) *DescribeVariableListResponseBodyResultObject {
	s.UserId = &v
	return s
}

type DescribeVariableListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVariableListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVariableListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVariableListResponse) SetHeaders(v map[string]*string) *DescribeVariableListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVariableListResponse) SetStatusCode(v int32) *DescribeVariableListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVariableListResponse) SetBody(v *DescribeVariableListResponseBody) *DescribeVariableListResponse {
	s.Body = v
	return s
}

type DescribeVariableMarketListRequest struct {
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ChargingMode *string `json:"chargingMode,omitempty" xml:"chargingMode,omitempty"`
	CurrentPage  *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	Paging       *string `json:"paging,omitempty" xml:"paging,omitempty"`
	QueryContent *string `json:"queryContent,omitempty" xml:"queryContent,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ScenesStr    *string `json:"scenesStr,omitempty" xml:"scenesStr,omitempty"`
	Source       *string `json:"source,omitempty" xml:"source,omitempty"`
	Title        *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s DescribeVariableMarketListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableMarketListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVariableMarketListRequest) SetLang(v string) *DescribeVariableMarketListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetChargingMode(v string) *DescribeVariableMarketListRequest {
	s.ChargingMode = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetCurrentPage(v int32) *DescribeVariableMarketListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetPageSize(v int32) *DescribeVariableMarketListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetPaging(v string) *DescribeVariableMarketListRequest {
	s.Paging = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetQueryContent(v string) *DescribeVariableMarketListRequest {
	s.QueryContent = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetRegId(v string) *DescribeVariableMarketListRequest {
	s.RegId = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetScenesStr(v string) *DescribeVariableMarketListRequest {
	s.ScenesStr = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetSource(v string) *DescribeVariableMarketListRequest {
	s.Source = &v
	return s
}

func (s *DescribeVariableMarketListRequest) SetTitle(v string) *DescribeVariableMarketListRequest {
	s.Title = &v
	return s
}

type DescribeVariableMarketListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32  `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	TotalItem    *int32  `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32  `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeVariableMarketListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableMarketListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVariableMarketListResponseBody) SetRequestId(v string) *DescribeVariableMarketListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVariableMarketListResponseBody) SetCurrentPage(v int32) *DescribeVariableMarketListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVariableMarketListResponseBody) SetPageSize(v int32) *DescribeVariableMarketListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVariableMarketListResponseBody) SetResultObject(v bool) *DescribeVariableMarketListResponseBody {
	s.ResultObject = &v
	return s
}

func (s *DescribeVariableMarketListResponseBody) SetTotalItem(v int32) *DescribeVariableMarketListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeVariableMarketListResponseBody) SetTotalPage(v int32) *DescribeVariableMarketListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeVariableMarketListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVariableMarketListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVariableMarketListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableMarketListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVariableMarketListResponse) SetHeaders(v map[string]*string) *DescribeVariableMarketListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVariableMarketListResponse) SetStatusCode(v int32) *DescribeVariableMarketListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVariableMarketListResponse) SetBody(v *DescribeVariableMarketListResponseBody) *DescribeVariableMarketListResponse {
	s.Body = v
	return s
}

type DescribeVariableSceneListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	BizType     *string `json:"bizType,omitempty" xml:"bizType,omitempty"`
	ConfigKey   *string `json:"configKey,omitempty" xml:"configKey,omitempty"`
	CurrentPage *string `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize    *string `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	Paging *bool   `json:"paging,omitempty" xml:"paging,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s DescribeVariableSceneListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableSceneListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVariableSceneListRequest) SetLang(v string) *DescribeVariableSceneListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVariableSceneListRequest) SetBizType(v string) *DescribeVariableSceneListRequest {
	s.BizType = &v
	return s
}

func (s *DescribeVariableSceneListRequest) SetConfigKey(v string) *DescribeVariableSceneListRequest {
	s.ConfigKey = &v
	return s
}

func (s *DescribeVariableSceneListRequest) SetCurrentPage(v string) *DescribeVariableSceneListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVariableSceneListRequest) SetPageSize(v string) *DescribeVariableSceneListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVariableSceneListRequest) SetPaging(v bool) *DescribeVariableSceneListRequest {
	s.Paging = &v
	return s
}

func (s *DescribeVariableSceneListRequest) SetRegId(v string) *DescribeVariableSceneListRequest {
	s.RegId = &v
	return s
}

type DescribeVariableSceneListResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentPage  *int32                                               `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	PageSize     *int32                                               `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	ResultObject []*DescribeVariableSceneListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
	TotalItem    *int32                                               `json:"totalItem,omitempty" xml:"totalItem,omitempty"`
	TotalPage    *int32                                               `json:"totalPage,omitempty" xml:"totalPage,omitempty"`
}

func (s DescribeVariableSceneListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableSceneListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVariableSceneListResponseBody) SetRequestId(v string) *DescribeVariableSceneListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVariableSceneListResponseBody) SetCurrentPage(v int32) *DescribeVariableSceneListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVariableSceneListResponseBody) SetPageSize(v int32) *DescribeVariableSceneListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVariableSceneListResponseBody) SetResultObject(v []*DescribeVariableSceneListResponseBodyResultObject) *DescribeVariableSceneListResponseBody {
	s.ResultObject = v
	return s
}

func (s *DescribeVariableSceneListResponseBody) SetTotalItem(v int32) *DescribeVariableSceneListResponseBody {
	s.TotalItem = &v
	return s
}

func (s *DescribeVariableSceneListResponseBody) SetTotalPage(v int32) *DescribeVariableSceneListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeVariableSceneListResponseBodyResultObject struct {
	BizType              *string `json:"bizType,omitempty" xml:"bizType,omitempty"`
	ConfigKey            *string `json:"configKey,omitempty" xml:"configKey,omitempty"`
	ConfigValue          *string `json:"configValue,omitempty" xml:"configValue,omitempty"`
	Creator              *string `json:"creator,omitempty" xml:"creator,omitempty"`
	Description          *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtCreate            *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified          *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id                   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	LastModifiedOperator *string `json:"lastModifiedOperator,omitempty" xml:"lastModifiedOperator,omitempty"`
	Status               *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeVariableSceneListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableSceneListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetBizType(v string) *DescribeVariableSceneListResponseBodyResultObject {
	s.BizType = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetConfigKey(v string) *DescribeVariableSceneListResponseBodyResultObject {
	s.ConfigKey = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetConfigValue(v string) *DescribeVariableSceneListResponseBodyResultObject {
	s.ConfigValue = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetCreator(v string) *DescribeVariableSceneListResponseBodyResultObject {
	s.Creator = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetDescription(v string) *DescribeVariableSceneListResponseBodyResultObject {
	s.Description = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetGmtCreate(v int64) *DescribeVariableSceneListResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetGmtModified(v int64) *DescribeVariableSceneListResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetId(v int64) *DescribeVariableSceneListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetLastModifiedOperator(v string) *DescribeVariableSceneListResponseBodyResultObject {
	s.LastModifiedOperator = &v
	return s
}

func (s *DescribeVariableSceneListResponseBodyResultObject) SetStatus(v string) *DescribeVariableSceneListResponseBodyResultObject {
	s.Status = &v
	return s
}

type DescribeVariableSceneListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVariableSceneListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVariableSceneListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVariableSceneListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVariableSceneListResponse) SetHeaders(v map[string]*string) *DescribeVariableSceneListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVariableSceneListResponse) SetStatusCode(v int32) *DescribeVariableSceneListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVariableSceneListResponse) SetBody(v *DescribeVariableSceneListResponseBody) *DescribeVariableSceneListResponse {
	s.Body = v
	return s
}

type ExpressionTestRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// This parameter is required.
	ExpressionVariable    *string `json:"expressionVariable,omitempty" xml:"expressionVariable,omitempty"`
	ExpressionVariableIds *string `json:"expressionVariableIds,omitempty" xml:"expressionVariableIds,omitempty"`
	Id                    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s ExpressionTestRequest) String() string {
	return tea.Prettify(s)
}

func (s ExpressionTestRequest) GoString() string {
	return s.String()
}

func (s *ExpressionTestRequest) SetLang(v string) *ExpressionTestRequest {
	s.Lang = &v
	return s
}

func (s *ExpressionTestRequest) SetExpression(v string) *ExpressionTestRequest {
	s.Expression = &v
	return s
}

func (s *ExpressionTestRequest) SetExpressionVariable(v string) *ExpressionTestRequest {
	s.ExpressionVariable = &v
	return s
}

func (s *ExpressionTestRequest) SetExpressionVariableIds(v string) *ExpressionTestRequest {
	s.ExpressionVariableIds = &v
	return s
}

func (s *ExpressionTestRequest) SetId(v int64) *ExpressionTestRequest {
	s.Id = &v
	return s
}

func (s *ExpressionTestRequest) SetRegId(v string) *ExpressionTestRequest {
	s.RegId = &v
	return s
}

func (s *ExpressionTestRequest) SetScene(v string) *ExpressionTestRequest {
	s.Scene = &v
	return s
}

type ExpressionTestResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ExpressionTestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExpressionTestResponseBody) GoString() string {
	return s.String()
}

func (s *ExpressionTestResponseBody) SetRequestId(v string) *ExpressionTestResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExpressionTestResponseBody) SetResultObject(v bool) *ExpressionTestResponseBody {
	s.ResultObject = &v
	return s
}

type ExpressionTestResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExpressionTestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExpressionTestResponse) String() string {
	return tea.Prettify(s)
}

func (s ExpressionTestResponse) GoString() string {
	return s.String()
}

func (s *ExpressionTestResponse) SetHeaders(v map[string]*string) *ExpressionTestResponse {
	s.Headers = v
	return s
}

func (s *ExpressionTestResponse) SetStatusCode(v int32) *ExpressionTestResponse {
	s.StatusCode = &v
	return s
}

func (s *ExpressionTestResponse) SetBody(v *ExpressionTestResponseBody) *ExpressionTestResponse {
	s.Body = v
	return s
}

type FileUploadRequest struct {
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileUrl  *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Tab      *string `json:"Tab,omitempty" xml:"Tab,omitempty"`
}

func (s FileUploadRequest) String() string {
	return tea.Prettify(s)
}

func (s FileUploadRequest) GoString() string {
	return s.String()
}

func (s *FileUploadRequest) SetFileName(v string) *FileUploadRequest {
	s.FileName = &v
	return s
}

func (s *FileUploadRequest) SetFileUrl(v string) *FileUploadRequest {
	s.FileUrl = &v
	return s
}

func (s *FileUploadRequest) SetLang(v string) *FileUploadRequest {
	s.Lang = &v
	return s
}

func (s *FileUploadRequest) SetTab(v string) *FileUploadRequest {
	s.Tab = &v
	return s
}

type FileUploadResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject   *string `json:"ResultObject,omitempty" xml:"ResultObject,omitempty"`
}

func (s FileUploadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FileUploadResponseBody) GoString() string {
	return s.String()
}

func (s *FileUploadResponseBody) SetCode(v string) *FileUploadResponseBody {
	s.Code = &v
	return s
}

func (s *FileUploadResponseBody) SetHttpStatusCode(v string) *FileUploadResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *FileUploadResponseBody) SetMessage(v string) *FileUploadResponseBody {
	s.Message = &v
	return s
}

func (s *FileUploadResponseBody) SetRequestId(v string) *FileUploadResponseBody {
	s.RequestId = &v
	return s
}

func (s *FileUploadResponseBody) SetResultObject(v string) *FileUploadResponseBody {
	s.ResultObject = &v
	return s
}

type FileUploadResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *FileUploadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s FileUploadResponse) String() string {
	return tea.Prettify(s)
}

func (s FileUploadResponse) GoString() string {
	return s.String()
}

func (s *FileUploadResponse) SetHeaders(v map[string]*string) *FileUploadResponse {
	s.Headers = v
	return s
}

func (s *FileUploadResponse) SetStatusCode(v int32) *FileUploadResponse {
	s.StatusCode = &v
	return s
}

func (s *FileUploadResponse) SetBody(v *FileUploadResponseBody) *FileUploadResponse {
	s.Body = v
	return s
}

type ImportNameListRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType  *string `json:"createType,omitempty" xml:"createType,omitempty"`
	Data        *string `json:"data,omitempty" xml:"data,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	ImportType   *string `json:"importType,omitempty" xml:"importType,omitempty"`
	NameListType *string `json:"nameListType,omitempty" xml:"nameListType,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Title      *string `json:"title,omitempty" xml:"title,omitempty"`
	VariableId *int64  `json:"variableId,omitempty" xml:"variableId,omitempty"`
}

func (s ImportNameListRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportNameListRequest) GoString() string {
	return s.String()
}

func (s *ImportNameListRequest) SetLang(v string) *ImportNameListRequest {
	s.Lang = &v
	return s
}

func (s *ImportNameListRequest) SetCreateType(v string) *ImportNameListRequest {
	s.CreateType = &v
	return s
}

func (s *ImportNameListRequest) SetData(v string) *ImportNameListRequest {
	s.Data = &v
	return s
}

func (s *ImportNameListRequest) SetDescription(v string) *ImportNameListRequest {
	s.Description = &v
	return s
}

func (s *ImportNameListRequest) SetImportType(v string) *ImportNameListRequest {
	s.ImportType = &v
	return s
}

func (s *ImportNameListRequest) SetNameListType(v string) *ImportNameListRequest {
	s.NameListType = &v
	return s
}

func (s *ImportNameListRequest) SetRegId(v string) *ImportNameListRequest {
	s.RegId = &v
	return s
}

func (s *ImportNameListRequest) SetTitle(v string) *ImportNameListRequest {
	s.Title = &v
	return s
}

func (s *ImportNameListRequest) SetVariableId(v int64) *ImportNameListRequest {
	s.VariableId = &v
	return s
}

type ImportNameListResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ImportNameListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportNameListResponseBody) GoString() string {
	return s.String()
}

func (s *ImportNameListResponseBody) SetRequestId(v string) *ImportNameListResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportNameListResponseBody) SetResultObject(v bool) *ImportNameListResponseBody {
	s.ResultObject = &v
	return s
}

type ImportNameListResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportNameListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportNameListResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportNameListResponse) GoString() string {
	return s.String()
}

func (s *ImportNameListResponse) SetHeaders(v map[string]*string) *ImportNameListResponse {
	s.Headers = v
	return s
}

func (s *ImportNameListResponse) SetStatusCode(v int32) *ImportNameListResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportNameListResponse) SetBody(v *ImportNameListResponseBody) *ImportNameListResponse {
	s.Body = v
	return s
}

type ImportTemplateEventRequest struct {
	Lang             *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventTemplateIds *string `json:"eventTemplateIds,omitempty" xml:"eventTemplateIds,omitempty"`
	RegId            *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s ImportTemplateEventRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportTemplateEventRequest) GoString() string {
	return s.String()
}

func (s *ImportTemplateEventRequest) SetLang(v string) *ImportTemplateEventRequest {
	s.Lang = &v
	return s
}

func (s *ImportTemplateEventRequest) SetEventTemplateIds(v string) *ImportTemplateEventRequest {
	s.EventTemplateIds = &v
	return s
}

func (s *ImportTemplateEventRequest) SetRegId(v string) *ImportTemplateEventRequest {
	s.RegId = &v
	return s
}

type ImportTemplateEventResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ImportTemplateEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportTemplateEventResponseBody) GoString() string {
	return s.String()
}

func (s *ImportTemplateEventResponseBody) SetRequestId(v string) *ImportTemplateEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportTemplateEventResponseBody) SetData(v bool) *ImportTemplateEventResponseBody {
	s.Data = &v
	return s
}

type ImportTemplateEventResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportTemplateEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportTemplateEventResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportTemplateEventResponse) GoString() string {
	return s.String()
}

func (s *ImportTemplateEventResponse) SetHeaders(v map[string]*string) *ImportTemplateEventResponse {
	s.Headers = v
	return s
}

func (s *ImportTemplateEventResponse) SetStatusCode(v int32) *ImportTemplateEventResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportTemplateEventResponse) SetBody(v *ImportTemplateEventResponseBody) *ImportTemplateEventResponse {
	s.Body = v
	return s
}

type ModifyAppKeyRequest struct {
	Lang   *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	AppKey *string `json:"appKey,omitempty" xml:"appKey,omitempty"`
	Memo   *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s ModifyAppKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppKeyRequest) GoString() string {
	return s.String()
}

func (s *ModifyAppKeyRequest) SetLang(v string) *ModifyAppKeyRequest {
	s.Lang = &v
	return s
}

func (s *ModifyAppKeyRequest) SetAppKey(v string) *ModifyAppKeyRequest {
	s.AppKey = &v
	return s
}

func (s *ModifyAppKeyRequest) SetMemo(v string) *ModifyAppKeyRequest {
	s.Memo = &v
	return s
}

func (s *ModifyAppKeyRequest) SetRegId(v string) *ModifyAppKeyRequest {
	s.RegId = &v
	return s
}

type ModifyAppKeyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ModifyAppKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppKeyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAppKeyResponseBody) SetRequestId(v string) *ModifyAppKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyAppKeyResponseBody) SetData(v bool) *ModifyAppKeyResponseBody {
	s.Data = &v
	return s
}

type ModifyAppKeyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAppKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAppKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppKeyResponse) GoString() string {
	return s.String()
}

func (s *ModifyAppKeyResponse) SetHeaders(v map[string]*string) *ModifyAppKeyResponse {
	s.Headers = v
	return s
}

func (s *ModifyAppKeyResponse) SetStatusCode(v int32) *ModifyAppKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAppKeyResponse) SetBody(v *ModifyAppKeyResponseBody) *ModifyAppKeyResponse {
	s.Body = v
	return s
}

type ModifyCustVariableRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// This parameter is required.
	DataVersion *int64  `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EventCodes  *string `json:"eventCodes,omitempty" xml:"eventCodes,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	Name    *string `json:"name,omitempty" xml:"name,omitempty"`
	Outputs *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s ModifyCustVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustVariableRequest) GoString() string {
	return s.String()
}

func (s *ModifyCustVariableRequest) SetLang(v string) *ModifyCustVariableRequest {
	s.Lang = &v
	return s
}

func (s *ModifyCustVariableRequest) SetCondition(v string) *ModifyCustVariableRequest {
	s.Condition = &v
	return s
}

func (s *ModifyCustVariableRequest) SetDataVersion(v int64) *ModifyCustVariableRequest {
	s.DataVersion = &v
	return s
}

func (s *ModifyCustVariableRequest) SetDescription(v string) *ModifyCustVariableRequest {
	s.Description = &v
	return s
}

func (s *ModifyCustVariableRequest) SetEventCodes(v string) *ModifyCustVariableRequest {
	s.EventCodes = &v
	return s
}

func (s *ModifyCustVariableRequest) SetId(v int64) *ModifyCustVariableRequest {
	s.Id = &v
	return s
}

func (s *ModifyCustVariableRequest) SetName(v string) *ModifyCustVariableRequest {
	s.Name = &v
	return s
}

func (s *ModifyCustVariableRequest) SetOutputs(v string) *ModifyCustVariableRequest {
	s.Outputs = &v
	return s
}

func (s *ModifyCustVariableRequest) SetRegId(v string) *ModifyCustVariableRequest {
	s.RegId = &v
	return s
}

type ModifyCustVariableResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject []*ModifyCustVariableResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s ModifyCustVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustVariableResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCustVariableResponseBody) SetRequestId(v string) *ModifyCustVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCustVariableResponseBody) SetResultObject(v []*ModifyCustVariableResponseBodyResultObject) *ModifyCustVariableResponseBody {
	s.ResultObject = v
	return s
}

type ModifyCustVariableResponseBodyResultObject struct {
	FailType *string `json:"failType,omitempty" xml:"failType,omitempty"`
	Message  *string `json:"message,omitempty" xml:"message,omitempty"`
	Success  *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ModifyCustVariableResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustVariableResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *ModifyCustVariableResponseBodyResultObject) SetFailType(v string) *ModifyCustVariableResponseBodyResultObject {
	s.FailType = &v
	return s
}

func (s *ModifyCustVariableResponseBodyResultObject) SetMessage(v string) *ModifyCustVariableResponseBodyResultObject {
	s.Message = &v
	return s
}

func (s *ModifyCustVariableResponseBodyResultObject) SetSuccess(v bool) *ModifyCustVariableResponseBodyResultObject {
	s.Success = &v
	return s
}

type ModifyCustVariableResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCustVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCustVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustVariableResponse) GoString() string {
	return s.String()
}

func (s *ModifyCustVariableResponse) SetHeaders(v map[string]*string) *ModifyCustVariableResponse {
	s.Headers = v
	return s
}

func (s *ModifyCustVariableResponse) SetStatusCode(v int32) *ModifyCustVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCustVariableResponse) SetBody(v *ModifyCustVariableResponseBody) *ModifyCustVariableResponse {
	s.Body = v
	return s
}

type ModifyEventRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BizVersion     *int32  `json:"bizVersion,omitempty" xml:"bizVersion,omitempty"`
	CreateType     *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode      *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	InputFieldsStr *string `json:"inputFieldsStr,omitempty" xml:"inputFieldsStr,omitempty"`
	Memo           *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateType   *string `json:"templateType,omitempty" xml:"templateType,omitempty"`
}

func (s ModifyEventRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEventRequest) GoString() string {
	return s.String()
}

func (s *ModifyEventRequest) SetLang(v string) *ModifyEventRequest {
	s.Lang = &v
	return s
}

func (s *ModifyEventRequest) SetBizVersion(v int32) *ModifyEventRequest {
	s.BizVersion = &v
	return s
}

func (s *ModifyEventRequest) SetCreateType(v string) *ModifyEventRequest {
	s.CreateType = &v
	return s
}

func (s *ModifyEventRequest) SetEventCode(v string) *ModifyEventRequest {
	s.EventCode = &v
	return s
}

func (s *ModifyEventRequest) SetInputFieldsStr(v string) *ModifyEventRequest {
	s.InputFieldsStr = &v
	return s
}

func (s *ModifyEventRequest) SetMemo(v string) *ModifyEventRequest {
	s.Memo = &v
	return s
}

func (s *ModifyEventRequest) SetRegId(v string) *ModifyEventRequest {
	s.RegId = &v
	return s
}

func (s *ModifyEventRequest) SetTemplateType(v string) *ModifyEventRequest {
	s.TemplateType = &v
	return s
}

type ModifyEventResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEventResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEventResponseBody) SetRequestId(v string) *ModifyEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyEventResponseBody) SetResultObject(v bool) *ModifyEventResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyEventResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyEventResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEventResponse) GoString() string {
	return s.String()
}

func (s *ModifyEventResponse) SetHeaders(v map[string]*string) *ModifyEventResponse {
	s.Headers = v
	return s
}

func (s *ModifyEventResponse) SetStatusCode(v int32) *ModifyEventResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEventResponse) SetBody(v *ModifyEventResponseBody) *ModifyEventResponse {
	s.Body = v
	return s
}

type ModifyEventStatusRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType     *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode      *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	FromEventSatus *string `json:"fromEventSatus,omitempty" xml:"fromEventSatus,omitempty"`
	RegId          *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ToEventSatus   *string `json:"toEventSatus,omitempty" xml:"toEventSatus,omitempty"`
}

func (s ModifyEventStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEventStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyEventStatusRequest) SetLang(v string) *ModifyEventStatusRequest {
	s.Lang = &v
	return s
}

func (s *ModifyEventStatusRequest) SetCreateType(v string) *ModifyEventStatusRequest {
	s.CreateType = &v
	return s
}

func (s *ModifyEventStatusRequest) SetEventCode(v string) *ModifyEventStatusRequest {
	s.EventCode = &v
	return s
}

func (s *ModifyEventStatusRequest) SetFromEventSatus(v string) *ModifyEventStatusRequest {
	s.FromEventSatus = &v
	return s
}

func (s *ModifyEventStatusRequest) SetRegId(v string) *ModifyEventStatusRequest {
	s.RegId = &v
	return s
}

func (s *ModifyEventStatusRequest) SetToEventSatus(v string) *ModifyEventStatusRequest {
	s.ToEventSatus = &v
	return s
}

type ModifyEventStatusResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyEventStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEventStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEventStatusResponseBody) SetRequestId(v string) *ModifyEventStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyEventStatusResponseBody) SetResultObject(v bool) *ModifyEventStatusResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyEventStatusResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyEventStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyEventStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEventStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyEventStatusResponse) SetHeaders(v map[string]*string) *ModifyEventStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyEventStatusResponse) SetStatusCode(v int32) *ModifyEventStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEventStatusResponse) SetBody(v *ModifyEventStatusResponseBody) *ModifyEventStatusResponse {
	s.Body = v
	return s
}

type ModifyExpressionVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	DataVersion *int64  `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	// This parameter is required.
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// This parameter is required.
	ExpressionTitle    *string `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	ExpressionVariable *string `json:"expressionVariable,omitempty" xml:"expressionVariable,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	Outlier *string `json:"outlier,omitempty" xml:"outlier,omitempty"`
	// This parameter is required.
	Outputs *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ModifyExpressionVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyExpressionVariableRequest) GoString() string {
	return s.String()
}

func (s *ModifyExpressionVariableRequest) SetLang(v string) *ModifyExpressionVariableRequest {
	s.Lang = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetDataVersion(v int64) *ModifyExpressionVariableRequest {
	s.DataVersion = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetDescription(v string) *ModifyExpressionVariableRequest {
	s.Description = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetEventCode(v string) *ModifyExpressionVariableRequest {
	s.EventCode = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetExpression(v string) *ModifyExpressionVariableRequest {
	s.Expression = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetExpressionTitle(v string) *ModifyExpressionVariableRequest {
	s.ExpressionTitle = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetExpressionVariable(v string) *ModifyExpressionVariableRequest {
	s.ExpressionVariable = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetId(v int64) *ModifyExpressionVariableRequest {
	s.Id = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetOutlier(v string) *ModifyExpressionVariableRequest {
	s.Outlier = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetOutputs(v string) *ModifyExpressionVariableRequest {
	s.Outputs = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetRegId(v string) *ModifyExpressionVariableRequest {
	s.RegId = &v
	return s
}

func (s *ModifyExpressionVariableRequest) SetTitle(v string) *ModifyExpressionVariableRequest {
	s.Title = &v
	return s
}

type ModifyExpressionVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyExpressionVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyExpressionVariableResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyExpressionVariableResponseBody) SetRequestId(v string) *ModifyExpressionVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyExpressionVariableResponseBody) SetResultObject(v bool) *ModifyExpressionVariableResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyExpressionVariableResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyExpressionVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyExpressionVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyExpressionVariableResponse) GoString() string {
	return s.String()
}

func (s *ModifyExpressionVariableResponse) SetHeaders(v map[string]*string) *ModifyExpressionVariableResponse {
	s.Headers = v
	return s
}

func (s *ModifyExpressionVariableResponse) SetStatusCode(v int32) *ModifyExpressionVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyExpressionVariableResponse) SetBody(v *ModifyExpressionVariableResponseBody) *ModifyExpressionVariableResponse {
	s.Body = v
	return s
}

type ModifyFieldRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Classify    *string `json:"classify,omitempty" xml:"classify,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	EnumData    *string `json:"enumData,omitempty" xml:"enumData,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ModifyFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFieldRequest) GoString() string {
	return s.String()
}

func (s *ModifyFieldRequest) SetLang(v string) *ModifyFieldRequest {
	s.Lang = &v
	return s
}

func (s *ModifyFieldRequest) SetClassify(v string) *ModifyFieldRequest {
	s.Classify = &v
	return s
}

func (s *ModifyFieldRequest) SetDescription(v string) *ModifyFieldRequest {
	s.Description = &v
	return s
}

func (s *ModifyFieldRequest) SetEnumData(v string) *ModifyFieldRequest {
	s.EnumData = &v
	return s
}

func (s *ModifyFieldRequest) SetId(v int64) *ModifyFieldRequest {
	s.Id = &v
	return s
}

func (s *ModifyFieldRequest) SetName(v string) *ModifyFieldRequest {
	s.Name = &v
	return s
}

func (s *ModifyFieldRequest) SetRegId(v string) *ModifyFieldRequest {
	s.RegId = &v
	return s
}

func (s *ModifyFieldRequest) SetTitle(v string) *ModifyFieldRequest {
	s.Title = &v
	return s
}

type ModifyFieldResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFieldResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFieldResponseBody) SetRequestId(v string) *ModifyFieldResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFieldResponseBody) SetResultObject(v bool) *ModifyFieldResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyFieldResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFieldResponse) GoString() string {
	return s.String()
}

func (s *ModifyFieldResponse) SetHeaders(v map[string]*string) *ModifyFieldResponse {
	s.Headers = v
	return s
}

func (s *ModifyFieldResponse) SetStatusCode(v int32) *ModifyFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFieldResponse) SetBody(v *ModifyFieldResponseBody) *ModifyFieldResponse {
	s.Body = v
	return s
}

type ModifyPocTaskRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	AccessType  *string `json:"accessType,omitempty" xml:"accessType,omitempty"`
	Config      *string `json:"config,omitempty" xml:"config,omitempty"`
	FileName    *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	FileType    *string `json:"fileType,omitempty" xml:"fileType,omitempty"`
	FileUrl     *string `json:"fileUrl,omitempty" xml:"fileUrl,omitempty"`
	Reason      *string `json:"reason,omitempty" xml:"reason,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	ServiceCode *string `json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
	ServiceName *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	TaskId      *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
	TaskName    *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
	Type        *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ModifyPocTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPocTaskRequest) GoString() string {
	return s.String()
}

func (s *ModifyPocTaskRequest) SetLang(v string) *ModifyPocTaskRequest {
	s.Lang = &v
	return s
}

func (s *ModifyPocTaskRequest) SetAccessType(v string) *ModifyPocTaskRequest {
	s.AccessType = &v
	return s
}

func (s *ModifyPocTaskRequest) SetConfig(v string) *ModifyPocTaskRequest {
	s.Config = &v
	return s
}

func (s *ModifyPocTaskRequest) SetFileName(v string) *ModifyPocTaskRequest {
	s.FileName = &v
	return s
}

func (s *ModifyPocTaskRequest) SetFileType(v string) *ModifyPocTaskRequest {
	s.FileType = &v
	return s
}

func (s *ModifyPocTaskRequest) SetFileUrl(v string) *ModifyPocTaskRequest {
	s.FileUrl = &v
	return s
}

func (s *ModifyPocTaskRequest) SetReason(v string) *ModifyPocTaskRequest {
	s.Reason = &v
	return s
}

func (s *ModifyPocTaskRequest) SetRegId(v string) *ModifyPocTaskRequest {
	s.RegId = &v
	return s
}

func (s *ModifyPocTaskRequest) SetServiceCode(v string) *ModifyPocTaskRequest {
	s.ServiceCode = &v
	return s
}

func (s *ModifyPocTaskRequest) SetServiceName(v string) *ModifyPocTaskRequest {
	s.ServiceName = &v
	return s
}

func (s *ModifyPocTaskRequest) SetTaskId(v string) *ModifyPocTaskRequest {
	s.TaskId = &v
	return s
}

func (s *ModifyPocTaskRequest) SetTaskName(v string) *ModifyPocTaskRequest {
	s.TaskName = &v
	return s
}

func (s *ModifyPocTaskRequest) SetType(v string) *ModifyPocTaskRequest {
	s.Type = &v
	return s
}

type ModifyPocTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyPocTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPocTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPocTaskResponseBody) SetRequestId(v string) *ModifyPocTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyPocTaskResponseBody) SetResultObject(v bool) *ModifyPocTaskResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyPocTaskResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyPocTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyPocTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPocTaskResponse) GoString() string {
	return s.String()
}

func (s *ModifyPocTaskResponse) SetHeaders(v map[string]*string) *ModifyPocTaskResponse {
	s.Headers = v
	return s
}

func (s *ModifyPocTaskResponse) SetStatusCode(v int32) *ModifyPocTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPocTaskResponse) SetBody(v *ModifyPocTaskResponseBody) *ModifyPocTaskResponse {
	s.Body = v
	return s
}

type ModifyRulePriorityRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	Priority      *int32  `json:"priority,omitempty" xml:"priority,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId        *int64  `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
}

func (s ModifyRulePriorityRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRulePriorityRequest) GoString() string {
	return s.String()
}

func (s *ModifyRulePriorityRequest) SetLang(v string) *ModifyRulePriorityRequest {
	s.Lang = &v
	return s
}

func (s *ModifyRulePriorityRequest) SetConsoleRuleId(v int64) *ModifyRulePriorityRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *ModifyRulePriorityRequest) SetPriority(v int32) *ModifyRulePriorityRequest {
	s.Priority = &v
	return s
}

func (s *ModifyRulePriorityRequest) SetRegId(v string) *ModifyRulePriorityRequest {
	s.RegId = &v
	return s
}

func (s *ModifyRulePriorityRequest) SetRuleId(v int64) *ModifyRulePriorityRequest {
	s.RuleId = &v
	return s
}

type ModifyRulePriorityResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyRulePriorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRulePriorityResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRulePriorityResponseBody) SetRequestId(v string) *ModifyRulePriorityResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyRulePriorityResponseBody) SetResultObject(v bool) *ModifyRulePriorityResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyRulePriorityResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyRulePriorityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyRulePriorityResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRulePriorityResponse) GoString() string {
	return s.String()
}

func (s *ModifyRulePriorityResponse) SetHeaders(v map[string]*string) *ModifyRulePriorityResponse {
	s.Headers = v
	return s
}

func (s *ModifyRulePriorityResponse) SetStatusCode(v int32) *ModifyRulePriorityResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRulePriorityResponse) SetBody(v *ModifyRulePriorityResponseBody) *ModifyRulePriorityResponse {
	s.Body = v
	return s
}

type ModifyRuleStatusRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ApplyUserId   *string `json:"applyUserId,omitempty" xml:"applyUserId,omitempty"`
	ApplyUserName *string `json:"applyUserName,omitempty" xml:"applyUserName,omitempty"`
	AuditRemark   *string `json:"auditRemark,omitempty" xml:"auditRemark,omitempty"`
	AuditUserId   *string `json:"auditUserId,omitempty" xml:"auditUserId,omitempty"`
	AuditUserName *string `json:"auditUserName,omitempty" xml:"auditUserName,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	EventType     *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleAuditType *string `json:"ruleAuditType,omitempty" xml:"ruleAuditType,omitempty"`
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleVersionId *int64  `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
}

func (s ModifyRuleStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyRuleStatusRequest) SetLang(v string) *ModifyRuleStatusRequest {
	s.Lang = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetApplyUserId(v string) *ModifyRuleStatusRequest {
	s.ApplyUserId = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetApplyUserName(v string) *ModifyRuleStatusRequest {
	s.ApplyUserName = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetAuditRemark(v string) *ModifyRuleStatusRequest {
	s.AuditRemark = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetAuditUserId(v string) *ModifyRuleStatusRequest {
	s.AuditUserId = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetAuditUserName(v string) *ModifyRuleStatusRequest {
	s.AuditUserName = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetConsoleRuleId(v int64) *ModifyRuleStatusRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetEventType(v string) *ModifyRuleStatusRequest {
	s.EventType = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetRegId(v string) *ModifyRuleStatusRequest {
	s.RegId = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetRuleAuditType(v string) *ModifyRuleStatusRequest {
	s.RuleAuditType = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetRuleId(v string) *ModifyRuleStatusRequest {
	s.RuleId = &v
	return s
}

func (s *ModifyRuleStatusRequest) SetRuleVersionId(v int64) *ModifyRuleStatusRequest {
	s.RuleVersionId = &v
	return s
}

type ModifyRuleStatusResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyRuleStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRuleStatusResponseBody) SetRequestId(v string) *ModifyRuleStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyRuleStatusResponseBody) SetResultObject(v bool) *ModifyRuleStatusResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyRuleStatusResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyRuleStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyRuleStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyRuleStatusResponse) SetHeaders(v map[string]*string) *ModifyRuleStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyRuleStatusResponse) SetStatusCode(v int32) *ModifyRuleStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRuleStatusResponse) SetBody(v *ModifyRuleStatusResponseBody) *ModifyRuleStatusResponse {
	s.Body = v
	return s
}

type ModifyTemplateRequest struct {
	Lang         *string                           `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Description  *string                           `json:"description,omitempty" xml:"description,omitempty"`
	EventCode    *string                           `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	InputFields  *ModifyTemplateRequestInputFields `json:"inputFields,omitempty" xml:"inputFields,omitempty" type:"Struct"`
	RegId        *string                           `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateId   *int64                            `json:"templateId,omitempty" xml:"templateId,omitempty"`
	TemplateType *string                           `json:"templateType,omitempty" xml:"templateType,omitempty"`
	Version      *int32                            `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ModifyTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateRequest) GoString() string {
	return s.String()
}

func (s *ModifyTemplateRequest) SetLang(v string) *ModifyTemplateRequest {
	s.Lang = &v
	return s
}

func (s *ModifyTemplateRequest) SetDescription(v string) *ModifyTemplateRequest {
	s.Description = &v
	return s
}

func (s *ModifyTemplateRequest) SetEventCode(v string) *ModifyTemplateRequest {
	s.EventCode = &v
	return s
}

func (s *ModifyTemplateRequest) SetInputFields(v *ModifyTemplateRequestInputFields) *ModifyTemplateRequest {
	s.InputFields = v
	return s
}

func (s *ModifyTemplateRequest) SetRegId(v string) *ModifyTemplateRequest {
	s.RegId = &v
	return s
}

func (s *ModifyTemplateRequest) SetTemplateId(v int64) *ModifyTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *ModifyTemplateRequest) SetTemplateType(v string) *ModifyTemplateRequest {
	s.TemplateType = &v
	return s
}

func (s *ModifyTemplateRequest) SetVersion(v int32) *ModifyTemplateRequest {
	s.Version = &v
	return s
}

type ModifyTemplateRequestInputFields struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	FieldCode   *string `json:"fieldCode,omitempty" xml:"fieldCode,omitempty"`
	FieldRank   *int32  `json:"fieldRank,omitempty" xml:"fieldRank,omitempty"`
	FieldSource *string `json:"fieldSource,omitempty" xml:"fieldSource,omitempty"`
	FieldType   *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ModifyTemplateRequestInputFields) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateRequestInputFields) GoString() string {
	return s.String()
}

func (s *ModifyTemplateRequestInputFields) SetDescription(v string) *ModifyTemplateRequestInputFields {
	s.Description = &v
	return s
}

func (s *ModifyTemplateRequestInputFields) SetFieldCode(v string) *ModifyTemplateRequestInputFields {
	s.FieldCode = &v
	return s
}

func (s *ModifyTemplateRequestInputFields) SetFieldRank(v int32) *ModifyTemplateRequestInputFields {
	s.FieldRank = &v
	return s
}

func (s *ModifyTemplateRequestInputFields) SetFieldSource(v string) *ModifyTemplateRequestInputFields {
	s.FieldSource = &v
	return s
}

func (s *ModifyTemplateRequestInputFields) SetFieldType(v string) *ModifyTemplateRequestInputFields {
	s.FieldType = &v
	return s
}

func (s *ModifyTemplateRequestInputFields) SetTitle(v string) *ModifyTemplateRequestInputFields {
	s.Title = &v
	return s
}

type ModifyTemplateResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTemplateResponseBody) SetRequestId(v string) *ModifyTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTemplateResponseBody) SetResultObject(v bool) *ModifyTemplateResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateResponse) GoString() string {
	return s.String()
}

func (s *ModifyTemplateResponse) SetHeaders(v map[string]*string) *ModifyTemplateResponse {
	s.Headers = v
	return s
}

func (s *ModifyTemplateResponse) SetStatusCode(v int32) *ModifyTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTemplateResponse) SetBody(v *ModifyTemplateResponseBody) *ModifyTemplateResponse {
	s.Body = v
	return s
}

type ModifyTemplateStatusRequest struct {
	Lang              *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	FromTemplateSatus *string `json:"fromTemplateSatus,omitempty" xml:"fromTemplateSatus,omitempty"`
	RegId             *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateId        *int64  `json:"templateId,omitempty" xml:"templateId,omitempty"`
	ToTemplateSatus   *string `json:"toTemplateSatus,omitempty" xml:"toTemplateSatus,omitempty"`
}

func (s ModifyTemplateStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyTemplateStatusRequest) SetLang(v string) *ModifyTemplateStatusRequest {
	s.Lang = &v
	return s
}

func (s *ModifyTemplateStatusRequest) SetFromTemplateSatus(v string) *ModifyTemplateStatusRequest {
	s.FromTemplateSatus = &v
	return s
}

func (s *ModifyTemplateStatusRequest) SetRegId(v string) *ModifyTemplateStatusRequest {
	s.RegId = &v
	return s
}

func (s *ModifyTemplateStatusRequest) SetTemplateId(v int64) *ModifyTemplateStatusRequest {
	s.TemplateId = &v
	return s
}

func (s *ModifyTemplateStatusRequest) SetToTemplateSatus(v string) *ModifyTemplateStatusRequest {
	s.ToTemplateSatus = &v
	return s
}

type ModifyTemplateStatusResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyTemplateStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTemplateStatusResponseBody) SetRequestId(v string) *ModifyTemplateStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTemplateStatusResponseBody) SetResultObject(v bool) *ModifyTemplateStatusResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyTemplateStatusResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTemplateStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTemplateStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTemplateStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyTemplateStatusResponse) SetHeaders(v map[string]*string) *ModifyTemplateStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyTemplateStatusResponse) SetStatusCode(v int32) *ModifyTemplateStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTemplateStatusResponse) SetBody(v *ModifyTemplateStatusResponseBody) *ModifyTemplateStatusResponse {
	s.Body = v
	return s
}

type ModifyVariableRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ModifyVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVariableRequest) GoString() string {
	return s.String()
}

func (s *ModifyVariableRequest) SetLang(v string) *ModifyVariableRequest {
	s.Lang = &v
	return s
}

func (s *ModifyVariableRequest) SetDescription(v string) *ModifyVariableRequest {
	s.Description = &v
	return s
}

func (s *ModifyVariableRequest) SetId(v int64) *ModifyVariableRequest {
	s.Id = &v
	return s
}

func (s *ModifyVariableRequest) SetRegId(v string) *ModifyVariableRequest {
	s.RegId = &v
	return s
}

func (s *ModifyVariableRequest) SetTitle(v string) *ModifyVariableRequest {
	s.Title = &v
	return s
}

type ModifyVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s ModifyVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVariableResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVariableResponseBody) SetRequestId(v string) *ModifyVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyVariableResponseBody) SetResultObject(v bool) *ModifyVariableResponseBody {
	s.ResultObject = &v
	return s
}

type ModifyVariableResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVariableResponse) GoString() string {
	return s.String()
}

func (s *ModifyVariableResponse) SetHeaders(v map[string]*string) *ModifyVariableResponse {
	s.Headers = v
	return s
}

func (s *ModifyVariableResponse) SetStatusCode(v int32) *ModifyVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVariableResponse) SetBody(v *ModifyVariableResponseBody) *ModifyVariableResponse {
	s.Body = v
	return s
}

type OpenConsoleSlsRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s OpenConsoleSlsRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenConsoleSlsRequest) GoString() string {
	return s.String()
}

func (s *OpenConsoleSlsRequest) SetLang(v string) *OpenConsoleSlsRequest {
	s.Lang = &v
	return s
}

func (s *OpenConsoleSlsRequest) SetRegId(v string) *OpenConsoleSlsRequest {
	s.RegId = &v
	return s
}

func (s *OpenConsoleSlsRequest) SetScene(v string) *OpenConsoleSlsRequest {
	s.Scene = &v
	return s
}

type OpenConsoleSlsResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *string `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s OpenConsoleSlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenConsoleSlsResponseBody) GoString() string {
	return s.String()
}

func (s *OpenConsoleSlsResponseBody) SetRequestId(v string) *OpenConsoleSlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenConsoleSlsResponseBody) SetResultObject(v string) *OpenConsoleSlsResponseBody {
	s.ResultObject = &v
	return s
}

type OpenConsoleSlsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenConsoleSlsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenConsoleSlsResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenConsoleSlsResponse) GoString() string {
	return s.String()
}

func (s *OpenConsoleSlsResponse) SetHeaders(v map[string]*string) *OpenConsoleSlsResponse {
	s.Headers = v
	return s
}

func (s *OpenConsoleSlsResponse) SetStatusCode(v int32) *OpenConsoleSlsResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenConsoleSlsResponse) SetBody(v *OpenConsoleSlsResponseBody) *OpenConsoleSlsResponse {
	s.Body = v
	return s
}

type OperateFavoriteVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	Operate *string `json:"operate,omitempty" xml:"operate,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s OperateFavoriteVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateFavoriteVariableRequest) GoString() string {
	return s.String()
}

func (s *OperateFavoriteVariableRequest) SetLang(v string) *OperateFavoriteVariableRequest {
	s.Lang = &v
	return s
}

func (s *OperateFavoriteVariableRequest) SetId(v int64) *OperateFavoriteVariableRequest {
	s.Id = &v
	return s
}

func (s *OperateFavoriteVariableRequest) SetOperate(v string) *OperateFavoriteVariableRequest {
	s.Operate = &v
	return s
}

func (s *OperateFavoriteVariableRequest) SetRegId(v string) *OperateFavoriteVariableRequest {
	s.RegId = &v
	return s
}

type OperateFavoriteVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s OperateFavoriteVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateFavoriteVariableResponseBody) GoString() string {
	return s.String()
}

func (s *OperateFavoriteVariableResponseBody) SetRequestId(v string) *OperateFavoriteVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *OperateFavoriteVariableResponseBody) SetResultObject(v bool) *OperateFavoriteVariableResponseBody {
	s.ResultObject = &v
	return s
}

type OperateFavoriteVariableResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OperateFavoriteVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OperateFavoriteVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateFavoriteVariableResponse) GoString() string {
	return s.String()
}

func (s *OperateFavoriteVariableResponse) SetHeaders(v map[string]*string) *OperateFavoriteVariableResponse {
	s.Headers = v
	return s
}

func (s *OperateFavoriteVariableResponse) SetStatusCode(v int32) *OperateFavoriteVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateFavoriteVariableResponse) SetBody(v *OperateFavoriteVariableResponseBody) *OperateFavoriteVariableResponse {
	s.Body = v
	return s
}

type PermissionCheckRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
}

func (s PermissionCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s PermissionCheckRequest) GoString() string {
	return s.String()
}

func (s *PermissionCheckRequest) SetLang(v string) *PermissionCheckRequest {
	s.Lang = &v
	return s
}

func (s *PermissionCheckRequest) SetRegId(v string) *PermissionCheckRequest {
	s.RegId = &v
	return s
}

type PermissionCheckResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject   *string `json:"ResultObject,omitempty" xml:"ResultObject,omitempty"`
}

func (s PermissionCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PermissionCheckResponseBody) GoString() string {
	return s.String()
}

func (s *PermissionCheckResponseBody) SetCode(v string) *PermissionCheckResponseBody {
	s.Code = &v
	return s
}

func (s *PermissionCheckResponseBody) SetHttpStatusCode(v string) *PermissionCheckResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PermissionCheckResponseBody) SetMessage(v string) *PermissionCheckResponseBody {
	s.Message = &v
	return s
}

func (s *PermissionCheckResponseBody) SetRequestId(v string) *PermissionCheckResponseBody {
	s.RequestId = &v
	return s
}

func (s *PermissionCheckResponseBody) SetResultObject(v string) *PermissionCheckResponseBody {
	s.ResultObject = &v
	return s
}

type PermissionCheckResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PermissionCheckResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PermissionCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s PermissionCheckResponse) GoString() string {
	return s.String()
}

func (s *PermissionCheckResponse) SetHeaders(v map[string]*string) *PermissionCheckResponse {
	s.Headers = v
	return s
}

func (s *PermissionCheckResponse) SetStatusCode(v int32) *PermissionCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *PermissionCheckResponse) SetBody(v *PermissionCheckResponseBody) *PermissionCheckResponse {
	s.Body = v
	return s
}

type QueryAuthRuleDetailByRuleIdRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	// This parameter is required.
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleVersionId *int64  `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
}

func (s QueryAuthRuleDetailByRuleIdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthRuleDetailByRuleIdRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthRuleDetailByRuleIdRequest) SetLang(v string) *QueryAuthRuleDetailByRuleIdRequest {
	s.Lang = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdRequest) SetConsoleRuleId(v int64) *QueryAuthRuleDetailByRuleIdRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdRequest) SetRegId(v string) *QueryAuthRuleDetailByRuleIdRequest {
	s.RegId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdRequest) SetRuleId(v string) *QueryAuthRuleDetailByRuleIdRequest {
	s.RuleId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdRequest) SetRuleVersionId(v int64) *QueryAuthRuleDetailByRuleIdRequest {
	s.RuleVersionId = &v
	return s
}

type QueryAuthRuleDetailByRuleIdResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *QueryAuthRuleDetailByRuleIdResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s QueryAuthRuleDetailByRuleIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthRuleDetailByRuleIdResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAuthRuleDetailByRuleIdResponseBody) SetRequestId(v string) *QueryAuthRuleDetailByRuleIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBody) SetResultObject(v *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) *QueryAuthRuleDetailByRuleIdResponseBody {
	s.ResultObject = v
	return s
}

type QueryAuthRuleDetailByRuleIdResponseBodyResultObject struct {
	AuditId         *int64             `json:"auditId,omitempty" xml:"auditId,omitempty"`
	AuthType        *string            `json:"authType,omitempty" xml:"authType,omitempty"`
	AuthUsers       *string            `json:"authUsers,omitempty" xml:"authUsers,omitempty"`
	ConsoleRuleId   *int64             `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	EventCode       *string            `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventName       *string            `json:"eventName,omitempty" xml:"eventName,omitempty"`
	GmtCreate       *int64             `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified     *int64             `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	LogicExpression *string            `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	Memo            *string            `json:"memo,omitempty" xml:"memo,omitempty"`
	Priority        *int64             `json:"priority,omitempty" xml:"priority,omitempty"`
	RuleActionMap   map[string]*string `json:"ruleActionMap,omitempty" xml:"ruleActionMap,omitempty"`
	RuleActions     *string            `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleAuthType    *string            `json:"ruleAuthType,omitempty" xml:"ruleAuthType,omitempty"`
	RuleExpressions *string            `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleId          *string            `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName        *string            `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string            `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
	RuleVersionId   *int64             `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
	TemplateType    *string            `json:"templateType,omitempty" xml:"templateType,omitempty"`
	Version         *int64             `json:"version,omitempty" xml:"version,omitempty"`
}

func (s QueryAuthRuleDetailByRuleIdResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthRuleDetailByRuleIdResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetAuditId(v int64) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.AuditId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetAuthType(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.AuthType = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetAuthUsers(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.AuthUsers = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetConsoleRuleId(v int64) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.ConsoleRuleId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetEventCode(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.EventCode = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetEventName(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.EventName = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetGmtCreate(v int64) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.GmtCreate = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetGmtModified(v int64) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.GmtModified = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetLogicExpression(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.LogicExpression = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetMemo(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.Memo = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetPriority(v int64) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.Priority = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleActionMap(v map[string]*string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleActionMap = v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleActions(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleActions = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleAuthType(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleAuthType = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleExpressions(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleExpressions = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleId(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleName(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleName = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleStatus(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleStatus = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetRuleVersionId(v int64) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.RuleVersionId = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetTemplateType(v string) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.TemplateType = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponseBodyResultObject) SetVersion(v int64) *QueryAuthRuleDetailByRuleIdResponseBodyResultObject {
	s.Version = &v
	return s
}

type QueryAuthRuleDetailByRuleIdResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAuthRuleDetailByRuleIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAuthRuleDetailByRuleIdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthRuleDetailByRuleIdResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthRuleDetailByRuleIdResponse) SetHeaders(v map[string]*string) *QueryAuthRuleDetailByRuleIdResponse {
	s.Headers = v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponse) SetStatusCode(v int32) *QueryAuthRuleDetailByRuleIdResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAuthRuleDetailByRuleIdResponse) SetBody(v *QueryAuthRuleDetailByRuleIdResponseBody) *QueryAuthRuleDetailByRuleIdResponse {
	s.Body = v
	return s
}

type QueryAuthUserNameRequest struct {
	Lang   *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	BindId *int64  `json:"bindId,omitempty" xml:"bindId,omitempty"`
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s QueryAuthUserNameRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthUserNameRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthUserNameRequest) SetLang(v string) *QueryAuthUserNameRequest {
	s.Lang = &v
	return s
}

func (s *QueryAuthUserNameRequest) SetBindId(v int64) *QueryAuthUserNameRequest {
	s.BindId = &v
	return s
}

func (s *QueryAuthUserNameRequest) SetRegId(v string) *QueryAuthUserNameRequest {
	s.RegId = &v
	return s
}

type QueryAuthUserNameResponseBody struct {
	RequestId    *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *QueryAuthUserNameResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Struct"`
}

func (s QueryAuthUserNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthUserNameResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAuthUserNameResponseBody) SetRequestId(v string) *QueryAuthUserNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAuthUserNameResponseBody) SetResultObject(v *QueryAuthUserNameResponseBodyResultObject) *QueryAuthUserNameResponseBody {
	s.ResultObject = v
	return s
}

type QueryAuthUserNameResponseBodyResultObject struct {
	Company *string `json:"company,omitempty" xml:"company,omitempty"`
	UserId  *int64  `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s QueryAuthUserNameResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthUserNameResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *QueryAuthUserNameResponseBodyResultObject) SetCompany(v string) *QueryAuthUserNameResponseBodyResultObject {
	s.Company = &v
	return s
}

func (s *QueryAuthUserNameResponseBodyResultObject) SetUserId(v int64) *QueryAuthUserNameResponseBodyResultObject {
	s.UserId = &v
	return s
}

type QueryAuthUserNameResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAuthUserNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAuthUserNameResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthUserNameResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthUserNameResponse) SetHeaders(v map[string]*string) *QueryAuthUserNameResponse {
	s.Headers = v
	return s
}

func (s *QueryAuthUserNameResponse) SetStatusCode(v int32) *QueryAuthUserNameResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAuthUserNameResponse) SetBody(v *QueryAuthUserNameResponseBody) *QueryAuthUserNameResponse {
	s.Body = v
	return s
}

type QueryAuthorizationUserListRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Id         *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s QueryAuthorizationUserListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationUserListRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationUserListRequest) SetLang(v string) *QueryAuthorizationUserListRequest {
	s.Lang = &v
	return s
}

func (s *QueryAuthorizationUserListRequest) SetCreateType(v string) *QueryAuthorizationUserListRequest {
	s.CreateType = &v
	return s
}

func (s *QueryAuthorizationUserListRequest) SetEventCode(v string) *QueryAuthorizationUserListRequest {
	s.EventCode = &v
	return s
}

func (s *QueryAuthorizationUserListRequest) SetId(v int64) *QueryAuthorizationUserListRequest {
	s.Id = &v
	return s
}

func (s *QueryAuthorizationUserListRequest) SetRegId(v string) *QueryAuthorizationUserListRequest {
	s.RegId = &v
	return s
}

type QueryAuthorizationUserListResponseBody struct {
	RequestId    *string                                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject []*QueryAuthorizationUserListResponseBodyResultObject `json:"resultObject,omitempty" xml:"resultObject,omitempty" type:"Repeated"`
}

func (s QueryAuthorizationUserListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationUserListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationUserListResponseBody) SetRequestId(v string) *QueryAuthorizationUserListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAuthorizationUserListResponseBody) SetResultObject(v []*QueryAuthorizationUserListResponseBodyResultObject) *QueryAuthorizationUserListResponseBody {
	s.ResultObject = v
	return s
}

type QueryAuthorizationUserListResponseBodyResultObject struct {
	Company *string `json:"company,omitempty" xml:"company,omitempty"`
	Id      *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Uid     *string `json:"uid,omitempty" xml:"uid,omitempty"`
	UserId  *int64  `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s QueryAuthorizationUserListResponseBodyResultObject) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationUserListResponseBodyResultObject) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationUserListResponseBodyResultObject) SetCompany(v string) *QueryAuthorizationUserListResponseBodyResultObject {
	s.Company = &v
	return s
}

func (s *QueryAuthorizationUserListResponseBodyResultObject) SetId(v int64) *QueryAuthorizationUserListResponseBodyResultObject {
	s.Id = &v
	return s
}

func (s *QueryAuthorizationUserListResponseBodyResultObject) SetUid(v string) *QueryAuthorizationUserListResponseBodyResultObject {
	s.Uid = &v
	return s
}

func (s *QueryAuthorizationUserListResponseBodyResultObject) SetUserId(v int64) *QueryAuthorizationUserListResponseBodyResultObject {
	s.UserId = &v
	return s
}

type QueryAuthorizationUserListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAuthorizationUserListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAuthorizationUserListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationUserListResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationUserListResponse) SetHeaders(v map[string]*string) *QueryAuthorizationUserListResponse {
	s.Headers = v
	return s
}

func (s *QueryAuthorizationUserListResponse) SetStatusCode(v int32) *QueryAuthorizationUserListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAuthorizationUserListResponse) SetBody(v *QueryAuthorizationUserListResponseBody) *QueryAuthorizationUserListResponse {
	s.Body = v
	return s
}

type RecallRuleAuditRequest struct {
	// This parameter is required.
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s RecallRuleAuditRequest) String() string {
	return tea.Prettify(s)
}

func (s RecallRuleAuditRequest) GoString() string {
	return s.String()
}

func (s *RecallRuleAuditRequest) SetId(v int64) *RecallRuleAuditRequest {
	s.Id = &v
	return s
}

func (s *RecallRuleAuditRequest) SetRegId(v string) *RecallRuleAuditRequest {
	s.RegId = &v
	return s
}

type RecallRuleAuditResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s RecallRuleAuditResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecallRuleAuditResponseBody) GoString() string {
	return s.String()
}

func (s *RecallRuleAuditResponseBody) SetRequestId(v string) *RecallRuleAuditResponseBody {
	s.RequestId = &v
	return s
}

func (s *RecallRuleAuditResponseBody) SetResultObject(v bool) *RecallRuleAuditResponseBody {
	s.ResultObject = &v
	return s
}

type RecallRuleAuditResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RecallRuleAuditResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RecallRuleAuditResponse) String() string {
	return tea.Prettify(s)
}

func (s RecallRuleAuditResponse) GoString() string {
	return s.String()
}

func (s *RecallRuleAuditResponse) SetHeaders(v map[string]*string) *RecallRuleAuditResponse {
	s.Headers = v
	return s
}

func (s *RecallRuleAuditResponse) SetStatusCode(v int32) *RecallRuleAuditResponse {
	s.StatusCode = &v
	return s
}

func (s *RecallRuleAuditResponse) SetBody(v *RecallRuleAuditResponseBody) *RecallRuleAuditResponse {
	s.Body = v
	return s
}

type RemoveEventRequest struct {
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CreateType   *string `json:"createType,omitempty" xml:"createType,omitempty"`
	EventCode    *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Id           *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId        *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateCode *string `json:"templateCode,omitempty" xml:"templateCode,omitempty"`
}

func (s RemoveEventRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveEventRequest) GoString() string {
	return s.String()
}

func (s *RemoveEventRequest) SetLang(v string) *RemoveEventRequest {
	s.Lang = &v
	return s
}

func (s *RemoveEventRequest) SetCreateType(v string) *RemoveEventRequest {
	s.CreateType = &v
	return s
}

func (s *RemoveEventRequest) SetEventCode(v string) *RemoveEventRequest {
	s.EventCode = &v
	return s
}

func (s *RemoveEventRequest) SetId(v int64) *RemoveEventRequest {
	s.Id = &v
	return s
}

func (s *RemoveEventRequest) SetRegId(v string) *RemoveEventRequest {
	s.RegId = &v
	return s
}

func (s *RemoveEventRequest) SetTemplateCode(v string) *RemoveEventRequest {
	s.TemplateCode = &v
	return s
}

type RemoveEventResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s RemoveEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveEventResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveEventResponseBody) SetRequestId(v string) *RemoveEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveEventResponseBody) SetResultObject(v bool) *RemoveEventResponseBody {
	s.ResultObject = &v
	return s
}

type RemoveEventResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveEventResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveEventResponse) GoString() string {
	return s.String()
}

func (s *RemoveEventResponse) SetHeaders(v map[string]*string) *RemoveEventResponse {
	s.Headers = v
	return s
}

func (s *RemoveEventResponse) SetStatusCode(v int32) *RemoveEventResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveEventResponse) SetBody(v *RemoveEventResponseBody) *RemoveEventResponse {
	s.Body = v
	return s
}

type RemoveTemplateRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventCode  *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	RegId      *string `json:"regId,omitempty" xml:"regId,omitempty"`
	TemplateId *int64  `json:"templateId,omitempty" xml:"templateId,omitempty"`
	Version    *int32  `json:"version,omitempty" xml:"version,omitempty"`
}

func (s RemoveTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTemplateRequest) GoString() string {
	return s.String()
}

func (s *RemoveTemplateRequest) SetLang(v string) *RemoveTemplateRequest {
	s.Lang = &v
	return s
}

func (s *RemoveTemplateRequest) SetEventCode(v string) *RemoveTemplateRequest {
	s.EventCode = &v
	return s
}

func (s *RemoveTemplateRequest) SetRegId(v string) *RemoveTemplateRequest {
	s.RegId = &v
	return s
}

func (s *RemoveTemplateRequest) SetTemplateId(v int64) *RemoveTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *RemoveTemplateRequest) SetVersion(v int32) *RemoveTemplateRequest {
	s.Version = &v
	return s
}

type RemoveTemplateResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s RemoveTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveTemplateResponseBody) SetRequestId(v string) *RemoveTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveTemplateResponseBody) SetResultObject(v bool) *RemoveTemplateResponseBody {
	s.ResultObject = &v
	return s
}

type RemoveTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTemplateResponse) GoString() string {
	return s.String()
}

func (s *RemoveTemplateResponse) SetHeaders(v map[string]*string) *RemoveTemplateResponse {
	s.Headers = v
	return s
}

func (s *RemoveTemplateResponse) SetStatusCode(v int32) *RemoveTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveTemplateResponse) SetBody(v *RemoveTemplateResponseBody) *RemoveTemplateResponse {
	s.Body = v
	return s
}

type SampleFileDownloadRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
	Tab   *string `json:"Tab,omitempty" xml:"Tab,omitempty"`
}

func (s SampleFileDownloadRequest) String() string {
	return tea.Prettify(s)
}

func (s SampleFileDownloadRequest) GoString() string {
	return s.String()
}

func (s *SampleFileDownloadRequest) SetLang(v string) *SampleFileDownloadRequest {
	s.Lang = &v
	return s
}

func (s *SampleFileDownloadRequest) SetRegId(v string) *SampleFileDownloadRequest {
	s.RegId = &v
	return s
}

func (s *SampleFileDownloadRequest) SetTab(v string) *SampleFileDownloadRequest {
	s.Tab = &v
	return s
}

type SampleFileDownloadResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject   *string `json:"ResultObject,omitempty" xml:"ResultObject,omitempty"`
}

func (s SampleFileDownloadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SampleFileDownloadResponseBody) GoString() string {
	return s.String()
}

func (s *SampleFileDownloadResponseBody) SetCode(v string) *SampleFileDownloadResponseBody {
	s.Code = &v
	return s
}

func (s *SampleFileDownloadResponseBody) SetHttpStatusCode(v string) *SampleFileDownloadResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SampleFileDownloadResponseBody) SetMessage(v string) *SampleFileDownloadResponseBody {
	s.Message = &v
	return s
}

func (s *SampleFileDownloadResponseBody) SetRequestId(v string) *SampleFileDownloadResponseBody {
	s.RequestId = &v
	return s
}

func (s *SampleFileDownloadResponseBody) SetResultObject(v string) *SampleFileDownloadResponseBody {
	s.ResultObject = &v
	return s
}

type SampleFileDownloadResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SampleFileDownloadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SampleFileDownloadResponse) String() string {
	return tea.Prettify(s)
}

func (s SampleFileDownloadResponse) GoString() string {
	return s.String()
}

func (s *SampleFileDownloadResponse) SetHeaders(v map[string]*string) *SampleFileDownloadResponse {
	s.Headers = v
	return s
}

func (s *SampleFileDownloadResponse) SetStatusCode(v int32) *SampleFileDownloadResponse {
	s.StatusCode = &v
	return s
}

func (s *SampleFileDownloadResponse) SetBody(v *SampleFileDownloadResponseBody) *SampleFileDownloadResponse {
	s.Body = v
	return s
}

type SaveAnalysisColumnRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Columns *string `json:"columns,omitempty" xml:"columns,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s SaveAnalysisColumnRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveAnalysisColumnRequest) GoString() string {
	return s.String()
}

func (s *SaveAnalysisColumnRequest) SetLang(v string) *SaveAnalysisColumnRequest {
	s.Lang = &v
	return s
}

func (s *SaveAnalysisColumnRequest) SetColumns(v string) *SaveAnalysisColumnRequest {
	s.Columns = &v
	return s
}

func (s *SaveAnalysisColumnRequest) SetRegId(v string) *SaveAnalysisColumnRequest {
	s.RegId = &v
	return s
}

type SaveAnalysisColumnResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s SaveAnalysisColumnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveAnalysisColumnResponseBody) GoString() string {
	return s.String()
}

func (s *SaveAnalysisColumnResponseBody) SetRequestId(v string) *SaveAnalysisColumnResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveAnalysisColumnResponseBody) SetResultObject(v bool) *SaveAnalysisColumnResponseBody {
	s.ResultObject = &v
	return s
}

type SaveAnalysisColumnResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveAnalysisColumnResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveAnalysisColumnResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveAnalysisColumnResponse) GoString() string {
	return s.String()
}

func (s *SaveAnalysisColumnResponse) SetHeaders(v map[string]*string) *SaveAnalysisColumnResponse {
	s.Headers = v
	return s
}

func (s *SaveAnalysisColumnResponse) SetStatusCode(v int32) *SaveAnalysisColumnResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveAnalysisColumnResponse) SetBody(v *SaveAnalysisColumnResponseBody) *SaveAnalysisColumnResponse {
	s.Body = v
	return s
}

type SaveByPassOrShuntEventRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventId   *int64  `json:"eventId,omitempty" xml:"eventId,omitempty"`
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	EventType *string `json:"eventType,omitempty" xml:"eventType,omitempty"`
	RegId     *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s SaveByPassOrShuntEventRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveByPassOrShuntEventRequest) GoString() string {
	return s.String()
}

func (s *SaveByPassOrShuntEventRequest) SetLang(v string) *SaveByPassOrShuntEventRequest {
	s.Lang = &v
	return s
}

func (s *SaveByPassOrShuntEventRequest) SetEventId(v int64) *SaveByPassOrShuntEventRequest {
	s.EventId = &v
	return s
}

func (s *SaveByPassOrShuntEventRequest) SetEventName(v string) *SaveByPassOrShuntEventRequest {
	s.EventName = &v
	return s
}

func (s *SaveByPassOrShuntEventRequest) SetEventType(v string) *SaveByPassOrShuntEventRequest {
	s.EventType = &v
	return s
}

func (s *SaveByPassOrShuntEventRequest) SetRegId(v string) *SaveByPassOrShuntEventRequest {
	s.RegId = &v
	return s
}

type SaveByPassOrShuntEventResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s SaveByPassOrShuntEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveByPassOrShuntEventResponseBody) GoString() string {
	return s.String()
}

func (s *SaveByPassOrShuntEventResponseBody) SetCode(v string) *SaveByPassOrShuntEventResponseBody {
	s.Code = &v
	return s
}

func (s *SaveByPassOrShuntEventResponseBody) SetHttpStatusCode(v string) *SaveByPassOrShuntEventResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveByPassOrShuntEventResponseBody) SetMessage(v string) *SaveByPassOrShuntEventResponseBody {
	s.Message = &v
	return s
}

func (s *SaveByPassOrShuntEventResponseBody) SetRequestId(v string) *SaveByPassOrShuntEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveByPassOrShuntEventResponseBody) SetResultObject(v bool) *SaveByPassOrShuntEventResponseBody {
	s.ResultObject = &v
	return s
}

func (s *SaveByPassOrShuntEventResponseBody) SetSuccess(v bool) *SaveByPassOrShuntEventResponseBody {
	s.Success = &v
	return s
}

type SaveByPassOrShuntEventResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveByPassOrShuntEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveByPassOrShuntEventResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveByPassOrShuntEventResponse) GoString() string {
	return s.String()
}

func (s *SaveByPassOrShuntEventResponse) SetHeaders(v map[string]*string) *SaveByPassOrShuntEventResponse {
	s.Headers = v
	return s
}

func (s *SaveByPassOrShuntEventResponse) SetStatusCode(v int32) *SaveByPassOrShuntEventResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveByPassOrShuntEventResponse) SetBody(v *SaveByPassOrShuntEventResponseBody) *SaveByPassOrShuntEventResponse {
	s.Body = v
	return s
}

type StartOrStopByPassShuntEventRequest struct {
	Lang    *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventId *int64  `json:"eventId,omitempty" xml:"eventId,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Status  *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s StartOrStopByPassShuntEventRequest) String() string {
	return tea.Prettify(s)
}

func (s StartOrStopByPassShuntEventRequest) GoString() string {
	return s.String()
}

func (s *StartOrStopByPassShuntEventRequest) SetLang(v string) *StartOrStopByPassShuntEventRequest {
	s.Lang = &v
	return s
}

func (s *StartOrStopByPassShuntEventRequest) SetEventId(v int64) *StartOrStopByPassShuntEventRequest {
	s.EventId = &v
	return s
}

func (s *StartOrStopByPassShuntEventRequest) SetRegId(v string) *StartOrStopByPassShuntEventRequest {
	s.RegId = &v
	return s
}

func (s *StartOrStopByPassShuntEventRequest) SetStatus(v string) *StartOrStopByPassShuntEventRequest {
	s.Status = &v
	return s
}

type StartOrStopByPassShuntEventResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s StartOrStopByPassShuntEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartOrStopByPassShuntEventResponseBody) GoString() string {
	return s.String()
}

func (s *StartOrStopByPassShuntEventResponseBody) SetCode(v string) *StartOrStopByPassShuntEventResponseBody {
	s.Code = &v
	return s
}

func (s *StartOrStopByPassShuntEventResponseBody) SetHttpStatusCode(v string) *StartOrStopByPassShuntEventResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartOrStopByPassShuntEventResponseBody) SetMessage(v string) *StartOrStopByPassShuntEventResponseBody {
	s.Message = &v
	return s
}

func (s *StartOrStopByPassShuntEventResponseBody) SetRequestId(v string) *StartOrStopByPassShuntEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartOrStopByPassShuntEventResponseBody) SetResultObject(v bool) *StartOrStopByPassShuntEventResponseBody {
	s.ResultObject = &v
	return s
}

func (s *StartOrStopByPassShuntEventResponseBody) SetSuccess(v bool) *StartOrStopByPassShuntEventResponseBody {
	s.Success = &v
	return s
}

type StartOrStopByPassShuntEventResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartOrStopByPassShuntEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartOrStopByPassShuntEventResponse) String() string {
	return tea.Prettify(s)
}

func (s StartOrStopByPassShuntEventResponse) GoString() string {
	return s.String()
}

func (s *StartOrStopByPassShuntEventResponse) SetHeaders(v map[string]*string) *StartOrStopByPassShuntEventResponse {
	s.Headers = v
	return s
}

func (s *StartOrStopByPassShuntEventResponse) SetStatusCode(v int32) *StartOrStopByPassShuntEventResponse {
	s.StatusCode = &v
	return s
}

func (s *StartOrStopByPassShuntEventResponse) SetBody(v *StartOrStopByPassShuntEventResponseBody) *StartOrStopByPassShuntEventResponse {
	s.Body = v
	return s
}

type StartSimulationTaskRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id    *string `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s StartSimulationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s StartSimulationTaskRequest) GoString() string {
	return s.String()
}

func (s *StartSimulationTaskRequest) SetLang(v string) *StartSimulationTaskRequest {
	s.Lang = &v
	return s
}

func (s *StartSimulationTaskRequest) SetId(v string) *StartSimulationTaskRequest {
	s.Id = &v
	return s
}

func (s *StartSimulationTaskRequest) SetRegId(v string) *StartSimulationTaskRequest {
	s.RegId = &v
	return s
}

type StartSimulationTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s StartSimulationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartSimulationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *StartSimulationTaskResponseBody) SetRequestId(v string) *StartSimulationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartSimulationTaskResponseBody) SetResultObject(v bool) *StartSimulationTaskResponseBody {
	s.ResultObject = &v
	return s
}

type StartSimulationTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartSimulationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartSimulationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StartSimulationTaskResponse) GoString() string {
	return s.String()
}

func (s *StartSimulationTaskResponse) SetHeaders(v map[string]*string) *StartSimulationTaskResponse {
	s.Headers = v
	return s
}

func (s *StartSimulationTaskResponse) SetStatusCode(v int32) *StartSimulationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *StartSimulationTaskResponse) SetBody(v *StartSimulationTaskResponseBody) *StartSimulationTaskResponse {
	s.Body = v
	return s
}

type StopSimulationTaskRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id    *string `json:"id,omitempty" xml:"id,omitempty"`
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s StopSimulationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s StopSimulationTaskRequest) GoString() string {
	return s.String()
}

func (s *StopSimulationTaskRequest) SetLang(v string) *StopSimulationTaskRequest {
	s.Lang = &v
	return s
}

func (s *StopSimulationTaskRequest) SetId(v string) *StopSimulationTaskRequest {
	s.Id = &v
	return s
}

func (s *StopSimulationTaskRequest) SetRegId(v string) *StopSimulationTaskRequest {
	s.RegId = &v
	return s
}

type StopSimulationTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s StopSimulationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopSimulationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *StopSimulationTaskResponseBody) SetRequestId(v string) *StopSimulationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopSimulationTaskResponseBody) SetResultObject(v bool) *StopSimulationTaskResponseBody {
	s.ResultObject = &v
	return s
}

type StopSimulationTaskResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopSimulationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopSimulationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StopSimulationTaskResponse) GoString() string {
	return s.String()
}

func (s *StopSimulationTaskResponse) SetHeaders(v map[string]*string) *StopSimulationTaskResponse {
	s.Headers = v
	return s
}

func (s *StopSimulationTaskResponse) SetStatusCode(v int32) *StopSimulationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *StopSimulationTaskResponse) SetBody(v *StopSimulationTaskResponseBody) *StopSimulationTaskResponse {
	s.Body = v
	return s
}

type SubmitImportTaskRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Url      *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s SubmitImportTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitImportTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitImportTaskRequest) SetLang(v string) *SubmitImportTaskRequest {
	s.Lang = &v
	return s
}

func (s *SubmitImportTaskRequest) SetFileName(v string) *SubmitImportTaskRequest {
	s.FileName = &v
	return s
}

func (s *SubmitImportTaskRequest) SetRegId(v string) *SubmitImportTaskRequest {
	s.RegId = &v
	return s
}

func (s *SubmitImportTaskRequest) SetUrl(v string) *SubmitImportTaskRequest {
	s.Url = &v
	return s
}

type SubmitImportTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s SubmitImportTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitImportTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitImportTaskResponseBody) SetRequestId(v string) *SubmitImportTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitImportTaskResponseBody) SetResultObject(v bool) *SubmitImportTaskResponseBody {
	s.ResultObject = &v
	return s
}

type SubmitImportTaskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitImportTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitImportTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitImportTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitImportTaskResponse) SetHeaders(v map[string]*string) *SubmitImportTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitImportTaskResponse) SetStatusCode(v int32) *SubmitImportTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitImportTaskResponse) SetBody(v *SubmitImportTaskResponseBody) *SubmitImportTaskResponse {
	s.Body = v
	return s
}

type SwitchExpressionVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	DataVersion *int64 `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SwitchExpressionVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchExpressionVariableRequest) GoString() string {
	return s.String()
}

func (s *SwitchExpressionVariableRequest) SetLang(v string) *SwitchExpressionVariableRequest {
	s.Lang = &v
	return s
}

func (s *SwitchExpressionVariableRequest) SetDataVersion(v int64) *SwitchExpressionVariableRequest {
	s.DataVersion = &v
	return s
}

func (s *SwitchExpressionVariableRequest) SetId(v int64) *SwitchExpressionVariableRequest {
	s.Id = &v
	return s
}

func (s *SwitchExpressionVariableRequest) SetRegId(v string) *SwitchExpressionVariableRequest {
	s.RegId = &v
	return s
}

func (s *SwitchExpressionVariableRequest) SetStatus(v string) *SwitchExpressionVariableRequest {
	s.Status = &v
	return s
}

type SwitchExpressionVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s SwitchExpressionVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchExpressionVariableResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchExpressionVariableResponseBody) SetRequestId(v string) *SwitchExpressionVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchExpressionVariableResponseBody) SetResultObject(v bool) *SwitchExpressionVariableResponseBody {
	s.ResultObject = &v
	return s
}

type SwitchExpressionVariableResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchExpressionVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchExpressionVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchExpressionVariableResponse) GoString() string {
	return s.String()
}

func (s *SwitchExpressionVariableResponse) SetHeaders(v map[string]*string) *SwitchExpressionVariableResponse {
	s.Headers = v
	return s
}

func (s *SwitchExpressionVariableResponse) SetStatusCode(v int32) *SwitchExpressionVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchExpressionVariableResponse) SetBody(v *SwitchExpressionVariableResponseBody) *SwitchExpressionVariableResponse {
	s.Body = v
	return s
}

type SwitchFieldRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SwitchFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchFieldRequest) GoString() string {
	return s.String()
}

func (s *SwitchFieldRequest) SetLang(v string) *SwitchFieldRequest {
	s.Lang = &v
	return s
}

func (s *SwitchFieldRequest) SetId(v int64) *SwitchFieldRequest {
	s.Id = &v
	return s
}

func (s *SwitchFieldRequest) SetName(v string) *SwitchFieldRequest {
	s.Name = &v
	return s
}

func (s *SwitchFieldRequest) SetRegId(v string) *SwitchFieldRequest {
	s.RegId = &v
	return s
}

func (s *SwitchFieldRequest) SetSource(v string) *SwitchFieldRequest {
	s.Source = &v
	return s
}

func (s *SwitchFieldRequest) SetStatus(v string) *SwitchFieldRequest {
	s.Status = &v
	return s
}

type SwitchFieldResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s SwitchFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchFieldResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchFieldResponseBody) SetRequestId(v string) *SwitchFieldResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchFieldResponseBody) SetResultObject(v bool) *SwitchFieldResponseBody {
	s.ResultObject = &v
	return s
}

type SwitchFieldResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchFieldResponse) GoString() string {
	return s.String()
}

func (s *SwitchFieldResponse) SetHeaders(v map[string]*string) *SwitchFieldResponse {
	s.Headers = v
	return s
}

func (s *SwitchFieldResponse) SetStatusCode(v int32) *SwitchFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchFieldResponse) SetBody(v *SwitchFieldResponseBody) *SwitchFieldResponse {
	s.Body = v
	return s
}

type SwitchQueryVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	RegId  *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SwitchQueryVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchQueryVariableRequest) GoString() string {
	return s.String()
}

func (s *SwitchQueryVariableRequest) SetLang(v string) *SwitchQueryVariableRequest {
	s.Lang = &v
	return s
}

func (s *SwitchQueryVariableRequest) SetId(v int64) *SwitchQueryVariableRequest {
	s.Id = &v
	return s
}

func (s *SwitchQueryVariableRequest) SetRegId(v string) *SwitchQueryVariableRequest {
	s.RegId = &v
	return s
}

func (s *SwitchQueryVariableRequest) SetStatus(v string) *SwitchQueryVariableRequest {
	s.Status = &v
	return s
}

type SwitchQueryVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s SwitchQueryVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchQueryVariableResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchQueryVariableResponseBody) SetRequestId(v string) *SwitchQueryVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchQueryVariableResponseBody) SetResultObject(v bool) *SwitchQueryVariableResponseBody {
	s.ResultObject = &v
	return s
}

type SwitchQueryVariableResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchQueryVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchQueryVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchQueryVariableResponse) GoString() string {
	return s.String()
}

func (s *SwitchQueryVariableResponse) SetHeaders(v map[string]*string) *SwitchQueryVariableResponse {
	s.Headers = v
	return s
}

func (s *SwitchQueryVariableResponse) SetStatusCode(v int32) *SwitchQueryVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchQueryVariableResponse) SetBody(v *SwitchQueryVariableResponseBody) *SwitchQueryVariableResponse {
	s.Body = v
	return s
}

type SwitchToOnlineRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	EventId *int64  `json:"eventId,omitempty" xml:"eventId,omitempty"`
	RegId   *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s SwitchToOnlineRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchToOnlineRequest) GoString() string {
	return s.String()
}

func (s *SwitchToOnlineRequest) SetLang(v string) *SwitchToOnlineRequest {
	s.Lang = &v
	return s
}

func (s *SwitchToOnlineRequest) SetEventId(v int64) *SwitchToOnlineRequest {
	s.EventId = &v
	return s
}

func (s *SwitchToOnlineRequest) SetRegId(v string) *SwitchToOnlineRequest {
	s.RegId = &v
	return s
}

type SwitchToOnlineResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s SwitchToOnlineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchToOnlineResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchToOnlineResponseBody) SetCode(v string) *SwitchToOnlineResponseBody {
	s.Code = &v
	return s
}

func (s *SwitchToOnlineResponseBody) SetHttpStatusCode(v string) *SwitchToOnlineResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SwitchToOnlineResponseBody) SetMessage(v string) *SwitchToOnlineResponseBody {
	s.Message = &v
	return s
}

func (s *SwitchToOnlineResponseBody) SetRequestId(v string) *SwitchToOnlineResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchToOnlineResponseBody) SetResultObject(v bool) *SwitchToOnlineResponseBody {
	s.ResultObject = &v
	return s
}

func (s *SwitchToOnlineResponseBody) SetSuccess(v bool) *SwitchToOnlineResponseBody {
	s.Success = &v
	return s
}

type SwitchToOnlineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchToOnlineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchToOnlineResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchToOnlineResponse) GoString() string {
	return s.String()
}

func (s *SwitchToOnlineResponse) SetHeaders(v map[string]*string) *SwitchToOnlineResponse {
	s.Headers = v
	return s
}

func (s *SwitchToOnlineResponse) SetStatusCode(v int32) *SwitchToOnlineResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchToOnlineResponse) SetBody(v *SwitchToOnlineResponseBody) *SwitchToOnlineResponse {
	s.Body = v
	return s
}

type SwitchVariableRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	DataVersion *int64  `json:"dataVersion,omitempty" xml:"dataVersion,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Status      *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SwitchVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchVariableRequest) GoString() string {
	return s.String()
}

func (s *SwitchVariableRequest) SetLang(v string) *SwitchVariableRequest {
	s.Lang = &v
	return s
}

func (s *SwitchVariableRequest) SetDataVersion(v int64) *SwitchVariableRequest {
	s.DataVersion = &v
	return s
}

func (s *SwitchVariableRequest) SetId(v int64) *SwitchVariableRequest {
	s.Id = &v
	return s
}

func (s *SwitchVariableRequest) SetName(v string) *SwitchVariableRequest {
	s.Name = &v
	return s
}

func (s *SwitchVariableRequest) SetRegId(v string) *SwitchVariableRequest {
	s.RegId = &v
	return s
}

func (s *SwitchVariableRequest) SetStatus(v string) *SwitchVariableRequest {
	s.Status = &v
	return s
}

type SwitchVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s SwitchVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchVariableResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchVariableResponseBody) SetRequestId(v string) *SwitchVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchVariableResponseBody) SetResultObject(v bool) *SwitchVariableResponseBody {
	s.ResultObject = &v
	return s
}

type SwitchVariableResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchVariableResponse) GoString() string {
	return s.String()
}

func (s *SwitchVariableResponse) SetHeaders(v map[string]*string) *SwitchVariableResponse {
	s.Headers = v
	return s
}

func (s *SwitchVariableResponse) SetStatusCode(v int32) *SwitchVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchVariableResponse) SetBody(v *SwitchVariableResponseBody) *SwitchVariableResponse {
	s.Body = v
	return s
}

type TaskNameByUserIdRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RegId    *string `json:"RegId,omitempty" xml:"RegId,omitempty"`
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s TaskNameByUserIdRequest) String() string {
	return tea.Prettify(s)
}

func (s TaskNameByUserIdRequest) GoString() string {
	return s.String()
}

func (s *TaskNameByUserIdRequest) SetLang(v string) *TaskNameByUserIdRequest {
	s.Lang = &v
	return s
}

func (s *TaskNameByUserIdRequest) SetRegId(v string) *TaskNameByUserIdRequest {
	s.RegId = &v
	return s
}

func (s *TaskNameByUserIdRequest) SetTaskName(v string) *TaskNameByUserIdRequest {
	s.TaskName = &v
	return s
}

type TaskNameByUserIdResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject   *bool   `json:"ResultObject,omitempty" xml:"ResultObject,omitempty"`
}

func (s TaskNameByUserIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TaskNameByUserIdResponseBody) GoString() string {
	return s.String()
}

func (s *TaskNameByUserIdResponseBody) SetCode(v string) *TaskNameByUserIdResponseBody {
	s.Code = &v
	return s
}

func (s *TaskNameByUserIdResponseBody) SetHttpStatusCode(v string) *TaskNameByUserIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TaskNameByUserIdResponseBody) SetMessage(v string) *TaskNameByUserIdResponseBody {
	s.Message = &v
	return s
}

func (s *TaskNameByUserIdResponseBody) SetRequestId(v string) *TaskNameByUserIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *TaskNameByUserIdResponseBody) SetResultObject(v bool) *TaskNameByUserIdResponseBody {
	s.ResultObject = &v
	return s
}

type TaskNameByUserIdResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TaskNameByUserIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TaskNameByUserIdResponse) String() string {
	return tea.Prettify(s)
}

func (s TaskNameByUserIdResponse) GoString() string {
	return s.String()
}

func (s *TaskNameByUserIdResponse) SetHeaders(v map[string]*string) *TaskNameByUserIdResponse {
	s.Headers = v
	return s
}

func (s *TaskNameByUserIdResponse) SetStatusCode(v int32) *TaskNameByUserIdResponse {
	s.StatusCode = &v
	return s
}

func (s *TaskNameByUserIdResponse) SetBody(v *TaskNameByUserIdResponseBody) *TaskNameByUserIdResponse {
	s.Body = v
	return s
}

type UpdateAnalysisConditionFavoriteRequest struct {
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Condition      *string `json:"condition,omitempty" xml:"condition,omitempty"`
	EventBeginTime *int64  `json:"eventBeginTime,omitempty" xml:"eventBeginTime,omitempty"`
	EventCode      *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	EventEndTime   *int64  `json:"eventEndTime,omitempty" xml:"eventEndTime,omitempty"`
	FieldName      *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	FieldValue     *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
	// This parameter is required.
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Type  *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s UpdateAnalysisConditionFavoriteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAnalysisConditionFavoriteRequest) GoString() string {
	return s.String()
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetLang(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.Lang = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetCondition(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.Condition = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetEventBeginTime(v int64) *UpdateAnalysisConditionFavoriteRequest {
	s.EventBeginTime = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetEventCode(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.EventCode = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetEventEndTime(v int64) *UpdateAnalysisConditionFavoriteRequest {
	s.EventEndTime = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetFieldName(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.FieldName = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetFieldValue(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.FieldValue = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetId(v int64) *UpdateAnalysisConditionFavoriteRequest {
	s.Id = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetName(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.Name = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetRegId(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.RegId = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteRequest) SetType(v string) *UpdateAnalysisConditionFavoriteRequest {
	s.Type = &v
	return s
}

type UpdateAnalysisConditionFavoriteResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s UpdateAnalysisConditionFavoriteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAnalysisConditionFavoriteResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAnalysisConditionFavoriteResponseBody) SetRequestId(v string) *UpdateAnalysisConditionFavoriteResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteResponseBody) SetResultObject(v bool) *UpdateAnalysisConditionFavoriteResponseBody {
	s.ResultObject = &v
	return s
}

type UpdateAnalysisConditionFavoriteResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAnalysisConditionFavoriteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAnalysisConditionFavoriteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAnalysisConditionFavoriteResponse) GoString() string {
	return s.String()
}

func (s *UpdateAnalysisConditionFavoriteResponse) SetHeaders(v map[string]*string) *UpdateAnalysisConditionFavoriteResponse {
	s.Headers = v
	return s
}

func (s *UpdateAnalysisConditionFavoriteResponse) SetStatusCode(v int32) *UpdateAnalysisConditionFavoriteResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAnalysisConditionFavoriteResponse) SetBody(v *UpdateAnalysisConditionFavoriteResponseBody) *UpdateAnalysisConditionFavoriteResponse {
	s.Body = v
	return s
}

type UpdateAuditRequest struct {
	Lang              *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	AuditMsg          *string `json:"auditMsg,omitempty" xml:"auditMsg,omitempty"`
	AuditRelationType *string `json:"auditRelationType,omitempty" xml:"auditRelationType,omitempty"`
	AuditStatus       *string `json:"auditStatus,omitempty" xml:"auditStatus,omitempty"`
	Id                *int64  `json:"id,omitempty" xml:"id,omitempty"`
	RegId             *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s UpdateAuditRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuditRequest) GoString() string {
	return s.String()
}

func (s *UpdateAuditRequest) SetLang(v string) *UpdateAuditRequest {
	s.Lang = &v
	return s
}

func (s *UpdateAuditRequest) SetAuditMsg(v string) *UpdateAuditRequest {
	s.AuditMsg = &v
	return s
}

func (s *UpdateAuditRequest) SetAuditRelationType(v string) *UpdateAuditRequest {
	s.AuditRelationType = &v
	return s
}

func (s *UpdateAuditRequest) SetAuditStatus(v string) *UpdateAuditRequest {
	s.AuditStatus = &v
	return s
}

func (s *UpdateAuditRequest) SetId(v int64) *UpdateAuditRequest {
	s.Id = &v
	return s
}

func (s *UpdateAuditRequest) SetRegId(v string) *UpdateAuditRequest {
	s.RegId = &v
	return s
}

type UpdateAuditResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateAuditResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuditResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAuditResponseBody) SetCode(v string) *UpdateAuditResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAuditResponseBody) SetHttpStatusCode(v string) *UpdateAuditResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateAuditResponseBody) SetMessage(v string) *UpdateAuditResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAuditResponseBody) SetResultObject(v bool) *UpdateAuditResponseBody {
	s.ResultObject = &v
	return s
}

func (s *UpdateAuditResponseBody) SetSuccess(v bool) *UpdateAuditResponseBody {
	s.Success = &v
	return s
}

type UpdateAuditResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAuditResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAuditResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuditResponse) GoString() string {
	return s.String()
}

func (s *UpdateAuditResponse) SetHeaders(v map[string]*string) *UpdateAuditResponse {
	s.Headers = v
	return s
}

func (s *UpdateAuditResponse) SetStatusCode(v int32) *UpdateAuditResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAuditResponse) SetBody(v *UpdateAuditResponseBody) *UpdateAuditResponse {
	s.Body = v
	return s
}

type UpdateAuthRuleRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	EventCode     *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	// This parameter is required.
	RegId       *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleActions *string `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	// This parameter is required.
	RuleExpressions *string `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	// This parameter is required.
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleVersionId *int64  `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
}

func (s UpdateAuthRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateAuthRuleRequest) SetLang(v string) *UpdateAuthRuleRequest {
	s.Lang = &v
	return s
}

func (s *UpdateAuthRuleRequest) SetConsoleRuleId(v int64) *UpdateAuthRuleRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *UpdateAuthRuleRequest) SetEventCode(v string) *UpdateAuthRuleRequest {
	s.EventCode = &v
	return s
}

func (s *UpdateAuthRuleRequest) SetRegId(v string) *UpdateAuthRuleRequest {
	s.RegId = &v
	return s
}

func (s *UpdateAuthRuleRequest) SetRuleActions(v string) *UpdateAuthRuleRequest {
	s.RuleActions = &v
	return s
}

func (s *UpdateAuthRuleRequest) SetRuleExpressions(v string) *UpdateAuthRuleRequest {
	s.RuleExpressions = &v
	return s
}

func (s *UpdateAuthRuleRequest) SetRuleId(v string) *UpdateAuthRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateAuthRuleRequest) SetRuleVersionId(v int64) *UpdateAuthRuleRequest {
	s.RuleVersionId = &v
	return s
}

type UpdateAuthRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s UpdateAuthRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAuthRuleResponseBody) SetRequestId(v string) *UpdateAuthRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAuthRuleResponseBody) SetResultObject(v bool) *UpdateAuthRuleResponseBody {
	s.ResultObject = &v
	return s
}

type UpdateAuthRuleResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAuthRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAuthRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateAuthRuleResponse) SetHeaders(v map[string]*string) *UpdateAuthRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateAuthRuleResponse) SetStatusCode(v int32) *UpdateAuthRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAuthRuleResponse) SetBody(v *UpdateAuthRuleResponseBody) *UpdateAuthRuleResponse {
	s.Body = v
	return s
}

type UpdateByPassShuntEventRequest struct {
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	EventId   *int64  `json:"eventId,omitempty" xml:"eventId,omitempty"`
	EventName *string `json:"eventName,omitempty" xml:"eventName,omitempty"`
	RegId     *string `json:"regId,omitempty" xml:"regId,omitempty"`
}

func (s UpdateByPassShuntEventRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateByPassShuntEventRequest) GoString() string {
	return s.String()
}

func (s *UpdateByPassShuntEventRequest) SetLang(v string) *UpdateByPassShuntEventRequest {
	s.Lang = &v
	return s
}

func (s *UpdateByPassShuntEventRequest) SetEventId(v int64) *UpdateByPassShuntEventRequest {
	s.EventId = &v
	return s
}

func (s *UpdateByPassShuntEventRequest) SetEventName(v string) *UpdateByPassShuntEventRequest {
	s.EventName = &v
	return s
}

func (s *UpdateByPassShuntEventRequest) SetRegId(v string) *UpdateByPassShuntEventRequest {
	s.RegId = &v
	return s
}

type UpdateByPassShuntEventResponseBody struct {
	Code           *string `json:"code,omitempty" xml:"code,omitempty"`
	HttpStatusCode *string `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	Message        *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId      *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject   *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
	Success        *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateByPassShuntEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateByPassShuntEventResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateByPassShuntEventResponseBody) SetCode(v string) *UpdateByPassShuntEventResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateByPassShuntEventResponseBody) SetHttpStatusCode(v string) *UpdateByPassShuntEventResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateByPassShuntEventResponseBody) SetMessage(v string) *UpdateByPassShuntEventResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateByPassShuntEventResponseBody) SetRequestId(v string) *UpdateByPassShuntEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateByPassShuntEventResponseBody) SetResultObject(v bool) *UpdateByPassShuntEventResponseBody {
	s.ResultObject = &v
	return s
}

func (s *UpdateByPassShuntEventResponseBody) SetSuccess(v bool) *UpdateByPassShuntEventResponseBody {
	s.Success = &v
	return s
}

type UpdateByPassShuntEventResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateByPassShuntEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateByPassShuntEventResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateByPassShuntEventResponse) GoString() string {
	return s.String()
}

func (s *UpdateByPassShuntEventResponse) SetHeaders(v map[string]*string) *UpdateByPassShuntEventResponse {
	s.Headers = v
	return s
}

func (s *UpdateByPassShuntEventResponse) SetStatusCode(v int32) *UpdateByPassShuntEventResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateByPassShuntEventResponse) SetBody(v *UpdateByPassShuntEventResponseBody) *UpdateByPassShuntEventResponse {
	s.Body = v
	return s
}

type UpdateDataSourceRequest struct {
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	Id     *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name   *string `json:"name,omitempty" xml:"name,omitempty"`
	OssKey *string `json:"ossKey,omitempty" xml:"ossKey,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Type  *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s UpdateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceRequest) SetLang(v string) *UpdateDataSourceRequest {
	s.Lang = &v
	return s
}

func (s *UpdateDataSourceRequest) SetDescription(v string) *UpdateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataSourceRequest) SetId(v int64) *UpdateDataSourceRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataSourceRequest) SetName(v string) *UpdateDataSourceRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataSourceRequest) SetOssKey(v string) *UpdateDataSourceRequest {
	s.OssKey = &v
	return s
}

func (s *UpdateDataSourceRequest) SetRegId(v string) *UpdateDataSourceRequest {
	s.RegId = &v
	return s
}

func (s *UpdateDataSourceRequest) SetType(v string) *UpdateDataSourceRequest {
	s.Type = &v
	return s
}

type UpdateDataSourceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s UpdateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponseBody) SetRequestId(v string) *UpdateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataSourceResponseBody) SetResultObject(v bool) *UpdateDataSourceResponseBody {
	s.ResultObject = &v
	return s
}

type UpdateDataSourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponse) SetHeaders(v map[string]*string) *UpdateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataSourceResponse) SetStatusCode(v int32) *UpdateDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDataSourceResponse) SetBody(v *UpdateDataSourceResponseBody) *UpdateDataSourceResponse {
	s.Body = v
	return s
}

type UpdateQueryVariableRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// This parameter is required.
	DataSourceCode *string `json:"dataSourceCode,omitempty" xml:"dataSourceCode,omitempty"`
	Description    *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	EventCode *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	// This parameter is required.
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// This parameter is required.
	ExpressionTitle *string `json:"expressionTitle,omitempty" xml:"expressionTitle,omitempty"`
	// This parameter is required.
	ExpressionVariable *string `json:"expressionVariable,omitempty" xml:"expressionVariable,omitempty"`
	// This parameter is required.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// This parameter is required.
	Outlier *string `json:"outlier,omitempty" xml:"outlier,omitempty"`
	// This parameter is required.
	Outputs *string `json:"outputs,omitempty" xml:"outputs,omitempty"`
	// This parameter is required.
	RegId *string `json:"regId,omitempty" xml:"regId,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s UpdateQueryVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateQueryVariableRequest) GoString() string {
	return s.String()
}

func (s *UpdateQueryVariableRequest) SetLang(v string) *UpdateQueryVariableRequest {
	s.Lang = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetDataSourceCode(v string) *UpdateQueryVariableRequest {
	s.DataSourceCode = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetDescription(v string) *UpdateQueryVariableRequest {
	s.Description = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetEventCode(v string) *UpdateQueryVariableRequest {
	s.EventCode = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetExpression(v string) *UpdateQueryVariableRequest {
	s.Expression = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetExpressionTitle(v string) *UpdateQueryVariableRequest {
	s.ExpressionTitle = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetExpressionVariable(v string) *UpdateQueryVariableRequest {
	s.ExpressionVariable = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetId(v int64) *UpdateQueryVariableRequest {
	s.Id = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetOutlier(v string) *UpdateQueryVariableRequest {
	s.Outlier = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetOutputs(v string) *UpdateQueryVariableRequest {
	s.Outputs = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetRegId(v string) *UpdateQueryVariableRequest {
	s.RegId = &v
	return s
}

func (s *UpdateQueryVariableRequest) SetTitle(v string) *UpdateQueryVariableRequest {
	s.Title = &v
	return s
}

type UpdateQueryVariableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s UpdateQueryVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateQueryVariableResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateQueryVariableResponseBody) SetRequestId(v string) *UpdateQueryVariableResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateQueryVariableResponseBody) SetResultObject(v bool) *UpdateQueryVariableResponseBody {
	s.ResultObject = &v
	return s
}

type UpdateQueryVariableResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateQueryVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateQueryVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateQueryVariableResponse) GoString() string {
	return s.String()
}

func (s *UpdateQueryVariableResponse) SetHeaders(v map[string]*string) *UpdateQueryVariableResponse {
	s.Headers = v
	return s
}

func (s *UpdateQueryVariableResponse) SetStatusCode(v int32) *UpdateQueryVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateQueryVariableResponse) SetBody(v *UpdateQueryVariableResponseBody) *UpdateQueryVariableResponse {
	s.Body = v
	return s
}

type UpdateRuleRequest struct {
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId   *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	EventCode       *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	LogicExpression *string `json:"logicExpression,omitempty" xml:"logicExpression,omitempty"`
	Memo            *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RegId           *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleActions     *string `json:"ruleActions,omitempty" xml:"ruleActions,omitempty"`
	RuleExpressions *string `json:"ruleExpressions,omitempty" xml:"ruleExpressions,omitempty"`
	RuleId          *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName        *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	RuleStatus      *string `json:"ruleStatus,omitempty" xml:"ruleStatus,omitempty"`
	RuleVersionId   *int64  `json:"ruleVersionId,omitempty" xml:"ruleVersionId,omitempty"`
}

func (s UpdateRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateRuleRequest) SetLang(v string) *UpdateRuleRequest {
	s.Lang = &v
	return s
}

func (s *UpdateRuleRequest) SetConsoleRuleId(v int64) *UpdateRuleRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *UpdateRuleRequest) SetEventCode(v string) *UpdateRuleRequest {
	s.EventCode = &v
	return s
}

func (s *UpdateRuleRequest) SetLogicExpression(v string) *UpdateRuleRequest {
	s.LogicExpression = &v
	return s
}

func (s *UpdateRuleRequest) SetMemo(v string) *UpdateRuleRequest {
	s.Memo = &v
	return s
}

func (s *UpdateRuleRequest) SetRegId(v string) *UpdateRuleRequest {
	s.RegId = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleActions(v string) *UpdateRuleRequest {
	s.RuleActions = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleExpressions(v string) *UpdateRuleRequest {
	s.RuleExpressions = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleId(v string) *UpdateRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleName(v string) *UpdateRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleStatus(v string) *UpdateRuleRequest {
	s.RuleStatus = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleVersionId(v int64) *UpdateRuleRequest {
	s.RuleVersionId = &v
	return s
}

type UpdateRuleResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s UpdateRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRuleResponseBody) SetRequestId(v string) *UpdateRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRuleResponseBody) SetResultObject(v bool) *UpdateRuleResponseBody {
	s.ResultObject = &v
	return s
}

type UpdateRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateRuleResponse) SetHeaders(v map[string]*string) *UpdateRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateRuleResponse) SetStatusCode(v int32) *UpdateRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRuleResponse) SetBody(v *UpdateRuleResponseBody) *UpdateRuleResponse {
	s.Body = v
	return s
}

type UpdateRuleBaseRequest struct {
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ConsoleRuleId *int64  `json:"consoleRuleId,omitempty" xml:"consoleRuleId,omitempty"`
	EventCode     *string `json:"eventCode,omitempty" xml:"eventCode,omitempty"`
	Memo          *string `json:"memo,omitempty" xml:"memo,omitempty"`
	RegId         *string `json:"regId,omitempty" xml:"regId,omitempty"`
	RuleId        *string `json:"ruleId,omitempty" xml:"ruleId,omitempty"`
	RuleName      *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s UpdateRuleBaseRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleBaseRequest) GoString() string {
	return s.String()
}

func (s *UpdateRuleBaseRequest) SetLang(v string) *UpdateRuleBaseRequest {
	s.Lang = &v
	return s
}

func (s *UpdateRuleBaseRequest) SetConsoleRuleId(v int64) *UpdateRuleBaseRequest {
	s.ConsoleRuleId = &v
	return s
}

func (s *UpdateRuleBaseRequest) SetEventCode(v string) *UpdateRuleBaseRequest {
	s.EventCode = &v
	return s
}

func (s *UpdateRuleBaseRequest) SetMemo(v string) *UpdateRuleBaseRequest {
	s.Memo = &v
	return s
}

func (s *UpdateRuleBaseRequest) SetRegId(v string) *UpdateRuleBaseRequest {
	s.RegId = &v
	return s
}

func (s *UpdateRuleBaseRequest) SetRuleId(v string) *UpdateRuleBaseRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateRuleBaseRequest) SetRuleName(v string) *UpdateRuleBaseRequest {
	s.RuleName = &v
	return s
}

type UpdateRuleBaseResponseBody struct {
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResultObject *bool   `json:"resultObject,omitempty" xml:"resultObject,omitempty"`
}

func (s UpdateRuleBaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleBaseResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRuleBaseResponseBody) SetRequestId(v string) *UpdateRuleBaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRuleBaseResponseBody) SetResultObject(v bool) *UpdateRuleBaseResponseBody {
	s.ResultObject = &v
	return s
}

type UpdateRuleBaseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRuleBaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRuleBaseResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleBaseResponse) GoString() string {
	return s.String()
}

func (s *UpdateRuleBaseResponse) SetHeaders(v map[string]*string) *UpdateRuleBaseResponse {
	s.Headers = v
	return s
}

func (s *UpdateRuleBaseResponse) SetStatusCode(v int32) *UpdateRuleBaseResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRuleBaseResponse) SetBody(v *UpdateRuleBaseResponseBody) *UpdateRuleBaseResponse {
	s.Body = v
	return s
}

type UpdateSampleBatchRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Ids      *string `json:"ids,omitempty" xml:"ids,omitempty"`
	RegId    *string `json:"regId,omitempty" xml:"regId,omitempty"`
	Tags     *string `json:"tags,omitempty" xml:"tags,omitempty"`
	Versions *string `json:"versions,omitempty" xml:"versions,omitempty"`
}

func (s UpdateSampleBatchRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSampleBatchRequest) GoString() string {
	return s.String()
}

func (s *UpdateSampleBatchRequest) SetLang(v string) *UpdateSampleBatchRequest {
	s.Lang = &v
	return s
}

func (s *UpdateSampleBatchRequest) SetIds(v string) *UpdateSampleBatchRequest {
	s.Ids = &v
	return s
}

func (s *UpdateSampleBatchRequest) SetRegId(v string) *UpdateSampleBatchRequest {
	s.RegId = &v
	return s
}

func (s *UpdateSampleBatchRequest) SetTags(v string) *UpdateSampleBatchRequest {
	s.Tags = &v
	return s
}

func (s *UpdateSampleBatchRequest) SetVersions(v string) *UpdateSampleBatchRequest {
	s.Versions = &v
	return s
}

type UpdateSampleBatchResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateSampleBatchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSampleBatchResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSampleBatchResponseBody) SetRequestId(v string) *UpdateSampleBatchResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSampleBatchResponseBody) SetData(v bool) *UpdateSampleBatchResponseBody {
	s.Data = &v
	return s
}

type UpdateSampleBatchResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSampleBatchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSampleBatchResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSampleBatchResponse) GoString() string {
	return s.String()
}

func (s *UpdateSampleBatchResponse) SetHeaders(v map[string]*string) *UpdateSampleBatchResponse {
	s.Headers = v
	return s
}

func (s *UpdateSampleBatchResponse) SetStatusCode(v int32) *UpdateSampleBatchResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSampleBatchResponse) SetBody(v *UpdateSampleBatchResponseBody) *UpdateSampleBatchResponse {
	s.Body = v
	return s
}

type UploadSampleApiRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ip
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["123.124.125.126","123.124.125.127"]
	DataValue *string `json:"DataValue,omitempty" xml:"DataValue,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// block
	SampleType *string `json:"SampleType,omitempty" xml:"SampleType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// account_abuse,coupon_abuse,account_takeover
	Service *string `json:"Service,omitempty" xml:"Service,omitempty"`
}

func (s UploadSampleApiRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadSampleApiRequest) GoString() string {
	return s.String()
}

func (s *UploadSampleApiRequest) SetDataType(v string) *UploadSampleApiRequest {
	s.DataType = &v
	return s
}

func (s *UploadSampleApiRequest) SetDataValue(v string) *UploadSampleApiRequest {
	s.DataValue = &v
	return s
}

func (s *UploadSampleApiRequest) SetSampleType(v string) *UploadSampleApiRequest {
	s.SampleType = &v
	return s
}

func (s *UploadSampleApiRequest) SetService(v string) *UploadSampleApiRequest {
	s.Service = &v
	return s
}

type UploadSampleApiResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 4A91D2D1-AEC9-1658-ABCE-5A39DE66A5C2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadSampleApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadSampleApiResponseBody) GoString() string {
	return s.String()
}

func (s *UploadSampleApiResponseBody) SetRequestId(v string) *UploadSampleApiResponseBody {
	s.RequestId = &v
	return s
}

type UploadSampleApiResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadSampleApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadSampleApiResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadSampleApiResponse) GoString() string {
	return s.String()
}

func (s *UploadSampleApiResponse) SetHeaders(v map[string]*string) *UploadSampleApiResponse {
	s.Headers = v
	return s
}

func (s *UploadSampleApiResponse) SetStatusCode(v int32) *UploadSampleApiResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadSampleApiResponse) SetBody(v *UploadSampleApiResponseBody) *UploadSampleApiResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("xtee"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 变量绑定操作
//
// @param request - BindVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindVariableResponse
func (client *Client) BindVariableWithOptions(request *BindVariableRequest, runtime *util.RuntimeOptions) (_result *BindVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ApiRegionId)) {
		query["apiRegionId"] = request.ApiRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiType)) {
		query["apiType"] = request.ApiType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.DefineId)) {
		query["defineId"] = request.DefineId
	}

	if !tea.BoolValue(util.IsUnset(request.DefineIds)) {
		query["defineIds"] = request.DefineIds
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.ExceptionValue)) {
		query["exceptionValue"] = request.ExceptionValue
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OutputField)) {
		query["outputField"] = request.OutputField
	}

	if !tea.BoolValue(util.IsUnset(request.OutputType)) {
		query["outputType"] = request.OutputType
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.ParamsList)) {
		query["paramsList"] = request.ParamsList
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["sourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 变量绑定操作
//
// @param request - BindVariableRequest
//
// @return BindVariableResponse
func (client *Client) BindVariable(request *BindVariableRequest) (_result *BindVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindVariableResponse{}
	_body, _err := client.BindVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 校验累计变量数目是否超过限定值
//
// @param request - CheckCustVariableLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckCustVariableLimitResponse
func (client *Client) CheckCustVariableLimitWithOptions(request *CheckCustVariableLimitRequest, runtime *util.RuntimeOptions) (_result *CheckCustVariableLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckCustVariableLimit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckCustVariableLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 校验累计变量数目是否超过限定值
//
// @param request - CheckCustVariableLimitRequest
//
// @return CheckCustVariableLimitResponse
func (client *Client) CheckCustVariableLimit(request *CheckCustVariableLimitRequest) (_result *CheckCustVariableLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckCustVariableLimitResponse{}
	_body, _err := client.CheckCustVariableLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 校验创建变量是否超过上限
//
// @param request - CheckExpressionVariableLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckExpressionVariableLimitResponse
func (client *Client) CheckExpressionVariableLimitWithOptions(request *CheckExpressionVariableLimitRequest, runtime *util.RuntimeOptions) (_result *CheckExpressionVariableLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckExpressionVariableLimit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckExpressionVariableLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 校验创建变量是否超过上限
//
// @param request - CheckExpressionVariableLimitRequest
//
// @return CheckExpressionVariableLimitResponse
func (client *Client) CheckExpressionVariableLimit(request *CheckExpressionVariableLimitRequest) (_result *CheckExpressionVariableLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckExpressionVariableLimitResponse{}
	_body, _err := client.CheckExpressionVariableLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 校验字段数目是否操过限定值
//
// @param request - CheckFieldLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckFieldLimitResponse
func (client *Client) CheckFieldLimitWithOptions(request *CheckFieldLimitRequest, runtime *util.RuntimeOptions) (_result *CheckFieldLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckFieldLimit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckFieldLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 校验字段数目是否操过限定值
//
// @param request - CheckFieldLimitRequest
//
// @return CheckFieldLimitResponse
func (client *Client) CheckFieldLimit(request *CheckFieldLimitRequest) (_result *CheckFieldLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckFieldLimitResponse{}
	_body, _err := client.CheckFieldLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 运营权限检查
//
// @param request - CheckPermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckPermissionResponse
func (client *Client) CheckPermissionWithOptions(request *CheckPermissionRequest, runtime *util.RuntimeOptions) (_result *CheckPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckPermission"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckPermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 运营权限检查
//
// @param request - CheckPermissionRequest
//
// @return CheckPermissionResponse
func (client *Client) CheckPermission(request *CheckPermissionRequest) (_result *CheckPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckPermissionResponse{}
	_body, _err := client.CheckPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 校验变量引用
//
// @param request - CheckUsageVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckUsageVariableResponse
func (client *Client) CheckUsageVariableWithOptions(request *CheckUsageVariableRequest, runtime *util.RuntimeOptions) (_result *CheckUsageVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckUsageVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckUsageVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 校验变量引用
//
// @param request - CheckUsageVariableRequest
//
// @return CheckUsageVariableResponse
func (client *Client) CheckUsageVariable(request *CheckUsageVariableRequest) (_result *CheckUsageVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckUsageVariableResponse{}
	_body, _err := client.CheckUsageVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 清除名单
//
// @param request - ClearNameListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ClearNameListResponse
func (client *Client) ClearNameListWithOptions(request *ClearNameListRequest, runtime *util.RuntimeOptions) (_result *ClearNameListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.VariableId)) {
		query["variableId"] = request.VariableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ClearNameList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClearNameListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 清除名单
//
// @param request - ClearNameListRequest
//
// @return ClearNameListResponse
func (client *Client) ClearNameList(request *ClearNameListRequest) (_result *ClearNameListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearNameListResponse{}
	_body, _err := client.ClearNameListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新增查询条件
//
// @param request - CreateAnalysisConditionFavoriteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAnalysisConditionFavoriteResponse
func (client *Client) CreateAnalysisConditionFavoriteWithOptions(request *CreateAnalysisConditionFavoriteRequest, runtime *util.RuntimeOptions) (_result *CreateAnalysisConditionFavoriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.EventBeginTime)) {
		query["eventBeginTime"] = request.EventBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EventEndTime)) {
		query["eventEndTime"] = request.EventEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["fieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["fieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAnalysisConditionFavorite"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAnalysisConditionFavoriteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新增查询条件
//
// @param request - CreateAnalysisConditionFavoriteRequest
//
// @return CreateAnalysisConditionFavoriteResponse
func (client *Client) CreateAnalysisConditionFavorite(request *CreateAnalysisConditionFavoriteRequest) (_result *CreateAnalysisConditionFavoriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAnalysisConditionFavoriteResponse{}
	_body, _err := client.CreateAnalysisConditionFavoriteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新建导出任务
//
// @param request - CreateAnalysisExportTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAnalysisExportTaskResponse
func (client *Client) CreateAnalysisExportTaskWithOptions(request *CreateAnalysisExportTaskRequest, runtime *util.RuntimeOptions) (_result *CreateAnalysisExportTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Columns)) {
		query["columns"] = request.Columns
	}

	if !tea.BoolValue(util.IsUnset(request.Conditions)) {
		query["conditions"] = request.Conditions
	}

	if !tea.BoolValue(util.IsUnset(request.EventBeginTime)) {
		query["eventBeginTime"] = request.EventBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EventEndTime)) {
		query["eventEndTime"] = request.EventEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["fieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["fieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.FileFormat)) {
		query["fileFormat"] = request.FileFormat
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAnalysisExportTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAnalysisExportTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新建导出任务
//
// @param request - CreateAnalysisExportTaskRequest
//
// @return CreateAnalysisExportTaskResponse
func (client *Client) CreateAnalysisExportTask(request *CreateAnalysisExportTaskRequest) (_result *CreateAnalysisExportTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAnalysisExportTaskResponse{}
	_body, _err := client.CreateAnalysisExportTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建appKey
//
// @param request - CreateAppKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAppKeyResponse
func (client *Client) CreateAppKeyWithOptions(request *CreateAppKeyRequest, runtime *util.RuntimeOptions) (_result *CreateAppKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAppKey"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAppKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建appKey
//
// @param request - CreateAppKeyRequest
//
// @return CreateAppKeyResponse
func (client *Client) CreateAppKey(request *CreateAppKeyRequest) (_result *CreateAppKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAppKeyResponse{}
	_body, _err := client.CreateAppKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新增用户授权
//
// @param request - CreateAuthorizationUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAuthorizationUserResponse
func (client *Client) CreateAuthorizationUserWithOptions(request *CreateAuthorizationUserRequest, runtime *util.RuntimeOptions) (_result *CreateAuthorizationUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BindId)) {
		query["bindId"] = request.BindId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventTemplateId)) {
		query["eventTemplateId"] = request.EventTemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAuthorizationUser"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAuthorizationUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新增用户授权
//
// @param request - CreateAuthorizationUserRequest
//
// @return CreateAuthorizationUserResponse
func (client *Client) CreateAuthorizationUser(request *CreateAuthorizationUserRequest) (_result *CreateAuthorizationUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAuthorizationUserResponse{}
	_body, _err := client.CreateAuthorizationUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建累计变量
//
// @param request - CreateCustVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustVariableResponse
func (client *Client) CreateCustVariableWithOptions(request *CreateCustVariableRequest, runtime *util.RuntimeOptions) (_result *CreateCustVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryValueType)) {
		query["historyValueType"] = request.HistoryValueType
	}

	if !tea.BoolValue(util.IsUnset(request.Object)) {
		query["object"] = request.Object
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		query["subject"] = request.Subject
	}

	if !tea.BoolValue(util.IsUnset(request.TimeType)) {
		query["timeType"] = request.TimeType
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.TwCount)) {
		query["twCount"] = request.TwCount
	}

	if !tea.BoolValue(util.IsUnset(request.VelocityFC)) {
		query["velocityFC"] = request.VelocityFC
	}

	if !tea.BoolValue(util.IsUnset(request.VelocityTW)) {
		query["velocityTW"] = request.VelocityTW
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建累计变量
//
// @param request - CreateCustVariableRequest
//
// @return CreateCustVariableResponse
func (client *Client) CreateCustVariable(request *CreateCustVariableRequest) (_result *CreateCustVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustVariableResponse{}
	_body, _err := client.CreateCustVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新增数据源
//
// @param request - CreateDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataSourceResponse
func (client *Client) CreateDataSourceWithOptions(request *CreateDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["ossKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataSource"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新增数据源
//
// @param request - CreateDataSourceRequest
//
// @return CreateDataSourceResponse
func (client *Client) CreateDataSource(request *CreateDataSourceRequest) (_result *CreateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.CreateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建事件
//
// @param request - CreateEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEventResponse
func (client *Client) CreateEventWithOptions(request *CreateEventRequest, runtime *util.RuntimeOptions) (_result *CreateEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["eventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.InputFieldsStr)) {
		query["inputFieldsStr"] = request.InputFieldsStr
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["templateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["templateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["templateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建事件
//
// @param request - CreateEventRequest
//
// @return CreateEventResponse
func (client *Client) CreateEvent(request *CreateEventRequest) (_result *CreateEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEventResponse{}
	_body, _err := client.CreateEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建自定义变量
//
// @param request - CreateExpressionVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateExpressionVariableResponse
func (client *Client) CreateExpressionVariableWithOptions(request *CreateExpressionVariableRequest, runtime *util.RuntimeOptions) (_result *CreateExpressionVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionTitle)) {
		query["expressionTitle"] = request.ExpressionTitle
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionVariable)) {
		query["expressionVariable"] = request.ExpressionVariable
	}

	if !tea.BoolValue(util.IsUnset(request.Outlier)) {
		query["outlier"] = request.Outlier
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateExpressionVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateExpressionVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建自定义变量
//
// @param request - CreateExpressionVariableRequest
//
// @return CreateExpressionVariableResponse
func (client *Client) CreateExpressionVariable(request *CreateExpressionVariableRequest) (_result *CreateExpressionVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateExpressionVariableResponse{}
	_body, _err := client.CreateExpressionVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新增字段
//
// @param request - CreateFieldRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFieldResponse
func (client *Client) CreateFieldWithOptions(request *CreateFieldRequest, runtime *util.RuntimeOptions) (_result *CreateFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Classify)) {
		query["classify"] = request.Classify
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnumData)) {
		query["enumData"] = request.EnumData
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateField"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新增字段
//
// @param request - CreateFieldRequest
//
// @return CreateFieldResponse
func (client *Client) CreateField(request *CreateFieldRequest) (_result *CreateFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFieldResponse{}
	_body, _err := client.CreateFieldWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 社群打标
//
// @param request - CreateGroupSignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateGroupSignResponse
func (client *Client) CreateGroupSignWithOptions(request *CreateGroupSignRequest, runtime *util.RuntimeOptions) (_result *CreateGroupSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SignList)) {
		query["SignList"] = request.SignList
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGroupSign"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGroupSignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 社群打标
//
// @param request - CreateGroupSignRequest
//
// @return CreateGroupSignResponse
func (client *Client) CreateGroupSign(request *CreateGroupSignRequest) (_result *CreateGroupSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGroupSignResponse{}
	_body, _err := client.CreateGroupSignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建监控任务
//
// @param request - CreateMonitorTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorTaskResponse
func (client *Client) CreateMonitorTaskWithOptions(request *CreateMonitorTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["bizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CycleType)) {
		query["cycleType"] = request.CycleType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.ListdayStr)) {
		query["listdayStr"] = request.ListdayStr
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建监控任务
//
// @param request - CreateMonitorTaskRequest
//
// @return CreateMonitorTaskResponse
func (client *Client) CreateMonitorTask(request *CreateMonitorTaskRequest) (_result *CreateMonitorTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorTaskResponse{}
	_body, _err := client.CreateMonitorTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建poc
//
// @param request - CreatePocRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePocResponse
func (client *Client) CreatePocWithOptions(request *CreatePocRequest, runtime *util.RuntimeOptions) (_result *CreatePocResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigStr)) {
		query["configStr"] = request.ConfigStr
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["fileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["fileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["fileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCode)) {
		query["serviceCode"] = request.ServiceCode
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["serviceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["taskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePoc"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePocResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建poc
//
// @param request - CreatePocRequest
//
// @return CreatePocResponse
func (client *Client) CreatePoc(request *CreatePocRequest) (_result *CreatePocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePocResponse{}
	_body, _err := client.CreatePocWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建poc
//
// @param request - CreatePocEvRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePocEvResponse
func (client *Client) CreatePocEvWithOptions(request *CreatePocEvRequest, runtime *util.RuntimeOptions) (_result *CreatePocEvResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DateFormat)) {
		query["DateFormat"] = request.DateFormat
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCode)) {
		query["ServiceCode"] = request.ServiceCode
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.Tab)) {
		query["Tab"] = request.Tab
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePocEv"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePocEvResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建poc
//
// @param request - CreatePocEvRequest
//
// @return CreatePocEvResponse
func (client *Client) CreatePocEv(request *CreatePocEvRequest) (_result *CreatePocEvResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePocEvResponse{}
	_body, _err := client.CreatePocEvWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义查询变量新增
//
// @param request - CreateQueryVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateQueryVariableResponse
func (client *Client) CreateQueryVariableWithOptions(request *CreateQueryVariableRequest, runtime *util.RuntimeOptions) (_result *CreateQueryVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceCode)) {
		query["dataSourceCode"] = request.DataSourceCode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionTitle)) {
		query["expressionTitle"] = request.ExpressionTitle
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionVariable)) {
		query["expressionVariable"] = request.ExpressionVariable
	}

	if !tea.BoolValue(util.IsUnset(request.Outlier)) {
		query["outlier"] = request.Outlier
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQueryVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQueryVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义查询变量新增
//
// @param request - CreateQueryVariableRequest
//
// @return CreateQueryVariableResponse
func (client *Client) CreateQueryVariable(request *CreateQueryVariableRequest) (_result *CreateQueryVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQueryVariableResponse{}
	_body, _err := client.CreateQueryVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建推荐事件策略
//
// @param request - CreateRecommendEventRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRecommendEventRuleResponse
func (client *Client) CreateRecommendEventRuleWithOptions(request *CreateRecommendEventRuleRequest, runtime *util.RuntimeOptions) (_result *CreateRecommendEventRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["eventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.RecommendRuleIdsStr)) {
		query["recommendRuleIdsStr"] = request.RecommendRuleIdsStr
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["taskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRecommendEventRule"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRecommendEventRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建推荐事件策略
//
// @param request - CreateRecommendEventRuleRequest
//
// @return CreateRecommendEventRuleResponse
func (client *Client) CreateRecommendEventRule(request *CreateRecommendEventRuleRequest) (_result *CreateRecommendEventRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRecommendEventRuleResponse{}
	_body, _err := client.CreateRecommendEventRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建推荐任务
//
// @param request - CreateRecommendTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRecommendTaskResponse
func (client *Client) CreateRecommendTaskWithOptions(request *CreateRecommendTaskRequest, runtime *util.RuntimeOptions) (_result *CreateRecommendTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleId)) {
		query["sampleId"] = request.SampleId
	}

	if !tea.BoolValue(util.IsUnset(request.VariablesStr)) {
		query["variablesStr"] = request.VariablesStr
	}

	if !tea.BoolValue(util.IsUnset(request.VelocitiesStr)) {
		query["velocitiesStr"] = request.VelocitiesStr
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRecommendTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRecommendTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建推荐任务
//
// @param request - CreateRecommendTaskRequest
//
// @return CreateRecommendTaskResponse
func (client *Client) CreateRecommendTask(request *CreateRecommendTaskRequest) (_result *CreateRecommendTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRecommendTaskResponse{}
	_body, _err := client.CreateRecommendTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 补充上传
//
// @param request - CreateReplenishTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateReplenishTaskResponse
func (client *Client) CreateReplenishTaskWithOptions(request *CreateReplenishTaskRequest, runtime *util.RuntimeOptions) (_result *CreateReplenishTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientFileName)) {
		query["ClientFileName"] = request.ClientFileName
	}

	if !tea.BoolValue(util.IsUnset(request.ClientPath)) {
		query["ClientPath"] = request.ClientPath
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateReplenishTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateReplenishTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 补充上传
//
// @param request - CreateReplenishTaskRequest
//
// @return CreateReplenishTaskResponse
func (client *Client) CreateReplenishTask(request *CreateReplenishTaskRequest) (_result *CreateReplenishTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateReplenishTaskResponse{}
	_body, _err := client.CreateReplenishTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建策略&版本
//
// @param request - CreateRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRuleResponse
func (client *Client) CreateRuleWithOptions(request *CreateRuleRequest, runtime *util.RuntimeOptions) (_result *CreateRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["eventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.LogicExpression)) {
		query["logicExpression"] = request.LogicExpression
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleActions)) {
		query["ruleActions"] = request.RuleActions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleExpressions)) {
		query["ruleExpressions"] = request.RuleExpressions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleStatus)) {
		query["ruleStatus"] = request.RuleStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRule"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建策略&版本
//
// @param request - CreateRuleRequest
//
// @return CreateRuleResponse
func (client *Client) CreateRule(request *CreateRuleRequest) (_result *CreateRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRuleResponse{}
	_body, _err := client.CreateRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加样本
//
// @param request - CreateSampleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSampleResponse
func (client *Client) CreateSampleWithOptions(request *CreateSampleRequest, runtime *util.RuntimeOptions) (_result *CreateSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ClientFileName)) {
		query["clientFileName"] = request.ClientFileName
	}

	if !tea.BoolValue(util.IsUnset(request.ClientPath)) {
		query["clientPath"] = request.ClientPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["fileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleTag)) {
		query["sampleTag"] = request.SampleTag
	}

	if !tea.BoolValue(util.IsUnset(request.SampleType)) {
		query["sampleType"] = request.SampleType
	}

	if !tea.BoolValue(util.IsUnset(request.SampleValues)) {
		query["sampleValues"] = request.SampleValues
	}

	if !tea.BoolValue(util.IsUnset(request.UploadType)) {
		query["uploadType"] = request.UploadType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSample"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSampleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加样本
//
// @param request - CreateSampleRequest
//
// @return CreateSampleResponse
func (client *Client) CreateSample(request *CreateSampleRequest) (_result *CreateSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSampleResponse{}
	_body, _err := client.CreateSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 用户级别单API创建样本批
//
// @param request - CreateSampleApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSampleApiResponse
func (client *Client) CreateSampleApiWithOptions(request *CreateSampleApiRequest, runtime *util.RuntimeOptions) (_result *CreateSampleApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		query["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.DataValue)) {
		query["DataValue"] = request.DataValue
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleBatchType)) {
		query["SampleBatchType"] = request.SampleBatchType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceList)) {
		query["ServiceList"] = request.ServiceList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSampleApi"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSampleApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 用户级别单API创建样本批
//
// @param request - CreateSampleApiRequest
//
// @return CreateSampleApiResponse
func (client *Client) CreateSampleApi(request *CreateSampleApiRequest) (_result *CreateSampleApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSampleApiResponse{}
	_body, _err := client.CreateSampleApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建样本数据
//
// @param request - CreateSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSampleDataResponse
func (client *Client) CreateSampleDataWithOptions(request *CreateSampleDataRequest, runtime *util.RuntimeOptions) (_result *CreateSampleDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptType)) {
		query["encryptType"] = request.EncryptType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RiskValue)) {
		query["riskValue"] = request.RiskValue
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.StorePath)) {
		query["storePath"] = request.StorePath
	}

	if !tea.BoolValue(util.IsUnset(request.StoreType)) {
		query["storeType"] = request.StoreType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSampleData"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSampleDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建样本数据
//
// @param request - CreateSampleDataRequest
//
// @return CreateSampleDataResponse
func (client *Client) CreateSampleData(request *CreateSampleDataRequest) (_result *CreateSampleDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSampleDataResponse{}
	_body, _err := client.CreateSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建任务
//
// @param request - CreateSimulationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSimulationTaskResponse
func (client *Client) CreateSimulationTaskWithOptions(request *CreateSimulationTaskRequest, runtime *util.RuntimeOptions) (_result *CreateSimulationTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceConfig)) {
		query["dataSourceConfig"] = request.DataSourceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["dataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.FiltersStr)) {
		query["filtersStr"] = request.FiltersStr
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RulesStr)) {
		query["rulesStr"] = request.RulesStr
	}

	if !tea.BoolValue(util.IsUnset(request.RunTask)) {
		query["runTask"] = request.RunTask
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["startTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["taskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSimulationTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSimulationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建任务
//
// @param request - CreateSimulationTaskRequest
//
// @return CreateSimulationTaskResponse
func (client *Client) CreateSimulationTask(request *CreateSimulationTaskRequest) (_result *CreateSimulationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSimulationTaskResponse{}
	_body, _err := client.CreateSimulationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建任务
//
// @param request - CreateTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTaskResponse
func (client *Client) CreateTaskWithOptions(request *CreateTaskRequest, runtime *util.RuntimeOptions) (_result *CreateTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientFileName)) {
		query["ClientFileName"] = request.ClientFileName
	}

	if !tea.BoolValue(util.IsUnset(request.ClientPath)) {
		query["ClientPath"] = request.ClientPath
	}

	if !tea.BoolValue(util.IsUnset(request.Describe)) {
		query["Describe"] = request.Describe
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SceneName)) {
		query["SceneName"] = request.SceneName
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建任务
//
// @param request - CreateTaskRequest
//
// @return CreateTaskResponse
func (client *Client) CreateTask(request *CreateTaskRequest) (_result *CreateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTaskResponse{}
	_body, _err := client.CreateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建模版
//
// @param request - CreateTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTemplateResponse
func (client *Client) CreateTemplateWithOptions(request *CreateTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["eventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.LogicExpression)) {
		query["logicExpression"] = request.LogicExpression
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleActions)) {
		query["ruleActions"] = request.RuleActions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleExpressions)) {
		query["ruleExpressions"] = request.RuleExpressions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleStatus)) {
		query["ruleStatus"] = request.RuleStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTemplate"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建模版
//
// @param request - CreateTemplateRequest
//
// @return CreateTemplateResponse
func (client *Client) CreateTemplate(request *CreateTemplateRequest) (_result *CreateTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTemplateResponse{}
	_body, _err := client.CreateTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除查询条件
//
// @param request - DeleteAnalysisConditionFavoriteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAnalysisConditionFavoriteResponse
func (client *Client) DeleteAnalysisConditionFavoriteWithOptions(request *DeleteAnalysisConditionFavoriteRequest, runtime *util.RuntimeOptions) (_result *DeleteAnalysisConditionFavoriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAnalysisConditionFavorite"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAnalysisConditionFavoriteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除查询条件
//
// @param request - DeleteAnalysisConditionFavoriteRequest
//
// @return DeleteAnalysisConditionFavoriteResponse
func (client *Client) DeleteAnalysisConditionFavorite(request *DeleteAnalysisConditionFavoriteRequest) (_result *DeleteAnalysisConditionFavoriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAnalysisConditionFavoriteResponse{}
	_body, _err := client.DeleteAnalysisConditionFavoriteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除用户授权
//
// @param request - DeleteAuthUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAuthUserResponse
func (client *Client) DeleteAuthUserWithOptions(request *DeleteAuthUserRequest, runtime *util.RuntimeOptions) (_result *DeleteAuthUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAuthUser"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAuthUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除用户授权
//
// @param request - DeleteAuthUserRequest
//
// @return DeleteAuthUserResponse
func (client *Client) DeleteAuthUser(request *DeleteAuthUserRequest) (_result *DeleteAuthUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAuthUserResponse{}
	_body, _err := client.DeleteAuthUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除旁路事件
//
// @param request - DeleteByPassShuntEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteByPassShuntEventResponse
func (client *Client) DeleteByPassShuntEventWithOptions(request *DeleteByPassShuntEventRequest, runtime *util.RuntimeOptions) (_result *DeleteByPassShuntEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["eventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteByPassShuntEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteByPassShuntEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除旁路事件
//
// @param request - DeleteByPassShuntEventRequest
//
// @return DeleteByPassShuntEventResponse
func (client *Client) DeleteByPassShuntEvent(request *DeleteByPassShuntEventRequest) (_result *DeleteByPassShuntEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteByPassShuntEventResponse{}
	_body, _err := client.DeleteByPassShuntEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除累计变量
//
// @param request - DeleteCustVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustVariableResponse
func (client *Client) DeleteCustVariableWithOptions(request *DeleteCustVariableRequest, runtime *util.RuntimeOptions) (_result *DeleteCustVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersion)) {
		query["dataVersion"] = request.DataVersion
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.VariableId)) {
		query["variableId"] = request.VariableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除累计变量
//
// @param request - DeleteCustVariableRequest
//
// @return DeleteCustVariableResponse
func (client *Client) DeleteCustVariable(request *DeleteCustVariableRequest) (_result *DeleteCustVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustVariableResponse{}
	_body, _err := client.DeleteCustVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除数据源
//
// @param request - DeleteDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDataSourceResponse
func (client *Client) DeleteDataSourceWithOptions(request *DeleteDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSource"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除数据源
//
// @param request - DeleteDataSourceRequest
//
// @return DeleteDataSourceResponse
func (client *Client) DeleteDataSource(request *DeleteDataSourceRequest) (_result *DeleteDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.DeleteDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除自定义变量
//
// @param request - DeleteExpressionVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteExpressionVariableResponse
func (client *Client) DeleteExpressionVariableWithOptions(request *DeleteExpressionVariableRequest, runtime *util.RuntimeOptions) (_result *DeleteExpressionVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersion)) {
		query["dataVersion"] = request.DataVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteExpressionVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteExpressionVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义变量
//
// @param request - DeleteExpressionVariableRequest
//
// @return DeleteExpressionVariableResponse
func (client *Client) DeleteExpressionVariable(request *DeleteExpressionVariableRequest) (_result *DeleteExpressionVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExpressionVariableResponse{}
	_body, _err := client.DeleteExpressionVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除字段
//
// @param request - DeleteFieldRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFieldResponse
func (client *Client) DeleteFieldWithOptions(request *DeleteFieldRequest, runtime *util.RuntimeOptions) (_result *DeleteFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteField"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除字段
//
// @param request - DeleteFieldRequest
//
// @return DeleteFieldResponse
func (client *Client) DeleteField(request *DeleteFieldRequest) (_result *DeleteFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFieldResponse{}
	_body, _err := client.DeleteFieldWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除名单
//
// @param request - DeleteNameListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNameListResponse
func (client *Client) DeleteNameListWithOptions(request *DeleteNameListRequest, runtime *util.RuntimeOptions) (_result *DeleteNameListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNameList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNameListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除名单
//
// @param request - DeleteNameListRequest
//
// @return DeleteNameListResponse
func (client *Client) DeleteNameList(request *DeleteNameListRequest) (_result *DeleteNameListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNameListResponse{}
	_body, _err := client.DeleteNameListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除(伪)名单变量数据
//
// @param request - DeleteNameListDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNameListDataResponse
func (client *Client) DeleteNameListDataWithOptions(request *DeleteNameListDataRequest, runtime *util.RuntimeOptions) (_result *DeleteNameListDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.VariableId)) {
		query["variableId"] = request.VariableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNameListData"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNameListDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除(伪)名单变量数据
//
// @param request - DeleteNameListDataRequest
//
// @return DeleteNameListDataResponse
func (client *Client) DeleteNameListData(request *DeleteNameListDataRequest) (_result *DeleteNameListDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNameListDataResponse{}
	_body, _err := client.DeleteNameListDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量删除
//
// @param request - DeleteQueryVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteQueryVariableResponse
func (client *Client) DeleteQueryVariableWithOptions(request *DeleteQueryVariableRequest, runtime *util.RuntimeOptions) (_result *DeleteQueryVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQueryVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQueryVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量删除
//
// @param request - DeleteQueryVariableRequest
//
// @return DeleteQueryVariableResponse
func (client *Client) DeleteQueryVariable(request *DeleteQueryVariableRequest) (_result *DeleteQueryVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQueryVariableResponse{}
	_body, _err := client.DeleteQueryVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除策略版本
//
// @param request - DeleteRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRuleResponse
func (client *Client) DeleteRuleWithOptions(request *DeleteRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleVersionId)) {
		query["ruleVersionId"] = request.RuleVersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRule"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除策略版本
//
// @param request - DeleteRuleRequest
//
// @return DeleteRuleResponse
func (client *Client) DeleteRule(request *DeleteRuleRequest) (_result *DeleteRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRuleResponse{}
	_body, _err := client.DeleteRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量删除样本
//
// @param request - DeleteSampleBatchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSampleBatchResponse
func (client *Client) DeleteSampleBatchWithOptions(request *DeleteSampleBatchRequest, runtime *util.RuntimeOptions) (_result *DeleteSampleBatchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Versions)) {
		query["versions"] = request.Versions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSampleBatch"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSampleBatchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量删除样本
//
// @param request - DeleteSampleBatchRequest
//
// @return DeleteSampleBatchResponse
func (client *Client) DeleteSampleBatch(request *DeleteSampleBatchRequest) (_result *DeleteSampleBatchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSampleBatchResponse{}
	_body, _err := client.DeleteSampleBatchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除样本数据
//
// @param request - DeleteSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSampleDataResponse
func (client *Client) DeleteSampleDataWithOptions(request *DeleteSampleDataRequest, runtime *util.RuntimeOptions) (_result *DeleteSampleDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSampleData"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSampleDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除样本数据
//
// @param request - DeleteSampleDataRequest
//
// @return DeleteSampleDataResponse
func (client *Client) DeleteSampleData(request *DeleteSampleDataRequest) (_result *DeleteSampleDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSampleDataResponse{}
	_body, _err := client.DeleteSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除社群任务
//
// @param request - DeleteTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTaskResponse
func (client *Client) DeleteTaskWithOptions(request *DeleteTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除社群任务
//
// @param request - DeleteTaskRequest
//
// @return DeleteTaskResponse
func (client *Client) DeleteTask(request *DeleteTaskRequest) (_result *DeleteTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTaskResponse{}
	_body, _err := client.DeleteTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 高级查询获取左变量接口
//
// @param request - DescribeAdvanceSearchLeftVariableListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAdvanceSearchLeftVariableListResponse
func (client *Client) DescribeAdvanceSearchLeftVariableListWithOptions(request *DescribeAdvanceSearchLeftVariableListRequest, runtime *util.RuntimeOptions) (_result *DescribeAdvanceSearchLeftVariableListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAdvanceSearchLeftVariableList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAdvanceSearchLeftVariableListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 高级查询获取左变量接口
//
// @param request - DescribeAdvanceSearchLeftVariableListRequest
//
// @return DescribeAdvanceSearchLeftVariableListResponse
func (client *Client) DescribeAdvanceSearchLeftVariableList(request *DescribeAdvanceSearchLeftVariableListRequest) (_result *DescribeAdvanceSearchLeftVariableListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAdvanceSearchLeftVariableListResponse{}
	_body, _err := client.DescribeAdvanceSearchLeftVariableListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 高级查询
//
// @param request - DescribeAdvanceSearchPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAdvanceSearchPageListResponse
func (client *Client) DescribeAdvanceSearchPageListWithOptions(request *DescribeAdvanceSearchPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeAdvanceSearchPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventBeginTime)) {
		query["eventBeginTime"] = request.EventBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EventEndTime)) {
		query["eventEndTime"] = request.EventEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["fieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["fieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAdvanceSearchPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAdvanceSearchPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 高级查询
//
// @param request - DescribeAdvanceSearchPageListRequest
//
// @return DescribeAdvanceSearchPageListResponse
func (client *Client) DescribeAdvanceSearchPageList(request *DescribeAdvanceSearchPageListRequest) (_result *DescribeAdvanceSearchPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAdvanceSearchPageListResponse{}
	_body, _err := client.DescribeAdvanceSearchPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 数据源列表
//
// @param request - DescribeAllDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAllDataSourceResponse
func (client *Client) DescribeAllDataSourceWithOptions(request *DescribeAllDataSourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAllDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllDataSource"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 数据源列表
//
// @param request - DescribeAllDataSourceRequest
//
// @return DescribeAllDataSourceResponse
func (client *Client) DescribeAllDataSource(request *DescribeAllDataSourceRequest) (_result *DescribeAllDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllDataSourceResponse{}
	_body, _err := client.DescribeAllDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 事件列表查询
//
// @param request - DescribeAllEventNameAndCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAllEventNameAndCodeResponse
func (client *Client) DescribeAllEventNameAndCodeWithOptions(request *DescribeAllEventNameAndCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeAllEventNameAndCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllEventNameAndCode"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllEventNameAndCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 事件列表查询
//
// @param request - DescribeAllEventNameAndCodeRequest
//
// @return DescribeAllEventNameAndCodeResponse
func (client *Client) DescribeAllEventNameAndCode(request *DescribeAllEventNameAndCodeRequest) (_result *DescribeAllEventNameAndCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllEventNameAndCodeResponse{}
	_body, _err := client.DescribeAllEventNameAndCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义表达式测试时，展示所有的根变量
//
// @param request - DescribeAllRootVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAllRootVariableResponse
func (client *Client) DescribeAllRootVariableWithOptions(request *DescribeAllRootVariableRequest, runtime *util.RuntimeOptions) (_result *DescribeAllRootVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceVariableIds)) {
		query["deviceVariableIds"] = request.DeviceVariableIds
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionVariableIds)) {
		query["expressionVariableIds"] = request.ExpressionVariableIds
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.NativeVariableIds)) {
		query["nativeVariableIds"] = request.NativeVariableIds
	}

	if !tea.BoolValue(util.IsUnset(request.QueryVariableIds)) {
		query["queryVariableIds"] = request.QueryVariableIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.VelocityVariableIds)) {
		query["velocityVariableIds"] = request.VelocityVariableIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllRootVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllRootVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义表达式测试时，展示所有的根变量
//
// @param request - DescribeAllRootVariableRequest
//
// @return DescribeAllRootVariableResponse
func (client *Client) DescribeAllRootVariable(request *DescribeAllRootVariableRequest) (_result *DescribeAllRootVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllRootVariableResponse{}
	_body, _err := client.DescribeAllRootVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 展示所有字段
//
// @param request - DescribeAnalysisColumnFieldListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAnalysisColumnFieldListResponse
func (client *Client) DescribeAnalysisColumnFieldListWithOptions(request *DescribeAnalysisColumnFieldListRequest, runtime *util.RuntimeOptions) (_result *DescribeAnalysisColumnFieldListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAnalysisColumnFieldList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAnalysisColumnFieldListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 展示所有字段
//
// @param request - DescribeAnalysisColumnFieldListRequest
//
// @return DescribeAnalysisColumnFieldListResponse
func (client *Client) DescribeAnalysisColumnFieldList(request *DescribeAnalysisColumnFieldListRequest) (_result *DescribeAnalysisColumnFieldListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAnalysisColumnFieldListResponse{}
	_body, _err := client.DescribeAnalysisColumnFieldListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询自定义列
//
// @param request - DescribeAnalysisColumnListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAnalysisColumnListResponse
func (client *Client) DescribeAnalysisColumnListWithOptions(request *DescribeAnalysisColumnListRequest, runtime *util.RuntimeOptions) (_result *DescribeAnalysisColumnListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAnalysisColumnList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAnalysisColumnListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询自定义列
//
// @param request - DescribeAnalysisColumnListRequest
//
// @return DescribeAnalysisColumnListResponse
func (client *Client) DescribeAnalysisColumnList(request *DescribeAnalysisColumnListRequest) (_result *DescribeAnalysisColumnListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAnalysisColumnListResponse{}
	_body, _err := client.DescribeAnalysisColumnListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询条件列表
//
// @param request - DescribeAnalysisConditionFavoriteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAnalysisConditionFavoriteListResponse
func (client *Client) DescribeAnalysisConditionFavoriteListWithOptions(request *DescribeAnalysisConditionFavoriteListRequest, runtime *util.RuntimeOptions) (_result *DescribeAnalysisConditionFavoriteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAnalysisConditionFavoriteList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAnalysisConditionFavoriteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询条件列表
//
// @param request - DescribeAnalysisConditionFavoriteListRequest
//
// @return DescribeAnalysisConditionFavoriteListResponse
func (client *Client) DescribeAnalysisConditionFavoriteList(request *DescribeAnalysisConditionFavoriteListRequest) (_result *DescribeAnalysisConditionFavoriteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAnalysisConditionFavoriteListResponse{}
	_body, _err := client.DescribeAnalysisConditionFavoriteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 下载查询结果
//
// @param request - DescribeAnalysisExportTaskDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAnalysisExportTaskDownloadUrlResponse
func (client *Client) DescribeAnalysisExportTaskDownloadUrlWithOptions(request *DescribeAnalysisExportTaskDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeAnalysisExportTaskDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAnalysisExportTaskDownloadUrl"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAnalysisExportTaskDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 下载查询结果
//
// @param request - DescribeAnalysisExportTaskDownloadUrlRequest
//
// @return DescribeAnalysisExportTaskDownloadUrlResponse
func (client *Client) DescribeAnalysisExportTaskDownloadUrl(request *DescribeAnalysisExportTaskDownloadUrlRequest) (_result *DescribeAnalysisExportTaskDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAnalysisExportTaskDownloadUrlResponse{}
	_body, _err := client.DescribeAnalysisExportTaskDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 得到api详情
//
// @param request - DescribeApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiResponse
func (client *Client) DescribeApiWithOptions(request *DescribeApiRequest, runtime *util.RuntimeOptions) (_result *DescribeApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["apiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiRegionId)) {
		query["apiRegionId"] = request.ApiRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiType)) {
		query["apiType"] = request.ApiType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApi"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 得到api详情
//
// @param request - DescribeApiRequest
//
// @return DescribeApiResponse
func (client *Client) DescribeApi(request *DescribeApiRequest) (_result *DescribeApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiResponse{}
	_body, _err := client.DescribeApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 得到api分组包括用户购买的以及自定义的
//
// @param request - DescribeApiGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiGroupsResponse
func (client *Client) DescribeApiGroupsWithOptions(request *DescribeApiGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeApiGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ApiRegionId)) {
		query["apiRegionId"] = request.ApiRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiGroups"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 得到api分组包括用户购买的以及自定义的
//
// @param request - DescribeApiGroupsRequest
//
// @return DescribeApiGroupsResponse
func (client *Client) DescribeApiGroups(request *DescribeApiGroupsRequest) (_result *DescribeApiGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiGroupsResponse{}
	_body, _err := client.DescribeApiGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询创建api任务的limit信息
//
// @param request - DescribeApiLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiLimitResponse
func (client *Client) DescribeApiLimitWithOptions(request *DescribeApiLimitRequest, runtime *util.RuntimeOptions) (_result *DescribeApiLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiLimit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询创建api任务的limit信息
//
// @param request - DescribeApiLimitRequest
//
// @return DescribeApiLimitResponse
func (client *Client) DescribeApiLimit(request *DescribeApiLimitRequest) (_result *DescribeApiLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiLimitResponse{}
	_body, _err := client.DescribeApiLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取api服务名称
//
// @param request - DescribeApiNameListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiNameListResponse
func (client *Client) DescribeApiNameListWithOptions(request *DescribeApiNameListRequest, runtime *util.RuntimeOptions) (_result *DescribeApiNameListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiNameList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiNameListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取api服务名称
//
// @param request - DescribeApiNameListRequest
//
// @return DescribeApiNameListResponse
func (client *Client) DescribeApiNameList(request *DescribeApiNameListRequest) (_result *DescribeApiNameListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiNameListResponse{}
	_body, _err := client.DescribeApiNameListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量详情
//
// @param request - DescribeApiVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiVariableResponse
func (client *Client) DescribeApiVariableWithOptions(request *DescribeApiVariableRequest, runtime *util.RuntimeOptions) (_result *DescribeApiVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量详情
//
// @param request - DescribeApiVariableRequest
//
// @return DescribeApiVariableResponse
func (client *Client) DescribeApiVariable(request *DescribeApiVariableRequest) (_result *DescribeApiVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiVariableResponse{}
	_body, _err := client.DescribeApiVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 得到api列表包括用户购买的以及自定义的
//
// @param request - DescribeApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisResponse
func (client *Client) DescribeApisWithOptions(request *DescribeApisRequest, runtime *util.RuntimeOptions) (_result *DescribeApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ApiGroupId)) {
		query["apiGroupId"] = request.ApiGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiRegionId)) {
		query["apiRegionId"] = request.ApiRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiType)) {
		query["apiType"] = request.ApiType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApis"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 得到api列表包括用户购买的以及自定义的
//
// @param request - DescribeApisRequest
//
// @return DescribeApisResponse
func (client *Client) DescribeApis(request *DescribeApisRequest) (_result *DescribeApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisResponse{}
	_body, _err := client.DescribeApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询appKey列表
//
// @param request - DescribeAppKeyPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppKeyPageResponse
func (client *Client) DescribeAppKeyPageWithOptions(request *DescribeAppKeyPageRequest, runtime *util.RuntimeOptions) (_result *DescribeAppKeyPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppKeyPage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppKeyPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询appKey列表
//
// @param request - DescribeAppKeyPageRequest
//
// @return DescribeAppKeyPageResponse
func (client *Client) DescribeAppKeyPage(request *DescribeAppKeyPageRequest) (_result *DescribeAppKeyPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppKeyPageResponse{}
	_body, _err := client.DescribeAppKeyPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 审批开关
//
// @param request - DescribeAuditConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuditConfigResponse
func (client *Client) DescribeAuditConfigWithOptions(request *DescribeAuditConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.AuditRelationType)) {
		query["auditRelationType"] = request.AuditRelationType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuditConfig"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 审批开关
//
// @param request - DescribeAuditConfigRequest
//
// @return DescribeAuditConfigResponse
func (client *Client) DescribeAuditConfig(request *DescribeAuditConfigRequest) (_result *DescribeAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuditConfigResponse{}
	_body, _err := client.DescribeAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 审批详情
//
// @param request - DescribeAuditDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuditDetailsResponse
func (client *Client) DescribeAuditDetailsWithOptions(request *DescribeAuditDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeAuditDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuditDetails"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuditDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 审批详情
//
// @param request - DescribeAuditDetailsRequest
//
// @return DescribeAuditDetailsResponse
func (client *Client) DescribeAuditDetails(request *DescribeAuditDetailsRequest) (_result *DescribeAuditDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuditDetailsResponse{}
	_body, _err := client.DescribeAuditDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 审核列表展示、查询
//
// @param request - DescribeAuditPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuditPageListResponse
func (client *Client) DescribeAuditPageListWithOptions(request *DescribeAuditPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeAuditPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.AuditStatus)) {
		query["auditStatus"] = request.AuditStatus
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuditPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuditPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 审核列表展示、查询
//
// @param request - DescribeAuditPageListRequest
//
// @return DescribeAuditPageListResponse
func (client *Client) DescribeAuditPageList(request *DescribeAuditPageListRequest) (_result *DescribeAuditPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuditPageListResponse{}
	_body, _err := client.DescribeAuditPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询当前用户的事件名列表
//
// @param request - DescribeAuthEventNameListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuthEventNameListResponse
func (client *Client) DescribeAuthEventNameListWithOptions(request *DescribeAuthEventNameListRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthEventNameListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthEventNameList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthEventNameListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询当前用户的事件名列表
//
// @param request - DescribeAuthEventNameListRequest
//
// @return DescribeAuthEventNameListResponse
func (client *Client) DescribeAuthEventNameList(request *DescribeAuthEventNameListRequest) (_result *DescribeAuthEventNameListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthEventNameListResponse{}
	_body, _err := client.DescribeAuthEventNameListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 策略列表
//
// @param request - DescribeAuthRulePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuthRulePageListResponse
func (client *Client) DescribeAuthRulePageListWithOptions(request *DescribeAuthRulePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthRulePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthRulePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthRulePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 策略列表
//
// @param request - DescribeAuthRulePageListRequest
//
// @return DescribeAuthRulePageListResponse
func (client *Client) DescribeAuthRulePageList(request *DescribeAuthRulePageListRequest) (_result *DescribeAuthRulePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthRulePageListResponse{}
	_body, _err := client.DescribeAuthRulePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 场景列表
//
// @param request - DescribeAuthSceneListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuthSceneListResponse
func (client *Client) DescribeAuthSceneListWithOptions(request *DescribeAuthSceneListRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthSceneListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthSceneList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthSceneListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 场景列表
//
// @param request - DescribeAuthSceneListRequest
//
// @return DescribeAuthSceneListResponse
func (client *Client) DescribeAuthSceneList(request *DescribeAuthSceneListRequest) (_result *DescribeAuthSceneListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthSceneListResponse{}
	_body, _err := client.DescribeAuthSceneListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 场景列表
//
// @param request - DescribeAuthScenePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuthScenePageListResponse
func (client *Client) DescribeAuthScenePageListWithOptions(request *DescribeAuthScenePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthScenePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneName)) {
		query["sceneName"] = request.SceneName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthScenePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthScenePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 场景列表
//
// @param request - DescribeAuthScenePageListRequest
//
// @return DescribeAuthScenePageListResponse
func (client *Client) DescribeAuthScenePageList(request *DescribeAuthScenePageListRequest) (_result *DescribeAuthScenePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthScenePageListResponse{}
	_body, _err := client.DescribeAuthScenePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查看是否授权
//
// @param request - DescribeAuthStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuthStatusResponse
func (client *Client) DescribeAuthStatusWithOptions(request *DescribeAuthStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthStatus"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查看是否授权
//
// @param request - DescribeAuthStatusRequest
//
// @return DescribeAuthStatusResponse
func (client *Client) DescribeAuthStatus(request *DescribeAuthStatusRequest) (_result *DescribeAuthStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthStatusResponse{}
	_body, _err := client.DescribeAuthStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 平均执行耗时
//
// @param request - DescribeAvgExecuteCostReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAvgExecuteCostReportResponse
func (client *Client) DescribeAvgExecuteCostReportWithOptions(request *DescribeAvgExecuteCostReportRequest, runtime *util.RuntimeOptions) (_result *DescribeAvgExecuteCostReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvgExecuteCostReport"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAvgExecuteCostReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 平均执行耗时
//
// @param request - DescribeAvgExecuteCostReportRequest
//
// @return DescribeAvgExecuteCostReportResponse
func (client *Client) DescribeAvgExecuteCostReport(request *DescribeAvgExecuteCostReportRequest) (_result *DescribeAvgExecuteCostReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvgExecuteCostReportResponse{}
	_body, _err := client.DescribeAvgExecuteCostReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 基础查询
//
// @param request - DescribeBasicSearchPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBasicSearchPageListResponse
func (client *Client) DescribeBasicSearchPageListWithOptions(request *DescribeBasicSearchPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeBasicSearchPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventBeginTime)) {
		query["eventBeginTime"] = request.EventBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EventEndTime)) {
		query["eventEndTime"] = request.EventEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["fieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["fieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBasicSearchPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBasicSearchPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 基础查询
//
// @param request - DescribeBasicSearchPageListRequest
//
// @return DescribeBasicSearchPageListResponse
func (client *Client) DescribeBasicSearchPageList(request *DescribeBasicSearchPageListRequest) (_result *DescribeBasicSearchPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBasicSearchPageListResponse{}
	_body, _err := client.DescribeBasicSearchPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 基础统计
//
// @param request - DescribeBasicStartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBasicStartResponse
func (client *Client) DescribeBasicStartWithOptions(request *DescribeBasicStartRequest, runtime *util.RuntimeOptions) (_result *DescribeBasicStartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["appKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.EndDs)) {
		query["endDs"] = request.EndDs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		query["service"] = request.Service
	}

	if !tea.BoolValue(util.IsUnset(request.StartDs)) {
		query["startDs"] = request.StartDs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBasicStart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBasicStartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 基础统计
//
// @param request - DescribeBasicStartRequest
//
// @return DescribeBasicStartResponse
func (client *Client) DescribeBasicStart(request *DescribeBasicStartRequest) (_result *DescribeBasicStartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBasicStartResponse{}
	_body, _err := client.DescribeBasicStartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查看旁路事件
//
// @param request - DescribeByPassShuntEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeByPassShuntEventResponse
func (client *Client) DescribeByPassShuntEventWithOptions(request *DescribeByPassShuntEventRequest, runtime *util.RuntimeOptions) (_result *DescribeByPassShuntEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["eventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeByPassShuntEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeByPassShuntEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查看旁路事件
//
// @param request - DescribeByPassShuntEventRequest
//
// @return DescribeByPassShuntEventResponse
func (client *Client) DescribeByPassShuntEvent(request *DescribeByPassShuntEventRequest) (_result *DescribeByPassShuntEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeByPassShuntEventResponse{}
	_body, _err := client.DescribeByPassShuntEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询自定义累计变量的类型配置
//
// @param request - DescribeCustVariableConfigListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustVariableConfigListResponse
func (client *Client) DescribeCustVariableConfigListWithOptions(request *DescribeCustVariableConfigListRequest, runtime *util.RuntimeOptions) (_result *DescribeCustVariableConfigListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["bizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeType)) {
		query["timeType"] = request.TimeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustVariableConfigList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustVariableConfigListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询自定义累计变量的类型配置
//
// @param request - DescribeCustVariableConfigListRequest
//
// @return DescribeCustVariableConfigListResponse
func (client *Client) DescribeCustVariableConfigList(request *DescribeCustVariableConfigListRequest) (_result *DescribeCustVariableConfigListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustVariableConfigListResponse{}
	_body, _err := client.DescribeCustVariableConfigListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 累计变量详情
//
// @param request - DescribeCustVariableDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustVariableDetailResponse
func (client *Client) DescribeCustVariableDetailWithOptions(request *DescribeCustVariableDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeCustVariableDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustVariableDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustVariableDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 累计变量详情
//
// @param request - DescribeCustVariableDetailRequest
//
// @return DescribeCustVariableDetailResponse
func (client *Client) DescribeCustVariableDetail(request *DescribeCustVariableDetailRequest) (_result *DescribeCustVariableDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustVariableDetailResponse{}
	_body, _err := client.DescribeCustVariableDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询自定义累计变量列表
//
// @param request - DescribeCustVariablePageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustVariablePageResponse
func (client *Client) DescribeCustVariablePageWithOptions(request *DescribeCustVariablePageRequest, runtime *util.RuntimeOptions) (_result *DescribeCustVariablePageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustVariablePage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustVariablePageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询自定义累计变量列表
//
// @param request - DescribeCustVariablePageRequest
//
// @return DescribeCustVariablePageResponse
func (client *Client) DescribeCustVariablePage(request *DescribeCustVariablePageRequest) (_result *DescribeCustVariablePageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustVariablePageResponse{}
	_body, _err := client.DescribeCustVariablePageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取数据源数据下载链接
//
// @param request - DescribeDataSourceDataDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataSourceDataDownloadUrlResponse
func (client *Client) DescribeDataSourceDataDownloadUrlWithOptions(request *DescribeDataSourceDataDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeDataSourceDataDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["dataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataSourceDataDownloadUrl"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataSourceDataDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取数据源数据下载链接
//
// @param request - DescribeDataSourceDataDownloadUrlRequest
//
// @return DescribeDataSourceDataDownloadUrlResponse
func (client *Client) DescribeDataSourceDataDownloadUrl(request *DescribeDataSourceDataDownloadUrlRequest) (_result *DescribeDataSourceDataDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataSourceDataDownloadUrlResponse{}
	_body, _err := client.DescribeDataSourceDataDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取数据源所有字段
//
// @param request - DescribeDataSourceFieldsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataSourceFieldsResponse
func (client *Client) DescribeDataSourceFieldsWithOptions(request *DescribeDataSourceFieldsRequest, runtime *util.RuntimeOptions) (_result *DescribeDataSourceFieldsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceCode)) {
		query["dataSourceCode"] = request.DataSourceCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataSourceFields"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataSourceFieldsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取数据源所有字段
//
// @param request - DescribeDataSourceFieldsRequest
//
// @return DescribeDataSourceFieldsResponse
func (client *Client) DescribeDataSourceFields(request *DescribeDataSourceFieldsRequest) (_result *DescribeDataSourceFieldsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataSourceFieldsResponse{}
	_body, _err := client.DescribeDataSourceFieldsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 数据源列表接口
//
// @param request - DescribeDataSourcePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataSourcePageListResponse
func (client *Client) DescribeDataSourcePageListWithOptions(request *DescribeDataSourcePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeDataSourcePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataSourcePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataSourcePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 数据源列表接口
//
// @param request - DescribeDataSourcePageListRequest
//
// @return DescribeDataSourcePageListResponse
func (client *Client) DescribeDataSourcePageList(request *DescribeDataSourcePageListRequest) (_result *DescribeDataSourcePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataSourcePageListResponse{}
	_body, _err := client.DescribeDataSourcePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 决策结果波动检测
//
// @param request - DescribeDecisionResultFluctuationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDecisionResultFluctuationResponse
func (client *Client) DescribeDecisionResultFluctuationWithOptions(request *DescribeDecisionResultFluctuationRequest, runtime *util.RuntimeOptions) (_result *DescribeDecisionResultFluctuationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDecisionResultFluctuation"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDecisionResultFluctuationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 决策结果波动检测
//
// @param request - DescribeDecisionResultFluctuationRequest
//
// @return DescribeDecisionResultFluctuationResponse
func (client *Client) DescribeDecisionResultFluctuation(request *DescribeDecisionResultFluctuationRequest) (_result *DescribeDecisionResultFluctuationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDecisionResultFluctuationResponse{}
	_body, _err := client.DescribeDecisionResultFluctuationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 决策结果波动趋势
//
// @param request - DescribeDecisionResultTrendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDecisionResultTrendResponse
func (client *Client) DescribeDecisionResultTrendWithOptions(request *DescribeDecisionResultTrendRequest, runtime *util.RuntimeOptions) (_result *DescribeDecisionResultTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDecisionResultTrend"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDecisionResultTrendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 决策结果波动趋势
//
// @param request - DescribeDecisionResultTrendRequest
//
// @return DescribeDecisionResultTrendResponse
func (client *Client) DescribeDecisionResultTrend(request *DescribeDecisionResultTrendRequest) (_result *DescribeDecisionResultTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDecisionResultTrendResponse{}
	_body, _err := client.DescribeDecisionResultTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 详细统计
//
// @param request - DescribeDetailStartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDetailStartResponse
func (client *Client) DescribeDetailStartWithOptions(request *DescribeDetailStartRequest, runtime *util.RuntimeOptions) (_result *DescribeDetailStartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["appKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.EndDs)) {
		query["endDs"] = request.EndDs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		query["service"] = request.Service
	}

	if !tea.BoolValue(util.IsUnset(request.StartDs)) {
		query["startDs"] = request.StartDs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDetailStart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDetailStartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 详细统计
//
// @param request - DescribeDetailStartRequest
//
// @return DescribeDetailStartResponse
func (client *Client) DescribeDetailStart(request *DescribeDetailStartRequest) (_result *DescribeDetailStartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDetailStartResponse{}
	_body, _err := client.DescribeDetailStartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 下载
//
// @param request - DescribeDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadUrlResponse
func (client *Client) DescribeDownloadUrlWithOptions(request *DescribeDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDownloadUrl"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 下载
//
// @param request - DescribeDownloadUrlRequest
//
// @return DescribeDownloadUrlResponse
func (client *Client) DescribeDownloadUrl(request *DescribeDownloadUrlRequest) (_result *DescribeDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDownloadUrlResponse{}
	_body, _err := client.DescribeDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件详情
//
// @param request - DescribeEventBaseInfoByEventCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventBaseInfoByEventCodeResponse
func (client *Client) DescribeEventBaseInfoByEventCodeWithOptions(request *DescribeEventBaseInfoByEventCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeEventBaseInfoByEventCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventBaseInfoByEventCode"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventBaseInfoByEventCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件详情
//
// @param request - DescribeEventBaseInfoByEventCodeRequest
//
// @return DescribeEventBaseInfoByEventCodeResponse
func (client *Client) DescribeEventBaseInfoByEventCode(request *DescribeEventBaseInfoByEventCodeRequest) (_result *DescribeEventBaseInfoByEventCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventBaseInfoByEventCodeResponse{}
	_body, _err := client.DescribeEventBaseInfoByEventCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件总数量
//
// @param request - DescribeEventCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventCountResponse
func (client *Client) DescribeEventCountWithOptions(request *DescribeEventCountRequest, runtime *util.RuntimeOptions) (_result *DescribeEventCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventCount"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件总数量
//
// @param request - DescribeEventCountRequest
//
// @return DescribeEventCountResponse
func (client *Client) DescribeEventCount(request *DescribeEventCountRequest) (_result *DescribeEventCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventCountResponse{}
	_body, _err := client.DescribeEventCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据requestId查询事件详情
//
// @param request - DescribeEventDetailByRequestIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventDetailByRequestIdResponse
func (client *Client) DescribeEventDetailByRequestIdWithOptions(request *DescribeEventDetailByRequestIdRequest, runtime *util.RuntimeOptions) (_result *DescribeEventDetailByRequestIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.EventTime)) {
		query["eventTime"] = request.EventTime
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SRequestId)) {
		query["sRequestId"] = request.SRequestId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventDetailByRequestId"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventDetailByRequestIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据requestId查询事件详情
//
// @param request - DescribeEventDetailByRequestIdRequest
//
// @return DescribeEventDetailByRequestIdResponse
func (client *Client) DescribeEventDetailByRequestId(request *DescribeEventDetailByRequestIdRequest) (_result *DescribeEventDetailByRequestIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventDetailByRequestIdResponse{}
	_body, _err := client.DescribeEventDetailByRequestIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件历史详情
//
// @param request - DescribeEventLogDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventLogDetailResponse
func (client *Client) DescribeEventLogDetailWithOptions(request *DescribeEventLogDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeEventLogDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ReqIdByLog)) {
		query["reqIdByLog"] = request.ReqIdByLog
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventLogDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventLogDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件历史详情
//
// @param request - DescribeEventLogDetailRequest
//
// @return DescribeEventLogDetailResponse
func (client *Client) DescribeEventLogDetail(request *DescribeEventLogDetailRequest) (_result *DescribeEventLogDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventLogDetailResponse{}
	_body, _err := client.DescribeEventLogDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件历史列表
//
// @param request - DescribeEventLogPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventLogPageResponse
func (client *Client) DescribeEventLogPageWithOptions(request *DescribeEventLogPageRequest, runtime *util.RuntimeOptions) (_result *DescribeEventLogPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.AccountIdPRP)) {
		query["accountIdPRP"] = request.AccountIdPRP
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.Condition1AL)) {
		query["condition1AL"] = request.Condition1AL
	}

	if !tea.BoolValue(util.IsUnset(request.Condition2AL)) {
		query["condition2AL"] = request.Condition2AL
	}

	if !tea.BoolValue(util.IsUnset(request.Condition3AL)) {
		query["condition3AL"] = request.Condition3AL
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceTypeLRP)) {
		query["deviceTypeLRP"] = request.DeviceTypeLRP
	}

	if !tea.BoolValue(util.IsUnset(request.EmailPRP)) {
		query["emailPRP"] = request.EmailPRP
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FailReasonLRP)) {
		query["failReasonLRP"] = request.FailReasonLRP
	}

	if !tea.BoolValue(util.IsUnset(request.IpPRP)) {
		query["ipPRP"] = request.IpPRP
	}

	if !tea.BoolValue(util.IsUnset(request.LoginResultARP)) {
		query["loginResultARP"] = request.LoginResultARP
	}

	if !tea.BoolValue(util.IsUnset(request.LoginTypeLRP)) {
		query["loginTypeLRP"] = request.LoginTypeLRP
	}

	if !tea.BoolValue(util.IsUnset(request.MacPRP)) {
		query["macPRP"] = request.MacPRP
	}

	if !tea.BoolValue(util.IsUnset(request.MobilePRP)) {
		query["mobilePRP"] = request.MobilePRP
	}

	if !tea.BoolValue(util.IsUnset(request.NickNamePRP)) {
		query["nickNamePRP"] = request.NickNamePRP
	}

	if !tea.BoolValue(util.IsUnset(request.OperateSourceLRP)) {
		query["operateSourceLRP"] = request.OperateSourceLRP
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ReferPRP)) {
		query["referPRP"] = request.ReferPRP
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterIpPRP)) {
		query["registerIpPRP"] = request.RegisterIpPRP
	}

	if !tea.BoolValue(util.IsUnset(request.ReqIdPBS)) {
		query["reqIdPBS"] = request.ReqIdPBS
	}

	if !tea.BoolValue(util.IsUnset(request.ScoreEBS)) {
		query["scoreEBS"] = request.ScoreEBS
	}

	if !tea.BoolValue(util.IsUnset(request.ScoreSBS)) {
		query["scoreSBS"] = request.ScoreSBS
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceABS)) {
		query["serviceABS"] = request.ServiceABS
	}

	if !tea.BoolValue(util.IsUnset(request.TagsLBS)) {
		query["tagsLBS"] = request.TagsLBS
	}

	if !tea.BoolValue(util.IsUnset(request.UmidPDI)) {
		query["umidPDI"] = request.UmidPDI
	}

	if !tea.BoolValue(util.IsUnset(request.UserAgentPRP)) {
		query["userAgentPRP"] = request.UserAgentPRP
	}

	if !tea.BoolValue(util.IsUnset(request.UserNameTypeLRP)) {
		query["userNameTypeLRP"] = request.UserNameTypeLRP
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventLogPage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventLogPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件历史列表
//
// @param request - DescribeEventLogPageRequest
//
// @return DescribeEventLogPageResponse
func (client *Client) DescribeEventLogPage(request *DescribeEventLogPageRequest) (_result *DescribeEventLogPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventLogPageResponse{}
	_body, _err := client.DescribeEventLogPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 事件分页查询
//
// @param request - DescribeEventPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventPageListResponse
func (client *Client) DescribeEventPageListWithOptions(request *DescribeEventPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeEventPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["eventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.EventStatus)) {
		query["eventStatus"] = request.EventStatus
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 事件分页查询
//
// @param request - DescribeEventPageListRequest
//
// @return DescribeEventPageListResponse
func (client *Client) DescribeEventPageList(request *DescribeEventPageListRequest) (_result *DescribeEventPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventPageListResponse{}
	_body, _err := client.DescribeEventPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 风险大盘
//
// @param request - DescribeEventResultBarChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventResultBarChartResponse
func (client *Client) DescribeEventResultBarChartWithOptions(request *DescribeEventResultBarChartRequest, runtime *util.RuntimeOptions) (_result *DescribeEventResultBarChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventResultBarChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventResultBarChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 风险大盘
//
// @param request - DescribeEventResultBarChartRequest
//
// @return DescribeEventResultBarChartResponse
func (client *Client) DescribeEventResultBarChart(request *DescribeEventResultBarChartRequest) (_result *DescribeEventResultBarChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventResultBarChartResponse{}
	_body, _err := client.DescribeEventResultBarChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 事件概览列表
//
// @param request - DescribeEventResultListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventResultListResponse
func (client *Client) DescribeEventResultListWithOptions(request *DescribeEventResultListRequest, runtime *util.RuntimeOptions) (_result *DescribeEventResultListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventResultList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventResultListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 事件概览列表
//
// @param request - DescribeEventResultListRequest
//
// @return DescribeEventResultListResponse
func (client *Client) DescribeEventResultList(request *DescribeEventResultListRequest) (_result *DescribeEventResultListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventResultListResponse{}
	_body, _err := client.DescribeEventResultListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询策略下载列表
//
// @param request - DescribeEventTaskHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventTaskHistoryResponse
func (client *Client) DescribeEventTaskHistoryWithOptions(request *DescribeEventTaskHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeEventTaskHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventTaskHistory"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventTaskHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询策略下载列表
//
// @param request - DescribeEventTaskHistoryRequest
//
// @return DescribeEventTaskHistoryResponse
func (client *Client) DescribeEventTaskHistory(request *DescribeEventTaskHistoryRequest) (_result *DescribeEventTaskHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventTaskHistoryResponse{}
	_body, _err := client.DescribeEventTaskHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 调用事件次数
//
// @param request - DescribeEventTotalCountReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventTotalCountReportResponse
func (client *Client) DescribeEventTotalCountReportWithOptions(request *DescribeEventTotalCountReportRequest, runtime *util.RuntimeOptions) (_result *DescribeEventTotalCountReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventTotalCountReport"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventTotalCountReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 调用事件次数
//
// @param request - DescribeEventTotalCountReportRequest
//
// @return DescribeEventTotalCountReportResponse
func (client *Client) DescribeEventTotalCountReport(request *DescribeEventTotalCountReportRequest) (_result *DescribeEventTotalCountReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventTotalCountReportResponse{}
	_body, _err := client.DescribeEventTotalCountReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量导入策略
//
// @param request - DescribeEventUploadPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventUploadPolicyResponse
func (client *Client) DescribeEventUploadPolicyWithOptions(request *DescribeEventUploadPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeEventUploadPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventUploadPolicy"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventUploadPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量导入策略
//
// @param request - DescribeEventUploadPolicyRequest
//
// @return DescribeEventUploadPolicyResponse
func (client *Client) DescribeEventUploadPolicy(request *DescribeEventUploadPolicyRequest) (_result *DescribeEventUploadPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventUploadPolicyResponse{}
	_body, _err := client.DescribeEventUploadPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件变量
//
// @param request - DescribeEventVariableListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventVariableListResponse
func (client *Client) DescribeEventVariableListWithOptions(request *DescribeEventVariableListRequest, runtime *util.RuntimeOptions) (_result *DescribeEventVariableListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.FilterDTO)) {
		query["filterDTO"] = request.FilterDTO
	}

	if !tea.BoolValue(util.IsUnset(request.RefObjId)) {
		query["refObjId"] = request.RefObjId
	}

	if !tea.BoolValue(util.IsUnset(request.RefObjType)) {
		query["refObjType"] = request.RefObjType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventVariableList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventVariableListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件变量
//
// @param request - DescribeEventVariableListRequest
//
// @return DescribeEventVariableListResponse
func (client *Client) DescribeEventVariableList(request *DescribeEventVariableListRequest) (_result *DescribeEventVariableListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventVariableListResponse{}
	_body, _err := client.DescribeEventVariableListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件模版
//
// @param request - DescribeEventVariableTemplateBindRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventVariableTemplateBindResponse
func (client *Client) DescribeEventVariableTemplateBindWithOptions(request *DescribeEventVariableTemplateBindRequest, runtime *util.RuntimeOptions) (_result *DescribeEventVariableTemplateBindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Inputs)) {
		query["inputs"] = request.Inputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["templateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventVariableTemplateBind"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventVariableTemplateBindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件模版
//
// @param request - DescribeEventVariableTemplateBindRequest
//
// @return DescribeEventVariableTemplateBindResponse
func (client *Client) DescribeEventVariableTemplateBind(request *DescribeEventVariableTemplateBindRequest) (_result *DescribeEventVariableTemplateBindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventVariableTemplateBindResponse{}
	_body, _err := client.DescribeEventVariableTemplateBindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件模版
//
// @param request - DescribeEventVariableTemplateListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventVariableTemplateListResponse
func (client *Client) DescribeEventVariableTemplateListWithOptions(request *DescribeEventVariableTemplateListRequest, runtime *util.RuntimeOptions) (_result *DescribeEventVariableTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Inputs)) {
		query["inputs"] = request.Inputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["templateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventVariableTemplateList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventVariableTemplateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件模版
//
// @param request - DescribeEventVariableTemplateListRequest
//
// @return DescribeEventVariableTemplateListResponse
func (client *Client) DescribeEventVariableTemplateList(request *DescribeEventVariableTemplateListRequest) (_result *DescribeEventVariableTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventVariableTemplateListResponse{}
	_body, _err := client.DescribeEventVariableTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件变量
//
// @param request - DescribeEventsVariableListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventsVariableListResponse
func (client *Client) DescribeEventsVariableListWithOptions(request *DescribeEventsVariableListRequest, runtime *util.RuntimeOptions) (_result *DescribeEventsVariableListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.FilterDTO)) {
		query["filterDTO"] = request.FilterDTO
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventsVariableList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventsVariableListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件变量
//
// @param request - DescribeEventsVariableListRequest
//
// @return DescribeEventsVariableListResponse
func (client *Client) DescribeEventsVariableList(request *DescribeEventsVariableListRequest) (_result *DescribeEventsVariableListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventsVariableListResponse{}
	_body, _err := client.DescribeEventsVariableListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeExcuteNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExcuteNumResponse
func (client *Client) DescribeExcuteNumWithOptions(request *DescribeExcuteNumRequest, runtime *util.RuntimeOptions) (_result *DescribeExcuteNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		query["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.Degree)) {
		query["Degree"] = request.Degree
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExcuteNum"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExcuteNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeExcuteNumRequest
//
// @return DescribeExcuteNumResponse
func (client *Client) DescribeExcuteNum(request *DescribeExcuteNumRequest) (_result *DescribeExcuteNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExcuteNumResponse{}
	_body, _err := client.DescribeExcuteNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 校验字段名是否重复(基于用户单位)
//
// @param request - DescribeExistNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExistNameResponse
func (client *Client) DescribeExistNameWithOptions(request *DescribeExistNameRequest, runtime *util.RuntimeOptions) (_result *DescribeExistNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExistName"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExistNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 校验字段名是否重复(基于用户单位)
//
// @param request - DescribeExistNameRequest
//
// @return DescribeExistNameResponse
func (client *Client) DescribeExistName(request *DescribeExistNameRequest) (_result *DescribeExistNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExistNameResponse{}
	_body, _err := client.DescribeExistNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 场景是否存在
//
// @param request - DescribeExistSceneRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExistSceneResponse
func (client *Client) DescribeExistSceneWithOptions(request *DescribeExistSceneRequest, runtime *util.RuntimeOptions) (_result *DescribeExistSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SceneName)) {
		query["SceneName"] = request.SceneName
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExistScene"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExistSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 场景是否存在
//
// @param request - DescribeExistSceneRequest
//
// @return DescribeExistSceneResponse
func (client *Client) DescribeExistScene(request *DescribeExistSceneRequest) (_result *DescribeExistSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExistSceneResponse{}
	_body, _err := client.DescribeExistSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义变量详情
//
// @param request - DescribeExpressionVariableDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExpressionVariableDetailResponse
func (client *Client) DescribeExpressionVariableDetailWithOptions(request *DescribeExpressionVariableDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeExpressionVariableDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExpressionVariableDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExpressionVariableDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义变量详情
//
// @param request - DescribeExpressionVariableDetailRequest
//
// @return DescribeExpressionVariableDetailResponse
func (client *Client) DescribeExpressionVariableDetail(request *DescribeExpressionVariableDetailRequest) (_result *DescribeExpressionVariableDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExpressionVariableDetailResponse{}
	_body, _err := client.DescribeExpressionVariableDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 函数列表
//
// @param request - DescribeExpressionVariableFunctionListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExpressionVariableFunctionListResponse
func (client *Client) DescribeExpressionVariableFunctionListWithOptions(request *DescribeExpressionVariableFunctionListRequest, runtime *util.RuntimeOptions) (_result *DescribeExpressionVariableFunctionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExpressionVariableFunctionList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExpressionVariableFunctionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 函数列表
//
// @param request - DescribeExpressionVariableFunctionListRequest
//
// @return DescribeExpressionVariableFunctionListResponse
func (client *Client) DescribeExpressionVariableFunctionList(request *DescribeExpressionVariableFunctionListRequest) (_result *DescribeExpressionVariableFunctionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExpressionVariableFunctionListResponse{}
	_body, _err := client.DescribeExpressionVariableFunctionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义变量分页查询
//
// @param request - DescribeExpressionVariablePageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExpressionVariablePageResponse
func (client *Client) DescribeExpressionVariablePageWithOptions(request *DescribeExpressionVariablePageRequest, runtime *util.RuntimeOptions) (_result *DescribeExpressionVariablePageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExpressionVariablePage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExpressionVariablePageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义变量分页查询
//
// @param request - DescribeExpressionVariablePageRequest
//
// @return DescribeExpressionVariablePageResponse
func (client *Client) DescribeExpressionVariablePage(request *DescribeExpressionVariablePageRequest) (_result *DescribeExpressionVariablePageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExpressionVariablePageResponse{}
	_body, _err := client.DescribeExpressionVariablePageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取字段详情
//
// @param request - DescribeFieldByIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFieldByIdResponse
func (client *Client) DescribeFieldByIdWithOptions(request *DescribeFieldByIdRequest, runtime *util.RuntimeOptions) (_result *DescribeFieldByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFieldById"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFieldByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取字段详情
//
// @param request - DescribeFieldByIdRequest
//
// @return DescribeFieldByIdResponse
func (client *Client) DescribeFieldById(request *DescribeFieldByIdRequest) (_result *DescribeFieldByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFieldByIdResponse{}
	_body, _err := client.DescribeFieldByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询字段列表
//
// @param request - DescribeFieldListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFieldListResponse
func (client *Client) DescribeFieldListWithOptions(request *DescribeFieldListRequest, runtime *util.RuntimeOptions) (_result *DescribeFieldListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.Inputs)) {
		query["inputs"] = request.Inputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFieldList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFieldListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询字段列表
//
// @param request - DescribeFieldListRequest
//
// @return DescribeFieldListResponse
func (client *Client) DescribeFieldList(request *DescribeFieldListRequest) (_result *DescribeFieldListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFieldListResponse{}
	_body, _err := client.DescribeFieldListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询字段分页列表
//
// @param request - DescribeFieldPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFieldPageResponse
func (client *Client) DescribeFieldPageWithOptions(request *DescribeFieldPageRequest, runtime *util.RuntimeOptions) (_result *DescribeFieldPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Classify)) {
		query["classify"] = request.Classify
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFieldPage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFieldPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询字段分页列表
//
// @param request - DescribeFieldPageRequest
//
// @return DescribeFieldPageResponse
func (client *Client) DescribeFieldPage(request *DescribeFieldPageRequest) (_result *DescribeFieldPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFieldPageResponse{}
	_body, _err := client.DescribeFieldPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 社群账户列表
//
// @param request - DescribeGroupAccountPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupAccountPageResponse
func (client *Client) DescribeGroupAccountPageWithOptions(request *DescribeGroupAccountPageRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupAccountPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CommunityNo)) {
		query["communityNo"] = request.CommunityNo
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.FieldKey)) {
		query["fieldKey"] = request.FieldKey
	}

	if !tea.BoolValue(util.IsUnset(request.FieldVal)) {
		query["fieldVal"] = request.FieldVal
	}

	if !tea.BoolValue(util.IsUnset(request.IsPage)) {
		query["isPage"] = request.IsPage
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["taskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupAccountPage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupAccountPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 社群账户列表
//
// @param request - DescribeGroupAccountPageRequest
//
// @return DescribeGroupAccountPageResponse
func (client *Client) DescribeGroupAccountPage(request *DescribeGroupAccountPageRequest) (_result *DescribeGroupAccountPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupAccountPageResponse{}
	_body, _err := client.DescribeGroupAccountPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 社群列表查询条件
//
// @param request - DescribeGroupConditionListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupConditionListResponse
func (client *Client) DescribeGroupConditionListWithOptions(request *DescribeGroupConditionListRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupConditionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupConditionList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupConditionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 社群列表查询条件
//
// @param request - DescribeGroupConditionListRequest
//
// @return DescribeGroupConditionListResponse
func (client *Client) DescribeGroupConditionList(request *DescribeGroupConditionListRequest) (_result *DescribeGroupConditionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupConditionListResponse{}
	_body, _err := client.DescribeGroupConditionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 社群列表
//
// @param request - DescribeGroupPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupPageResponse
func (client *Client) DescribeGroupPageWithOptions(request *DescribeGroupPageRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["taskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeType)) {
		query["timeType"] = request.TimeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupPage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 社群列表
//
// @param request - DescribeGroupPageRequest
//
// @return DescribeGroupPageResponse
func (client *Client) DescribeGroupPage(request *DescribeGroupPageRequest) (_result *DescribeGroupPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupPageResponse{}
	_body, _err := client.DescribeGroupPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 当日发现的风险社群
//
// @param request - DescribeGroupStatisticsByTodayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupStatisticsByTodayResponse
func (client *Client) DescribeGroupStatisticsByTodayWithOptions(request *DescribeGroupStatisticsByTodayRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupStatisticsByTodayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupStatisticsByToday"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupStatisticsByTodayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 当日发现的风险社群
//
// @param request - DescribeGroupStatisticsByTodayRequest
//
// @return DescribeGroupStatisticsByTodayResponse
func (client *Client) DescribeGroupStatisticsByToday(request *DescribeGroupStatisticsByTodayRequest) (_result *DescribeGroupStatisticsByTodayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupStatisticsByTodayResponse{}
	_body, _err := client.DescribeGroupStatisticsByTodayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 风险社群的近期趋势
//
// @param request - DescribeGroupTrendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupTrendResponse
func (client *Client) DescribeGroupTrendWithOptions(request *DescribeGroupTrendRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Day)) {
		query["day"] = request.Day
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupTrend"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupTrendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 风险社群的近期趋势
//
// @param request - DescribeGroupTrendRequest
//
// @return DescribeGroupTrendResponse
func (client *Client) DescribeGroupTrend(request *DescribeGroupTrendRequest) (_result *DescribeGroupTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupTrendResponse{}
	_body, _err := client.DescribeGroupTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件名下的策略名是否存在
//
// @param request - DescribeHasRuleNameByEventCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHasRuleNameByEventCodeResponse
func (client *Client) DescribeHasRuleNameByEventCodeWithOptions(request *DescribeHasRuleNameByEventCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeHasRuleNameByEventCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludeRuleId)) {
		query["excludeRuleId"] = request.ExcludeRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHasRuleNameByEventCode"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHasRuleNameByEventCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件名下的策略名是否存在
//
// @param request - DescribeHasRuleNameByEventCodeRequest
//
// @return DescribeHasRuleNameByEventCodeResponse
func (client *Client) DescribeHasRuleNameByEventCode(request *DescribeHasRuleNameByEventCodeRequest) (_result *DescribeHasRuleNameByEventCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHasRuleNameByEventCodeResponse{}
	_body, _err := client.DescribeHasRuleNameByEventCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 风险地图概览图表(饼图)
//
// @param request - DescribeHighRiskPieChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHighRiskPieChartResponse
func (client *Client) DescribeHighRiskPieChartWithOptions(request *DescribeHighRiskPieChartRequest, runtime *util.RuntimeOptions) (_result *DescribeHighRiskPieChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHighRiskPieChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHighRiskPieChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 风险地图概览图表(饼图)
//
// @param request - DescribeHighRiskPieChartRequest
//
// @return DescribeHighRiskPieChartResponse
func (client *Client) DescribeHighRiskPieChart(request *DescribeHighRiskPieChartRequest) (_result *DescribeHighRiskPieChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHighRiskPieChartResponse{}
	_body, _err := client.DescribeHighRiskPieChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 策略命中波动检测
//
// @param request - DescribeHitRuleFluctuationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHitRuleFluctuationResponse
func (client *Client) DescribeHitRuleFluctuationWithOptions(request *DescribeHitRuleFluctuationRequest, runtime *util.RuntimeOptions) (_result *DescribeHitRuleFluctuationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleStatus)) {
		query["ruleStatus"] = request.RuleStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHitRuleFluctuation"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHitRuleFluctuationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 策略命中波动检测
//
// @param request - DescribeHitRuleFluctuationRequest
//
// @return DescribeHitRuleFluctuationResponse
func (client *Client) DescribeHitRuleFluctuation(request *DescribeHitRuleFluctuationRequest) (_result *DescribeHitRuleFluctuationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHitRuleFluctuationResponse{}
	_body, _err := client.DescribeHitRuleFluctuationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 主事件/旁路/分流策略命中TOP20
//
// @param request - DescribeHitRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHitRuleListResponse
func (client *Client) DescribeHitRuleListWithOptions(request *DescribeHitRuleListRequest, runtime *util.RuntimeOptions) (_result *DescribeHitRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["eventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHitRuleList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHitRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 主事件/旁路/分流策略命中TOP20
//
// @param request - DescribeHitRuleListRequest
//
// @return DescribeHitRuleListResponse
func (client *Client) DescribeHitRuleList(request *DescribeHitRuleListRequest) (_result *DescribeHitRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHitRuleListResponse{}
	_body, _err := client.DescribeHitRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 策略命中趋势
//
// @param request - DescribeHitRuleTrendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHitRuleTrendResponse
func (client *Client) DescribeHitRuleTrendWithOptions(request *DescribeHitRuleTrendRequest, runtime *util.RuntimeOptions) (_result *DescribeHitRuleTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleStatus)) {
		query["ruleStatus"] = request.RuleStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHitRuleTrend"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHitRuleTrendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 策略命中趋势
//
// @param request - DescribeHitRuleTrendRequest
//
// @return DescribeHitRuleTrendResponse
func (client *Client) DescribeHitRuleTrend(request *DescribeHitRuleTrendRequest) (_result *DescribeHitRuleTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHitRuleTrendResponse{}
	_body, _err := client.DescribeHitRuleTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件总数量
//
// @param request - DescribeInputFeildCountByEventCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInputFeildCountByEventCodeResponse
func (client *Client) DescribeInputFeildCountByEventCodeWithOptions(request *DescribeInputFeildCountByEventCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeInputFeildCountByEventCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInputFeildCountByEventCode"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInputFeildCountByEventCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件总数量
//
// @param request - DescribeInputFeildCountByEventCodeRequest
//
// @return DescribeInputFeildCountByEventCodeResponse
func (client *Client) DescribeInputFeildCountByEventCode(request *DescribeInputFeildCountByEventCodeRequest) (_result *DescribeInputFeildCountByEventCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInputFeildCountByEventCodeResponse{}
	_body, _err := client.DescribeInputFeildCountByEventCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 任务列表
//
// @param request - DescribeListPocRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeListPocResponse
func (client *Client) DescribeListPocWithOptions(request *DescribeListPocRequest, runtime *util.RuntimeOptions) (_result *DescribeListPocResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeListPoc"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeListPocResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 任务列表
//
// @param request - DescribeListPocRequest
//
// @return DescribeListPocResponse
func (client *Client) DescribeListPoc(request *DescribeListPocRequest) (_result *DescribeListPocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeListPocResponse{}
	_body, _err := client.DescribeListPocWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取监控对象列表
//
// @param request - DescribeLoanExecListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoanExecListResponse
func (client *Client) DescribeLoanExecListWithOptions(request *DescribeLoanExecListRequest, runtime *util.RuntimeOptions) (_result *DescribeLoanExecListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BatchNo)) {
		query["batchNo"] = request.BatchNo
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorObj)) {
		query["monitorObj"] = request.MonitorObj
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorStatus)) {
		query["monitorStatus"] = request.MonitorStatus
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoanExecList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoanExecListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取监控对象列表
//
// @param request - DescribeLoanExecListRequest
//
// @return DescribeLoanExecListResponse
func (client *Client) DescribeLoanExecList(request *DescribeLoanExecListRequest) (_result *DescribeLoanExecListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoanExecListResponse{}
	_body, _err := client.DescribeLoanExecListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取贷中监控任务列表
//
// @param request - DescribeLoanTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoanTaskListResponse
func (client *Client) DescribeLoanTaskListWithOptions(request *DescribeLoanTaskListRequest, runtime *util.RuntimeOptions) (_result *DescribeLoanTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BatchNo)) {
		query["batchNo"] = request.BatchNo
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorStatus)) {
		query["monitorStatus"] = request.MonitorStatus
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoanTaskList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoanTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取贷中监控任务列表
//
// @param request - DescribeLoanTaskListRequest
//
// @return DescribeLoanTaskListResponse
func (client *Client) DescribeLoanTaskList(request *DescribeLoanTaskListRequest) (_result *DescribeLoanTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoanTaskListResponse{}
	_body, _err := client.DescribeLoanTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 打标列表
//
// @param request - DescribeMarkPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMarkPageResponse
func (client *Client) DescribeMarkPageWithOptions(request *DescribeMarkPageRequest, runtime *util.RuntimeOptions) (_result *DescribeMarkPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.IsPage)) {
		query["isPage"] = request.IsPage
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskLogId)) {
		query["taskLogId"] = request.TaskLogId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMarkPage"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMarkPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 打标列表
//
// @param request - DescribeMarkPageRequest
//
// @return DescribeMarkPageResponse
func (client *Client) DescribeMarkPage(request *DescribeMarkPageRequest) (_result *DescribeMarkPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMarkPageResponse{}
	_body, _err := client.DescribeMarkPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询是否有权限
//
// @param request - DescribeMenuPermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMenuPermissionResponse
func (client *Client) DescribeMenuPermissionWithOptions(request *DescribeMenuPermissionRequest, runtime *util.RuntimeOptions) (_result *DescribeMenuPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PermissionType)) {
		query["permissionType"] = request.PermissionType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMenuPermission"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMenuPermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询是否有权限
//
// @param request - DescribeMenuPermissionRequest
//
// @return DescribeMenuPermissionResponse
func (client *Client) DescribeMenuPermission(request *DescribeMenuPermissionRequest) (_result *DescribeMenuPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMenuPermissionResponse{}
	_body, _err := client.DescribeMenuPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询任务的限制
//
// @param request - DescribeMonitorTaskLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorTaskLimitResponse
func (client *Client) DescribeMonitorTaskLimitWithOptions(request *DescribeMonitorTaskLimitRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorTaskLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorTaskLimit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorTaskLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询任务的限制
//
// @param request - DescribeMonitorTaskLimitRequest
//
// @return DescribeMonitorTaskLimitResponse
func (client *Client) DescribeMonitorTaskLimit(request *DescribeMonitorTaskLimitRequest) (_result *DescribeMonitorTaskLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorTaskLimitResponse{}
	_body, _err := client.DescribeMonitorTaskLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询名单分页
//
// @param request - DescribeNameListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNameListResponse
func (client *Client) DescribeNameListWithOptions(request *DescribeNameListRequest, runtime *util.RuntimeOptions) (_result *DescribeNameListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["value"] = request.Value
	}

	if !tea.BoolValue(util.IsUnset(request.VariableId)) {
		query["variableId"] = request.VariableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNameList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNameListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询名单分页
//
// @param request - DescribeNameListRequest
//
// @return DescribeNameListResponse
func (client *Client) DescribeNameList(request *DescribeNameListRequest) (_result *DescribeNameListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNameListResponse{}
	_body, _err := client.DescribeNameListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 下载名单列表
//
// @param request - DescribeNameListDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNameListDownloadUrlResponse
func (client *Client) DescribeNameListDownloadUrlWithOptions(request *DescribeNameListDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeNameListDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.VariableId)) {
		query["variableId"] = request.VariableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNameListDownloadUrl"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNameListDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 下载名单列表
//
// @param request - DescribeNameListDownloadUrlRequest
//
// @return DescribeNameListDownloadUrlResponse
func (client *Client) DescribeNameListDownloadUrl(request *DescribeNameListDownloadUrlRequest) (_result *DescribeNameListDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNameListDownloadUrlResponse{}
	_body, _err := client.DescribeNameListDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询名单限制数
//
// @param request - DescribeNameListLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNameListLimitResponse
func (client *Client) DescribeNameListLimitWithOptions(request *DescribeNameListLimitRequest, runtime *util.RuntimeOptions) (_result *DescribeNameListLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNameListLimit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNameListLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询名单限制数
//
// @param request - DescribeNameListLimitRequest
//
// @return DescribeNameListLimitResponse
func (client *Client) DescribeNameListLimit(request *DescribeNameListLimitRequest) (_result *DescribeNameListLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNameListLimitResponse{}
	_body, _err := client.DescribeNameListLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 名单内容查询
//
// @param request - DescribeNameListPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNameListPageListResponse
func (client *Client) DescribeNameListPageListWithOptions(request *DescribeNameListPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeNameListPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateBeginTime)) {
		query["updateBeginTime"] = request.UpdateBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateEndTime)) {
		query["updateEndTime"] = request.UpdateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["value"] = request.Value
	}

	if !tea.BoolValue(util.IsUnset(request.VariableId)) {
		query["variableId"] = request.VariableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNameListPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNameListPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 名单内容查询
//
// @param request - DescribeNameListPageListRequest
//
// @return DescribeNameListPageListResponse
func (client *Client) DescribeNameListPageList(request *DescribeNameListPageListRequest) (_result *DescribeNameListPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNameListPageListResponse{}
	_body, _err := client.DescribeNameListPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 名单类型列表
//
// @param request - DescribeNameListTypeListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNameListTypeListResponse
func (client *Client) DescribeNameListTypeListWithOptions(request *DescribeNameListTypeListRequest, runtime *util.RuntimeOptions) (_result *DescribeNameListTypeListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNameListTypeList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNameListTypeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 名单类型列表
//
// @param request - DescribeNameListTypeListRequest
//
// @return DescribeNameListTypeListResponse
func (client *Client) DescribeNameListTypeList(request *DescribeNameListTypeListRequest) (_result *DescribeNameListTypeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNameListTypeListResponse{}
	_body, _err := client.DescribeNameListTypeListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 名单列表
//
// @param request - DescribeNameListVariablePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNameListVariablePageListResponse
func (client *Client) DescribeNameListVariablePageListWithOptions(request *DescribeNameListVariablePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeNameListVariablePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NameListType)) {
		query["nameListType"] = request.NameListType
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNameListVariablePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNameListVariablePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 名单列表
//
// @param request - DescribeNameListVariablePageListRequest
//
// @return DescribeNameListVariablePageListResponse
func (client *Client) DescribeNameListVariablePageList(request *DescribeNameListVariablePageListRequest) (_result *DescribeNameListVariablePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNameListVariablePageListResponse{}
	_body, _err := client.DescribeNameListVariablePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据事件名称查询事件列表
//
// @param request - DescribeOperationLogPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOperationLogPageListResponse
func (client *Client) DescribeOperationLogPageListWithOptions(request *DescribeOperationLogPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeOperationLogPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["endDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["startDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOperationLogPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOperationLogPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据事件名称查询事件列表
//
// @param request - DescribeOperationLogPageListRequest
//
// @return DescribeOperationLogPageListResponse
func (client *Client) DescribeOperationLogPageList(request *DescribeOperationLogPageListRequest) (_result *DescribeOperationLogPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOperationLogPageListResponse{}
	_body, _err := client.DescribeOperationLogPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据客户ID查询操作符映射列表
//
// @param request - DescribeOperatorListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOperatorListResponse
func (client *Client) DescribeOperatorListWithOptions(request *DescribeOperatorListRequest, runtime *util.RuntimeOptions) (_result *DescribeOperatorListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOperatorList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOperatorListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据客户ID查询操作符映射列表
//
// @param request - DescribeOperatorListRequest
//
// @return DescribeOperatorListResponse
func (client *Client) DescribeOperatorList(request *DescribeOperatorListRequest) (_result *DescribeOperatorListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOperatorListResponse{}
	_body, _err := client.DescribeOperatorListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询操作符映射列表
//
// @param request - DescribeOperatorListBySceneRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOperatorListBySceneResponse
func (client *Client) DescribeOperatorListBySceneWithOptions(request *DescribeOperatorListBySceneRequest, runtime *util.RuntimeOptions) (_result *DescribeOperatorListBySceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOperatorListByScene"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOperatorListBySceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询操作符映射列表
//
// @param request - DescribeOperatorListBySceneRequest
//
// @return DescribeOperatorListBySceneResponse
func (client *Client) DescribeOperatorListByScene(request *DescribeOperatorListBySceneRequest) (_result *DescribeOperatorListBySceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOperatorListBySceneResponse{}
	_body, _err := client.DescribeOperatorListBySceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询操作符映射列表
//
// @param request - DescribeOperatorListByTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOperatorListByTypeResponse
func (client *Client) DescribeOperatorListByTypeWithOptions(request *DescribeOperatorListByTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeOperatorListByTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOperatorListByType"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOperatorListByTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询操作符映射列表
//
// @param request - DescribeOperatorListByTypeRequest
//
// @return DescribeOperatorListByTypeResponse
func (client *Client) DescribeOperatorListByType(request *DescribeOperatorListByTypeRequest) (_result *DescribeOperatorListByTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOperatorListByTypeResponse{}
	_body, _err := client.DescribeOperatorListByTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查看是否授权Oss
//
// @param request - DescribeOssAuthStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOssAuthStatusResponse
func (client *Client) DescribeOssAuthStatusWithOptions(request *DescribeOssAuthStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeOssAuthStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOssAuthStatus"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOssAuthStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查看是否授权Oss
//
// @param request - DescribeOssAuthStatusRequest
//
// @return DescribeOssAuthStatusResponse
func (client *Client) DescribeOssAuthStatus(request *DescribeOssAuthStatusRequest) (_result *DescribeOssAuthStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssAuthStatusResponse{}
	_body, _err := client.DescribeOssAuthStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取OSS Policy
//
// @param request - DescribeOssPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOssPolicyResponse
func (client *Client) DescribeOssPolicyWithOptions(request *DescribeOssPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeOssPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOssPolicy"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOssPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取OSS Policy
//
// @param request - DescribeOssPolicyRequest
//
// @return DescribeOssPolicyResponse
func (client *Client) DescribeOssPolicy(request *DescribeOssPolicyRequest) (_result *DescribeOssPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssPolicyResponse{}
	_body, _err := client.DescribeOssPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文件上传凭证
//
// @param request - DescribeOssTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOssTokenResponse
func (client *Client) DescribeOssTokenWithOptions(request *DescribeOssTokenRequest, runtime *util.RuntimeOptions) (_result *DescribeOssTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["fileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.UploadType)) {
		query["uploadType"] = request.UploadType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOssToken"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOssTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文件上传凭证
//
// @param request - DescribeOssTokenRequest
//
// @return DescribeOssTokenResponse
func (client *Client) DescribeOssToken(request *DescribeOssTokenRequest) (_result *DescribeOssTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssTokenResponse{}
	_body, _err := client.DescribeOssTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件属性列表
//
// @param request - DescribeParamByEventCodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeParamByEventCodesResponse
func (client *Client) DescribeParamByEventCodesWithOptions(request *DescribeParamByEventCodesRequest, runtime *util.RuntimeOptions) (_result *DescribeParamByEventCodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.Parma)) {
		query["parma"] = request.Parma
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParamByEventCodes"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeParamByEventCodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件属性列表
//
// @param request - DescribeParamByEventCodesRequest
//
// @return DescribeParamByEventCodesResponse
func (client *Client) DescribeParamByEventCodes(request *DescribeParamByEventCodesRequest) (_result *DescribeParamByEventCodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParamByEventCodesResponse{}
	_body, _err := client.DescribeParamByEventCodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取映射关系
//
// @param request - DescribeParamListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeParamListResponse
func (client *Client) DescribeParamListWithOptions(request *DescribeParamListRequest, runtime *util.RuntimeOptions) (_result *DescribeParamListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["fileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCode)) {
		query["serviceCode"] = request.ServiceCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParamList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeParamListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取映射关系
//
// @param request - DescribeParamListRequest
//
// @return DescribeParamListResponse
func (client *Client) DescribeParamList(request *DescribeParamListRequest) (_result *DescribeParamListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParamListResponse{}
	_body, _err := client.DescribeParamListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取任务详情
//
// @param request - DescribePocDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePocDetailResponse
func (client *Client) DescribePocDetailWithOptions(request *DescribePocDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePocDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["taskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePocDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePocDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取任务详情
//
// @param request - DescribePocDetailRequest
//
// @return DescribePocDetailResponse
func (client *Client) DescribePocDetail(request *DescribePocDetailRequest) (_result *DescribePocDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePocDetailResponse{}
	_body, _err := client.DescribePocDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文件上传凭证
//
// @param request - DescribePocOssTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePocOssTokenResponse
func (client *Client) DescribePocOssTokenWithOptions(request *DescribePocOssTokenRequest, runtime *util.RuntimeOptions) (_result *DescribePocOssTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePocOssToken"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePocOssTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文件上传凭证
//
// @param request - DescribePocOssTokenRequest
//
// @return DescribePocOssTokenResponse
func (client *Client) DescribePocOssToken(request *DescribePocOssTokenRequest) (_result *DescribePocOssTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePocOssTokenResponse{}
	_body, _err := client.DescribePocOssTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取poc任务列表
//
// @param request - DescribePocTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePocTaskListResponse
func (client *Client) DescribePocTaskListWithOptions(request *DescribePocTaskListRequest, runtime *util.RuntimeOptions) (_result *DescribePocTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePocTaskList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePocTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取poc任务列表
//
// @param request - DescribePocTaskListRequest
//
// @return DescribePocTaskListResponse
func (client *Client) DescribePocTaskList(request *DescribePocTaskListRequest) (_result *DescribePocTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePocTaskListResponse{}
	_body, _err := client.DescribePocTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 判断是否开通Stack私域模式
//
// @param request - DescribePrivateStackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePrivateStackResponse
func (client *Client) DescribePrivateStackWithOptions(request *DescribePrivateStackRequest, runtime *util.RuntimeOptions) (_result *DescribePrivateStackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrivateStack"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePrivateStackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 判断是否开通Stack私域模式
//
// @param request - DescribePrivateStackRequest
//
// @return DescribePrivateStackResponse
func (client *Client) DescribePrivateStack(request *DescribePrivateStackRequest) (_result *DescribePrivateStackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePrivateStackResponse{}
	_body, _err := client.DescribePrivateStackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量详情查询
//
// @param request - DescribeQueryVariableDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeQueryVariableDetailResponse
func (client *Client) DescribeQueryVariableDetailWithOptions(request *DescribeQueryVariableDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeQueryVariableDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQueryVariableDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQueryVariableDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量详情查询
//
// @param request - DescribeQueryVariableDetailRequest
//
// @return DescribeQueryVariableDetailResponse
func (client *Client) DescribeQueryVariableDetail(request *DescribeQueryVariableDetailRequest) (_result *DescribeQueryVariableDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQueryVariableDetailResponse{}
	_body, _err := client.DescribeQueryVariableDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量列表查询
//
// @param request - DescribeQueryVariablePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeQueryVariablePageListResponse
func (client *Client) DescribeQueryVariablePageListWithOptions(request *DescribeQueryVariablePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeQueryVariablePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceCode)) {
		query["dataSourceCode"] = request.DataSourceCode
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQueryVariablePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQueryVariablePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量列表查询
//
// @param request - DescribeQueryVariablePageListRequest
//
// @return DescribeQueryVariablePageListResponse
func (client *Client) DescribeQueryVariablePageList(request *DescribeQueryVariablePageListRequest) (_result *DescribeQueryVariablePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQueryVariablePageListResponse{}
	_body, _err := client.DescribeQueryVariablePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询样本&场景下的变量列表
//
// @param request - DescribeRecommendSceneVariablesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRecommendSceneVariablesResponse
func (client *Client) DescribeRecommendSceneVariablesWithOptions(request *DescribeRecommendSceneVariablesRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendSceneVariablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleId)) {
		query["sampleId"] = request.SampleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecommendSceneVariables"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecommendSceneVariablesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询样本&场景下的变量列表
//
// @param request - DescribeRecommendSceneVariablesRequest
//
// @return DescribeRecommendSceneVariablesResponse
func (client *Client) DescribeRecommendSceneVariables(request *DescribeRecommendSceneVariablesRequest) (_result *DescribeRecommendSceneVariablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendSceneVariablesResponse{}
	_body, _err := client.DescribeRecommendSceneVariablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 变量推荐详情查询接口
//
// @param request - DescribeRecommendTaskDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRecommendTaskDetailResponse
func (client *Client) DescribeRecommendTaskDetailWithOptions(request *DescribeRecommendTaskDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendTaskDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["taskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecommendTaskDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecommendTaskDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 变量推荐详情查询接口
//
// @param request - DescribeRecommendTaskDetailRequest
//
// @return DescribeRecommendTaskDetailResponse
func (client *Client) DescribeRecommendTaskDetail(request *DescribeRecommendTaskDetailRequest) (_result *DescribeRecommendTaskDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendTaskDetailResponse{}
	_body, _err := client.DescribeRecommendTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 变量推荐列表查询接口
//
// @param request - DescribeRecommendTaskPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRecommendTaskPageListResponse
func (client *Client) DescribeRecommendTaskPageListWithOptions(request *DescribeRecommendTaskPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendTaskPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["taskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecommendTaskPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecommendTaskPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 变量推荐列表查询接口
//
// @param request - DescribeRecommendTaskPageListRequest
//
// @return DescribeRecommendTaskPageListResponse
func (client *Client) DescribeRecommendTaskPageList(request *DescribeRecommendTaskPageListRequest) (_result *DescribeRecommendTaskPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendTaskPageListResponse{}
	_body, _err := client.DescribeRecommendTaskPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量下的指标信息
//
// @param request - DescribeRecommendVariablesVelocityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRecommendVariablesVelocityResponse
func (client *Client) DescribeRecommendVariablesVelocityWithOptions(request *DescribeRecommendVariablesVelocityRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendVariablesVelocityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["taskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.VariableIdsStr)) {
		query["variableIdsStr"] = request.VariableIdsStr
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecommendVariablesVelocity"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecommendVariablesVelocityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量下的指标信息
//
// @param request - DescribeRecommendVariablesVelocityRequest
//
// @return DescribeRecommendVariablesVelocityResponse
func (client *Client) DescribeRecommendVariablesVelocity(request *DescribeRecommendVariablesVelocityRequest) (_result *DescribeRecommendVariablesVelocityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendVariablesVelocityResponse{}
	_body, _err := client.DescribeRecommendVariablesVelocityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询支持的指标列表
//
// @param request - DescribeRecommendVelocitiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRecommendVelocitiesResponse
func (client *Client) DescribeRecommendVelocitiesWithOptions(request *DescribeRecommendVelocitiesRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendVelocitiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Code)) {
		query["code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecommendVelocities"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecommendVelocitiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询支持的指标列表
//
// @param request - DescribeRecommendVelocitiesRequest
//
// @return DescribeRecommendVelocitiesResponse
func (client *Client) DescribeRecommendVelocities(request *DescribeRecommendVelocitiesRequest) (_result *DescribeRecommendVelocitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendVelocitiesResponse{}
	_body, _err := client.DescribeRecommendVelocitiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询ApiGateway支持的region列表
//
// @param request - DescribeRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询ApiGateway支持的region列表
//
// @param request - DescribeRegionsRequest
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询请求命中详情
//
// @param request - DescribeRequestHitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRequestHitResponse
func (client *Client) DescribeRequestHitWithOptions(request *DescribeRequestHitRequest, runtime *util.RuntimeOptions) (_result *DescribeRequestHitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SRequestId)) {
		query["sRequestId"] = request.SRequestId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRequestHit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRequestHitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询请求命中详情
//
// @param request - DescribeRequestHitRequest
//
// @return DescribeRequestHitResponse
func (client *Client) DescribeRequestHit(request *DescribeRequestHitRequest) (_result *DescribeRequestHitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRequestHitResponse{}
	_body, _err := client.DescribeRequestHitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 请求峰值
//
// @param request - DescribeRequestPeakReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRequestPeakReportResponse
func (client *Client) DescribeRequestPeakReportWithOptions(request *DescribeRequestPeakReportRequest, runtime *util.RuntimeOptions) (_result *DescribeRequestPeakReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRequestPeakReport"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRequestPeakReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 请求峰值
//
// @param request - DescribeRequestPeakReportRequest
//
// @return DescribeRequestPeakReportResponse
func (client *Client) DescribeRequestPeakReport(request *DescribeRequestPeakReportRequest) (_result *DescribeRequestPeakReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRequestPeakReportResponse{}
	_body, _err := client.DescribeRequestPeakReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 下钻分析
//
// @param request - DescribeResultCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeResultCountResponse
func (client *Client) DescribeResultCountWithOptions(request *DescribeResultCountRequest, runtime *util.RuntimeOptions) (_result *DescribeResultCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResultCount"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResultCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 下钻分析
//
// @param request - DescribeResultCountRequest
//
// @return DescribeResultCountResponse
func (client *Client) DescribeResultCount(request *DescribeResultCountRequest) (_result *DescribeResultCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResultCountResponse{}
	_body, _err := client.DescribeResultCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 风险地图概览图表(折线图)
//
// @param request - DescribeRiskLineChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRiskLineChartResponse
func (client *Client) DescribeRiskLineChartWithOptions(request *DescribeRiskLineChartRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskLineChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskLineChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskLineChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 风险地图概览图表(折线图)
//
// @param request - DescribeRiskLineChartRequest
//
// @return DescribeRiskLineChartResponse
func (client *Client) DescribeRiskLineChart(request *DescribeRiskLineChartRequest) (_result *DescribeRiskLineChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskLineChartResponse{}
	_body, _err := client.DescribeRiskLineChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 策略概览列表
//
// @param request - DescribeRuleBarChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRuleBarChartResponse
func (client *Client) DescribeRuleBarChartWithOptions(request *DescribeRuleBarChartRequest, runtime *util.RuntimeOptions) (_result *DescribeRuleBarChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRuleBarChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRuleBarChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 策略概览列表
//
// @param request - DescribeRuleBarChartRequest
//
// @return DescribeRuleBarChartResponse
func (client *Client) DescribeRuleBarChart(request *DescribeRuleBarChartRequest) (_result *DescribeRuleBarChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRuleBarChartResponse{}
	_body, _err := client.DescribeRuleBarChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据用户Id查询策略数
//
// @param request - DescribeRuleCountByUserIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRuleCountByUserIdResponse
func (client *Client) DescribeRuleCountByUserIdWithOptions(request *DescribeRuleCountByUserIdRequest, runtime *util.RuntimeOptions) (_result *DescribeRuleCountByUserIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRuleCountByUserId"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRuleCountByUserIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据用户Id查询策略数
//
// @param request - DescribeRuleCountByUserIdRequest
//
// @return DescribeRuleCountByUserIdResponse
func (client *Client) DescribeRuleCountByUserId(request *DescribeRuleCountByUserIdRequest) (_result *DescribeRuleCountByUserIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRuleCountByUserIdResponse{}
	_body, _err := client.DescribeRuleCountByUserIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询策略/版本详情
//
// @param request - DescribeRuleDetailByRuleIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRuleDetailByRuleIdResponse
func (client *Client) DescribeRuleDetailByRuleIdWithOptions(request *DescribeRuleDetailByRuleIdRequest, runtime *util.RuntimeOptions) (_result *DescribeRuleDetailByRuleIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleVersionId)) {
		query["ruleVersionId"] = request.RuleVersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRuleDetailByRuleId"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRuleDetailByRuleIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询策略/版本详情
//
// @param request - DescribeRuleDetailByRuleIdRequest
//
// @return DescribeRuleDetailByRuleIdResponse
func (client *Client) DescribeRuleDetailByRuleId(request *DescribeRuleDetailByRuleIdRequest) (_result *DescribeRuleDetailByRuleIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRuleDetailByRuleIdResponse{}
	_body, _err := client.DescribeRuleDetailByRuleIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询策略命中详情
//
// @param request - DescribeRuleHitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRuleHitResponse
func (client *Client) DescribeRuleHitWithOptions(request *DescribeRuleHitRequest, runtime *util.RuntimeOptions) (_result *DescribeRuleHitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleSnapshotId)) {
		query["ruleSnapshotId"] = request.RuleSnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.SRequestId)) {
		query["sRequestId"] = request.SRequestId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRuleHit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRuleHitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询策略命中详情
//
// @param request - DescribeRuleHitRequest
//
// @return DescribeRuleHitResponse
func (client *Client) DescribeRuleHit(request *DescribeRuleHitRequest) (_result *DescribeRuleHitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRuleHitResponse{}
	_body, _err := client.DescribeRuleHitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询策略列表
//
// @param request - DescribeRuleListByEventCodesListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRuleListByEventCodesListResponse
func (client *Client) DescribeRuleListByEventCodesListWithOptions(request *DescribeRuleListByEventCodesListRequest, runtime *util.RuntimeOptions) (_result *DescribeRuleListByEventCodesListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRuleListByEventCodesList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRuleListByEventCodesListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询策略列表
//
// @param request - DescribeRuleListByEventCodesListRequest
//
// @return DescribeRuleListByEventCodesListResponse
func (client *Client) DescribeRuleListByEventCodesList(request *DescribeRuleListByEventCodesListRequest) (_result *DescribeRuleListByEventCodesListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRuleListByEventCodesListResponse{}
	_body, _err := client.DescribeRuleListByEventCodesListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询策略列表
//
// @param request - DescribeRulePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRulePageListResponse
func (client *Client) DescribeRulePageListWithOptions(request *DescribeRulePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeRulePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleAuthType)) {
		query["ruleAuthType"] = request.RuleAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleStatus)) {
		query["ruleStatus"] = request.RuleStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRulePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRulePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询策略列表
//
// @param request - DescribeRulePageListRequest
//
// @return DescribeRulePageListResponse
func (client *Client) DescribeRulePageList(request *DescribeRulePageListRequest) (_result *DescribeRulePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRulePageListResponse{}
	_body, _err := client.DescribeRulePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据ruleId+version查询历史快照
//
// @param request - DescribeRuleSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRuleSnapshotResponse
func (client *Client) DescribeRuleSnapshotWithOptions(request *DescribeRuleSnapshotRequest, runtime *util.RuntimeOptions) (_result *DescribeRuleSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotVersion)) {
		query["snapshotVersion"] = request.SnapshotVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRuleSnapshot"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRuleSnapshotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据ruleId+version查询历史快照
//
// @param request - DescribeRuleSnapshotRequest
//
// @return DescribeRuleSnapshotResponse
func (client *Client) DescribeRuleSnapshot(request *DescribeRuleSnapshotRequest) (_result *DescribeRuleSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRuleSnapshotResponse{}
	_body, _err := client.DescribeRuleSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询策略版本列表
//
// @param request - DescribeRuleVersionListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRuleVersionListResponse
func (client *Client) DescribeRuleVersionListWithOptions(request *DescribeRuleVersionListRequest, runtime *util.RuntimeOptions) (_result *DescribeRuleVersionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRuleVersionList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRuleVersionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询策略版本列表
//
// @param request - DescribeRuleVersionListRequest
//
// @return DescribeRuleVersionListResponse
func (client *Client) DescribeRuleVersionList(request *DescribeRuleVersionListRequest) (_result *DescribeRuleVersionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRuleVersionListResponse{}
	_body, _err := client.DescribeRuleVersionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取老旧版本sdk下载列表
//
// @param request - DescribeSDKDownloadListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSDKDownloadListResponse
func (client *Client) DescribeSDKDownloadListWithOptions(request *DescribeSDKDownloadListRequest, runtime *util.RuntimeOptions) (_result *DescribeSDKDownloadListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		query["deviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.ListType)) {
		query["listType"] = request.ListType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSDKDownloadList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSDKDownloadListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取老旧版本sdk下载列表
//
// @param request - DescribeSDKDownloadListRequest
//
// @return DescribeSDKDownloadListResponse
func (client *Client) DescribeSDKDownloadList(request *DescribeSDKDownloadListRequest) (_result *DescribeSDKDownloadListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSDKDownloadListResponse{}
	_body, _err := client.DescribeSDKDownloadListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSafConsoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSafConsoleResponse
func (client *Client) DescribeSafConsoleWithOptions(request *DescribeSafConsoleRequest, runtime *util.RuntimeOptions) (_result *DescribeSafConsoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		query["service"] = request.Service
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSafConsole"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSafConsoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSafConsoleRequest
//
// @return DescribeSafConsoleResponse
func (client *Client) DescribeSafConsole(request *DescribeSafConsoleRequest) (_result *DescribeSafConsoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSafConsoleResponse{}
	_body, _err := client.DescribeSafConsoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询saf_de订单
//
// @param request - DescribeSafDeOrderRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSafDeOrderResponse
func (client *Client) DescribeSafDeOrderWithOptions(request *DescribeSafDeOrderRequest, runtime *util.RuntimeOptions) (_result *DescribeSafDeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["endDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["startDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSafDeOrder"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSafDeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询saf_de订单
//
// @param request - DescribeSafDeOrderRequest
//
// @return DescribeSafDeOrderResponse
func (client *Client) DescribeSafDeOrder(request *DescribeSafDeOrderRequest) (_result *DescribeSafDeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSafDeOrderResponse{}
	_body, _err := client.DescribeSafDeOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询订单信息
//
// @param request - DescribeSafOrderRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSafOrderResponse
func (client *Client) DescribeSafOrderWithOptions(request *DescribeSafOrderRequest, runtime *util.RuntimeOptions) (_result *DescribeSafOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["endDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.ExactProductCode)) {
		query["exactProductCode"] = request.ExactProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["startDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSafOrder"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSafOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询订单信息
//
// @param request - DescribeSafOrderRequest
//
// @return DescribeSafOrderResponse
func (client *Client) DescribeSafOrder(request *DescribeSafOrderRequest) (_result *DescribeSafOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSafOrderResponse{}
	_body, _err := client.DescribeSafOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询接入配置
//
// @param request - DescribeSafStartConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSafStartConfigResponse
func (client *Client) DescribeSafStartConfigWithOptions(request *DescribeSafStartConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeSafStartConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSafStartConfig"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSafStartConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询接入配置
//
// @param request - DescribeSafStartConfigRequest
//
// @return DescribeSafStartConfigResponse
func (client *Client) DescribeSafStartConfig(request *DescribeSafStartConfigRequest) (_result *DescribeSafStartConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSafStartConfigResponse{}
	_body, _err := client.DescribeSafStartConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询接入配置
//
// @param request - DescribeSafStartStepsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSafStartStepsResponse
func (client *Client) DescribeSafStartStepsWithOptions(request *DescribeSafStartStepsRequest, runtime *util.RuntimeOptions) (_result *DescribeSafStartStepsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunServer)) {
		query["aliyunServer"] = request.AliyunServer
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceTypesStr)) {
		query["deviceTypesStr"] = request.DeviceTypesStr
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ServerRegion)) {
		query["serverRegion"] = request.ServerRegion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSafStartSteps"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSafStartStepsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询接入配置
//
// @param request - DescribeSafStartStepsRequest
//
// @return DescribeSafStartStepsResponse
func (client *Client) DescribeSafStartSteps(request *DescribeSafStartStepsRequest) (_result *DescribeSafStartStepsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSafStartStepsResponse{}
	_body, _err := client.DescribeSafStartStepsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取风险标签列表
//
// @param request - DescribeSafTagListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSafTagListResponse
func (client *Client) DescribeSafTagListWithOptions(request *DescribeSafTagListRequest, runtime *util.RuntimeOptions) (_result *DescribeSafTagListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["apiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSafTagList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSafTagListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取风险标签列表
//
// @param request - DescribeSafTagListRequest
//
// @return DescribeSafTagListResponse
func (client *Client) DescribeSafTagList(request *DescribeSafTagListRequest) (_result *DescribeSafTagListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSafTagListResponse{}
	_body, _err := client.DescribeSafTagListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 样本列表分页查询
//
// @param request - DescribeSampleDataListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleDataListResponse
func (client *Client) DescribeSampleDataListWithOptions(request *DescribeSampleDataListRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleDataListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteTag)) {
		query["deleteTag"] = request.DeleteTag
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryContent)) {
		query["queryContent"] = request.QueryContent
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleId)) {
		query["sampleId"] = request.SampleId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleDataList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleDataListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 样本列表分页查询
//
// @param request - DescribeSampleDataListRequest
//
// @return DescribeSampleDataListResponse
func (client *Client) DescribeSampleDataList(request *DescribeSampleDataListRequest) (_result *DescribeSampleDataListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleDataListResponse{}
	_body, _err := client.DescribeSampleDataListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询样本示例授权
//
// @param request - DescribeSampleDemoDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleDemoDownloadUrlResponse
func (client *Client) DescribeSampleDemoDownloadUrlWithOptions(request *DescribeSampleDemoDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleDemoDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleDemoDownloadUrl"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleDemoDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询样本示例授权
//
// @param request - DescribeSampleDemoDownloadUrlRequest
//
// @return DescribeSampleDemoDownloadUrlResponse
func (client *Client) DescribeSampleDemoDownloadUrl(request *DescribeSampleDemoDownloadUrlRequest) (_result *DescribeSampleDemoDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleDemoDownloadUrlResponse{}
	_body, _err := client.DescribeSampleDemoDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询样本下载授权信息
//
// @param request - DescribeSampleDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleDownloadUrlResponse
func (client *Client) DescribeSampleDownloadUrlWithOptions(request *DescribeSampleDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleId)) {
		query["sampleId"] = request.SampleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleDownloadUrl"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询样本下载授权信息
//
// @param request - DescribeSampleDownloadUrlRequest
//
// @return DescribeSampleDownloadUrlResponse
func (client *Client) DescribeSampleDownloadUrl(request *DescribeSampleDownloadUrlRequest) (_result *DescribeSampleDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleDownloadUrlResponse{}
	_body, _err := client.DescribeSampleDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询样本详情
//
// @param request - DescribeSampleInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleInfoResponse
func (client *Client) DescribeSampleInfoWithOptions(request *DescribeSampleInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Versions)) {
		query["versions"] = request.Versions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleInfo"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询样本详情
//
// @param request - DescribeSampleInfoRequest
//
// @return DescribeSampleInfoResponse
func (client *Client) DescribeSampleInfo(request *DescribeSampleInfoRequest) (_result *DescribeSampleInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleInfoResponse{}
	_body, _err := client.DescribeSampleInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询样本列表
//
// @param request - DescribeSampleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleListResponse
func (client *Client) DescribeSampleListWithOptions(request *DescribeSampleListRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleType)) {
		query["sampleType"] = request.SampleType
	}

	if !tea.BoolValue(util.IsUnset(request.SampleValue)) {
		query["sampleValue"] = request.SampleValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询样本列表
//
// @param request - DescribeSampleListRequest
//
// @return DescribeSampleListResponse
func (client *Client) DescribeSampleList(request *DescribeSampleListRequest) (_result *DescribeSampleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleListResponse{}
	_body, _err := client.DescribeSampleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询场景列表
//
// @param request - DescribeSampleSceneListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleSceneListResponse
func (client *Client) DescribeSampleSceneListWithOptions(request *DescribeSampleSceneListRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleSceneListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleSceneList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleSceneListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询场景列表
//
// @param request - DescribeSampleSceneListRequest
//
// @return DescribeSampleSceneListResponse
func (client *Client) DescribeSampleSceneList(request *DescribeSampleSceneListRequest) (_result *DescribeSampleSceneListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleSceneListResponse{}
	_body, _err := client.DescribeSampleSceneListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取标签列表
//
// @param request - DescribeSampleTagListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleTagListResponse
func (client *Client) DescribeSampleTagListWithOptions(request *DescribeSampleTagListRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleTagListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleTagList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleTagListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取标签列表
//
// @param request - DescribeSampleTagListRequest
//
// @return DescribeSampleTagListResponse
func (client *Client) DescribeSampleTagList(request *DescribeSampleTagListRequest) (_result *DescribeSampleTagListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleTagListResponse{}
	_body, _err := client.DescribeSampleTagListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询样本上传授权信息
//
// @param request - DescribeSampleUploadPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleUploadPolicyResponse
func (client *Client) DescribeSampleUploadPolicyWithOptions(request *DescribeSampleUploadPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleUploadPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleUploadPolicy"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleUploadPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询样本上传授权信息
//
// @param request - DescribeSampleUploadPolicyRequest
//
// @return DescribeSampleUploadPolicyResponse
func (client *Client) DescribeSampleUploadPolicy(request *DescribeSampleUploadPolicyRequest) (_result *DescribeSampleUploadPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleUploadPolicyResponse{}
	_body, _err := client.DescribeSampleUploadPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 场景化服务事件下拉列表
//
// @param request - DescribeSceneAllEventNameCodeListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSceneAllEventNameCodeListResponse
func (client *Client) DescribeSceneAllEventNameCodeListWithOptions(request *DescribeSceneAllEventNameCodeListRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneAllEventNameCodeListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneAllEventNameCodeList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneAllEventNameCodeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 场景化服务事件下拉列表
//
// @param request - DescribeSceneAllEventNameCodeListRequest
//
// @return DescribeSceneAllEventNameCodeListResponse
func (client *Client) DescribeSceneAllEventNameCodeList(request *DescribeSceneAllEventNameCodeListRequest) (_result *DescribeSceneAllEventNameCodeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneAllEventNameCodeListResponse{}
	_body, _err := client.DescribeSceneAllEventNameCodeListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 场景化风控事件列表
//
// @param request - DescribeSceneEventPageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSceneEventPageListResponse
func (client *Client) DescribeSceneEventPageListWithOptions(request *DescribeSceneEventPageListRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneEventPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.NameOrCode)) {
		query["nameOrCode"] = request.NameOrCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneEventPageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneEventPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 场景化风控事件列表
//
// @param request - DescribeSceneEventPageListRequest
//
// @return DescribeSceneEventPageListResponse
func (client *Client) DescribeSceneEventPageList(request *DescribeSceneEventPageListRequest) (_result *DescribeSceneEventPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneEventPageListResponse{}
	_body, _err := client.DescribeSceneEventPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 风控服务白盒化策略列表
//
// @param request - DescribeSceneRulePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSceneRulePageListResponse
func (client *Client) DescribeSceneRulePageListWithOptions(request *DescribeSceneRulePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneRulePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleAuthType)) {
		query["ruleAuthType"] = request.RuleAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleStatus)) {
		query["ruleStatus"] = request.RuleStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneRulePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneRulePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 风控服务白盒化策略列表
//
// @param request - DescribeSceneRulePageListRequest
//
// @return DescribeSceneRulePageListResponse
func (client *Client) DescribeSceneRulePageList(request *DescribeSceneRulePageListRequest) (_result *DescribeSceneRulePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneRulePageListResponse{}
	_body, _err := client.DescribeSceneRulePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 分值区间数量分析
//
// @param request - DescribeScoreSectionNumLineChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeScoreSectionNumLineChartResponse
func (client *Client) DescribeScoreSectionNumLineChartWithOptions(request *DescribeScoreSectionNumLineChartRequest, runtime *util.RuntimeOptions) (_result *DescribeScoreSectionNumLineChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ByPassEventCodes)) {
		query["byPassEventCodes"] = request.ByPassEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MainEventCodes)) {
		query["mainEventCodes"] = request.MainEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ShuntEventCodes)) {
		query["shuntEventCodes"] = request.ShuntEventCodes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScoreSectionNumLineChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScoreSectionNumLineChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 分值区间数量分析
//
// @param request - DescribeScoreSectionNumLineChartRequest
//
// @return DescribeScoreSectionNumLineChartResponse
func (client *Client) DescribeScoreSectionNumLineChart(request *DescribeScoreSectionNumLineChartRequest) (_result *DescribeScoreSectionNumLineChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScoreSectionNumLineChartResponse{}
	_body, _err := client.DescribeScoreSectionNumLineChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 主事件/旁路事件/分流事件分值区间占比
//
// @param request - DescribeScoreSectionPieChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeScoreSectionPieChartResponse
func (client *Client) DescribeScoreSectionPieChartWithOptions(request *DescribeScoreSectionPieChartRequest, runtime *util.RuntimeOptions) (_result *DescribeScoreSectionPieChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["eventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScoreSectionPieChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScoreSectionPieChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 主事件/旁路事件/分流事件分值区间占比
//
// @param request - DescribeScoreSectionPieChartRequest
//
// @return DescribeScoreSectionPieChartResponse
func (client *Client) DescribeScoreSectionPieChart(request *DescribeScoreSectionPieChartRequest) (_result *DescribeScoreSectionPieChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScoreSectionPieChartResponse{}
	_body, _err := client.DescribeScoreSectionPieChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 分值区间占比分析
//
// @param request - DescribeScoreSectionRatioLineChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeScoreSectionRatioLineChartResponse
func (client *Client) DescribeScoreSectionRatioLineChartWithOptions(request *DescribeScoreSectionRatioLineChartRequest, runtime *util.RuntimeOptions) (_result *DescribeScoreSectionRatioLineChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ByPassEventCodes)) {
		query["byPassEventCodes"] = request.ByPassEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MainEventCodes)) {
		query["mainEventCodes"] = request.MainEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ShuntEventCodes)) {
		query["shuntEventCodes"] = request.ShuntEventCodes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScoreSectionRatioLineChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScoreSectionRatioLineChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 分值区间占比分析
//
// @param request - DescribeScoreSectionRatioLineChartRequest
//
// @return DescribeScoreSectionRatioLineChartResponse
func (client *Client) DescribeScoreSectionRatioLineChart(request *DescribeScoreSectionRatioLineChartRequest) (_result *DescribeScoreSectionRatioLineChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScoreSectionRatioLineChartResponse{}
	_body, _err := client.DescribeScoreSectionRatioLineChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询任务ID列表
//
// @param request - DescribeSelectItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSelectItemResponse
func (client *Client) DescribeSelectItemWithOptions(request *DescribeSelectItemRequest, runtime *util.RuntimeOptions) (_result *DescribeSelectItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSelectItem"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSelectItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询任务ID列表
//
// @param request - DescribeSelectItemRequest
//
// @return DescribeSelectItemResponse
func (client *Client) DescribeSelectItem(request *DescribeSelectItemRequest) (_result *DescribeSelectItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSelectItemResponse{}
	_body, _err := client.DescribeSelectItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ServiceAppkey下拉
//
// @param request - DescribeServiceAppKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServiceAppKeyResponse
func (client *Client) DescribeServiceAppKeyWithOptions(request *DescribeServiceAppKeyRequest, runtime *util.RuntimeOptions) (_result *DescribeServiceAppKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServiceAppKey"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeServiceAppKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ServiceAppkey下拉
//
// @param request - DescribeServiceAppKeyRequest
//
// @return DescribeServiceAppKeyResponse
func (client *Client) DescribeServiceAppKey(request *DescribeServiceAppKeyRequest) (_result *DescribeServiceAppKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServiceAppKeyResponse{}
	_body, _err := client.DescribeServiceAppKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取服务调用量
//
// @param request - DescribeServiceConsumeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServiceConsumeResponse
func (client *Client) DescribeServiceConsumeWithOptions(request *DescribeServiceConsumeRequest, runtime *util.RuntimeOptions) (_result *DescribeServiceConsumeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["endDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCode)) {
		query["serviceCode"] = request.ServiceCode
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["startDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServiceConsume"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeServiceConsumeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取服务调用量
//
// @param request - DescribeServiceConsumeRequest
//
// @return DescribeServiceConsumeResponse
func (client *Client) DescribeServiceConsume(request *DescribeServiceConsumeRequest) (_result *DescribeServiceConsumeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServiceConsumeResponse{}
	_body, _err := client.DescribeServiceConsumeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 下载服务调用量数据文件URL
//
// @param request - DescribeServiceConsumeDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServiceConsumeDownloadUrlResponse
func (client *Client) DescribeServiceConsumeDownloadUrlWithOptions(request *DescribeServiceConsumeDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeServiceConsumeDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["endDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCode)) {
		query["serviceCode"] = request.ServiceCode
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["startDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServiceConsumeDownloadUrl"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeServiceConsumeDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 下载服务调用量数据文件URL
//
// @param request - DescribeServiceConsumeDownloadUrlRequest
//
// @return DescribeServiceConsumeDownloadUrlResponse
func (client *Client) DescribeServiceConsumeDownloadUrl(request *DescribeServiceConsumeDownloadUrlRequest) (_result *DescribeServiceConsumeDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServiceConsumeDownloadUrlResponse{}
	_body, _err := client.DescribeServiceConsumeDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取服务列表
//
// @param request - DescribeServiceListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServiceListResponse
func (client *Client) DescribeServiceListWithOptions(request *DescribeServiceListRequest, runtime *util.RuntimeOptions) (_result *DescribeServiceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServiceList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeServiceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取服务列表
//
// @param request - DescribeServiceListRequest
//
// @return DescribeServiceListResponse
func (client *Client) DescribeServiceList(request *DescribeServiceListRequest) (_result *DescribeServiceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServiceListResponse{}
	_body, _err := client.DescribeServiceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 预估调用信息
//
// @param request - DescribeSimulationPreditInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSimulationPreditInfoResponse
func (client *Client) DescribeSimulationPreditInfoWithOptions(request *DescribeSimulationPreditInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeSimulationPreditInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RulesStr)) {
		query["rulesStr"] = request.RulesStr
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSimulationPreditInfo"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSimulationPreditInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 预估调用信息
//
// @param request - DescribeSimulationPreditInfoRequest
//
// @return DescribeSimulationPreditInfoResponse
func (client *Client) DescribeSimulationPreditInfo(request *DescribeSimulationPreditInfoRequest) (_result *DescribeSimulationPreditInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSimulationPreditInfoResponse{}
	_body, _err := client.DescribeSimulationPreditInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询任务记录数
//
// @param request - DescribeSimulationTaskCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSimulationTaskCountResponse
func (client *Client) DescribeSimulationTaskCountWithOptions(request *DescribeSimulationTaskCountRequest, runtime *util.RuntimeOptions) (_result *DescribeSimulationTaskCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceConfig)) {
		query["dataSourceConfig"] = request.DataSourceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["dataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.FiltersStr)) {
		query["filtersStr"] = request.FiltersStr
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSimulationTaskCount"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSimulationTaskCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询任务记录数
//
// @param request - DescribeSimulationTaskCountRequest
//
// @return DescribeSimulationTaskCountResponse
func (client *Client) DescribeSimulationTaskCount(request *DescribeSimulationTaskCountRequest) (_result *DescribeSimulationTaskCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSimulationTaskCountResponse{}
	_body, _err := client.DescribeSimulationTaskCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 任务列表
//
// @param request - DescribeSimulationTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSimulationTaskListResponse
func (client *Client) DescribeSimulationTaskListWithOptions(request *DescribeSimulationTaskListRequest, runtime *util.RuntimeOptions) (_result *DescribeSimulationTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSimulationTaskList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSimulationTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 任务列表
//
// @param request - DescribeSimulationTaskListRequest
//
// @return DescribeSimulationTaskListResponse
func (client *Client) DescribeSimulationTaskList(request *DescribeSimulationTaskListRequest) (_result *DescribeSimulationTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSimulationTaskListResponse{}
	_body, _err := client.DescribeSimulationTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取project配置
//
// @param request - DescribeSlsUrlConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSlsUrlConfigResponse
func (client *Client) DescribeSlsUrlConfigWithOptions(request *DescribeSlsUrlConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeSlsUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSlsUrlConfig"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSlsUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取project配置
//
// @param request - DescribeSlsUrlConfigRequest
//
// @return DescribeSlsUrlConfigResponse
func (client *Client) DescribeSlsUrlConfig(request *DescribeSlsUrlConfigRequest) (_result *DescribeSlsUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlsUrlConfigResponse{}
	_body, _err := client.DescribeSlsUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询支持仿真的策略列表
//
// @param request - DescribeSupportRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSupportRuleListResponse
func (client *Client) DescribeSupportRuleListWithOptions(request *DescribeSupportRuleListRequest, runtime *util.RuntimeOptions) (_result *DescribeSupportRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSupportRuleList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSupportRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询支持仿真的策略列表
//
// @param request - DescribeSupportRuleListRequest
//
// @return DescribeSupportRuleListResponse
func (client *Client) DescribeSupportRuleList(request *DescribeSupportRuleListRequest) (_result *DescribeSupportRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSupportRuleListResponse{}
	_body, _err := client.DescribeSupportRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 标签列表
//
// @param request - DescribeTagListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagListResponse
func (client *Client) DescribeTagListWithOptions(request *DescribeTagListRequest, runtime *util.RuntimeOptions) (_result *DescribeTagListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 标签列表
//
// @param request - DescribeTagListRequest
//
// @return DescribeTagListResponse
func (client *Client) DescribeTagList(request *DescribeTagListRequest) (_result *DescribeTagListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagListResponse{}
	_body, _err := client.DescribeTagListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 标签概览列表
//
// @param request - DescribeTagsBarChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsBarChartResponse
func (client *Client) DescribeTagsBarChartWithOptions(request *DescribeTagsBarChartRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsBarChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Result)) {
		query["result"] = request.Result
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagsBarChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagsBarChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 标签概览列表
//
// @param request - DescribeTagsBarChartRequest
//
// @return DescribeTagsBarChartResponse
func (client *Client) DescribeTagsBarChart(request *DescribeTagsBarChartRequest) (_result *DescribeTagsBarChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsBarChartResponse{}
	_body, _err := client.DescribeTagsBarChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 标签波动检测
//
// @param request - DescribeTagsFluctuationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsFluctuationResponse
func (client *Client) DescribeTagsFluctuationWithOptions(request *DescribeTagsFluctuationRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsFluctuationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagsFluctuation"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagsFluctuationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 标签波动检测
//
// @param request - DescribeTagsFluctuationRequest
//
// @return DescribeTagsFluctuationResponse
func (client *Client) DescribeTagsFluctuation(request *DescribeTagsFluctuationRequest) (_result *DescribeTagsFluctuationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsFluctuationResponse{}
	_body, _err := client.DescribeTagsFluctuationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取标签列表
//
// @param request - DescribeTagsListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsListResponse
func (client *Client) DescribeTagsListWithOptions(request *DescribeTagsListRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagsList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagsListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取标签列表
//
// @param request - DescribeTagsListRequest
//
// @return DescribeTagsListResponse
func (client *Client) DescribeTagsList(request *DescribeTagsListRequest) (_result *DescribeTagsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsListResponse{}
	_body, _err := client.DescribeTagsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 标签命中数量分析
//
// @param request - DescribeTagsNumLineChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsNumLineChartResponse
func (client *Client) DescribeTagsNumLineChartWithOptions(request *DescribeTagsNumLineChartRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsNumLineChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ByPassEventCodes)) {
		query["byPassEventCodes"] = request.ByPassEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MainEventCodes)) {
		query["mainEventCodes"] = request.MainEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ShuntEventCodes)) {
		query["shuntEventCodes"] = request.ShuntEventCodes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagsNumLineChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagsNumLineChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 标签命中数量分析
//
// @param request - DescribeTagsNumLineChartRequest
//
// @return DescribeTagsNumLineChartResponse
func (client *Client) DescribeTagsNumLineChart(request *DescribeTagsNumLineChartRequest) (_result *DescribeTagsNumLineChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsNumLineChartResponse{}
	_body, _err := client.DescribeTagsNumLineChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 标签命中占比分析
//
// @param request - DescribeTagsRatioLineChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsRatioLineChartResponse
func (client *Client) DescribeTagsRatioLineChartWithOptions(request *DescribeTagsRatioLineChartRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsRatioLineChartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ByPassEventCodes)) {
		query["byPassEventCodes"] = request.ByPassEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MainEventCodes)) {
		query["mainEventCodes"] = request.MainEventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ShuntEventCodes)) {
		query["shuntEventCodes"] = request.ShuntEventCodes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagsRatioLineChart"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagsRatioLineChartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 标签命中占比分析
//
// @param request - DescribeTagsRatioLineChartRequest
//
// @return DescribeTagsRatioLineChartResponse
func (client *Client) DescribeTagsRatioLineChart(request *DescribeTagsRatioLineChartRequest) (_result *DescribeTagsRatioLineChartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsRatioLineChartResponse{}
	_body, _err := client.DescribeTagsRatioLineChartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 标签命中趋势
//
// @param request - DescribeTagsTrendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsTrendResponse
func (client *Client) DescribeTagsTrendWithOptions(request *DescribeTagsTrendRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["beginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Result)) {
		query["result"] = request.Result
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagsTrend"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagsTrendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 标签命中趋势
//
// @param request - DescribeTagsTrendRequest
//
// @return DescribeTagsTrendResponse
func (client *Client) DescribeTagsTrend(request *DescribeTagsTrendRequest) (_result *DescribeTagsTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsTrendResponse{}
	_body, _err := client.DescribeTagsTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 任务列表
//
// @param request - DescribeTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTaskListResponse
func (client *Client) DescribeTaskListWithOptions(request *DescribeTaskListRequest, runtime *util.RuntimeOptions) (_result *DescribeTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.IsPage)) {
		query["IsPage"] = request.IsPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTaskList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 任务列表
//
// @param request - DescribeTaskListRequest
//
// @return DescribeTaskListResponse
func (client *Client) DescribeTaskList(request *DescribeTaskListRequest) (_result *DescribeTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTaskListResponse{}
	_body, _err := client.DescribeTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 任务日志列表
//
// @param request - DescribeTaskLogListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTaskLogListResponse
func (client *Client) DescribeTaskLogListWithOptions(request *DescribeTaskLogListRequest, runtime *util.RuntimeOptions) (_result *DescribeTaskLogListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.IsPage)) {
		query["IsPage"] = request.IsPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskLogId)) {
		query["TaskLogId"] = request.TaskLogId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTaskLogList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTaskLogListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 任务日志列表
//
// @param request - DescribeTaskLogListRequest
//
// @return DescribeTaskLogListResponse
func (client *Client) DescribeTaskLogList(request *DescribeTaskLogListRequest) (_result *DescribeTaskLogListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTaskLogListResponse{}
	_body, _err := client.DescribeTaskLogListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件模版详情
//
// @param request - DescribeTemplateBaseInfoByTemplateIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTemplateBaseInfoByTemplateIdResponse
func (client *Client) DescribeTemplateBaseInfoByTemplateIdWithOptions(request *DescribeTemplateBaseInfoByTemplateIdRequest, runtime *util.RuntimeOptions) (_result *DescribeTemplateBaseInfoByTemplateIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["templateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTemplateBaseInfoByTemplateId"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTemplateBaseInfoByTemplateIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件模版详情
//
// @param request - DescribeTemplateBaseInfoByTemplateIdRequest
//
// @return DescribeTemplateBaseInfoByTemplateIdResponse
func (client *Client) DescribeTemplateBaseInfoByTemplateId(request *DescribeTemplateBaseInfoByTemplateIdRequest) (_result *DescribeTemplateBaseInfoByTemplateIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTemplateBaseInfoByTemplateIdResponse{}
	_body, _err := client.DescribeTemplateBaseInfoByTemplateIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询事件总数量
//
// @param request - DescribeTemplateCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTemplateCountResponse
func (client *Client) DescribeTemplateCountWithOptions(request *DescribeTemplateCountRequest, runtime *util.RuntimeOptions) (_result *DescribeTemplateCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTemplateCount"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTemplateCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询事件总数量
//
// @param request - DescribeTemplateCountRequest
//
// @return DescribeTemplateCountResponse
func (client *Client) DescribeTemplateCount(request *DescribeTemplateCountRequest) (_result *DescribeTemplateCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTemplateCountResponse{}
	_body, _err := client.DescribeTemplateCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 模版下载
//
// @param request - DescribeTemplateDownloadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTemplateDownloadResponse
func (client *Client) DescribeTemplateDownloadWithOptions(request *DescribeTemplateDownloadRequest, runtime *util.RuntimeOptions) (_result *DescribeTemplateDownloadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTemplateDownload"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTemplateDownloadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 模版下载
//
// @param request - DescribeTemplateDownloadRequest
//
// @return DescribeTemplateDownloadResponse
func (client *Client) DescribeTemplateDownload(request *DescribeTemplateDownloadRequest) (_result *DescribeTemplateDownloadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTemplateDownloadResponse{}
	_body, _err := client.DescribeTemplateDownloadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据事件名称查询事件列表
//
// @param request - DescribeTemplatePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTemplatePageListResponse
func (client *Client) DescribeTemplatePageListWithOptions(request *DescribeTemplatePageListRequest, runtime *util.RuntimeOptions) (_result *DescribeTemplatePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["templateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateSearchItem)) {
		query["templateSearchItem"] = request.TemplateSearchItem
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateStatus)) {
		query["templateStatus"] = request.TemplateStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["templateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTemplatePageList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTemplatePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据事件名称查询事件列表
//
// @param request - DescribeTemplatePageListRequest
//
// @return DescribeTemplatePageListResponse
func (client *Client) DescribeTemplatePageList(request *DescribeTemplatePageListRequest) (_result *DescribeTemplatePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTemplatePageListResponse{}
	_body, _err := client.DescribeTemplatePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户使用过服务列表
//
// @param request - DescribeUsedServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUsedServiceResponse
func (client *Client) DescribeUsedServiceWithOptions(request *DescribeUsedServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeUsedServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUsedService"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUsedServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户使用过服务列表
//
// @param request - DescribeUsedServiceRequest
//
// @return DescribeUsedServiceResponse
func (client *Client) DescribeUsedService(request *DescribeUsedServiceRequest) (_result *DescribeUsedServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUsedServiceResponse{}
	_body, _err := client.DescribeUsedServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取当前登录用户信息
//
// @param request - DescribeUserInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserInfoResponse
func (client *Client) DescribeUserInfoWithOptions(request *DescribeUserInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeUserInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserInfo"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取当前登录用户信息
//
// @param request - DescribeUserInfoRequest
//
// @return DescribeUserInfoResponse
func (client *Client) DescribeUserInfo(request *DescribeUserInfoRequest) (_result *DescribeUserInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserInfoResponse{}
	_body, _err := client.DescribeUserInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量绑定信息
//
// @param request - DescribeVariableBindDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVariableBindDetailResponse
func (client *Client) DescribeVariableBindDetailWithOptions(request *DescribeVariableBindDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeVariableBindDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DefineId)) {
		query["defineId"] = request.DefineId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVariableBindDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVariableBindDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量绑定信息
//
// @param request - DescribeVariableBindDetailRequest
//
// @return DescribeVariableBindDetailResponse
func (client *Client) DescribeVariableBindDetail(request *DescribeVariableBindDetailRequest) (_result *DescribeVariableBindDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVariableBindDetailResponse{}
	_body, _err := client.DescribeVariableBindDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量详情
//
// @param request - DescribeVariableDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVariableDetailResponse
func (client *Client) DescribeVariableDetailWithOptions(request *DescribeVariableDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeVariableDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVariableDetail"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVariableDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量详情
//
// @param request - DescribeVariableDetailRequest
//
// @return DescribeVariableDetailResponse
func (client *Client) DescribeVariableDetail(request *DescribeVariableDetailRequest) (_result *DescribeVariableDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVariableDetailResponse{}
	_body, _err := client.DescribeVariableDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量收费信息
//
// @param request - DescribeVariableFeeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVariableFeeResponse
func (client *Client) DescribeVariableFeeWithOptions(request *DescribeVariableFeeRequest, runtime *util.RuntimeOptions) (_result *DescribeVariableFeeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVariableFee"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVariableFeeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量收费信息
//
// @param request - DescribeVariableFeeRequest
//
// @return DescribeVariableFeeResponse
func (client *Client) DescribeVariableFee(request *DescribeVariableFeeRequest) (_result *DescribeVariableFeeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVariableFeeResponse{}
	_body, _err := client.DescribeVariableFeeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量详情
//
// @param request - DescribeVariableListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVariableListResponse
func (client *Client) DescribeVariableListWithOptions(request *DescribeVariableListRequest, runtime *util.RuntimeOptions) (_result *DescribeVariableListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RefObjId)) {
		query["refObjId"] = request.RefObjId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["sourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.TypesStr)) {
		query["typesStr"] = request.TypesStr
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVariableList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVariableListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量详情
//
// @param request - DescribeVariableListRequest
//
// @return DescribeVariableListResponse
func (client *Client) DescribeVariableList(request *DescribeVariableListRequest) (_result *DescribeVariableListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVariableListResponse{}
	_body, _err := client.DescribeVariableListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量定义
//
// @param request - DescribeVariableMarketListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVariableMarketListResponse
func (client *Client) DescribeVariableMarketListWithOptions(request *DescribeVariableMarketListRequest, runtime *util.RuntimeOptions) (_result *DescribeVariableMarketListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ChargingMode)) {
		query["chargingMode"] = request.ChargingMode
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Paging)) {
		query["paging"] = request.Paging
	}

	if !tea.BoolValue(util.IsUnset(request.QueryContent)) {
		query["queryContent"] = request.QueryContent
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenesStr)) {
		query["scenesStr"] = request.ScenesStr
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVariableMarketList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVariableMarketListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量定义
//
// @param request - DescribeVariableMarketListRequest
//
// @return DescribeVariableMarketListResponse
func (client *Client) DescribeVariableMarketList(request *DescribeVariableMarketListRequest) (_result *DescribeVariableMarketListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVariableMarketListResponse{}
	_body, _err := client.DescribeVariableMarketListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询配置信息
//
// @param request - DescribeVariableSceneListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVariableSceneListResponse
func (client *Client) DescribeVariableSceneListWithOptions(request *DescribeVariableSceneListRequest, runtime *util.RuntimeOptions) (_result *DescribeVariableSceneListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["bizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigKey)) {
		query["configKey"] = request.ConfigKey
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["currentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Paging)) {
		query["paging"] = request.Paging
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVariableSceneList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVariableSceneListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询配置信息
//
// @param request - DescribeVariableSceneListRequest
//
// @return DescribeVariableSceneListResponse
func (client *Client) DescribeVariableSceneList(request *DescribeVariableSceneListRequest) (_result *DescribeVariableSceneListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVariableSceneListResponse{}
	_body, _err := client.DescribeVariableSceneListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义变量测试
//
// @param request - ExpressionTestRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExpressionTestResponse
func (client *Client) ExpressionTestWithOptions(request *ExpressionTestRequest, runtime *util.RuntimeOptions) (_result *ExpressionTestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionVariable)) {
		query["expressionVariable"] = request.ExpressionVariable
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionVariableIds)) {
		query["expressionVariableIds"] = request.ExpressionVariableIds
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExpressionTest"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExpressionTestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义变量测试
//
// @param request - ExpressionTestRequest
//
// @return ExpressionTestResponse
func (client *Client) ExpressionTest(request *ExpressionTestRequest) (_result *ExpressionTestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExpressionTestResponse{}
	_body, _err := client.ExpressionTestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文件上传
//
// @param request - FileUploadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FileUploadResponse
func (client *Client) FileUploadWithOptions(request *FileUploadRequest, runtime *util.RuntimeOptions) (_result *FileUploadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Tab)) {
		query["Tab"] = request.Tab
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FileUpload"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FileUploadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文件上传
//
// @param request - FileUploadRequest
//
// @return FileUploadResponse
func (client *Client) FileUpload(request *FileUploadRequest) (_result *FileUploadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FileUploadResponse{}
	_body, _err := client.FileUploadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建或导入名单
//
// @param request - ImportNameListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportNameListResponse
func (client *Client) ImportNameListWithOptions(request *ImportNameListRequest, runtime *util.RuntimeOptions) (_result *ImportNameListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ImportType)) {
		query["importType"] = request.ImportType
	}

	if !tea.BoolValue(util.IsUnset(request.NameListType)) {
		query["nameListType"] = request.NameListType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.VariableId)) {
		query["variableId"] = request.VariableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportNameList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportNameListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建或导入名单
//
// @param request - ImportNameListRequest
//
// @return ImportNameListResponse
func (client *Client) ImportNameList(request *ImportNameListRequest) (_result *ImportNameListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportNameListResponse{}
	_body, _err := client.ImportNameListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导入模板事件
//
// @param request - ImportTemplateEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportTemplateEventResponse
func (client *Client) ImportTemplateEventWithOptions(request *ImportTemplateEventRequest, runtime *util.RuntimeOptions) (_result *ImportTemplateEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventTemplateIds)) {
		query["eventTemplateIds"] = request.EventTemplateIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportTemplateEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportTemplateEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导入模板事件
//
// @param request - ImportTemplateEventRequest
//
// @return ImportTemplateEventResponse
func (client *Client) ImportTemplateEvent(request *ImportTemplateEventRequest) (_result *ImportTemplateEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportTemplateEventResponse{}
	_body, _err := client.ImportTemplateEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新备注
//
// @param request - ModifyAppKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAppKeyResponse
func (client *Client) ModifyAppKeyWithOptions(request *ModifyAppKeyRequest, runtime *util.RuntimeOptions) (_result *ModifyAppKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["appKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAppKey"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAppKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新备注
//
// @param request - ModifyAppKeyRequest
//
// @return ModifyAppKeyResponse
func (client *Client) ModifyAppKey(request *ModifyAppKeyRequest) (_result *ModifyAppKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAppKeyResponse{}
	_body, _err := client.ModifyAppKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑累计变量
//
// @param request - ModifyCustVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCustVariableResponse
func (client *Client) ModifyCustVariableWithOptions(request *ModifyCustVariableRequest, runtime *util.RuntimeOptions) (_result *ModifyCustVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersion)) {
		query["dataVersion"] = request.DataVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCodes)) {
		query["eventCodes"] = request.EventCodes
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCustVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCustVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑累计变量
//
// @param request - ModifyCustVariableRequest
//
// @return ModifyCustVariableResponse
func (client *Client) ModifyCustVariable(request *ModifyCustVariableRequest) (_result *ModifyCustVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCustVariableResponse{}
	_body, _err := client.ModifyCustVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑事件
//
// @param request - ModifyEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyEventResponse
func (client *Client) ModifyEventWithOptions(request *ModifyEventRequest, runtime *util.RuntimeOptions) (_result *ModifyEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BizVersion)) {
		query["bizVersion"] = request.BizVersion
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.InputFieldsStr)) {
		query["inputFieldsStr"] = request.InputFieldsStr
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["templateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑事件
//
// @param request - ModifyEventRequest
//
// @return ModifyEventResponse
func (client *Client) ModifyEvent(request *ModifyEventRequest) (_result *ModifyEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEventResponse{}
	_body, _err := client.ModifyEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改事件状态
//
// @param request - ModifyEventStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyEventStatusResponse
func (client *Client) ModifyEventStatusWithOptions(request *ModifyEventStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyEventStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.FromEventSatus)) {
		query["fromEventSatus"] = request.FromEventSatus
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ToEventSatus)) {
		query["toEventSatus"] = request.ToEventSatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEventStatus"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEventStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改事件状态
//
// @param request - ModifyEventStatusRequest
//
// @return ModifyEventStatusResponse
func (client *Client) ModifyEventStatus(request *ModifyEventStatusRequest) (_result *ModifyEventStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEventStatusResponse{}
	_body, _err := client.ModifyEventStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑自定义变量
//
// @param request - ModifyExpressionVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyExpressionVariableResponse
func (client *Client) ModifyExpressionVariableWithOptions(request *ModifyExpressionVariableRequest, runtime *util.RuntimeOptions) (_result *ModifyExpressionVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersion)) {
		query["dataVersion"] = request.DataVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionTitle)) {
		query["expressionTitle"] = request.ExpressionTitle
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionVariable)) {
		query["expressionVariable"] = request.ExpressionVariable
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Outlier)) {
		query["outlier"] = request.Outlier
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyExpressionVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyExpressionVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑自定义变量
//
// @param request - ModifyExpressionVariableRequest
//
// @return ModifyExpressionVariableResponse
func (client *Client) ModifyExpressionVariable(request *ModifyExpressionVariableRequest) (_result *ModifyExpressionVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyExpressionVariableResponse{}
	_body, _err := client.ModifyExpressionVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改字段
//
// @param request - ModifyFieldRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyFieldResponse
func (client *Client) ModifyFieldWithOptions(request *ModifyFieldRequest, runtime *util.RuntimeOptions) (_result *ModifyFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Classify)) {
		query["classify"] = request.Classify
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnumData)) {
		query["enumData"] = request.EnumData
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyField"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改字段
//
// @param request - ModifyFieldRequest
//
// @return ModifyFieldResponse
func (client *Client) ModifyField(request *ModifyFieldRequest) (_result *ModifyFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFieldResponse{}
	_body, _err := client.ModifyFieldWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改poc任务
//
// @param request - ModifyPocTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPocTaskResponse
func (client *Client) ModifyPocTaskWithOptions(request *ModifyPocTaskRequest, runtime *util.RuntimeOptions) (_result *ModifyPocTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.AccessType)) {
		query["accessType"] = request.AccessType
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["fileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["fileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["fileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCode)) {
		query["serviceCode"] = request.ServiceCode
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["serviceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["taskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["taskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPocTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPocTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改poc任务
//
// @param request - ModifyPocTaskRequest
//
// @return ModifyPocTaskResponse
func (client *Client) ModifyPocTask(request *ModifyPocTaskRequest) (_result *ModifyPocTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPocTaskResponse{}
	_body, _err := client.ModifyPocTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 策略修改优先级
//
// @param request - ModifyRulePriorityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyRulePriorityResponse
func (client *Client) ModifyRulePriorityWithOptions(request *ModifyRulePriorityRequest, runtime *util.RuntimeOptions) (_result *ModifyRulePriorityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRulePriority"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyRulePriorityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 策略修改优先级
//
// @param request - ModifyRulePriorityRequest
//
// @return ModifyRulePriorityResponse
func (client *Client) ModifyRulePriority(request *ModifyRulePriorityRequest) (_result *ModifyRulePriorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRulePriorityResponse{}
	_body, _err := client.ModifyRulePriorityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 策略版本申请状态变更
//
// @param request - ModifyRuleStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyRuleStatusResponse
func (client *Client) ModifyRuleStatusWithOptions(request *ModifyRuleStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyRuleStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyUserId)) {
		query["applyUserId"] = request.ApplyUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyUserName)) {
		query["applyUserName"] = request.ApplyUserName
	}

	if !tea.BoolValue(util.IsUnset(request.AuditRemark)) {
		query["auditRemark"] = request.AuditRemark
	}

	if !tea.BoolValue(util.IsUnset(request.AuditUserId)) {
		query["auditUserId"] = request.AuditUserId
	}

	if !tea.BoolValue(util.IsUnset(request.AuditUserName)) {
		query["auditUserName"] = request.AuditUserName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["eventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleAuditType)) {
		query["ruleAuditType"] = request.RuleAuditType
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleVersionId)) {
		query["ruleVersionId"] = request.RuleVersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRuleStatus"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyRuleStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 策略版本申请状态变更
//
// @param request - ModifyRuleStatusRequest
//
// @return ModifyRuleStatusResponse
func (client *Client) ModifyRuleStatus(request *ModifyRuleStatusRequest) (_result *ModifyRuleStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRuleStatusResponse{}
	_body, _err := client.ModifyRuleStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改模版
//
// @param request - ModifyTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyTemplateResponse
func (client *Client) ModifyTemplateWithOptions(request *ModifyTemplateRequest, runtime *util.RuntimeOptions) (_result *ModifyTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.InputFields)) {
		query["inputFields"] = request.InputFields
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["templateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["templateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTemplate"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改模版
//
// @param request - ModifyTemplateRequest
//
// @return ModifyTemplateResponse
func (client *Client) ModifyTemplate(request *ModifyTemplateRequest) (_result *ModifyTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTemplateResponse{}
	_body, _err := client.ModifyTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新模版状态
//
// @param request - ModifyTemplateStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyTemplateStatusResponse
func (client *Client) ModifyTemplateStatusWithOptions(request *ModifyTemplateStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyTemplateStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.FromTemplateSatus)) {
		query["fromTemplateSatus"] = request.FromTemplateSatus
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["templateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.ToTemplateSatus)) {
		query["toTemplateSatus"] = request.ToTemplateSatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTemplateStatus"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTemplateStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新模版状态
//
// @param request - ModifyTemplateStatusRequest
//
// @return ModifyTemplateStatusResponse
func (client *Client) ModifyTemplateStatus(request *ModifyTemplateStatusRequest) (_result *ModifyTemplateStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTemplateStatusResponse{}
	_body, _err := client.ModifyTemplateStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改变量信息
//
// @param request - ModifyVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVariableResponse
func (client *Client) ModifyVariableWithOptions(request *ModifyVariableRequest, runtime *util.RuntimeOptions) (_result *ModifyVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改变量信息
//
// @param request - ModifyVariableRequest
//
// @return ModifyVariableResponse
func (client *Client) ModifyVariable(request *ModifyVariableRequest) (_result *ModifyVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVariableResponse{}
	_body, _err := client.ModifyVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开通服务
//
// @param request - OpenConsoleSlsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenConsoleSlsResponse
func (client *Client) OpenConsoleSlsWithOptions(request *OpenConsoleSlsRequest, runtime *util.RuntimeOptions) (_result *OpenConsoleSlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenConsoleSls"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenConsoleSlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开通服务
//
// @param request - OpenConsoleSlsRequest
//
// @return OpenConsoleSlsResponse
func (client *Client) OpenConsoleSls(request *OpenConsoleSlsRequest) (_result *OpenConsoleSlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenConsoleSlsResponse{}
	_body, _err := client.OpenConsoleSlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 操作收藏
//
// @param request - OperateFavoriteVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateFavoriteVariableResponse
func (client *Client) OperateFavoriteVariableWithOptions(request *OperateFavoriteVariableRequest, runtime *util.RuntimeOptions) (_result *OperateFavoriteVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Operate)) {
		query["operate"] = request.Operate
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateFavoriteVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateFavoriteVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 操作收藏
//
// @param request - OperateFavoriteVariableRequest
//
// @return OperateFavoriteVariableResponse
func (client *Client) OperateFavoriteVariable(request *OperateFavoriteVariableRequest) (_result *OperateFavoriteVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateFavoriteVariableResponse{}
	_body, _err := client.OperateFavoriteVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 企业认证
//
// @param request - PermissionCheckRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PermissionCheckResponse
func (client *Client) PermissionCheckWithOptions(request *PermissionCheckRequest, runtime *util.RuntimeOptions) (_result *PermissionCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PermissionCheck"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PermissionCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 企业认证
//
// @param request - PermissionCheckRequest
//
// @return PermissionCheckResponse
func (client *Client) PermissionCheck(request *PermissionCheckRequest) (_result *PermissionCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PermissionCheckResponse{}
	_body, _err := client.PermissionCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 白盒化策略详情查询
//
// @param request - QueryAuthRuleDetailByRuleIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAuthRuleDetailByRuleIdResponse
func (client *Client) QueryAuthRuleDetailByRuleIdWithOptions(request *QueryAuthRuleDetailByRuleIdRequest, runtime *util.RuntimeOptions) (_result *QueryAuthRuleDetailByRuleIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleVersionId)) {
		query["ruleVersionId"] = request.RuleVersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAuthRuleDetailByRuleId"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAuthRuleDetailByRuleIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 白盒化策略详情查询
//
// @param request - QueryAuthRuleDetailByRuleIdRequest
//
// @return QueryAuthRuleDetailByRuleIdResponse
func (client *Client) QueryAuthRuleDetailByRuleId(request *QueryAuthRuleDetailByRuleIdRequest) (_result *QueryAuthRuleDetailByRuleIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAuthRuleDetailByRuleIdResponse{}
	_body, _err := client.QueryAuthRuleDetailByRuleIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取授权用户名
//
// @param request - QueryAuthUserNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAuthUserNameResponse
func (client *Client) QueryAuthUserNameWithOptions(request *QueryAuthUserNameRequest, runtime *util.RuntimeOptions) (_result *QueryAuthUserNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.BindId)) {
		query["bindId"] = request.BindId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAuthUserName"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAuthUserNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取授权用户名
//
// @param request - QueryAuthUserNameRequest
//
// @return QueryAuthUserNameResponse
func (client *Client) QueryAuthUserName(request *QueryAuthUserNameRequest) (_result *QueryAuthUserNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAuthUserNameResponse{}
	_body, _err := client.QueryAuthUserNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 事件模版授权用户列表
//
// @param request - QueryAuthorizationUserListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAuthorizationUserListResponse
func (client *Client) QueryAuthorizationUserListWithOptions(request *QueryAuthorizationUserListRequest, runtime *util.RuntimeOptions) (_result *QueryAuthorizationUserListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAuthorizationUserList"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAuthorizationUserListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 事件模版授权用户列表
//
// @param request - QueryAuthorizationUserListRequest
//
// @return QueryAuthorizationUserListResponse
func (client *Client) QueryAuthorizationUserList(request *QueryAuthorizationUserListRequest) (_result *QueryAuthorizationUserListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAuthorizationUserListResponse{}
	_body, _err := client.QueryAuthorizationUserListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 撤回
//
// @param request - RecallRuleAuditRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RecallRuleAuditResponse
func (client *Client) RecallRuleAuditWithOptions(request *RecallRuleAuditRequest, runtime *util.RuntimeOptions) (_result *RecallRuleAuditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RecallRuleAudit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RecallRuleAuditResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 撤回
//
// @param request - RecallRuleAuditRequest
//
// @return RecallRuleAuditResponse
func (client *Client) RecallRuleAudit(request *RecallRuleAuditRequest) (_result *RecallRuleAuditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecallRuleAuditResponse{}
	_body, _err := client.RecallRuleAuditWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除事件
//
// @param request - RemoveEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveEventResponse
func (client *Client) RemoveEventWithOptions(request *RemoveEventRequest, runtime *util.RuntimeOptions) (_result *RemoveEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["createType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["templateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除事件
//
// @param request - RemoveEventRequest
//
// @return RemoveEventResponse
func (client *Client) RemoveEvent(request *RemoveEventRequest) (_result *RemoveEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveEventResponse{}
	_body, _err := client.RemoveEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除模版事件
//
// @param request - RemoveTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveTemplateResponse
func (client *Client) RemoveTemplateWithOptions(request *RemoveTemplateRequest, runtime *util.RuntimeOptions) (_result *RemoveTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["templateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveTemplate"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除模版事件
//
// @param request - RemoveTemplateRequest
//
// @return RemoveTemplateResponse
func (client *Client) RemoveTemplate(request *RemoveTemplateRequest) (_result *RemoveTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTemplateResponse{}
	_body, _err := client.RemoveTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 模板下载
//
// @param request - SampleFileDownloadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SampleFileDownloadResponse
func (client *Client) SampleFileDownloadWithOptions(request *SampleFileDownloadRequest, runtime *util.RuntimeOptions) (_result *SampleFileDownloadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Tab)) {
		query["Tab"] = request.Tab
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SampleFileDownload"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SampleFileDownloadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 模板下载
//
// @param request - SampleFileDownloadRequest
//
// @return SampleFileDownloadResponse
func (client *Client) SampleFileDownload(request *SampleFileDownloadRequest) (_result *SampleFileDownloadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SampleFileDownloadResponse{}
	_body, _err := client.SampleFileDownloadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 保存自定义列
//
// @param request - SaveAnalysisColumnRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveAnalysisColumnResponse
func (client *Client) SaveAnalysisColumnWithOptions(request *SaveAnalysisColumnRequest, runtime *util.RuntimeOptions) (_result *SaveAnalysisColumnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Columns)) {
		query["columns"] = request.Columns
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveAnalysisColumn"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveAnalysisColumnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 保存自定义列
//
// @param request - SaveAnalysisColumnRequest
//
// @return SaveAnalysisColumnResponse
func (client *Client) SaveAnalysisColumn(request *SaveAnalysisColumnRequest) (_result *SaveAnalysisColumnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveAnalysisColumnResponse{}
	_body, _err := client.SaveAnalysisColumnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 旁路/分流配置
//
// @param request - SaveByPassOrShuntEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveByPassOrShuntEventResponse
func (client *Client) SaveByPassOrShuntEventWithOptions(request *SaveByPassOrShuntEventRequest, runtime *util.RuntimeOptions) (_result *SaveByPassOrShuntEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["eventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["eventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["eventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveByPassOrShuntEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveByPassOrShuntEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 旁路/分流配置
//
// @param request - SaveByPassOrShuntEventRequest
//
// @return SaveByPassOrShuntEventResponse
func (client *Client) SaveByPassOrShuntEvent(request *SaveByPassOrShuntEventRequest) (_result *SaveByPassOrShuntEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveByPassOrShuntEventResponse{}
	_body, _err := client.SaveByPassOrShuntEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开启/停止旁路事件
//
// @param request - StartOrStopByPassShuntEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartOrStopByPassShuntEventResponse
func (client *Client) StartOrStopByPassShuntEventWithOptions(request *StartOrStopByPassShuntEventRequest, runtime *util.RuntimeOptions) (_result *StartOrStopByPassShuntEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["eventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartOrStopByPassShuntEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartOrStopByPassShuntEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开启/停止旁路事件
//
// @param request - StartOrStopByPassShuntEventRequest
//
// @return StartOrStopByPassShuntEventResponse
func (client *Client) StartOrStopByPassShuntEvent(request *StartOrStopByPassShuntEventRequest) (_result *StartOrStopByPassShuntEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartOrStopByPassShuntEventResponse{}
	_body, _err := client.StartOrStopByPassShuntEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开始执行任务
//
// @param request - StartSimulationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartSimulationTaskResponse
func (client *Client) StartSimulationTaskWithOptions(request *StartSimulationTaskRequest, runtime *util.RuntimeOptions) (_result *StartSimulationTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartSimulationTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartSimulationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开始执行任务
//
// @param request - StartSimulationTaskRequest
//
// @return StartSimulationTaskResponse
func (client *Client) StartSimulationTask(request *StartSimulationTaskRequest) (_result *StartSimulationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartSimulationTaskResponse{}
	_body, _err := client.StartSimulationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 停止任务
//
// @param request - StopSimulationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopSimulationTaskResponse
func (client *Client) StopSimulationTaskWithOptions(request *StopSimulationTaskRequest, runtime *util.RuntimeOptions) (_result *StopSimulationTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopSimulationTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopSimulationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 停止任务
//
// @param request - StopSimulationTaskRequest
//
// @return StopSimulationTaskResponse
func (client *Client) StopSimulationTask(request *StopSimulationTaskRequest) (_result *StopSimulationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopSimulationTaskResponse{}
	_body, _err := client.StopSimulationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量创建策略
//
// @param request - SubmitImportTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitImportTaskResponse
func (client *Client) SubmitImportTaskWithOptions(request *SubmitImportTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitImportTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["fileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitImportTask"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitImportTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量创建策略
//
// @param request - SubmitImportTaskRequest
//
// @return SubmitImportTaskResponse
func (client *Client) SubmitImportTask(request *SubmitImportTaskRequest) (_result *SubmitImportTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitImportTaskResponse{}
	_body, _err := client.SubmitImportTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义变量开关
//
// @param request - SwitchExpressionVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchExpressionVariableResponse
func (client *Client) SwitchExpressionVariableWithOptions(request *SwitchExpressionVariableRequest, runtime *util.RuntimeOptions) (_result *SwitchExpressionVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersion)) {
		query["dataVersion"] = request.DataVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchExpressionVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchExpressionVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义变量开关
//
// @param request - SwitchExpressionVariableRequest
//
// @return SwitchExpressionVariableResponse
func (client *Client) SwitchExpressionVariable(request *SwitchExpressionVariableRequest) (_result *SwitchExpressionVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchExpressionVariableResponse{}
	_body, _err := client.SwitchExpressionVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 字段开关
//
// @param request - SwitchFieldRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchFieldResponse
func (client *Client) SwitchFieldWithOptions(request *SwitchFieldRequest, runtime *util.RuntimeOptions) (_result *SwitchFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchField"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 字段开关
//
// @param request - SwitchFieldRequest
//
// @return SwitchFieldResponse
func (client *Client) SwitchField(request *SwitchFieldRequest) (_result *SwitchFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchFieldResponse{}
	_body, _err := client.SwitchFieldWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变量启用/禁用
//
// @param request - SwitchQueryVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchQueryVariableResponse
func (client *Client) SwitchQueryVariableWithOptions(request *SwitchQueryVariableRequest, runtime *util.RuntimeOptions) (_result *SwitchQueryVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchQueryVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchQueryVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变量启用/禁用
//
// @param request - SwitchQueryVariableRequest
//
// @return SwitchQueryVariableResponse
func (client *Client) SwitchQueryVariable(request *SwitchQueryVariableRequest) (_result *SwitchQueryVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchQueryVariableResponse{}
	_body, _err := client.SwitchQueryVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 一键切换上线
//
// @param request - SwitchToOnlineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchToOnlineResponse
func (client *Client) SwitchToOnlineWithOptions(request *SwitchToOnlineRequest, runtime *util.RuntimeOptions) (_result *SwitchToOnlineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["eventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchToOnline"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchToOnlineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 一键切换上线
//
// @param request - SwitchToOnlineRequest
//
// @return SwitchToOnlineResponse
func (client *Client) SwitchToOnline(request *SwitchToOnlineRequest) (_result *SwitchToOnlineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchToOnlineResponse{}
	_body, _err := client.SwitchToOnlineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 累计变量开关
//
// @param request - SwitchVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchVariableResponse
func (client *Client) SwitchVariableWithOptions(request *SwitchVariableRequest, runtime *util.RuntimeOptions) (_result *SwitchVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersion)) {
		query["dataVersion"] = request.DataVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 累计变量开关
//
// @param request - SwitchVariableRequest
//
// @return SwitchVariableResponse
func (client *Client) SwitchVariable(request *SwitchVariableRequest) (_result *SwitchVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchVariableResponse{}
	_body, _err := client.SwitchVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 判断任务名是否重复
//
// @param request - TaskNameByUserIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TaskNameByUserIdResponse
func (client *Client) TaskNameByUserIdWithOptions(request *TaskNameByUserIdRequest, runtime *util.RuntimeOptions) (_result *TaskNameByUserIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["RegId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TaskNameByUserId"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TaskNameByUserIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 判断任务名是否重复
//
// @param request - TaskNameByUserIdRequest
//
// @return TaskNameByUserIdResponse
func (client *Client) TaskNameByUserId(request *TaskNameByUserIdRequest) (_result *TaskNameByUserIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TaskNameByUserIdResponse{}
	_body, _err := client.TaskNameByUserIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改查询条件
//
// @param request - UpdateAnalysisConditionFavoriteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAnalysisConditionFavoriteResponse
func (client *Client) UpdateAnalysisConditionFavoriteWithOptions(request *UpdateAnalysisConditionFavoriteRequest, runtime *util.RuntimeOptions) (_result *UpdateAnalysisConditionFavoriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.EventBeginTime)) {
		query["eventBeginTime"] = request.EventBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.EventEndTime)) {
		query["eventEndTime"] = request.EventEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["fieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["fieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAnalysisConditionFavorite"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAnalysisConditionFavoriteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改查询条件
//
// @param request - UpdateAnalysisConditionFavoriteRequest
//
// @return UpdateAnalysisConditionFavoriteResponse
func (client *Client) UpdateAnalysisConditionFavorite(request *UpdateAnalysisConditionFavoriteRequest) (_result *UpdateAnalysisConditionFavoriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAnalysisConditionFavoriteResponse{}
	_body, _err := client.UpdateAnalysisConditionFavoriteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 审批
//
// @param request - UpdateAuditRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAuditResponse
func (client *Client) UpdateAuditWithOptions(request *UpdateAuditRequest, runtime *util.RuntimeOptions) (_result *UpdateAuditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.AuditMsg)) {
		query["auditMsg"] = request.AuditMsg
	}

	if !tea.BoolValue(util.IsUnset(request.AuditRelationType)) {
		query["auditRelationType"] = request.AuditRelationType
	}

	if !tea.BoolValue(util.IsUnset(request.AuditStatus)) {
		query["auditStatus"] = request.AuditStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAudit"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAuditResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 审批
//
// @param request - UpdateAuditRequest
//
// @return UpdateAuditResponse
func (client *Client) UpdateAudit(request *UpdateAuditRequest) (_result *UpdateAuditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAuditResponse{}
	_body, _err := client.UpdateAuditWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改授权策略
//
// @param request - UpdateAuthRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAuthRuleResponse
func (client *Client) UpdateAuthRuleWithOptions(request *UpdateAuthRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateAuthRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleActions)) {
		query["ruleActions"] = request.RuleActions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleExpressions)) {
		query["ruleExpressions"] = request.RuleExpressions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleVersionId)) {
		query["ruleVersionId"] = request.RuleVersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAuthRule"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAuthRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改授权策略
//
// @param request - UpdateAuthRuleRequest
//
// @return UpdateAuthRuleResponse
func (client *Client) UpdateAuthRule(request *UpdateAuthRuleRequest) (_result *UpdateAuthRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAuthRuleResponse{}
	_body, _err := client.UpdateAuthRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑旁路事件
//
// @param request - UpdateByPassShuntEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateByPassShuntEventResponse
func (client *Client) UpdateByPassShuntEventWithOptions(request *UpdateByPassShuntEventRequest, runtime *util.RuntimeOptions) (_result *UpdateByPassShuntEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["eventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["eventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateByPassShuntEvent"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateByPassShuntEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑旁路事件
//
// @param request - UpdateByPassShuntEventRequest
//
// @return UpdateByPassShuntEventResponse
func (client *Client) UpdateByPassShuntEvent(request *UpdateByPassShuntEventRequest) (_result *UpdateByPassShuntEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateByPassShuntEventResponse{}
	_body, _err := client.UpdateByPassShuntEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改数据源
//
// @param request - UpdateDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDataSourceResponse
func (client *Client) UpdateDataSourceWithOptions(request *UpdateDataSourceRequest, runtime *util.RuntimeOptions) (_result *UpdateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["ossKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataSource"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改数据源
//
// @param request - UpdateDataSourceRequest
//
// @return UpdateDataSourceResponse
func (client *Client) UpdateDataSource(request *UpdateDataSourceRequest) (_result *UpdateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.UpdateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义查询变量修改
//
// @param request - UpdateQueryVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateQueryVariableResponse
func (client *Client) UpdateQueryVariableWithOptions(request *UpdateQueryVariableRequest, runtime *util.RuntimeOptions) (_result *UpdateQueryVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceCode)) {
		query["dataSourceCode"] = request.DataSourceCode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionTitle)) {
		query["expressionTitle"] = request.ExpressionTitle
	}

	if !tea.BoolValue(util.IsUnset(request.ExpressionVariable)) {
		query["expressionVariable"] = request.ExpressionVariable
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Outlier)) {
		query["outlier"] = request.Outlier
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateQueryVariable"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateQueryVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义查询变量修改
//
// @param request - UpdateQueryVariableRequest
//
// @return UpdateQueryVariableResponse
func (client *Client) UpdateQueryVariable(request *UpdateQueryVariableRequest) (_result *UpdateQueryVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateQueryVariableResponse{}
	_body, _err := client.UpdateQueryVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新策略
//
// @param request - UpdateRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRuleResponse
func (client *Client) UpdateRuleWithOptions(request *UpdateRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.LogicExpression)) {
		query["logicExpression"] = request.LogicExpression
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleActions)) {
		query["ruleActions"] = request.RuleActions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleExpressions)) {
		query["ruleExpressions"] = request.RuleExpressions
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleStatus)) {
		query["ruleStatus"] = request.RuleStatus
	}

	if !tea.BoolValue(util.IsUnset(request.RuleVersionId)) {
		query["ruleVersionId"] = request.RuleVersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRule"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新策略
//
// @param request - UpdateRuleRequest
//
// @return UpdateRuleResponse
func (client *Client) UpdateRule(request *UpdateRuleRequest) (_result *UpdateRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRuleResponse{}
	_body, _err := client.UpdateRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新策略基础信息
//
// @param request - UpdateRuleBaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRuleBaseResponse
func (client *Client) UpdateRuleBaseWithOptions(request *UpdateRuleBaseRequest, runtime *util.RuntimeOptions) (_result *UpdateRuleBaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleRuleId)) {
		query["consoleRuleId"] = request.ConsoleRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.EventCode)) {
		query["eventCode"] = request.EventCode
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["ruleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["ruleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRuleBase"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRuleBaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新策略基础信息
//
// @param request - UpdateRuleBaseRequest
//
// @return UpdateRuleBaseResponse
func (client *Client) UpdateRuleBase(request *UpdateRuleBaseRequest) (_result *UpdateRuleBaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRuleBaseResponse{}
	_body, _err := client.UpdateRuleBaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量修改样本
//
// @param request - UpdateSampleBatchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSampleBatchResponse
func (client *Client) UpdateSampleBatchWithOptions(request *UpdateSampleBatchRequest, runtime *util.RuntimeOptions) (_result *UpdateSampleBatchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.RegId)) {
		query["regId"] = request.RegId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Versions)) {
		query["versions"] = request.Versions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSampleBatch"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSampleBatchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量修改样本
//
// @param request - UpdateSampleBatchRequest
//
// @return UpdateSampleBatchResponse
func (client *Client) UpdateSampleBatch(request *UpdateSampleBatchRequest) (_result *UpdateSampleBatchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSampleBatchResponse{}
	_body, _err := client.UpdateSampleBatchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 单用户API创建样本
//
// @param request - UploadSampleApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadSampleApiResponse
func (client *Client) UploadSampleApiWithOptions(request *UploadSampleApiRequest, runtime *util.RuntimeOptions) (_result *UploadSampleApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		query["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.DataValue)) {
		query["DataValue"] = request.DataValue
	}

	if !tea.BoolValue(util.IsUnset(request.SampleType)) {
		query["SampleType"] = request.SampleType
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		query["Service"] = request.Service
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadSampleApi"),
		Version:     tea.String("2021-09-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadSampleApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 单用户API创建样本
//
// @param request - UploadSampleApiRequest
//
// @return UploadSampleApiResponse
func (client *Client) UploadSampleApi(request *UploadSampleApiRequest) (_result *UploadSampleApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadSampleApiResponse{}
	_body, _err := client.UploadSampleApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
