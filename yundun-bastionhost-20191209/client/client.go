// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AcceptApproveCommandRequest struct {
	// The ID of the command that you want to approve.
	//
	// >  You can call the [ListApproveCommands](https://help.aliyun.com/document_detail/2584310.html) operation to query the IDs of all commands that need to be reviewed.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The ID of the bastion host.
	//
	// >  You can call the DescribeInstances operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AcceptApproveCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptApproveCommandRequest) GoString() string {
	return s.String()
}

func (s *AcceptApproveCommandRequest) SetCommandId(v string) *AcceptApproveCommandRequest {
	s.CommandId = &v
	return s
}

func (s *AcceptApproveCommandRequest) SetInstanceId(v string) *AcceptApproveCommandRequest {
	s.InstanceId = &v
	return s
}

func (s *AcceptApproveCommandRequest) SetRegionId(v string) *AcceptApproveCommandRequest {
	s.RegionId = &v
	return s
}

type AcceptApproveCommandResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AcceptApproveCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AcceptApproveCommandResponseBody) GoString() string {
	return s.String()
}

func (s *AcceptApproveCommandResponseBody) SetRequestId(v string) *AcceptApproveCommandResponseBody {
	s.RequestId = &v
	return s
}

type AcceptApproveCommandResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AcceptApproveCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AcceptApproveCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptApproveCommandResponse) GoString() string {
	return s.String()
}

func (s *AcceptApproveCommandResponse) SetHeaders(v map[string]*string) *AcceptApproveCommandResponse {
	s.Headers = v
	return s
}

func (s *AcceptApproveCommandResponse) SetStatusCode(v int32) *AcceptApproveCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *AcceptApproveCommandResponse) SetBody(v *AcceptApproveCommandResponseBody) *AcceptApproveCommandResponse {
	s.Body = v
	return s
}

type AcceptOperationTicketRequest struct {
	// The review description.
	//
	// example:
	//
	// O\\&M allowed
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The maximum number of logons allowed. Valid values:
	//
	// 	- **0**: The number of logons is unlimited. The O\\&M engineer can log on to the specified asset for unlimited times during the validity period.
	//
	// 	- **1**: The O\\&M engineer can log on to the specified asset only once during the validity period.
	//
	// > 	- You can set this parameter only to 0 if you review an O\\&M application on a database.
	//
	// > 	- If you do not specify this parameter, the default value 0 is used.
	//
	// example:
	//
	// 1
	EffectCount *string `json:"EffectCount,omitempty" xml:"EffectCount,omitempty"`
	// The end time of the validity period. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1679393152
	EffectEndTime *string `json:"EffectEndTime,omitempty" xml:"EffectEndTime,omitempty"`
	// The start time of the validity period. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1685600242
	EffectStartTime *string `json:"EffectStartTime,omitempty" xml:"EffectStartTime,omitempty"`
	// The ID of the bastion host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the O\\&M application that you want to approve. You can call the ListOperationTickets operation to query the IDs of all O\\&M applications that require review.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	OperationTicketId *string `json:"OperationTicketId,omitempty" xml:"OperationTicketId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AcceptOperationTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptOperationTicketRequest) GoString() string {
	return s.String()
}

func (s *AcceptOperationTicketRequest) SetComment(v string) *AcceptOperationTicketRequest {
	s.Comment = &v
	return s
}

func (s *AcceptOperationTicketRequest) SetEffectCount(v string) *AcceptOperationTicketRequest {
	s.EffectCount = &v
	return s
}

func (s *AcceptOperationTicketRequest) SetEffectEndTime(v string) *AcceptOperationTicketRequest {
	s.EffectEndTime = &v
	return s
}

func (s *AcceptOperationTicketRequest) SetEffectStartTime(v string) *AcceptOperationTicketRequest {
	s.EffectStartTime = &v
	return s
}

func (s *AcceptOperationTicketRequest) SetInstanceId(v string) *AcceptOperationTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *AcceptOperationTicketRequest) SetOperationTicketId(v string) *AcceptOperationTicketRequest {
	s.OperationTicketId = &v
	return s
}

func (s *AcceptOperationTicketRequest) SetRegionId(v string) *AcceptOperationTicketRequest {
	s.RegionId = &v
	return s
}

type AcceptOperationTicketResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AcceptOperationTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AcceptOperationTicketResponseBody) GoString() string {
	return s.String()
}

func (s *AcceptOperationTicketResponseBody) SetRequestId(v string) *AcceptOperationTicketResponseBody {
	s.RequestId = &v
	return s
}

type AcceptOperationTicketResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AcceptOperationTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AcceptOperationTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptOperationTicketResponse) GoString() string {
	return s.String()
}

func (s *AcceptOperationTicketResponse) SetHeaders(v map[string]*string) *AcceptOperationTicketResponse {
	s.Headers = v
	return s
}

func (s *AcceptOperationTicketResponse) SetStatusCode(v int32) *AcceptOperationTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *AcceptOperationTicketResponse) SetBody(v *AcceptOperationTicketResponseBody) *AcceptOperationTicketResponse {
	s.Body = v
	return s
}

type AddDatabasesToGroupRequest struct {
	// An array that consists of the database IDs.
	//
	// This parameter is required.
	DatabaseIds []*string `json:"DatabaseIds,omitempty" xml:"DatabaseIds,omitempty" type:"Repeated"`
	// The ID of the asset group to which you want to add the databases.
	//
	// >  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the asset group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddDatabasesToGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDatabasesToGroupRequest) GoString() string {
	return s.String()
}

func (s *AddDatabasesToGroupRequest) SetDatabaseIds(v []*string) *AddDatabasesToGroupRequest {
	s.DatabaseIds = v
	return s
}

func (s *AddDatabasesToGroupRequest) SetHostGroupId(v string) *AddDatabasesToGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *AddDatabasesToGroupRequest) SetInstanceId(v string) *AddDatabasesToGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AddDatabasesToGroupRequest) SetRegionId(v string) *AddDatabasesToGroupRequest {
	s.RegionId = &v
	return s
}

type AddDatabasesToGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The data returned.
	Results []*AddDatabasesToGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AddDatabasesToGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDatabasesToGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddDatabasesToGroupResponseBody) SetRequestId(v string) *AddDatabasesToGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddDatabasesToGroupResponseBody) SetResults(v []*AddDatabasesToGroupResponseBodyResults) *AddDatabasesToGroupResponseBody {
	s.Results = v
	return s
}

type AddDatabasesToGroupResponseBodyResults struct {
	// The error code returned. If **OK*	- is returned, the operation was successful. If another error code is returned, the operation failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 9
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The asset group ID.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AddDatabasesToGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AddDatabasesToGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AddDatabasesToGroupResponseBodyResults) SetCode(v string) *AddDatabasesToGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AddDatabasesToGroupResponseBodyResults) SetDatabaseId(v string) *AddDatabasesToGroupResponseBodyResults {
	s.DatabaseId = &v
	return s
}

func (s *AddDatabasesToGroupResponseBodyResults) SetHostGroupId(v string) *AddDatabasesToGroupResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *AddDatabasesToGroupResponseBodyResults) SetMessage(v string) *AddDatabasesToGroupResponseBodyResults {
	s.Message = &v
	return s
}

type AddDatabasesToGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddDatabasesToGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddDatabasesToGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDatabasesToGroupResponse) GoString() string {
	return s.String()
}

func (s *AddDatabasesToGroupResponse) SetHeaders(v map[string]*string) *AddDatabasesToGroupResponse {
	s.Headers = v
	return s
}

func (s *AddDatabasesToGroupResponse) SetStatusCode(v int32) *AddDatabasesToGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDatabasesToGroupResponse) SetBody(v *AddDatabasesToGroupResponseBody) *AddDatabasesToGroupResponse {
	s.Body = v
	return s
}

type AddHostsToGroupRequest struct {
	// The ID of the asset group to which you want to add hosts.
	//
	// >You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The IDs of the hosts that you want to add to the asset group. Specify a JSON string. You can specify up to 100 host IDs.
	//
	// > You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the host IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2","3"]
	HostIds *string `json:"HostIds,omitempty" xml:"HostIds,omitempty"`
	// The ID of the bastion host whose asset group you want to add hosts to.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host whose asset group you want to add hosts to.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddHostsToGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddHostsToGroupRequest) GoString() string {
	return s.String()
}

func (s *AddHostsToGroupRequest) SetHostGroupId(v string) *AddHostsToGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *AddHostsToGroupRequest) SetHostIds(v string) *AddHostsToGroupRequest {
	s.HostIds = &v
	return s
}

func (s *AddHostsToGroupRequest) SetInstanceId(v string) *AddHostsToGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AddHostsToGroupRequest) SetRegionId(v string) *AddHostsToGroupRequest {
	s.RegionId = &v
	return s
}

type AddHostsToGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 81500666-d7f5-4143-8329-0223cc738105
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AddHostsToGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AddHostsToGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddHostsToGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddHostsToGroupResponseBody) SetRequestId(v string) *AddHostsToGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddHostsToGroupResponseBody) SetResults(v []*AddHostsToGroupResponseBodyResults) *AddHostsToGroupResponseBody {
	s.Results = v
	return s
}

type AddHostsToGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	//     >Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	//     > Make sure that the specified bastion host ID and host IDs are valid. Then, call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The asset group ID.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The host ID.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AddHostsToGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AddHostsToGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AddHostsToGroupResponseBodyResults) SetCode(v string) *AddHostsToGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AddHostsToGroupResponseBodyResults) SetHostGroupId(v string) *AddHostsToGroupResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *AddHostsToGroupResponseBodyResults) SetHostId(v string) *AddHostsToGroupResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *AddHostsToGroupResponseBodyResults) SetMessage(v string) *AddHostsToGroupResponseBodyResults {
	s.Message = &v
	return s
}

type AddHostsToGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddHostsToGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddHostsToGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddHostsToGroupResponse) GoString() string {
	return s.String()
}

func (s *AddHostsToGroupResponse) SetHeaders(v map[string]*string) *AddHostsToGroupResponse {
	s.Headers = v
	return s
}

func (s *AddHostsToGroupResponse) SetStatusCode(v int32) *AddHostsToGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddHostsToGroupResponse) SetBody(v *AddHostsToGroupResponseBody) *AddHostsToGroupResponse {
	s.Body = v
	return s
}

type AddUsersToGroupRequest struct {
	// The ID of the bastion host for which you want to add users to the user group.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to add users to the user group.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group to which you want to add users.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// １
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The ID of the user that you want to add to the user group. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2","3"]
	UserIds *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s AddUsersToGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddUsersToGroupRequest) GoString() string {
	return s.String()
}

func (s *AddUsersToGroupRequest) SetInstanceId(v string) *AddUsersToGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AddUsersToGroupRequest) SetRegionId(v string) *AddUsersToGroupRequest {
	s.RegionId = &v
	return s
}

func (s *AddUsersToGroupRequest) SetUserGroupId(v string) *AddUsersToGroupRequest {
	s.UserGroupId = &v
	return s
}

func (s *AddUsersToGroupRequest) SetUserIds(v string) *AddUsersToGroupRequest {
	s.UserIds = &v
	return s
}

type AddUsersToGroupResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AddUsersToGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AddUsersToGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddUsersToGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddUsersToGroupResponseBody) SetRequestId(v string) *AddUsersToGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddUsersToGroupResponseBody) SetResults(v []*AddUsersToGroupResponseBodyResults) *AddUsersToGroupResponseBody {
	s.Results = v
	return s
}

type AddUsersToGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// > Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// > Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AddUsersToGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AddUsersToGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AddUsersToGroupResponseBodyResults) SetCode(v string) *AddUsersToGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AddUsersToGroupResponseBodyResults) SetMessage(v string) *AddUsersToGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AddUsersToGroupResponseBodyResults) SetUserGroupId(v string) *AddUsersToGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

func (s *AddUsersToGroupResponseBodyResults) SetUserId(v string) *AddUsersToGroupResponseBodyResults {
	s.UserId = &v
	return s
}

type AddUsersToGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddUsersToGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddUsersToGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddUsersToGroupResponse) GoString() string {
	return s.String()
}

func (s *AddUsersToGroupResponse) SetHeaders(v map[string]*string) *AddUsersToGroupResponse {
	s.Headers = v
	return s
}

func (s *AddUsersToGroupResponse) SetStatusCode(v int32) *AddUsersToGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddUsersToGroupResponse) SetBody(v *AddUsersToGroupResponseBody) *AddUsersToGroupResponse {
	s.Body = v
	return s
}

type AttachDatabaseAccountsToUserRequest struct {
	// An array that consists of database objects.
	//
	// >  You can specify up to 10 databases and 10 database accounts. The database accounts are not required. If you do not specify a database account, the user is authorized to manage only the databases.
	Databases []*AttachDatabaseAccountsToUserRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The ID of the bastion host whose user you want to grant permissions.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-wwo36qbv601
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user to be authorized.
	//
	// >  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AttachDatabaseAccountsToUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserRequest) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserRequest) SetDatabases(v []*AttachDatabaseAccountsToUserRequestDatabases) *AttachDatabaseAccountsToUserRequest {
	s.Databases = v
	return s
}

func (s *AttachDatabaseAccountsToUserRequest) SetInstanceId(v string) *AttachDatabaseAccountsToUserRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserRequest) SetRegionId(v string) *AttachDatabaseAccountsToUserRequest {
	s.RegionId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserRequest) SetUserId(v string) *AttachDatabaseAccountsToUserRequest {
	s.UserId = &v
	return s
}

type AttachDatabaseAccountsToUserRequestDatabases struct {
	// An array that consists of database account IDs.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The ID of the database that you want to authorize the user to manage.
	//
	// example:
	//
	// 22
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s AttachDatabaseAccountsToUserRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserRequestDatabases) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserRequestDatabases) SetDatabaseAccountIds(v []*string) *AttachDatabaseAccountsToUserRequestDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *AttachDatabaseAccountsToUserRequestDatabases) SetDatabaseId(v string) *AttachDatabaseAccountsToUserRequestDatabases {
	s.DatabaseId = &v
	return s
}

type AttachDatabaseAccountsToUserResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 23120B8E-8737-50BD-A3A3-902A7821F04D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AttachDatabaseAccountsToUserResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AttachDatabaseAccountsToUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserResponseBody) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserResponseBody) SetRequestId(v string) *AttachDatabaseAccountsToUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserResponseBody) SetResults(v []*AttachDatabaseAccountsToUserResponseBodyResults) *AttachDatabaseAccountsToUserResponseBody {
	s.Results = v
	return s
}

type AttachDatabaseAccountsToUserResponseBodyResults struct {
	// The error code that is returned. If **OK*	- is returned, the authorization was successful. If another error code is returned, the authorization failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// A list that shows the authorization results of the database accounts.
	DatabaseAccounts []*AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The database ID.
	//
	// example:
	//
	// 22
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The error message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AttachDatabaseAccountsToUserResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserResponseBodyResults) SetCode(v string) *AttachDatabaseAccountsToUserResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachDatabaseAccountsToUserResponseBodyResults) SetDatabaseAccounts(v []*AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts) *AttachDatabaseAccountsToUserResponseBodyResults {
	s.DatabaseAccounts = v
	return s
}

func (s *AttachDatabaseAccountsToUserResponseBodyResults) SetDatabaseId(v string) *AttachDatabaseAccountsToUserResponseBodyResults {
	s.DatabaseId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserResponseBodyResults) SetMessage(v string) *AttachDatabaseAccountsToUserResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachDatabaseAccountsToUserResponseBodyResults) SetUserId(v string) *AttachDatabaseAccountsToUserResponseBodyResults {
	s.UserId = &v
	return s
}

type AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts struct {
	// The error code that is returned. If OK is returned, the authorization was successful. If another error code is returned, the authorization failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The database account ID.
	//
	// example:
	//
	// 6
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts) SetCode(v string) *AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts {
	s.Code = &v
	return s
}

func (s *AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts) SetDatabaseAccountId(v string) *AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts) SetMessage(v string) *AttachDatabaseAccountsToUserResponseBodyResultsDatabaseAccounts {
	s.Message = &v
	return s
}

type AttachDatabaseAccountsToUserResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachDatabaseAccountsToUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachDatabaseAccountsToUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserResponse) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserResponse) SetHeaders(v map[string]*string) *AttachDatabaseAccountsToUserResponse {
	s.Headers = v
	return s
}

func (s *AttachDatabaseAccountsToUserResponse) SetStatusCode(v int32) *AttachDatabaseAccountsToUserResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachDatabaseAccountsToUserResponse) SetBody(v *AttachDatabaseAccountsToUserResponseBody) *AttachDatabaseAccountsToUserResponse {
	s.Body = v
	return s
}

type AttachDatabaseAccountsToUserGroupRequest struct {
	// An array that consists of the database objects.
	//
	// >  You can specify up to 10 databases and 10 database accounts. The database accounts are not required. If you do not specify a database account, the user group is authorized to manage only the databases.
	Databases []*AttachDatabaseAccountsToUserGroupRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-zvp282aly06
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AttachDatabaseAccountsToUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserGroupRequest) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserGroupRequest) SetDatabases(v []*AttachDatabaseAccountsToUserGroupRequestDatabases) *AttachDatabaseAccountsToUserGroupRequest {
	s.Databases = v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupRequest) SetInstanceId(v string) *AttachDatabaseAccountsToUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupRequest) SetRegionId(v string) *AttachDatabaseAccountsToUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupRequest) SetUserGroupId(v string) *AttachDatabaseAccountsToUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type AttachDatabaseAccountsToUserGroupRequestDatabases struct {
	// An array that consists of database account IDs.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The ID of the database that you want to authorize the user group to manage.
	//
	// example:
	//
	// 58
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s AttachDatabaseAccountsToUserGroupRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserGroupRequestDatabases) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserGroupRequestDatabases) SetDatabaseAccountIds(v []*string) *AttachDatabaseAccountsToUserGroupRequestDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupRequestDatabases) SetDatabaseId(v string) *AttachDatabaseAccountsToUserGroupRequestDatabases {
	s.DatabaseId = &v
	return s
}

type AttachDatabaseAccountsToUserGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5D0EB759-CB0A-537D-A2CC-13A9854FA08D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AttachDatabaseAccountsToUserGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AttachDatabaseAccountsToUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserGroupResponseBody) SetRequestId(v string) *AttachDatabaseAccountsToUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponseBody) SetResults(v []*AttachDatabaseAccountsToUserGroupResponseBodyResults) *AttachDatabaseAccountsToUserGroupResponseBody {
	s.Results = v
	return s
}

type AttachDatabaseAccountsToUserGroupResponseBodyResults struct {
	// The error code returned. If OK is returned, the authorization was successful. If another error code is returned, the authorization failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// A list that shows the authorization results of the database accounts.
	DatabaseAccounts []*AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The database ID.
	//
	// example:
	//
	// 2
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The user group ID.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AttachDatabaseAccountsToUserGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResults) SetCode(v string) *AttachDatabaseAccountsToUserGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResults) SetDatabaseAccounts(v []*AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts) *AttachDatabaseAccountsToUserGroupResponseBodyResults {
	s.DatabaseAccounts = v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResults) SetDatabaseId(v string) *AttachDatabaseAccountsToUserGroupResponseBodyResults {
	s.DatabaseId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResults) SetMessage(v string) *AttachDatabaseAccountsToUserGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResults) SetUserGroupId(v string) *AttachDatabaseAccountsToUserGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

type AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts struct {
	// The error code returned. If OK is returned, the authorization was successful. If another error code is returned, the authorization failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The database account ID.
	//
	// example:
	//
	// 8
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts) SetCode(v string) *AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts {
	s.Code = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts) SetDatabaseAccountId(v string) *AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts) SetMessage(v string) *AttachDatabaseAccountsToUserGroupResponseBodyResultsDatabaseAccounts {
	s.Message = &v
	return s
}

type AttachDatabaseAccountsToUserGroupResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachDatabaseAccountsToUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachDatabaseAccountsToUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDatabaseAccountsToUserGroupResponse) GoString() string {
	return s.String()
}

func (s *AttachDatabaseAccountsToUserGroupResponse) SetHeaders(v map[string]*string) *AttachDatabaseAccountsToUserGroupResponse {
	s.Headers = v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponse) SetStatusCode(v int32) *AttachDatabaseAccountsToUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachDatabaseAccountsToUserGroupResponse) SetBody(v *AttachDatabaseAccountsToUserGroupResponseBody) *AttachDatabaseAccountsToUserGroupResponse {
	s.Body = v
	return s
}

type AttachHostAccountsToHostShareKeyRequest struct {
	// The host account IDs.
	//
	// >  You must specify this parameter. You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/462937.html) operation to query the host account IDs.
	//
	// example:
	//
	// ["1","2","3"]
	HostAccountIds *string `json:"HostAccountIds,omitempty" xml:"HostAccountIds,omitempty"`
	// The shared key ID.
	//
	// >  You must specify this parameter. You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.
	//
	// example:
	//
	// 10267
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The ID of the bastion host. You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host. For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AttachHostAccountsToHostShareKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToHostShareKeyRequest) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToHostShareKeyRequest) SetHostAccountIds(v string) *AttachHostAccountsToHostShareKeyRequest {
	s.HostAccountIds = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyRequest) SetHostShareKeyId(v string) *AttachHostAccountsToHostShareKeyRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyRequest) SetInstanceId(v string) *AttachHostAccountsToHostShareKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyRequest) SetRegionId(v string) *AttachHostAccountsToHostShareKeyRequest {
	s.RegionId = &v
	return s
}

type AttachHostAccountsToHostShareKeyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AttachHostAccountsToHostShareKeyResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AttachHostAccountsToHostShareKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToHostShareKeyResponseBody) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToHostShareKeyResponseBody) SetRequestId(v string) *AttachHostAccountsToHostShareKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyResponseBody) SetResults(v []*AttachHostAccountsToHostShareKeyResponseBodyResults) *AttachHostAccountsToHostShareKeyResponseBody {
	s.Results = v
	return s
}

type AttachHostAccountsToHostShareKeyResponseBodyResults struct {
	// The error code returned. If **OK*	- is returned, the association was successful. If another error code is returned, the association failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// 1201
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The ID of the shared key.
	//
	// example:
	//
	// 10267
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// The host account does not exist
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AttachHostAccountsToHostShareKeyResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToHostShareKeyResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToHostShareKeyResponseBodyResults) SetCode(v string) *AttachHostAccountsToHostShareKeyResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyResponseBodyResults) SetHostAccountId(v string) *AttachHostAccountsToHostShareKeyResponseBodyResults {
	s.HostAccountId = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyResponseBodyResults) SetHostShareKeyId(v string) *AttachHostAccountsToHostShareKeyResponseBodyResults {
	s.HostShareKeyId = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyResponseBodyResults) SetMessage(v string) *AttachHostAccountsToHostShareKeyResponseBodyResults {
	s.Message = &v
	return s
}

type AttachHostAccountsToHostShareKeyResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachHostAccountsToHostShareKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachHostAccountsToHostShareKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToHostShareKeyResponse) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToHostShareKeyResponse) SetHeaders(v map[string]*string) *AttachHostAccountsToHostShareKeyResponse {
	s.Headers = v
	return s
}

func (s *AttachHostAccountsToHostShareKeyResponse) SetStatusCode(v int32) *AttachHostAccountsToHostShareKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachHostAccountsToHostShareKeyResponse) SetBody(v *AttachHostAccountsToHostShareKeyResponseBody) *AttachHostAccountsToHostShareKeyResponse {
	s.Body = v
	return s
}

type AttachHostAccountsToUserRequest struct {
	// The IDs of the hosts and host accounts that you want to authorize the user to manage. You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the user is authorized to manage only the specified hosts. For more information about this parameter, see the "Description of the Hosts parameter" section of this topic.
	//
	// > You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3"]}, {"HostId":"3","HostAccountIds":["4","5","6"]}, {"HostId":"4","HostAccountIds":["9","8","7"]}  ]
	Hosts *string `json:"Hosts,omitempty" xml:"Hosts,omitempty"`
	// The ID of the bastion host for which you want to authorize the user to manage the hosts and host accounts.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to authorize the user to manage the hosts and host accounts.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user that you want to authorize to manage the hosts and host accounts.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AttachHostAccountsToUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserRequest) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserRequest) SetHosts(v string) *AttachHostAccountsToUserRequest {
	s.Hosts = &v
	return s
}

func (s *AttachHostAccountsToUserRequest) SetInstanceId(v string) *AttachHostAccountsToUserRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachHostAccountsToUserRequest) SetRegionId(v string) *AttachHostAccountsToUserRequest {
	s.RegionId = &v
	return s
}

func (s *AttachHostAccountsToUserRequest) SetUserId(v string) *AttachHostAccountsToUserRequest {
	s.UserId = &v
	return s
}

type AttachHostAccountsToUserResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AttachHostAccountsToUserResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AttachHostAccountsToUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserResponseBody) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserResponseBody) SetRequestId(v string) *AttachHostAccountsToUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachHostAccountsToUserResponseBody) SetResults(v []*AttachHostAccountsToUserResponseBodyResults) *AttachHostAccountsToUserResponseBody {
	s.Results = v
	return s
}

type AttachHostAccountsToUserResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// > Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// > Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of authorizing the user to manage the host accounts.
	HostAccounts []*AttachHostAccountsToUserResponseBodyResultsHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AttachHostAccountsToUserResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserResponseBodyResults) SetCode(v string) *AttachHostAccountsToUserResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachHostAccountsToUserResponseBodyResults) SetHostAccounts(v []*AttachHostAccountsToUserResponseBodyResultsHostAccounts) *AttachHostAccountsToUserResponseBodyResults {
	s.HostAccounts = v
	return s
}

func (s *AttachHostAccountsToUserResponseBodyResults) SetHostId(v string) *AttachHostAccountsToUserResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *AttachHostAccountsToUserResponseBodyResults) SetMessage(v string) *AttachHostAccountsToUserResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachHostAccountsToUserResponseBodyResults) SetUserId(v string) *AttachHostAccountsToUserResponseBodyResults {
	s.UserId = &v
	return s
}

type AttachHostAccountsToUserResponseBodyResultsHostAccounts struct {
	// The return code that indicates whether the user was authorized to manage the host accounts. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AttachHostAccountsToUserResponseBodyResultsHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserResponseBodyResultsHostAccounts) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserResponseBodyResultsHostAccounts) SetCode(v string) *AttachHostAccountsToUserResponseBodyResultsHostAccounts {
	s.Code = &v
	return s
}

func (s *AttachHostAccountsToUserResponseBodyResultsHostAccounts) SetHostAccountId(v string) *AttachHostAccountsToUserResponseBodyResultsHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *AttachHostAccountsToUserResponseBodyResultsHostAccounts) SetMessage(v string) *AttachHostAccountsToUserResponseBodyResultsHostAccounts {
	s.Message = &v
	return s
}

type AttachHostAccountsToUserResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachHostAccountsToUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachHostAccountsToUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserResponse) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserResponse) SetHeaders(v map[string]*string) *AttachHostAccountsToUserResponse {
	s.Headers = v
	return s
}

func (s *AttachHostAccountsToUserResponse) SetStatusCode(v int32) *AttachHostAccountsToUserResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachHostAccountsToUserResponse) SetBody(v *AttachHostAccountsToUserResponseBody) *AttachHostAccountsToUserResponse {
	s.Body = v
	return s
}

type AttachHostAccountsToUserGroupRequest struct {
	// The IDs of the host and host account that you want to authorize the user group to manage. You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the user group is authorized to manage only the specified hosts. For more information about this parameter, see the "Description of the Hosts parameter" section of this topic.
	//
	// > You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3",...]}, {"HostId":"3","HostAccountIds":["4","5","6",...]}, {"HostId":"4","HostAccountIds":["9","8","7",...]} ... ]
	Hosts *string `json:"Hosts,omitempty" xml:"Hosts,omitempty"`
	// The ID of the bastion host in which you want to authorize the user group to manage the specified hosts and host accounts.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host in which you want to authorize the user group to manage the specified hosts and host accounts.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group that you want to authorize to manage the specified hosts and host accounts.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AttachHostAccountsToUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserGroupRequest) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserGroupRequest) SetHosts(v string) *AttachHostAccountsToUserGroupRequest {
	s.Hosts = &v
	return s
}

func (s *AttachHostAccountsToUserGroupRequest) SetInstanceId(v string) *AttachHostAccountsToUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachHostAccountsToUserGroupRequest) SetRegionId(v string) *AttachHostAccountsToUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *AttachHostAccountsToUserGroupRequest) SetUserGroupId(v string) *AttachHostAccountsToUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type AttachHostAccountsToUserGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AttachHostAccountsToUserGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AttachHostAccountsToUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserGroupResponseBody) SetRequestId(v string) *AttachHostAccountsToUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachHostAccountsToUserGroupResponseBody) SetResults(v []*AttachHostAccountsToUserGroupResponseBodyResults) *AttachHostAccountsToUserGroupResponseBody {
	s.Results = v
	return s
}

type AttachHostAccountsToUserGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of authorizing the specified user group to manage the specified host accounts.
	HostAccounts []*AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the user group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AttachHostAccountsToUserGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserGroupResponseBodyResults) SetCode(v string) *AttachHostAccountsToUserGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachHostAccountsToUserGroupResponseBodyResults) SetHostAccounts(v []*AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts) *AttachHostAccountsToUserGroupResponseBodyResults {
	s.HostAccounts = v
	return s
}

func (s *AttachHostAccountsToUserGroupResponseBodyResults) SetHostId(v string) *AttachHostAccountsToUserGroupResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *AttachHostAccountsToUserGroupResponseBodyResults) SetMessage(v string) *AttachHostAccountsToUserGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachHostAccountsToUserGroupResponseBodyResults) SetUserGroupId(v string) *AttachHostAccountsToUserGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

type AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts struct {
	// The return code that indicates whether the user group was authorized to manage the specified host account. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts) SetCode(v string) *AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts {
	s.Code = &v
	return s
}

func (s *AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts) SetHostAccountId(v string) *AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts) SetMessage(v string) *AttachHostAccountsToUserGroupResponseBodyResultsHostAccounts {
	s.Message = &v
	return s
}

type AttachHostAccountsToUserGroupResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachHostAccountsToUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachHostAccountsToUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachHostAccountsToUserGroupResponse) GoString() string {
	return s.String()
}

func (s *AttachHostAccountsToUserGroupResponse) SetHeaders(v map[string]*string) *AttachHostAccountsToUserGroupResponse {
	s.Headers = v
	return s
}

func (s *AttachHostAccountsToUserGroupResponse) SetStatusCode(v int32) *AttachHostAccountsToUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachHostAccountsToUserGroupResponse) SetBody(v *AttachHostAccountsToUserGroupResponseBody) *AttachHostAccountsToUserGroupResponse {
	s.Body = v
	return s
}

type AttachHostGroupAccountsToUserRequest struct {
	// The ID of the host group and the name of the host account that you want to authorize the user to manage. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the user is authorized to manage only the specified host groups. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"3","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"4","HostAccountNames":["root","111","abc"]} ]
	HostGroups *string `json:"HostGroups,omitempty" xml:"HostGroups,omitempty"`
	// The ID of the bastion host for which you want to authorize the user to manage the host groups and host accounts.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to authorize the user to manage the host groups and host accounts.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user that you want to authorize to manage the host groups and host accounts.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AttachHostGroupAccountsToUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserRequest) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserRequest) SetHostGroups(v string) *AttachHostGroupAccountsToUserRequest {
	s.HostGroups = &v
	return s
}

func (s *AttachHostGroupAccountsToUserRequest) SetInstanceId(v string) *AttachHostGroupAccountsToUserRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserRequest) SetRegionId(v string) *AttachHostGroupAccountsToUserRequest {
	s.RegionId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserRequest) SetUserId(v string) *AttachHostGroupAccountsToUserRequest {
	s.UserId = &v
	return s
}

type AttachHostGroupAccountsToUserResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AttachHostGroupAccountsToUserResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AttachHostGroupAccountsToUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserResponseBody) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserResponseBody) SetRequestId(v string) *AttachHostGroupAccountsToUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserResponseBody) SetResults(v []*AttachHostGroupAccountsToUserResponseBodyResults) *AttachHostGroupAccountsToUserResponseBody {
	s.Results = v
	return s
}

type AttachHostGroupAccountsToUserResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of authorizing the user to manage the host accounts.
	HostAccountNames []*AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The ID of the host group.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AttachHostGroupAccountsToUserResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserResponseBodyResults) SetCode(v string) *AttachHostGroupAccountsToUserResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachHostGroupAccountsToUserResponseBodyResults) SetHostAccountNames(v []*AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames) *AttachHostGroupAccountsToUserResponseBodyResults {
	s.HostAccountNames = v
	return s
}

func (s *AttachHostGroupAccountsToUserResponseBodyResults) SetHostGroupId(v string) *AttachHostGroupAccountsToUserResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserResponseBodyResults) SetMessage(v string) *AttachHostGroupAccountsToUserResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachHostGroupAccountsToUserResponseBodyResults) SetUserId(v string) *AttachHostGroupAccountsToUserResponseBodyResults {
	s.UserId = &v
	return s
}

type AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames struct {
	// The return code that indicates whether the user was authorized to manage the host account. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames) SetCode(v string) *AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames {
	s.Code = &v
	return s
}

func (s *AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames) SetHostAccountName(v string) *AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames {
	s.HostAccountName = &v
	return s
}

func (s *AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames) SetMessage(v string) *AttachHostGroupAccountsToUserResponseBodyResultsHostAccountNames {
	s.Message = &v
	return s
}

type AttachHostGroupAccountsToUserResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachHostGroupAccountsToUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachHostGroupAccountsToUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserResponse) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserResponse) SetHeaders(v map[string]*string) *AttachHostGroupAccountsToUserResponse {
	s.Headers = v
	return s
}

func (s *AttachHostGroupAccountsToUserResponse) SetStatusCode(v int32) *AttachHostGroupAccountsToUserResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachHostGroupAccountsToUserResponse) SetBody(v *AttachHostGroupAccountsToUserResponseBody) *AttachHostGroupAccountsToUserResponse {
	s.Body = v
	return s
}

type AttachHostGroupAccountsToUserGroupRequest struct {
	// The ID of the host group and the name of the host account that you want to authorize the user group to manage. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the user group is authorized to manage only the specified host groups. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"3","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"4","HostAccountNames":["root","111","abc"]}]
	HostGroups *string `json:"HostGroups,omitempty" xml:"HostGroups,omitempty"`
	// The ID of the bastion host for which you want to authorize the user group to manage the specified host groups and host accounts.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to authorize the user group to manage the specified host groups and host accounts.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group that you want to authorize to manage the specified host groups and host accounts.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AttachHostGroupAccountsToUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserGroupRequest) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserGroupRequest) SetHostGroups(v string) *AttachHostGroupAccountsToUserGroupRequest {
	s.HostGroups = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupRequest) SetInstanceId(v string) *AttachHostGroupAccountsToUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupRequest) SetRegionId(v string) *AttachHostGroupAccountsToUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupRequest) SetUserGroupId(v string) *AttachHostGroupAccountsToUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type AttachHostGroupAccountsToUserGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*AttachHostGroupAccountsToUserGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s AttachHostGroupAccountsToUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserGroupResponseBody) SetRequestId(v string) *AttachHostGroupAccountsToUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponseBody) SetResults(v []*AttachHostGroupAccountsToUserGroupResponseBodyResults) *AttachHostGroupAccountsToUserGroupResponseBody {
	s.Results = v
	return s
}

type AttachHostGroupAccountsToUserGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of authorizing the user group to manage the specified host accounts.
	HostAccountNames []*AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The ID of the host group.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the user group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AttachHostGroupAccountsToUserGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResults) SetCode(v string) *AttachHostGroupAccountsToUserGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResults) SetHostAccountNames(v []*AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames) *AttachHostGroupAccountsToUserGroupResponseBodyResults {
	s.HostAccountNames = v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResults) SetHostGroupId(v string) *AttachHostGroupAccountsToUserGroupResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResults) SetMessage(v string) *AttachHostGroupAccountsToUserGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResults) SetUserGroupId(v string) *AttachHostGroupAccountsToUserGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

type AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames struct {
	// The return code that indicates whether the user group was authorized to manage the specified host account. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// abc
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames) SetCode(v string) *AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames {
	s.Code = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames) SetHostAccountName(v string) *AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames {
	s.HostAccountName = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames) SetMessage(v string) *AttachHostGroupAccountsToUserGroupResponseBodyResultsHostAccountNames {
	s.Message = &v
	return s
}

type AttachHostGroupAccountsToUserGroupResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachHostGroupAccountsToUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachHostGroupAccountsToUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachHostGroupAccountsToUserGroupResponse) GoString() string {
	return s.String()
}

func (s *AttachHostGroupAccountsToUserGroupResponse) SetHeaders(v map[string]*string) *AttachHostGroupAccountsToUserGroupResponse {
	s.Headers = v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponse) SetStatusCode(v int32) *AttachHostGroupAccountsToUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachHostGroupAccountsToUserGroupResponse) SetBody(v *AttachHostGroupAccountsToUserGroupResponseBody) *AttachHostGroupAccountsToUserGroupResponse {
	s.Body = v
	return s
}

type ConfigInstanceSecurityGroupsRequest struct {
	// An array that consists of the IDs of authorized security groups.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp14u00sh39jvw5****
	AuthorizedSecurityGroups []*string `json:"AuthorizedSecurityGroups,omitempty" xml:"AuthorizedSecurityGroups,omitempty" type:"Repeated"`
	// The ID of the bastion host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// 	- **zh**: Chinese
	//
	// 	- **en**: English
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The region ID of the bastion host.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ConfigInstanceSecurityGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigInstanceSecurityGroupsRequest) GoString() string {
	return s.String()
}

func (s *ConfigInstanceSecurityGroupsRequest) SetAuthorizedSecurityGroups(v []*string) *ConfigInstanceSecurityGroupsRequest {
	s.AuthorizedSecurityGroups = v
	return s
}

func (s *ConfigInstanceSecurityGroupsRequest) SetInstanceId(v string) *ConfigInstanceSecurityGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ConfigInstanceSecurityGroupsRequest) SetLang(v string) *ConfigInstanceSecurityGroupsRequest {
	s.Lang = &v
	return s
}

func (s *ConfigInstanceSecurityGroupsRequest) SetRegionId(v string) *ConfigInstanceSecurityGroupsRequest {
	s.RegionId = &v
	return s
}

type ConfigInstanceSecurityGroupsResponseBody struct {
	// The ID of the bastion host for which security groups were configured.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 0ECCC399-4D35-48A7-8379-5C6180E66235
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfigInstanceSecurityGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigInstanceSecurityGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigInstanceSecurityGroupsResponseBody) SetInstanceId(v string) *ConfigInstanceSecurityGroupsResponseBody {
	s.InstanceId = &v
	return s
}

func (s *ConfigInstanceSecurityGroupsResponseBody) SetRequestId(v string) *ConfigInstanceSecurityGroupsResponseBody {
	s.RequestId = &v
	return s
}

type ConfigInstanceSecurityGroupsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfigInstanceSecurityGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfigInstanceSecurityGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigInstanceSecurityGroupsResponse) GoString() string {
	return s.String()
}

func (s *ConfigInstanceSecurityGroupsResponse) SetHeaders(v map[string]*string) *ConfigInstanceSecurityGroupsResponse {
	s.Headers = v
	return s
}

func (s *ConfigInstanceSecurityGroupsResponse) SetStatusCode(v int32) *ConfigInstanceSecurityGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigInstanceSecurityGroupsResponse) SetBody(v *ConfigInstanceSecurityGroupsResponseBody) *ConfigInstanceSecurityGroupsResponse {
	s.Body = v
	return s
}

type ConfigInstanceWhiteListRequest struct {
	// The ID of the bastion host for which you want to configure a whitelist of public IP addresses.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IP address whitelist that you want to configure.
	//
	// example:
	//
	// 10.162.XX.XX
	WhiteList         []*string                                          `json:"WhiteList,omitempty" xml:"WhiteList,omitempty" type:"Repeated"`
	WhiteListPolicies []*ConfigInstanceWhiteListRequestWhiteListPolicies `json:"WhiteListPolicies,omitempty" xml:"WhiteListPolicies,omitempty" type:"Repeated"`
}

func (s ConfigInstanceWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigInstanceWhiteListRequest) GoString() string {
	return s.String()
}

func (s *ConfigInstanceWhiteListRequest) SetInstanceId(v string) *ConfigInstanceWhiteListRequest {
	s.InstanceId = &v
	return s
}

func (s *ConfigInstanceWhiteListRequest) SetRegionId(v string) *ConfigInstanceWhiteListRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigInstanceWhiteListRequest) SetWhiteList(v []*string) *ConfigInstanceWhiteListRequest {
	s.WhiteList = v
	return s
}

func (s *ConfigInstanceWhiteListRequest) SetWhiteListPolicies(v []*ConfigInstanceWhiteListRequestWhiteListPolicies) *ConfigInstanceWhiteListRequest {
	s.WhiteListPolicies = v
	return s
}

type ConfigInstanceWhiteListRequestWhiteListPolicies struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Entry       *string `json:"Entry,omitempty" xml:"Entry,omitempty"`
}

func (s ConfigInstanceWhiteListRequestWhiteListPolicies) String() string {
	return tea.Prettify(s)
}

func (s ConfigInstanceWhiteListRequestWhiteListPolicies) GoString() string {
	return s.String()
}

func (s *ConfigInstanceWhiteListRequestWhiteListPolicies) SetDescription(v string) *ConfigInstanceWhiteListRequestWhiteListPolicies {
	s.Description = &v
	return s
}

func (s *ConfigInstanceWhiteListRequestWhiteListPolicies) SetEntry(v string) *ConfigInstanceWhiteListRequestWhiteListPolicies {
	s.Entry = &v
	return s
}

type ConfigInstanceWhiteListResponseBody struct {
	// The ID of the bastion host for which a whitelist of public IP addresses is configured.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 47820E32-5968-45CF-982F-09CB80DC180B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfigInstanceWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigInstanceWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigInstanceWhiteListResponseBody) SetInstanceId(v string) *ConfigInstanceWhiteListResponseBody {
	s.InstanceId = &v
	return s
}

func (s *ConfigInstanceWhiteListResponseBody) SetRequestId(v string) *ConfigInstanceWhiteListResponseBody {
	s.RequestId = &v
	return s
}

type ConfigInstanceWhiteListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfigInstanceWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfigInstanceWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigInstanceWhiteListResponse) GoString() string {
	return s.String()
}

func (s *ConfigInstanceWhiteListResponse) SetHeaders(v map[string]*string) *ConfigInstanceWhiteListResponse {
	s.Headers = v
	return s
}

func (s *ConfigInstanceWhiteListResponse) SetStatusCode(v int32) *ConfigInstanceWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigInstanceWhiteListResponse) SetBody(v *ConfigInstanceWhiteListResponseBody) *ConfigInstanceWhiteListResponse {
	s.Body = v
	return s
}

type CreateDatabaseRequest struct {
	// The address type of the database to add. Valid values:
	//
	// 	- Public
	//
	// 	- Private
	//
	// This parameter is required.
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The remarks of the database to add. The remarks can be up to 500 characters in length.
	//
	// example:
	//
	// cpp
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The name of the database to add. This parameter is required if Source is set to **Local**.
	//
	// example:
	//
	// Oracle
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The port of the database. This parameter is required if Source is set to **Local**.
	//
	// example:
	//
	// 5433
	DatabasePort *int32 `json:"DatabasePort,omitempty" xml:"DatabasePort,omitempty"`
	// The internal IP address of the database. Specify an IPv4 address or a domain name.
	//
	// >  This parameter is required if ActiveAddressType is set to Private.
	//
	// example:
	//
	// pgm-uf6o******
	DatabasePrivateAddress *string `json:"DatabasePrivateAddress,omitempty" xml:"DatabasePrivateAddress,omitempty"`
	// The public IP address of the database. Specify an IPv4 address or a domain name.
	//
	// >  This parameter is required if ActiveAddressType is set to Public.
	//
	// example:
	//
	// rm-uf65251k51******
	DatabasePublicAddress *string `json:"DatabasePublicAddress,omitempty" xml:"DatabasePublicAddress,omitempty"`
	// The type of the database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-7mz2g5hu20e
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain to which the database to add belongs.
	//
	// >  You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.
	//
	// example:
	//
	// 1
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The endpoint type of the PolarDB database. This parameter is required if Source is set to PolarDB. Valid values:
	//
	// 	- Cluster
	//
	// 	- Primary
	//
	// example:
	//
	// Cluster
	PolarDBEndpointType *string `json:"PolarDBEndpointType,omitempty" xml:"PolarDBEndpointType,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the database to add. Valid values:
	//
	// 	- Local: on-premises database.
	//
	// 	- Rds: ApsaraDB RDS instance.
	//
	// 	- PolarDB: PolarDB cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The instance ID of the database to add.
	//
	// > This parameter is required if **Source*	- is set to **Rds*	- or **PolarDB**.
	//
	// example:
	//
	// i-bp19ienyt0yax748****
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The region ID of the database to add.
	//
	// >  This parameter is required if **Source*	- is set to **Rds*	- or **PolarDB**.
	//
	// example:
	//
	// cn-shanghai
	SourceInstanceRegionId *string `json:"SourceInstanceRegionId,omitempty" xml:"SourceInstanceRegionId,omitempty"`
}

func (s CreateDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseRequest) SetActiveAddressType(v string) *CreateDatabaseRequest {
	s.ActiveAddressType = &v
	return s
}

func (s *CreateDatabaseRequest) SetComment(v string) *CreateDatabaseRequest {
	s.Comment = &v
	return s
}

func (s *CreateDatabaseRequest) SetDatabaseName(v string) *CreateDatabaseRequest {
	s.DatabaseName = &v
	return s
}

func (s *CreateDatabaseRequest) SetDatabasePort(v int32) *CreateDatabaseRequest {
	s.DatabasePort = &v
	return s
}

func (s *CreateDatabaseRequest) SetDatabasePrivateAddress(v string) *CreateDatabaseRequest {
	s.DatabasePrivateAddress = &v
	return s
}

func (s *CreateDatabaseRequest) SetDatabasePublicAddress(v string) *CreateDatabaseRequest {
	s.DatabasePublicAddress = &v
	return s
}

func (s *CreateDatabaseRequest) SetDatabaseType(v string) *CreateDatabaseRequest {
	s.DatabaseType = &v
	return s
}

func (s *CreateDatabaseRequest) SetInstanceId(v string) *CreateDatabaseRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDatabaseRequest) SetNetworkDomainId(v string) *CreateDatabaseRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *CreateDatabaseRequest) SetPolarDBEndpointType(v string) *CreateDatabaseRequest {
	s.PolarDBEndpointType = &v
	return s
}

func (s *CreateDatabaseRequest) SetRegionId(v string) *CreateDatabaseRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDatabaseRequest) SetSource(v string) *CreateDatabaseRequest {
	s.Source = &v
	return s
}

func (s *CreateDatabaseRequest) SetSourceInstanceId(v string) *CreateDatabaseRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateDatabaseRequest) SetSourceInstanceRegionId(v string) *CreateDatabaseRequest {
	s.SourceInstanceRegionId = &v
	return s
}

type CreateDatabaseResponseBody struct {
	// The database ID.
	//
	// example:
	//
	// 334
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 98EDD923-236C-5A88-88E7-4979A91B9325
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponseBody) SetDatabaseId(v string) *CreateDatabaseResponseBody {
	s.DatabaseId = &v
	return s
}

func (s *CreateDatabaseResponseBody) SetRequestId(v string) *CreateDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatabaseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponse) SetHeaders(v map[string]*string) *CreateDatabaseResponse {
	s.Headers = v
	return s
}

func (s *CreateDatabaseResponse) SetStatusCode(v int32) *CreateDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatabaseResponse) SetBody(v *CreateDatabaseResponseBody) *CreateDatabaseResponse {
	s.Body = v
	return s
}

type CreateDatabaseAccountRequest struct {
	// The username of the database account to be created. The username can be up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// root
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The ID of the database for which you want to create a database account.
	//
	// >  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The name of the database. This parameter is required for PostgreSQL and Oracle databases.
	//
	// example:
	//
	// orcl
	DatabaseSchema *string `json:"DatabaseSchema,omitempty" xml:"DatabaseSchema,omitempty"`
	// The ID of the bastion host for which you want to create a database account.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-5yd34ol020a
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The logon attribute. This parameter is required for Oracle databases. Valid values:
	//
	// 	- SERVICENAME
	//
	// 	- SID
	//
	// example:
	//
	// SID
	LoginAttribute *string `json:"LoginAttribute,omitempty" xml:"LoginAttribute,omitempty"`
	// The password of the database account to be created.
	//
	// example:
	//
	// MCQ******
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID of the bastion host for which you want to create a database account.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseAccountRequest) SetDatabaseAccountName(v string) *CreateDatabaseAccountRequest {
	s.DatabaseAccountName = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetDatabaseId(v string) *CreateDatabaseAccountRequest {
	s.DatabaseId = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetDatabaseSchema(v string) *CreateDatabaseAccountRequest {
	s.DatabaseSchema = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetInstanceId(v string) *CreateDatabaseAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetLoginAttribute(v string) *CreateDatabaseAccountRequest {
	s.LoginAttribute = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetPassword(v string) *CreateDatabaseAccountRequest {
	s.Password = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetRegionId(v string) *CreateDatabaseAccountRequest {
	s.RegionId = &v
	return s
}

type CreateDatabaseAccountResponseBody struct {
	// The ID of the database account.
	//
	// example:
	//
	// 40
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B07C465D-B09F-54DD-8FEC-90788BEABAFC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatabaseAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatabaseAccountResponseBody) SetDatabaseAccountId(v string) *CreateDatabaseAccountResponseBody {
	s.DatabaseAccountId = &v
	return s
}

func (s *CreateDatabaseAccountResponseBody) SetRequestId(v string) *CreateDatabaseAccountResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatabaseAccountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDatabaseAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseAccountResponse) SetHeaders(v map[string]*string) *CreateDatabaseAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateDatabaseAccountResponse) SetStatusCode(v int32) *CreateDatabaseAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatabaseAccountResponse) SetBody(v *CreateDatabaseAccountResponseBody) *CreateDatabaseAccountResponse {
	s.Body = v
	return s
}

type CreateExportConfigJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateExportConfigJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExportConfigJobRequest) GoString() string {
	return s.String()
}

func (s *CreateExportConfigJobRequest) SetInstanceId(v string) *CreateExportConfigJobRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateExportConfigJobRequest) SetRegionId(v string) *CreateExportConfigJobRequest {
	s.RegionId = &v
	return s
}

type CreateExportConfigJobResponseBody struct {
	// example:
	//
	// 1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateExportConfigJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateExportConfigJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExportConfigJobResponseBody) SetJobId(v string) *CreateExportConfigJobResponseBody {
	s.JobId = &v
	return s
}

func (s *CreateExportConfigJobResponseBody) SetRequestId(v string) *CreateExportConfigJobResponseBody {
	s.RequestId = &v
	return s
}

type CreateExportConfigJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateExportConfigJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateExportConfigJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExportConfigJobResponse) GoString() string {
	return s.String()
}

func (s *CreateExportConfigJobResponse) SetHeaders(v map[string]*string) *CreateExportConfigJobResponse {
	s.Headers = v
	return s
}

func (s *CreateExportConfigJobResponse) SetStatusCode(v int32) *CreateExportConfigJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateExportConfigJobResponse) SetBody(v *CreateExportConfigJobResponseBody) *CreateExportConfigJobResponse {
	s.Body = v
	return s
}

type CreateHostRequest struct {
	// The endpoint type of the host that you want to create. Valid values:
	//
	// 	- **Public**: public endpoint
	//
	// 	- **Private**: internal endpoint
	//
	// This parameter is required.
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The description of the host that you want to create. The value can be up to 500 characters in length.
	//
	// example:
	//
	// Local Host
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The name of the host that you want to create. The name can be up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// host01
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The internal endpoint of the host that you want to create. You can set this parameter to a domain name or an IP address.
	//
	// > This parameter is required if the **ActiveAddressType*	- parameter is set to **Private**.
	//
	// example:
	//
	// 192.168.XX.XX
	HostPrivateAddress *string `json:"HostPrivateAddress,omitempty" xml:"HostPrivateAddress,omitempty"`
	// The public endpoint of the host that you want to create. You can set this parameter to a domain name or an IP address.
	//
	// > This parameter is required if the **ActiveAddressType*	- parameter is set to **Public**.
	//
	// example:
	//
	// 172.16.XX.XX
	HostPublicAddress *string `json:"HostPublicAddress,omitempty" xml:"HostPublicAddress,omitempty"`
	// The ID of the bastion host in which you want to create the host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the region to which the ECS instance or the host in an ApsaraDB MyBase dedicated cluster belongs.
	//
	// > This parameter is required if the **Source*	- parameter is set to **Ecs*	- or **Rds**.
	//
	// example:
	//
	// cn-hangzhou
	InstanceRegionId *string `json:"InstanceRegionId,omitempty" xml:"InstanceRegionId,omitempty"`
	// The ID of the network domain to which the host to be imported belongs.
	//
	// > You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.
	//
	// example:
	//
	// 1
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The operating system of the host that you want to create. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// This parameter is required.
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The region ID of the bastion host to which you want to import the host.
	//
	// > For information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The source of the host that you want to create. Valid values:
	//
	// 	- **Local**: a host in a data center
	//
	// 	- **Ecs**: an Elastic Compute Service (ECS) instance
	//
	// 	- **Rds**: a host in an ApsaraDB MyBase dedicated cluster
	//
	// This parameter is required.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster.
	//
	// > This parameter is required if the **Source*	- parameter is set to **Ecs*	- or **Rds**.
	//
	// example:
	//
	// i-dfabfda
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
}

func (s CreateHostRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHostRequest) GoString() string {
	return s.String()
}

func (s *CreateHostRequest) SetActiveAddressType(v string) *CreateHostRequest {
	s.ActiveAddressType = &v
	return s
}

func (s *CreateHostRequest) SetComment(v string) *CreateHostRequest {
	s.Comment = &v
	return s
}

func (s *CreateHostRequest) SetHostName(v string) *CreateHostRequest {
	s.HostName = &v
	return s
}

func (s *CreateHostRequest) SetHostPrivateAddress(v string) *CreateHostRequest {
	s.HostPrivateAddress = &v
	return s
}

func (s *CreateHostRequest) SetHostPublicAddress(v string) *CreateHostRequest {
	s.HostPublicAddress = &v
	return s
}

func (s *CreateHostRequest) SetInstanceId(v string) *CreateHostRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateHostRequest) SetInstanceRegionId(v string) *CreateHostRequest {
	s.InstanceRegionId = &v
	return s
}

func (s *CreateHostRequest) SetNetworkDomainId(v string) *CreateHostRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *CreateHostRequest) SetOSType(v string) *CreateHostRequest {
	s.OSType = &v
	return s
}

func (s *CreateHostRequest) SetRegionId(v string) *CreateHostRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHostRequest) SetSource(v string) *CreateHostRequest {
	s.Source = &v
	return s
}

func (s *CreateHostRequest) SetSourceInstanceId(v string) *CreateHostRequest {
	s.SourceInstanceId = &v
	return s
}

type CreateHostResponseBody struct {
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHostResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHostResponseBody) SetHostId(v string) *CreateHostResponseBody {
	s.HostId = &v
	return s
}

func (s *CreateHostResponseBody) SetRequestId(v string) *CreateHostResponseBody {
	s.RequestId = &v
	return s
}

type CreateHostResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHostResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHostResponse) GoString() string {
	return s.String()
}

func (s *CreateHostResponse) SetHeaders(v map[string]*string) *CreateHostResponse {
	s.Headers = v
	return s
}

func (s *CreateHostResponse) SetStatusCode(v int32) *CreateHostResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHostResponse) SetBody(v *CreateHostResponseBody) *CreateHostResponse {
	s.Body = v
	return s
}

type CreateHostAccountRequest struct {
	// The name of the host account. The name can be up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// abc
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host to which you want to add a host account.
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the shared key.
	//
	// example:
	//
	// 1
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The ID of the bastion host in which you want to add a host account to the host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The passphrase for the private key of the host account.
	//
	// > You can configure this parameter only if ProtocolName is set to SSH. You do not need to configure this parameter if ProtocolName is set to RDP.
	//
	// example:
	//
	// ****
	PassPhrase *string `json:"PassPhrase,omitempty" xml:"PassPhrase,omitempty"`
	// The password of the host account.
	//
	// example:
	//
	// ****
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The private key of the host account. Specify a Base64-encoded string.
	//
	// > This parameter is valid only if ProtocolName is set to SSH. You do not need to configure this parameter if ProtocolName is set to RDP. You can configure a password and a private key for the host account at the same time. If both a password and a private key are configured for the host account, Bastionhost preferentially uses the private key for logon.
	//
	// example:
	//
	// ****
	PrivateKey *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	// The protocol of the host to which you want to add a host account.
	//
	// Valid values:
	//
	// 	- SSH
	//
	// 	- RDP
	//
	// This parameter is required.
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
	// The region ID of the bastion host in which you want to add a host account to the host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateHostAccountRequest) SetHostAccountName(v string) *CreateHostAccountRequest {
	s.HostAccountName = &v
	return s
}

func (s *CreateHostAccountRequest) SetHostId(v string) *CreateHostAccountRequest {
	s.HostId = &v
	return s
}

func (s *CreateHostAccountRequest) SetHostShareKeyId(v string) *CreateHostAccountRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *CreateHostAccountRequest) SetInstanceId(v string) *CreateHostAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateHostAccountRequest) SetPassPhrase(v string) *CreateHostAccountRequest {
	s.PassPhrase = &v
	return s
}

func (s *CreateHostAccountRequest) SetPassword(v string) *CreateHostAccountRequest {
	s.Password = &v
	return s
}

func (s *CreateHostAccountRequest) SetPrivateKey(v string) *CreateHostAccountRequest {
	s.PrivateKey = &v
	return s
}

func (s *CreateHostAccountRequest) SetProtocolName(v string) *CreateHostAccountRequest {
	s.ProtocolName = &v
	return s
}

func (s *CreateHostAccountRequest) SetRegionId(v string) *CreateHostAccountRequest {
	s.RegionId = &v
	return s
}

type CreateHostAccountResponseBody struct {
	// The operation that you want to perform. Set the value to **CreateHostAccount**.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHostAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHostAccountResponseBody) SetHostAccountId(v string) *CreateHostAccountResponseBody {
	s.HostAccountId = &v
	return s
}

func (s *CreateHostAccountResponseBody) SetRequestId(v string) *CreateHostAccountResponseBody {
	s.RequestId = &v
	return s
}

type CreateHostAccountResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHostAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateHostAccountResponse) SetHeaders(v map[string]*string) *CreateHostAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateHostAccountResponse) SetStatusCode(v int32) *CreateHostAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHostAccountResponse) SetBody(v *CreateHostAccountResponseBody) *CreateHostAccountResponse {
	s.Body = v
	return s
}

type CreateHostGroupRequest struct {
	// The remarks of the asset group. The remarks can be up to 500 characters in length.
	//
	// example:
	//
	// Local host group.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The name of the asset group. The name can be up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// HostGroup01
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	// The ID of the bastion host on which you want to create an asset group.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host on which you want to create an asset group.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHostGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateHostGroupRequest) SetComment(v string) *CreateHostGroupRequest {
	s.Comment = &v
	return s
}

func (s *CreateHostGroupRequest) SetHostGroupName(v string) *CreateHostGroupRequest {
	s.HostGroupName = &v
	return s
}

func (s *CreateHostGroupRequest) SetInstanceId(v string) *CreateHostGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateHostGroupRequest) SetRegionId(v string) *CreateHostGroupRequest {
	s.RegionId = &v
	return s
}

type CreateHostGroupResponseBody struct {
	// The asset group ID.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHostGroupResponseBody) SetHostGroupId(v string) *CreateHostGroupResponseBody {
	s.HostGroupId = &v
	return s
}

func (s *CreateHostGroupResponseBody) SetRequestId(v string) *CreateHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateHostGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHostGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateHostGroupResponse) SetHeaders(v map[string]*string) *CreateHostGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateHostGroupResponse) SetStatusCode(v int32) *CreateHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHostGroupResponse) SetBody(v *CreateHostGroupResponseBody) *CreateHostGroupResponse {
	s.Body = v
	return s
}

type CreateHostShareKeyRequest struct {
	// The name of the shared key that you want to create. The name can be a maximum of 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// name
	HostShareKeyName *string `json:"HostShareKeyName,omitempty" xml:"HostShareKeyName,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The password of the private key. The value is a Base64-encoded string.
	//
	// example:
	//
	// *****
	PassPhrase *string `json:"PassPhrase,omitempty" xml:"PassPhrase,omitempty"`
	// The private key. The value is a Base64-encoded string.
	//
	// >  You can specify a Rivest-Shamir-Adleman (RSA) key that is generated by using the ssh-keygen command or a key that is generated by using the Ed25519 algorithm.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****
	PrivateKey *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateHostShareKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHostShareKeyRequest) GoString() string {
	return s.String()
}

func (s *CreateHostShareKeyRequest) SetHostShareKeyName(v string) *CreateHostShareKeyRequest {
	s.HostShareKeyName = &v
	return s
}

func (s *CreateHostShareKeyRequest) SetInstanceId(v string) *CreateHostShareKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateHostShareKeyRequest) SetPassPhrase(v string) *CreateHostShareKeyRequest {
	s.PassPhrase = &v
	return s
}

func (s *CreateHostShareKeyRequest) SetPrivateKey(v string) *CreateHostShareKeyRequest {
	s.PrivateKey = &v
	return s
}

func (s *CreateHostShareKeyRequest) SetRegionId(v string) *CreateHostShareKeyRequest {
	s.RegionId = &v
	return s
}

type CreateHostShareKeyResponseBody struct {
	// The ID of the shared key.
	//
	// example:
	//
	// 10235
	HostShareKeyId *int64 `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHostShareKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHostShareKeyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHostShareKeyResponseBody) SetHostShareKeyId(v int64) *CreateHostShareKeyResponseBody {
	s.HostShareKeyId = &v
	return s
}

func (s *CreateHostShareKeyResponseBody) SetRequestId(v string) *CreateHostShareKeyResponseBody {
	s.RequestId = &v
	return s
}

type CreateHostShareKeyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHostShareKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHostShareKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHostShareKeyResponse) GoString() string {
	return s.String()
}

func (s *CreateHostShareKeyResponse) SetHeaders(v map[string]*string) *CreateHostShareKeyResponse {
	s.Headers = v
	return s
}

func (s *CreateHostShareKeyResponse) SetStatusCode(v int32) *CreateHostShareKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHostShareKeyResponse) SetBody(v *CreateHostShareKeyResponseBody) *CreateHostShareKeyResponse {
	s.Body = v
	return s
}

type CreateNetworkDomainRequest struct {
	// The remarks of the network domain. The remarks can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host for which you want to create a network domain.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-lbj3bw4ma02
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the network domain that you want to create. The name can be up to 128 characters in length.
	//
	// This parameter is required.
	NetworkDomainName *string `json:"NetworkDomainName,omitempty" xml:"NetworkDomainName,omitempty"`
	// The connection mode of the network domain to be created. Valid values:
	//
	// 	- Direct
	//
	// 	- Proxy
	//
	// This parameter is required.
	//
	// example:
	//
	// Proxy
	NetworkDomainType *string `json:"NetworkDomainType,omitempty" xml:"NetworkDomainType,omitempty"`
	// The information about the proxy servers.
	Proxies []*CreateNetworkDomainRequestProxies `json:"Proxies,omitempty" xml:"Proxies,omitempty" type:"Repeated"`
	// The region ID of the bastion host for which you want to create a network domain.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateNetworkDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkDomainRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkDomainRequest) SetComment(v string) *CreateNetworkDomainRequest {
	s.Comment = &v
	return s
}

func (s *CreateNetworkDomainRequest) SetInstanceId(v string) *CreateNetworkDomainRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateNetworkDomainRequest) SetNetworkDomainName(v string) *CreateNetworkDomainRequest {
	s.NetworkDomainName = &v
	return s
}

func (s *CreateNetworkDomainRequest) SetNetworkDomainType(v string) *CreateNetworkDomainRequest {
	s.NetworkDomainType = &v
	return s
}

func (s *CreateNetworkDomainRequest) SetProxies(v []*CreateNetworkDomainRequestProxies) *CreateNetworkDomainRequest {
	s.Proxies = v
	return s
}

func (s *CreateNetworkDomainRequest) SetRegionId(v string) *CreateNetworkDomainRequest {
	s.RegionId = &v
	return s
}

type CreateNetworkDomainRequestProxies struct {
	// The IP address of the proxy server.
	//
	// example:
	//
	// ``47.104.**.**``
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The node type of the proxy server. Valid values:
	//
	// - **Master**: primary proxy server.
	//
	// - **Slave**: secondary proxy server.
	//
	// example:
	//
	// Master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// The Base64-encoded password of the proxy server.
	//
	// example:
	//
	// ***
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The port of the proxy server.
	//
	// example:
	//
	// 22
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The proxy type. Valid values:
	//
	// - **SSHProxy**
	//
	// - **HTTPProxy**
	//
	// - **Socks5Proxy**
	//
	// example:
	//
	// SSHProxy
	ProxyType *string `json:"ProxyType,omitempty" xml:"ProxyType,omitempty"`
	// The username of the proxy server.
	//
	// example:
	//
	// root
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s CreateNetworkDomainRequestProxies) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkDomainRequestProxies) GoString() string {
	return s.String()
}

func (s *CreateNetworkDomainRequestProxies) SetAddress(v string) *CreateNetworkDomainRequestProxies {
	s.Address = &v
	return s
}

func (s *CreateNetworkDomainRequestProxies) SetNodeType(v string) *CreateNetworkDomainRequestProxies {
	s.NodeType = &v
	return s
}

func (s *CreateNetworkDomainRequestProxies) SetPassword(v string) *CreateNetworkDomainRequestProxies {
	s.Password = &v
	return s
}

func (s *CreateNetworkDomainRequestProxies) SetPort(v int32) *CreateNetworkDomainRequestProxies {
	s.Port = &v
	return s
}

func (s *CreateNetworkDomainRequestProxies) SetProxyType(v string) *CreateNetworkDomainRequestProxies {
	s.ProxyType = &v
	return s
}

func (s *CreateNetworkDomainRequestProxies) SetUser(v string) *CreateNetworkDomainRequestProxies {
	s.User = &v
	return s
}

type CreateNetworkDomainResponseBody struct {
	// The ID of the network domain.
	//
	// example:
	//
	// 31
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A2873E9C-A7EA-5735-845C-65D3792623D2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkDomainResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkDomainResponseBody) SetNetworkDomainId(v string) *CreateNetworkDomainResponseBody {
	s.NetworkDomainId = &v
	return s
}

func (s *CreateNetworkDomainResponseBody) SetRequestId(v string) *CreateNetworkDomainResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkDomainResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNetworkDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNetworkDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkDomainResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkDomainResponse) SetHeaders(v map[string]*string) *CreateNetworkDomainResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkDomainResponse) SetStatusCode(v int32) *CreateNetworkDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkDomainResponse) SetBody(v *CreateNetworkDomainResponseBody) *CreateNetworkDomainResponse {
	s.Body = v
	return s
}

type CreateOperationTicketRequest struct {
	// This parameter is required.
	ApproveComment *string `json:"ApproveComment,omitempty" xml:"ApproveComment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// root
	AssetAccountName *string `json:"AssetAccountName,omitempty" xml:"AssetAccountName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	AssetId *string `json:"AssetId,omitempty" xml:"AssetId,omitempty"`
	// example:
	//
	// 1679393152
	EffectEndTime *int64 `json:"EffectEndTime,omitempty" xml:"EffectEndTime,omitempty"`
	// example:
	//
	// 1685600242
	EffectStartTime *int64 `json:"EffectStartTime,omitempty" xml:"EffectStartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// false
	IsOneTimeEffect *bool `json:"IsOneTimeEffect,omitempty" xml:"IsOneTimeEffect,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateOperationTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOperationTicketRequest) GoString() string {
	return s.String()
}

func (s *CreateOperationTicketRequest) SetApproveComment(v string) *CreateOperationTicketRequest {
	s.ApproveComment = &v
	return s
}

func (s *CreateOperationTicketRequest) SetAssetAccountName(v string) *CreateOperationTicketRequest {
	s.AssetAccountName = &v
	return s
}

func (s *CreateOperationTicketRequest) SetAssetId(v string) *CreateOperationTicketRequest {
	s.AssetId = &v
	return s
}

func (s *CreateOperationTicketRequest) SetEffectEndTime(v int64) *CreateOperationTicketRequest {
	s.EffectEndTime = &v
	return s
}

func (s *CreateOperationTicketRequest) SetEffectStartTime(v int64) *CreateOperationTicketRequest {
	s.EffectStartTime = &v
	return s
}

func (s *CreateOperationTicketRequest) SetInstanceId(v string) *CreateOperationTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateOperationTicketRequest) SetIsOneTimeEffect(v bool) *CreateOperationTicketRequest {
	s.IsOneTimeEffect = &v
	return s
}

func (s *CreateOperationTicketRequest) SetProtocolName(v string) *CreateOperationTicketRequest {
	s.ProtocolName = &v
	return s
}

func (s *CreateOperationTicketRequest) SetRegionId(v string) *CreateOperationTicketRequest {
	s.RegionId = &v
	return s
}

type CreateOperationTicketResponseBody struct {
	// example:
	//
	// 2
	OperationTicketId *string `json:"OperationTicketId,omitempty" xml:"OperationTicketId,omitempty"`
	// example:
	//
	// 0ECCC399-4D35-48A7-8379-5C6180E66235
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOperationTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOperationTicketResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOperationTicketResponseBody) SetOperationTicketId(v string) *CreateOperationTicketResponseBody {
	s.OperationTicketId = &v
	return s
}

func (s *CreateOperationTicketResponseBody) SetRequestId(v string) *CreateOperationTicketResponseBody {
	s.RequestId = &v
	return s
}

type CreateOperationTicketResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOperationTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOperationTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOperationTicketResponse) GoString() string {
	return s.String()
}

func (s *CreateOperationTicketResponse) SetHeaders(v map[string]*string) *CreateOperationTicketResponse {
	s.Headers = v
	return s
}

func (s *CreateOperationTicketResponse) SetStatusCode(v int32) *CreateOperationTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOperationTicketResponse) SetBody(v *CreateOperationTicketResponseBody) *CreateOperationTicketResponse {
	s.Body = v
	return s
}

type CreatePolicyRequest struct {
	// The remarks of the control policy. The remarks can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host for which you want to create a control policy.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-20p364c1w0g
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the control policy. The name can be up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// policytest
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The priority of the control policy.
	//
	// 	- Valid values: 1 to 100. The default value is 1, which indicates the highest priority.
	//
	// 	- You can configure the same priority for different control policies. If multiple control policies have the same priority, the control policy that is created at the latest point in time has the highest priority. If a command control policy and a command approval policy contain the same commands, the commands are prioritized in descending order: reject, allow, and approve. In access control policies, a blacklist has a higher priority than a whitelist.
	//
	// example:
	//
	// 1
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The region ID of the bastion host for which you want to create a control policy.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreatePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyRequest) GoString() string {
	return s.String()
}

func (s *CreatePolicyRequest) SetComment(v string) *CreatePolicyRequest {
	s.Comment = &v
	return s
}

func (s *CreatePolicyRequest) SetInstanceId(v string) *CreatePolicyRequest {
	s.InstanceId = &v
	return s
}

func (s *CreatePolicyRequest) SetPolicyName(v string) *CreatePolicyRequest {
	s.PolicyName = &v
	return s
}

func (s *CreatePolicyRequest) SetPriority(v string) *CreatePolicyRequest {
	s.Priority = &v
	return s
}

func (s *CreatePolicyRequest) SetRegionId(v string) *CreatePolicyRequest {
	s.RegionId = &v
	return s
}

type CreatePolicyResponseBody struct {
	// The control policy ID.
	//
	// example:
	//
	// 1
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7E68165E-1191-5CC2-B54B-5EF7390A5400
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePolicyResponseBody) SetPolicyId(v string) *CreatePolicyResponseBody {
	s.PolicyId = &v
	return s
}

func (s *CreatePolicyResponseBody) SetRequestId(v string) *CreatePolicyResponseBody {
	s.RequestId = &v
	return s
}

type CreatePolicyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyResponse) GoString() string {
	return s.String()
}

func (s *CreatePolicyResponse) SetHeaders(v map[string]*string) *CreatePolicyResponse {
	s.Headers = v
	return s
}

func (s *CreatePolicyResponse) SetStatusCode(v int32) *CreatePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePolicyResponse) SetBody(v *CreatePolicyResponseBody) *CreatePolicyResponse {
	s.Body = v
	return s
}

type CreateRuleRequest struct {
	// The remarks of the authorization rule. The remarks can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The information about the database that runs on your server.
	Databases []*CreateRuleRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The end time of the validity period of the authorization rule. Specify a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1672502400
	EffectiveEndTime *int64 `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The start time of the validity period of the authorization rule. Specify a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1669630029
	EffectiveStartTime *int64 `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The information about the asset group that you want to authorize to manage.
	HostGroups []*CreateRuleRequestHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// The host information.
	Hosts []*CreateRuleRequestHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-5yd2ymfsa0e
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the authorization rule. The name can be up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// An array that consists of user group IDs.
	UserGroupIds []*string `json:"UserGroupIds,omitempty" xml:"UserGroupIds,omitempty" type:"Repeated"`
	// An array that consists of user IDs.
	UserIds []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s CreateRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateRuleRequest) SetComment(v string) *CreateRuleRequest {
	s.Comment = &v
	return s
}

func (s *CreateRuleRequest) SetDatabases(v []*CreateRuleRequestDatabases) *CreateRuleRequest {
	s.Databases = v
	return s
}

func (s *CreateRuleRequest) SetEffectiveEndTime(v int64) *CreateRuleRequest {
	s.EffectiveEndTime = &v
	return s
}

func (s *CreateRuleRequest) SetEffectiveStartTime(v int64) *CreateRuleRequest {
	s.EffectiveStartTime = &v
	return s
}

func (s *CreateRuleRequest) SetHostGroups(v []*CreateRuleRequestHostGroups) *CreateRuleRequest {
	s.HostGroups = v
	return s
}

func (s *CreateRuleRequest) SetHosts(v []*CreateRuleRequestHosts) *CreateRuleRequest {
	s.Hosts = v
	return s
}

func (s *CreateRuleRequest) SetInstanceId(v string) *CreateRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateRuleRequest) SetRegionId(v string) *CreateRuleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRuleRequest) SetRuleName(v string) *CreateRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateRuleRequest) SetUserGroupIds(v []*string) *CreateRuleRequest {
	s.UserGroupIds = v
	return s
}

func (s *CreateRuleRequest) SetUserIds(v []*string) *CreateRuleRequest {
	s.UserIds = v
	return s
}

type CreateRuleRequestDatabases struct {
	// An array that consists of database account IDs.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The database ID.
	//
	// example:
	//
	// [
	//
	//     {
	//
	//         "DatabaseId": "1"
	//
	//     }
	//
	// ]
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s CreateRuleRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleRequestDatabases) GoString() string {
	return s.String()
}

func (s *CreateRuleRequestDatabases) SetDatabaseAccountIds(v []*string) *CreateRuleRequestDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *CreateRuleRequestDatabases) SetDatabaseId(v string) *CreateRuleRequestDatabases {
	s.DatabaseId = &v
	return s
}

type CreateRuleRequestHostGroups struct {
	// An array that consists of asset account names.
	HostAccountNames []*string `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The asset group ID.
	//
	// example:
	//
	// [{"HostGroupId":"1"}]
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
}

func (s CreateRuleRequestHostGroups) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleRequestHostGroups) GoString() string {
	return s.String()
}

func (s *CreateRuleRequestHostGroups) SetHostAccountNames(v []*string) *CreateRuleRequestHostGroups {
	s.HostAccountNames = v
	return s
}

func (s *CreateRuleRequestHostGroups) SetHostGroupId(v string) *CreateRuleRequestHostGroups {
	s.HostGroupId = &v
	return s
}

type CreateRuleRequestHosts struct {
	// An array that consists of host account IDs.
	HostAccountIds []*string `json:"HostAccountIds,omitempty" xml:"HostAccountIds,omitempty" type:"Repeated"`
	// The host ID.
	//
	// example:
	//
	// [{"HostId":"1"}]
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s CreateRuleRequestHosts) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleRequestHosts) GoString() string {
	return s.String()
}

func (s *CreateRuleRequestHosts) SetHostAccountIds(v []*string) *CreateRuleRequestHosts {
	s.HostAccountIds = v
	return s
}

func (s *CreateRuleRequestHosts) SetHostId(v string) *CreateRuleRequestHosts {
	s.HostId = &v
	return s
}

type CreateRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// BFA818E3-0A53-51F4-8DB5-AF2A62A6D042
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The authorization rule ID.
	//
	// example:
	//
	// 1
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s CreateRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRuleResponseBody) SetRequestId(v string) *CreateRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRuleResponseBody) SetRuleId(v string) *CreateRuleResponseBody {
	s.RuleId = &v
	return s
}

type CreateRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateRuleResponse) SetHeaders(v map[string]*string) *CreateRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateRuleResponse) SetStatusCode(v int32) *CreateRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRuleResponse) SetBody(v *CreateRuleResponseBody) *CreateRuleResponse {
	s.Body = v
	return s
}

type CreateUserRequest struct {
	// The remarks of the user that you want to add. The remarks can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The display name of the user that you want to add. The display name can be up to 128 characters in length.
	//
	// >  If you leave this parameter empty, the logon name is used as the display name.
	//
	// example:
	//
	// Bob
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The end time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1672502400
	EffectiveEndTime *int64 `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The start time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1669630029
	EffectiveStartTime *int64 `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The email address of the user that you want to add.
	//
	// >
	//
	// 	- This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to email, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to email in the global two-factor authentication settings.
	//
	// 	- You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.
	//
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The ID of the bastion host to which you want to add a user.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required if LanguageStatus is set to Custom. Valid values:
	//
	// 	- **zh-cn**: simplified Chinese.
	//
	// 	- **en**: English.
	//
	// example:
	//
	// en
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// Specifies whether to send notifications in the language specified in the global settings or a custom language.
	//
	// 	- **Global**
	//
	// 	- **Custom**
	//
	// >  If you leave this parameter empty, the default value Global is used.
	//
	// example:
	//
	// Custom
	LanguageStatus *string `json:"LanguageStatus,omitempty" xml:"LanguageStatus,omitempty"`
	// The mobile phone number of the user that you want to add.
	//
	// >
	//
	// 	- This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to sms or dingtalk, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to sms or dingtalk in the global two-factor authentication settings.
	//
	// 	- You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.
	//
	// example:
	//
	// 1359999****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// The location where the mobile phone number of the user is registered. Default value: CN. Valid values:
	//
	// 	- **CN**: the Chinese mainland, whose international dialing code is +86.
	//
	// 	- **HK**: Hong Kong (China), whose international dialing code is +852.
	//
	// 	- **MO**: Macao (China), whose international dialing code is +853.
	//
	// 	- **TW**: Taiwan (China), whose international dialing code is +886.
	//
	// 	- **RU**: Russia, whose international dialing code is +7.
	//
	// 	- **SG**: Singapore, whose international dialing code is +65.
	//
	// 	- **MY**: Malaysia, whose international dialing code is +60.
	//
	// 	- **ID**: Indonesia, whose international dialing code is +62.
	//
	// 	- **DE**: Germany, whose international dialing code is +49.
	//
	// 	- **AU**: Australia, whose international dialing code is +61.
	//
	// 	- **US**: US, whose international dialing code is +1.
	//
	// 	- **AE**: United Arab Emirates, whose international dialing code is +971.
	//
	// 	- **JP**: Japan, whose international dialing code is +81.
	//
	// 	- **GB**: UK, whose international dialing code is +44.
	//
	// 	- **IN**: India, whose international dialing code is +91.
	//
	// 	- **KR**: Republic of Korea, whose international dialing code is +82.
	//
	// 	- **PH**: Philippines, whose international dialing code is +63.
	//
	// 	- **CH**: Switzerland, whose international dialing code is +41.
	//
	// 	- **SE:*	- Sweden, whose international dialing code is +46.
	//
	// 	- **SA:*	- Saudi Arabia, whose international dialing code is +966.
	//
	// example:
	//
	// CN
	MobileCountryCode *string `json:"MobileCountryCode,omitempty" xml:"MobileCountryCode,omitempty"`
	// Specifies whether password reset is required upon the next logon. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  If you leave this parameter empty, the default value false is used.
	//
	// example:
	//
	// true
	NeedResetPassword *bool `json:"NeedResetPassword,omitempty" xml:"NeedResetPassword,omitempty"`
	// The logon password of the user that you want to add. The logon password must be 8 to 128 characters in length. It must contain uppercase letters, lowercase letters, digits, and special characters.
	//
	// > This parameter is required if Source is set to Local.
	//
	// example:
	//
	// 213****
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID of the bastion host to which you want to add a user.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the user that you want to add. Valid values:
	//
	// 	- **Local**: a local user.
	//
	// 	- **Ram**: a RAM user.
	//
	// 	- **AD**: an AD-authenticated user.
	//
	// 	- **LDAP**: an LDAP-authenticated user.
	//
	// This parameter is required.
	//
	// example:
	//
	// local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The unique ID of the user that you want to add.
	//
	// >
	//
	// 	- This parameter uniquely identifies a RAM user of the bastion host. This parameter is required if Source is set to Ram. You can call the [ListUsers](https://help.aliyun.com/document_detail/28684.html) operation in RAM to obtain the unique ID of the user from the UserId response parameter.
	//
	// 	- This parameter is required if Source is set to AD or LDAP. Specify the distinguished name (DN) of the Active Directory (AD)-authenticated user or Lightweight Directory Access Protocol (LDAP)-authenticated user that you want to add.
	//
	// example:
	//
	// 122748924538****
	SourceUserId *string `json:"SourceUserId,omitempty" xml:"SourceUserId,omitempty"`
	// The two-factor authentication method. You can select only one method. Valid values:
	//
	// 	- **sms**: text message-based two-factor authentication.
	//
	// 	- **email**: email-based two-factor authentication.
	//
	// 	- **dingtalk**: DingTalk-based two-factor authentication.
	//
	// 	- **totp OTP**: one-time password (OTP) token-based two-factor authentication.
	//
	// >  If TwoFactorStatus is set to Enable, you must select one of the preceding values for TwoFactorMethods.
	//
	// example:
	//
	// ["sms"]
	TwoFactorMethods *string `json:"TwoFactorMethods,omitempty" xml:"TwoFactorMethods,omitempty"`
	// Specifies whether two-factor authentication is enabled for the user. Valid values:
	//
	// 	- **Global**: The global settings apply.
	//
	// 	- **Disable**: Two-factor authentication is disabled.
	//
	// 	- **Enable**: Two-factor authentication is enabled and user-specific settings apply.
	//
	// >  If you leave this parameter empty, the default value Global is used.
	//
	// example:
	//
	// Enable
	TwoFactorStatus *string `json:"TwoFactorStatus,omitempty" xml:"TwoFactorStatus,omitempty"`
	// The logon name of the user that you want to add. The logon name must be 1 to 128 characters in length and can contain only letters, digits, and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// abc_def
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserRequest) GoString() string {
	return s.String()
}

func (s *CreateUserRequest) SetComment(v string) *CreateUserRequest {
	s.Comment = &v
	return s
}

func (s *CreateUserRequest) SetDisplayName(v string) *CreateUserRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateUserRequest) SetEffectiveEndTime(v int64) *CreateUserRequest {
	s.EffectiveEndTime = &v
	return s
}

func (s *CreateUserRequest) SetEffectiveStartTime(v int64) *CreateUserRequest {
	s.EffectiveStartTime = &v
	return s
}

func (s *CreateUserRequest) SetEmail(v string) *CreateUserRequest {
	s.Email = &v
	return s
}

func (s *CreateUserRequest) SetInstanceId(v string) *CreateUserRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateUserRequest) SetLanguage(v string) *CreateUserRequest {
	s.Language = &v
	return s
}

func (s *CreateUserRequest) SetLanguageStatus(v string) *CreateUserRequest {
	s.LanguageStatus = &v
	return s
}

func (s *CreateUserRequest) SetMobile(v string) *CreateUserRequest {
	s.Mobile = &v
	return s
}

func (s *CreateUserRequest) SetMobileCountryCode(v string) *CreateUserRequest {
	s.MobileCountryCode = &v
	return s
}

func (s *CreateUserRequest) SetNeedResetPassword(v bool) *CreateUserRequest {
	s.NeedResetPassword = &v
	return s
}

func (s *CreateUserRequest) SetPassword(v string) *CreateUserRequest {
	s.Password = &v
	return s
}

func (s *CreateUserRequest) SetRegionId(v string) *CreateUserRequest {
	s.RegionId = &v
	return s
}

func (s *CreateUserRequest) SetSource(v string) *CreateUserRequest {
	s.Source = &v
	return s
}

func (s *CreateUserRequest) SetSourceUserId(v string) *CreateUserRequest {
	s.SourceUserId = &v
	return s
}

func (s *CreateUserRequest) SetTwoFactorMethods(v string) *CreateUserRequest {
	s.TwoFactorMethods = &v
	return s
}

func (s *CreateUserRequest) SetTwoFactorStatus(v string) *CreateUserRequest {
	s.TwoFactorStatus = &v
	return s
}

func (s *CreateUserRequest) SetUserName(v string) *CreateUserRequest {
	s.UserName = &v
	return s
}

type CreateUserResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the user that is added.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserResponseBody) SetRequestId(v string) *CreateUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUserResponseBody) SetUserId(v string) *CreateUserResponseBody {
	s.UserId = &v
	return s
}

type CreateUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponse) GoString() string {
	return s.String()
}

func (s *CreateUserResponse) SetHeaders(v map[string]*string) *CreateUserResponse {
	s.Headers = v
	return s
}

func (s *CreateUserResponse) SetStatusCode(v int32) *CreateUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUserResponse) SetBody(v *CreateUserResponseBody) *CreateUserResponse {
	s.Body = v
	return s
}

type CreateUserGroupRequest struct {
	// The description of the user group. The description can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host for which you want to create a user group.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to create a user group.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the user group that you want to create. This name can be a up to 128 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// group
	UserGroupName *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s CreateUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateUserGroupRequest) SetComment(v string) *CreateUserGroupRequest {
	s.Comment = &v
	return s
}

func (s *CreateUserGroupRequest) SetInstanceId(v string) *CreateUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateUserGroupRequest) SetRegionId(v string) *CreateUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateUserGroupRequest) SetUserGroupName(v string) *CreateUserGroupRequest {
	s.UserGroupName = &v
	return s
}

type CreateUserGroupResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the user group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s CreateUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserGroupResponseBody) SetRequestId(v string) *CreateUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUserGroupResponseBody) SetUserGroupId(v string) *CreateUserGroupResponseBody {
	s.UserGroupId = &v
	return s
}

type CreateUserGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateUserGroupResponse) SetHeaders(v map[string]*string) *CreateUserGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateUserGroupResponse) SetStatusCode(v int32) *CreateUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUserGroupResponse) SetBody(v *CreateUserGroupResponseBody) *CreateUserGroupResponse {
	s.Body = v
	return s
}

type CreateUserPublicKeyRequest struct {
	// The description of the public key. The description can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host on which you want to create a public key for the user.
	//
	// > You can call the [listinstances](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The public key. Encode the value by using the Base64 algorithm.
	//
	// This parameter is required.
	//
	// example:
	//
	// c3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSUxGQnQxUUpyT3IxK2hTTGRkbERMZUx4WGRIZ3hBalBxWHJIbWNFNWxqSk8gbm93Y29kZXJAbm93Y29kZXJkZU1hY0Jvb2stUHJvLmxvY2Fs
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The name of the public key.
	//
	// This parameter is required.
	//
	// example:
	//
	// Public key of a user
	PublicKeyName *string `json:"PublicKeyName,omitempty" xml:"PublicKeyName,omitempty"`
	// Specifies the region ID of the bastion host on which you want to create a public key for the user.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user for whom you want to create a public key.
	//
	// >  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateUserPublicKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserPublicKeyRequest) GoString() string {
	return s.String()
}

func (s *CreateUserPublicKeyRequest) SetComment(v string) *CreateUserPublicKeyRequest {
	s.Comment = &v
	return s
}

func (s *CreateUserPublicKeyRequest) SetInstanceId(v string) *CreateUserPublicKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateUserPublicKeyRequest) SetPublicKey(v string) *CreateUserPublicKeyRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateUserPublicKeyRequest) SetPublicKeyName(v string) *CreateUserPublicKeyRequest {
	s.PublicKeyName = &v
	return s
}

func (s *CreateUserPublicKeyRequest) SetRegionId(v string) *CreateUserPublicKeyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateUserPublicKeyRequest) SetUserId(v string) *CreateUserPublicKeyRequest {
	s.UserId = &v
	return s
}

type CreateUserPublicKeyResponseBody struct {
	// The ID of the public key.
	//
	// example:
	//
	// 1
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 5EAB922E-F476-5DFA-9290-313C608E724B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUserPublicKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserPublicKeyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserPublicKeyResponseBody) SetPublicKeyId(v string) *CreateUserPublicKeyResponseBody {
	s.PublicKeyId = &v
	return s
}

func (s *CreateUserPublicKeyResponseBody) SetRequestId(v string) *CreateUserPublicKeyResponseBody {
	s.RequestId = &v
	return s
}

type CreateUserPublicKeyResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUserPublicKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUserPublicKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserPublicKeyResponse) GoString() string {
	return s.String()
}

func (s *CreateUserPublicKeyResponse) SetHeaders(v map[string]*string) *CreateUserPublicKeyResponse {
	s.Headers = v
	return s
}

func (s *CreateUserPublicKeyResponse) SetStatusCode(v int32) *CreateUserPublicKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUserPublicKeyResponse) SetBody(v *CreateUserPublicKeyResponseBody) *CreateUserPublicKeyResponse {
	s.Body = v
	return s
}

type DeleteDatabaseRequest struct {
	// The ID of the database that you want to delete.
	//
	// > You can call the [ListDatabases](https://help.aliyun.com/document_detail/2758822.html) operation to query the database ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 11
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The ID of the bastion host from which you want to delete the database.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseRequest) SetDatabaseId(v string) *DeleteDatabaseRequest {
	s.DatabaseId = &v
	return s
}

func (s *DeleteDatabaseRequest) SetInstanceId(v string) *DeleteDatabaseRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDatabaseRequest) SetRegionId(v string) *DeleteDatabaseRequest {
	s.RegionId = &v
	return s
}

type DeleteDatabaseResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 81500666-d7f5-4143-8329-0223cc738105
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseResponseBody) SetRequestId(v string) *DeleteDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatabaseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseResponse) SetHeaders(v map[string]*string) *DeleteDatabaseResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatabaseResponse) SetStatusCode(v int32) *DeleteDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatabaseResponse) SetBody(v *DeleteDatabaseResponseBody) *DeleteDatabaseResponse {
	s.Body = v
	return s
}

type DeleteDatabaseAccountRequest struct {
	// The ID of the database account that you want to delete.
	//
	// >  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The ID of the bastion host from which you want to delete the database account.
	//
	// > You can call the DescribeInstances operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host from which you want to delete the database account.
	//
	// > For more information about the mapping between region IDs and region names, [see Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseAccountRequest) SetDatabaseAccountId(v string) *DeleteDatabaseAccountRequest {
	s.DatabaseAccountId = &v
	return s
}

func (s *DeleteDatabaseAccountRequest) SetInstanceId(v string) *DeleteDatabaseAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDatabaseAccountRequest) SetRegionId(v string) *DeleteDatabaseAccountRequest {
	s.RegionId = &v
	return s
}

type DeleteDatabaseAccountResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 81500666-d7f5-4143-8329-0223cc738105
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatabaseAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseAccountResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseAccountResponseBody) SetRequestId(v string) *DeleteDatabaseAccountResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatabaseAccountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDatabaseAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseAccountResponse) SetHeaders(v map[string]*string) *DeleteDatabaseAccountResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatabaseAccountResponse) SetStatusCode(v int32) *DeleteDatabaseAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatabaseAccountResponse) SetBody(v *DeleteDatabaseAccountResponseBody) *DeleteDatabaseAccountResponse {
	s.Body = v
	return s
}

type DeleteHostRequest struct {
	// The ID of the host that you want to delete.
	//
	// > You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the bastion host on which you want to delete the host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host on which you want to delete the host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHostRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostRequest) GoString() string {
	return s.String()
}

func (s *DeleteHostRequest) SetHostId(v string) *DeleteHostRequest {
	s.HostId = &v
	return s
}

func (s *DeleteHostRequest) SetInstanceId(v string) *DeleteHostRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteHostRequest) SetRegionId(v string) *DeleteHostRequest {
	s.RegionId = &v
	return s
}

type DeleteHostResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHostResponseBody) SetRequestId(v string) *DeleteHostResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHostResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHostResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostResponse) GoString() string {
	return s.String()
}

func (s *DeleteHostResponse) SetHeaders(v map[string]*string) *DeleteHostResponse {
	s.Headers = v
	return s
}

func (s *DeleteHostResponse) SetStatusCode(v int32) *DeleteHostResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHostResponse) SetBody(v *DeleteHostResponseBody) *DeleteHostResponse {
	s.Body = v
	return s
}

type DeleteHostAccountRequest struct {
	// The ID of the host account that you want to remove.
	//
	// >  You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The ID of the bastion host from which you want to remove the host account.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host from which you want to remove the host account.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteHostAccountRequest) SetHostAccountId(v string) *DeleteHostAccountRequest {
	s.HostAccountId = &v
	return s
}

func (s *DeleteHostAccountRequest) SetInstanceId(v string) *DeleteHostAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteHostAccountRequest) SetRegionId(v string) *DeleteHostAccountRequest {
	s.RegionId = &v
	return s
}

type DeleteHostAccountResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHostAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAccountResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHostAccountResponseBody) SetRequestId(v string) *DeleteHostAccountResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHostAccountResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHostAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteHostAccountResponse) SetHeaders(v map[string]*string) *DeleteHostAccountResponse {
	s.Headers = v
	return s
}

func (s *DeleteHostAccountResponse) SetStatusCode(v int32) *DeleteHostAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHostAccountResponse) SetBody(v *DeleteHostAccountResponseBody) *DeleteHostAccountResponse {
	s.Body = v
	return s
}

type DeleteHostGroupRequest struct {
	// The ID of the asset group that you want to delete.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the bastion host whose asset group you want to delete.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host whose asset group you want to delete.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteHostGroupRequest) SetHostGroupId(v string) *DeleteHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *DeleteHostGroupRequest) SetInstanceId(v string) *DeleteHostGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteHostGroupRequest) SetRegionId(v string) *DeleteHostGroupRequest {
	s.RegionId = &v
	return s
}

type DeleteHostGroupResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHostGroupResponseBody) SetRequestId(v string) *DeleteHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHostGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteHostGroupResponse) SetHeaders(v map[string]*string) *DeleteHostGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteHostGroupResponse) SetStatusCode(v int32) *DeleteHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHostGroupResponse) SetBody(v *DeleteHostGroupResponseBody) *DeleteHostGroupResponse {
	s.Body = v
	return s
}

type DeleteHostShareKeyRequest struct {
	// The shared key ID.
	//
	// >  You must specify this parameter. You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.
	//
	// example:
	//
	// 11206
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHostShareKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostShareKeyRequest) GoString() string {
	return s.String()
}

func (s *DeleteHostShareKeyRequest) SetHostShareKeyId(v string) *DeleteHostShareKeyRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *DeleteHostShareKeyRequest) SetInstanceId(v string) *DeleteHostShareKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteHostShareKeyRequest) SetRegionId(v string) *DeleteHostShareKeyRequest {
	s.RegionId = &v
	return s
}

type DeleteHostShareKeyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHostShareKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostShareKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHostShareKeyResponseBody) SetRequestId(v string) *DeleteHostShareKeyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHostShareKeyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHostShareKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHostShareKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostShareKeyResponse) GoString() string {
	return s.String()
}

func (s *DeleteHostShareKeyResponse) SetHeaders(v map[string]*string) *DeleteHostShareKeyResponse {
	s.Headers = v
	return s
}

func (s *DeleteHostShareKeyResponse) SetStatusCode(v int32) *DeleteHostShareKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHostShareKeyResponse) SetBody(v *DeleteHostShareKeyResponseBody) *DeleteHostShareKeyResponse {
	s.Body = v
	return s
}

type DeleteNetworkDomainRequest struct {
	// The ID of the bastion host whose network domain you want to delete.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost_std_intl-sg-uq833e2dz02
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain to be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The region ID of the bastion host whose network domain you want to delete.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteNetworkDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkDomainRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkDomainRequest) SetInstanceId(v string) *DeleteNetworkDomainRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteNetworkDomainRequest) SetNetworkDomainId(v string) *DeleteNetworkDomainRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *DeleteNetworkDomainRequest) SetRegionId(v string) *DeleteNetworkDomainRequest {
	s.RegionId = &v
	return s
}

type DeleteNetworkDomainResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 66B9D942-E3C8-5068-A479-5A7B7BF3DE35
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkDomainResponseBody) SetRequestId(v string) *DeleteNetworkDomainResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkDomainResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNetworkDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNetworkDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkDomainResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkDomainResponse) SetHeaders(v map[string]*string) *DeleteNetworkDomainResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkDomainResponse) SetStatusCode(v int32) *DeleteNetworkDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkDomainResponse) SetBody(v *DeleteNetworkDomainResponseBody) *DeleteNetworkDomainResponse {
	s.Body = v
	return s
}

type DeletePolicyRequest struct {
	// The ID of the bastion host whose control policy you want to delete.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy to be deleted.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeletePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePolicyRequest) GoString() string {
	return s.String()
}

func (s *DeletePolicyRequest) SetInstanceId(v string) *DeletePolicyRequest {
	s.InstanceId = &v
	return s
}

func (s *DeletePolicyRequest) SetPolicyId(v string) *DeletePolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *DeletePolicyRequest) SetRegionId(v string) *DeletePolicyRequest {
	s.RegionId = &v
	return s
}

type DeletePolicyResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePolicyResponseBody) SetRequestId(v string) *DeletePolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeletePolicyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePolicyResponse) GoString() string {
	return s.String()
}

func (s *DeletePolicyResponse) SetHeaders(v map[string]*string) *DeletePolicyResponse {
	s.Headers = v
	return s
}

func (s *DeletePolicyResponse) SetStatusCode(v int32) *DeletePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePolicyResponse) SetBody(v *DeletePolicyResponseBody) *DeletePolicyResponse {
	s.Body = v
	return s
}

type DeleteRuleRequest struct {
	// The ID of the bastion host from which you want to delete the authorization rule.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host from which you want to delete the authorization rule.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the authorization rule that you want to delete.
	//
	// >  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteRuleRequest) SetInstanceId(v string) *DeleteRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteRuleRequest) SetRegionId(v string) *DeleteRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRuleRequest) SetRuleId(v string) *DeleteRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRuleResponseBody) SetRequestId(v string) *DeleteRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteRuleResponse) SetHeaders(v map[string]*string) *DeleteRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteRuleResponse) SetStatusCode(v int32) *DeleteRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRuleResponse) SetBody(v *DeleteRuleResponseBody) *DeleteRuleResponse {
	s.Body = v
	return s
}

type DeleteUserRequest struct {
	// The ID of the bastion host to which the user to be deleted belongs.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host to which the user to be deleted belongs.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user to be deleted.
	//
	// >  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DeleteUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserRequest) SetInstanceId(v string) *DeleteUserRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteUserRequest) SetRegionId(v string) *DeleteUserRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteUserRequest) SetUserId(v string) *DeleteUserRequest {
	s.UserId = &v
	return s
}

type DeleteUserResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserResponseBody) SetRequestId(v string) *DeleteUserResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserResponse) SetHeaders(v map[string]*string) *DeleteUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserResponse) SetStatusCode(v int32) *DeleteUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteUserResponse) SetBody(v *DeleteUserResponseBody) *DeleteUserResponse {
	s.Body = v
	return s
}

type DeleteUserGroupRequest struct {
	// The ID of the bastion host on which you want to delete the user group.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host on which you want to delete the user group.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group that you want to delete.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// １
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DeleteUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserGroupRequest) SetInstanceId(v string) *DeleteUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteUserGroupRequest) SetRegionId(v string) *DeleteUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteUserGroupRequest) SetUserGroupId(v string) *DeleteUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type DeleteUserGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserGroupResponseBody) SetRequestId(v string) *DeleteUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserGroupResponse) SetHeaders(v map[string]*string) *DeleteUserGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserGroupResponse) SetStatusCode(v int32) *DeleteUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteUserGroupResponse) SetBody(v *DeleteUserGroupResponseBody) *DeleteUserGroupResponse {
	s.Body = v
	return s
}

type DeleteUserPublicKeyRequest struct {
	// The ID of the Bastionhost instance to which the users to be queried belong.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the Bastionhost instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The public key ID.
	//
	// >  You can call the [ListUserPublicKeys](https://help.aliyun.com/document_detail/477555.html) operation to query the public key ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 11
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
	// The region ID of the bastion host. For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteUserPublicKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserPublicKeyRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserPublicKeyRequest) SetInstanceId(v string) *DeleteUserPublicKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteUserPublicKeyRequest) SetPublicKeyId(v string) *DeleteUserPublicKeyRequest {
	s.PublicKeyId = &v
	return s
}

func (s *DeleteUserPublicKeyRequest) SetRegionId(v string) *DeleteUserPublicKeyRequest {
	s.RegionId = &v
	return s
}

type DeleteUserPublicKeyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserPublicKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserPublicKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserPublicKeyResponseBody) SetRequestId(v string) *DeleteUserPublicKeyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserPublicKeyResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteUserPublicKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteUserPublicKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserPublicKeyResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserPublicKeyResponse) SetHeaders(v map[string]*string) *DeleteUserPublicKeyResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserPublicKeyResponse) SetStatusCode(v int32) *DeleteUserPublicKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteUserPublicKeyResponse) SetBody(v *DeleteUserPublicKeyResponseBody) *DeleteUserPublicKeyResponse {
	s.Body = v
	return s
}

type DescribeInstanceAttributeRequest struct {
	// The ID of the Bastionhost instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeRequest) SetInstanceId(v string) *DescribeInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetRegionId(v string) *DescribeInstanceAttributeRequest {
	s.RegionId = &v
	return s
}

type DescribeInstanceAttributeResponseBody struct {
	// The attribute information about the bastion host.
	InstanceAttribute *DescribeInstanceAttributeResponseBodyInstanceAttribute `json:"InstanceAttribute,omitempty" xml:"InstanceAttribute,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 082FAB35-6AB9-4FD5-8750-D36673548E76
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBody) SetInstanceAttribute(v *DescribeInstanceAttributeResponseBodyInstanceAttribute) *DescribeInstanceAttributeResponseBody {
	s.InstanceAttribute = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetRequestId(v string) *DescribeInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceAttributeResponseBodyInstanceAttribute struct {
	AppOperationModule *string `json:"AppOperationModule,omitempty" xml:"AppOperationModule,omitempty"`
	// The IDs of authorized security groups.
	AuthorizedSecurityGroups []*string `json:"AuthorizedSecurityGroups,omitempty" xml:"AuthorizedSecurityGroups,omitempty" type:"Repeated"`
	// The total bandwidth of the bastion host.
	//
	// example:
	//
	// 30
	Bandwidth *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The bandwidth plan ID.
	//
	// example:
	//
	// 5
	BandwidthPackage *string `json:"BandwidthPackage,omitempty" xml:"BandwidthPackage,omitempty"`
	// The status of the database O&M feature.
	//
	// example:
	//
	// Disable
	DbOperationModule *string `json:"DbOperationModule,omitempty" xml:"DbOperationModule,omitempty"`
	// The description of the instance.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the Elastic Network Interface (ENI).
	//
	// example:
	//
	// eni-bp1455jrzwm7moaxxxxx
	EniInstanceId *string `json:"EniInstanceId,omitempty" xml:"EniInstanceId,omitempty"`
	// The time when the instance expires.
	//
	// example:
	//
	// 1578326400000
	ExpireTime  *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	HSMModule   *string `json:"HSMModule,omitempty" xml:"HSMModule,omitempty"`
	IDaaSModule *string `json:"IDaaSModule,omitempty" xml:"IDaaSModule,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- PENDING: The instance is not initialized.
	//
	// 	- CREATING: The instance is being created.
	//
	// 	- RUNNING: The instance is running.
	//
	// 	- EXPIRED: The instance expired.
	//
	// 	- CREATE_FAILED: The instance fails to be created.
	//
	// 	- UPGRADING: The configurations of the instance are being changed.
	//
	// 	- UPGRADE_FAILED: The configurations of the instance fail to be changed.
	//
	// example:
	//
	// RUNNING
	InstanceStatus *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	// The public endpoint.
	//
	// example:
	//
	// drawvxalwb-public.bastionhost.aliyuncs.com
	InternetEndpoint *string `json:"InternetEndpoint,omitempty" xml:"InternetEndpoint,omitempty"`
	// The private endpoint.
	//
	// example:
	//
	// drawvxalwb.bastionhost.aliyuncs.com
	IntranetEndpoint *string `json:"IntranetEndpoint,omitempty" xml:"IntranetEndpoint,omitempty"`
	KmsSecretModule  *string `json:"KmsSecretModule,omitempty" xml:"KmsSecretModule,omitempty"`
	// The license code.
	//
	// example:
	//
	// bhah_ent_50_asset
	LicenseCode *string `json:"LicenseCode,omitempty" xml:"LicenseCode,omitempty"`
	// The status of the automatic password change feature.
	//
	// - **Enable**
	//
	// - **Disable**
	//
	// example:
	//
	// Enable
	ModifyPasswordModule *string `json:"ModifyPasswordModule,omitempty" xml:"ModifyPasswordModule,omitempty"`
	// The status of the network domain feature.
	//
	// - **Enable**
	//
	// - **Disable**
	//
	// example:
	//
	// Enable
	NetworkProxyModule *string `json:"NetworkProxyModule,omitempty" xml:"NetworkProxyModule,omitempty"`
	// An array that consists of the O&M ports of the bastion host.
	Ports []*DescribeInstanceAttributeResponseBodyInstanceAttributePorts `json:"Ports,omitempty" xml:"Ports,omitempty" type:"Repeated"`
	// An array that consists of the egress private IP addresses of the bastion host.
	PrivateExportIps []*string `json:"PrivateExportIps,omitempty" xml:"PrivateExportIps,omitempty" type:"Repeated"`
	// The private IP addresses that are allowed to access the instance.
	PrivateWhiteList []*string `json:"PrivateWhiteList,omitempty" xml:"PrivateWhiteList,omitempty" type:"Repeated"`
	// An array that consists of the egress public IP addresses of the bastion host.
	PublicExportIps []*string `json:"PublicExportIps,omitempty" xml:"PublicExportIps,omitempty" type:"Repeated"`
	// The public IP address.
	PublicIps []*string `json:"PublicIps,omitempty" xml:"PublicIps,omitempty" type:"Repeated"`
	// Indicates whether the Bastionhost instance can be accessed over the Internet.
	//
	// example:
	//
	// true
	PublicNetworkAccess *bool `json:"PublicNetworkAccess,omitempty" xml:"PublicNetworkAccess,omitempty"`
	// The public IP addresses that are allowed to access the instance.
	PublicWhiteList []*string `json:"PublicWhiteList,omitempty" xml:"PublicWhiteList,omitempty" type:"Repeated"`
	RDModule        *string   `json:"RDModule,omitempty" xml:"RDModule,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-aekzc427dbl2shy
	ResourceGroupId     *string   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RouterRules         []*string `json:"RouterRules,omitempty" xml:"RouterRules,omitempty" type:"Repeated"`
	ScriptDeliverModule *string   `json:"ScriptDeliverModule,omitempty" xml:"ScriptDeliverModule,omitempty"`
	// The IDs of the security groups to which the instance belongs.
	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	SlaveVswitchId   *string   `json:"SlaveVswitchId,omitempty" xml:"SlaveVswitchId,omitempty"`
	// The time when the instance started.
	//
	// example:
	//
	// 1577681345000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The storage capacity of the bastion host. Unit: bytes.
	//
	// example:
	//
	// 2199023255552
	Storage *int64 `json:"Storage,omitempty" xml:"Storage,omitempty"`
	// The ID of the VPC to which the instance belongs.
	//
	// example:
	//
	// vpc-bp1c85tzgqu1bf5bxxxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The ID of the vSwitch to which the instance connects.
	//
	// example:
	//
	// vsw-bp1xfwzzfti0kjbfxxxxx
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	// The status of the web terminal.
	//
	// - **Enable**
	//
	// - **Disable**
	//
	// example:
	//
	// Enable
	WebTerminalModule *string                                                                    `json:"WebTerminalModule,omitempty" xml:"WebTerminalModule,omitempty"`
	WhiteListPolicies []*DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies `json:"WhiteListPolicies,omitempty" xml:"WhiteListPolicies,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAttributeResponseBodyInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBodyInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetAppOperationModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.AppOperationModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetAuthorizedSecurityGroups(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.AuthorizedSecurityGroups = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetBandwidth(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.Bandwidth = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetBandwidthPackage(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.BandwidthPackage = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetDbOperationModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.DbOperationModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetDescription(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.Description = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetEniInstanceId(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.EniInstanceId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetExpireTime(v int64) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetHSMModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.HSMModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetIDaaSModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.IDaaSModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetInstanceId(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetInstanceStatus(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.InstanceStatus = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetInternetEndpoint(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.InternetEndpoint = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetIntranetEndpoint(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.IntranetEndpoint = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetKmsSecretModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.KmsSecretModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetLicenseCode(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.LicenseCode = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetModifyPasswordModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.ModifyPasswordModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetNetworkProxyModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.NetworkProxyModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetPorts(v []*DescribeInstanceAttributeResponseBodyInstanceAttributePorts) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.Ports = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetPrivateExportIps(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.PrivateExportIps = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetPrivateWhiteList(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.PrivateWhiteList = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetPublicExportIps(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.PublicExportIps = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetPublicIps(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.PublicIps = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetPublicNetworkAccess(v bool) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.PublicNetworkAccess = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetPublicWhiteList(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.PublicWhiteList = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetRDModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.RDModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetRegionId(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetResourceGroupId(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetRouterRules(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.RouterRules = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetScriptDeliverModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.ScriptDeliverModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetSecurityGroupIds(v []*string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetSlaveVswitchId(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.SlaveVswitchId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetStartTime(v int64) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.StartTime = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetStorage(v int64) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.Storage = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetVpcId(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetVswitchId(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.VswitchId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetWebTerminalModule(v string) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.WebTerminalModule = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttribute) SetWhiteListPolicies(v []*DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies) *DescribeInstanceAttributeResponseBodyInstanceAttribute {
	s.WhiteListPolicies = v
	return s
}

type DescribeInstanceAttributeResponseBodyInstanceAttributePorts struct {
	// The custom port.
	//
	// > Only the SSH and RDP ports can be changed. If no custom O\\&M port is specified for the bastion host, the value of StandardPort is returned.
	//
	// example:
	//
	// 600xx
	CustomPort *int32 `json:"CustomPort,omitempty" xml:"CustomPort,omitempty"`
	// The standard port of the bastion host. Valid values:
	//
	// 	- **SSH**: 60022.
	//
	// 	- **RDP**: 63389.
	//
	// 	- **HTTPS**: 443.
	//
	// example:
	//
	// 60022
	StandardPort *int32 `json:"StandardPort,omitempty" xml:"StandardPort,omitempty"`
}

func (s DescribeInstanceAttributeResponseBodyInstanceAttributePorts) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBodyInstanceAttributePorts) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttributePorts) SetCustomPort(v int32) *DescribeInstanceAttributeResponseBodyInstanceAttributePorts {
	s.CustomPort = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttributePorts) SetStandardPort(v int32) *DescribeInstanceAttributeResponseBodyInstanceAttributePorts {
	s.StandardPort = &v
	return s
}

type DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Entry       *string `json:"Entry,omitempty" xml:"Entry,omitempty"`
}

func (s DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies) SetDescription(v string) *DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies {
	s.Description = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies) SetEntry(v string) *DescribeInstanceAttributeResponseBodyInstanceAttributeWhiteListPolicies {
	s.Entry = &v
	return s
}

type DescribeInstanceAttributeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetStatusCode(v int32) *DescribeInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetBody(v *DescribeInstanceAttributeResponseBody) *DescribeInstanceAttributeResponse {
	s.Body = v
	return s
}

type DescribeInstancesRequest struct {
	// An array that consists of the IDs of the bastion hosts.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	// The status of the bastion host. Valid values:
	//
	// 	- **PENDING**: The bastion host is not initialized.
	//
	// 	- **CREATING**: The bastion host is being created.
	//
	// 	- **RUNNING**: The bastion host is running.
	//
	// 	- **EXPIRED**: The bastion host expired.
	//
	// 	- **CREATE_FAILED**: The bastion host fails to be created.
	//
	// 	- **UPGRADING**: The configurations of the bastion host are being changed.
	//
	// 	- **UPGRADE_FAILED**: The configurations of the bastion host fail to be changed.
	//
	// example:
	//
	// RUNNING
	InstanceStatus *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the bastion host belongs.
	//
	// example:
	//
	// rg-acfm26ougi****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// An array consisting of the tags that are added to the bastion hosts.
	Tag []*DescribeInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetInstanceId(v []*string) *DescribeInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceStatus(v string) *DescribeInstancesRequest {
	s.InstanceStatus = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageNumber(v int32) *DescribeInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageSize(v int32) *DescribeInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesRequest) SetRegionId(v string) *DescribeInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceGroupId(v string) *DescribeInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetTag(v []*DescribeInstancesRequestTag) *DescribeInstancesRequest {
	s.Tag = v
	return s
}

type DescribeInstancesRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// test
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// testapi
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequestTag) SetKey(v string) *DescribeInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeInstancesRequestTag) SetValue(v string) *DescribeInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeInstancesResponseBody struct {
	// An array that consists of the bastion hosts returned.
	Instances []*DescribeInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 61D36C55-AAFC-4678-8FAD-34FEF9E7182E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of bastion hosts that are queried.
	//
	// example:
	//
	// 4
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBody) SetInstances(v []*DescribeInstancesResponseBodyInstances) *DescribeInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstancesResponseBody) SetRequestId(v string) *DescribeInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetTotalCount(v int64) *DescribeInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstancesResponseBodyInstances struct {
	BandWidth *int64 `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	// The remarks of the bastion host.
	//
	// example:
	//
	// Test API
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The timestamp when the bastion host expires. Unit: milliseconds.
	//
	// example:
	//
	// 1578326400000
	ExpireTime *int64 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The image version of the bastion host.
	//
	// example:
	//
	// 3.0.0
	ImageVersion *string `json:"ImageVersion,omitempty" xml:"ImageVersion,omitempty"`
	// The bastion host ID.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The status of the bastion host. Valid values:
	//
	// 	- **PENDING**: The bastion host is not initialized.
	//
	// 	- **CREATING**: The bastion host is being created.
	//
	// 	- **RUNNING**: The bastion host is running.
	//
	// 	- **EXPIRED**: The bastion host expired.
	//
	// 	- **CREATE_FAILED**: The bastion host fails to be created.
	//
	// 	- **UPGRADING**: The configurations of the bastion host are being changed.
	//
	// 	- **UPGRADE_FAILED**: The configurations of the bastion host fail to be changed.
	//
	// example:
	//
	// RUNNING
	InstanceStatus *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	// The public O\\&M address of the bastion host.
	//
	// example:
	//
	// drawvxalwb-public.bastionhost.aliyuncs.com
	InternetEndpoint *string `json:"InternetEndpoint,omitempty" xml:"InternetEndpoint,omitempty"`
	// The private O\\&M address of the bastion host.
	//
	// example:
	//
	// drawvxalwb.bastionhost.aliyuncs.com
	IntranetEndpoint *string `json:"IntranetEndpoint,omitempty" xml:"IntranetEndpoint,omitempty"`
	// Indicates whether the bastion host runs an earlier version. Valid values:
	//
	// 	- **true**: The bastion host runs V2 or V3.1.
	//
	// 	- **false**: The bastion host runs V3.2.
	//
	// example:
	//
	// false
	Legacy *bool `json:"Legacy,omitempty" xml:"Legacy,omitempty"`
	// The license code of the bastion host.
	//
	// example:
	//
	// bhah_ent_50_asset
	LicenseCode *string `json:"LicenseCode,omitempty" xml:"LicenseCode,omitempty"`
	// The edition of the bastion host. Valid values:
	//
	// 	- **cloudbastion**: Basic Edition.
	//
	// 	- **cloudbastion_ha**: Enterprise Edition.
	//
	// example:
	//
	// cloudbastion_ha
	PlanCode *string `json:"PlanCode,omitempty" xml:"PlanCode,omitempty"`
	// Indicates whether the bastion host can be accessed from the Internet. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	PublicNetworkAccess *bool `json:"PublicNetworkAccess,omitempty" xml:"PublicNetworkAccess,omitempty"`
	// The region ID of the bastion host.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the bastion host belongs.
	//
	// example:
	//
	// g-acfm26ougi****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SlaveVswitchId  *string `json:"SlaveVswitchId,omitempty" xml:"SlaveVswitchId,omitempty"`
	// The timestamp when the bastion host is purchased or renewed. Unit: milliseconds.
	//
	// example:
	//
	// 1577681345000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the virtual private cloud (VPC) to which the bastion host belongs.
	//
	// example:
	//
	// vpc-bp1c85tzgqu1bf5b****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The ID of the vSwitch to which the bastion host belongs.
	//
	// example:
	//
	// vsw-bp1xfwzzfti0kjbf****
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstances) SetBandWidth(v int64) *DescribeInstancesResponseBodyInstances {
	s.BandWidth = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDescription(v string) *DescribeInstancesResponseBodyInstances {
	s.Description = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetExpireTime(v int64) *DescribeInstancesResponseBodyInstances {
	s.ExpireTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetImageVersion(v string) *DescribeInstancesResponseBodyInstances {
	s.ImageVersion = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceId(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceStatus(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceStatus = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInternetEndpoint(v string) *DescribeInstancesResponseBodyInstances {
	s.InternetEndpoint = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetIntranetEndpoint(v string) *DescribeInstancesResponseBodyInstances {
	s.IntranetEndpoint = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetLegacy(v bool) *DescribeInstancesResponseBodyInstances {
	s.Legacy = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetLicenseCode(v string) *DescribeInstancesResponseBodyInstances {
	s.LicenseCode = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetPlanCode(v string) *DescribeInstancesResponseBodyInstances {
	s.PlanCode = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetPublicNetworkAccess(v bool) *DescribeInstancesResponseBodyInstances {
	s.PublicNetworkAccess = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetRegionId(v string) *DescribeInstancesResponseBodyInstances {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetResourceGroupId(v string) *DescribeInstancesResponseBodyInstances {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSlaveVswitchId(v string) *DescribeInstancesResponseBodyInstances {
	s.SlaveVswitchId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetStartTime(v int64) *DescribeInstancesResponseBodyInstances {
	s.StartTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetVpcId(v string) *DescribeInstancesResponseBodyInstances {
	s.VpcId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetVswitchId(v string) *DescribeInstancesResponseBodyInstances {
	s.VswitchId = &v
	return s
}

type DescribeInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetHeaders(v map[string]*string) *DescribeInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesResponse) SetStatusCode(v int32) *DescribeInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancesResponse) SetBody(v *DescribeInstancesResponseBody) *DescribeInstancesResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	// The natural language in which responses are returned. Valid values:
	//
	// 	- **zh-CN**: Chinese. This is the default value.
	//
	// 	- **en-US**: English.
	//
	// 	- **ja**: Japanese.
	//
	// example:
	//
	// zh-CN
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-shenzhen
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetAcceptLanguage(v string) *DescribeRegionsRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeRegionsRequest) SetRegionId(v string) *DescribeRegionsRequest {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponseBody struct {
	// The information about regions where you can create bastion hosts.
	Regions []*DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Repeated"`
	// The ID of request.
	//
	// example:
	//
	// B7281856-F27D-4ECE-B4F1-50511E550xxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRegions(v []*DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	// The name of the region.
	//
	// example:
	//
	// China (Hangzhou)
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	// The endpoint of the region.
	//
	// example:
	//
	// yundun-bastionhost.aliyuncs.com
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetLocalName(v string) *DescribeRegionsResponseBodyRegions {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegions {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) SetRegionId(v string) *DescribeRegionsResponseBodyRegions {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DetachDatabaseAccountsFromUserRequest struct {
	// The databases.
	Databases []*DetachDatabaseAccountsFromUserRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The bastion host ID.
	//
	// > You can call the DescribeInstances operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-pe335ipfk01
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user from whom you want to revoke the permissions on databases and database accounts.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DetachDatabaseAccountsFromUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserRequest) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserRequest) SetDatabases(v []*DetachDatabaseAccountsFromUserRequestDatabases) *DetachDatabaseAccountsFromUserRequest {
	s.Databases = v
	return s
}

func (s *DetachDatabaseAccountsFromUserRequest) SetInstanceId(v string) *DetachDatabaseAccountsFromUserRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserRequest) SetRegionId(v string) *DetachDatabaseAccountsFromUserRequest {
	s.RegionId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserRequest) SetUserId(v string) *DetachDatabaseAccountsFromUserRequest {
	s.UserId = &v
	return s
}

type DetachDatabaseAccountsFromUserRequestDatabases struct {
	// An array that consists of database account IDs.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The ID of the database on which you want to revoke permissions.
	//
	// example:
	//
	// 8
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s DetachDatabaseAccountsFromUserRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserRequestDatabases) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserRequestDatabases) SetDatabaseAccountIds(v []*string) *DetachDatabaseAccountsFromUserRequestDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *DetachDatabaseAccountsFromUserRequestDatabases) SetDatabaseId(v string) *DetachDatabaseAccountsFromUserRequestDatabases {
	s.DatabaseId = &v
	return s
}

type DetachDatabaseAccountsFromUserResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 79D7E114-CB52-5695-AB15-12776C308387
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*DetachDatabaseAccountsFromUserResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s DetachDatabaseAccountsFromUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserResponseBody) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserResponseBody) SetRequestId(v string) *DetachDatabaseAccountsFromUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponseBody) SetResults(v []*DetachDatabaseAccountsFromUserResponseBodyResults) *DetachDatabaseAccountsFromUserResponseBody {
	s.Results = v
	return s
}

type DetachDatabaseAccountsFromUserResponseBodyResults struct {
	// The error code that is returned. If **OK*	- is returned, the operation was successful. If another error code is returned, the operation failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// A list that shows the operation results of the database accounts.
	DatabaseAccounts []*DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The ID of the database on which the permissions are revoked.
	//
	// example:
	//
	// 4
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The error message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DetachDatabaseAccountsFromUserResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResults) SetCode(v string) *DetachDatabaseAccountsFromUserResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResults) SetDatabaseAccounts(v []*DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts) *DetachDatabaseAccountsFromUserResponseBodyResults {
	s.DatabaseAccounts = v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResults) SetDatabaseId(v string) *DetachDatabaseAccountsFromUserResponseBodyResults {
	s.DatabaseId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResults) SetMessage(v string) *DetachDatabaseAccountsFromUserResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResults) SetUserId(v string) *DetachDatabaseAccountsFromUserResponseBodyResults {
	s.UserId = &v
	return s
}

type DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts struct {
	// The error code that is returned. If OK is returned, the operation was successful. If another error code is returned, the operation failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the database account on which the permissions are revoked.
	//
	// example:
	//
	// 9
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The error message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts) SetCode(v string) *DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts {
	s.Code = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts) SetDatabaseAccountId(v string) *DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts) SetMessage(v string) *DetachDatabaseAccountsFromUserResponseBodyResultsDatabaseAccounts {
	s.Message = &v
	return s
}

type DetachDatabaseAccountsFromUserResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachDatabaseAccountsFromUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachDatabaseAccountsFromUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserResponse) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserResponse) SetHeaders(v map[string]*string) *DetachDatabaseAccountsFromUserResponse {
	s.Headers = v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponse) SetStatusCode(v int32) *DetachDatabaseAccountsFromUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserResponse) SetBody(v *DetachDatabaseAccountsFromUserResponseBody) *DetachDatabaseAccountsFromUserResponse {
	s.Body = v
	return s
}

type DetachDatabaseAccountsFromUserGroupRequest struct {
	// The information about the database.
	Databases []*DetachDatabaseAccountsFromUserGroupRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-7mz2v120f0y
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group from which you want to revoke permissions on databases and database accounts.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DetachDatabaseAccountsFromUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserGroupRequest) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserGroupRequest) SetDatabases(v []*DetachDatabaseAccountsFromUserGroupRequestDatabases) *DetachDatabaseAccountsFromUserGroupRequest {
	s.Databases = v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupRequest) SetInstanceId(v string) *DetachDatabaseAccountsFromUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupRequest) SetRegionId(v string) *DetachDatabaseAccountsFromUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupRequest) SetUserGroupId(v string) *DetachDatabaseAccountsFromUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type DetachDatabaseAccountsFromUserGroupRequestDatabases struct {
	// An array that consists of database account IDs.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The ID of the database on which the permissions are to be revoked.
	//
	// example:
	//
	// 4
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s DetachDatabaseAccountsFromUserGroupRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserGroupRequestDatabases) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserGroupRequestDatabases) SetDatabaseAccountIds(v []*string) *DetachDatabaseAccountsFromUserGroupRequestDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupRequestDatabases) SetDatabaseId(v string) *DetachDatabaseAccountsFromUserGroupRequestDatabases {
	s.DatabaseId = &v
	return s
}

type DetachDatabaseAccountsFromUserGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// AC528ED1-C302-56E5-9CB5-ADA625D64FF9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*DetachDatabaseAccountsFromUserGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s DetachDatabaseAccountsFromUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBody) SetRequestId(v string) *DetachDatabaseAccountsFromUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBody) SetResults(v []*DetachDatabaseAccountsFromUserGroupResponseBodyResults) *DetachDatabaseAccountsFromUserGroupResponseBody {
	s.Results = v
	return s
}

type DetachDatabaseAccountsFromUserGroupResponseBodyResults struct {
	// The error code that is returned. If OK is returned, the operation was successful. If other error codes are returned, the operation failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// A list that shows the authorization results of the database accounts.
	DatabaseAccounts []*DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The ID of the database on which the permissions are revoked.
	//
	// example:
	//
	// 27
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The user group ID.
	//
	// example:
	//
	// 3
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DetachDatabaseAccountsFromUserGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResults) SetCode(v string) *DetachDatabaseAccountsFromUserGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResults) SetDatabaseAccounts(v []*DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts) *DetachDatabaseAccountsFromUserGroupResponseBodyResults {
	s.DatabaseAccounts = v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResults) SetDatabaseId(v string) *DetachDatabaseAccountsFromUserGroupResponseBodyResults {
	s.DatabaseId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResults) SetMessage(v string) *DetachDatabaseAccountsFromUserGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResults) SetUserGroupId(v string) *DetachDatabaseAccountsFromUserGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

type DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts struct {
	// The error code that is returned. If OK is returned, the operation was successful. If other error codes are returned, the operation failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the database account on which the permissions are revoked.
	//
	// example:
	//
	// 5
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts) SetCode(v string) *DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts {
	s.Code = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts) SetDatabaseAccountId(v string) *DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts) SetMessage(v string) *DetachDatabaseAccountsFromUserGroupResponseBodyResultsDatabaseAccounts {
	s.Message = &v
	return s
}

type DetachDatabaseAccountsFromUserGroupResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachDatabaseAccountsFromUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachDatabaseAccountsFromUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDatabaseAccountsFromUserGroupResponse) GoString() string {
	return s.String()
}

func (s *DetachDatabaseAccountsFromUserGroupResponse) SetHeaders(v map[string]*string) *DetachDatabaseAccountsFromUserGroupResponse {
	s.Headers = v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponse) SetStatusCode(v int32) *DetachDatabaseAccountsFromUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachDatabaseAccountsFromUserGroupResponse) SetBody(v *DetachDatabaseAccountsFromUserGroupResponseBody) *DetachDatabaseAccountsFromUserGroupResponse {
	s.Body = v
	return s
}

type DetachHostAccountsFromHostShareKeyRequest struct {
	// The host account IDs.
	//
	// >  You can call the [ListHostAccountsForHostShareKey](https://help.aliyun.com/document_detail/462975.html) operation to query the host account IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2","3"]
	HostAccountIds *string `json:"HostAccountIds,omitempty" xml:"HostAccountIds,omitempty"`
	// The shared key ID.
	//
	// >  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 11
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DetachHostAccountsFromHostShareKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromHostShareKeyRequest) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromHostShareKeyRequest) SetHostAccountIds(v string) *DetachHostAccountsFromHostShareKeyRequest {
	s.HostAccountIds = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyRequest) SetHostShareKeyId(v string) *DetachHostAccountsFromHostShareKeyRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyRequest) SetInstanceId(v string) *DetachHostAccountsFromHostShareKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyRequest) SetRegionId(v string) *DetachHostAccountsFromHostShareKeyRequest {
	s.RegionId = &v
	return s
}

type DetachHostAccountsFromHostShareKeyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*DetachHostAccountsFromHostShareKeyResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s DetachHostAccountsFromHostShareKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromHostShareKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromHostShareKeyResponseBody) SetRequestId(v string) *DetachHostAccountsFromHostShareKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyResponseBody) SetResults(v []*DetachHostAccountsFromHostShareKeyResponseBodyResults) *DetachHostAccountsFromHostShareKeyResponseBody {
	s.Results = v
	return s
}

type DetachHostAccountsFromHostShareKeyResponseBodyResults struct {
	// The error code returned. If **OK*	- is returned, the disassociation was successful. If a different error code is returned, the disassociation failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// 12407
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The ID of the shared key.
	//
	// example:
	//
	// 11
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// The host account does not exist
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetachHostAccountsFromHostShareKeyResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromHostShareKeyResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromHostShareKeyResponseBodyResults) SetCode(v string) *DetachHostAccountsFromHostShareKeyResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyResponseBodyResults) SetHostAccountId(v string) *DetachHostAccountsFromHostShareKeyResponseBodyResults {
	s.HostAccountId = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyResponseBodyResults) SetHostShareKeyId(v string) *DetachHostAccountsFromHostShareKeyResponseBodyResults {
	s.HostShareKeyId = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyResponseBodyResults) SetMessage(v string) *DetachHostAccountsFromHostShareKeyResponseBodyResults {
	s.Message = &v
	return s
}

type DetachHostAccountsFromHostShareKeyResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachHostAccountsFromHostShareKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachHostAccountsFromHostShareKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromHostShareKeyResponse) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromHostShareKeyResponse) SetHeaders(v map[string]*string) *DetachHostAccountsFromHostShareKeyResponse {
	s.Headers = v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyResponse) SetStatusCode(v int32) *DetachHostAccountsFromHostShareKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachHostAccountsFromHostShareKeyResponse) SetBody(v *DetachHostAccountsFromHostShareKeyResponseBody) *DetachHostAccountsFromHostShareKeyResponse {
	s.Body = v
	return s
}

type DetachHostAccountsFromUserRequest struct {
	// The IDs of the hosts and host accounts on which you want to revoke permissions from the user. You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the permissions on the specified hosts and all accounts of the hosts are revoked from the user. For more information about this parameter, see the Description of the Hosts parameter section of this topic.
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the host IDs and the [ListHostAccountsForUser](https://help.aliyun.com/document_detail/466581.html) operation to query the host account IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3"]}, {"HostId":"3","HostAccountIds":["4","5","6"]}, {"HostId":"4","HostAccountIds":["9","8","7"]} ]
	Hosts *string `json:"Hosts,omitempty" xml:"Hosts,omitempty"`
	// The ID of the bastion host on which you want to revoke permissions on the specified hosts and host accounts from the user.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host on which you want to revoke permissions on the specified hosts and host accounts from the user.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user from whom you want to revoke permissions on the specified hosts and host accounts.
	//
	// >  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DetachHostAccountsFromUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserRequest) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserRequest) SetHosts(v string) *DetachHostAccountsFromUserRequest {
	s.Hosts = &v
	return s
}

func (s *DetachHostAccountsFromUserRequest) SetInstanceId(v string) *DetachHostAccountsFromUserRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachHostAccountsFromUserRequest) SetRegionId(v string) *DetachHostAccountsFromUserRequest {
	s.RegionId = &v
	return s
}

func (s *DetachHostAccountsFromUserRequest) SetUserId(v string) *DetachHostAccountsFromUserRequest {
	s.UserId = &v
	return s
}

type DetachHostAccountsFromUserResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*DetachHostAccountsFromUserResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s DetachHostAccountsFromUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserResponseBody) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserResponseBody) SetRequestId(v string) *DetachHostAccountsFromUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachHostAccountsFromUserResponseBody) SetResults(v []*DetachHostAccountsFromUserResponseBodyResults) *DetachHostAccountsFromUserResponseBody {
	s.Results = v
	return s
}

type DetachHostAccountsFromUserResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of revoking permissions on the specified host accounts from the user.
	HostAccounts []*DetachHostAccountsFromUserResponseBodyResultsHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The host ID.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DetachHostAccountsFromUserResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserResponseBodyResults) SetCode(v string) *DetachHostAccountsFromUserResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachHostAccountsFromUserResponseBodyResults) SetHostAccounts(v []*DetachHostAccountsFromUserResponseBodyResultsHostAccounts) *DetachHostAccountsFromUserResponseBodyResults {
	s.HostAccounts = v
	return s
}

func (s *DetachHostAccountsFromUserResponseBodyResults) SetHostId(v string) *DetachHostAccountsFromUserResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *DetachHostAccountsFromUserResponseBodyResults) SetMessage(v string) *DetachHostAccountsFromUserResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachHostAccountsFromUserResponseBodyResults) SetUserId(v string) *DetachHostAccountsFromUserResponseBodyResults {
	s.UserId = &v
	return s
}

type DetachHostAccountsFromUserResponseBodyResultsHostAccounts struct {
	// The return code that indicates whether permissions on the specified host accounts were revoked from the user. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The host account ID.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetachHostAccountsFromUserResponseBodyResultsHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserResponseBodyResultsHostAccounts) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserResponseBodyResultsHostAccounts) SetCode(v string) *DetachHostAccountsFromUserResponseBodyResultsHostAccounts {
	s.Code = &v
	return s
}

func (s *DetachHostAccountsFromUserResponseBodyResultsHostAccounts) SetHostAccountId(v string) *DetachHostAccountsFromUserResponseBodyResultsHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *DetachHostAccountsFromUserResponseBodyResultsHostAccounts) SetMessage(v string) *DetachHostAccountsFromUserResponseBodyResultsHostAccounts {
	s.Message = &v
	return s
}

type DetachHostAccountsFromUserResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachHostAccountsFromUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachHostAccountsFromUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserResponse) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserResponse) SetHeaders(v map[string]*string) *DetachHostAccountsFromUserResponse {
	s.Headers = v
	return s
}

func (s *DetachHostAccountsFromUserResponse) SetStatusCode(v int32) *DetachHostAccountsFromUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachHostAccountsFromUserResponse) SetBody(v *DetachHostAccountsFromUserResponseBody) *DetachHostAccountsFromUserResponse {
	s.Body = v
	return s
}

type DetachHostAccountsFromUserGroupRequest struct {
	// The IDs of the host and host account on which you want to revoke permissions from the user group.
	//
	// You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the permissions on both the specified hosts and all host accounts of the hosts are revoked from the user group. For more information about this parameter, see the "Description of the Hosts parameter" section of this topic.
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3",...]}, {"HostId":"3","HostAccountIds":["4","5","6"]}, {"HostId":"4","HostAccountIds":["9","8","7"]} ]
	Hosts *string `json:"Hosts,omitempty" xml:"Hosts,omitempty"`
	// The ID of the bastion host in which you want to revoke permissions on the specified hosts and host accounts from the user group.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host in which you want to revoke permissions on the specified hosts and host accounts from the user group.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group from which you want to revoke permissions on the specified hosts and host accounts.
	//
	// >  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// １
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DetachHostAccountsFromUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserGroupRequest) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserGroupRequest) SetHosts(v string) *DetachHostAccountsFromUserGroupRequest {
	s.Hosts = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupRequest) SetInstanceId(v string) *DetachHostAccountsFromUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupRequest) SetRegionId(v string) *DetachHostAccountsFromUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupRequest) SetUserGroupId(v string) *DetachHostAccountsFromUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type DetachHostAccountsFromUserGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*DetachHostAccountsFromUserGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s DetachHostAccountsFromUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserGroupResponseBody) SetRequestId(v string) *DetachHostAccountsFromUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponseBody) SetResults(v []*DetachHostAccountsFromUserGroupResponseBodyResults) *DetachHostAccountsFromUserGroupResponseBody {
	s.Results = v
	return s
}

type DetachHostAccountsFromUserGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of revoking permissions on the specified host accounts from the user group.
	HostAccounts []*DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the host.
	//
	// example:
	//
	// １
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// １
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DetachHostAccountsFromUserGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResults) SetCode(v string) *DetachHostAccountsFromUserGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResults) SetHostAccounts(v []*DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts) *DetachHostAccountsFromUserGroupResponseBodyResults {
	s.HostAccounts = v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResults) SetHostId(v string) *DetachHostAccountsFromUserGroupResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResults) SetMessage(v string) *DetachHostAccountsFromUserGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResults) SetUserGroupId(v string) *DetachHostAccountsFromUserGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

type DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts struct {
	// The return code that indicates whether permissions on the specified host account were revoked from the user group. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// １
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts) SetCode(v string) *DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts {
	s.Code = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts) SetHostAccountId(v string) *DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts) SetMessage(v string) *DetachHostAccountsFromUserGroupResponseBodyResultsHostAccounts {
	s.Message = &v
	return s
}

type DetachHostAccountsFromUserGroupResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachHostAccountsFromUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachHostAccountsFromUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachHostAccountsFromUserGroupResponse) GoString() string {
	return s.String()
}

func (s *DetachHostAccountsFromUserGroupResponse) SetHeaders(v map[string]*string) *DetachHostAccountsFromUserGroupResponse {
	s.Headers = v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponse) SetStatusCode(v int32) *DetachHostAccountsFromUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachHostAccountsFromUserGroupResponse) SetBody(v *DetachHostAccountsFromUserGroupResponseBody) *DetachHostAccountsFromUserGroupResponse {
	s.Body = v
	return s
}

type DetachHostGroupAccountsFromUserRequest struct {
	// The ID of the host group and the name of the host account on which you want to revoke permissions from the user. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the permissions on the specified host groups and all host accounts in the host groups are revoked from the user. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}]
	HostGroups *string `json:"HostGroups,omitempty" xml:"HostGroups,omitempty"`
	// The ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user from which you want to revoke permissions on the specified host groups and host accounts.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DetachHostGroupAccountsFromUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserRequest) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserRequest) SetHostGroups(v string) *DetachHostGroupAccountsFromUserRequest {
	s.HostGroups = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserRequest) SetInstanceId(v string) *DetachHostGroupAccountsFromUserRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserRequest) SetRegionId(v string) *DetachHostGroupAccountsFromUserRequest {
	s.RegionId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserRequest) SetUserId(v string) *DetachHostGroupAccountsFromUserRequest {
	s.UserId = &v
	return s
}

type DetachHostGroupAccountsFromUserResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*DetachHostGroupAccountsFromUserResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s DetachHostGroupAccountsFromUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserResponseBody) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserResponseBody) SetRequestId(v string) *DetachHostGroupAccountsFromUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponseBody) SetResults(v []*DetachHostGroupAccountsFromUserResponseBodyResults) *DetachHostGroupAccountsFromUserResponseBody {
	s.Results = v
	return s
}

type DetachHostGroupAccountsFromUserResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of revoking permissions on the specified host accounts from the user.
	HostAccountNames []*DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The ID of the host group.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DetachHostGroupAccountsFromUserResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResults) SetCode(v string) *DetachHostGroupAccountsFromUserResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResults) SetHostAccountNames(v []*DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames) *DetachHostGroupAccountsFromUserResponseBodyResults {
	s.HostAccountNames = v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResults) SetHostGroupId(v string) *DetachHostGroupAccountsFromUserResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResults) SetMessage(v string) *DetachHostGroupAccountsFromUserResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResults) SetUserId(v string) *DetachHostGroupAccountsFromUserResponseBodyResults {
	s.UserId = &v
	return s
}

type DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames struct {
	// The return code that indicates whether permissions on the specified host account were revoked from the user. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames) SetCode(v string) *DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames {
	s.Code = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames) SetHostAccountName(v string) *DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames {
	s.HostAccountName = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames) SetMessage(v string) *DetachHostGroupAccountsFromUserResponseBodyResultsHostAccountNames {
	s.Message = &v
	return s
}

type DetachHostGroupAccountsFromUserResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachHostGroupAccountsFromUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachHostGroupAccountsFromUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserResponse) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserResponse) SetHeaders(v map[string]*string) *DetachHostGroupAccountsFromUserResponse {
	s.Headers = v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponse) SetStatusCode(v int32) *DetachHostGroupAccountsFromUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserResponse) SetBody(v *DetachHostGroupAccountsFromUserResponseBody) *DetachHostGroupAccountsFromUserResponse {
	s.Body = v
	return s
}

type DetachHostGroupAccountsFromUserGroupRequest struct {
	// The ID of the host group and the name of host account on which you want to revoke permissions from the user group. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the permissions on the specified host groups and all host accounts in the host groups are revoked from the user group. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.
	//
	// >  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"3","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"4","HostAccountNames":["root","111","abc"]}]
	HostGroups *string `json:"HostGroups,omitempty" xml:"HostGroups,omitempty"`
	// The ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user group.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user group.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group from which you want to revoke permissions on the specified host groups and host accounts.
	//
	// >  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DetachHostGroupAccountsFromUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserGroupRequest) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserGroupRequest) SetHostGroups(v string) *DetachHostGroupAccountsFromUserGroupRequest {
	s.HostGroups = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupRequest) SetInstanceId(v string) *DetachHostGroupAccountsFromUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupRequest) SetRegionId(v string) *DetachHostGroupAccountsFromUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupRequest) SetUserGroupId(v string) *DetachHostGroupAccountsFromUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type DetachHostGroupAccountsFromUserGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*DetachHostGroupAccountsFromUserGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s DetachHostGroupAccountsFromUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBody) SetRequestId(v string) *DetachHostGroupAccountsFromUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBody) SetResults(v []*DetachHostGroupAccountsFromUserGroupResponseBodyResults) *DetachHostGroupAccountsFromUserGroupResponseBody {
	s.Results = v
	return s
}

type DetachHostGroupAccountsFromUserGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of revoking permissions on the specified host accounts from the user group.
	HostAccountNames []*DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The ID of the host group.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DetachHostGroupAccountsFromUserGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResults) SetCode(v string) *DetachHostGroupAccountsFromUserGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResults) SetHostAccountNames(v []*DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames) *DetachHostGroupAccountsFromUserGroupResponseBodyResults {
	s.HostAccountNames = v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResults) SetHostGroupId(v string) *DetachHostGroupAccountsFromUserGroupResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResults) SetMessage(v string) *DetachHostGroupAccountsFromUserGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResults) SetUserGroupId(v string) *DetachHostGroupAccountsFromUserGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

type DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames struct {
	// The return code that indicates whether permissions on the specified host account were revoked from the specified user group. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames) SetCode(v string) *DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames {
	s.Code = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames) SetHostAccountName(v string) *DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames {
	s.HostAccountName = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames) SetMessage(v string) *DetachHostGroupAccountsFromUserGroupResponseBodyResultsHostAccountNames {
	s.Message = &v
	return s
}

type DetachHostGroupAccountsFromUserGroupResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachHostGroupAccountsFromUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachHostGroupAccountsFromUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachHostGroupAccountsFromUserGroupResponse) GoString() string {
	return s.String()
}

func (s *DetachHostGroupAccountsFromUserGroupResponse) SetHeaders(v map[string]*string) *DetachHostGroupAccountsFromUserGroupResponse {
	s.Headers = v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponse) SetStatusCode(v int32) *DetachHostGroupAccountsFromUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachHostGroupAccountsFromUserGroupResponse) SetBody(v *DetachHostGroupAccountsFromUserGroupResponseBody) *DetachHostGroupAccountsFromUserGroupResponse {
	s.Body = v
	return s
}

type DisableInstancePublicAccessRequest struct {
	// The ID of the bastion host whose Internet access you want to disable.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DisableInstancePublicAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableInstancePublicAccessRequest) GoString() string {
	return s.String()
}

func (s *DisableInstancePublicAccessRequest) SetInstanceId(v string) *DisableInstancePublicAccessRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableInstancePublicAccessRequest) SetRegionId(v string) *DisableInstancePublicAccessRequest {
	s.RegionId = &v
	return s
}

type DisableInstancePublicAccessResponseBody struct {
	// The ID of the bastion host whose Internet access is disabled.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 76FAAF15-D3A3-4099-9941-FC408D9FDB4C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableInstancePublicAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableInstancePublicAccessResponseBody) GoString() string {
	return s.String()
}

func (s *DisableInstancePublicAccessResponseBody) SetInstanceId(v string) *DisableInstancePublicAccessResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DisableInstancePublicAccessResponseBody) SetRequestId(v string) *DisableInstancePublicAccessResponseBody {
	s.RequestId = &v
	return s
}

type DisableInstancePublicAccessResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableInstancePublicAccessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableInstancePublicAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableInstancePublicAccessResponse) GoString() string {
	return s.String()
}

func (s *DisableInstancePublicAccessResponse) SetHeaders(v map[string]*string) *DisableInstancePublicAccessResponse {
	s.Headers = v
	return s
}

func (s *DisableInstancePublicAccessResponse) SetStatusCode(v int32) *DisableInstancePublicAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableInstancePublicAccessResponse) SetBody(v *DisableInstancePublicAccessResponseBody) *DisableInstancePublicAccessResponse {
	s.Body = v
	return s
}

type DisableRuleRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the authorization rule to be disabled.
	//
	// >  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID to be disabled.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DisableRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableRuleRequest) SetInstanceId(v string) *DisableRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableRuleRequest) SetRegionId(v string) *DisableRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DisableRuleRequest) SetRuleId(v string) *DisableRuleRequest {
	s.RuleId = &v
	return s
}

type DisableRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 98DBE5C2-7D7A-5393-9E5A-71074336D33B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableRuleResponseBody) SetRequestId(v string) *DisableRuleResponseBody {
	s.RequestId = &v
	return s
}

type DisableRuleResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableRuleResponse) SetHeaders(v map[string]*string) *DisableRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableRuleResponse) SetStatusCode(v int32) *DisableRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableRuleResponse) SetBody(v *DisableRuleResponseBody) *DisableRuleResponse {
	s.Body = v
	return s
}

type EnableInstancePublicAccessRequest struct {
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s EnableInstancePublicAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableInstancePublicAccessRequest) GoString() string {
	return s.String()
}

func (s *EnableInstancePublicAccessRequest) SetInstanceId(v string) *EnableInstancePublicAccessRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableInstancePublicAccessRequest) SetRegionId(v string) *EnableInstancePublicAccessRequest {
	s.RegionId = &v
	return s
}

type EnableInstancePublicAccessResponseBody struct {
	// The ID of the bastion host whose Internet access is enabled.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// D47B5043-FDD6-4FBE-976E-5FC67A23578F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableInstancePublicAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableInstancePublicAccessResponseBody) GoString() string {
	return s.String()
}

func (s *EnableInstancePublicAccessResponseBody) SetInstanceId(v string) *EnableInstancePublicAccessResponseBody {
	s.InstanceId = &v
	return s
}

func (s *EnableInstancePublicAccessResponseBody) SetRequestId(v string) *EnableInstancePublicAccessResponseBody {
	s.RequestId = &v
	return s
}

type EnableInstancePublicAccessResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableInstancePublicAccessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableInstancePublicAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableInstancePublicAccessResponse) GoString() string {
	return s.String()
}

func (s *EnableInstancePublicAccessResponse) SetHeaders(v map[string]*string) *EnableInstancePublicAccessResponse {
	s.Headers = v
	return s
}

func (s *EnableInstancePublicAccessResponse) SetStatusCode(v int32) *EnableInstancePublicAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableInstancePublicAccessResponse) SetBody(v *EnableInstancePublicAccessResponseBody) *EnableInstancePublicAccessResponse {
	s.Body = v
	return s
}

type EnableRuleRequest struct {
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the authorization rule that you want to enable.
	//
	// >  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s EnableRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableRuleRequest) SetInstanceId(v string) *EnableRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableRuleRequest) SetRegionId(v string) *EnableRuleRequest {
	s.RegionId = &v
	return s
}

func (s *EnableRuleRequest) SetRuleId(v string) *EnableRuleRequest {
	s.RuleId = &v
	return s
}

type EnableRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4F6C075F-FC86-476E-943B-097BD4E12948
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableRuleResponseBody) SetRequestId(v string) *EnableRuleResponseBody {
	s.RequestId = &v
	return s
}

type EnableRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableRuleResponse) SetHeaders(v map[string]*string) *EnableRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableRuleResponse) SetStatusCode(v int32) *EnableRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableRuleResponse) SetBody(v *EnableRuleResponseBody) *EnableRuleResponse {
	s.Body = v
	return s
}

type GenerateAssetOperationTokenRequest struct {
	// The ID of the account whose assets the O\\&M token takes effect.
	//
	// >  You must specify at least one of the following parameters: AssetAccountId and AssetAccountName. If you specify both parameters, AssetAccountId takes precedence.
	//
	// example:
	//
	// 2
	AssetAccountId *string `json:"AssetAccountId,omitempty" xml:"AssetAccountId,omitempty"`
	// The name of the host account. If you use a custom account, enter a real account name.
	//
	// >  When both AssetAccountId and AssetAccountName are specified, AssetAccountId takes precedence.
	//
	// example:
	//
	// root
	AssetAccountName *string `json:"AssetAccountName,omitempty" xml:"AssetAccountName,omitempty"`
	// The Base64-encoded password. This parameter is required if you want to apply for an O\\&M token for a custom account.
	//
	// example:
	//
	// dGVzdHBhc3N3b3Jk
	AssetAccountPassword *string `json:"AssetAccountPassword,omitempty" xml:"AssetAccountPassword,omitempty"`
	// The name of the protocol. Valid values:
	//
	// 	- SSH
	//
	// 	- RDP
	//
	// 	- Oracle
	//
	// 	- PostgreSQL
	//
	// 	- MySQL
	//
	// 	- SQLServer
	//
	// example:
	//
	// SSH
	AssetAccountProtocolName *string `json:"AssetAccountProtocolName,omitempty" xml:"AssetAccountProtocolName,omitempty"`
	// The ID of the asset for which you want to apply for an O\\&M token.
	//
	// This parameter is required.
	//
	// example:
	//
	// 11
	AssetId *string `json:"AssetId,omitempty" xml:"AssetId,omitempty"`
	// The type of the asset for which you want to apply for an O\\&M token. Valid values:
	//
	// 	- **Host**
	//
	// 	- **Database**
	//
	// This parameter is required.
	//
	// example:
	//
	// Host
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The name of the database. If you set OperationMode to Sso and AssetAccountProtocolName to PostgreSQL or Oracle and you select Custom Account for the Database Account parameter, you must specify this parameter.
	//
	// >This parameter is available only for bastion hosts that run V3.2.44 or later.
	//
	// example:
	//
	// orcl
	DatabaseSchema *string `json:"DatabaseSchema,omitempty" xml:"DatabaseSchema,omitempty"`
	// The ID of the bastion host for which you want to apply an O\\&M token.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The logon attribute. If you set OperationMode to Sso and AssetAccountProtocolName to Oracle, you must specify this parameter. Valid values:
	//
	// 	- **SERVICENAME**
	//
	// 	- **SID**
	//
	// >  This parameter is available only for bastion hosts that run V3.2.44 or later.
	//
	// example:
	//
	// SID
	LoginAttribute *string `json:"LoginAttribute,omitempty" xml:"LoginAttribute,omitempty"`
	// The O\\&M logon method. Valid values:
	//
	// 	- **WebToken**: O\\&M token-based logon.
	//
	// 	- **Sso**: Local client-based logon.
	//
	// >  This parameter is available only for bastion hosts that run V3.2.44 or later. If you do not specify this parameter, the default value WebToken is used.
	//
	// example:
	//
	// Sso
	OperationMode *string `json:"OperationMode,omitempty" xml:"OperationMode,omitempty"`
	OperationNote *string `json:"OperationNote,omitempty" xml:"OperationNote,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the local client that you want to perform O\\&M operations on Linux assets. If you set OperationMode to Sso and AssetAccountProtocolName to SSH, you must specify this parameter. Valid values:
	//
	// 	- **ssh**: Perform O\\&M operations on Linux assets by connecting to a bastion host from an SSH client.
	//
	// 	- **sftp**: Perform O\\&M operations on Linux assets by connecting to a bastion host from a Secure File Transfer Protocol (SFTP) client.
	//
	// >  This parameter is available only for bastion hosts that run V3.2.44 or later.
	//
	// example:
	//
	// ssh
	SsoClient *string `json:"SsoClient,omitempty" xml:"SsoClient,omitempty"`
}

func (s GenerateAssetOperationTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateAssetOperationTokenRequest) GoString() string {
	return s.String()
}

func (s *GenerateAssetOperationTokenRequest) SetAssetAccountId(v string) *GenerateAssetOperationTokenRequest {
	s.AssetAccountId = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetAssetAccountName(v string) *GenerateAssetOperationTokenRequest {
	s.AssetAccountName = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetAssetAccountPassword(v string) *GenerateAssetOperationTokenRequest {
	s.AssetAccountPassword = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetAssetAccountProtocolName(v string) *GenerateAssetOperationTokenRequest {
	s.AssetAccountProtocolName = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetAssetId(v string) *GenerateAssetOperationTokenRequest {
	s.AssetId = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetAssetType(v string) *GenerateAssetOperationTokenRequest {
	s.AssetType = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetDatabaseSchema(v string) *GenerateAssetOperationTokenRequest {
	s.DatabaseSchema = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetInstanceId(v string) *GenerateAssetOperationTokenRequest {
	s.InstanceId = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetLoginAttribute(v string) *GenerateAssetOperationTokenRequest {
	s.LoginAttribute = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetOperationMode(v string) *GenerateAssetOperationTokenRequest {
	s.OperationMode = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetOperationNote(v string) *GenerateAssetOperationTokenRequest {
	s.OperationNote = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetRegionId(v string) *GenerateAssetOperationTokenRequest {
	s.RegionId = &v
	return s
}

func (s *GenerateAssetOperationTokenRequest) SetSsoClient(v string) *GenerateAssetOperationTokenRequest {
	s.SsoClient = &v
	return s
}

type GenerateAssetOperationTokenResponseBody struct {
	// The data returned.
	AssetOperationToken *GenerateAssetOperationTokenResponseBodyAssetOperationToken `json:"AssetOperationToken,omitempty" xml:"AssetOperationToken,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GenerateAssetOperationTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateAssetOperationTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateAssetOperationTokenResponseBody) SetAssetOperationToken(v *GenerateAssetOperationTokenResponseBodyAssetOperationToken) *GenerateAssetOperationTokenResponseBody {
	s.AssetOperationToken = v
	return s
}

func (s *GenerateAssetOperationTokenResponseBody) SetRequestId(v string) *GenerateAssetOperationTokenResponseBody {
	s.RequestId = &v
	return s
}

type GenerateAssetOperationTokenResponseBodyAssetOperationToken struct {
	// The remaining number of times that you can use the O\\&M token.
	//
	// example:
	//
	// 1
	CountLeft *int64 `json:"CountLeft,omitempty" xml:"CountLeft,omitempty"`
	// The time when the O\\&M token expires. The value is a UNIX timestamp.
	//
	// example:
	//
	// 1709110797
	ExpireTime *int64 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// Indicates whether the number of times that you can use the O\\&M token is limited.
	//
	// example:
	//
	// true
	HasCountLimit *bool `json:"HasCountLimit,omitempty" xml:"HasCountLimit,omitempty"`
	// The maximum number of renewals. A value of 0 indicates that renewal is not supported.
	//
	// example:
	//
	// 10
	MaxRenewCount *int64 `json:"MaxRenewCount,omitempty" xml:"MaxRenewCount,omitempty"`
	// The number of times the O\\&M token is renewed.
	//
	// example:
	//
	// 1
	RenewCount *int64 `json:"RenewCount,omitempty" xml:"RenewCount,omitempty"`
	// The single sign-on (SSO) URL.
	//
	// example:
	//
	// sso://eyJOT0RFX0NPTU1PTiI6eyJNb2R******
	SsoUrl *string `json:"SsoUrl,omitempty" xml:"SsoUrl,omitempty"`
	// The O\\&M token that you apply for.
	//
	// example:
	//
	// NmYyMmEzNmMwYzljNGY******
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The ID of the O\\&M token.
	//
	// example:
	//
	// 1
	TokenId *string `json:"TokenId,omitempty" xml:"TokenId,omitempty"`
}

func (s GenerateAssetOperationTokenResponseBodyAssetOperationToken) String() string {
	return tea.Prettify(s)
}

func (s GenerateAssetOperationTokenResponseBodyAssetOperationToken) GoString() string {
	return s.String()
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetCountLeft(v int64) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.CountLeft = &v
	return s
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetExpireTime(v int64) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.ExpireTime = &v
	return s
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetHasCountLimit(v bool) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.HasCountLimit = &v
	return s
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetMaxRenewCount(v int64) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.MaxRenewCount = &v
	return s
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetRenewCount(v int64) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.RenewCount = &v
	return s
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetSsoUrl(v string) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.SsoUrl = &v
	return s
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetToken(v string) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.Token = &v
	return s
}

func (s *GenerateAssetOperationTokenResponseBodyAssetOperationToken) SetTokenId(v string) *GenerateAssetOperationTokenResponseBodyAssetOperationToken {
	s.TokenId = &v
	return s
}

type GenerateAssetOperationTokenResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateAssetOperationTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateAssetOperationTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateAssetOperationTokenResponse) GoString() string {
	return s.String()
}

func (s *GenerateAssetOperationTokenResponse) SetHeaders(v map[string]*string) *GenerateAssetOperationTokenResponse {
	s.Headers = v
	return s
}

func (s *GenerateAssetOperationTokenResponse) SetStatusCode(v int32) *GenerateAssetOperationTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateAssetOperationTokenResponse) SetBody(v *GenerateAssetOperationTokenResponseBody) *GenerateAssetOperationTokenResponse {
	s.Body = v
	return s
}

type GetDatabaseRequest struct {
	// The ID of the database to query.
	//
	// >  You can call the [ListDatabases](https://help.aliyun.com/document_detail/2758822.html) operation to query the database ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 21
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The ID of the bastion host that manages the database to query.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-wwo36qbv601
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host that manages the database to query.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseRequest) GoString() string {
	return s.String()
}

func (s *GetDatabaseRequest) SetDatabaseId(v string) *GetDatabaseRequest {
	s.DatabaseId = &v
	return s
}

func (s *GetDatabaseRequest) SetInstanceId(v string) *GetDatabaseRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDatabaseRequest) SetRegionId(v string) *GetDatabaseRequest {
	s.RegionId = &v
	return s
}

type GetDatabaseResponseBody struct {
	// The returned detailed information about the database.
	Database *GetDatabaseResponseBodyDatabase `json:"Database,omitempty" xml:"Database,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4D72B883-9D15-5B05-B987-DFD10EB1FFB4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *GetDatabaseResponseBody) SetDatabase(v *GetDatabaseResponseBodyDatabase) *GetDatabaseResponseBody {
	s.Database = v
	return s
}

func (s *GetDatabaseResponseBody) SetRequestId(v string) *GetDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type GetDatabaseResponseBodyDatabase struct {
	// The address type of the database. Valid values:
	//
	// 	- Public
	//
	// 	- Private
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The remarks of the database.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 22
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The port of the database.
	//
	// example:
	//
	// 3306
	DatabasePort *int64 `json:"DatabasePort,omitempty" xml:"DatabasePort,omitempty"`
	// The internal endpoint of the database.
	//
	// example:
	//
	// rm-bp1zq******
	DatabasePrivateAddress *string `json:"DatabasePrivateAddress,omitempty" xml:"DatabasePrivateAddress,omitempty"`
	// The public endpoint of the database.
	//
	// example:
	//
	// rm-uf65******
	DatabasePublicAddress *string `json:"DatabasePublicAddress,omitempty" xml:"DatabasePublicAddress,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **mysql**
	//
	// 	- **sqlserver**
	//
	// 	- **postgresql**
	//
	// 	- **oracle**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The ID of the network domain to which the database belongs.
	//
	// example:
	//
	// 45
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The database type. Valid values:
	//
	// 	- **Local**: on-premises database.
	//
	// 	- **Rds**: ApsaraDB RDS instance.
	//
	// 	- **PolarDB**: PolarDB cluster.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ApsaraDB RDS instance or PolarDB cluster.
	//
	// > If **Source*	- is set to **Local**, this parameter is empty.
	//
	// example:
	//
	// i-wz9527ob0e0nftcsffke
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The region ID of the ApsaraDB RDS instance or PolarDB cluster.
	//
	// example:
	//
	// cn-hangzhou
	SourceInstanceRegionId *string `json:"SourceInstanceRegionId,omitempty" xml:"SourceInstanceRegionId,omitempty"`
	// The status of the database. Valid values:
	//
	// 	- **Normal**
	//
	// 	- **Release**
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s GetDatabaseResponseBodyDatabase) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseResponseBodyDatabase) GoString() string {
	return s.String()
}

func (s *GetDatabaseResponseBodyDatabase) SetActiveAddressType(v string) *GetDatabaseResponseBodyDatabase {
	s.ActiveAddressType = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetComment(v string) *GetDatabaseResponseBodyDatabase {
	s.Comment = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetDatabaseId(v string) *GetDatabaseResponseBodyDatabase {
	s.DatabaseId = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetDatabaseName(v string) *GetDatabaseResponseBodyDatabase {
	s.DatabaseName = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetDatabasePort(v int64) *GetDatabaseResponseBodyDatabase {
	s.DatabasePort = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetDatabasePrivateAddress(v string) *GetDatabaseResponseBodyDatabase {
	s.DatabasePrivateAddress = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetDatabasePublicAddress(v string) *GetDatabaseResponseBodyDatabase {
	s.DatabasePublicAddress = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetDatabaseType(v string) *GetDatabaseResponseBodyDatabase {
	s.DatabaseType = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetNetworkDomainId(v string) *GetDatabaseResponseBodyDatabase {
	s.NetworkDomainId = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetSource(v string) *GetDatabaseResponseBodyDatabase {
	s.Source = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetSourceInstanceId(v string) *GetDatabaseResponseBodyDatabase {
	s.SourceInstanceId = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetSourceInstanceRegionId(v string) *GetDatabaseResponseBodyDatabase {
	s.SourceInstanceRegionId = &v
	return s
}

func (s *GetDatabaseResponseBodyDatabase) SetSourceInstanceState(v string) *GetDatabaseResponseBodyDatabase {
	s.SourceInstanceState = &v
	return s
}

type GetDatabaseResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseResponse) GoString() string {
	return s.String()
}

func (s *GetDatabaseResponse) SetHeaders(v map[string]*string) *GetDatabaseResponse {
	s.Headers = v
	return s
}

func (s *GetDatabaseResponse) SetStatusCode(v int32) *GetDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDatabaseResponse) SetBody(v *GetDatabaseResponseBody) *GetDatabaseResponse {
	s.Body = v
	return s
}

type GetDatabaseAccountRequest struct {
	// The ID of the database account to query.
	//
	// >  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-i7m2d7zrw11
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *GetDatabaseAccountRequest) SetDatabaseAccountId(v string) *GetDatabaseAccountRequest {
	s.DatabaseAccountId = &v
	return s
}

func (s *GetDatabaseAccountRequest) SetInstanceId(v string) *GetDatabaseAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDatabaseAccountRequest) SetRegionId(v string) *GetDatabaseAccountRequest {
	s.RegionId = &v
	return s
}

type GetDatabaseAccountResponseBody struct {
	// The returned information about the database account.
	DatabaseAccount *GetDatabaseAccountResponseBodyDatabaseAccount `json:"DatabaseAccount,omitempty" xml:"DatabaseAccount,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// FA06D274-8D0A-59FB-8B7E-584C0EEBBFFF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDatabaseAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseAccountResponseBody) GoString() string {
	return s.String()
}

func (s *GetDatabaseAccountResponseBody) SetDatabaseAccount(v *GetDatabaseAccountResponseBodyDatabaseAccount) *GetDatabaseAccountResponseBody {
	s.DatabaseAccount = v
	return s
}

func (s *GetDatabaseAccountResponseBody) SetRequestId(v string) *GetDatabaseAccountResponseBody {
	s.RequestId = &v
	return s
}

type GetDatabaseAccountResponseBodyDatabaseAccount struct {
	// The database account ID.
	//
	// example:
	//
	// 9
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// uac
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The database name. A value is returned for this parameter if the database engine is PostgreSQL or Oracle.
	//
	// example:
	//
	// orcl
	DatabaseSchema *string `json:"DatabaseSchema,omitempty" xml:"DatabaseSchema,omitempty"`
	// Indicates whether the database account has a password.
	//
	// Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	HasPassword *bool `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// The logon attribute. A value is returned for this parameter if the database engine is Oracle. Valid values:
	//
	// 	- SERVICENAME
	//
	// 	- SID
	//
	// example:
	//
	// SID
	LoginAttribute *string `json:"LoginAttribute,omitempty" xml:"LoginAttribute,omitempty"`
}

func (s GetDatabaseAccountResponseBodyDatabaseAccount) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseAccountResponseBodyDatabaseAccount) GoString() string {
	return s.String()
}

func (s *GetDatabaseAccountResponseBodyDatabaseAccount) SetDatabaseAccountId(v string) *GetDatabaseAccountResponseBodyDatabaseAccount {
	s.DatabaseAccountId = &v
	return s
}

func (s *GetDatabaseAccountResponseBodyDatabaseAccount) SetDatabaseAccountName(v string) *GetDatabaseAccountResponseBodyDatabaseAccount {
	s.DatabaseAccountName = &v
	return s
}

func (s *GetDatabaseAccountResponseBodyDatabaseAccount) SetDatabaseSchema(v string) *GetDatabaseAccountResponseBodyDatabaseAccount {
	s.DatabaseSchema = &v
	return s
}

func (s *GetDatabaseAccountResponseBodyDatabaseAccount) SetHasPassword(v bool) *GetDatabaseAccountResponseBodyDatabaseAccount {
	s.HasPassword = &v
	return s
}

func (s *GetDatabaseAccountResponseBodyDatabaseAccount) SetLoginAttribute(v string) *GetDatabaseAccountResponseBodyDatabaseAccount {
	s.LoginAttribute = &v
	return s
}

type GetDatabaseAccountResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDatabaseAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *GetDatabaseAccountResponse) SetHeaders(v map[string]*string) *GetDatabaseAccountResponse {
	s.Headers = v
	return s
}

func (s *GetDatabaseAccountResponse) SetStatusCode(v int32) *GetDatabaseAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDatabaseAccountResponse) SetBody(v *GetDatabaseAccountResponseBody) *GetDatabaseAccountResponse {
	s.Body = v
	return s
}

type GetExportConfigJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetExportConfigJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetExportConfigJobRequest) GoString() string {
	return s.String()
}

func (s *GetExportConfigJobRequest) SetInstanceId(v string) *GetExportConfigJobRequest {
	s.InstanceId = &v
	return s
}

func (s *GetExportConfigJobRequest) SetJobId(v string) *GetExportConfigJobRequest {
	s.JobId = &v
	return s
}

func (s *GetExportConfigJobRequest) SetRegionId(v string) *GetExportConfigJobRequest {
	s.RegionId = &v
	return s
}

type GetExportConfigJobResponseBody struct {
	// example:
	//
	// https://bastionhost-cn-hangzhou-164***.oss-cn-hangzhou.aliyuncs.com/bastionhost-cn-2******
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// example:
	//
	// 1679393152
	ExpireTime *int64 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// 2
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 98DBE5C2-7D7A-5393-9E5A-71074336D33B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetExportConfigJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetExportConfigJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetExportConfigJobResponseBody) SetDownloadUrl(v string) *GetExportConfigJobResponseBody {
	s.DownloadUrl = &v
	return s
}

func (s *GetExportConfigJobResponseBody) SetExpireTime(v int64) *GetExportConfigJobResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *GetExportConfigJobResponseBody) SetJobId(v string) *GetExportConfigJobResponseBody {
	s.JobId = &v
	return s
}

func (s *GetExportConfigJobResponseBody) SetMessage(v string) *GetExportConfigJobResponseBody {
	s.Message = &v
	return s
}

func (s *GetExportConfigJobResponseBody) SetRequestId(v string) *GetExportConfigJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetExportConfigJobResponseBody) SetStatus(v string) *GetExportConfigJobResponseBody {
	s.Status = &v
	return s
}

type GetExportConfigJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetExportConfigJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetExportConfigJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetExportConfigJobResponse) GoString() string {
	return s.String()
}

func (s *GetExportConfigJobResponse) SetHeaders(v map[string]*string) *GetExportConfigJobResponse {
	s.Headers = v
	return s
}

func (s *GetExportConfigJobResponse) SetStatusCode(v int32) *GetExportConfigJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetExportConfigJobResponse) SetBody(v *GetExportConfigJobResponseBody) *GetExportConfigJobResponse {
	s.Body = v
	return s
}

type GetHostRequest struct {
	// The ID of the host that you want to query. You can specify only one host ID.
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the bastion host in which you want to query the host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host in which you want to query the host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetHostRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHostRequest) GoString() string {
	return s.String()
}

func (s *GetHostRequest) SetHostId(v string) *GetHostRequest {
	s.HostId = &v
	return s
}

func (s *GetHostRequest) SetInstanceId(v string) *GetHostRequest {
	s.InstanceId = &v
	return s
}

func (s *GetHostRequest) SetRegionId(v string) *GetHostRequest {
	s.RegionId = &v
	return s
}

type GetHostResponseBody struct {
	// The returned information about the host.
	Host *GetHostResponseBodyHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHostResponseBody) GoString() string {
	return s.String()
}

func (s *GetHostResponseBody) SetHost(v *GetHostResponseBodyHost) *GetHostResponseBody {
	s.Host = v
	return s
}

func (s *GetHostResponseBody) SetRequestId(v string) *GetHostResponseBody {
	s.RequestId = &v
	return s
}

type GetHostResponseBodyHost struct {
	// The address type of the host. Valid values:
	//
	// 	- **Public**: a public address
	//
	// 	- **Private**: a private address
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The description of the host.
	//
	// example:
	//
	// host
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The hostname.
	//
	// example:
	//
	// host
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The internal endpoint of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 192.168.XX.XX
	HostPrivateAddress *string `json:"HostPrivateAddress,omitempty" xml:"HostPrivateAddress,omitempty"`
	// The public address of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 1.1.XX.XX
	HostPublicAddress *string `json:"HostPublicAddress,omitempty" xml:"HostPublicAddress,omitempty"`
	// The ID of the network domain to which the host belongs.
	//
	// example:
	//
	// 1
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The operating system of the host. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType  *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	PrefKex *string `json:"PrefKex,omitempty" xml:"PrefKex,omitempty"`
	// The protocol information about the host.
	Protocols []*GetHostResponseBodyHostProtocols `json:"Protocols,omitempty" xml:"Protocols,omitempty" type:"Repeated"`
	// The source of the host. Valid values:
	//
	// 	- **Local**: a host in a data center
	//
	// 	- **Ecs**: an Elastic Compute Service (ECS) instance
	//
	// 	- **Rds**: a host in an ApsaraDB MyBase dedicated cluster
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster.
	//
	// >  If **Local*	- is returned for the **Source*	- parameter, no value is returned for this parameter.
	//
	// example:
	//
	// i-bp19ienyt0yax748****
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The status of the host. Valid values:
	//
	// 	- **Normal**: normal
	//
	// 	- **Release**: released
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s GetHostResponseBodyHost) String() string {
	return tea.Prettify(s)
}

func (s GetHostResponseBodyHost) GoString() string {
	return s.String()
}

func (s *GetHostResponseBodyHost) SetActiveAddressType(v string) *GetHostResponseBodyHost {
	s.ActiveAddressType = &v
	return s
}

func (s *GetHostResponseBodyHost) SetComment(v string) *GetHostResponseBodyHost {
	s.Comment = &v
	return s
}

func (s *GetHostResponseBodyHost) SetHostId(v string) *GetHostResponseBodyHost {
	s.HostId = &v
	return s
}

func (s *GetHostResponseBodyHost) SetHostName(v string) *GetHostResponseBodyHost {
	s.HostName = &v
	return s
}

func (s *GetHostResponseBodyHost) SetHostPrivateAddress(v string) *GetHostResponseBodyHost {
	s.HostPrivateAddress = &v
	return s
}

func (s *GetHostResponseBodyHost) SetHostPublicAddress(v string) *GetHostResponseBodyHost {
	s.HostPublicAddress = &v
	return s
}

func (s *GetHostResponseBodyHost) SetNetworkDomainId(v string) *GetHostResponseBodyHost {
	s.NetworkDomainId = &v
	return s
}

func (s *GetHostResponseBodyHost) SetOSType(v string) *GetHostResponseBodyHost {
	s.OSType = &v
	return s
}

func (s *GetHostResponseBodyHost) SetPrefKex(v string) *GetHostResponseBodyHost {
	s.PrefKex = &v
	return s
}

func (s *GetHostResponseBodyHost) SetProtocols(v []*GetHostResponseBodyHostProtocols) *GetHostResponseBodyHost {
	s.Protocols = v
	return s
}

func (s *GetHostResponseBodyHost) SetSource(v string) *GetHostResponseBodyHost {
	s.Source = &v
	return s
}

func (s *GetHostResponseBodyHost) SetSourceInstanceId(v string) *GetHostResponseBodyHost {
	s.SourceInstanceId = &v
	return s
}

func (s *GetHostResponseBodyHost) SetSourceInstanceState(v string) *GetHostResponseBodyHost {
	s.SourceInstanceState = &v
	return s
}

type GetHostResponseBodyHostProtocols struct {
	// The fingerprint of the host. This parameter uniquely identifies a host. A value is returned for this parameter only if you have performed O\\&M operations on the host by using the bastion host. Otherwise, no value is returned.
	//
	// example:
	//
	// ssh-ed25519|3e:46:5a:e1:1f:0d:39:7e:61:35:d5:fa:7b:2b:**:**
	HostFingerPrint *string `json:"HostFingerPrint,omitempty" xml:"HostFingerPrint,omitempty"`
	// The service port of the host.
	//
	// example:
	//
	// 22
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The protocol that is used to connect to the host. Valid values:
	//
	// 	- **SSH**
	//
	// 	- **RDP**
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s GetHostResponseBodyHostProtocols) String() string {
	return tea.Prettify(s)
}

func (s GetHostResponseBodyHostProtocols) GoString() string {
	return s.String()
}

func (s *GetHostResponseBodyHostProtocols) SetHostFingerPrint(v string) *GetHostResponseBodyHostProtocols {
	s.HostFingerPrint = &v
	return s
}

func (s *GetHostResponseBodyHostProtocols) SetPort(v int32) *GetHostResponseBodyHostProtocols {
	s.Port = &v
	return s
}

func (s *GetHostResponseBodyHostProtocols) SetProtocolName(v string) *GetHostResponseBodyHostProtocols {
	s.ProtocolName = &v
	return s
}

type GetHostResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHostResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHostResponse) GoString() string {
	return s.String()
}

func (s *GetHostResponse) SetHeaders(v map[string]*string) *GetHostResponse {
	s.Headers = v
	return s
}

func (s *GetHostResponse) SetStatusCode(v int32) *GetHostResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHostResponse) SetBody(v *GetHostResponseBody) *GetHostResponse {
	s.Body = v
	return s
}

type GetHostAccountRequest struct {
	// The ID of the host account that you want to query.
	//
	// > You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The ID of the bastion host in which you want to query the details of the host account.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host in which you want to query the details of the host account.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHostAccountRequest) GoString() string {
	return s.String()
}

func (s *GetHostAccountRequest) SetHostAccountId(v string) *GetHostAccountRequest {
	s.HostAccountId = &v
	return s
}

func (s *GetHostAccountRequest) SetInstanceId(v string) *GetHostAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *GetHostAccountRequest) SetRegionId(v string) *GetHostAccountRequest {
	s.RegionId = &v
	return s
}

type GetHostAccountResponseBody struct {
	// The details of the host account that was queried.
	HostAccount *GetHostAccountResponseBodyHostAccount `json:"HostAccount,omitempty" xml:"HostAccount,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetHostAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHostAccountResponseBody) GoString() string {
	return s.String()
}

func (s *GetHostAccountResponseBody) SetHostAccount(v *GetHostAccountResponseBodyHostAccount) *GetHostAccountResponseBody {
	s.HostAccount = v
	return s
}

func (s *GetHostAccountResponseBody) SetRequestId(v string) *GetHostAccountResponseBody {
	s.RequestId = &v
	return s
}

type GetHostAccountResponseBodyHostAccount struct {
	// Indicates whether a password is configured for the host account. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	HasPassword *bool `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// abc
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host to which the host account belongs.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the shared key.
	//
	// example:
	//
	// 1
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The name of the shared key.
	//
	// example:
	//
	// name
	HostShareKeyName *string `json:"HostShareKeyName,omitempty" xml:"HostShareKeyName,omitempty"`
	// The fingerprint of the private key.
	//
	// example:
	//
	// fe:ca:37:42:30:00:9d:95:e6:73:e5:b0:32:0a:**:**
	PrivateKeyFingerprint *string `json:"PrivateKeyFingerprint,omitempty" xml:"PrivateKeyFingerprint,omitempty"`
	// The protocol that is used by the host. Valid values:
	//
	// 	- **SSH**
	//
	// 	- **RDP**
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s GetHostAccountResponseBodyHostAccount) String() string {
	return tea.Prettify(s)
}

func (s GetHostAccountResponseBodyHostAccount) GoString() string {
	return s.String()
}

func (s *GetHostAccountResponseBodyHostAccount) SetHasPassword(v bool) *GetHostAccountResponseBodyHostAccount {
	s.HasPassword = &v
	return s
}

func (s *GetHostAccountResponseBodyHostAccount) SetHostAccountId(v string) *GetHostAccountResponseBodyHostAccount {
	s.HostAccountId = &v
	return s
}

func (s *GetHostAccountResponseBodyHostAccount) SetHostAccountName(v string) *GetHostAccountResponseBodyHostAccount {
	s.HostAccountName = &v
	return s
}

func (s *GetHostAccountResponseBodyHostAccount) SetHostId(v string) *GetHostAccountResponseBodyHostAccount {
	s.HostId = &v
	return s
}

func (s *GetHostAccountResponseBodyHostAccount) SetHostShareKeyId(v string) *GetHostAccountResponseBodyHostAccount {
	s.HostShareKeyId = &v
	return s
}

func (s *GetHostAccountResponseBodyHostAccount) SetHostShareKeyName(v string) *GetHostAccountResponseBodyHostAccount {
	s.HostShareKeyName = &v
	return s
}

func (s *GetHostAccountResponseBodyHostAccount) SetPrivateKeyFingerprint(v string) *GetHostAccountResponseBodyHostAccount {
	s.PrivateKeyFingerprint = &v
	return s
}

func (s *GetHostAccountResponseBodyHostAccount) SetProtocolName(v string) *GetHostAccountResponseBodyHostAccount {
	s.ProtocolName = &v
	return s
}

type GetHostAccountResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHostAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHostAccountResponse) GoString() string {
	return s.String()
}

func (s *GetHostAccountResponse) SetHeaders(v map[string]*string) *GetHostAccountResponse {
	s.Headers = v
	return s
}

func (s *GetHostAccountResponse) SetStatusCode(v int32) *GetHostAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHostAccountResponse) SetBody(v *GetHostAccountResponseBody) *GetHostAccountResponse {
	s.Body = v
	return s
}

type GetHostGroupRequest struct {
	// The ID of the asset group to query.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the asset group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the bastion host whose asset group you want to query.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host whose asset group you want to query.
	//
	// > For more information about the mapping between region IDs and region names, [see Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupRequest) GoString() string {
	return s.String()
}

func (s *GetHostGroupRequest) SetHostGroupId(v string) *GetHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *GetHostGroupRequest) SetInstanceId(v string) *GetHostGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *GetHostGroupRequest) SetRegionId(v string) *GetHostGroupRequest {
	s.RegionId = &v
	return s
}

type GetHostGroupResponseBody struct {
	// The returned detailed information about the asset group.
	HostGroup *GetHostGroupResponseBodyHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetHostGroupResponseBody) SetHostGroup(v *GetHostGroupResponseBodyHostGroup) *GetHostGroupResponseBody {
	s.HostGroup = v
	return s
}

func (s *GetHostGroupResponseBody) SetRequestId(v string) *GetHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type GetHostGroupResponseBodyHostGroup struct {
	// The remarks of the asset group.
	//
	// example:
	//
	// Description
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The asset group ID.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The name of the asset group.
	//
	// example:
	//
	// Host group 1
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s GetHostGroupResponseBodyHostGroup) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupResponseBodyHostGroup) GoString() string {
	return s.String()
}

func (s *GetHostGroupResponseBodyHostGroup) SetComment(v string) *GetHostGroupResponseBodyHostGroup {
	s.Comment = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetHostGroupId(v string) *GetHostGroupResponseBodyHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetHostGroupName(v string) *GetHostGroupResponseBodyHostGroup {
	s.HostGroupName = &v
	return s
}

type GetHostGroupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupResponse) GoString() string {
	return s.String()
}

func (s *GetHostGroupResponse) SetHeaders(v map[string]*string) *GetHostGroupResponse {
	s.Headers = v
	return s
}

func (s *GetHostGroupResponse) SetStatusCode(v int32) *GetHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHostGroupResponse) SetBody(v *GetHostGroupResponseBody) *GetHostGroupResponse {
	s.Body = v
	return s
}

type GetHostShareKeyRequest struct {
	// The ID of the shared key whose information you want to query.
	//
	// >  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10427
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetHostShareKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHostShareKeyRequest) GoString() string {
	return s.String()
}

func (s *GetHostShareKeyRequest) SetHostShareKeyId(v string) *GetHostShareKeyRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *GetHostShareKeyRequest) SetInstanceId(v string) *GetHostShareKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *GetHostShareKeyRequest) SetRegionId(v string) *GetHostShareKeyRequest {
	s.RegionId = &v
	return s
}

type GetHostShareKeyResponseBody struct {
	// The returned information about the shared key.
	HostShareKey *GetHostShareKeyResponseBodyHostShareKey `json:"HostShareKey,omitempty" xml:"HostShareKey,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetHostShareKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHostShareKeyResponseBody) GoString() string {
	return s.String()
}

func (s *GetHostShareKeyResponseBody) SetHostShareKey(v *GetHostShareKeyResponseBodyHostShareKey) *GetHostShareKeyResponseBody {
	s.HostShareKey = v
	return s
}

func (s *GetHostShareKeyResponseBody) SetRequestId(v string) *GetHostShareKeyResponseBody {
	s.RequestId = &v
	return s
}

type GetHostShareKeyResponseBodyHostShareKey struct {
	// The ID of the shared key.
	//
	// example:
	//
	// 10427
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The name of the shared key.
	//
	// example:
	//
	// name
	HostShareKeyName *string `json:"HostShareKeyName,omitempty" xml:"HostShareKeyName,omitempty"`
	// The time when the information about the shared key was last modified. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1644287246
	LastModifyKeyAt *int64 `json:"LastModifyKeyAt,omitempty" xml:"LastModifyKeyAt,omitempty"`
	// The fingerprint of the private key.
	//
	// example:
	//
	// ***
	PrivateKeyFingerPrint *string `json:"PrivateKeyFingerPrint,omitempty" xml:"PrivateKeyFingerPrint,omitempty"`
}

func (s GetHostShareKeyResponseBodyHostShareKey) String() string {
	return tea.Prettify(s)
}

func (s GetHostShareKeyResponseBodyHostShareKey) GoString() string {
	return s.String()
}

func (s *GetHostShareKeyResponseBodyHostShareKey) SetHostShareKeyId(v string) *GetHostShareKeyResponseBodyHostShareKey {
	s.HostShareKeyId = &v
	return s
}

func (s *GetHostShareKeyResponseBodyHostShareKey) SetHostShareKeyName(v string) *GetHostShareKeyResponseBodyHostShareKey {
	s.HostShareKeyName = &v
	return s
}

func (s *GetHostShareKeyResponseBodyHostShareKey) SetLastModifyKeyAt(v int64) *GetHostShareKeyResponseBodyHostShareKey {
	s.LastModifyKeyAt = &v
	return s
}

func (s *GetHostShareKeyResponseBodyHostShareKey) SetPrivateKeyFingerPrint(v string) *GetHostShareKeyResponseBodyHostShareKey {
	s.PrivateKeyFingerPrint = &v
	return s
}

type GetHostShareKeyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHostShareKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHostShareKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHostShareKeyResponse) GoString() string {
	return s.String()
}

func (s *GetHostShareKeyResponse) SetHeaders(v map[string]*string) *GetHostShareKeyResponse {
	s.Headers = v
	return s
}

func (s *GetHostShareKeyResponse) SetStatusCode(v int32) *GetHostShareKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHostShareKeyResponse) SetBody(v *GetHostShareKeyResponseBody) *GetHostShareKeyResponse {
	s.Body = v
	return s
}

type GetInstanceADAuthServerRequest struct {
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetInstanceADAuthServerRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceADAuthServerRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceADAuthServerRequest) SetInstanceId(v string) *GetInstanceADAuthServerRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceADAuthServerRequest) SetRegionId(v string) *GetInstanceADAuthServerRequest {
	s.RegionId = &v
	return s
}

type GetInstanceADAuthServerResponseBody struct {
	// The settings of AD authentication.
	AD *GetInstanceADAuthServerResponseBodyAD `json:"AD,omitempty" xml:"AD,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 89398CFB-4EB6-4C7E-BB3C-EF213AC8FA50
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceADAuthServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceADAuthServerResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceADAuthServerResponseBody) SetAD(v *GetInstanceADAuthServerResponseBodyAD) *GetInstanceADAuthServerResponseBody {
	s.AD = v
	return s
}

func (s *GetInstanceADAuthServerResponseBody) SetRequestId(v string) *GetInstanceADAuthServerResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceADAuthServerResponseBodyAD struct {
	// The distinguished name (DN) of the AD server account.
	//
	// example:
	//
	// cn=Manager,dc=test,dc=com
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// The Base DN of the AD server.
	//
	// example:
	//
	// dc=test,dc=com
	BaseDN *string `json:"BaseDN,omitempty" xml:"BaseDN,omitempty"`
	// The domain on the AD server.
	//
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The field that is used to indicate the email address of a user on the AD server.
	//
	// example:
	//
	// emailAttr
	EmailMapping *string `json:"EmailMapping,omitempty" xml:"EmailMapping,omitempty"`
	// The condition that is used to filter users.
	//
	// example:
	//
	// (&(objectClass=top))
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Indicates whether passwords are required. Valid values:
	//
	// 	- **true**:
	//
	// 	- **false**
	//
	// example:
	//
	// true
	HasPassword *bool `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// Indicates whether SSL is supported. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsSSL *bool `json:"IsSSL,omitempty" xml:"IsSSL,omitempty"`
	// The field that is used to indicate the mobile phone number of a user on the AD server.
	//
	// example:
	//
	// mobileAttr
	MobileMapping *string `json:"MobileMapping,omitempty" xml:"MobileMapping,omitempty"`
	// The field that is used to indicate the name of a user on the AD server.
	//
	// example:
	//
	// nameAttr
	NameMapping *string `json:"NameMapping,omitempty" xml:"NameMapping,omitempty"`
	// The port that is used to access the AD server.
	//
	// example:
	//
	// 389
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The address of the AD server.
	//
	// example:
	//
	// 192.168.XX.XX
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The address of the secondary AD server.
	//
	// example:
	//
	// 192.168.XX.XX
	StandbyServer *string `json:"StandbyServer,omitempty" xml:"StandbyServer,omitempty"`
}

func (s GetInstanceADAuthServerResponseBodyAD) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceADAuthServerResponseBodyAD) GoString() string {
	return s.String()
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetAccount(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.Account = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetBaseDN(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.BaseDN = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetDomain(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.Domain = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetEmailMapping(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.EmailMapping = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetFilter(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.Filter = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetHasPassword(v bool) *GetInstanceADAuthServerResponseBodyAD {
	s.HasPassword = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetIsSSL(v bool) *GetInstanceADAuthServerResponseBodyAD {
	s.IsSSL = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetMobileMapping(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.MobileMapping = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetNameMapping(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.NameMapping = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetPort(v int64) *GetInstanceADAuthServerResponseBodyAD {
	s.Port = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetServer(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.Server = &v
	return s
}

func (s *GetInstanceADAuthServerResponseBodyAD) SetStandbyServer(v string) *GetInstanceADAuthServerResponseBodyAD {
	s.StandbyServer = &v
	return s
}

type GetInstanceADAuthServerResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceADAuthServerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceADAuthServerResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceADAuthServerResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceADAuthServerResponse) SetHeaders(v map[string]*string) *GetInstanceADAuthServerResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceADAuthServerResponse) SetStatusCode(v int32) *GetInstanceADAuthServerResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceADAuthServerResponse) SetBody(v *GetInstanceADAuthServerResponseBody) *GetInstanceADAuthServerResponse {
	s.Body = v
	return s
}

type GetInstanceLDAPAuthServerRequest struct {
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetInstanceLDAPAuthServerRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLDAPAuthServerRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceLDAPAuthServerRequest) SetInstanceId(v string) *GetInstanceLDAPAuthServerRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceLDAPAuthServerRequest) SetRegionId(v string) *GetInstanceLDAPAuthServerRequest {
	s.RegionId = &v
	return s
}

type GetInstanceLDAPAuthServerResponseBody struct {
	// The settings of LDAP authentication.
	LDAP *GetInstanceLDAPAuthServerResponseBodyLDAP `json:"LDAP,omitempty" xml:"LDAP,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 1C60E741-102D-5E8F-9710-B06D3F0183FE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceLDAPAuthServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLDAPAuthServerResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceLDAPAuthServerResponseBody) SetLDAP(v *GetInstanceLDAPAuthServerResponseBodyLDAP) *GetInstanceLDAPAuthServerResponseBody {
	s.LDAP = v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBody) SetRequestId(v string) *GetInstanceLDAPAuthServerResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceLDAPAuthServerResponseBodyLDAP struct {
	// The account of the LDAP server.
	//
	// example:
	//
	// cn=Manager,dc=test,dc=com
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// The Base distinguished name (DN).
	//
	// example:
	//
	// dc=test,dc=com
	BaseDN *string `json:"BaseDN,omitempty" xml:"BaseDN,omitempty"`
	// The field that is used to indicate the email address of a user on the LDAP server.
	//
	// example:
	//
	// emailAttr
	EmailMapping *string `json:"EmailMapping,omitempty" xml:"EmailMapping,omitempty"`
	// The condition that is used to filter users.
	//
	// example:
	//
	// (&(objectClass=top))
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Indicates whether passwords are required. Valid values:
	//
	// 	- **true**: required
	//
	// 	- **false**: not required
	//
	// example:
	//
	// true
	HasPassword *string `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// Indicates whether SSL is supported. Valid values:
	//
	// 	- **true**: supported
	//
	// 	- **false**: not supported
	//
	// example:
	//
	// true
	IsSSL *bool `json:"IsSSL,omitempty" xml:"IsSSL,omitempty"`
	// The field that is used to indicate the logon name of a user on the LDAP server.
	//
	// example:
	//
	// userNameAttr
	LoginNameMapping *string `json:"LoginNameMapping,omitempty" xml:"LoginNameMapping,omitempty"`
	// The field that is used to indicate the mobile phone number of a user on the LDAP server.
	//
	// example:
	//
	// mobileAttr
	MobileMapping *string `json:"MobileMapping,omitempty" xml:"MobileMapping,omitempty"`
	// The field that is used to indicate the name of a user on the LDAP server.
	//
	// example:
	//
	// nameAttr
	NameMapping *string `json:"NameMapping,omitempty" xml:"NameMapping,omitempty"`
	// The port that is used to access the LDAP server.
	//
	// example:
	//
	// 389
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The address of the LDAP server.
	//
	// example:
	//
	// 192.168.XX.XX
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The address of the secondary LDAP server.
	//
	// example:
	//
	// 192.168.XX.XX
	StandbyServer *string `json:"StandbyServer,omitempty" xml:"StandbyServer,omitempty"`
}

func (s GetInstanceLDAPAuthServerResponseBodyLDAP) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLDAPAuthServerResponseBodyLDAP) GoString() string {
	return s.String()
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetAccount(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.Account = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetBaseDN(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.BaseDN = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetEmailMapping(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.EmailMapping = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetFilter(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.Filter = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetHasPassword(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.HasPassword = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetIsSSL(v bool) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.IsSSL = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetLoginNameMapping(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.LoginNameMapping = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetMobileMapping(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.MobileMapping = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetNameMapping(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.NameMapping = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetPort(v int64) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.Port = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetServer(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.Server = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponseBodyLDAP) SetStandbyServer(v string) *GetInstanceLDAPAuthServerResponseBodyLDAP {
	s.StandbyServer = &v
	return s
}

type GetInstanceLDAPAuthServerResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceLDAPAuthServerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceLDAPAuthServerResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLDAPAuthServerResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceLDAPAuthServerResponse) SetHeaders(v map[string]*string) *GetInstanceLDAPAuthServerResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceLDAPAuthServerResponse) SetStatusCode(v int32) *GetInstanceLDAPAuthServerResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceLDAPAuthServerResponse) SetBody(v *GetInstanceLDAPAuthServerResponseBody) *GetInstanceLDAPAuthServerResponse {
	s.Body = v
	return s
}

type GetInstanceStoreInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetInstanceStoreInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStoreInfoRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceStoreInfoRequest) SetInstanceId(v string) *GetInstanceStoreInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceStoreInfoRequest) SetRegionId(v string) *GetInstanceStoreInfoRequest {
	s.RegionId = &v
	return s
}

type GetInstanceStoreInfoResponseBody struct {
	// example:
	//
	// 102400
	Max *int64 `json:"Max,omitempty" xml:"Max,omitempty"`
	// example:
	//
	// 5EAB922E-F476-5DFA-9290-313C608E724B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1024
	Usage *int64 `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s GetInstanceStoreInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStoreInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceStoreInfoResponseBody) SetMax(v int64) *GetInstanceStoreInfoResponseBody {
	s.Max = &v
	return s
}

func (s *GetInstanceStoreInfoResponseBody) SetRequestId(v string) *GetInstanceStoreInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceStoreInfoResponseBody) SetUsage(v int64) *GetInstanceStoreInfoResponseBody {
	s.Usage = &v
	return s
}

type GetInstanceStoreInfoResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceStoreInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceStoreInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStoreInfoResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceStoreInfoResponse) SetHeaders(v map[string]*string) *GetInstanceStoreInfoResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceStoreInfoResponse) SetStatusCode(v int32) *GetInstanceStoreInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceStoreInfoResponse) SetBody(v *GetInstanceStoreInfoResponseBody) *GetInstanceStoreInfoResponse {
	s.Body = v
	return s
}

type GetInstanceTwoFactorRequest struct {
	// The ID of the bastion host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetInstanceTwoFactorRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTwoFactorRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceTwoFactorRequest) SetInstanceId(v string) *GetInstanceTwoFactorRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceTwoFactorRequest) SetRegionId(v string) *GetInstanceTwoFactorRequest {
	s.RegionId = &v
	return s
}

type GetInstanceTwoFactorResponseBody struct {
	// The settings of two-factor authentication.
	Config *GetInstanceTwoFactorResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceTwoFactorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTwoFactorResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceTwoFactorResponseBody) SetConfig(v *GetInstanceTwoFactorResponseBodyConfig) *GetInstanceTwoFactorResponseBody {
	s.Config = v
	return s
}

func (s *GetInstanceTwoFactorResponseBody) SetRequestId(v string) *GetInstanceTwoFactorResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceTwoFactorResponseBodyConfig struct {
	// Indicates whether two-factor authentication is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	EnableTwoFactor *bool `json:"EnableTwoFactor,omitempty" xml:"EnableTwoFactor,omitempty"`
	// The duration within which two-factor authentication is not required after a local user passes two-factor authentication. Valid values: `0 to 168`. Unit: hours.
	//
	// > If 0 is returned, a local user must pass two-factor authentication every time the local user logs on to the bastion host.
	//
	// example:
	//
	// 1
	SkipTwoFactorTime *int64 `json:"SkipTwoFactorTime,omitempty" xml:"SkipTwoFactorTime,omitempty"`
	// The two-factor authentication methods.
	TwoFactorMethods []*string `json:"TwoFactorMethods,omitempty" xml:"TwoFactorMethods,omitempty" type:"Repeated"`
}

func (s GetInstanceTwoFactorResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTwoFactorResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *GetInstanceTwoFactorResponseBodyConfig) SetEnableTwoFactor(v bool) *GetInstanceTwoFactorResponseBodyConfig {
	s.EnableTwoFactor = &v
	return s
}

func (s *GetInstanceTwoFactorResponseBodyConfig) SetSkipTwoFactorTime(v int64) *GetInstanceTwoFactorResponseBodyConfig {
	s.SkipTwoFactorTime = &v
	return s
}

func (s *GetInstanceTwoFactorResponseBodyConfig) SetTwoFactorMethods(v []*string) *GetInstanceTwoFactorResponseBodyConfig {
	s.TwoFactorMethods = v
	return s
}

type GetInstanceTwoFactorResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceTwoFactorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceTwoFactorResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTwoFactorResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceTwoFactorResponse) SetHeaders(v map[string]*string) *GetInstanceTwoFactorResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceTwoFactorResponse) SetStatusCode(v int32) *GetInstanceTwoFactorResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceTwoFactorResponse) SetBody(v *GetInstanceTwoFactorResponseBody) *GetInstanceTwoFactorResponse {
	s.Body = v
	return s
}

type GetNetworkDomainRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances ](https://help.aliyun.com/document_detail/153281.html)operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-i7m2btk6g48
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain to query.
	//
	// > You can call the [ListNetworkDomains ](https://help.aliyun.com/document_detail/2758827.html)operation to query the network domain ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetNetworkDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkDomainRequest) GoString() string {
	return s.String()
}

func (s *GetNetworkDomainRequest) SetInstanceId(v string) *GetNetworkDomainRequest {
	s.InstanceId = &v
	return s
}

func (s *GetNetworkDomainRequest) SetNetworkDomainId(v string) *GetNetworkDomainRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *GetNetworkDomainRequest) SetRegionId(v string) *GetNetworkDomainRequest {
	s.RegionId = &v
	return s
}

type GetNetworkDomainResponseBody struct {
	// The detailed information about the network domain.
	NetworkDomain *GetNetworkDomainResponseBodyNetworkDomain `json:"NetworkDomain,omitempty" xml:"NetworkDomain,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 05F59944-2E24-595C-B21A-8C9955E60FAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetNetworkDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkDomainResponseBody) GoString() string {
	return s.String()
}

func (s *GetNetworkDomainResponseBody) SetNetworkDomain(v *GetNetworkDomainResponseBodyNetworkDomain) *GetNetworkDomainResponseBody {
	s.NetworkDomain = v
	return s
}

func (s *GetNetworkDomainResponseBody) SetRequestId(v string) *GetNetworkDomainResponseBody {
	s.RequestId = &v
	return s
}

type GetNetworkDomainResponseBodyNetworkDomain struct {
	// The remarks of the network domain.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// Indicates whether the network domain is a built-in network domain.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Default *bool `json:"Default,omitempty" xml:"Default,omitempty"`
	// The network domain ID.
	//
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The name of the network domain.
	//
	// example:
	//
	// SSH Proxy
	NetworkDomainName *string `json:"NetworkDomainName,omitempty" xml:"NetworkDomainName,omitempty"`
	// The connection mode of the network domain. Valid values:
	//
	// 	- Direct
	//
	// 	- Proxy
	//
	// example:
	//
	// Proxy
	NetworkDomainType *string `json:"NetworkDomainType,omitempty" xml:"NetworkDomainType,omitempty"`
	// The information about the proxy servers.
	Proxies []*GetNetworkDomainResponseBodyNetworkDomainProxies `json:"Proxies,omitempty" xml:"Proxies,omitempty" type:"Repeated"`
}

func (s GetNetworkDomainResponseBodyNetworkDomain) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkDomainResponseBodyNetworkDomain) GoString() string {
	return s.String()
}

func (s *GetNetworkDomainResponseBodyNetworkDomain) SetComment(v string) *GetNetworkDomainResponseBodyNetworkDomain {
	s.Comment = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomain) SetDefault(v bool) *GetNetworkDomainResponseBodyNetworkDomain {
	s.Default = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomain) SetNetworkDomainId(v string) *GetNetworkDomainResponseBodyNetworkDomain {
	s.NetworkDomainId = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomain) SetNetworkDomainName(v string) *GetNetworkDomainResponseBodyNetworkDomain {
	s.NetworkDomainName = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomain) SetNetworkDomainType(v string) *GetNetworkDomainResponseBodyNetworkDomain {
	s.NetworkDomainType = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomain) SetProxies(v []*GetNetworkDomainResponseBodyNetworkDomainProxies) *GetNetworkDomainResponseBodyNetworkDomain {
	s.Proxies = v
	return s
}

type GetNetworkDomainResponseBodyNetworkDomainProxies struct {
	// The IP address of the proxy server.
	//
	// example:
	//
	// ``47.102.**.**``
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// Indicates whether the proxy server has a password. Valid values:
	//
	// - **true**
	//
	// - **false**
	//
	// example:
	//
	// true
	HasPassword *bool `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// The node type of the proxy server. Valid values:
	//
	// - **Master**: primary proxy server.
	//
	// - **Slave**: secondary proxy server.
	//
	// example:
	//
	// Master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// The port of the proxy server.
	//
	// example:
	//
	// 22
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The status of the proxy server.
	//
	// - **Available**
	//
	// - **Unavailable**
	//
	// example:
	//
	// Unavailable
	ProxyState *string `json:"ProxyState,omitempty" xml:"ProxyState,omitempty"`
	// The error code that indicates the status of the proxy server.
	//
	// - **CHECK_PWD_FAILED**: The password is invalid.
	//
	// - **CHECK_PWD_TIMEOUT**: The password verification session timed out.
	//
	// - **CHECK_PWD_NETWORK_ERR**: A network error occurred.
	//
	// - **UNEXPECTED**: An unknown error occurred.
	//
	// example:
	//
	// CHECK_PWD_TIMEOUT
	ProxyStateErrorCode *string `json:"ProxyStateErrorCode,omitempty" xml:"ProxyStateErrorCode,omitempty"`
	// The proxy type. Valid values:
	//
	// - **SSHProxy**
	//
	// - **HTTPProxy**
	//
	// - **Socks5Proxy**
	//
	// example:
	//
	// HTTPProxy
	ProxyType *string `json:"ProxyType,omitempty" xml:"ProxyType,omitempty"`
	// The username of the proxy server.
	//
	// example:
	//
	// root
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetNetworkDomainResponseBodyNetworkDomainProxies) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkDomainResponseBodyNetworkDomainProxies) GoString() string {
	return s.String()
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetAddress(v string) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.Address = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetHasPassword(v bool) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.HasPassword = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetNodeType(v string) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.NodeType = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetPort(v int32) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.Port = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetProxyState(v string) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.ProxyState = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetProxyStateErrorCode(v string) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.ProxyStateErrorCode = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetProxyType(v string) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.ProxyType = &v
	return s
}

func (s *GetNetworkDomainResponseBodyNetworkDomainProxies) SetUser(v string) *GetNetworkDomainResponseBodyNetworkDomainProxies {
	s.User = &v
	return s
}

type GetNetworkDomainResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNetworkDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNetworkDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkDomainResponse) GoString() string {
	return s.String()
}

func (s *GetNetworkDomainResponse) SetHeaders(v map[string]*string) *GetNetworkDomainResponse {
	s.Headers = v
	return s
}

func (s *GetNetworkDomainResponse) SetStatusCode(v int32) *GetNetworkDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNetworkDomainResponse) SetBody(v *GetNetworkDomainResponseBody) *GetNetworkDomainResponse {
	s.Body = v
	return s
}

type GetPolicyRequest struct {
	// The ID of the bastion host to which the control policy to query belongs.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-zvp2d3syb0g
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to query.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host to which the control policy to query belongs.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyRequest) GoString() string {
	return s.String()
}

func (s *GetPolicyRequest) SetInstanceId(v string) *GetPolicyRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPolicyRequest) SetPolicyId(v string) *GetPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *GetPolicyRequest) SetRegionId(v string) *GetPolicyRequest {
	s.RegionId = &v
	return s
}

type GetPolicyResponseBody struct {
	// The details of the control policy.
	Policy *GetPolicyResponseBodyPolicy `json:"Policy,omitempty" xml:"Policy,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 0D29F2C0-8B4B-5861-9474-F3F23D25594B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBody) SetPolicy(v *GetPolicyResponseBodyPolicy) *GetPolicyResponseBody {
	s.Policy = v
	return s
}

func (s *GetPolicyResponseBody) SetRequestId(v string) *GetPolicyResponseBody {
	s.RequestId = &v
	return s
}

type GetPolicyResponseBodyPolicy struct {
	// The details of the logon period restrictions.
	AccessTimeRangeConfig *GetPolicyResponseBodyPolicyAccessTimeRangeConfig `json:"AccessTimeRangeConfig,omitempty" xml:"AccessTimeRangeConfig,omitempty" type:"Struct"`
	// The O\\&M approval setting.
	ApprovalConfig *GetPolicyResponseBodyPolicyApprovalConfig `json:"ApprovalConfig,omitempty" xml:"ApprovalConfig,omitempty" type:"Struct"`
	// The details of the command policy.
	CommandConfig *GetPolicyResponseBodyPolicyCommandConfig `json:"CommandConfig,omitempty" xml:"CommandConfig,omitempty" type:"Struct"`
	// The description of the control policy.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The access control settings on source IP addresses.
	IPAclConfig *GetPolicyResponseBodyPolicyIPAclConfig `json:"IPAclConfig,omitempty" xml:"IPAclConfig,omitempty" type:"Struct"`
	// The ID of the control policy.
	//
	// example:
	//
	// 3
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The name of the control policy.
	//
	// example:
	//
	// test
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The priority of the control policy. A smaller value indicates a higher priority.
	//
	// example:
	//
	// 1
	Priority *int64 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The details of protocol control.
	ProtocolConfig *GetPolicyResponseBodyPolicyProtocolConfig `json:"ProtocolConfig,omitempty" xml:"ProtocolConfig,omitempty" type:"Struct"`
}

func (s GetPolicyResponseBodyPolicy) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicy) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicy) SetAccessTimeRangeConfig(v *GetPolicyResponseBodyPolicyAccessTimeRangeConfig) *GetPolicyResponseBodyPolicy {
	s.AccessTimeRangeConfig = v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetApprovalConfig(v *GetPolicyResponseBodyPolicyApprovalConfig) *GetPolicyResponseBodyPolicy {
	s.ApprovalConfig = v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetCommandConfig(v *GetPolicyResponseBodyPolicyCommandConfig) *GetPolicyResponseBodyPolicy {
	s.CommandConfig = v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetComment(v string) *GetPolicyResponseBodyPolicy {
	s.Comment = &v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetIPAclConfig(v *GetPolicyResponseBodyPolicyIPAclConfig) *GetPolicyResponseBodyPolicy {
	s.IPAclConfig = v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetPolicyId(v string) *GetPolicyResponseBodyPolicy {
	s.PolicyId = &v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetPolicyName(v string) *GetPolicyResponseBodyPolicy {
	s.PolicyName = &v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetPriority(v int64) *GetPolicyResponseBodyPolicy {
	s.Priority = &v
	return s
}

func (s *GetPolicyResponseBodyPolicy) SetProtocolConfig(v *GetPolicyResponseBodyPolicyProtocolConfig) *GetPolicyResponseBodyPolicy {
	s.ProtocolConfig = v
	return s
}

type GetPolicyResponseBodyPolicyAccessTimeRangeConfig struct {
	// The details of the periods during which logons are allowed.
	EffectiveTime []*GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty" type:"Repeated"`
}

func (s GetPolicyResponseBodyPolicyAccessTimeRangeConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyAccessTimeRangeConfig) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyAccessTimeRangeConfig) SetEffectiveTime(v []*GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime) *GetPolicyResponseBodyPolicyAccessTimeRangeConfig {
	s.EffectiveTime = v
	return s
}

type GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime struct {
	// The days of a week on which logons are allowed.
	Days []*string `json:"Days,omitempty" xml:"Days,omitempty" type:"Repeated"`
	// The time periods during which logons are allowed.
	Hours []*string `json:"Hours,omitempty" xml:"Hours,omitempty" type:"Repeated"`
}

func (s GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime) SetDays(v []*string) *GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime {
	s.Days = v
	return s
}

func (s *GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime) SetHours(v []*string) *GetPolicyResponseBodyPolicyAccessTimeRangeConfigEffectiveTime {
	s.Hours = v
	return s
}

type GetPolicyResponseBodyPolicyApprovalConfig struct {
	// Indicates whether O\\&M approval is enabled in the control policy. Valid values:
	//
	// 	- **On**: O\\&M approval is enabled.
	//
	// 	- **Off**: O\\&M approval is disabled.
	//
	// example:
	//
	// Off
	SwitchStatus *string `json:"SwitchStatus,omitempty" xml:"SwitchStatus,omitempty"`
}

func (s GetPolicyResponseBodyPolicyApprovalConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyApprovalConfig) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyApprovalConfig) SetSwitchStatus(v string) *GetPolicyResponseBodyPolicyApprovalConfig {
	s.SwitchStatus = &v
	return s
}

type GetPolicyResponseBodyPolicyCommandConfig struct {
	// The details of the command approval settings.
	Approval *GetPolicyResponseBodyPolicyCommandConfigApproval `json:"Approval,omitempty" xml:"Approval,omitempty" type:"Struct"`
	// The details of the command control setting.
	Deny *GetPolicyResponseBodyPolicyCommandConfigDeny `json:"Deny,omitempty" xml:"Deny,omitempty" type:"Struct"`
}

func (s GetPolicyResponseBodyPolicyCommandConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyCommandConfig) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyCommandConfig) SetApproval(v *GetPolicyResponseBodyPolicyCommandConfigApproval) *GetPolicyResponseBodyPolicyCommandConfig {
	s.Approval = v
	return s
}

func (s *GetPolicyResponseBodyPolicyCommandConfig) SetDeny(v *GetPolicyResponseBodyPolicyCommandConfigDeny) *GetPolicyResponseBodyPolicyCommandConfig {
	s.Deny = v
	return s
}

type GetPolicyResponseBodyPolicyCommandConfigApproval struct {
	// An array of commands that can be run only after approval.
	Commands []*string `json:"Commands,omitempty" xml:"Commands,omitempty" type:"Repeated"`
}

func (s GetPolicyResponseBodyPolicyCommandConfigApproval) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyCommandConfigApproval) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyCommandConfigApproval) SetCommands(v []*string) *GetPolicyResponseBodyPolicyCommandConfigApproval {
	s.Commands = v
	return s
}

type GetPolicyResponseBodyPolicyCommandConfigDeny struct {
	// The type of command control. Valid values:
	//
	// 	- white: whitelist mode.
	//
	// 	- black: blacklist mode.
	//
	// example:
	//
	// black
	AclType *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	// An array of controlled commands.
	Commands []*string `json:"Commands,omitempty" xml:"Commands,omitempty" type:"Repeated"`
}

func (s GetPolicyResponseBodyPolicyCommandConfigDeny) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyCommandConfigDeny) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyCommandConfigDeny) SetAclType(v string) *GetPolicyResponseBodyPolicyCommandConfigDeny {
	s.AclType = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyCommandConfigDeny) SetCommands(v []*string) *GetPolicyResponseBodyPolicyCommandConfigDeny {
	s.Commands = v
	return s
}

type GetPolicyResponseBodyPolicyIPAclConfig struct {
	// The mode of access control on source IP addresses. Valid values:
	//
	// 	- white: whitelist mode.
	//
	// 	- black: blacklist mode.
	//
	// example:
	//
	// black
	AclType *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	// The IP addresses from which logons are not allowed.
	IPs []*string `json:"IPs,omitempty" xml:"IPs,omitempty" type:"Repeated"`
}

func (s GetPolicyResponseBodyPolicyIPAclConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyIPAclConfig) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyIPAclConfig) SetAclType(v string) *GetPolicyResponseBodyPolicyIPAclConfig {
	s.AclType = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyIPAclConfig) SetIPs(v []*string) *GetPolicyResponseBodyPolicyIPAclConfig {
	s.IPs = v
	return s
}

type GetPolicyResponseBodyPolicyProtocolConfig struct {
	// The configuration details of Remote Desktop Protocol (RDP) options.
	RDP *GetPolicyResponseBodyPolicyProtocolConfigRDP `json:"RDP,omitempty" xml:"RDP,omitempty" type:"Struct"`
	// The configuration details of SSH and SSH File Transfer Protocol (SFTP) options.
	SSH *GetPolicyResponseBodyPolicyProtocolConfigSSH `json:"SSH,omitempty" xml:"SSH,omitempty" type:"Struct"`
}

func (s GetPolicyResponseBodyPolicyProtocolConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyProtocolConfig) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyProtocolConfig) SetRDP(v *GetPolicyResponseBodyPolicyProtocolConfigRDP) *GetPolicyResponseBodyPolicyProtocolConfig {
	s.RDP = v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfig) SetSSH(v *GetPolicyResponseBodyPolicyProtocolConfigSSH) *GetPolicyResponseBodyPolicyProtocolConfig {
	s.SSH = v
	return s
}

type GetPolicyResponseBodyPolicyProtocolConfigRDP struct {
	// Indicates whether downloading from the clipboard is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	ClipboardDownload *string `json:"ClipboardDownload,omitempty" xml:"ClipboardDownload,omitempty"`
	// Indicates whether file uploading from the clipboard is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	ClipboardUpload *string `json:"ClipboardUpload,omitempty" xml:"ClipboardUpload,omitempty"`
	// Indicates whether driver mapping is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	DiskRedirection *string `json:"DiskRedirection,omitempty" xml:"DiskRedirection,omitempty"`
	// Indicates whether keyboard recording is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	RecordKeyboard *string `json:"RecordKeyboard,omitempty" xml:"RecordKeyboard,omitempty"`
}

func (s GetPolicyResponseBodyPolicyProtocolConfigRDP) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyProtocolConfigRDP) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigRDP) SetClipboardDownload(v string) *GetPolicyResponseBodyPolicyProtocolConfigRDP {
	s.ClipboardDownload = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigRDP) SetClipboardUpload(v string) *GetPolicyResponseBodyPolicyProtocolConfigRDP {
	s.ClipboardUpload = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigRDP) SetDiskRedirection(v string) *GetPolicyResponseBodyPolicyProtocolConfigRDP {
	s.DiskRedirection = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigRDP) SetRecordKeyboard(v string) *GetPolicyResponseBodyPolicyProtocolConfigRDP {
	s.RecordKeyboard = &v
	return s
}

type GetPolicyResponseBodyPolicyProtocolConfigSSH struct {
	// Indicates whether remote command execution is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	ExecCommand *string `json:"ExecCommand,omitempty" xml:"ExecCommand,omitempty"`
	// Indicates whether the SFTP channel option is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SFTPChannel *string `json:"SFTPChannel,omitempty" xml:"SFTPChannel,omitempty"`
	// Indicates whether file downloading is enabled in SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SFTPDownloadFile *string `json:"SFTPDownloadFile,omitempty" xml:"SFTPDownloadFile,omitempty"`
	// Indicates whether folder creation is enabled in SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SFTPMkdir *string `json:"SFTPMkdir,omitempty" xml:"SFTPMkdir,omitempty"`
	// Indicates whether file deletion is enabled in SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SFTPRemoveFile *string `json:"SFTPRemoveFile,omitempty" xml:"SFTPRemoveFile,omitempty"`
	// Indicates whether file renaming is enabled in SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SFTPRenameFile *string `json:"SFTPRenameFile,omitempty" xml:"SFTPRenameFile,omitempty"`
	// Indicates whether folder deletion is enabled in SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SFTPRmdir *string `json:"SFTPRmdir,omitempty" xml:"SFTPRmdir,omitempty"`
	// Indicates whether file uploading is enabled in SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SFTPUploadFile *string `json:"SFTPUploadFile,omitempty" xml:"SFTPUploadFile,omitempty"`
	// Indicates whether the SSH channel option is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	SSHChannel *string `json:"SSHChannel,omitempty" xml:"SSHChannel,omitempty"`
	// Indicates whether X11 forwarding is enabled. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// example:
	//
	// Enable
	X11Forwarding *string `json:"X11Forwarding,omitempty" xml:"X11Forwarding,omitempty"`
}

func (s GetPolicyResponseBodyPolicyProtocolConfigSSH) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponseBodyPolicyProtocolConfigSSH) GoString() string {
	return s.String()
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetExecCommand(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.ExecCommand = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSFTPChannel(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SFTPChannel = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSFTPDownloadFile(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SFTPDownloadFile = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSFTPMkdir(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SFTPMkdir = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSFTPRemoveFile(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SFTPRemoveFile = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSFTPRenameFile(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SFTPRenameFile = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSFTPRmdir(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SFTPRmdir = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSFTPUploadFile(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SFTPUploadFile = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetSSHChannel(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.SSHChannel = &v
	return s
}

func (s *GetPolicyResponseBodyPolicyProtocolConfigSSH) SetX11Forwarding(v string) *GetPolicyResponseBodyPolicyProtocolConfigSSH {
	s.X11Forwarding = &v
	return s
}

type GetPolicyResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyResponse) GoString() string {
	return s.String()
}

func (s *GetPolicyResponse) SetHeaders(v map[string]*string) *GetPolicyResponse {
	s.Headers = v
	return s
}

func (s *GetPolicyResponse) SetStatusCode(v int32) *GetPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPolicyResponse) SetBody(v *GetPolicyResponseBody) *GetPolicyResponse {
	s.Body = v
	return s
}

type GetPolicyAssetScopeRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The control policy ID.
	//
	// > You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetPolicyAssetScopeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyAssetScopeRequest) GoString() string {
	return s.String()
}

func (s *GetPolicyAssetScopeRequest) SetInstanceId(v string) *GetPolicyAssetScopeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPolicyAssetScopeRequest) SetPolicyId(v string) *GetPolicyAssetScopeRequest {
	s.PolicyId = &v
	return s
}

func (s *GetPolicyAssetScopeRequest) SetRegionId(v string) *GetPolicyAssetScopeRequest {
	s.RegionId = &v
	return s
}

type GetPolicyAssetScopeResponseBody struct {
	// The assets to which the control policy applies.
	AssetScope *GetPolicyAssetScopeResponseBodyAssetScope `json:"AssetScope,omitempty" xml:"AssetScope,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPolicyAssetScopeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyAssetScopeResponseBody) GoString() string {
	return s.String()
}

func (s *GetPolicyAssetScopeResponseBody) SetAssetScope(v *GetPolicyAssetScopeResponseBodyAssetScope) *GetPolicyAssetScopeResponseBody {
	s.AssetScope = v
	return s
}

func (s *GetPolicyAssetScopeResponseBody) SetRequestId(v string) *GetPolicyAssetScopeResponseBody {
	s.RequestId = &v
	return s
}

type GetPolicyAssetScopeResponseBodyAssetScope struct {
	// The databases and database accounts to which the control policy applies.
	Databases []*GetPolicyAssetScopeResponseBodyAssetScopeDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The asset groups and asset accounts to which the control policy applies.
	HostGroups []*GetPolicyAssetScopeResponseBodyAssetScopeHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// The hosts and host accounts to which the control policy applies.
	Hosts []*GetPolicyAssetScopeResponseBodyAssetScopeHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The scope of assets to which the control policy applies.
	//
	// 	- If **All*	- is returned for this parameter, the control policy applies to all assets.
	//
	// 	- If no value is returned for this parameter, the control policy applies to the assets specified in the return values of Databases, HostGroups, and Hosts.
	//
	// example:
	//
	// All
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
}

func (s GetPolicyAssetScopeResponseBodyAssetScope) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyAssetScopeResponseBodyAssetScope) GoString() string {
	return s.String()
}

func (s *GetPolicyAssetScopeResponseBodyAssetScope) SetDatabases(v []*GetPolicyAssetScopeResponseBodyAssetScopeDatabases) *GetPolicyAssetScopeResponseBodyAssetScope {
	s.Databases = v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScope) SetHostGroups(v []*GetPolicyAssetScopeResponseBodyAssetScopeHostGroups) *GetPolicyAssetScopeResponseBodyAssetScope {
	s.HostGroups = v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScope) SetHosts(v []*GetPolicyAssetScopeResponseBodyAssetScopeHosts) *GetPolicyAssetScopeResponseBodyAssetScope {
	s.Hosts = v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScope) SetScopeType(v string) *GetPolicyAssetScopeResponseBodyAssetScope {
	s.ScopeType = &v
	return s
}

type GetPolicyAssetScopeResponseBodyAssetScopeDatabases struct {
	// The scope of database accounts to which the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all database accounts of the database.
	//
	// 	- **AccountId**: The control policy applies to specified database accounts of the database.
	//
	// example:
	//
	// AccountId
	AccountScopeType *string `json:"AccountScopeType,omitempty" xml:"AccountScopeType,omitempty"`
	// The IDs of database accounts to which the control policy applies.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The database ID.
	//
	// example:
	//
	// 17
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s GetPolicyAssetScopeResponseBodyAssetScopeDatabases) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyAssetScopeResponseBodyAssetScopeDatabases) GoString() string {
	return s.String()
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeDatabases) SetAccountScopeType(v string) *GetPolicyAssetScopeResponseBodyAssetScopeDatabases {
	s.AccountScopeType = &v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeDatabases) SetDatabaseAccountIds(v []*string) *GetPolicyAssetScopeResponseBodyAssetScopeDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeDatabases) SetDatabaseId(v string) *GetPolicyAssetScopeResponseBodyAssetScopeDatabases {
	s.DatabaseId = &v
	return s
}

type GetPolicyAssetScopeResponseBodyAssetScopeHostGroups struct {
	// The asset accounts to which the control policy applies.
	AccountNames []*string `json:"AccountNames,omitempty" xml:"AccountNames,omitempty" type:"Repeated"`
	// The scope of asset accounts to which the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all accounts in the asset group.
	//
	// 	- **AccountName**: The control policy applies to specified accounts in the asset group.
	//
	// example:
	//
	// All
	AccountScopeType *string `json:"AccountScopeType,omitempty" xml:"AccountScopeType,omitempty"`
	// The asset group ID.
	//
	// example:
	//
	// 4
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
}

func (s GetPolicyAssetScopeResponseBodyAssetScopeHostGroups) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyAssetScopeResponseBodyAssetScopeHostGroups) GoString() string {
	return s.String()
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeHostGroups) SetAccountNames(v []*string) *GetPolicyAssetScopeResponseBodyAssetScopeHostGroups {
	s.AccountNames = v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeHostGroups) SetAccountScopeType(v string) *GetPolicyAssetScopeResponseBodyAssetScopeHostGroups {
	s.AccountScopeType = &v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeHostGroups) SetHostGroupId(v string) *GetPolicyAssetScopeResponseBodyAssetScopeHostGroups {
	s.HostGroupId = &v
	return s
}

type GetPolicyAssetScopeResponseBodyAssetScopeHosts struct {
	// The scope of host accounts to which the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all accounts of the host.
	//
	// 	- **AccountId**: The control policy applies to specified accounts of the host.
	//
	// example:
	//
	// All
	AccountScopeType *string `json:"AccountScopeType,omitempty" xml:"AccountScopeType,omitempty"`
	// The host accounts to which the control policy applies.
	HostAccountIds []*string `json:"HostAccountIds,omitempty" xml:"HostAccountIds,omitempty" type:"Repeated"`
	// The host ID.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s GetPolicyAssetScopeResponseBodyAssetScopeHosts) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyAssetScopeResponseBodyAssetScopeHosts) GoString() string {
	return s.String()
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeHosts) SetAccountScopeType(v string) *GetPolicyAssetScopeResponseBodyAssetScopeHosts {
	s.AccountScopeType = &v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeHosts) SetHostAccountIds(v []*string) *GetPolicyAssetScopeResponseBodyAssetScopeHosts {
	s.HostAccountIds = v
	return s
}

func (s *GetPolicyAssetScopeResponseBodyAssetScopeHosts) SetHostId(v string) *GetPolicyAssetScopeResponseBodyAssetScopeHosts {
	s.HostId = &v
	return s
}

type GetPolicyAssetScopeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPolicyAssetScopeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPolicyAssetScopeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyAssetScopeResponse) GoString() string {
	return s.String()
}

func (s *GetPolicyAssetScopeResponse) SetHeaders(v map[string]*string) *GetPolicyAssetScopeResponse {
	s.Headers = v
	return s
}

func (s *GetPolicyAssetScopeResponse) SetStatusCode(v int32) *GetPolicyAssetScopeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPolicyAssetScopeResponse) SetBody(v *GetPolicyAssetScopeResponseBody) *GetPolicyAssetScopeResponse {
	s.Body = v
	return s
}

type GetPolicyUserScopeRequest struct {
	// The ID of the bastion host to which the control policy to query belongs.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastion-xxxx-xx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to query.
	//
	// > You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host to which the control policy to query belongs.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetPolicyUserScopeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyUserScopeRequest) GoString() string {
	return s.String()
}

func (s *GetPolicyUserScopeRequest) SetInstanceId(v string) *GetPolicyUserScopeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPolicyUserScopeRequest) SetPolicyId(v string) *GetPolicyUserScopeRequest {
	s.PolicyId = &v
	return s
}

func (s *GetPolicyUserScopeRequest) SetRegionId(v string) *GetPolicyUserScopeRequest {
	s.RegionId = &v
	return s
}

type GetPolicyUserScopeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The users to whom the control policy applies.
	UserScope *GetPolicyUserScopeResponseBodyUserScope `json:"UserScope,omitempty" xml:"UserScope,omitempty" type:"Struct"`
}

func (s GetPolicyUserScopeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyUserScopeResponseBody) GoString() string {
	return s.String()
}

func (s *GetPolicyUserScopeResponseBody) SetRequestId(v string) *GetPolicyUserScopeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPolicyUserScopeResponseBody) SetUserScope(v *GetPolicyUserScopeResponseBodyUserScope) *GetPolicyUserScopeResponseBody {
	s.UserScope = v
	return s
}

type GetPolicyUserScopeResponseBodyUserScope struct {
	// The scope of users to whom the control policy applies.
	//
	// 	- If **All*	- is returned for this parameter, the control policy applies to all users.
	//
	// 	- If no value is returned for this parameter, the control policy applies to the assets specified in the return values of UserGroupIds and UserIds.
	//
	// example:
	//
	// All
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
	// The user groups to which the control policy applies.
	UserGroupIds []*string `json:"UserGroupIds,omitempty" xml:"UserGroupIds,omitempty" type:"Repeated"`
	// The users to whom the control policy applies.
	UserIds []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s GetPolicyUserScopeResponseBodyUserScope) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyUserScopeResponseBodyUserScope) GoString() string {
	return s.String()
}

func (s *GetPolicyUserScopeResponseBodyUserScope) SetScopeType(v string) *GetPolicyUserScopeResponseBodyUserScope {
	s.ScopeType = &v
	return s
}

func (s *GetPolicyUserScopeResponseBodyUserScope) SetUserGroupIds(v []*string) *GetPolicyUserScopeResponseBodyUserScope {
	s.UserGroupIds = v
	return s
}

func (s *GetPolicyUserScopeResponseBodyUserScope) SetUserIds(v []*string) *GetPolicyUserScopeResponseBodyUserScope {
	s.UserIds = v
	return s
}

type GetPolicyUserScopeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPolicyUserScopeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPolicyUserScopeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPolicyUserScopeResponse) GoString() string {
	return s.String()
}

func (s *GetPolicyUserScopeResponse) SetHeaders(v map[string]*string) *GetPolicyUserScopeResponse {
	s.Headers = v
	return s
}

func (s *GetPolicyUserScopeResponse) SetStatusCode(v int32) *GetPolicyUserScopeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPolicyUserScopeResponse) SetBody(v *GetPolicyUserScopeResponseBody) *GetPolicyUserScopeResponse {
	s.Body = v
	return s
}

type GetRuleRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-wwo35essw07
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the authorization rule to query.
	//
	// >  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 18
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRuleRequest) GoString() string {
	return s.String()
}

func (s *GetRuleRequest) SetInstanceId(v string) *GetRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRuleRequest) SetRegionId(v string) *GetRuleRequest {
	s.RegionId = &v
	return s
}

func (s *GetRuleRequest) SetRuleId(v string) *GetRuleRequest {
	s.RuleId = &v
	return s
}

type GetRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned information about the authorization rule.
	Rule *GetRuleResponseBodyRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Struct"`
}

func (s GetRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBody) SetRequestId(v string) *GetRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRuleResponseBody) SetRule(v *GetRuleResponseBodyRule) *GetRuleResponseBody {
	s.Rule = v
	return s
}

type GetRuleResponseBodyRule struct {
	// The remarks of the authorization rule.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The databases on which permissions are granted by using the authorization rule.
	Databases []*GetRuleResponseBodyRuleDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The end time of the validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1698720972
	EffectiveEndTime *string `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The start time of the validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1687140883
	EffectiveStartTime *string `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The asset groups on which permissions are granted by using the authorization rule.
	HostGroups []*GetRuleResponseBodyRuleHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// The information about the hosts that the policy authorizes users to manage.
	Hosts []*GetRuleResponseBodyRuleHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The ID of the authorization rule.
	//
	// example:
	//
	// 3
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the authorization rule.
	//
	// example:
	//
	// rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The authorized user groups.
	UserGroups []*GetRuleResponseBodyRuleUserGroups `json:"UserGroups,omitempty" xml:"UserGroups,omitempty" type:"Repeated"`
	// The authorized users.
	Users []*GetRuleResponseBodyRuleUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Repeated"`
}

func (s GetRuleResponseBodyRule) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRule) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRule) SetComment(v string) *GetRuleResponseBodyRule {
	s.Comment = &v
	return s
}

func (s *GetRuleResponseBodyRule) SetDatabases(v []*GetRuleResponseBodyRuleDatabases) *GetRuleResponseBodyRule {
	s.Databases = v
	return s
}

func (s *GetRuleResponseBodyRule) SetEffectiveEndTime(v string) *GetRuleResponseBodyRule {
	s.EffectiveEndTime = &v
	return s
}

func (s *GetRuleResponseBodyRule) SetEffectiveStartTime(v string) *GetRuleResponseBodyRule {
	s.EffectiveStartTime = &v
	return s
}

func (s *GetRuleResponseBodyRule) SetHostGroups(v []*GetRuleResponseBodyRuleHostGroups) *GetRuleResponseBodyRule {
	s.HostGroups = v
	return s
}

func (s *GetRuleResponseBodyRule) SetHosts(v []*GetRuleResponseBodyRuleHosts) *GetRuleResponseBodyRule {
	s.Hosts = v
	return s
}

func (s *GetRuleResponseBodyRule) SetRuleId(v string) *GetRuleResponseBodyRule {
	s.RuleId = &v
	return s
}

func (s *GetRuleResponseBodyRule) SetRuleName(v string) *GetRuleResponseBodyRule {
	s.RuleName = &v
	return s
}

func (s *GetRuleResponseBodyRule) SetUserGroups(v []*GetRuleResponseBodyRuleUserGroups) *GetRuleResponseBodyRule {
	s.UserGroups = v
	return s
}

func (s *GetRuleResponseBodyRule) SetUsers(v []*GetRuleResponseBodyRuleUsers) *GetRuleResponseBodyRule {
	s.Users = v
	return s
}

type GetRuleResponseBodyRuleDatabases struct {
	// The database accounts on which permissions are granted by using the authorization rule.
	DatabaseAccounts []*GetRuleResponseBodyRuleDatabasesDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The ID of the database that the policy authorizes users to manage.
	//
	// example:
	//
	// 2
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s GetRuleResponseBodyRuleDatabases) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleDatabases) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleDatabases) SetDatabaseAccounts(v []*GetRuleResponseBodyRuleDatabasesDatabaseAccounts) *GetRuleResponseBodyRuleDatabases {
	s.DatabaseAccounts = v
	return s
}

func (s *GetRuleResponseBodyRuleDatabases) SetDatabaseId(v string) *GetRuleResponseBodyRuleDatabases {
	s.DatabaseId = &v
	return s
}

type GetRuleResponseBodyRuleDatabasesDatabaseAccounts struct {
	// The ID of the database account that the policy authorizes users to manage.
	//
	// example:
	//
	// 5
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
}

func (s GetRuleResponseBodyRuleDatabasesDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleDatabasesDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleDatabasesDatabaseAccounts) SetDatabaseAccountId(v string) *GetRuleResponseBodyRuleDatabasesDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

type GetRuleResponseBodyRuleHostGroups struct {
	// The asset accounts on which permissions are granted by using the authorization rule.
	HostAccountNames []*string `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The ID of the asset group that the policy authorizes users to manage.
	//
	// example:
	//
	// 7
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
}

func (s GetRuleResponseBodyRuleHostGroups) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleHostGroups) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleHostGroups) SetHostAccountNames(v []*string) *GetRuleResponseBodyRuleHostGroups {
	s.HostAccountNames = v
	return s
}

func (s *GetRuleResponseBodyRuleHostGroups) SetHostGroupId(v string) *GetRuleResponseBodyRuleHostGroups {
	s.HostGroupId = &v
	return s
}

type GetRuleResponseBodyRuleHosts struct {
	// The host accounts that the policy authorizes users to manage.
	HostAccounts []*GetRuleResponseBodyRuleHostsHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the host that the policy authorizes users to manage.
	//
	// example:
	//
	// 52
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s GetRuleResponseBodyRuleHosts) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleHosts) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleHosts) SetHostAccounts(v []*GetRuleResponseBodyRuleHostsHostAccounts) *GetRuleResponseBodyRuleHosts {
	s.HostAccounts = v
	return s
}

func (s *GetRuleResponseBodyRuleHosts) SetHostId(v string) *GetRuleResponseBodyRuleHosts {
	s.HostId = &v
	return s
}

type GetRuleResponseBodyRuleHostsHostAccounts struct {
	// The ID of the host account that the policy authorizes users to manage.
	//
	// example:
	//
	// 9
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
}

func (s GetRuleResponseBodyRuleHostsHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleHostsHostAccounts) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleHostsHostAccounts) SetHostAccountId(v string) *GetRuleResponseBodyRuleHostsHostAccounts {
	s.HostAccountId = &v
	return s
}

type GetRuleResponseBodyRuleUserGroups struct {
	// The ID of the authorized user group.
	//
	// example:
	//
	// 2
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s GetRuleResponseBodyRuleUserGroups) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleUserGroups) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleUserGroups) SetUserGroupId(v string) *GetRuleResponseBodyRuleUserGroups {
	s.UserGroupId = &v
	return s
}

type GetRuleResponseBodyRuleUsers struct {
	// The ID of the authorized user.
	//
	// example:
	//
	// 3
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetRuleResponseBodyRuleUsers) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleUsers) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleUsers) SetUserId(v string) *GetRuleResponseBodyRuleUsers {
	s.UserId = &v
	return s
}

type GetRuleResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponse) GoString() string {
	return s.String()
}

func (s *GetRuleResponse) SetHeaders(v map[string]*string) *GetRuleResponse {
	s.Headers = v
	return s
}

func (s *GetRuleResponse) SetStatusCode(v int32) *GetRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRuleResponse) SetBody(v *GetRuleResponseBody) *GetRuleResponse {
	s.Body = v
	return s
}

type GetUserRequest struct {
	// The ID of the bastion host on which you want to query the user.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host on which you want to query the user.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetUserRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserRequest) GoString() string {
	return s.String()
}

func (s *GetUserRequest) SetInstanceId(v string) *GetUserRequest {
	s.InstanceId = &v
	return s
}

func (s *GetUserRequest) SetRegionId(v string) *GetUserRequest {
	s.RegionId = &v
	return s
}

func (s *GetUserRequest) SetUserId(v string) *GetUserRequest {
	s.UserId = &v
	return s
}

type GetUserResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The detailed information about the queried user.
	User *GetUserResponseBodyUser `json:"User,omitempty" xml:"User,omitempty" type:"Struct"`
}

func (s GetUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserResponseBody) SetRequestId(v string) *GetUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserResponseBody) SetUser(v *GetUserResponseBodyUser) *GetUserResponseBody {
	s.User = v
	return s
}

type GetUserResponseBodyUser struct {
	// The description of the user.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The display name of the user.
	//
	// example:
	//
	// Bob
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The end of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1672502400
	EffectiveEndTime *int64 `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The beginning of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1669630029
	EffectiveStartTime *int64 `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The email address of the user.
	//
	// example:
	//
	// 1099**@qq.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// This parameter is required if LanguageStatus is set to Custom.
	//
	// - **zh-cn**: simplified Chinese.
	//
	// - **en**: English.
	//
	// example:
	//
	// en
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// Indicates whether notifications are sent in the language specified in the global settings or a custom language.
	//
	// 	- **Global**: Global
	//
	// 	- **Custom**: Custom
	//
	// example:
	//
	// Custom
	LanguageStatus *string `json:"LanguageStatus,omitempty" xml:"LanguageStatus,omitempty"`
	// The mobile phone number of the user.
	//
	// example:
	//
	// 1359999****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// The location in which the mobile number of the user is registered. Valid values:
	//
	// 	- **CN**: the Chinese mainland, whose country calling code is +86
	//
	// 	- **HK**: Hong Kong (China), whose country calling code is +852
	//
	// 	- **MO**: Macao (China), whose country calling code is +853
	//
	// 	- **TW**: Taiwan (China), whose country calling code is +886
	//
	// 	- **RU**: Russia, whose country calling code is +7
	//
	// 	- **SG**: Singapore, whose country calling code is +65
	//
	// 	- **MY**: Malaysia, whose country calling code is +60
	//
	// 	- **ID**: Indonesia, whose country calling code is +62
	//
	// 	- **DE**: Germany, whose country calling code is +49
	//
	// 	- **AU**: Australia, whose country calling code is +61
	//
	// 	- **US**: US, whose country calling code is +1
	//
	// 	- **AE**: United Arab Emirates, whose country calling code is +971
	//
	// 	- **JP:*	- Japan, whose country calling code is +81
	//
	// 	- **GB**: UK, whose country calling code is +44
	//
	// 	- **IN**: India, whose country calling code is +91
	//
	// 	- **KR**: Republic of Korea, whose country calling code is +82
	//
	// 	- **PH**: Philippines, whose country calling code is +63
	//
	// 	- **CH**: Switzerland, whose country calling code is +41
	//
	// 	- **SE**: Sweden, whose country calling code is +46
	//
	// example:
	//
	// CN
	MobileCountryCode *string `json:"MobileCountryCode,omitempty" xml:"MobileCountryCode,omitempty"`
	// Specifies whether password reset is required upon the next logon. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	NeedResetPassword *bool `json:"NeedResetPassword,omitempty" xml:"NeedResetPassword,omitempty"`
	// The source of the user. Valid values:
	//
	// 	- **Local**: a local user
	//
	// 	- **Ram**: a RAM user
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The unique ID of the user.
	//
	// > This parameter uniquely identifies a RAM user of the bastion host. A value is returned for this parameter if the **Source*	- parameter is set to **Ram**. No value is returned for this parameter if the **Source*	- parameter is set to **Local**.
	//
	// example:
	//
	// 122748924538****
	SourceUserId *string `json:"SourceUserId,omitempty" xml:"SourceUserId,omitempty"`
	// An array that consists of the details of the two-factor authentication method.
	TwoFactorMethods []*string `json:"TwoFactorMethods,omitempty" xml:"TwoFactorMethods,omitempty" type:"Repeated"`
	// The two-factor authentication status of the user. Valid values:
	//
	// 	- **Global**: The global settings are used.
	//
	// 	- **Disable**: The two-factor authentication is disabled.
	//
	// 	- **Enable**: The two-factor authentication is enabled and the user-specific setting is used.
	//
	// example:
	//
	// Enable
	TwoFactorStatus *string `json:"TwoFactorStatus,omitempty" xml:"TwoFactorStatus,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The logon name of the user.
	//
	// example:
	//
	// abcabc_def
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// An array that consists of the details of the user status.
	UserState []*string `json:"UserState,omitempty" xml:"UserState,omitempty" type:"Repeated"`
}

func (s GetUserResponseBodyUser) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUser) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUser) SetComment(v string) *GetUserResponseBodyUser {
	s.Comment = &v
	return s
}

func (s *GetUserResponseBodyUser) SetDisplayName(v string) *GetUserResponseBodyUser {
	s.DisplayName = &v
	return s
}

func (s *GetUserResponseBodyUser) SetEffectiveEndTime(v int64) *GetUserResponseBodyUser {
	s.EffectiveEndTime = &v
	return s
}

func (s *GetUserResponseBodyUser) SetEffectiveStartTime(v int64) *GetUserResponseBodyUser {
	s.EffectiveStartTime = &v
	return s
}

func (s *GetUserResponseBodyUser) SetEmail(v string) *GetUserResponseBodyUser {
	s.Email = &v
	return s
}

func (s *GetUserResponseBodyUser) SetLanguage(v string) *GetUserResponseBodyUser {
	s.Language = &v
	return s
}

func (s *GetUserResponseBodyUser) SetLanguageStatus(v string) *GetUserResponseBodyUser {
	s.LanguageStatus = &v
	return s
}

func (s *GetUserResponseBodyUser) SetMobile(v string) *GetUserResponseBodyUser {
	s.Mobile = &v
	return s
}

func (s *GetUserResponseBodyUser) SetMobileCountryCode(v string) *GetUserResponseBodyUser {
	s.MobileCountryCode = &v
	return s
}

func (s *GetUserResponseBodyUser) SetNeedResetPassword(v bool) *GetUserResponseBodyUser {
	s.NeedResetPassword = &v
	return s
}

func (s *GetUserResponseBodyUser) SetSource(v string) *GetUserResponseBodyUser {
	s.Source = &v
	return s
}

func (s *GetUserResponseBodyUser) SetSourceUserId(v string) *GetUserResponseBodyUser {
	s.SourceUserId = &v
	return s
}

func (s *GetUserResponseBodyUser) SetTwoFactorMethods(v []*string) *GetUserResponseBodyUser {
	s.TwoFactorMethods = v
	return s
}

func (s *GetUserResponseBodyUser) SetTwoFactorStatus(v string) *GetUserResponseBodyUser {
	s.TwoFactorStatus = &v
	return s
}

func (s *GetUserResponseBodyUser) SetUserId(v string) *GetUserResponseBodyUser {
	s.UserId = &v
	return s
}

func (s *GetUserResponseBodyUser) SetUserName(v string) *GetUserResponseBodyUser {
	s.UserName = &v
	return s
}

func (s *GetUserResponseBodyUser) SetUserState(v []*string) *GetUserResponseBodyUser {
	s.UserState = v
	return s
}

type GetUserResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponse) GoString() string {
	return s.String()
}

func (s *GetUserResponse) SetHeaders(v map[string]*string) *GetUserResponse {
	s.Headers = v
	return s
}

func (s *GetUserResponse) SetStatusCode(v int32) *GetUserResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserResponse) SetBody(v *GetUserResponseBody) *GetUserResponse {
	s.Body = v
	return s
}

type GetUserGroupRequest struct {
	// The ID of the bastion host in which you want to query the details of the user group.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host in which you want to query the details of the user group.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s GetUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserGroupRequest) GoString() string {
	return s.String()
}

func (s *GetUserGroupRequest) SetInstanceId(v string) *GetUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *GetUserGroupRequest) SetRegionId(v string) *GetUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *GetUserGroupRequest) SetUserGroupId(v string) *GetUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type GetUserGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the user group returned.
	UserGroup *GetUserGroupResponseBodyUserGroup `json:"UserGroup,omitempty" xml:"UserGroup,omitempty" type:"Struct"`
}

func (s GetUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserGroupResponseBody) SetRequestId(v string) *GetUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserGroupResponseBody) SetUserGroup(v *GetUserGroupResponseBodyUserGroup) *GetUserGroupResponseBody {
	s.UserGroup = v
	return s
}

type GetUserGroupResponseBodyUserGroup struct {
	// The description of the user group.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The name of the user group.
	//
	// example:
	//
	// UserGroup01
	UserGroupName *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s GetUserGroupResponseBodyUserGroup) String() string {
	return tea.Prettify(s)
}

func (s GetUserGroupResponseBodyUserGroup) GoString() string {
	return s.String()
}

func (s *GetUserGroupResponseBodyUserGroup) SetComment(v string) *GetUserGroupResponseBodyUserGroup {
	s.Comment = &v
	return s
}

func (s *GetUserGroupResponseBodyUserGroup) SetUserGroupId(v string) *GetUserGroupResponseBodyUserGroup {
	s.UserGroupId = &v
	return s
}

func (s *GetUserGroupResponseBodyUserGroup) SetUserGroupName(v string) *GetUserGroupResponseBodyUserGroup {
	s.UserGroupName = &v
	return s
}

type GetUserGroupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserGroupResponse) GoString() string {
	return s.String()
}

func (s *GetUserGroupResponse) SetHeaders(v map[string]*string) *GetUserGroupResponse {
	s.Headers = v
	return s
}

func (s *GetUserGroupResponse) SetStatusCode(v int32) *GetUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserGroupResponse) SetBody(v *GetUserGroupResponseBody) *GetUserGroupResponse {
	s.Body = v
	return s
}

type ListApproveCommandsRequest struct {
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-zvp2xvysf08
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page. Default value: **1**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Maximum value: 1000. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListApproveCommandsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApproveCommandsRequest) GoString() string {
	return s.String()
}

func (s *ListApproveCommandsRequest) SetInstanceId(v string) *ListApproveCommandsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListApproveCommandsRequest) SetPageNumber(v string) *ListApproveCommandsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListApproveCommandsRequest) SetPageSize(v string) *ListApproveCommandsRequest {
	s.PageSize = &v
	return s
}

func (s *ListApproveCommandsRequest) SetRegionId(v string) *ListApproveCommandsRequest {
	s.RegionId = &v
	return s
}

type ListApproveCommandsResponseBody struct {
	// The commands to be reviewed.
	ApproveCommands []*ListApproveCommandsResponseBodyApproveCommands `json:"ApproveCommands,omitempty" xml:"ApproveCommands,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// E3EF7711-766D-5888-997B-EFBA76809229
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of commands to be reviewed.
	//
	// example:
	//
	// 15
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListApproveCommandsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApproveCommandsResponseBody) GoString() string {
	return s.String()
}

func (s *ListApproveCommandsResponseBody) SetApproveCommands(v []*ListApproveCommandsResponseBodyApproveCommands) *ListApproveCommandsResponseBody {
	s.ApproveCommands = v
	return s
}

func (s *ListApproveCommandsResponseBody) SetRequestId(v string) *ListApproveCommandsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApproveCommandsResponseBody) SetTotalCount(v int64) *ListApproveCommandsResponseBody {
	s.TotalCount = &v
	return s
}

type ListApproveCommandsResponseBodyApproveCommands struct {
	// The ID of the command to be reviewed.
	//
	// example:
	//
	// 1
	ApproveCommandId *string `json:"ApproveCommandId,omitempty" xml:"ApproveCommandId,omitempty"`
	// The username of the asset account that is used for O\\&M.
	//
	// example:
	//
	// root
	AssetAccountName *string `json:"AssetAccountName,omitempty" xml:"AssetAccountName,omitempty"`
	// The IP address of the asset for O\\&M.
	//
	// example:
	//
	// 10.167.XX.XX
	AssetIp *string `json:"AssetIp,omitempty" xml:"AssetIp,omitempty"`
	// The name of the asset.
	//
	// example:
	//
	// poros-test
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	// The source IP address from which the application is submitted.
	//
	// example:
	//
	// 172.18.XX.XX
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The Bastionhost user who submitted the O\\&M application.
	//
	// example:
	//
	// test
	ClientUser *string `json:"ClientUser,omitempty" xml:"ClientUser,omitempty"`
	// The command to be reviewed.
	//
	// example:
	//
	// /bin/bash
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The time when the O\\&M application was submitted. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1679393152
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The O\\&M protocol.
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
	// The ID of the O\\&M session that triggered the review.
	//
	// example:
	//
	// 95f873ab64a76d5b0000000000004d5e
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The status of the review. Valid values: **Wait**: The command is pending review.
	//
	// example:
	//
	// Wait
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListApproveCommandsResponseBodyApproveCommands) String() string {
	return tea.Prettify(s)
}

func (s ListApproveCommandsResponseBodyApproveCommands) GoString() string {
	return s.String()
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetApproveCommandId(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.ApproveCommandId = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetAssetAccountName(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.AssetAccountName = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetAssetIp(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.AssetIp = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetAssetName(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.AssetName = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetClientIp(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.ClientIp = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetClientUser(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.ClientUser = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetCommand(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.Command = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetCreateTime(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.CreateTime = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetProtocolName(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.ProtocolName = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetSessionId(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.SessionId = &v
	return s
}

func (s *ListApproveCommandsResponseBodyApproveCommands) SetState(v string) *ListApproveCommandsResponseBodyApproveCommands {
	s.State = &v
	return s
}

type ListApproveCommandsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListApproveCommandsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListApproveCommandsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApproveCommandsResponse) GoString() string {
	return s.String()
}

func (s *ListApproveCommandsResponse) SetHeaders(v map[string]*string) *ListApproveCommandsResponse {
	s.Headers = v
	return s
}

func (s *ListApproveCommandsResponse) SetStatusCode(v int32) *ListApproveCommandsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApproveCommandsResponse) SetBody(v *ListApproveCommandsResponseBody) *ListApproveCommandsResponse {
	s.Body = v
	return s
}

type ListDatabaseAccountsRequest struct {
	// The name of the database account to query. The name can be up to 128 characters in length. Only exact match is supported.
	//
	// example:
	//
	// test
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The ID of the database whose database accounts you want to query.
	//
	// >  You can call the [ListDatabases](https://help.aliyun.com/document_detail/2758822.html) operation to query the database ID.
	//
	// example:
	//
	// 3
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The bastion host ID.
	//
	// > You can call the DescribeInstances operation to query the bastion host ID.[](~~153281~~)
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-7mz2za0ro06
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListDatabaseAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsRequest) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsRequest) SetDatabaseAccountName(v string) *ListDatabaseAccountsRequest {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListDatabaseAccountsRequest) SetDatabaseId(v string) *ListDatabaseAccountsRequest {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabaseAccountsRequest) SetInstanceId(v string) *ListDatabaseAccountsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDatabaseAccountsRequest) SetPageNumber(v string) *ListDatabaseAccountsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatabaseAccountsRequest) SetPageSize(v string) *ListDatabaseAccountsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatabaseAccountsRequest) SetRegionId(v string) *ListDatabaseAccountsRequest {
	s.RegionId = &v
	return s
}

type ListDatabaseAccountsResponseBody struct {
	// The returned database accounts.
	DatabaseAccounts []*ListDatabaseAccountsResponseBodyDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 4F6C075F-FC86-476E-943B-097BD4E12948
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of database accounts returned.
	//
	// example:
	//
	// 10
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatabaseAccountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsResponseBody) SetDatabaseAccounts(v []*ListDatabaseAccountsResponseBodyDatabaseAccounts) *ListDatabaseAccountsResponseBody {
	s.DatabaseAccounts = v
	return s
}

func (s *ListDatabaseAccountsResponseBody) SetRequestId(v string) *ListDatabaseAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabaseAccountsResponseBody) SetTotalCount(v int64) *ListDatabaseAccountsResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatabaseAccountsResponseBodyDatabaseAccounts struct {
	// The database account ID.
	//
	// example:
	//
	// 59
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// test
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 4
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The name of the database. A value is returned for this parameter if the engine of the database with the specified database ID is PostgreSQL or Oracle.
	//
	// example:
	//
	// orcl
	DatabaseSchema *string `json:"DatabaseSchema,omitempty" xml:"DatabaseSchema,omitempty"`
	// Indicates whether the database account has a password. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	HasPassword *string `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
}

func (s ListDatabaseAccountsResponseBodyDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsResponseBodyDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsResponseBodyDatabaseAccounts) SetDatabaseAccountId(v string) *ListDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *ListDatabaseAccountsResponseBodyDatabaseAccounts) SetDatabaseAccountName(v string) *ListDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListDatabaseAccountsResponseBodyDatabaseAccounts) SetDatabaseId(v string) *ListDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabaseAccountsResponseBodyDatabaseAccounts) SetDatabaseSchema(v string) *ListDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DatabaseSchema = &v
	return s
}

func (s *ListDatabaseAccountsResponseBodyDatabaseAccounts) SetHasPassword(v string) *ListDatabaseAccountsResponseBodyDatabaseAccounts {
	s.HasPassword = &v
	return s
}

type ListDatabaseAccountsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabaseAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabaseAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsResponse) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsResponse) SetHeaders(v map[string]*string) *ListDatabaseAccountsResponse {
	s.Headers = v
	return s
}

func (s *ListDatabaseAccountsResponse) SetStatusCode(v int32) *ListDatabaseAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabaseAccountsResponse) SetBody(v *ListDatabaseAccountsResponseBody) *ListDatabaseAccountsResponse {
	s.Body = v
	return s
}

type ListDatabaseAccountsForUserRequest struct {
	// The name of the database account to query. The name can be up to 128 characters in length. Only exact match is supported.
	//
	// example:
	//
	// test
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The ID of the database whose accounts you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 89
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-zz42zoqql01
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user to query. This operation returns whether the user is authorized to manage each database account.
	//
	// > You can call the ListUsers operation to query the ID of the user.[](~~204522~~)
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListDatabaseAccountsForUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserRequest) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserRequest) SetDatabaseAccountName(v string) *ListDatabaseAccountsForUserRequest {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListDatabaseAccountsForUserRequest) SetDatabaseId(v string) *ListDatabaseAccountsForUserRequest {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabaseAccountsForUserRequest) SetInstanceId(v string) *ListDatabaseAccountsForUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDatabaseAccountsForUserRequest) SetPageNumber(v string) *ListDatabaseAccountsForUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatabaseAccountsForUserRequest) SetPageSize(v string) *ListDatabaseAccountsForUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatabaseAccountsForUserRequest) SetRegionId(v string) *ListDatabaseAccountsForUserRequest {
	s.RegionId = &v
	return s
}

func (s *ListDatabaseAccountsForUserRequest) SetUserId(v string) *ListDatabaseAccountsForUserRequest {
	s.UserId = &v
	return s
}

type ListDatabaseAccountsForUserResponseBody struct {
	// The database accounts returned.
	DatabaseAccounts []*ListDatabaseAccountsForUserResponseBodyDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 00E3701B-3616-55FE-93EC-E7CF5480B654
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of database accounts that are returned.
	//
	// example:
	//
	// 3
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatabaseAccountsForUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserResponseBody) SetDatabaseAccounts(v []*ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) *ListDatabaseAccountsForUserResponseBody {
	s.DatabaseAccounts = v
	return s
}

func (s *ListDatabaseAccountsForUserResponseBody) SetRequestId(v string) *ListDatabaseAccountsForUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabaseAccountsForUserResponseBody) SetTotalCount(v int64) *ListDatabaseAccountsForUserResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatabaseAccountsForUserResponseBodyDatabaseAccounts struct {
	// The database account ID.
	//
	// example:
	//
	// 6
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// test
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The ID of the database to which the database account belongs.
	//
	// example:
	//
	// 70
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// Indicates whether the user is authorized to manage the database account. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsAuthorized *bool `json:"IsAuthorized,omitempty" xml:"IsAuthorized,omitempty"`
	// The protocol used by the database account. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) SetDatabaseAccountId(v string) *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) SetDatabaseAccountName(v string) *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) SetDatabaseId(v string) *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) SetIsAuthorized(v bool) *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts {
	s.IsAuthorized = &v
	return s
}

func (s *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts) SetProtocolName(v string) *ListDatabaseAccountsForUserResponseBodyDatabaseAccounts {
	s.ProtocolName = &v
	return s
}

type ListDatabaseAccountsForUserResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabaseAccountsForUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabaseAccountsForUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserResponse) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserResponse) SetHeaders(v map[string]*string) *ListDatabaseAccountsForUserResponse {
	s.Headers = v
	return s
}

func (s *ListDatabaseAccountsForUserResponse) SetStatusCode(v int32) *ListDatabaseAccountsForUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabaseAccountsForUserResponse) SetBody(v *ListDatabaseAccountsForUserResponseBody) *ListDatabaseAccountsForUserResponse {
	s.Body = v
	return s
}

type ListDatabaseAccountsForUserGroupRequest struct {
	// The name of the database account to query. The name can be up to 128 characters in length. Only exact match is supported.
	//
	// example:
	//
	// test
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The ID of the database whose database accounts you want to query.
	//
	// >  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 36
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-pe334a03o0h
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group to query. This operation returns whether the user group is authorized to manage each database account.
	//
	// >  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the user group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListDatabaseAccountsForUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserGroupRequest) SetDatabaseAccountName(v string) *ListDatabaseAccountsForUserGroupRequest {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupRequest) SetDatabaseId(v string) *ListDatabaseAccountsForUserGroupRequest {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupRequest) SetInstanceId(v string) *ListDatabaseAccountsForUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupRequest) SetPageNumber(v string) *ListDatabaseAccountsForUserGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupRequest) SetPageSize(v string) *ListDatabaseAccountsForUserGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupRequest) SetRegionId(v string) *ListDatabaseAccountsForUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupRequest) SetUserGroupId(v string) *ListDatabaseAccountsForUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type ListDatabaseAccountsForUserGroupResponseBody struct {
	// The database accounts returned.
	DatabaseAccounts []*ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of database accounts returned.
	//
	// example:
	//
	// 10
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatabaseAccountsForUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserGroupResponseBody) SetDatabaseAccounts(v []*ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) *ListDatabaseAccountsForUserGroupResponseBody {
	s.DatabaseAccounts = v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponseBody) SetRequestId(v string) *ListDatabaseAccountsForUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponseBody) SetTotalCount(v int64) *ListDatabaseAccountsForUserGroupResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts struct {
	// The ID of the database account.
	//
	// example:
	//
	// 4
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// root
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The ID of the database to which the database account belongs.
	//
	// example:
	//
	// 11
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// Indicates whether the user group is authorized to manage the database account. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsAuthorized *bool `json:"IsAuthorized,omitempty" xml:"IsAuthorized,omitempty"`
	// The protocol used by the database account. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) SetDatabaseAccountId(v string) *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) SetDatabaseAccountName(v string) *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) SetDatabaseId(v string) *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) SetIsAuthorized(v bool) *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts {
	s.IsAuthorized = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts) SetProtocolName(v string) *ListDatabaseAccountsForUserGroupResponseBodyDatabaseAccounts {
	s.ProtocolName = &v
	return s
}

type ListDatabaseAccountsForUserGroupResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabaseAccountsForUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabaseAccountsForUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabaseAccountsForUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ListDatabaseAccountsForUserGroupResponse) SetHeaders(v map[string]*string) *ListDatabaseAccountsForUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponse) SetStatusCode(v int32) *ListDatabaseAccountsForUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabaseAccountsForUserGroupResponse) SetBody(v *ListDatabaseAccountsForUserGroupResponseBody) *ListDatabaseAccountsForUserGroupResponse {
	s.Body = v
	return s
}

type ListDatabasesRequest struct {
	// The engine of the database to query. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The ID of the asset group to query. This operation returns the databases in the asset group.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the asset group.
	//
	// example:
	//
	// 20
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the bastion host to query.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-7mz28f5tk0o
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain where the database to query resides.
	//
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Valid values: 1 to100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host to query.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the database to query. Valid values:
	//
	// 	- **Local**: on-premises database.
	//
	// 	- **Rds**: ApsaraDB for RDS instance.
	//
	// 	- **PolarDB**: PolarDB cluster
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s ListDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesRequest) GoString() string {
	return s.String()
}

func (s *ListDatabasesRequest) SetDatabaseType(v string) *ListDatabasesRequest {
	s.DatabaseType = &v
	return s
}

func (s *ListDatabasesRequest) SetHostGroupId(v string) *ListDatabasesRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListDatabasesRequest) SetInstanceId(v string) *ListDatabasesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDatabasesRequest) SetNetworkDomainId(v string) *ListDatabasesRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *ListDatabasesRequest) SetPageNumber(v string) *ListDatabasesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatabasesRequest) SetPageSize(v string) *ListDatabasesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatabasesRequest) SetRegionId(v string) *ListDatabasesRequest {
	s.RegionId = &v
	return s
}

func (s *ListDatabasesRequest) SetSource(v string) *ListDatabasesRequest {
	s.Source = &v
	return s
}

type ListDatabasesResponseBody struct {
	// The databases returned.
	Databases []*ListDatabasesResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of databases returned.
	//
	// example:
	//
	// 4
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatabasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBody) SetDatabases(v []*ListDatabasesResponseBodyDatabases) *ListDatabasesResponseBody {
	s.Databases = v
	return s
}

func (s *ListDatabasesResponseBody) SetRequestId(v string) *ListDatabasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabasesResponseBody) SetTotalCount(v int64) *ListDatabasesResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatabasesResponseBodyDatabases struct {
	// The address type of the database. Valid values:
	//
	// 	- **Public**
	//
	// 	- **Private**
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The remarks of the database.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 9
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// MySQL0
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The port of the database.
	//
	// example:
	//
	// 3306
	DatabasePort *int32 `json:"DatabasePort,omitempty" xml:"DatabasePort,omitempty"`
	// The internal address of the database. The value is a domain name or an IP address.
	//
	// example:
	//
	// rm-wz973w7******
	DatabasePrivateAddress *string `json:"DatabasePrivateAddress,omitempty" xml:"DatabasePrivateAddress,omitempty"`
	// The public address of the database. The value is a domain name or an IP address.
	//
	// example:
	//
	// rm-uf65n2******
	DatabasePublicAddress *string `json:"DatabasePublicAddress,omitempty" xml:"DatabasePublicAddress,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The ID of the network domain where the database resides.
	//
	// example:
	//
	// 8
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The type of the database. Valid values:
	//
	// 	- **Local**: on-premises database.
	//
	// 	- **Rds**: ApsaraDB for RDS instance.
	//
	// 	- **PolarDB**: PolarDB cluster
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ApsaraDB for RDS instance or PolarDB cluster.
	//
	// > No value is returned for this parameter if **Source*	- is set to **Local**.
	//
	// example:
	//
	// i-wz9ejupczf41******
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The region ID of the ApsaraDB for RDS instance or PolarDB cluster.
	//
	// example:
	//
	// cn-hangzhou
	SourceInstanceRegionId *string `json:"SourceInstanceRegionId,omitempty" xml:"SourceInstanceRegionId,omitempty"`
	// The status of the database. Valid values:
	//
	// 	- **Normal**
	//
	// 	- **Release**
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s ListDatabasesResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBodyDatabases) SetActiveAddressType(v string) *ListDatabasesResponseBodyDatabases {
	s.ActiveAddressType = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetComment(v string) *ListDatabasesResponseBodyDatabases {
	s.Comment = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabaseId(v string) *ListDatabasesResponseBodyDatabases {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabaseName(v string) *ListDatabasesResponseBodyDatabases {
	s.DatabaseName = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabasePort(v int32) *ListDatabasesResponseBodyDatabases {
	s.DatabasePort = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabasePrivateAddress(v string) *ListDatabasesResponseBodyDatabases {
	s.DatabasePrivateAddress = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabasePublicAddress(v string) *ListDatabasesResponseBodyDatabases {
	s.DatabasePublicAddress = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabaseType(v string) *ListDatabasesResponseBodyDatabases {
	s.DatabaseType = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetNetworkDomainId(v string) *ListDatabasesResponseBodyDatabases {
	s.NetworkDomainId = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetSource(v string) *ListDatabasesResponseBodyDatabases {
	s.Source = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetSourceInstanceId(v string) *ListDatabasesResponseBodyDatabases {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetSourceInstanceRegionId(v string) *ListDatabasesResponseBodyDatabases {
	s.SourceInstanceRegionId = &v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) SetSourceInstanceState(v string) *ListDatabasesResponseBodyDatabases {
	s.SourceInstanceState = &v
	return s
}

type ListDatabasesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponse) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponse) SetHeaders(v map[string]*string) *ListDatabasesResponse {
	s.Headers = v
	return s
}

func (s *ListDatabasesResponse) SetStatusCode(v int32) *ListDatabasesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabasesResponse) SetBody(v *ListDatabasesResponseBody) *ListDatabasesResponse {
	s.Body = v
	return s
}

type ListDatabasesForUserRequest struct {
	// The address of the database to query. Only exact match is supported.
	//
	// example:
	//
	// ``47.101.**.**``
	DatabaseAddress *string `json:"DatabaseAddress,omitempty" xml:"DatabaseAddress,omitempty"`
	// The name of the database to query.
	//
	// example:
	//
	// MySQL-8.0
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The engine of the database to query. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-tl32swayw7o
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain where the database to query resides.
	//
	// example:
	//
	// 5
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The page number. Default value: **1**. Pages start from page 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListDatabasesForUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserRequest) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserRequest) SetDatabaseAddress(v string) *ListDatabasesForUserRequest {
	s.DatabaseAddress = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetDatabaseName(v string) *ListDatabasesForUserRequest {
	s.DatabaseName = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetDatabaseType(v string) *ListDatabasesForUserRequest {
	s.DatabaseType = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetInstanceId(v string) *ListDatabasesForUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetNetworkDomainId(v string) *ListDatabasesForUserRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetPageNumber(v string) *ListDatabasesForUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetPageSize(v string) *ListDatabasesForUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetRegionId(v string) *ListDatabasesForUserRequest {
	s.RegionId = &v
	return s
}

func (s *ListDatabasesForUserRequest) SetUserId(v string) *ListDatabasesForUserRequest {
	s.UserId = &v
	return s
}

type ListDatabasesForUserResponseBody struct {
	// The databases returned.
	Databases []*ListDatabasesForUserResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// A8A665B9-8550-4942-9DEE-73198051856B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of databases returned.
	//
	// example:
	//
	// 15
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatabasesForUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserResponseBody) SetDatabases(v []*ListDatabasesForUserResponseBodyDatabases) *ListDatabasesForUserResponseBody {
	s.Databases = v
	return s
}

func (s *ListDatabasesForUserResponseBody) SetRequestId(v string) *ListDatabasesForUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabasesForUserResponseBody) SetTotalCount(v int64) *ListDatabasesForUserResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatabasesForUserResponseBodyDatabases struct {
	// The address type of the database. Valid values:
	//
	// 	- **Public**
	//
	// 	- **Private**
	//
	// example:
	//
	// Private
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The remarks of the database.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 36
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The database name.
	//
	// example:
	//
	// MySQL56
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database port.
	//
	// example:
	//
	// 3306
	DatabasePort *int64 `json:"DatabasePort,omitempty" xml:"DatabasePort,omitempty"`
	// The internal endpoint of the database. The value is a domain name or an IP address.
	//
	// example:
	//
	// rm-wz97******
	DatabasePrivateAddress *string `json:"DatabasePrivateAddress,omitempty" xml:"DatabasePrivateAddress,omitempty"`
	// The public endpoint of the database. The value is a domain name or an IP address.
	//
	// example:
	//
	// rm-uf65******
	DatabasePublicAddress *string `json:"DatabasePublicAddress,omitempty" xml:"DatabasePublicAddress,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The ID of the network domain where the database resides.
	//
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The database type. Valid values:
	//
	// 	- **Local**: on-premises database.
	//
	// 	- **Rds**: ApsaraDB RDS instance.
	//
	// 	- **PolarDB**: PolarDB cluster.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ApsaraDB RDS instance or PolarDB cluster.
	//
	// >  No value is returned for this parameter if **Source*	- is set to **Local**.
	//
	// example:
	//
	// i-wz9fv2hwux78x9h1pmje
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
}

func (s ListDatabasesForUserResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetActiveAddressType(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.ActiveAddressType = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetComment(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.Comment = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetDatabaseId(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetDatabaseName(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.DatabaseName = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetDatabasePort(v int64) *ListDatabasesForUserResponseBodyDatabases {
	s.DatabasePort = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetDatabasePrivateAddress(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.DatabasePrivateAddress = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetDatabasePublicAddress(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.DatabasePublicAddress = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetDatabaseType(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.DatabaseType = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetNetworkDomainId(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.NetworkDomainId = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetSource(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.Source = &v
	return s
}

func (s *ListDatabasesForUserResponseBodyDatabases) SetSourceInstanceId(v string) *ListDatabasesForUserResponseBodyDatabases {
	s.SourceInstanceId = &v
	return s
}

type ListDatabasesForUserResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabasesForUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabasesForUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserResponse) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserResponse) SetHeaders(v map[string]*string) *ListDatabasesForUserResponse {
	s.Headers = v
	return s
}

func (s *ListDatabasesForUserResponse) SetStatusCode(v int32) *ListDatabasesForUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabasesForUserResponse) SetBody(v *ListDatabasesForUserResponseBody) *ListDatabasesForUserResponse {
	s.Body = v
	return s
}

type ListDatabasesForUserGroupRequest struct {
	// The address of the database to query. Only exact match is supported.
	//
	// example:
	//
	// ``47.101.**.**``
	DatabaseAddress *string `json:"DatabaseAddress,omitempty" xml:"DatabaseAddress,omitempty"`
	// The name of the database to query.
	//
	// example:
	//
	// test
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The engine of the database to query. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-7mz2ve7h00a
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListDatabasesForUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserGroupRequest) SetDatabaseAddress(v string) *ListDatabasesForUserGroupRequest {
	s.DatabaseAddress = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetDatabaseName(v string) *ListDatabasesForUserGroupRequest {
	s.DatabaseName = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetDatabaseType(v string) *ListDatabasesForUserGroupRequest {
	s.DatabaseType = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetInstanceId(v string) *ListDatabasesForUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetNetworkDomainId(v string) *ListDatabasesForUserGroupRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetPageNumber(v string) *ListDatabasesForUserGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetPageSize(v string) *ListDatabasesForUserGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetRegionId(v string) *ListDatabasesForUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListDatabasesForUserGroupRequest) SetUserGroupId(v string) *ListDatabasesForUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type ListDatabasesForUserGroupResponseBody struct {
	// The databases returned.
	Databases []*ListDatabasesForUserGroupResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of databases returned.
	//
	// example:
	//
	// 15
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatabasesForUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserGroupResponseBody) SetDatabases(v []*ListDatabasesForUserGroupResponseBodyDatabases) *ListDatabasesForUserGroupResponseBody {
	s.Databases = v
	return s
}

func (s *ListDatabasesForUserGroupResponseBody) SetRequestId(v string) *ListDatabasesForUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBody) SetTotalCount(v int64) *ListDatabasesForUserGroupResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatabasesForUserGroupResponseBodyDatabases struct {
	// The address type of the database. Valid values:
	//
	// 	- **Public**
	//
	// 	- **Private**
	//
	// example:
	//
	// Private
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The remarks of the database.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The total number of database accounts returned.
	//
	// example:
	//
	// 2
	DatabaseAccountCount *int64 `json:"DatabaseAccountCount,omitempty" xml:"DatabaseAccountCount,omitempty"`
	// The ID of the database to which the database account belongs.
	//
	// example:
	//
	// 2
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// MySQL0
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The port of the database.
	//
	// example:
	//
	// 3306
	DatabasePort *int64 `json:"DatabasePort,omitempty" xml:"DatabasePort,omitempty"`
	// The internal address of the database. The value is a domain name or an IP address.
	//
	// example:
	//
	// rm-bp1******
	DatabasePrivateAddress *string `json:"DatabasePrivateAddress,omitempty" xml:"DatabasePrivateAddress,omitempty"`
	// The public address of the database. The value is a domain name or an IP address.
	//
	// example:
	//
	// rm-uf65******
	DatabasePublicAddress *string `json:"DatabasePublicAddress,omitempty" xml:"DatabasePublicAddress,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The ID of the network domain where the database resides.
	//
	// example:
	//
	// 5
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The type of the database. Valid values:
	//
	// 	- **Local**: on-premises database.
	//
	// 	- **Rds**: ApsaraDB RDS instance.
	//
	// 	- **PolarDB**: PolarDB cluster.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ApsaraDB RDS instance or PolarDB cluster.
	//
	// > No value is returned for this parameter if **Source*	- is set to **Local**.
	//
	// example:
	//
	// i-wz9c7mjxywmdmqk7q6e4
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
}

func (s ListDatabasesForUserGroupResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserGroupResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetActiveAddressType(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.ActiveAddressType = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetComment(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.Comment = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetDatabaseAccountCount(v int64) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.DatabaseAccountCount = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetDatabaseId(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.DatabaseId = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetDatabaseName(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.DatabaseName = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetDatabasePort(v int64) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.DatabasePort = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetDatabasePrivateAddress(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.DatabasePrivateAddress = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetDatabasePublicAddress(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.DatabasePublicAddress = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetDatabaseType(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.DatabaseType = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetNetworkDomainId(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.NetworkDomainId = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetSource(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.Source = &v
	return s
}

func (s *ListDatabasesForUserGroupResponseBodyDatabases) SetSourceInstanceId(v string) *ListDatabasesForUserGroupResponseBodyDatabases {
	s.SourceInstanceId = &v
	return s
}

type ListDatabasesForUserGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabasesForUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabasesForUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesForUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ListDatabasesForUserGroupResponse) SetHeaders(v map[string]*string) *ListDatabasesForUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ListDatabasesForUserGroupResponse) SetStatusCode(v int32) *ListDatabasesForUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabasesForUserGroupResponse) SetBody(v *ListDatabasesForUserGroupResponseBody) *ListDatabasesForUserGroupResponse {
	s.Body = v
	return s
}

type ListHostAccountsRequest struct {
	// The name of the host account that you want to query. The name can be up to 128 characters in length. Only exact match is supported.
	//
	// example:
	//
	// abc
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the specified host whose accounts you want to query.
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the bastion host in which you want to query accounts of the specified host.
	//
	// >  You can call the DescribeInstances operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The protocol used by the host whose accounts you want to query.
	//
	// Valid values:
	//
	// 	- SSH
	//
	// 	- RDP
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
	// The region ID of the bastion host in which you want to query accounts of the specified host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListHostAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsRequest) GoString() string {
	return s.String()
}

func (s *ListHostAccountsRequest) SetHostAccountName(v string) *ListHostAccountsRequest {
	s.HostAccountName = &v
	return s
}

func (s *ListHostAccountsRequest) SetHostId(v string) *ListHostAccountsRequest {
	s.HostId = &v
	return s
}

func (s *ListHostAccountsRequest) SetInstanceId(v string) *ListHostAccountsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostAccountsRequest) SetPageNumber(v string) *ListHostAccountsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostAccountsRequest) SetPageSize(v string) *ListHostAccountsRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostAccountsRequest) SetProtocolName(v string) *ListHostAccountsRequest {
	s.ProtocolName = &v
	return s
}

func (s *ListHostAccountsRequest) SetRegionId(v string) *ListHostAccountsRequest {
	s.RegionId = &v
	return s
}

type ListHostAccountsResponseBody struct {
	// An array that consists of the queried host accounts.
	HostAccounts []*ListHostAccountsResponseBodyHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of host accounts that are queried.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostAccountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostAccountsResponseBody) SetHostAccounts(v []*ListHostAccountsResponseBodyHostAccounts) *ListHostAccountsResponseBody {
	s.HostAccounts = v
	return s
}

func (s *ListHostAccountsResponseBody) SetRequestId(v string) *ListHostAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostAccountsResponseBody) SetTotalCount(v int32) *ListHostAccountsResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostAccountsResponseBodyHostAccounts struct {
	// Indicates whether a password is configured for the host account.
	//
	// Valid values:
	//
	// 	- true: A password is configured for the host account.
	//
	// 	- false: No passwords are configured for the host account.
	//
	// example:
	//
	// true
	HasPassword *bool `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// abc
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the shared key.
	//
	// example:
	//
	// 1
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The name of the shared key.
	//
	// example:
	//
	// name
	HostShareKeyName *string `json:"HostShareKeyName,omitempty" xml:"HostShareKeyName,omitempty"`
	// The fingerprint of the private key for the host account.
	//
	// example:
	//
	// fe:ca:37:42:30:00:9d:95:e6:73:e5:b0:32:0a:**:**
	PrivateKeyFingerprint *string `json:"PrivateKeyFingerprint,omitempty" xml:"PrivateKeyFingerprint,omitempty"`
	// The protocol that is used by the host.
	//
	// Valid values:
	//
	// 	- SSH
	//
	// 	- RDP
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s ListHostAccountsResponseBodyHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsResponseBodyHostAccounts) GoString() string {
	return s.String()
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetHasPassword(v bool) *ListHostAccountsResponseBodyHostAccounts {
	s.HasPassword = &v
	return s
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetHostAccountId(v string) *ListHostAccountsResponseBodyHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetHostAccountName(v string) *ListHostAccountsResponseBodyHostAccounts {
	s.HostAccountName = &v
	return s
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetHostId(v string) *ListHostAccountsResponseBodyHostAccounts {
	s.HostId = &v
	return s
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetHostShareKeyId(v string) *ListHostAccountsResponseBodyHostAccounts {
	s.HostShareKeyId = &v
	return s
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetHostShareKeyName(v string) *ListHostAccountsResponseBodyHostAccounts {
	s.HostShareKeyName = &v
	return s
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetPrivateKeyFingerprint(v string) *ListHostAccountsResponseBodyHostAccounts {
	s.PrivateKeyFingerprint = &v
	return s
}

func (s *ListHostAccountsResponseBodyHostAccounts) SetProtocolName(v string) *ListHostAccountsResponseBodyHostAccounts {
	s.ProtocolName = &v
	return s
}

type ListHostAccountsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsResponse) GoString() string {
	return s.String()
}

func (s *ListHostAccountsResponse) SetHeaders(v map[string]*string) *ListHostAccountsResponse {
	s.Headers = v
	return s
}

func (s *ListHostAccountsResponse) SetStatusCode(v int32) *ListHostAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostAccountsResponse) SetBody(v *ListHostAccountsResponseBody) *ListHostAccountsResponse {
	s.Body = v
	return s
}

type ListHostAccountsForHostShareKeyRequest struct {
	// The shared key ID.
	//
	// >  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1124
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListHostAccountsForHostShareKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForHostShareKeyRequest) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForHostShareKeyRequest) SetHostShareKeyId(v string) *ListHostAccountsForHostShareKeyRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyRequest) SetInstanceId(v string) *ListHostAccountsForHostShareKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyRequest) SetPageNumber(v string) *ListHostAccountsForHostShareKeyRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyRequest) SetPageSize(v string) *ListHostAccountsForHostShareKeyRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyRequest) SetRegionId(v string) *ListHostAccountsForHostShareKeyRequest {
	s.RegionId = &v
	return s
}

type ListHostAccountsForHostShareKeyResponseBody struct {
	// An array that consists of the host accounts that are associated with the shared key.
	HostAccounts []*ListHostAccountsForHostShareKeyResponseBodyHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of the host accounts that are associated with the shared key.
	//
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostAccountsForHostShareKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForHostShareKeyResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForHostShareKeyResponseBody) SetHostAccounts(v []*ListHostAccountsForHostShareKeyResponseBodyHostAccounts) *ListHostAccountsForHostShareKeyResponseBody {
	s.HostAccounts = v
	return s
}

func (s *ListHostAccountsForHostShareKeyResponseBody) SetRequestId(v string) *ListHostAccountsForHostShareKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyResponseBody) SetTotalCount(v int64) *ListHostAccountsForHostShareKeyResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostAccountsForHostShareKeyResponseBodyHostAccounts struct {
	// The name of the host account.
	//
	// example:
	//
	// root1234
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1113
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the host account.
	//
	// example:
	//
	// 1235
	HostsAccountId *string `json:"HostsAccountId,omitempty" xml:"HostsAccountId,omitempty"`
	// The O\\&M protocol.
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s ListHostAccountsForHostShareKeyResponseBodyHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForHostShareKeyResponseBodyHostAccounts) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForHostShareKeyResponseBodyHostAccounts) SetHostAccountName(v string) *ListHostAccountsForHostShareKeyResponseBodyHostAccounts {
	s.HostAccountName = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyResponseBodyHostAccounts) SetHostId(v string) *ListHostAccountsForHostShareKeyResponseBodyHostAccounts {
	s.HostId = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyResponseBodyHostAccounts) SetHostsAccountId(v string) *ListHostAccountsForHostShareKeyResponseBodyHostAccounts {
	s.HostsAccountId = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyResponseBodyHostAccounts) SetProtocolName(v string) *ListHostAccountsForHostShareKeyResponseBodyHostAccounts {
	s.ProtocolName = &v
	return s
}

type ListHostAccountsForHostShareKeyResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostAccountsForHostShareKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostAccountsForHostShareKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForHostShareKeyResponse) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForHostShareKeyResponse) SetHeaders(v map[string]*string) *ListHostAccountsForHostShareKeyResponse {
	s.Headers = v
	return s
}

func (s *ListHostAccountsForHostShareKeyResponse) SetStatusCode(v int32) *ListHostAccountsForHostShareKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostAccountsForHostShareKeyResponse) SetBody(v *ListHostAccountsForHostShareKeyResponseBody) *ListHostAccountsForHostShareKeyResponse {
	s.Body = v
	return s
}

type ListHostAccountsForUserRequest struct {
	// The name of the host account that you want to query. Exact match is supported.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host to query.
	//
	// > You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the bastion host on which you want to perform the query. The host accounts that the specified user is authorized to manage on the specified host are queried.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host on which you want to perform the query. The host accounts that the specified user is authorized to manage on the specified host are queried.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user for which you want to query authorized host accounts.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListHostAccountsForUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserRequest) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserRequest) SetHostAccountName(v string) *ListHostAccountsForUserRequest {
	s.HostAccountName = &v
	return s
}

func (s *ListHostAccountsForUserRequest) SetHostId(v string) *ListHostAccountsForUserRequest {
	s.HostId = &v
	return s
}

func (s *ListHostAccountsForUserRequest) SetInstanceId(v string) *ListHostAccountsForUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostAccountsForUserRequest) SetPageNumber(v string) *ListHostAccountsForUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostAccountsForUserRequest) SetPageSize(v string) *ListHostAccountsForUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostAccountsForUserRequest) SetRegionId(v string) *ListHostAccountsForUserRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostAccountsForUserRequest) SetUserId(v string) *ListHostAccountsForUserRequest {
	s.UserId = &v
	return s
}

type ListHostAccountsForUserResponseBody struct {
	// An array that consists of the queried host accounts.
	HostAccounts []*ListHostAccountsForUserResponseBodyHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of host accounts that were queried.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostAccountsForUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserResponseBody) SetHostAccounts(v []*ListHostAccountsForUserResponseBodyHostAccounts) *ListHostAccountsForUserResponseBody {
	s.HostAccounts = v
	return s
}

func (s *ListHostAccountsForUserResponseBody) SetRequestId(v string) *ListHostAccountsForUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostAccountsForUserResponseBody) SetTotalCount(v int32) *ListHostAccountsForUserResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostAccountsForUserResponseBodyHostAccounts struct {
	// The ID of the host account.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host for which the host accounts were queried.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// Indicates whether the user is authorized to manage the host account. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	IsAuthorized *bool `json:"IsAuthorized,omitempty" xml:"IsAuthorized,omitempty"`
	// The protocol that is used by the host. Valid values:
	//
	// 	- **SSH**
	//
	// 	- **RDP**
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s ListHostAccountsForUserResponseBodyHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserResponseBodyHostAccounts) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserResponseBodyHostAccounts) SetHostAccountId(v string) *ListHostAccountsForUserResponseBodyHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *ListHostAccountsForUserResponseBodyHostAccounts) SetHostAccountName(v string) *ListHostAccountsForUserResponseBodyHostAccounts {
	s.HostAccountName = &v
	return s
}

func (s *ListHostAccountsForUserResponseBodyHostAccounts) SetHostId(v string) *ListHostAccountsForUserResponseBodyHostAccounts {
	s.HostId = &v
	return s
}

func (s *ListHostAccountsForUserResponseBodyHostAccounts) SetIsAuthorized(v bool) *ListHostAccountsForUserResponseBodyHostAccounts {
	s.IsAuthorized = &v
	return s
}

func (s *ListHostAccountsForUserResponseBodyHostAccounts) SetProtocolName(v string) *ListHostAccountsForUserResponseBodyHostAccounts {
	s.ProtocolName = &v
	return s
}

type ListHostAccountsForUserResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostAccountsForUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostAccountsForUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserResponse) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserResponse) SetHeaders(v map[string]*string) *ListHostAccountsForUserResponse {
	s.Headers = v
	return s
}

func (s *ListHostAccountsForUserResponse) SetStatusCode(v int32) *ListHostAccountsForUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostAccountsForUserResponse) SetBody(v *ListHostAccountsForUserResponseBody) *ListHostAccountsForUserResponse {
	s.Body = v
	return s
}

type ListHostAccountsForUserGroupRequest struct {
	// The name of the host account that you want to query. Exact match is supported.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host to query.
	//
	// > You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the bastion host on which you want to query the host accounts to be managed by the specified user group on the specified host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host on which you want to query the host accounts to be managed by the specified user group on the specified host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group for which you want to query authorized host accounts.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListHostAccountsForUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserGroupRequest) SetHostAccountName(v string) *ListHostAccountsForUserGroupRequest {
	s.HostAccountName = &v
	return s
}

func (s *ListHostAccountsForUserGroupRequest) SetHostId(v string) *ListHostAccountsForUserGroupRequest {
	s.HostId = &v
	return s
}

func (s *ListHostAccountsForUserGroupRequest) SetInstanceId(v string) *ListHostAccountsForUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostAccountsForUserGroupRequest) SetPageNumber(v string) *ListHostAccountsForUserGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostAccountsForUserGroupRequest) SetPageSize(v string) *ListHostAccountsForUserGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostAccountsForUserGroupRequest) SetRegionId(v string) *ListHostAccountsForUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostAccountsForUserGroupRequest) SetUserGroupId(v string) *ListHostAccountsForUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type ListHostAccountsForUserGroupResponseBody struct {
	// An array that consists of the queried host accounts.
	HostAccounts []*ListHostAccountsForUserGroupResponseBodyHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of host accounts that were queried.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostAccountsForUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserGroupResponseBody) SetHostAccounts(v []*ListHostAccountsForUserGroupResponseBodyHostAccounts) *ListHostAccountsForUserGroupResponseBody {
	s.HostAccounts = v
	return s
}

func (s *ListHostAccountsForUserGroupResponseBody) SetRequestId(v string) *ListHostAccountsForUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostAccountsForUserGroupResponseBody) SetTotalCount(v int32) *ListHostAccountsForUserGroupResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostAccountsForUserGroupResponseBodyHostAccounts struct {
	// The ID of the host account.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The name of the host account.
	//
	// example:
	//
	// host１
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host for which the host accounts were queried.
	//
	// example:
	//
	// １
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// Indicates whether the user group is authorized to manage the host account. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	IsAuthorized *bool `json:"IsAuthorized,omitempty" xml:"IsAuthorized,omitempty"`
	// The protocol that is used by the host. Valid values:
	//
	// 	- **SSH**
	//
	// 	- **RDP**
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s ListHostAccountsForUserGroupResponseBodyHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserGroupResponseBodyHostAccounts) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserGroupResponseBodyHostAccounts) SetHostAccountId(v string) *ListHostAccountsForUserGroupResponseBodyHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *ListHostAccountsForUserGroupResponseBodyHostAccounts) SetHostAccountName(v string) *ListHostAccountsForUserGroupResponseBodyHostAccounts {
	s.HostAccountName = &v
	return s
}

func (s *ListHostAccountsForUserGroupResponseBodyHostAccounts) SetHostId(v string) *ListHostAccountsForUserGroupResponseBodyHostAccounts {
	s.HostId = &v
	return s
}

func (s *ListHostAccountsForUserGroupResponseBodyHostAccounts) SetIsAuthorized(v bool) *ListHostAccountsForUserGroupResponseBodyHostAccounts {
	s.IsAuthorized = &v
	return s
}

func (s *ListHostAccountsForUserGroupResponseBodyHostAccounts) SetProtocolName(v string) *ListHostAccountsForUserGroupResponseBodyHostAccounts {
	s.ProtocolName = &v
	return s
}

type ListHostAccountsForUserGroupResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostAccountsForUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostAccountsForUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostAccountsForUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ListHostAccountsForUserGroupResponse) SetHeaders(v map[string]*string) *ListHostAccountsForUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ListHostAccountsForUserGroupResponse) SetStatusCode(v int32) *ListHostAccountsForUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostAccountsForUserGroupResponse) SetBody(v *ListHostAccountsForUserGroupResponseBody) *ListHostAccountsForUserGroupResponse {
	s.Body = v
	return s
}

type ListHostGroupAccountNamesForUserRequest struct {
	// The ID of the host group.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the bastion host to which the user belongs.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host to which the user belongs.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListHostGroupAccountNamesForUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupAccountNamesForUserRequest) GoString() string {
	return s.String()
}

func (s *ListHostGroupAccountNamesForUserRequest) SetHostGroupId(v string) *ListHostGroupAccountNamesForUserRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserRequest) SetInstanceId(v string) *ListHostGroupAccountNamesForUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserRequest) SetRegionId(v string) *ListHostGroupAccountNamesForUserRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserRequest) SetUserId(v string) *ListHostGroupAccountNamesForUserRequest {
	s.UserId = &v
	return s
}

type ListHostGroupAccountNamesForUserResponseBody struct {
	// An array that consists of the names of host accounts.
	HostAccountNames []*string `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListHostGroupAccountNamesForUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupAccountNamesForUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostGroupAccountNamesForUserResponseBody) SetHostAccountNames(v []*string) *ListHostGroupAccountNamesForUserResponseBody {
	s.HostAccountNames = v
	return s
}

func (s *ListHostGroupAccountNamesForUserResponseBody) SetRequestId(v string) *ListHostGroupAccountNamesForUserResponseBody {
	s.RequestId = &v
	return s
}

type ListHostGroupAccountNamesForUserResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostGroupAccountNamesForUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostGroupAccountNamesForUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupAccountNamesForUserResponse) GoString() string {
	return s.String()
}

func (s *ListHostGroupAccountNamesForUserResponse) SetHeaders(v map[string]*string) *ListHostGroupAccountNamesForUserResponse {
	s.Headers = v
	return s
}

func (s *ListHostGroupAccountNamesForUserResponse) SetStatusCode(v int32) *ListHostGroupAccountNamesForUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserResponse) SetBody(v *ListHostGroupAccountNamesForUserResponseBody) *ListHostGroupAccountNamesForUserResponse {
	s.Body = v
	return s
}

type ListHostGroupAccountNamesForUserGroupRequest struct {
	// The ID of the host group.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the bastion host on which you want to query the host account names the user group is authorized to manage in a host group.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host on which you want to query the host account names the user group is authorized to manage in a host group.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListHostGroupAccountNamesForUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupAccountNamesForUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ListHostGroupAccountNamesForUserGroupRequest) SetHostGroupId(v string) *ListHostGroupAccountNamesForUserGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserGroupRequest) SetInstanceId(v string) *ListHostGroupAccountNamesForUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserGroupRequest) SetRegionId(v string) *ListHostGroupAccountNamesForUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserGroupRequest) SetUserGroupId(v string) *ListHostGroupAccountNamesForUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type ListHostGroupAccountNamesForUserGroupResponseBody struct {
	// The names of host accounts returned.
	HostAccountNames []*string `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListHostGroupAccountNamesForUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupAccountNamesForUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostGroupAccountNamesForUserGroupResponseBody) SetHostAccountNames(v []*string) *ListHostGroupAccountNamesForUserGroupResponseBody {
	s.HostAccountNames = v
	return s
}

func (s *ListHostGroupAccountNamesForUserGroupResponseBody) SetRequestId(v string) *ListHostGroupAccountNamesForUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type ListHostGroupAccountNamesForUserGroupResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostGroupAccountNamesForUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostGroupAccountNamesForUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupAccountNamesForUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ListHostGroupAccountNamesForUserGroupResponse) SetHeaders(v map[string]*string) *ListHostGroupAccountNamesForUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ListHostGroupAccountNamesForUserGroupResponse) SetStatusCode(v int32) *ListHostGroupAccountNamesForUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostGroupAccountNamesForUserGroupResponse) SetBody(v *ListHostGroupAccountNamesForUserGroupResponseBody) *ListHostGroupAccountNamesForUserGroupResponse {
	s.Body = v
	return s
}

type ListHostGroupsRequest struct {
	// The name of the host group that you want to query. Only exact match is supported.
	//
	// example:
	//
	// Host group 1
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	// The ID of the bastion host to query.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/462953.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host in which you want to query the host group.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListHostGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListHostGroupsRequest) SetHostGroupName(v string) *ListHostGroupsRequest {
	s.HostGroupName = &v
	return s
}

func (s *ListHostGroupsRequest) SetInstanceId(v string) *ListHostGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostGroupsRequest) SetPageNumber(v string) *ListHostGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostGroupsRequest) SetPageSize(v string) *ListHostGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostGroupsRequest) SetRegionId(v string) *ListHostGroupsRequest {
	s.RegionId = &v
	return s
}

type ListHostGroupsResponseBody struct {
	// The asset groups returned.
	HostGroups []*ListHostGroupsResponseBodyHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of asset groups returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostGroupsResponseBody) SetHostGroups(v []*ListHostGroupsResponseBodyHostGroups) *ListHostGroupsResponseBody {
	s.HostGroups = v
	return s
}

func (s *ListHostGroupsResponseBody) SetRequestId(v string) *ListHostGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostGroupsResponseBody) SetTotalCount(v int32) *ListHostGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostGroupsResponseBodyHostGroups struct {
	// The remarks of the asset group.
	//
	// example:
	//
	// Description
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The asset group ID.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The name of the asset group.
	//
	// example:
	//
	// Host group 1
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	// The number of hosts in the asset group.
	//
	// example:
	//
	// 1
	MemberCount *int32 `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
}

func (s ListHostGroupsResponseBodyHostGroups) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsResponseBodyHostGroups) GoString() string {
	return s.String()
}

func (s *ListHostGroupsResponseBodyHostGroups) SetComment(v string) *ListHostGroupsResponseBodyHostGroups {
	s.Comment = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetHostGroupId(v string) *ListHostGroupsResponseBodyHostGroups {
	s.HostGroupId = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetHostGroupName(v string) *ListHostGroupsResponseBodyHostGroups {
	s.HostGroupName = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetMemberCount(v int32) *ListHostGroupsResponseBodyHostGroups {
	s.MemberCount = &v
	return s
}

type ListHostGroupsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListHostGroupsResponse) SetHeaders(v map[string]*string) *ListHostGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListHostGroupsResponse) SetStatusCode(v int32) *ListHostGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostGroupsResponse) SetBody(v *ListHostGroupsResponseBody) *ListHostGroupsResponse {
	s.Body = v
	return s
}

type ListHostGroupsForUserRequest struct {
	// The name of the host group to query. The name can be up to 128 characters in length. Only exact match is supported.
	//
	// example:
	//
	// group
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	// The ID of the bastion host whose user you want to query.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The category of the host groups to query. Valid values:
	//
	// 	- **Authorized*	- (default): queries the host groups that the user is authorized to manage.
	//
	// 	- **Unauthorized**: queries the host groups that the user is not authorized to manage.
	//
	// example:
	//
	// Authorized
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// １
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host whose user you want to query.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The user ID.
	//
	// >  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// １
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListHostGroupsForUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserRequest) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserRequest) SetHostGroupName(v string) *ListHostGroupsForUserRequest {
	s.HostGroupName = &v
	return s
}

func (s *ListHostGroupsForUserRequest) SetInstanceId(v string) *ListHostGroupsForUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostGroupsForUserRequest) SetMode(v string) *ListHostGroupsForUserRequest {
	s.Mode = &v
	return s
}

func (s *ListHostGroupsForUserRequest) SetPageNumber(v string) *ListHostGroupsForUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostGroupsForUserRequest) SetPageSize(v string) *ListHostGroupsForUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostGroupsForUserRequest) SetRegionId(v string) *ListHostGroupsForUserRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostGroupsForUserRequest) SetUserId(v string) *ListHostGroupsForUserRequest {
	s.UserId = &v
	return s
}

type ListHostGroupsForUserResponseBody struct {
	// The host groups returned.
	HostGroups []*ListHostGroupsForUserResponseBodyHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of host groups returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostGroupsForUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserResponseBody) SetHostGroups(v []*ListHostGroupsForUserResponseBodyHostGroups) *ListHostGroupsForUserResponseBody {
	s.HostGroups = v
	return s
}

func (s *ListHostGroupsForUserResponseBody) SetRequestId(v string) *ListHostGroupsForUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostGroupsForUserResponseBody) SetTotalCount(v int32) *ListHostGroupsForUserResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostGroupsForUserResponseBodyHostGroups struct {
	// The remarks of the host group.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The host group ID.
	//
	// example:
	//
	// １
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The name of the host group.
	//
	// example:
	//
	// group
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s ListHostGroupsForUserResponseBodyHostGroups) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserResponseBodyHostGroups) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserResponseBodyHostGroups) SetComment(v string) *ListHostGroupsForUserResponseBodyHostGroups {
	s.Comment = &v
	return s
}

func (s *ListHostGroupsForUserResponseBodyHostGroups) SetHostGroupId(v string) *ListHostGroupsForUserResponseBodyHostGroups {
	s.HostGroupId = &v
	return s
}

func (s *ListHostGroupsForUserResponseBodyHostGroups) SetHostGroupName(v string) *ListHostGroupsForUserResponseBodyHostGroups {
	s.HostGroupName = &v
	return s
}

type ListHostGroupsForUserResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostGroupsForUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostGroupsForUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserResponse) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserResponse) SetHeaders(v map[string]*string) *ListHostGroupsForUserResponse {
	s.Headers = v
	return s
}

func (s *ListHostGroupsForUserResponse) SetStatusCode(v int32) *ListHostGroupsForUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostGroupsForUserResponse) SetBody(v *ListHostGroupsForUserResponseBody) *ListHostGroupsForUserResponse {
	s.Body = v
	return s
}

type ListHostGroupsForUserGroupRequest struct {
	// The name of the host group that you want to query. Only exact match is supported.
	//
	// example:
	//
	// group
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	// The ID of the bastion host to which the user group belongs.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies the category of the host group that you want to query. Valid values:
	//
	// 	- **Authorized**: queries the host groups that the user group is authorized to manage. This is the default value.
	//
	// 	- **Unauthorized**: queries the host groups that the user group is not authorized to manage.
	//
	// example:
	//
	// Authorized
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host to which the user group belongs.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListHostGroupsForUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserGroupRequest) SetHostGroupName(v string) *ListHostGroupsForUserGroupRequest {
	s.HostGroupName = &v
	return s
}

func (s *ListHostGroupsForUserGroupRequest) SetInstanceId(v string) *ListHostGroupsForUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostGroupsForUserGroupRequest) SetMode(v string) *ListHostGroupsForUserGroupRequest {
	s.Mode = &v
	return s
}

func (s *ListHostGroupsForUserGroupRequest) SetPageNumber(v string) *ListHostGroupsForUserGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostGroupsForUserGroupRequest) SetPageSize(v string) *ListHostGroupsForUserGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostGroupsForUserGroupRequest) SetRegionId(v string) *ListHostGroupsForUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostGroupsForUserGroupRequest) SetUserGroupId(v string) *ListHostGroupsForUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type ListHostGroupsForUserGroupResponseBody struct {
	// The host groups returned.
	HostGroups []*ListHostGroupsForUserGroupResponseBodyHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of host groups returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostGroupsForUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserGroupResponseBody) SetHostGroups(v []*ListHostGroupsForUserGroupResponseBodyHostGroups) *ListHostGroupsForUserGroupResponseBody {
	s.HostGroups = v
	return s
}

func (s *ListHostGroupsForUserGroupResponseBody) SetRequestId(v string) *ListHostGroupsForUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostGroupsForUserGroupResponseBody) SetTotalCount(v int32) *ListHostGroupsForUserGroupResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostGroupsForUserGroupResponseBodyHostGroups struct {
	// The description of the host group.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the host group.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The name of the host group.
	//
	// example:
	//
	// group
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s ListHostGroupsForUserGroupResponseBodyHostGroups) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserGroupResponseBodyHostGroups) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserGroupResponseBodyHostGroups) SetComment(v string) *ListHostGroupsForUserGroupResponseBodyHostGroups {
	s.Comment = &v
	return s
}

func (s *ListHostGroupsForUserGroupResponseBodyHostGroups) SetHostGroupId(v string) *ListHostGroupsForUserGroupResponseBodyHostGroups {
	s.HostGroupId = &v
	return s
}

func (s *ListHostGroupsForUserGroupResponseBodyHostGroups) SetHostGroupName(v string) *ListHostGroupsForUserGroupResponseBodyHostGroups {
	s.HostGroupName = &v
	return s
}

type ListHostGroupsForUserGroupResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostGroupsForUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostGroupsForUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsForUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ListHostGroupsForUserGroupResponse) SetHeaders(v map[string]*string) *ListHostGroupsForUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ListHostGroupsForUserGroupResponse) SetStatusCode(v int32) *ListHostGroupsForUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostGroupsForUserGroupResponse) SetBody(v *ListHostGroupsForUserGroupResponseBody) *ListHostGroupsForUserGroupResponse {
	s.Body = v
	return s
}

type ListHostShareKeysRequest struct {
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListHostShareKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostShareKeysRequest) GoString() string {
	return s.String()
}

func (s *ListHostShareKeysRequest) SetInstanceId(v string) *ListHostShareKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostShareKeysRequest) SetPageNumber(v string) *ListHostShareKeysRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostShareKeysRequest) SetPageSize(v string) *ListHostShareKeysRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostShareKeysRequest) SetRegionId(v string) *ListHostShareKeysRequest {
	s.RegionId = &v
	return s
}

type ListHostShareKeysResponseBody struct {
	// An array that consists of the shared keys.
	HostShareKeys []*ListHostShareKeysResponseBodyHostShareKeys `json:"HostShareKeys,omitempty" xml:"HostShareKeys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of the shared keys.
	//
	// example:
	//
	// 10
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostShareKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostShareKeysResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostShareKeysResponseBody) SetHostShareKeys(v []*ListHostShareKeysResponseBodyHostShareKeys) *ListHostShareKeysResponseBody {
	s.HostShareKeys = v
	return s
}

func (s *ListHostShareKeysResponseBody) SetRequestId(v string) *ListHostShareKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostShareKeysResponseBody) SetTotalCount(v int64) *ListHostShareKeysResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostShareKeysResponseBodyHostShareKeys struct {
	// The number of the associated host accounts.
	//
	// example:
	//
	// 1
	HostAccountCount *int64 `json:"HostAccountCount,omitempty" xml:"HostAccountCount,omitempty"`
	// The shared key ID.
	//
	// example:
	//
	// 10247
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The name of the shared key.
	//
	// example:
	//
	// name
	HostShareKeyName *string `json:"HostShareKeyName,omitempty" xml:"HostShareKeyName,omitempty"`
	// The time when the shared key was last modified. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1644806406
	LastModifyKeyAt *int64 `json:"LastModifyKeyAt,omitempty" xml:"LastModifyKeyAt,omitempty"`
	// The fingerprint of the private key.
	//
	// example:
	//
	// ****
	PrivateKeyFingerPrint *string `json:"PrivateKeyFingerPrint,omitempty" xml:"PrivateKeyFingerPrint,omitempty"`
}

func (s ListHostShareKeysResponseBodyHostShareKeys) String() string {
	return tea.Prettify(s)
}

func (s ListHostShareKeysResponseBodyHostShareKeys) GoString() string {
	return s.String()
}

func (s *ListHostShareKeysResponseBodyHostShareKeys) SetHostAccountCount(v int64) *ListHostShareKeysResponseBodyHostShareKeys {
	s.HostAccountCount = &v
	return s
}

func (s *ListHostShareKeysResponseBodyHostShareKeys) SetHostShareKeyId(v string) *ListHostShareKeysResponseBodyHostShareKeys {
	s.HostShareKeyId = &v
	return s
}

func (s *ListHostShareKeysResponseBodyHostShareKeys) SetHostShareKeyName(v string) *ListHostShareKeysResponseBodyHostShareKeys {
	s.HostShareKeyName = &v
	return s
}

func (s *ListHostShareKeysResponseBodyHostShareKeys) SetLastModifyKeyAt(v int64) *ListHostShareKeysResponseBodyHostShareKeys {
	s.LastModifyKeyAt = &v
	return s
}

func (s *ListHostShareKeysResponseBodyHostShareKeys) SetPrivateKeyFingerPrint(v string) *ListHostShareKeysResponseBodyHostShareKeys {
	s.PrivateKeyFingerPrint = &v
	return s
}

type ListHostShareKeysResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostShareKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostShareKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostShareKeysResponse) GoString() string {
	return s.String()
}

func (s *ListHostShareKeysResponse) SetHeaders(v map[string]*string) *ListHostShareKeysResponse {
	s.Headers = v
	return s
}

func (s *ListHostShareKeysResponse) SetStatusCode(v int32) *ListHostShareKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostShareKeysResponse) SetBody(v *ListHostShareKeysResponseBody) *ListHostShareKeysResponse {
	s.Body = v
	return s
}

type ListHostsRequest struct {
	// The address of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.
	//
	// example:
	//
	// 1.1.XX.XX
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The ID of the host group to which the host to be queried belongs.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The name of the host that you want to query. Only exact match is supported.
	//
	// example:
	//
	// host
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the bastion host on which you want to query hosts.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The operating system of the host that you want to query. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The number of the page to return. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host on which you want to query hosts.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The source of the host that you want to query. Valid values:
	//
	// 	- **Local**: a host in a data center
	//
	// 	- **Ecs**: an Elastic Compute Service (ECS) instance
	//
	// 	- **Rds**: a host in an ApsaraDB MyBase dedicated cluster
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster that you want to query. Only exact match is supported.
	//
	// example:
	//
	// i-bp19ienyt0yax748****
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The status of the host that you want to query. Valid values:
	//
	// 	- **Normal**: normal
	//
	// 	- **Release**: released
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s ListHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostsRequest) GoString() string {
	return s.String()
}

func (s *ListHostsRequest) SetHostAddress(v string) *ListHostsRequest {
	s.HostAddress = &v
	return s
}

func (s *ListHostsRequest) SetHostGroupId(v string) *ListHostsRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListHostsRequest) SetHostName(v string) *ListHostsRequest {
	s.HostName = &v
	return s
}

func (s *ListHostsRequest) SetInstanceId(v string) *ListHostsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostsRequest) SetOSType(v string) *ListHostsRequest {
	s.OSType = &v
	return s
}

func (s *ListHostsRequest) SetPageNumber(v string) *ListHostsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostsRequest) SetPageSize(v string) *ListHostsRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostsRequest) SetRegionId(v string) *ListHostsRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostsRequest) SetSource(v string) *ListHostsRequest {
	s.Source = &v
	return s
}

func (s *ListHostsRequest) SetSourceInstanceId(v string) *ListHostsRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *ListHostsRequest) SetSourceInstanceState(v string) *ListHostsRequest {
	s.SourceInstanceState = &v
	return s
}

type ListHostsResponseBody struct {
	// An array that consists of the hosts returned.
	Hosts []*ListHostsResponseBodyHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of hosts returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostsResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostsResponseBody) SetHosts(v []*ListHostsResponseBodyHosts) *ListHostsResponseBody {
	s.Hosts = v
	return s
}

func (s *ListHostsResponseBody) SetRequestId(v string) *ListHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostsResponseBody) SetTotalCount(v int32) *ListHostsResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostsResponseBodyHosts struct {
	// The address type of the host. Valid values:
	//
	// 	- **Public**: a public address
	//
	// 	- **Private**: a private address
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The description of the host.
	//
	// example:
	//
	// host
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The number of host accounts.
	//
	// example:
	//
	// 1
	HostAccountCount *int32 `json:"HostAccountCount,omitempty" xml:"HostAccountCount,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The name of the host.
	//
	// example:
	//
	// name
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The private address of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 192.168.XX.XX
	HostPrivateAddress *string `json:"HostPrivateAddress,omitempty" xml:"HostPrivateAddress,omitempty"`
	// The public address of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 1.1.XX.XX
	HostPublicAddress *string `json:"HostPublicAddress,omitempty" xml:"HostPublicAddress,omitempty"`
	// The operating system of the host. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The source of the host. Valid values:
	//
	// 	- **Local**: a host in a data center
	//
	// 	- **Ecs**: an ECS instance
	//
	// 	- **Rds**: a host in an ApsaraDB MyBase dedicated cluster
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster.
	//
	// > No value is returned for this parameter if the **Source*	- parameter is set to **Local**.
	//
	// example:
	//
	// i-bp19ienyt0yax748****
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The status of the host. Valid values:
	//
	// 	- **Normal**: normal
	//
	// 	- **Release**: released
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s ListHostsResponseBodyHosts) String() string {
	return tea.Prettify(s)
}

func (s ListHostsResponseBodyHosts) GoString() string {
	return s.String()
}

func (s *ListHostsResponseBodyHosts) SetActiveAddressType(v string) *ListHostsResponseBodyHosts {
	s.ActiveAddressType = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetComment(v string) *ListHostsResponseBodyHosts {
	s.Comment = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetHostAccountCount(v int32) *ListHostsResponseBodyHosts {
	s.HostAccountCount = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetHostId(v string) *ListHostsResponseBodyHosts {
	s.HostId = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetHostName(v string) *ListHostsResponseBodyHosts {
	s.HostName = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetHostPrivateAddress(v string) *ListHostsResponseBodyHosts {
	s.HostPrivateAddress = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetHostPublicAddress(v string) *ListHostsResponseBodyHosts {
	s.HostPublicAddress = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetOSType(v string) *ListHostsResponseBodyHosts {
	s.OSType = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetSource(v string) *ListHostsResponseBodyHosts {
	s.Source = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetSourceInstanceId(v string) *ListHostsResponseBodyHosts {
	s.SourceInstanceId = &v
	return s
}

func (s *ListHostsResponseBodyHosts) SetSourceInstanceState(v string) *ListHostsResponseBodyHosts {
	s.SourceInstanceState = &v
	return s
}

type ListHostsResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostsResponse) GoString() string {
	return s.String()
}

func (s *ListHostsResponse) SetHeaders(v map[string]*string) *ListHostsResponse {
	s.Headers = v
	return s
}

func (s *ListHostsResponse) SetStatusCode(v int32) *ListHostsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostsResponse) SetBody(v *ListHostsResponseBody) *ListHostsResponse {
	s.Body = v
	return s
}

type ListHostsForUserRequest struct {
	// The endpoint of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.
	//
	// example:
	//
	// 192.168.XX.XX
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The name of the host that you want to query. Only exact match is supported.
	//
	// example:
	//
	// abc
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the bastion host on which you want to query the hosts that the user is authorized or not authorized to manage.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies the category of the hosts that you want to query. Valid values:
	//
	// 	- **Authorized**: queries the hosts that the user is authorized to manage. This is the default value.
	//
	// 	- **Unauthorized**: queries the hosts that the user is not authorized to manage.
	//
	// example:
	//
	// Authorized
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The operating system of the host that you want to query. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The number of the page. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned per page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host on which you want to query the hosts that the user is authorized or not authorized to manage.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user.
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListHostsForUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserRequest) GoString() string {
	return s.String()
}

func (s *ListHostsForUserRequest) SetHostAddress(v string) *ListHostsForUserRequest {
	s.HostAddress = &v
	return s
}

func (s *ListHostsForUserRequest) SetHostName(v string) *ListHostsForUserRequest {
	s.HostName = &v
	return s
}

func (s *ListHostsForUserRequest) SetInstanceId(v string) *ListHostsForUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostsForUserRequest) SetMode(v string) *ListHostsForUserRequest {
	s.Mode = &v
	return s
}

func (s *ListHostsForUserRequest) SetOSType(v string) *ListHostsForUserRequest {
	s.OSType = &v
	return s
}

func (s *ListHostsForUserRequest) SetPageNumber(v string) *ListHostsForUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostsForUserRequest) SetPageSize(v string) *ListHostsForUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostsForUserRequest) SetRegionId(v string) *ListHostsForUserRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostsForUserRequest) SetUserId(v string) *ListHostsForUserRequest {
	s.UserId = &v
	return s
}

type ListHostsForUserResponseBody struct {
	// The hosts returned.
	Hosts []*ListHostsForUserResponseBodyHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of hosts returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostsForUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostsForUserResponseBody) SetHosts(v []*ListHostsForUserResponseBodyHosts) *ListHostsForUserResponseBody {
	s.Hosts = v
	return s
}

func (s *ListHostsForUserResponseBody) SetRequestId(v string) *ListHostsForUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostsForUserResponseBody) SetTotalCount(v int32) *ListHostsForUserResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostsForUserResponseBodyHosts struct {
	// The endpoint type of the host. Valid values:
	//
	// 	- **Public**: public endpoint
	//
	// 	- **Private**: internal endpoint
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The description of the host.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The name of the host.
	//
	// example:
	//
	// host01
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The internal endpoint of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 192.168.XX.XX
	HostPrivateAddress *string `json:"HostPrivateAddress,omitempty" xml:"HostPrivateAddress,omitempty"`
	// The public endpoint of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 10.158.XX.XX
	HostPublicAddress *string `json:"HostPublicAddress,omitempty" xml:"HostPublicAddress,omitempty"`
	// The operating system of the host. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
}

func (s ListHostsForUserResponseBodyHosts) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserResponseBodyHosts) GoString() string {
	return s.String()
}

func (s *ListHostsForUserResponseBodyHosts) SetActiveAddressType(v string) *ListHostsForUserResponseBodyHosts {
	s.ActiveAddressType = &v
	return s
}

func (s *ListHostsForUserResponseBodyHosts) SetComment(v string) *ListHostsForUserResponseBodyHosts {
	s.Comment = &v
	return s
}

func (s *ListHostsForUserResponseBodyHosts) SetHostId(v string) *ListHostsForUserResponseBodyHosts {
	s.HostId = &v
	return s
}

func (s *ListHostsForUserResponseBodyHosts) SetHostName(v string) *ListHostsForUserResponseBodyHosts {
	s.HostName = &v
	return s
}

func (s *ListHostsForUserResponseBodyHosts) SetHostPrivateAddress(v string) *ListHostsForUserResponseBodyHosts {
	s.HostPrivateAddress = &v
	return s
}

func (s *ListHostsForUserResponseBodyHosts) SetHostPublicAddress(v string) *ListHostsForUserResponseBodyHosts {
	s.HostPublicAddress = &v
	return s
}

func (s *ListHostsForUserResponseBodyHosts) SetOSType(v string) *ListHostsForUserResponseBodyHosts {
	s.OSType = &v
	return s
}

type ListHostsForUserResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostsForUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostsForUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserResponse) GoString() string {
	return s.String()
}

func (s *ListHostsForUserResponse) SetHeaders(v map[string]*string) *ListHostsForUserResponse {
	s.Headers = v
	return s
}

func (s *ListHostsForUserResponse) SetStatusCode(v int32) *ListHostsForUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostsForUserResponse) SetBody(v *ListHostsForUserResponseBody) *ListHostsForUserResponse {
	s.Body = v
	return s
}

type ListHostsForUserGroupRequest struct {
	// The endpoint of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.
	//
	// example:
	//
	// 192.168.XX.XX
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The name of the host that you want to query. Only exact match is supported.
	//
	// example:
	//
	// abc
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the bastion host on which you want to query the hosts that the user group is authorized or not authorized to manage.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies the category of the hosts that you want to query. Valid values:
	//
	// 	- **Authorized**: queries the hosts that the user group is authorized to manage. This is the default value.
	//
	// 	- **Unauthorized**: queries the hosts that the user group is not authorized to manage.
	//
	// example:
	//
	// Authorized
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The operating system of the host that you want to query. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The number of the page. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned per page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host on which you want to query the hosts that the user group is authorized or not authorized to manage.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group for which you want to query hosts.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListHostsForUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ListHostsForUserGroupRequest) SetHostAddress(v string) *ListHostsForUserGroupRequest {
	s.HostAddress = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetHostName(v string) *ListHostsForUserGroupRequest {
	s.HostName = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetInstanceId(v string) *ListHostsForUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetMode(v string) *ListHostsForUserGroupRequest {
	s.Mode = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetOSType(v string) *ListHostsForUserGroupRequest {
	s.OSType = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetPageNumber(v string) *ListHostsForUserGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetPageSize(v string) *ListHostsForUserGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetRegionId(v string) *ListHostsForUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListHostsForUserGroupRequest) SetUserGroupId(v string) *ListHostsForUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type ListHostsForUserGroupResponseBody struct {
	// The hosts returned.
	Hosts []*ListHostsForUserGroupResponseBodyHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of hosts returned.
	//
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHostsForUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostsForUserGroupResponseBody) SetHosts(v []*ListHostsForUserGroupResponseBodyHosts) *ListHostsForUserGroupResponseBody {
	s.Hosts = v
	return s
}

func (s *ListHostsForUserGroupResponseBody) SetRequestId(v string) *ListHostsForUserGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostsForUserGroupResponseBody) SetTotalCount(v int32) *ListHostsForUserGroupResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostsForUserGroupResponseBodyHosts struct {
	// The address type of the host. Valid values:
	//
	// 	- **Public**: public endpoint
	//
	// 	- **Private**: internal endpoint
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The description of the host.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The name of the host.
	//
	// example:
	//
	// host1
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The internal endpoint of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 192.168.XX.XX
	HostPrivateAddress *string `json:"HostPrivateAddress,omitempty" xml:"HostPrivateAddress,omitempty"`
	// The public endpoint of the host. The value is a domain name or an IP address.
	//
	// example:
	//
	// 10.158.XX.XX
	HostPublicAddress *string `json:"HostPublicAddress,omitempty" xml:"HostPublicAddress,omitempty"`
	// The operating system of the host. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
}

func (s ListHostsForUserGroupResponseBodyHosts) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserGroupResponseBodyHosts) GoString() string {
	return s.String()
}

func (s *ListHostsForUserGroupResponseBodyHosts) SetActiveAddressType(v string) *ListHostsForUserGroupResponseBodyHosts {
	s.ActiveAddressType = &v
	return s
}

func (s *ListHostsForUserGroupResponseBodyHosts) SetComment(v string) *ListHostsForUserGroupResponseBodyHosts {
	s.Comment = &v
	return s
}

func (s *ListHostsForUserGroupResponseBodyHosts) SetHostId(v string) *ListHostsForUserGroupResponseBodyHosts {
	s.HostId = &v
	return s
}

func (s *ListHostsForUserGroupResponseBodyHosts) SetHostName(v string) *ListHostsForUserGroupResponseBodyHosts {
	s.HostName = &v
	return s
}

func (s *ListHostsForUserGroupResponseBodyHosts) SetHostPrivateAddress(v string) *ListHostsForUserGroupResponseBodyHosts {
	s.HostPrivateAddress = &v
	return s
}

func (s *ListHostsForUserGroupResponseBodyHosts) SetHostPublicAddress(v string) *ListHostsForUserGroupResponseBodyHosts {
	s.HostPublicAddress = &v
	return s
}

func (s *ListHostsForUserGroupResponseBodyHosts) SetOSType(v string) *ListHostsForUserGroupResponseBodyHosts {
	s.OSType = &v
	return s
}

type ListHostsForUserGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostsForUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostsForUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostsForUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ListHostsForUserGroupResponse) SetHeaders(v map[string]*string) *ListHostsForUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ListHostsForUserGroupResponse) SetStatusCode(v int32) *ListHostsForUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostsForUserGroupResponse) SetBody(v *ListHostsForUserGroupResponseBody) *ListHostsForUserGroupResponse {
	s.Body = v
	return s
}

type ListNetworkDomainsRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-tl329pvu70x
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the network domain.
	NetworkDomainName *string `json:"NetworkDomainName,omitempty" xml:"NetworkDomainName,omitempty"`
	// The connection mode of the network domain. Valid values:
	//
	// 	- **Direct**
	//
	// 	- **Proxy**
	//
	// example:
	//
	// Proxy
	NetworkDomainType *string `json:"NetworkDomainType,omitempty" xml:"NetworkDomainType,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListNetworkDomainsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNetworkDomainsRequest) GoString() string {
	return s.String()
}

func (s *ListNetworkDomainsRequest) SetInstanceId(v string) *ListNetworkDomainsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListNetworkDomainsRequest) SetNetworkDomainName(v string) *ListNetworkDomainsRequest {
	s.NetworkDomainName = &v
	return s
}

func (s *ListNetworkDomainsRequest) SetNetworkDomainType(v string) *ListNetworkDomainsRequest {
	s.NetworkDomainType = &v
	return s
}

func (s *ListNetworkDomainsRequest) SetPageNumber(v string) *ListNetworkDomainsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListNetworkDomainsRequest) SetPageSize(v string) *ListNetworkDomainsRequest {
	s.PageSize = &v
	return s
}

func (s *ListNetworkDomainsRequest) SetRegionId(v string) *ListNetworkDomainsRequest {
	s.RegionId = &v
	return s
}

type ListNetworkDomainsResponseBody struct {
	// The network domains that are returned.
	NetworkDomains []*ListNetworkDomainsResponseBodyNetworkDomains `json:"NetworkDomains,omitempty" xml:"NetworkDomains,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of network domains that are returned.
	//
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListNetworkDomainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNetworkDomainsResponseBody) GoString() string {
	return s.String()
}

func (s *ListNetworkDomainsResponseBody) SetNetworkDomains(v []*ListNetworkDomainsResponseBodyNetworkDomains) *ListNetworkDomainsResponseBody {
	s.NetworkDomains = v
	return s
}

func (s *ListNetworkDomainsResponseBody) SetRequestId(v string) *ListNetworkDomainsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNetworkDomainsResponseBody) SetTotalCount(v int64) *ListNetworkDomainsResponseBody {
	s.TotalCount = &v
	return s
}

type ListNetworkDomainsResponseBodyNetworkDomains struct {
	// The remarks of the network domain.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// Indicates whether the network domain is built-in.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Default *bool `json:"Default,omitempty" xml:"Default,omitempty"`
	// The network domain ID.
	//
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The name of the network domain.
	//
	// example:
	//
	// test
	NetworkDomainName *string `json:"NetworkDomainName,omitempty" xml:"NetworkDomainName,omitempty"`
	// The connection mode of the network domain. Valid values:
	//
	// 	- **Direct**
	//
	// 	- **Proxy**
	//
	// example:
	//
	// Proxy
	NetworkDomainType *string                                                     `json:"NetworkDomainType,omitempty" xml:"NetworkDomainType,omitempty"`
	ProxiesState      []*ListNetworkDomainsResponseBodyNetworkDomainsProxiesState `json:"ProxiesState,omitempty" xml:"ProxiesState,omitempty" type:"Repeated"`
}

func (s ListNetworkDomainsResponseBodyNetworkDomains) String() string {
	return tea.Prettify(s)
}

func (s ListNetworkDomainsResponseBodyNetworkDomains) GoString() string {
	return s.String()
}

func (s *ListNetworkDomainsResponseBodyNetworkDomains) SetComment(v string) *ListNetworkDomainsResponseBodyNetworkDomains {
	s.Comment = &v
	return s
}

func (s *ListNetworkDomainsResponseBodyNetworkDomains) SetDefault(v bool) *ListNetworkDomainsResponseBodyNetworkDomains {
	s.Default = &v
	return s
}

func (s *ListNetworkDomainsResponseBodyNetworkDomains) SetNetworkDomainId(v string) *ListNetworkDomainsResponseBodyNetworkDomains {
	s.NetworkDomainId = &v
	return s
}

func (s *ListNetworkDomainsResponseBodyNetworkDomains) SetNetworkDomainName(v string) *ListNetworkDomainsResponseBodyNetworkDomains {
	s.NetworkDomainName = &v
	return s
}

func (s *ListNetworkDomainsResponseBodyNetworkDomains) SetNetworkDomainType(v string) *ListNetworkDomainsResponseBodyNetworkDomains {
	s.NetworkDomainType = &v
	return s
}

func (s *ListNetworkDomainsResponseBodyNetworkDomains) SetProxiesState(v []*ListNetworkDomainsResponseBodyNetworkDomainsProxiesState) *ListNetworkDomainsResponseBodyNetworkDomains {
	s.ProxiesState = v
	return s
}

type ListNetworkDomainsResponseBodyNetworkDomainsProxiesState struct {
	// The node type of the proxy server. Valid values:
	//
	// 	- **Master**: primary proxy server.
	//
	// 	- **Slave**: secondary proxy server.
	//
	// example:
	//
	// Master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// The status of the proxy server.
	//
	// 	- **Available**
	//
	// 	- **Unavailable**
	//
	// example:
	//
	// Available
	ProxyState *string `json:"ProxyState,omitempty" xml:"ProxyState,omitempty"`
}

func (s ListNetworkDomainsResponseBodyNetworkDomainsProxiesState) String() string {
	return tea.Prettify(s)
}

func (s ListNetworkDomainsResponseBodyNetworkDomainsProxiesState) GoString() string {
	return s.String()
}

func (s *ListNetworkDomainsResponseBodyNetworkDomainsProxiesState) SetNodeType(v string) *ListNetworkDomainsResponseBodyNetworkDomainsProxiesState {
	s.NodeType = &v
	return s
}

func (s *ListNetworkDomainsResponseBodyNetworkDomainsProxiesState) SetProxyState(v string) *ListNetworkDomainsResponseBodyNetworkDomainsProxiesState {
	s.ProxyState = &v
	return s
}

type ListNetworkDomainsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNetworkDomainsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNetworkDomainsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNetworkDomainsResponse) GoString() string {
	return s.String()
}

func (s *ListNetworkDomainsResponse) SetHeaders(v map[string]*string) *ListNetworkDomainsResponse {
	s.Headers = v
	return s
}

func (s *ListNetworkDomainsResponse) SetStatusCode(v int32) *ListNetworkDomainsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNetworkDomainsResponse) SetBody(v *ListNetworkDomainsResponseBody) *ListNetworkDomainsResponse {
	s.Body = v
	return s
}

type ListOperationDatabaseAccountsRequest struct {
	// The name of the database account. Exact match is supported.
	//
	// example:
	//
	// test
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The database ID.
	//
	// >  You can call the [ListOperationDatabases](https://help.aliyun.com/document_detail/2758856.html) operation to query the database ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 56
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-2r42t9cvf0i
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListOperationDatabaseAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabaseAccountsRequest) GoString() string {
	return s.String()
}

func (s *ListOperationDatabaseAccountsRequest) SetDatabaseAccountName(v string) *ListOperationDatabaseAccountsRequest {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListOperationDatabaseAccountsRequest) SetDatabaseId(v string) *ListOperationDatabaseAccountsRequest {
	s.DatabaseId = &v
	return s
}

func (s *ListOperationDatabaseAccountsRequest) SetInstanceId(v string) *ListOperationDatabaseAccountsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOperationDatabaseAccountsRequest) SetPageNumber(v string) *ListOperationDatabaseAccountsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOperationDatabaseAccountsRequest) SetPageSize(v string) *ListOperationDatabaseAccountsRequest {
	s.PageSize = &v
	return s
}

func (s *ListOperationDatabaseAccountsRequest) SetRegionId(v string) *ListOperationDatabaseAccountsRequest {
	s.RegionId = &v
	return s
}

type ListOperationDatabaseAccountsResponseBody struct {
	// The database accounts returned.
	DatabaseAccounts []*ListOperationDatabaseAccountsResponseBodyDatabaseAccounts `json:"DatabaseAccounts,omitempty" xml:"DatabaseAccounts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListOperationDatabaseAccountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabaseAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *ListOperationDatabaseAccountsResponseBody) SetDatabaseAccounts(v []*ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) *ListOperationDatabaseAccountsResponseBody {
	s.DatabaseAccounts = v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBody) SetRequestId(v string) *ListOperationDatabaseAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBody) SetTotalCount(v int64) *ListOperationDatabaseAccountsResponseBody {
	s.TotalCount = &v
	return s
}

type ListOperationDatabaseAccountsResponseBodyDatabaseAccounts struct {
	// The name of the PostgreSQL or Oracle database.
	//
	// example:
	//
	// xe
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The database account ID.
	//
	// example:
	//
	// 3
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// system
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 2
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// Indicates whether a password is configured for the database host account.
	//
	// example:
	//
	// true
	HasPassword *string `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// The logon attribute. One of the following values is returned if the database engine is Oracle:
	//
	// 	- **SERVICENAME**
	//
	// 	- **SID**
	//
	// example:
	//
	// SID
	LoginAttribute *string `json:"LoginAttribute,omitempty" xml:"LoginAttribute,omitempty"`
	// The protocol that is used by the database account.
	//
	// example:
	//
	// MySQL
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
}

func (s ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) SetDBName(v string) *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DBName = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) SetDatabaseAccountId(v string) *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DatabaseAccountId = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) SetDatabaseAccountName(v string) *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DatabaseAccountName = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) SetDatabaseId(v string) *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts {
	s.DatabaseId = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) SetHasPassword(v string) *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts {
	s.HasPassword = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) SetLoginAttribute(v string) *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts {
	s.LoginAttribute = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts) SetProtocolName(v string) *ListOperationDatabaseAccountsResponseBodyDatabaseAccounts {
	s.ProtocolName = &v
	return s
}

type ListOperationDatabaseAccountsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOperationDatabaseAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOperationDatabaseAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabaseAccountsResponse) GoString() string {
	return s.String()
}

func (s *ListOperationDatabaseAccountsResponse) SetHeaders(v map[string]*string) *ListOperationDatabaseAccountsResponse {
	s.Headers = v
	return s
}

func (s *ListOperationDatabaseAccountsResponse) SetStatusCode(v int32) *ListOperationDatabaseAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOperationDatabaseAccountsResponse) SetBody(v *ListOperationDatabaseAccountsResponseBody) *ListOperationDatabaseAccountsResponse {
	s.Body = v
	return s
}

type ListOperationDatabasesRequest struct {
	// The address of the database.
	//
	// example:
	//
	// 10.167.66.167
	DatabaseAddress *string `json:"DatabaseAddress,omitempty" xml:"DatabaseAddress,omitempty"`
	// The name of the database instance. The system supports exact search.
	//
	// example:
	//
	// aaa
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The type of the database. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **SQLServer**
	//
	// 	- **Oracle**
	//
	// 	- **PostgreSQL**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-tl32wloo90y
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The source of the database instance. Valid values:
	//
	// 	- **Local**
	//
	// 	- **Rds**
	//
	// 	- **PolarDB**
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ApsaraDB RDS instance. The system supports exact search.
	//
	// example:
	//
	// i-bp19ienyt0yax748****
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The instance state.
	//
	// 	- **Normal**
	//
	// 	- **RemoteRelease**
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s ListOperationDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabasesRequest) GoString() string {
	return s.String()
}

func (s *ListOperationDatabasesRequest) SetDatabaseAddress(v string) *ListOperationDatabasesRequest {
	s.DatabaseAddress = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetDatabaseName(v string) *ListOperationDatabasesRequest {
	s.DatabaseName = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetDatabaseType(v string) *ListOperationDatabasesRequest {
	s.DatabaseType = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetInstanceId(v string) *ListOperationDatabasesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetPageNumber(v string) *ListOperationDatabasesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetPageSize(v string) *ListOperationDatabasesRequest {
	s.PageSize = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetRegionId(v string) *ListOperationDatabasesRequest {
	s.RegionId = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetSource(v string) *ListOperationDatabasesRequest {
	s.Source = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetSourceInstanceId(v string) *ListOperationDatabasesRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *ListOperationDatabasesRequest) SetSourceInstanceState(v string) *ListOperationDatabasesRequest {
	s.SourceInstanceState = &v
	return s
}

type ListOperationDatabasesResponseBody struct {
	// The databases returned.
	Databases []*ListOperationDatabasesResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 15
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListOperationDatabasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *ListOperationDatabasesResponseBody) SetDatabases(v []*ListOperationDatabasesResponseBodyDatabases) *ListOperationDatabasesResponseBody {
	s.Databases = v
	return s
}

func (s *ListOperationDatabasesResponseBody) SetRequestId(v string) *ListOperationDatabasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOperationDatabasesResponseBody) SetTotalCount(v int64) *ListOperationDatabasesResponseBody {
	s.TotalCount = &v
	return s
}

type ListOperationDatabasesResponseBodyDatabases struct {
	// The address type of the database. Valid values:
	//
	// 	- **Public**
	//
	// 	- **Private**
	//
	// example:
	//
	// Private
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The remarks of the database.
	//
	// example:
	//
	// cpp
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 26
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The database name.
	//
	// example:
	//
	// zDatabase
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The port of the database.
	//
	// example:
	//
	// 3306
	DatabasePort *int64 `json:"DatabasePort,omitempty" xml:"DatabasePort,omitempty"`
	// The private address of the database.
	//
	// example:
	//
	// rm-b******9b.mysql.rds.aliyuncs.com
	DatabasePrivateAddress *string `json:"DatabasePrivateAddress,omitempty" xml:"DatabasePrivateAddress,omitempty"`
	// The public address of the database.
	//
	// example:
	//
	// rm-uf******p45.mysql.rds.aliyuncs.com
	DatabasePublicAddress *string `json:"DatabasePublicAddress,omitempty" xml:"DatabasePublicAddress,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PostgreSQL**
	//
	// 	- **Oracle**
	//
	// 	- **SQLServer**
	//
	// example:
	//
	// MySQL
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The database type. Valid values:
	//
	// 	- **Local**: on-premises database.
	//
	// 	- **Rds**: ApsaraDB RDS instance.
	//
	// 	- **PolarDB**: PolarDB cluster.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the ApsaraDB RDS instance.
	//
	// example:
	//
	// i-wz9225bhipya******
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The region ID of the ApsaraDB RDS instance.
	//
	// example:
	//
	// cn-shanghai
	SourceInstanceRegionId *string `json:"SourceInstanceRegionId,omitempty" xml:"SourceInstanceRegionId,omitempty"`
	// The database status. Valid values:
	//
	// 	- **Normal**
	//
	// 	- **Release**
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s ListOperationDatabasesResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabasesResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetActiveAddressType(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.ActiveAddressType = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetComment(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.Comment = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetDatabaseId(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.DatabaseId = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetDatabaseName(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.DatabaseName = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetDatabasePort(v int64) *ListOperationDatabasesResponseBodyDatabases {
	s.DatabasePort = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetDatabasePrivateAddress(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.DatabasePrivateAddress = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetDatabasePublicAddress(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.DatabasePublicAddress = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetDatabaseType(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.DatabaseType = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetSource(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.Source = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetSourceInstanceId(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.SourceInstanceId = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetSourceInstanceRegionId(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.SourceInstanceRegionId = &v
	return s
}

func (s *ListOperationDatabasesResponseBodyDatabases) SetSourceInstanceState(v string) *ListOperationDatabasesResponseBodyDatabases {
	s.SourceInstanceState = &v
	return s
}

type ListOperationDatabasesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOperationDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOperationDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOperationDatabasesResponse) GoString() string {
	return s.String()
}

func (s *ListOperationDatabasesResponse) SetHeaders(v map[string]*string) *ListOperationDatabasesResponse {
	s.Headers = v
	return s
}

func (s *ListOperationDatabasesResponse) SetStatusCode(v int32) *ListOperationDatabasesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOperationDatabasesResponse) SetBody(v *ListOperationDatabasesResponseBody) *ListOperationDatabasesResponse {
	s.Body = v
	return s
}

type ListOperationHostAccountsRequest struct {
	// The name of the host account to query. Only exact match is supported.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the host whose accounts you want to query.
	//
	// >  You can call the [ListOperationHosts](https://help.aliyun.com/document_detail/2758857.html) operation to query the host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListOperationHostAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostAccountsRequest) GoString() string {
	return s.String()
}

func (s *ListOperationHostAccountsRequest) SetHostAccountName(v string) *ListOperationHostAccountsRequest {
	s.HostAccountName = &v
	return s
}

func (s *ListOperationHostAccountsRequest) SetHostId(v string) *ListOperationHostAccountsRequest {
	s.HostId = &v
	return s
}

func (s *ListOperationHostAccountsRequest) SetInstanceId(v string) *ListOperationHostAccountsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOperationHostAccountsRequest) SetPageNumber(v string) *ListOperationHostAccountsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOperationHostAccountsRequest) SetPageSize(v string) *ListOperationHostAccountsRequest {
	s.PageSize = &v
	return s
}

func (s *ListOperationHostAccountsRequest) SetRegionId(v string) *ListOperationHostAccountsRequest {
	s.RegionId = &v
	return s
}

type ListOperationHostAccountsResponseBody struct {
	// The host accounts returned.
	HostAccounts []*ListOperationHostAccountsResponseBodyHostAccounts `json:"HostAccounts,omitempty" xml:"HostAccounts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of host accounts returned.
	//
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListOperationHostAccountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *ListOperationHostAccountsResponseBody) SetHostAccounts(v []*ListOperationHostAccountsResponseBodyHostAccounts) *ListOperationHostAccountsResponseBody {
	s.HostAccounts = v
	return s
}

func (s *ListOperationHostAccountsResponseBody) SetRequestId(v string) *ListOperationHostAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOperationHostAccountsResponseBody) SetTotalCount(v int64) *ListOperationHostAccountsResponseBody {
	s.TotalCount = &v
	return s
}

type ListOperationHostAccountsResponseBodyHostAccounts struct {
	// Indicates whether a password is configured for the host account.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	HasPassword *bool `json:"HasPassword,omitempty" xml:"HasPassword,omitempty"`
	// The host account ID.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The host account name.
	//
	// example:
	//
	// root
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The host ID.
	//
	// example:
	//
	// １
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the shared key that is associated with the host.
	//
	// example:
	//
	// 3
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The fingerprint of the private key for the host account.
	//
	// example:
	//
	// fe:ca:37:42:30:00:9d:95:e6:73:e5:b0:32:0a:**:**
	PrivateKeyFingerprint *string `json:"PrivateKeyFingerprint,omitempty" xml:"PrivateKeyFingerprint,omitempty"`
	// The protocol that is used by the host account.
	//
	// 	- **SSH**
	//
	// 	- **RDP**
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
	// Indicates whether the Secure File Transfer Protocol (SFTP) channels or the SSH channels are enabled for the host account that uses the SSH protocol.
	SSHConfig *ListOperationHostAccountsResponseBodyHostAccountsSSHConfig `json:"SSHConfig,omitempty" xml:"SSHConfig,omitempty" type:"Struct"`
}

func (s ListOperationHostAccountsResponseBodyHostAccounts) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostAccountsResponseBodyHostAccounts) GoString() string {
	return s.String()
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetHasPassword(v bool) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.HasPassword = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetHostAccountId(v string) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.HostAccountId = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetHostAccountName(v string) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.HostAccountName = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetHostId(v string) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.HostId = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetHostShareKeyId(v string) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.HostShareKeyId = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetPrivateKeyFingerprint(v string) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.PrivateKeyFingerprint = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetProtocolName(v string) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.ProtocolName = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccounts) SetSSHConfig(v *ListOperationHostAccountsResponseBodyHostAccountsSSHConfig) *ListOperationHostAccountsResponseBodyHostAccounts {
	s.SSHConfig = v
	return s
}

type ListOperationHostAccountsResponseBodyHostAccountsSSHConfig struct {
	// Indicates whether SFTP channels are enabled for the account.
	EnableSFTPChannel *bool `json:"EnableSFTPChannel,omitempty" xml:"EnableSFTPChannel,omitempty"`
	// Indicates whether SSH channels are enabled for the account.
	EnableSSHChannel *bool `json:"EnableSSHChannel,omitempty" xml:"EnableSSHChannel,omitempty"`
}

func (s ListOperationHostAccountsResponseBodyHostAccountsSSHConfig) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostAccountsResponseBodyHostAccountsSSHConfig) GoString() string {
	return s.String()
}

func (s *ListOperationHostAccountsResponseBodyHostAccountsSSHConfig) SetEnableSFTPChannel(v bool) *ListOperationHostAccountsResponseBodyHostAccountsSSHConfig {
	s.EnableSFTPChannel = &v
	return s
}

func (s *ListOperationHostAccountsResponseBodyHostAccountsSSHConfig) SetEnableSSHChannel(v bool) *ListOperationHostAccountsResponseBodyHostAccountsSSHConfig {
	s.EnableSSHChannel = &v
	return s
}

type ListOperationHostAccountsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOperationHostAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOperationHostAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostAccountsResponse) GoString() string {
	return s.String()
}

func (s *ListOperationHostAccountsResponse) SetHeaders(v map[string]*string) *ListOperationHostAccountsResponse {
	s.Headers = v
	return s
}

func (s *ListOperationHostAccountsResponse) SetStatusCode(v int32) *ListOperationHostAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOperationHostAccountsResponse) SetBody(v *ListOperationHostAccountsResponseBody) *ListOperationHostAccountsResponse {
	s.Body = v
	return s
}

type ListOperationHostsRequest struct {
	// The address of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.
	//
	// example:
	//
	// 10.162.172.132
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The name of the host that you want to query. Only exact match is supported.
	//
	// example:
	//
	// abc
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-09k22avmw0q
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The operating system of the host that you want to query. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The source of the host that you want to query. Valid values:
	//
	// 	- **Local**
	//
	// 	- **Ecs**
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the Elastic Compute Service (ECS) instance. Exact match is supported.
	//
	// example:
	//
	// i-bp19ienyt0yax748****
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The status of the host that you want to query. Valid values:
	//
	// 	- **Normal**
	//
	// 	- **Release**
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s ListOperationHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostsRequest) GoString() string {
	return s.String()
}

func (s *ListOperationHostsRequest) SetHostAddress(v string) *ListOperationHostsRequest {
	s.HostAddress = &v
	return s
}

func (s *ListOperationHostsRequest) SetHostName(v string) *ListOperationHostsRequest {
	s.HostName = &v
	return s
}

func (s *ListOperationHostsRequest) SetInstanceId(v string) *ListOperationHostsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOperationHostsRequest) SetOSType(v string) *ListOperationHostsRequest {
	s.OSType = &v
	return s
}

func (s *ListOperationHostsRequest) SetPageNumber(v string) *ListOperationHostsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOperationHostsRequest) SetPageSize(v string) *ListOperationHostsRequest {
	s.PageSize = &v
	return s
}

func (s *ListOperationHostsRequest) SetRegionId(v string) *ListOperationHostsRequest {
	s.RegionId = &v
	return s
}

func (s *ListOperationHostsRequest) SetSource(v string) *ListOperationHostsRequest {
	s.Source = &v
	return s
}

func (s *ListOperationHostsRequest) SetSourceInstanceId(v string) *ListOperationHostsRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *ListOperationHostsRequest) SetSourceInstanceState(v string) *ListOperationHostsRequest {
	s.SourceInstanceState = &v
	return s
}

type ListOperationHostsResponseBody struct {
	// The hosts returned.
	Hosts []*ListOperationHostsResponseBodyHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 4F6C075F-FC86-476E-943B-097BD4E12948
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of hosts returned.
	//
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListOperationHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostsResponseBody) GoString() string {
	return s.String()
}

func (s *ListOperationHostsResponseBody) SetHosts(v []*ListOperationHostsResponseBodyHosts) *ListOperationHostsResponseBody {
	s.Hosts = v
	return s
}

func (s *ListOperationHostsResponseBody) SetRequestId(v string) *ListOperationHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOperationHostsResponseBody) SetTotalCount(v int64) *ListOperationHostsResponseBody {
	s.TotalCount = &v
	return s
}

type ListOperationHostsResponseBodyHosts struct {
	// The address type of the host. Valid values:
	//
	// 	- **Public**
	//
	// 	- **Private**
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The remarks of the host.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The host ID.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The host name.
	//
	// example:
	//
	// host1
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The private IP address of the host.
	//
	// example:
	//
	// 192.168.XX.XX
	HostPrivateAddress *string `json:"HostPrivateAddress,omitempty" xml:"HostPrivateAddress,omitempty"`
	// The public IP address of the host.
	//
	// example:
	//
	// 10.158.XX.XX
	HostPublicAddress *string `json:"HostPublicAddress,omitempty" xml:"HostPublicAddress,omitempty"`
	// The host OS.
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The host type. Valid values:
	//
	// 	- **Local**: on-premises host.
	//
	// 	- **Ecs**: Elastic Compute Service (ECS) instance.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ECS instance ID.
	//
	// example:
	//
	// i-bp19ienyt0yax748****
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	// The host status. Valid values:
	//
	// 	- **Normal**
	//
	// 	- **Release**
	//
	// example:
	//
	// Normal
	SourceInstanceState *string `json:"SourceInstanceState,omitempty" xml:"SourceInstanceState,omitempty"`
}

func (s ListOperationHostsResponseBodyHosts) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostsResponseBodyHosts) GoString() string {
	return s.String()
}

func (s *ListOperationHostsResponseBodyHosts) SetActiveAddressType(v string) *ListOperationHostsResponseBodyHosts {
	s.ActiveAddressType = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetComment(v string) *ListOperationHostsResponseBodyHosts {
	s.Comment = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetHostId(v string) *ListOperationHostsResponseBodyHosts {
	s.HostId = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetHostName(v string) *ListOperationHostsResponseBodyHosts {
	s.HostName = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetHostPrivateAddress(v string) *ListOperationHostsResponseBodyHosts {
	s.HostPrivateAddress = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetHostPublicAddress(v string) *ListOperationHostsResponseBodyHosts {
	s.HostPublicAddress = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetOSType(v string) *ListOperationHostsResponseBodyHosts {
	s.OSType = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetSource(v string) *ListOperationHostsResponseBodyHosts {
	s.Source = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetSourceInstanceId(v string) *ListOperationHostsResponseBodyHosts {
	s.SourceInstanceId = &v
	return s
}

func (s *ListOperationHostsResponseBodyHosts) SetSourceInstanceState(v string) *ListOperationHostsResponseBodyHosts {
	s.SourceInstanceState = &v
	return s
}

type ListOperationHostsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOperationHostsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOperationHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOperationHostsResponse) GoString() string {
	return s.String()
}

func (s *ListOperationHostsResponse) SetHeaders(v map[string]*string) *ListOperationHostsResponse {
	s.Headers = v
	return s
}

func (s *ListOperationHostsResponse) SetStatusCode(v int32) *ListOperationHostsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOperationHostsResponse) SetBody(v *ListOperationHostsResponseBody) *ListOperationHostsResponse {
	s.Body = v
	return s
}

type ListOperationTicketsRequest struct {
	// The IP address of the asset that is contained in the O\\&M application to be reviewed.
	//
	// example:
	//
	// 10.167.XX.XX
	AssetAddress *string `json:"AssetAddress,omitempty" xml:"AssetAddress,omitempty"`
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Maximum value: 1000. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListOperationTicketsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOperationTicketsRequest) GoString() string {
	return s.String()
}

func (s *ListOperationTicketsRequest) SetAssetAddress(v string) *ListOperationTicketsRequest {
	s.AssetAddress = &v
	return s
}

func (s *ListOperationTicketsRequest) SetInstanceId(v string) *ListOperationTicketsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOperationTicketsRequest) SetPageNumber(v string) *ListOperationTicketsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOperationTicketsRequest) SetPageSize(v string) *ListOperationTicketsRequest {
	s.PageSize = &v
	return s
}

func (s *ListOperationTicketsRequest) SetRegionId(v string) *ListOperationTicketsRequest {
	s.RegionId = &v
	return s
}

type ListOperationTicketsResponseBody struct {
	// The O\\&M applications to be reviewed.
	OperationTickets []*ListOperationTicketsResponseBodyOperationTickets `json:"OperationTickets,omitempty" xml:"OperationTickets,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of O\\&M applications to be reviewed.
	//
	// example:
	//
	// 20
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListOperationTicketsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOperationTicketsResponseBody) GoString() string {
	return s.String()
}

func (s *ListOperationTicketsResponseBody) SetOperationTickets(v []*ListOperationTicketsResponseBodyOperationTickets) *ListOperationTicketsResponseBody {
	s.OperationTickets = v
	return s
}

func (s *ListOperationTicketsResponseBody) SetRequestId(v string) *ListOperationTicketsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOperationTicketsResponseBody) SetTotalCount(v int64) *ListOperationTicketsResponseBody {
	s.TotalCount = &v
	return s
}

type ListOperationTicketsResponseBodyOperationTickets struct {
	// The ID of the O\\&M applicant.
	//
	// example:
	//
	// 1
	ApplyUserId *string `json:"ApplyUserId,omitempty" xml:"ApplyUserId,omitempty"`
	// The username of the O\\&M applicant.
	//
	// example:
	//
	// test
	ApplyUsername *string `json:"ApplyUsername,omitempty" xml:"ApplyUsername,omitempty"`
	// The remarks entered when the O\\&M personnel applies for O\\&M permissions.
	//
	// example:
	//
	// Apply for O\\&M
	ApproveComment *string `json:"ApproveComment,omitempty" xml:"ApproveComment,omitempty"`
	// The ID of the asset account.
	//
	// example:
	//
	// 1
	AssetAccountId *string `json:"AssetAccountId,omitempty" xml:"AssetAccountId,omitempty"`
	// The username of the asset account.
	//
	// example:
	//
	// root
	AssetAccountName *string `json:"AssetAccountName,omitempty" xml:"AssetAccountName,omitempty"`
	// The IP address of the asset.
	//
	// example:
	//
	// 10.167.XX.XX
	AssetAddress *string `json:"AssetAddress,omitempty" xml:"AssetAddress,omitempty"`
	// The ID of the asset.
	//
	// example:
	//
	// 2
	AssetId *string `json:"AssetId,omitempty" xml:"AssetId,omitempty"`
	// The name of the asset.
	//
	// example:
	//
	// poros-test
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	// The network domain ID of the asset.
	//
	// example:
	//
	// 2
	AssetNetworkDomainId *string `json:"AssetNetworkDomainId,omitempty" xml:"AssetNetworkDomainId,omitempty"`
	// The operating system of the asset.
	//
	// example:
	//
	// Linux
	AssetOs *string `json:"AssetOs,omitempty" xml:"AssetOs,omitempty"`
	// The name of the asset source to which the asset belongs. Valid values:
	//
	// 	- **Local**: an on-premises host.
	//
	// 	- **Ecs**: an Elastic Compute Service (ECS) instance.
	//
	// 	- **Rds**: an ApsaraDB RDS instance.
	//
	// 	- A third-party asset source.
	//
	// example:
	//
	// Local
	AssetSource *string `json:"AssetSource,omitempty" xml:"AssetSource,omitempty"`
	// The ID of the asset source to which the asset belongs.
	//
	// example:
	//
	// 1
	AssetSourceInstanceId *string `json:"AssetSourceInstanceId,omitempty" xml:"AssetSourceInstanceId,omitempty"`
	// The time when the O\\&M application was submitted. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1669965908
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The maximum number of logons applied by the O\\&M engineer. Valid values:
	//
	// 	- **0**: The number of logons is unlimited. The O\\&M engineer can log on to the specified asset for unlimited times during the validity period.
	//
	// 	- **1**: The O\\&M engineer can log on to the specified asset only once during the validity period.
	//
	// example:
	//
	// 0
	EffectCount *int32 `json:"EffectCount,omitempty" xml:"EffectCount,omitempty"`
	// The end time of the validity period. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1679393152
	EffectEndTime *int32 `json:"EffectEndTime,omitempty" xml:"EffectEndTime,omitempty"`
	// The start time of the validity period. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1685600242
	EffectStartTime *int32 `json:"EffectStartTime,omitempty" xml:"EffectStartTime,omitempty"`
	// The ID of the O\\&M application to be reviewed.
	//
	// example:
	//
	// 1
	OperationTicketId *string `json:"OperationTicketId,omitempty" xml:"OperationTicketId,omitempty"`
	// The O\\&M protocol.
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
	// The status of the review. Valid value:
	//
	// 	- Normal: to be reviewed
	//
	// example:
	//
	// Normal
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListOperationTicketsResponseBodyOperationTickets) String() string {
	return tea.Prettify(s)
}

func (s ListOperationTicketsResponseBodyOperationTickets) GoString() string {
	return s.String()
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetApplyUserId(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.ApplyUserId = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetApplyUsername(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.ApplyUsername = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetApproveComment(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.ApproveComment = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetAccountId(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetAccountId = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetAccountName(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetAccountName = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetAddress(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetAddress = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetId(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetId = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetName(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetName = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetNetworkDomainId(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetNetworkDomainId = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetOs(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetOs = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetSource(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetSource = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetAssetSourceInstanceId(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.AssetSourceInstanceId = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetCreatedTime(v int64) *ListOperationTicketsResponseBodyOperationTickets {
	s.CreatedTime = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetEffectCount(v int32) *ListOperationTicketsResponseBodyOperationTickets {
	s.EffectCount = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetEffectEndTime(v int32) *ListOperationTicketsResponseBodyOperationTickets {
	s.EffectEndTime = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetEffectStartTime(v int32) *ListOperationTicketsResponseBodyOperationTickets {
	s.EffectStartTime = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetOperationTicketId(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.OperationTicketId = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetProtocolName(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.ProtocolName = &v
	return s
}

func (s *ListOperationTicketsResponseBodyOperationTickets) SetState(v string) *ListOperationTicketsResponseBodyOperationTickets {
	s.State = &v
	return s
}

type ListOperationTicketsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOperationTicketsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOperationTicketsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOperationTicketsResponse) GoString() string {
	return s.String()
}

func (s *ListOperationTicketsResponse) SetHeaders(v map[string]*string) *ListOperationTicketsResponse {
	s.Headers = v
	return s
}

func (s *ListOperationTicketsResponse) SetStatusCode(v int32) *ListOperationTicketsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOperationTicketsResponse) SetBody(v *ListOperationTicketsResponseBody) *ListOperationTicketsResponse {
	s.Body = v
	return s
}

type ListPoliciesRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-5yd393wzk08
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the control policy to query. Only exact match is supported.
	//
	// example:
	//
	// 123
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPoliciesRequest) GoString() string {
	return s.String()
}

func (s *ListPoliciesRequest) SetInstanceId(v string) *ListPoliciesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListPoliciesRequest) SetPageNumber(v string) *ListPoliciesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPoliciesRequest) SetPageSize(v string) *ListPoliciesRequest {
	s.PageSize = &v
	return s
}

func (s *ListPoliciesRequest) SetPolicyName(v string) *ListPoliciesRequest {
	s.PolicyName = &v
	return s
}

func (s *ListPoliciesRequest) SetRegionId(v string) *ListPoliciesRequest {
	s.RegionId = &v
	return s
}

type ListPoliciesResponseBody struct {
	// The control policies.
	Policies []*ListPoliciesResponseBodyPolicies `json:"Policies,omitempty" xml:"Policies,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of control policies that are returned.
	//
	// example:
	//
	// 10
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPoliciesResponseBody) SetPolicies(v []*ListPoliciesResponseBodyPolicies) *ListPoliciesResponseBody {
	s.Policies = v
	return s
}

func (s *ListPoliciesResponseBody) SetRequestId(v string) *ListPoliciesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPoliciesResponseBody) SetTotalCount(v int64) *ListPoliciesResponseBody {
	s.TotalCount = &v
	return s
}

type ListPoliciesResponseBodyPolicies struct {
	// The remarks of the control policy.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The control policy ID.
	//
	// example:
	//
	// 2
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The name of the control policy.
	//
	// example:
	//
	// test
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The priority of the control policy. A smaller value indicates a higher priority.
	//
	// example:
	//
	// 1
	Priority *int64 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s ListPoliciesResponseBodyPolicies) String() string {
	return tea.Prettify(s)
}

func (s ListPoliciesResponseBodyPolicies) GoString() string {
	return s.String()
}

func (s *ListPoliciesResponseBodyPolicies) SetComment(v string) *ListPoliciesResponseBodyPolicies {
	s.Comment = &v
	return s
}

func (s *ListPoliciesResponseBodyPolicies) SetPolicyId(v string) *ListPoliciesResponseBodyPolicies {
	s.PolicyId = &v
	return s
}

func (s *ListPoliciesResponseBodyPolicies) SetPolicyName(v string) *ListPoliciesResponseBodyPolicies {
	s.PolicyName = &v
	return s
}

func (s *ListPoliciesResponseBodyPolicies) SetPriority(v int64) *ListPoliciesResponseBodyPolicies {
	s.Priority = &v
	return s
}

type ListPoliciesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPoliciesResponse) GoString() string {
	return s.String()
}

func (s *ListPoliciesResponse) SetHeaders(v map[string]*string) *ListPoliciesResponse {
	s.Headers = v
	return s
}

func (s *ListPoliciesResponse) SetStatusCode(v int32) *ListPoliciesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPoliciesResponse) SetBody(v *ListPoliciesResponseBody) *ListPoliciesResponse {
	s.Body = v
	return s
}

type ListRulesRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-5yd34ol020a
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the authorization rule to query. Only exact match is supported.
	//
	// example:
	//
	// rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The state of the authorization rule to query.
	//
	// 	- **Enabled**
	//
	// 	- **Disabled**
	//
	// example:
	//
	// Enabled
	RuleState *string `json:"RuleState,omitempty" xml:"RuleState,omitempty"`
}

func (s ListRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRulesRequest) GoString() string {
	return s.String()
}

func (s *ListRulesRequest) SetInstanceId(v string) *ListRulesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRulesRequest) SetPageNumber(v string) *ListRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRulesRequest) SetPageSize(v string) *ListRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRulesRequest) SetRegionId(v string) *ListRulesRequest {
	s.RegionId = &v
	return s
}

func (s *ListRulesRequest) SetRuleName(v string) *ListRulesRequest {
	s.RuleName = &v
	return s
}

func (s *ListRulesRequest) SetRuleState(v string) *ListRulesRequest {
	s.RuleState = &v
	return s
}

type ListRulesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The authorization rules that are returned.
	Rules []*ListRulesResponseBodyRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
	// The total number of authorization rules that are returned.
	//
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRulesResponseBody) SetRequestId(v string) *ListRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRulesResponseBody) SetRules(v []*ListRulesResponseBodyRules) *ListRulesResponseBody {
	s.Rules = v
	return s
}

func (s *ListRulesResponseBody) SetTotalCount(v int64) *ListRulesResponseBody {
	s.TotalCount = &v
	return s
}

type ListRulesResponseBodyRules struct {
	// The remarks of the authorization rule.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The end time of the validity period of the authorization rule. The value is a timestamp. Unit: seconds.
	//
	// example:
	//
	// 1709258400
	EffectiveEndTime *int64 `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The start time of the validity period of the authorization rule. The value is a timestamp. Unit: seconds.
	//
	// example:
	//
	// 1685499134
	EffectiveStartTime *int64 `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The authorization rule ID.
	//
	// example:
	//
	// 13
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the authorization rule.
	//
	// example:
	//
	// rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The state of the authorization rule.
	//
	// 	- **Enabled**
	//
	// 	- **Disabled**
	//
	// example:
	//
	// Enabled
	RuleState *string `json:"RuleState,omitempty" xml:"RuleState,omitempty"`
}

func (s ListRulesResponseBodyRules) String() string {
	return tea.Prettify(s)
}

func (s ListRulesResponseBodyRules) GoString() string {
	return s.String()
}

func (s *ListRulesResponseBodyRules) SetComment(v string) *ListRulesResponseBodyRules {
	s.Comment = &v
	return s
}

func (s *ListRulesResponseBodyRules) SetEffectiveEndTime(v int64) *ListRulesResponseBodyRules {
	s.EffectiveEndTime = &v
	return s
}

func (s *ListRulesResponseBodyRules) SetEffectiveStartTime(v int64) *ListRulesResponseBodyRules {
	s.EffectiveStartTime = &v
	return s
}

func (s *ListRulesResponseBodyRules) SetRuleId(v string) *ListRulesResponseBodyRules {
	s.RuleId = &v
	return s
}

func (s *ListRulesResponseBodyRules) SetRuleName(v string) *ListRulesResponseBodyRules {
	s.RuleName = &v
	return s
}

func (s *ListRulesResponseBodyRules) SetRuleState(v string) *ListRulesResponseBodyRules {
	s.RuleState = &v
	return s
}

type ListRulesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRulesResponse) GoString() string {
	return s.String()
}

func (s *ListRulesResponse) SetHeaders(v map[string]*string) *ListRulesResponse {
	s.Headers = v
	return s
}

func (s *ListRulesResponse) SetStatusCode(v int32) *ListRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRulesResponse) SetBody(v *ListRulesResponseBody) *ListRulesResponse {
	s.Body = v
	return s
}

type ListTagKeysRequest struct {
	// The number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The type of the resource.
	//
	// Set the value to INSTANCE, which indicates that the resource is a bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ListTagKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysRequest) GoString() string {
	return s.String()
}

func (s *ListTagKeysRequest) SetPageNumber(v int32) *ListTagKeysRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTagKeysRequest) SetPageSize(v int32) *ListTagKeysRequest {
	s.PageSize = &v
	return s
}

func (s *ListTagKeysRequest) SetRegionId(v string) *ListTagKeysRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagKeysRequest) SetResourceGroupId(v string) *ListTagKeysRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListTagKeysRequest) SetResourceType(v string) *ListTagKeysRequest {
	s.ResourceType = &v
	return s
}

type ListTagKeysResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 50177258-E817-4D2F-A5C6-3FD7BC4806E3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of tags.
	TagKeys []*ListTagKeysResponseBodyTagKeys `json:"TagKeys,omitempty" xml:"TagKeys,omitempty" type:"Repeated"`
	// The total number of tags returned.
	//
	// example:
	//
	// 5
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTagKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagKeysResponseBody) SetPageNumber(v int32) *ListTagKeysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListTagKeysResponseBody) SetPageSize(v int32) *ListTagKeysResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListTagKeysResponseBody) SetRequestId(v string) *ListTagKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagKeysResponseBody) SetTagKeys(v []*ListTagKeysResponseBodyTagKeys) *ListTagKeysResponseBody {
	s.TagKeys = v
	return s
}

func (s *ListTagKeysResponseBody) SetTotalCount(v int32) *ListTagKeysResponseBody {
	s.TotalCount = &v
	return s
}

type ListTagKeysResponseBodyTagKeys struct {
	// The total number of tag keys.
	//
	// example:
	//
	// 2
	TagCount *int32 `json:"TagCount,omitempty" xml:"TagCount,omitempty"`
	// The name of the tag key.
	//
	// example:
	//
	// key2
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s ListTagKeysResponseBodyTagKeys) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysResponseBodyTagKeys) GoString() string {
	return s.String()
}

func (s *ListTagKeysResponseBodyTagKeys) SetTagCount(v int32) *ListTagKeysResponseBodyTagKeys {
	s.TagCount = &v
	return s
}

func (s *ListTagKeysResponseBodyTagKeys) SetTagKey(v string) *ListTagKeysResponseBodyTagKeys {
	s.TagKey = &v
	return s
}

type ListTagKeysResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysResponse) GoString() string {
	return s.String()
}

func (s *ListTagKeysResponse) SetHeaders(v map[string]*string) *ListTagKeysResponse {
	s.Headers = v
	return s
}

func (s *ListTagKeysResponse) SetStatusCode(v int32) *ListTagKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagKeysResponse) SetBody(v *ListTagKeysResponseBody) *ListTagKeysResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	// The token for starting the next query.
	//
	// example:
	//
	// 6EwFJmScBXFFC3nf.9Rq7HzA7APx7GWLbkZbjHrR6Pq39w
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID of the Bastionhost instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The IDs of instances.
	//
	// example:
	//
	// bastionhost-cn-78v1gcxxxxx
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Set the value to INSTANCE, which indicates that the resource is a Bastionhost instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags.
	Tag []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceGroupId(v string) *ListTagResourcesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	// The key of tag N.
	//
	// Valid values of N: 1 to 20.
	//
	// example:
	//
	// test
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// Valid values of N: 1 to 20.
	//
	// example:
	//
	// testapi
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	// The token for starting the next query.
	//
	// example:
	//
	// 4ieSWJCwxvW3dk3wF.BqkrZmP72nWu5zJ5NWydMqyEs****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 134D6018-EB68-4B7C-BABF-4DB09023E014
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about Bastionhost instances and the tags bound to Bastionhost instances.
	//
	// The following information is included: instance ID, resource type, tag key, and tag value.
	TagResources []*ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v []*ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	// The ID of the instance.
	//
	// example:
	//
	// bastionhost-cn-78v1gc****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource.
	//
	// The returned value is INSTANCE, which indicates that the resource is a Bastionhost instance.
	//
	// example:
	//
	// INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The key of the tag.
	//
	// example:
	//
	// test
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// testapi
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceId(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceType(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagKey(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagValue(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListUserGroupsRequest struct {
	// The ID of the bastion host on which you want to query user groups.
	//
	//  >You can call the [DescribeInstances ](https://help.aliyun.com/document_detail/462953.html)operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host on which you want to query user groups.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/462924.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the user group that you want to query. Only exact match is supported.
	//
	// example:
	//
	// TestGroup01
	UserGroupName *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s ListUserGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListUserGroupsRequest) SetInstanceId(v string) *ListUserGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListUserGroupsRequest) SetPageNumber(v string) *ListUserGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUserGroupsRequest) SetPageSize(v string) *ListUserGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListUserGroupsRequest) SetRegionId(v string) *ListUserGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *ListUserGroupsRequest) SetUserGroupName(v string) *ListUserGroupsRequest {
	s.UserGroupName = &v
	return s
}

type ListUserGroupsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of user groups returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The user groups returned.
	UserGroups []*ListUserGroupsResponseBodyUserGroups `json:"UserGroups,omitempty" xml:"UserGroups,omitempty" type:"Repeated"`
}

func (s ListUserGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserGroupsResponseBody) SetRequestId(v string) *ListUserGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserGroupsResponseBody) SetTotalCount(v int32) *ListUserGroupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListUserGroupsResponseBody) SetUserGroups(v []*ListUserGroupsResponseBodyUserGroups) *ListUserGroupsResponseBody {
	s.UserGroups = v
	return s
}

type ListUserGroupsResponseBodyUserGroups struct {
	// The description of the user group.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The number of users in the user group.
	//
	// example:
	//
	// 5
	MemberCount *int32 `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
	// The ID of the user group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The name of the user group.
	//
	// example:
	//
	// TestGroup01
	UserGroupName *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s ListUserGroupsResponseBodyUserGroups) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsResponseBodyUserGroups) GoString() string {
	return s.String()
}

func (s *ListUserGroupsResponseBodyUserGroups) SetComment(v string) *ListUserGroupsResponseBodyUserGroups {
	s.Comment = &v
	return s
}

func (s *ListUserGroupsResponseBodyUserGroups) SetMemberCount(v int32) *ListUserGroupsResponseBodyUserGroups {
	s.MemberCount = &v
	return s
}

func (s *ListUserGroupsResponseBodyUserGroups) SetUserGroupId(v string) *ListUserGroupsResponseBodyUserGroups {
	s.UserGroupId = &v
	return s
}

func (s *ListUserGroupsResponseBodyUserGroups) SetUserGroupName(v string) *ListUserGroupsResponseBodyUserGroups {
	s.UserGroupName = &v
	return s
}

type ListUserGroupsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUserGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUserGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListUserGroupsResponse) SetHeaders(v map[string]*string) *ListUserGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListUserGroupsResponse) SetStatusCode(v int32) *ListUserGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUserGroupsResponse) SetBody(v *ListUserGroupsResponseBody) *ListUserGroupsResponse {
	s.Body = v
	return s
}

type ListUserPublicKeysRequest struct {
	// The ID of the bastion host on which you want to query all public keys of the user.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.\\
	//
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 50
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host on which you want to query all public keys of the user.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user whose public keys you want to query.
	//
	// example:
	//
	// 2
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListUserPublicKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserPublicKeysRequest) GoString() string {
	return s.String()
}

func (s *ListUserPublicKeysRequest) SetInstanceId(v string) *ListUserPublicKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *ListUserPublicKeysRequest) SetPageNumber(v string) *ListUserPublicKeysRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUserPublicKeysRequest) SetPageSize(v string) *ListUserPublicKeysRequest {
	s.PageSize = &v
	return s
}

func (s *ListUserPublicKeysRequest) SetRegionId(v string) *ListUserPublicKeysRequest {
	s.RegionId = &v
	return s
}

func (s *ListUserPublicKeysRequest) SetUserId(v string) *ListUserPublicKeysRequest {
	s.UserId = &v
	return s
}

type ListUserPublicKeysResponseBody struct {
	// An array that consists of the public keys of the user.
	PublicKeys []*ListUserPublicKeysResponseBodyPublicKeys `json:"PublicKeys,omitempty" xml:"PublicKeys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of public keys.
	//
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUserPublicKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserPublicKeysResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserPublicKeysResponseBody) SetPublicKeys(v []*ListUserPublicKeysResponseBodyPublicKeys) *ListUserPublicKeysResponseBody {
	s.PublicKeys = v
	return s
}

func (s *ListUserPublicKeysResponseBody) SetRequestId(v string) *ListUserPublicKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserPublicKeysResponseBody) SetTotalCount(v int64) *ListUserPublicKeysResponseBody {
	s.TotalCount = &v
	return s
}

type ListUserPublicKeysResponseBodyPublicKeys struct {
	// The description of the public key.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The fingerprint of the public key.
	//
	// example:
	//
	// d8:7d:b6:27:70:2d:07:fb:c6:b6:66:0a:86:7b:0f:9a
	FingerPrint *string `json:"FingerPrint,omitempty" xml:"FingerPrint,omitempty"`
	// The ID of the public key.
	//
	// example:
	//
	// 1
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
	// The name of the public key.
	//
	// example:
	//
	// Keyname
	PublicKeyName *string `json:"PublicKeyName,omitempty" xml:"PublicKeyName,omitempty"`
	// The ID of the user to which the public key belongs.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListUserPublicKeysResponseBodyPublicKeys) String() string {
	return tea.Prettify(s)
}

func (s ListUserPublicKeysResponseBodyPublicKeys) GoString() string {
	return s.String()
}

func (s *ListUserPublicKeysResponseBodyPublicKeys) SetComment(v string) *ListUserPublicKeysResponseBodyPublicKeys {
	s.Comment = &v
	return s
}

func (s *ListUserPublicKeysResponseBodyPublicKeys) SetFingerPrint(v string) *ListUserPublicKeysResponseBodyPublicKeys {
	s.FingerPrint = &v
	return s
}

func (s *ListUserPublicKeysResponseBodyPublicKeys) SetPublicKeyId(v string) *ListUserPublicKeysResponseBodyPublicKeys {
	s.PublicKeyId = &v
	return s
}

func (s *ListUserPublicKeysResponseBodyPublicKeys) SetPublicKeyName(v string) *ListUserPublicKeysResponseBodyPublicKeys {
	s.PublicKeyName = &v
	return s
}

func (s *ListUserPublicKeysResponseBodyPublicKeys) SetUserId(v string) *ListUserPublicKeysResponseBodyPublicKeys {
	s.UserId = &v
	return s
}

type ListUserPublicKeysResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUserPublicKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUserPublicKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserPublicKeysResponse) GoString() string {
	return s.String()
}

func (s *ListUserPublicKeysResponse) SetHeaders(v map[string]*string) *ListUserPublicKeysResponse {
	s.Headers = v
	return s
}

func (s *ListUserPublicKeysResponse) SetStatusCode(v int32) *ListUserPublicKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUserPublicKeysResponse) SetBody(v *ListUserPublicKeysResponseBody) *ListUserPublicKeysResponse {
	s.Body = v
	return s
}

type ListUsersRequest struct {
	// The display name of the user that you want to query. Only exact match is supported.
	//
	// example:
	//
	// abc
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The ID of the bastion host whose users you want to query.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The mobile phone number of the user that you want to query. Only exact match is supported.
	//
	// example:
	//
	// 1359999****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the bastion host whose users you want to query.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the user that you want to query. Valid values:
	//
	// 	- **Local**: a local user.
	//
	// 	- **Ram**: a Resource Access Management (RAM) user.
	//
	// 	- **AD**: an Active Directory (AD)-authenticated user.
	//
	// 	- **LDAP**: a Lightweight Directory Access Protocol (LDAP)-authenticated user.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The unique ID of the user that you want to query. Only exact match is supported.
	//
	// >  This parameter uniquely identifies a RAM user of the bastion host. This parameter is valid if **Source*	- is set to **Ram**. You can call the [ListUsers](https://help.aliyun.com/document_detail/28684.html) operation in RAM to obtain the unique ID of the user from the **UserId*	- response parameter.
	//
	// example:
	//
	// 122748924538****
	SourceUserId *string `json:"SourceUserId,omitempty" xml:"SourceUserId,omitempty"`
	// The ID of the user group to which the user you want to query belongs.
	//
	// >  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the user group ID.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The logon name of the user that you want to query. Only exact match is supported.
	//
	// example:
	//
	// abc
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The state of the user that you want to query. Valid values:
	//
	// 	- **Normal**: The user is in normal state.
	//
	// 	- **Frozen**: The user is locked.
	//
	// 	- **Expired**: The user has expired.
	//
	// example:
	//
	// Normal
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
}

func (s ListUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUsersRequest) GoString() string {
	return s.String()
}

func (s *ListUsersRequest) SetDisplayName(v string) *ListUsersRequest {
	s.DisplayName = &v
	return s
}

func (s *ListUsersRequest) SetInstanceId(v string) *ListUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListUsersRequest) SetMobile(v string) *ListUsersRequest {
	s.Mobile = &v
	return s
}

func (s *ListUsersRequest) SetPageNumber(v string) *ListUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUsersRequest) SetPageSize(v string) *ListUsersRequest {
	s.PageSize = &v
	return s
}

func (s *ListUsersRequest) SetRegionId(v string) *ListUsersRequest {
	s.RegionId = &v
	return s
}

func (s *ListUsersRequest) SetSource(v string) *ListUsersRequest {
	s.Source = &v
	return s
}

func (s *ListUsersRequest) SetSourceUserId(v string) *ListUsersRequest {
	s.SourceUserId = &v
	return s
}

func (s *ListUsersRequest) SetUserGroupId(v string) *ListUsersRequest {
	s.UserGroupId = &v
	return s
}

func (s *ListUsersRequest) SetUserName(v string) *ListUsersRequest {
	s.UserName = &v
	return s
}

func (s *ListUsersRequest) SetUserState(v string) *ListUsersRequest {
	s.UserState = &v
	return s
}

type ListUsersResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of users returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The users returned.
	Users []*ListUsersResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Repeated"`
}

func (s ListUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBody) SetRequestId(v string) *ListUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUsersResponseBody) SetTotalCount(v int32) *ListUsersResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListUsersResponseBody) SetUsers(v []*ListUsersResponseBodyUsers) *ListUsersResponseBody {
	s.Users = v
	return s
}

type ListUsersResponseBodyUsers struct {
	// The remarks of the user.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The display name of the user.
	//
	// example:
	//
	// Bob
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The end time of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1672502400
	EffectiveEndTime *int64 `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The start time of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1669630029
	EffectiveStartTime *int64 `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The email address of the user.
	//
	// example:
	//
	// 1099**@qq.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// This parameter is required if LanguageStatus is set to Custom. Valid values:
	//
	// 	- **zh-cn**: simplified Chinese.
	//
	// 	- **en**: English.
	//
	// example:
	//
	// en
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// Indicates whether notifications are sent in the language specified in the global settings or a custom language.
	//
	// 	- **Global**
	//
	// 	- **Custom**
	//
	// example:
	//
	// Custom
	LanguageStatus *string `json:"LanguageStatus,omitempty" xml:"LanguageStatus,omitempty"`
	// The mobile phone number of the user.
	//
	// example:
	//
	// 1359999****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// The location where the mobile phone number of the user is registered. Valid values:
	//
	// 	- **CN**: the Chinese mainland, whose international dialing code is +86.
	//
	// 	- **HK**: Hong Kong (China), whose international dialing code is +852.
	//
	// 	- **MO**: Macao (China), whose international dialing code is +853.
	//
	// 	- **TW**: Taiwan (China), whose international dialing code is +886.
	//
	// 	- **RU**: Russia, whose international dialing code is +7.
	//
	// 	- **SG**: Singapore, whose international dialing code is +65.
	//
	// 	- **MY**: Malaysia, whose international dialing code is +60.
	//
	// 	- **ID**: Indonesia, whose international dialing code is +62.
	//
	// 	- **DE**: Germany, whose international dialing code is +49.
	//
	// 	- **AU**: Australia, whose international dialing code is +61.
	//
	// 	- **US**: US, whose international dialing code is +1.
	//
	// 	- **AE**: United Arab Emirates, whose international dialing code is +971.
	//
	// 	- **JP:*	- Japan, whose international dialing code is +81.
	//
	// 	- **GB**: UK, whose international dialing code is +44.
	//
	// 	- **IN**: India, whose international dialing code is +91.
	//
	// 	- **KR**: Republic of Korea, whose international dialing code is +82.
	//
	// 	- **PH**: Philippines, whose international dialing code is +63.
	//
	// 	- **CH**: Switzerland, whose international dialing code is +41.
	//
	// 	- **SE**: Sweden, whose international dialing code is +46.
	//
	// example:
	//
	// CN
	MobileCountryCode *string `json:"MobileCountryCode,omitempty" xml:"MobileCountryCode,omitempty"`
	// Indicates whether password reset is required upon the next logon. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	NeedResetPassword *bool `json:"NeedResetPassword,omitempty" xml:"NeedResetPassword,omitempty"`
	// The type of the user. Valid values:
	//
	// 	- **Local**: a local user.
	//
	// 	- **Ram**: a RAM user.
	//
	// 	- **AD**: an AD-authenticated user.
	//
	// 	- **LDAP**: an LDAP-authenticated user.
	//
	// example:
	//
	// Local
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The unique ID of the user.
	//
	// >  This parameter uniquely identifies a RAM user of the bastion host. A value is returned for this parameter if **Source*	- is set to **Ram**. No value is returned for this parameter if **Source*	- is set to **Local**.
	//
	// example:
	//
	// 122748924538****
	SourceUserId *string `json:"SourceUserId,omitempty" xml:"SourceUserId,omitempty"`
	// An array of the enabled two-factor authentication methods.
	TwoFactorMethods []*string `json:"TwoFactorMethods,omitempty" xml:"TwoFactorMethods,omitempty" type:"Repeated"`
	// Indicates whether two-factor authentication is enabled for the user. Valid values:
	//
	// 	- **Global**: The global setting applies.
	//
	// 	- **Disable**: Two-factor authentication is disabled.
	//
	// 	- **Enable**: Two-factor authentication is enabled. The user-specific setting for the authentication method applies.
	//
	// example:
	//
	// Enable
	TwoFactorStatus *string `json:"TwoFactorStatus,omitempty" xml:"TwoFactorStatus,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The logon name of the user.
	//
	// example:
	//
	// abc_def
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// An array that lists the states of users.
	UserState []*string `json:"UserState,omitempty" xml:"UserState,omitempty" type:"Repeated"`
}

func (s ListUsersResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsers) SetComment(v string) *ListUsersResponseBodyUsers {
	s.Comment = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetDisplayName(v string) *ListUsersResponseBodyUsers {
	s.DisplayName = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetEffectiveEndTime(v int64) *ListUsersResponseBodyUsers {
	s.EffectiveEndTime = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetEffectiveStartTime(v int64) *ListUsersResponseBodyUsers {
	s.EffectiveStartTime = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetEmail(v string) *ListUsersResponseBodyUsers {
	s.Email = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetLanguage(v string) *ListUsersResponseBodyUsers {
	s.Language = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetLanguageStatus(v string) *ListUsersResponseBodyUsers {
	s.LanguageStatus = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetMobile(v string) *ListUsersResponseBodyUsers {
	s.Mobile = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetMobileCountryCode(v string) *ListUsersResponseBodyUsers {
	s.MobileCountryCode = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetNeedResetPassword(v bool) *ListUsersResponseBodyUsers {
	s.NeedResetPassword = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetSource(v string) *ListUsersResponseBodyUsers {
	s.Source = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetSourceUserId(v string) *ListUsersResponseBodyUsers {
	s.SourceUserId = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetTwoFactorMethods(v []*string) *ListUsersResponseBodyUsers {
	s.TwoFactorMethods = v
	return s
}

func (s *ListUsersResponseBodyUsers) SetTwoFactorStatus(v string) *ListUsersResponseBodyUsers {
	s.TwoFactorStatus = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetUserId(v string) *ListUsersResponseBodyUsers {
	s.UserId = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetUserName(v string) *ListUsersResponseBodyUsers {
	s.UserName = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetUserState(v []*string) *ListUsersResponseBodyUsers {
	s.UserState = v
	return s
}

type ListUsersResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponse) GoString() string {
	return s.String()
}

func (s *ListUsersResponse) SetHeaders(v map[string]*string) *ListUsersResponse {
	s.Headers = v
	return s
}

func (s *ListUsersResponse) SetStatusCode(v int32) *ListUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUsersResponse) SetBody(v *ListUsersResponseBody) *ListUsersResponse {
	s.Body = v
	return s
}

type LockUsersRequest struct {
	// The ID of the bastion host to which the users to be locked belong.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host to which the users to be locked belong.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user to be locked. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2","3"]
	UserIds *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s LockUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s LockUsersRequest) GoString() string {
	return s.String()
}

func (s *LockUsersRequest) SetInstanceId(v string) *LockUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *LockUsersRequest) SetRegionId(v string) *LockUsersRequest {
	s.RegionId = &v
	return s
}

func (s *LockUsersRequest) SetUserIds(v string) *LockUsersRequest {
	s.UserIds = &v
	return s
}

type LockUsersResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*LockUsersResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s LockUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LockUsersResponseBody) GoString() string {
	return s.String()
}

func (s *LockUsersResponseBody) SetRequestId(v string) *LockUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *LockUsersResponseBody) SetResults(v []*LockUsersResponseBodyResults) *LockUsersResponseBody {
	s.Results = v
	return s
}

type LockUsersResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// >Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// >Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s LockUsersResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s LockUsersResponseBodyResults) GoString() string {
	return s.String()
}

func (s *LockUsersResponseBodyResults) SetCode(v string) *LockUsersResponseBodyResults {
	s.Code = &v
	return s
}

func (s *LockUsersResponseBodyResults) SetMessage(v string) *LockUsersResponseBodyResults {
	s.Message = &v
	return s
}

func (s *LockUsersResponseBodyResults) SetUserId(v string) *LockUsersResponseBodyResults {
	s.UserId = &v
	return s
}

type LockUsersResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LockUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LockUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s LockUsersResponse) GoString() string {
	return s.String()
}

func (s *LockUsersResponse) SetHeaders(v map[string]*string) *LockUsersResponse {
	s.Headers = v
	return s
}

func (s *LockUsersResponse) SetStatusCode(v int32) *LockUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *LockUsersResponse) SetBody(v *LockUsersResponseBody) *LockUsersResponse {
	s.Body = v
	return s
}

type ModifyDatabaseRequest struct {
	// The new address type of the database. Valid values:
	//
	// 	- **Public**
	//
	// 	- **Private**
	//
	// example:
	//
	// Public
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The new remarks of the database.
	//
	// example:
	//
	// tttttttt
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the database to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// 11
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The new name of the database.
	//
	// example:
	//
	// pgsql
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The new port of the database.
	//
	// example:
	//
	// 5433
	DatabasePort *string `json:"DatabasePort,omitempty" xml:"DatabasePort,omitempty"`
	// The new internal address of the database. Specify an IPv4 address or a domain name.
	//
	// example:
	//
	// pc-bp169******
	DatabasePrivateAddress *string `json:"DatabasePrivateAddress,omitempty" xml:"DatabasePrivateAddress,omitempty"`
	// The new public address of the database. Specify an IPv4 address or a domain name.
	//
	// example:
	//
	// pgm-uf6c******
	DatabasePublicAddress *string `json:"DatabasePublicAddress,omitempty" xml:"DatabasePublicAddress,omitempty"`
	// The ID of the bastion host that manages the database to modify.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-72137xe5n01
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the new network domain for the database.
	//
	// >  You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.
	//
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The region ID of the bastion host that manages the database to modify.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the ApsaraDB for RDS instance or PolarDB cluster to modify.
	//
	// > This parameter is required if **Source*	- is set to **Rds*	- or **PolarDB**.
	//
	// example:
	//
	// i-wz99nexqd62z3bvuvpz5
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
}

func (s ModifyDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseRequest) SetActiveAddressType(v string) *ModifyDatabaseRequest {
	s.ActiveAddressType = &v
	return s
}

func (s *ModifyDatabaseRequest) SetComment(v string) *ModifyDatabaseRequest {
	s.Comment = &v
	return s
}

func (s *ModifyDatabaseRequest) SetDatabaseId(v string) *ModifyDatabaseRequest {
	s.DatabaseId = &v
	return s
}

func (s *ModifyDatabaseRequest) SetDatabaseName(v string) *ModifyDatabaseRequest {
	s.DatabaseName = &v
	return s
}

func (s *ModifyDatabaseRequest) SetDatabasePort(v string) *ModifyDatabaseRequest {
	s.DatabasePort = &v
	return s
}

func (s *ModifyDatabaseRequest) SetDatabasePrivateAddress(v string) *ModifyDatabaseRequest {
	s.DatabasePrivateAddress = &v
	return s
}

func (s *ModifyDatabaseRequest) SetDatabasePublicAddress(v string) *ModifyDatabaseRequest {
	s.DatabasePublicAddress = &v
	return s
}

func (s *ModifyDatabaseRequest) SetInstanceId(v string) *ModifyDatabaseRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDatabaseRequest) SetNetworkDomainId(v string) *ModifyDatabaseRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *ModifyDatabaseRequest) SetRegionId(v string) *ModifyDatabaseRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDatabaseRequest) SetSourceInstanceId(v string) *ModifyDatabaseRequest {
	s.SourceInstanceId = &v
	return s
}

type ModifyDatabaseResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 162088A7-7D47-56A3-9D04-93DE7B6DBE1C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseResponseBody) SetRequestId(v string) *ModifyDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDatabaseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseResponse) SetHeaders(v map[string]*string) *ModifyDatabaseResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatabaseResponse) SetStatusCode(v int32) *ModifyDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatabaseResponse) SetBody(v *ModifyDatabaseResponseBody) *ModifyDatabaseResponse {
	s.Body = v
	return s
}

type ModifyDatabaseAccountRequest struct {
	// The ID of the database account to modify.
	//
	// >  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	DatabaseAccountId *string `json:"DatabaseAccountId,omitempty" xml:"DatabaseAccountId,omitempty"`
	// The new username of the database account. The username can be up to 128 characters in length.
	//
	// example:
	//
	// aaa
	DatabaseAccountName *string `json:"DatabaseAccountName,omitempty" xml:"DatabaseAccountName,omitempty"`
	// The new name of the database. This parameter is required if the database engine is PostgreSQL or Oracle.
	//
	// example:
	//
	// orcl
	DatabaseSchema *string `json:"DatabaseSchema,omitempty" xml:"DatabaseSchema,omitempty"`
	// The ID of the bastion host that manages the database account to modify.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-zpr2zyqx603
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The new password of the database account.
	//
	// example:
	//
	// 14SZ!******
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID of the bastion host that manages the database account to modify.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseAccountRequest) SetDatabaseAccountId(v string) *ModifyDatabaseAccountRequest {
	s.DatabaseAccountId = &v
	return s
}

func (s *ModifyDatabaseAccountRequest) SetDatabaseAccountName(v string) *ModifyDatabaseAccountRequest {
	s.DatabaseAccountName = &v
	return s
}

func (s *ModifyDatabaseAccountRequest) SetDatabaseSchema(v string) *ModifyDatabaseAccountRequest {
	s.DatabaseSchema = &v
	return s
}

func (s *ModifyDatabaseAccountRequest) SetInstanceId(v string) *ModifyDatabaseAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDatabaseAccountRequest) SetPassword(v string) *ModifyDatabaseAccountRequest {
	s.Password = &v
	return s
}

func (s *ModifyDatabaseAccountRequest) SetRegionId(v string) *ModifyDatabaseAccountRequest {
	s.RegionId = &v
	return s
}

type ModifyDatabaseAccountResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 850FA4B4-5BD2-5269-903E-3B7E07E6C975
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatabaseAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseAccountResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseAccountResponseBody) SetRequestId(v string) *ModifyDatabaseAccountResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDatabaseAccountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatabaseAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseAccountResponse) SetHeaders(v map[string]*string) *ModifyDatabaseAccountResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatabaseAccountResponse) SetStatusCode(v int32) *ModifyDatabaseAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatabaseAccountResponse) SetBody(v *ModifyDatabaseAccountResponseBody) *ModifyDatabaseAccountResponse {
	s.Body = v
	return s
}

type ModifyHostRequest struct {
	// The new description of the host. The description can be up to 500 characters in length.
	//
	// example:
	//
	// Host for test.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the host.
	//
	// > You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The new name of the host. The name can be up to 128 characters.
	//
	// example:
	//
	// TestHost
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The new internal endpoint of the host. You can set this parameter to a domain name or an IP address.
	//
	// example:
	//
	// 193.168.XX.XX
	HostPrivateAddress *string `json:"HostPrivateAddress,omitempty" xml:"HostPrivateAddress,omitempty"`
	// The new public endpoint of the host. You can set this parameter to a domain name or an IP address.
	//
	// example:
	//
	// 200.1.XX.XX
	HostPublicAddress *string `json:"HostPublicAddress,omitempty" xml:"HostPublicAddress,omitempty"`
	// The ID of the bastion host on which you want to modify the information about the host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the new network domain to which the host belongs.
	//
	// > You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.
	//
	// example:
	//
	// 1
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The new operating system of the host. Valid values:
	//
	// 	- **Linux**
	//
	// 	- **Windows**
	//
	// example:
	//
	// Linux
	OSType  *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	PrefKex *string `json:"PrefKex,omitempty" xml:"PrefKex,omitempty"`
	// The region ID of the bastion host on which you want to modify the information about the host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostRequest) SetComment(v string) *ModifyHostRequest {
	s.Comment = &v
	return s
}

func (s *ModifyHostRequest) SetHostId(v string) *ModifyHostRequest {
	s.HostId = &v
	return s
}

func (s *ModifyHostRequest) SetHostName(v string) *ModifyHostRequest {
	s.HostName = &v
	return s
}

func (s *ModifyHostRequest) SetHostPrivateAddress(v string) *ModifyHostRequest {
	s.HostPrivateAddress = &v
	return s
}

func (s *ModifyHostRequest) SetHostPublicAddress(v string) *ModifyHostRequest {
	s.HostPublicAddress = &v
	return s
}

func (s *ModifyHostRequest) SetInstanceId(v string) *ModifyHostRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyHostRequest) SetNetworkDomainId(v string) *ModifyHostRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *ModifyHostRequest) SetOSType(v string) *ModifyHostRequest {
	s.OSType = &v
	return s
}

func (s *ModifyHostRequest) SetPrefKex(v string) *ModifyHostRequest {
	s.PrefKex = &v
	return s
}

func (s *ModifyHostRequest) SetRegionId(v string) *ModifyHostRequest {
	s.RegionId = &v
	return s
}

type ModifyHostResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostResponseBody) SetRequestId(v string) *ModifyHostResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHostResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostResponse) SetHeaders(v map[string]*string) *ModifyHostResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostResponse) SetStatusCode(v int32) *ModifyHostResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostResponse) SetBody(v *ModifyHostResponseBody) *ModifyHostResponse {
	s.Body = v
	return s
}

type ModifyHostAccountRequest struct {
	// The ID of the host account whose information you want to modify.
	//
	// > You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The new name of the host account. The name can be up to 128 characters in length.
	//
	// example:
	//
	// abc
	HostAccountName *string `json:"HostAccountName,omitempty" xml:"HostAccountName,omitempty"`
	// The ID of the shared key that is associated with the host.
	//
	// >  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.
	//
	// example:
	//
	// 1
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The ID of the bastion host in which you want to modify the information about the host account.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The passphrase for the new private key of the host account.
	//
	// >  This parameter is valid only if the protocol used by the host is SSH. You do not need to configure this parameter if the protocol used by the host is Remote Desktop Protocol (RDP).
	//
	// example:
	//
	// ****
	PassPhrase *string `json:"PassPhrase,omitempty" xml:"PassPhrase,omitempty"`
	// The new password of the host account.
	//
	// example:
	//
	// ****
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The new private key of the host account. Specify a Base64-encoded string.
	//
	// >  This parameter takes effect only if the protocol used by the host is SSH. You do not need to configure this parameter if the protocol used by the host is Remote Desktop Protocol (RDP). You can call the [GetHostAccount](https://help.aliyun.com/document_detail/204391.html) operation to query the protocol used by the host. You can configure a password and a private key for the host account at the same time. If both a password and a private key are configured for the host account, Bastionhost preferentially uses the private key for logon.
	//
	// example:
	//
	// ****
	PrivateKey *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	// The region ID of the bastion host in which you want to query the details of the host account.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAccountRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostAccountRequest) SetHostAccountId(v string) *ModifyHostAccountRequest {
	s.HostAccountId = &v
	return s
}

func (s *ModifyHostAccountRequest) SetHostAccountName(v string) *ModifyHostAccountRequest {
	s.HostAccountName = &v
	return s
}

func (s *ModifyHostAccountRequest) SetHostShareKeyId(v string) *ModifyHostAccountRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *ModifyHostAccountRequest) SetInstanceId(v string) *ModifyHostAccountRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyHostAccountRequest) SetPassPhrase(v string) *ModifyHostAccountRequest {
	s.PassPhrase = &v
	return s
}

func (s *ModifyHostAccountRequest) SetPassword(v string) *ModifyHostAccountRequest {
	s.Password = &v
	return s
}

func (s *ModifyHostAccountRequest) SetPrivateKey(v string) *ModifyHostAccountRequest {
	s.PrivateKey = &v
	return s
}

func (s *ModifyHostAccountRequest) SetRegionId(v string) *ModifyHostAccountRequest {
	s.RegionId = &v
	return s
}

type ModifyHostAccountResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHostAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAccountResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostAccountResponseBody) SetRequestId(v string) *ModifyHostAccountResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHostAccountResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAccountResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostAccountResponse) SetHeaders(v map[string]*string) *ModifyHostAccountResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostAccountResponse) SetStatusCode(v int32) *ModifyHostAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostAccountResponse) SetBody(v *ModifyHostAccountResponseBody) *ModifyHostAccountResponse {
	s.Body = v
	return s
}

type ModifyHostGroupRequest struct {
	// The new remarks of the asset group. The remarks can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the asset group that you want to modify.
	//
	// >  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The new name of the asset group. The name can be up to 128 characters in length.
	//
	// example:
	//
	// Group01
	HostGroupName *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	// The ID of the bastion host whose asset group you want to modify.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host whose asset group you want to modify.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostGroupRequest) SetComment(v string) *ModifyHostGroupRequest {
	s.Comment = &v
	return s
}

func (s *ModifyHostGroupRequest) SetHostGroupId(v string) *ModifyHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ModifyHostGroupRequest) SetHostGroupName(v string) *ModifyHostGroupRequest {
	s.HostGroupName = &v
	return s
}

func (s *ModifyHostGroupRequest) SetInstanceId(v string) *ModifyHostGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyHostGroupRequest) SetRegionId(v string) *ModifyHostGroupRequest {
	s.RegionId = &v
	return s
}

type ModifyHostGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostGroupResponseBody) SetRequestId(v string) *ModifyHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHostGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostGroupResponse) SetHeaders(v map[string]*string) *ModifyHostGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostGroupResponse) SetStatusCode(v int32) *ModifyHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostGroupResponse) SetBody(v *ModifyHostGroupResponseBody) *ModifyHostGroupResponse {
	s.Body = v
	return s
}

type ModifyHostShareKeyRequest struct {
	// The ID of the shared key whose information you want to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10247
	HostShareKeyId *string `json:"HostShareKeyId,omitempty" xml:"HostShareKeyId,omitempty"`
	// The name of the shared key.
	//
	// example:
	//
	// name
	HostShareKeyName *string `json:"HostShareKeyName,omitempty" xml:"HostShareKeyName,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The password of the private key. Specify a Base64-encoded string.
	//
	// example:
	//
	// ****
	PassPhrase *string `json:"PassPhrase,omitempty" xml:"PassPhrase,omitempty"`
	// The private key. Specify a Base64-encoded string.
	//
	// >  Only Rivest-Shamir-Adleman (RSA) keys that are generated by using the ssh-keygen command and keys that are generated by using the Ed25519 algorithm are supported.
	//
	// example:
	//
	// ****
	PrivateKey *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHostShareKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostShareKeyRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostShareKeyRequest) SetHostShareKeyId(v string) *ModifyHostShareKeyRequest {
	s.HostShareKeyId = &v
	return s
}

func (s *ModifyHostShareKeyRequest) SetHostShareKeyName(v string) *ModifyHostShareKeyRequest {
	s.HostShareKeyName = &v
	return s
}

func (s *ModifyHostShareKeyRequest) SetInstanceId(v string) *ModifyHostShareKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyHostShareKeyRequest) SetPassPhrase(v string) *ModifyHostShareKeyRequest {
	s.PassPhrase = &v
	return s
}

func (s *ModifyHostShareKeyRequest) SetPrivateKey(v string) *ModifyHostShareKeyRequest {
	s.PrivateKey = &v
	return s
}

func (s *ModifyHostShareKeyRequest) SetRegionId(v string) *ModifyHostShareKeyRequest {
	s.RegionId = &v
	return s
}

type ModifyHostShareKeyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHostShareKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostShareKeyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostShareKeyResponseBody) SetRequestId(v string) *ModifyHostShareKeyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHostShareKeyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostShareKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostShareKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostShareKeyResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostShareKeyResponse) SetHeaders(v map[string]*string) *ModifyHostShareKeyResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostShareKeyResponse) SetStatusCode(v int32) *ModifyHostShareKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostShareKeyResponse) SetBody(v *ModifyHostShareKeyResponseBody) *ModifyHostShareKeyResponse {
	s.Body = v
	return s
}

type ModifyHostsActiveAddressTypeRequest struct {
	// The new portal type of the host. Valid values:
	//
	// 	- **Public**: public portal
	//
	// 	- **Private**: internal portal
	//
	// This parameter is required.
	//
	// example:
	//
	// Private
	ActiveAddressType *string `json:"ActiveAddressType,omitempty" xml:"ActiveAddressType,omitempty"`
	// The ID of the host for which you want to change the portal type. The value is a JSON string. You can add up to 100 host IDs.
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2"]
	HostIds *string `json:"HostIds,omitempty" xml:"HostIds,omitempty"`
	// The ID of the bastion host for which you want to change the portal type of the host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw***
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to change the portal type of the host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHostsActiveAddressTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsActiveAddressTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostsActiveAddressTypeRequest) SetActiveAddressType(v string) *ModifyHostsActiveAddressTypeRequest {
	s.ActiveAddressType = &v
	return s
}

func (s *ModifyHostsActiveAddressTypeRequest) SetHostIds(v string) *ModifyHostsActiveAddressTypeRequest {
	s.HostIds = &v
	return s
}

func (s *ModifyHostsActiveAddressTypeRequest) SetInstanceId(v string) *ModifyHostsActiveAddressTypeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyHostsActiveAddressTypeRequest) SetRegionId(v string) *ModifyHostsActiveAddressTypeRequest {
	s.RegionId = &v
	return s
}

type ModifyHostsActiveAddressTypeResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*ModifyHostsActiveAddressTypeResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s ModifyHostsActiveAddressTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsActiveAddressTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostsActiveAddressTypeResponseBody) SetRequestId(v string) *ModifyHostsActiveAddressTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHostsActiveAddressTypeResponseBody) SetResults(v []*ModifyHostsActiveAddressTypeResponseBodyResults) *ModifyHostsActiveAddressTypeResponseBody {
	s.Results = v
	return s
}

type ModifyHostsActiveAddressTypeResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s ModifyHostsActiveAddressTypeResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsActiveAddressTypeResponseBodyResults) GoString() string {
	return s.String()
}

func (s *ModifyHostsActiveAddressTypeResponseBodyResults) SetCode(v string) *ModifyHostsActiveAddressTypeResponseBodyResults {
	s.Code = &v
	return s
}

func (s *ModifyHostsActiveAddressTypeResponseBodyResults) SetHostId(v string) *ModifyHostsActiveAddressTypeResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *ModifyHostsActiveAddressTypeResponseBodyResults) SetMessage(v string) *ModifyHostsActiveAddressTypeResponseBodyResults {
	s.Message = &v
	return s
}

type ModifyHostsActiveAddressTypeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostsActiveAddressTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostsActiveAddressTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsActiveAddressTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostsActiveAddressTypeResponse) SetHeaders(v map[string]*string) *ModifyHostsActiveAddressTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostsActiveAddressTypeResponse) SetStatusCode(v int32) *ModifyHostsActiveAddressTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostsActiveAddressTypeResponse) SetBody(v *ModifyHostsActiveAddressTypeResponseBody) *ModifyHostsActiveAddressTypeResponse {
	s.Body = v
	return s
}

type ModifyHostsPortRequest struct {
	// The ID of the host for which you want to change the port. The value is a JSON string. You can add up to 100 host IDs. If you specify multiple IDs, separate the IDs with commas (,).
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the IDs of hosts.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2","3"]
	HostIds *string `json:"HostIds,omitempty" xml:"HostIds,omitempty"`
	// The ID of the bastion host for which you want to change the port of the host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The new port of the host. The port number must be an integer. Valid values: 22 to 65535.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The protocol that is used to connect to the host. Valid values:
	//
	// 	- **SSH**
	//
	// 	- **RDP**
	//
	// This parameter is required.
	//
	// example:
	//
	// SSH
	ProtocolName *string `json:"ProtocolName,omitempty" xml:"ProtocolName,omitempty"`
	// The region ID of the bastion host for which you want to change the port of the host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHostsPortRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsPortRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostsPortRequest) SetHostIds(v string) *ModifyHostsPortRequest {
	s.HostIds = &v
	return s
}

func (s *ModifyHostsPortRequest) SetInstanceId(v string) *ModifyHostsPortRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyHostsPortRequest) SetPort(v string) *ModifyHostsPortRequest {
	s.Port = &v
	return s
}

func (s *ModifyHostsPortRequest) SetProtocolName(v string) *ModifyHostsPortRequest {
	s.ProtocolName = &v
	return s
}

func (s *ModifyHostsPortRequest) SetRegionId(v string) *ModifyHostsPortRequest {
	s.RegionId = &v
	return s
}

type ModifyHostsPortResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*ModifyHostsPortResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s ModifyHostsPortResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsPortResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostsPortResponseBody) SetRequestId(v string) *ModifyHostsPortResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHostsPortResponseBody) SetResults(v []*ModifyHostsPortResponseBodyResults) *ModifyHostsPortResponseBody {
	s.Results = v
	return s
}

type ModifyHostsPortResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	//     > Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	//     > Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// -
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s ModifyHostsPortResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsPortResponseBodyResults) GoString() string {
	return s.String()
}

func (s *ModifyHostsPortResponseBodyResults) SetCode(v string) *ModifyHostsPortResponseBodyResults {
	s.Code = &v
	return s
}

func (s *ModifyHostsPortResponseBodyResults) SetHostId(v string) *ModifyHostsPortResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *ModifyHostsPortResponseBodyResults) SetMessage(v string) *ModifyHostsPortResponseBodyResults {
	s.Message = &v
	return s
}

type ModifyHostsPortResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostsPortResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostsPortResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostsPortResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostsPortResponse) SetHeaders(v map[string]*string) *ModifyHostsPortResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostsPortResponse) SetStatusCode(v int32) *ModifyHostsPortResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostsPortResponse) SetBody(v *ModifyHostsPortResponseBody) *ModifyHostsPortResponse {
	s.Body = v
	return s
}

type ModifyInstanceADAuthServerRequest struct {
	// The username of the account that is used for the AD server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn=Manager,dc=test,dc=com
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// The Base distinguished name (DN).
	//
	// This parameter is required.
	//
	// example:
	//
	// dc=test,dc=com
	BaseDN *string `json:"BaseDN,omitempty" xml:"BaseDN,omitempty"`
	// The domain on the AD server.
	//
	// This parameter is required.
	//
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The field that is used to indicate the email address of a user on the AD server.
	//
	// example:
	//
	// emailAttr
	EmailMapping *string `json:"EmailMapping,omitempty" xml:"EmailMapping,omitempty"`
	// The condition that is used to filter users.
	//
	// example:
	//
	// (objectClass=top)
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies whether SSL is supported. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	IsSSL *string `json:"IsSSL,omitempty" xml:"IsSSL,omitempty"`
	// The field that is used to indicate the mobile phone number of a user on the AD server.
	//
	// example:
	//
	// mobileAttr
	MobileMapping *string `json:"MobileMapping,omitempty" xml:"MobileMapping,omitempty"`
	// The field that is used to indicate the name of a user on the AD server.
	//
	// example:
	//
	// nameAttr
	NameMapping *string `json:"NameMapping,omitempty" xml:"NameMapping,omitempty"`
	// The password of the account that is used for the AD server.
	//
	// example:
	//
	// ******
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The port that is used to access the server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 389
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The address of the AD server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 192.168.XX.XX
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The address of the secondary AD server.
	//
	// example:
	//
	// 192.168.XX.XX
	StandbyServer *string `json:"StandbyServer,omitempty" xml:"StandbyServer,omitempty"`
}

func (s ModifyInstanceADAuthServerRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceADAuthServerRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceADAuthServerRequest) SetAccount(v string) *ModifyInstanceADAuthServerRequest {
	s.Account = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetBaseDN(v string) *ModifyInstanceADAuthServerRequest {
	s.BaseDN = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetDomain(v string) *ModifyInstanceADAuthServerRequest {
	s.Domain = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetEmailMapping(v string) *ModifyInstanceADAuthServerRequest {
	s.EmailMapping = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetFilter(v string) *ModifyInstanceADAuthServerRequest {
	s.Filter = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetInstanceId(v string) *ModifyInstanceADAuthServerRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetIsSSL(v string) *ModifyInstanceADAuthServerRequest {
	s.IsSSL = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetMobileMapping(v string) *ModifyInstanceADAuthServerRequest {
	s.MobileMapping = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetNameMapping(v string) *ModifyInstanceADAuthServerRequest {
	s.NameMapping = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetPassword(v string) *ModifyInstanceADAuthServerRequest {
	s.Password = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetPort(v string) *ModifyInstanceADAuthServerRequest {
	s.Port = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetRegionId(v string) *ModifyInstanceADAuthServerRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetServer(v string) *ModifyInstanceADAuthServerRequest {
	s.Server = &v
	return s
}

func (s *ModifyInstanceADAuthServerRequest) SetStandbyServer(v string) *ModifyInstanceADAuthServerRequest {
	s.StandbyServer = &v
	return s
}

type ModifyInstanceADAuthServerResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// C9E97677-BD74-584B-AFCE-948C2A70BB82
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceADAuthServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceADAuthServerResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceADAuthServerResponseBody) SetRequestId(v string) *ModifyInstanceADAuthServerResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceADAuthServerResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceADAuthServerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceADAuthServerResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceADAuthServerResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceADAuthServerResponse) SetHeaders(v map[string]*string) *ModifyInstanceADAuthServerResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceADAuthServerResponse) SetStatusCode(v int32) *ModifyInstanceADAuthServerResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceADAuthServerResponse) SetBody(v *ModifyInstanceADAuthServerResponseBody) *ModifyInstanceADAuthServerResponse {
	s.Body = v
	return s
}

type ModifyInstanceAttributeRequest struct {
	// The description of the bastion host.
	//
	// > The description must be up to 30 characters in length, and can contain letters, digits, underscores (_), and hyphens (-).
	//
	// example:
	//
	// Bastionhost demo
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the bastion host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeRequest) SetDescription(v string) *ModifyInstanceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceId(v string) *ModifyInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetRegionId(v string) *ModifyInstanceAttributeRequest {
	s.RegionId = &v
	return s
}

type ModifyInstanceAttributeResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// E07158EA-D1A3-4BAA-84DA-2FE230D03884
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetStatusCode(v int32) *ModifyInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetBody(v *ModifyInstanceAttributeResponseBody) *ModifyInstanceAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceLDAPAuthServerRequest struct {
	// The username of the account that is used for the LDAP server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn=Manager,dc=test,dc=com
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// The Base distinguished name (DN).
	//
	// This parameter is required.
	//
	// example:
	//
	// dc=test,dc=com
	BaseDN *string `json:"BaseDN,omitempty" xml:"BaseDN,omitempty"`
	// The field that is used to indicate the email address of a user on the LDAP server.
	//
	// example:
	//
	// emailAttr
	EmailMapping *string `json:"EmailMapping,omitempty" xml:"EmailMapping,omitempty"`
	// The condition that is used to filter users.
	//
	// example:
	//
	// (objectClass=top)
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies whether to support SSL. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsSSL *string `json:"IsSSL,omitempty" xml:"IsSSL,omitempty"`
	// The field that is used to indicate the logon name of a user on the LDAP server.
	//
	// example:
	//
	// userNameAttr
	LoginNameMapping *string `json:"LoginNameMapping,omitempty" xml:"LoginNameMapping,omitempty"`
	// The field that is used to indicate the mobile phone number of a user on the LDAP server.
	//
	// example:
	//
	// mobileAttr
	MobileMapping *string `json:"MobileMapping,omitempty" xml:"MobileMapping,omitempty"`
	// The field that is used to indicate the name of a user on the LDAP server.
	//
	// example:
	//
	// nameAttr
	NameMapping *string `json:"NameMapping,omitempty" xml:"NameMapping,omitempty"`
	// The password of the account that is used for the LDAP server. You must configure a password when you configure LDAP authentication. If you leave this parameter empty when you modify the settings of LDAP authentication, the current password is used.
	//
	// example:
	//
	// ******
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The port that is used to access the LDAP server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 389
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The address of the LDAP server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 192.168.XX.XX
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The address of the secondary LDAP server.
	//
	// example:
	//
	// 192.168.XX.XX
	StandbyServer *string `json:"StandbyServer,omitempty" xml:"StandbyServer,omitempty"`
}

func (s ModifyInstanceLDAPAuthServerRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceLDAPAuthServerRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetAccount(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.Account = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetBaseDN(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.BaseDN = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetEmailMapping(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.EmailMapping = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetFilter(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.Filter = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetInstanceId(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetIsSSL(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.IsSSL = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetLoginNameMapping(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.LoginNameMapping = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetMobileMapping(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.MobileMapping = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetNameMapping(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.NameMapping = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetPassword(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.Password = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetPort(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.Port = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetRegionId(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetServer(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.Server = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerRequest) SetStandbyServer(v string) *ModifyInstanceLDAPAuthServerRequest {
	s.StandbyServer = &v
	return s
}

type ModifyInstanceLDAPAuthServerResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 8F1085E3-F048-5F34-B650-F145216E4AA4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceLDAPAuthServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceLDAPAuthServerResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceLDAPAuthServerResponseBody) SetRequestId(v string) *ModifyInstanceLDAPAuthServerResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceLDAPAuthServerResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceLDAPAuthServerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceLDAPAuthServerResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceLDAPAuthServerResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceLDAPAuthServerResponse) SetHeaders(v map[string]*string) *ModifyInstanceLDAPAuthServerResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceLDAPAuthServerResponse) SetStatusCode(v int32) *ModifyInstanceLDAPAuthServerResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceLDAPAuthServerResponse) SetBody(v *ModifyInstanceLDAPAuthServerResponseBody) *ModifyInstanceLDAPAuthServerResponse {
	s.Body = v
	return s
}

type ModifyInstanceTwoFactorRequest struct {
	// Specifies whether to enable two-factor authentication. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	EnableTwoFactor *string `json:"EnableTwoFactor,omitempty" xml:"EnableTwoFactor,omitempty"`
	// The ID of the bastion host.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The duration within which two-factor authentication is not required after a user passes two-factor authentication. Valid values: 0 to 168. Unit: hours. If you set this parameter to 0, the user must pass two-factor authentication every time the user logs on to the bastion host.
	//
	// example:
	//
	// 1
	SkipTwoFactorTime *string `json:"SkipTwoFactorTime,omitempty" xml:"SkipTwoFactorTime,omitempty"`
	// The method used to send a verification code for two-factor authentication. If EnableTwoFactor is set to true, you must specify at least one method. Valid values:
	//
	// 	- **sms:*	- text message.
	//
	// 	- **email**: email.
	//
	// 	- **dingtalk**: notice in DingTalk.
	//
	// 	- **totp**: one-time password (OTP) token.
	//
	// 	- **gmusbkey**: SM-based USB key.
	//
	// example:
	//
	// ["sms"]
	TwoFactorMethods *string `json:"TwoFactorMethods,omitempty" xml:"TwoFactorMethods,omitempty"`
}

func (s ModifyInstanceTwoFactorRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTwoFactorRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTwoFactorRequest) SetEnableTwoFactor(v string) *ModifyInstanceTwoFactorRequest {
	s.EnableTwoFactor = &v
	return s
}

func (s *ModifyInstanceTwoFactorRequest) SetInstanceId(v string) *ModifyInstanceTwoFactorRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceTwoFactorRequest) SetRegionId(v string) *ModifyInstanceTwoFactorRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceTwoFactorRequest) SetSkipTwoFactorTime(v string) *ModifyInstanceTwoFactorRequest {
	s.SkipTwoFactorTime = &v
	return s
}

func (s *ModifyInstanceTwoFactorRequest) SetTwoFactorMethods(v string) *ModifyInstanceTwoFactorRequest {
	s.TwoFactorMethods = &v
	return s
}

type ModifyInstanceTwoFactorResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 9CE1A352-15E9-5EB4-B589-87A8DEECB20D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceTwoFactorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTwoFactorResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTwoFactorResponseBody) SetRequestId(v string) *ModifyInstanceTwoFactorResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceTwoFactorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceTwoFactorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceTwoFactorResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTwoFactorResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTwoFactorResponse) SetHeaders(v map[string]*string) *ModifyInstanceTwoFactorResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceTwoFactorResponse) SetStatusCode(v int32) *ModifyInstanceTwoFactorResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceTwoFactorResponse) SetBody(v *ModifyInstanceTwoFactorResponseBody) *ModifyInstanceTwoFactorResponse {
	s.Body = v
	return s
}

type ModifyNetworkDomainRequest struct {
	// The new remarks of the network domain.
	//
	// example:
	//
	// xxx
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host to which the network domain to modify belongs.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-x0r3hyr3f09
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The new name of the network domain.
	//
	// example:
	//
	// test
	NetworkDomainName *string `json:"NetworkDomainName,omitempty" xml:"NetworkDomainName,omitempty"`
	// The new connection mode of the network domain. Valid values:
	//
	// 	- **Direct**
	//
	// 	- **Proxy**
	//
	// example:
	//
	// Proxy
	NetworkDomainType *string `json:"NetworkDomainType,omitempty" xml:"NetworkDomainType,omitempty"`
	// The information about the proxy servers in the network domain.
	Proxies []*ModifyNetworkDomainRequestProxies `json:"Proxies,omitempty" xml:"Proxies,omitempty" type:"Repeated"`
	// The region ID of the bastion host to which the network domain to modify belongs.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyNetworkDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkDomainRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkDomainRequest) SetComment(v string) *ModifyNetworkDomainRequest {
	s.Comment = &v
	return s
}

func (s *ModifyNetworkDomainRequest) SetInstanceId(v string) *ModifyNetworkDomainRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyNetworkDomainRequest) SetNetworkDomainId(v string) *ModifyNetworkDomainRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *ModifyNetworkDomainRequest) SetNetworkDomainName(v string) *ModifyNetworkDomainRequest {
	s.NetworkDomainName = &v
	return s
}

func (s *ModifyNetworkDomainRequest) SetNetworkDomainType(v string) *ModifyNetworkDomainRequest {
	s.NetworkDomainType = &v
	return s
}

func (s *ModifyNetworkDomainRequest) SetProxies(v []*ModifyNetworkDomainRequestProxies) *ModifyNetworkDomainRequest {
	s.Proxies = v
	return s
}

func (s *ModifyNetworkDomainRequest) SetRegionId(v string) *ModifyNetworkDomainRequest {
	s.RegionId = &v
	return s
}

type ModifyNetworkDomainRequestProxies struct {
	// The new IP address of the proxy server.
	//
	// example:
	//
	// 114.21**.**
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The node type of the proxy server to modify. Valid values:
	//
	// 	- **Master**: primary proxy server.
	//
	// 	- **Slave**: secondary proxy server.
	//
	// example:
	//
	// Slave
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// The new password of the proxy server account.
	//
	// example:
	//
	// ***
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The new port of the proxy server.
	//
	// example:
	//
	// 22
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The new proxy mode. Valid values:
	//
	// 	- **SSHProxy**
	//
	// 	- **HTTPProxy**
	//
	// 	- **Socks5Proxy**
	//
	// example:
	//
	// HTTPProxy
	ProxyType *string `json:"ProxyType,omitempty" xml:"ProxyType,omitempty"`
	// The new username of the proxy server account.
	//
	// example:
	//
	// test
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s ModifyNetworkDomainRequestProxies) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkDomainRequestProxies) GoString() string {
	return s.String()
}

func (s *ModifyNetworkDomainRequestProxies) SetAddress(v string) *ModifyNetworkDomainRequestProxies {
	s.Address = &v
	return s
}

func (s *ModifyNetworkDomainRequestProxies) SetNodeType(v string) *ModifyNetworkDomainRequestProxies {
	s.NodeType = &v
	return s
}

func (s *ModifyNetworkDomainRequestProxies) SetPassword(v string) *ModifyNetworkDomainRequestProxies {
	s.Password = &v
	return s
}

func (s *ModifyNetworkDomainRequestProxies) SetPort(v int32) *ModifyNetworkDomainRequestProxies {
	s.Port = &v
	return s
}

func (s *ModifyNetworkDomainRequestProxies) SetProxyType(v string) *ModifyNetworkDomainRequestProxies {
	s.ProxyType = &v
	return s
}

func (s *ModifyNetworkDomainRequestProxies) SetUser(v string) *ModifyNetworkDomainRequestProxies {
	s.User = &v
	return s
}

type ModifyNetworkDomainResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ED49CD1E-3510-5E5C-9133-E2067B656501
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNetworkDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkDomainResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNetworkDomainResponseBody) SetRequestId(v string) *ModifyNetworkDomainResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNetworkDomainResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyNetworkDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyNetworkDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkDomainResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkDomainResponse) SetHeaders(v map[string]*string) *ModifyNetworkDomainResponse {
	s.Headers = v
	return s
}

func (s *ModifyNetworkDomainResponse) SetStatusCode(v int32) *ModifyNetworkDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNetworkDomainResponse) SetBody(v *ModifyNetworkDomainResponseBody) *ModifyNetworkDomainResponse {
	s.Body = v
	return s
}

type ModifyPolicyRequest struct {
	// The new remarks of the control policy.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host to which the control policy to modify belongs.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-09k1u8mv501
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The new name of the control policy.
	//
	// example:
	//
	// test
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The priority of the modified control policy. Valid values: 1 to 100. The smaller the value, the higher the priority. Default value: 1.
	//
	// example:
	//
	// 3
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The region ID of the bastion host to which the control policy to modify belongs.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyPolicyRequest) SetComment(v string) *ModifyPolicyRequest {
	s.Comment = &v
	return s
}

func (s *ModifyPolicyRequest) SetInstanceId(v string) *ModifyPolicyRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPolicyRequest) SetPolicyId(v string) *ModifyPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *ModifyPolicyRequest) SetPolicyName(v string) *ModifyPolicyRequest {
	s.PolicyName = &v
	return s
}

func (s *ModifyPolicyRequest) SetPriority(v string) *ModifyPolicyRequest {
	s.Priority = &v
	return s
}

func (s *ModifyPolicyRequest) SetRegionId(v string) *ModifyPolicyRequest {
	s.RegionId = &v
	return s
}

type ModifyPolicyResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// A34F9731-A4EA-5D1D-8445-BAEF782BFFE6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPolicyResponseBody) SetRequestId(v string) *ModifyPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPolicyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyPolicyResponse) SetHeaders(v map[string]*string) *ModifyPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyPolicyResponse) SetStatusCode(v int32) *ModifyPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPolicyResponse) SetBody(v *ModifyPolicyResponseBody) *ModifyPolicyResponse {
	s.Body = v
	return s
}

type ModifyRuleRequest struct {
	// The new remarks of the authorization rule. It can be up to 500 characters in length.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The databases and database accounts that a user associated with the modified rule can manage.
	Databases []*ModifyRuleRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The end time of the new validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1672502400
	EffectiveEndTime *int64 `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The start time of the new validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.
	//
	// example:
	//
	// 1669630029
	EffectiveStartTime *int64 `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The asset groups and asset accounts that a user associated with the modified rule can manage.
	HostGroups []*ModifyRuleRequestHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// An array that consists of the host IDs and host account IDs with which the modified authorization rule is associated.
	Hosts []*ModifyRuleRequestHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The ID of the bastion host whose authorization rule you want to modify.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-zmb2y9ydw08
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host to which the authorization rule to modify belongs.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the authorization rule to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// 68
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The new name of the authorization rule. The name must be 1 to 128 characters in length and can contain periods (.), underscores (_), hyphens (-), single quotation marks (\\"), and spaces. It cannot start with a special character.
	//
	// example:
	//
	// test
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The IDs of the user groups with which the modified authorization rule is associated.
	UserGroupIds []*string `json:"UserGroupIds,omitempty" xml:"UserGroupIds,omitempty" type:"Repeated"`
	// The IDs of the users with whom the modified authorization rule is associated.
	UserIds []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s ModifyRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyRuleRequest) SetComment(v string) *ModifyRuleRequest {
	s.Comment = &v
	return s
}

func (s *ModifyRuleRequest) SetDatabases(v []*ModifyRuleRequestDatabases) *ModifyRuleRequest {
	s.Databases = v
	return s
}

func (s *ModifyRuleRequest) SetEffectiveEndTime(v int64) *ModifyRuleRequest {
	s.EffectiveEndTime = &v
	return s
}

func (s *ModifyRuleRequest) SetEffectiveStartTime(v int64) *ModifyRuleRequest {
	s.EffectiveStartTime = &v
	return s
}

func (s *ModifyRuleRequest) SetHostGroups(v []*ModifyRuleRequestHostGroups) *ModifyRuleRequest {
	s.HostGroups = v
	return s
}

func (s *ModifyRuleRequest) SetHosts(v []*ModifyRuleRequestHosts) *ModifyRuleRequest {
	s.Hosts = v
	return s
}

func (s *ModifyRuleRequest) SetInstanceId(v string) *ModifyRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyRuleRequest) SetRegionId(v string) *ModifyRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRuleRequest) SetRuleId(v string) *ModifyRuleRequest {
	s.RuleId = &v
	return s
}

func (s *ModifyRuleRequest) SetRuleName(v string) *ModifyRuleRequest {
	s.RuleName = &v
	return s
}

func (s *ModifyRuleRequest) SetUserGroupIds(v []*string) *ModifyRuleRequest {
	s.UserGroupIds = v
	return s
}

func (s *ModifyRuleRequest) SetUserIds(v []*string) *ModifyRuleRequest {
	s.UserIds = v
	return s
}

type ModifyRuleRequestDatabases struct {
	// The database account IDs.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The database ID.
	//
	// example:
	//
	// [
	//
	//     {
	//
	//         "DatabaseId": "1"
	//
	//     }
	//
	// ]
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s ModifyRuleRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleRequestDatabases) GoString() string {
	return s.String()
}

func (s *ModifyRuleRequestDatabases) SetDatabaseAccountIds(v []*string) *ModifyRuleRequestDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *ModifyRuleRequestDatabases) SetDatabaseId(v string) *ModifyRuleRequestDatabases {
	s.DatabaseId = &v
	return s
}

type ModifyRuleRequestHostGroups struct {
	// The names of the asset accounts.
	HostAccountNames []*string `json:"HostAccountNames,omitempty" xml:"HostAccountNames,omitempty" type:"Repeated"`
	// The asset group ID.
	//
	// example:
	//
	// [{"HostGroupId":"1"}]
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
}

func (s ModifyRuleRequestHostGroups) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleRequestHostGroups) GoString() string {
	return s.String()
}

func (s *ModifyRuleRequestHostGroups) SetHostAccountNames(v []*string) *ModifyRuleRequestHostGroups {
	s.HostAccountNames = v
	return s
}

func (s *ModifyRuleRequestHostGroups) SetHostGroupId(v string) *ModifyRuleRequestHostGroups {
	s.HostGroupId = &v
	return s
}

type ModifyRuleRequestHosts struct {
	// The host account IDs.
	HostAccountIds []*string `json:"HostAccountIds,omitempty" xml:"HostAccountIds,omitempty" type:"Repeated"`
	// The host ID.
	//
	// example:
	//
	// [{"HostId":"1"}]
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s ModifyRuleRequestHosts) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleRequestHosts) GoString() string {
	return s.String()
}

func (s *ModifyRuleRequestHosts) SetHostAccountIds(v []*string) *ModifyRuleRequestHosts {
	s.HostAccountIds = v
	return s
}

func (s *ModifyRuleRequestHosts) SetHostId(v string) *ModifyRuleRequestHosts {
	s.HostId = &v
	return s
}

type ModifyRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 67EB57AD-5C83-537B-B2A1-6082798965F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRuleResponseBody) SetRequestId(v string) *ModifyRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyRuleResponse) SetHeaders(v map[string]*string) *ModifyRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyRuleResponse) SetStatusCode(v int32) *ModifyRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRuleResponse) SetBody(v *ModifyRuleResponseBody) *ModifyRuleResponse {
	s.Body = v
	return s
}

type ModifyUserRequest struct {
	// The new remarks of the user. The remarks can be up to 500 characters in length.
	//
	// >  Leave this parameter empty if you do not want to change the remarks of the user.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The new display name of the user. The display name can be up to 128 characters in length.
	//
	// >  Leave this parameter empty if you do not want to change the display name of the user.
	//
	// example:
	//
	// Bob
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The end time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.
	//
	// >  Leave this parameter empty if you do not want to change the end time of the validity period.
	//
	// example:
	//
	// 1672502400
	EffectiveEndTime *int64 `json:"EffectiveEndTime,omitempty" xml:"EffectiveEndTime,omitempty"`
	// The start time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.
	//
	// >  Leave this parameter empty if you do not want to change the start time of the validity period.
	//
	// example:
	//
	// 1669630029
	EffectiveStartTime *int64 `json:"EffectiveStartTime,omitempty" xml:"EffectiveStartTime,omitempty"`
	// The new email address of the user.
	//
	// >
	//
	// 	- This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to email, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to email in the global two-factor authentication settings.
	//
	// 	- You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.
	//
	// 	- Leave this parameter empty if you do not want to change the email address of the user.
	//
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The ID of the bastion host on which you want to modify the information about the user.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required if LanguageStatus is set to Custom.
	//
	// - **zh-cn**: simplified Chinese
	//
	// - **en**: English
	//
	// example:
	//
	// en
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// Specifies whether to send notifications in the language specified in the global settings or a custom language.
	//
	// 	- **Global**
	//
	// 	- **Custom**
	//
	// >  Leave this parameter empty if you do not want to change the natural language used to notify the user.
	//
	// example:
	//
	// Custom
	LanguageStatus *string `json:"LanguageStatus,omitempty" xml:"LanguageStatus,omitempty"`
	// The new mobile phone number of the user.
	//
	// >
	//
	// 	- This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to sms or dingtalk, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to sms or dingtalk in the global two-factor authentication settings.
	//
	// 	- You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.
	//
	// 	- Leave this parameter empty if you do not want to change the mobile phone number of the user.
	//
	// example:
	//
	// 1358888****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// The country where the new mobile number of the user is registered. Valid values:
	//
	// 	- **CN:*	- the Chinese mainland, whose country calling code is +86
	//
	// 	- **HK:*	- Hong Kong (China), whose country calling code is +852
	//
	// 	- **MO:*	- Macao (China), whose country calling code is +853
	//
	// 	- **TW:*	- Taiwan (China), whose country calling code is +886
	//
	// 	- **RU:*	- Russia, whose country calling code is +7
	//
	// 	- **SG:*	- Singapore, whose country calling code is +65
	//
	// 	- **MY:*	- Malaysia, whose country calling code is +60
	//
	// 	- **ID:*	- Indonesia, whose country calling code is +62
	//
	// 	- **DE:*	- Germany, whose country calling code is +49
	//
	// 	- **AU:*	- Australia, whose country calling code is +61
	//
	// 	- **US:*	- US, whose country calling code is +1
	//
	// 	- **AE:*	- United Arab Emirates, whose country calling code is +971
	//
	// 	- **JP:*	- Japan, whose country calling code is +81
	//
	// 	- **GB:*	- UK, whose country calling code is +44
	//
	// 	- **IN:*	- India, whose country calling code is +91
	//
	// 	- **KR:*	- Republic of Korea, whose country calling code is +82
	//
	// 	- **PH:*	- Philippines, whose country calling code is +63
	//
	// 	- **CH:*	- Switzerland, whose country calling code is +41
	//
	// 	- **SE:*	- Sweden, whose country calling code is +46
	//
	// 	- **SA:*	- Saudi Arabia, whose country calling code is +966
	//
	// example:
	//
	// CN
	MobileCountryCode *string `json:"MobileCountryCode,omitempty" xml:"MobileCountryCode,omitempty"`
	// Specifies whether password reset is required upon the next logon. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  Leave this parameter empty if you do not want to change the password reset settings for the user.
	//
	// example:
	//
	// true
	NeedResetPassword *bool `json:"NeedResetPassword,omitempty" xml:"NeedResetPassword,omitempty"`
	// The new password of the user. The password must be 8 to 128 characters in length. It must contain uppercase letters, lowercase letters, digits, and special characters.
	//
	// > Leave this parameter empty if you do not want to change the password of the user.
	//
	// example:
	//
	// 321****
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID of the bastion host on which you want to modify the information about the user.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The two-factor authentication method. You can select only one method. Valid values:
	//
	// 	- **sms**: text message-based two-factor authentication.
	//
	// 	- **email**: email-based two-factor authentication.
	//
	// 	- **dingtalk**: DingTalk-based two-factor authentication.
	//
	// 	- **totp OTP:*	- one-time password (OTP) token-based two-factor authentication.
	//
	// >  If TwoFactorStatus is set to Enable, you must specify one of the valid values as TwoFactorMethods.
	//
	// example:
	//
	// sms
	TwoFactorMethods *string `json:"TwoFactorMethods,omitempty" xml:"TwoFactorMethods,omitempty"`
	// Specifies whether two-factor authentication is enabled for the user. Valid values:
	//
	// 	- **Global**: The global settings apply.
	//
	// 	- **Disable**: Two-factor authentication is disabled.
	//
	// 	- **Enable**: Two-factor authentication is enabled and user-specific settings apply.
	//
	// >  Leave this parameter empty if you do not want to change the two-factory authentication settings for the user.
	//
	// example:
	//
	// Enable
	TwoFactorStatus *string `json:"TwoFactorStatus,omitempty" xml:"TwoFactorStatus,omitempty"`
	// The ID of the user whose information you want to modify.
	//
	// >  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ModifyUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserRequest) SetComment(v string) *ModifyUserRequest {
	s.Comment = &v
	return s
}

func (s *ModifyUserRequest) SetDisplayName(v string) *ModifyUserRequest {
	s.DisplayName = &v
	return s
}

func (s *ModifyUserRequest) SetEffectiveEndTime(v int64) *ModifyUserRequest {
	s.EffectiveEndTime = &v
	return s
}

func (s *ModifyUserRequest) SetEffectiveStartTime(v int64) *ModifyUserRequest {
	s.EffectiveStartTime = &v
	return s
}

func (s *ModifyUserRequest) SetEmail(v string) *ModifyUserRequest {
	s.Email = &v
	return s
}

func (s *ModifyUserRequest) SetInstanceId(v string) *ModifyUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyUserRequest) SetLanguage(v string) *ModifyUserRequest {
	s.Language = &v
	return s
}

func (s *ModifyUserRequest) SetLanguageStatus(v string) *ModifyUserRequest {
	s.LanguageStatus = &v
	return s
}

func (s *ModifyUserRequest) SetMobile(v string) *ModifyUserRequest {
	s.Mobile = &v
	return s
}

func (s *ModifyUserRequest) SetMobileCountryCode(v string) *ModifyUserRequest {
	s.MobileCountryCode = &v
	return s
}

func (s *ModifyUserRequest) SetNeedResetPassword(v bool) *ModifyUserRequest {
	s.NeedResetPassword = &v
	return s
}

func (s *ModifyUserRequest) SetPassword(v string) *ModifyUserRequest {
	s.Password = &v
	return s
}

func (s *ModifyUserRequest) SetRegionId(v string) *ModifyUserRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyUserRequest) SetTwoFactorMethods(v string) *ModifyUserRequest {
	s.TwoFactorMethods = &v
	return s
}

func (s *ModifyUserRequest) SetTwoFactorStatus(v string) *ModifyUserRequest {
	s.TwoFactorStatus = &v
	return s
}

func (s *ModifyUserRequest) SetUserId(v string) *ModifyUserRequest {
	s.UserId = &v
	return s
}

type ModifyUserResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserResponseBody) SetRequestId(v string) *ModifyUserResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserResponse) SetHeaders(v map[string]*string) *ModifyUserResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserResponse) SetStatusCode(v int32) *ModifyUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserResponse) SetBody(v *ModifyUserResponseBody) *ModifyUserResponse {
	s.Body = v
	return s
}

type ModifyUserGroupRequest struct {
	// The new description of the user group. The description can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host in which you want to modify the information about the user group.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host in which you want to modify the information about the user group.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group that you want to modify.
	//
	// > You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The new name of the user group. This name can be up to 128 characters in length.
	//
	// example:
	//
	// TestUserGroup
	UserGroupName *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s ModifyUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserGroupRequest) SetComment(v string) *ModifyUserGroupRequest {
	s.Comment = &v
	return s
}

func (s *ModifyUserGroupRequest) SetInstanceId(v string) *ModifyUserGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyUserGroupRequest) SetRegionId(v string) *ModifyUserGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyUserGroupRequest) SetUserGroupId(v string) *ModifyUserGroupRequest {
	s.UserGroupId = &v
	return s
}

func (s *ModifyUserGroupRequest) SetUserGroupName(v string) *ModifyUserGroupRequest {
	s.UserGroupName = &v
	return s
}

type ModifyUserGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserGroupResponseBody) SetRequestId(v string) *ModifyUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserGroupResponse) SetHeaders(v map[string]*string) *ModifyUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserGroupResponse) SetStatusCode(v int32) *ModifyUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserGroupResponse) SetBody(v *ModifyUserGroupResponseBody) *ModifyUserGroupResponse {
	s.Body = v
	return s
}

type ModifyUserPublicKeyRequest struct {
	// The new description of the user group. The description can be up to 500 characters in length.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host on which you want to modify the public key of a user.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-nif236pmc1u
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The new public key.
	//
	// >  Specify a Base64-encoded string.
	//
	// example:
	//
	// c3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSUhVcjY4UENFYWFzZjFYRVpNYTVsMlNBQytHV3FpeXVsRVpndkV4dmlPM28gcm9vdEA5NjBkMmNhOTcwYjU=
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The ID of the public key that you want to modify.
	//
	// >  You can call the [ListUserPublicKeys](https://help.aliyun.com/document_detail/477555.html) operation to query the public key ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
	// The name of the public key that you want to modify. This name can be up to 128 characters in length.
	//
	// example:
	//
	// name
	PublicKeyName *string `json:"PublicKeyName,omitempty" xml:"PublicKeyName,omitempty"`
	// The region ID of the bastion host that is used to modify the public key of the user.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyUserPublicKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserPublicKeyRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserPublicKeyRequest) SetComment(v string) *ModifyUserPublicKeyRequest {
	s.Comment = &v
	return s
}

func (s *ModifyUserPublicKeyRequest) SetInstanceId(v string) *ModifyUserPublicKeyRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyUserPublicKeyRequest) SetPublicKey(v string) *ModifyUserPublicKeyRequest {
	s.PublicKey = &v
	return s
}

func (s *ModifyUserPublicKeyRequest) SetPublicKeyId(v string) *ModifyUserPublicKeyRequest {
	s.PublicKeyId = &v
	return s
}

func (s *ModifyUserPublicKeyRequest) SetPublicKeyName(v string) *ModifyUserPublicKeyRequest {
	s.PublicKeyName = &v
	return s
}

func (s *ModifyUserPublicKeyRequest) SetRegionId(v string) *ModifyUserPublicKeyRequest {
	s.RegionId = &v
	return s
}

type ModifyUserPublicKeyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// AAB631FB-ABD0-5783-99F3-F29573B129E4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserPublicKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserPublicKeyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserPublicKeyResponseBody) SetRequestId(v string) *ModifyUserPublicKeyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserPublicKeyResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyUserPublicKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyUserPublicKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserPublicKeyResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserPublicKeyResponse) SetHeaders(v map[string]*string) *ModifyUserPublicKeyResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserPublicKeyResponse) SetStatusCode(v int32) *ModifyUserPublicKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserPublicKeyResponse) SetBody(v *ModifyUserPublicKeyResponseBody) *ModifyUserPublicKeyResponse {
	s.Body = v
	return s
}

type MoveDatabasesToNetworkDomainRequest struct {
	// The IDs of the databases that you want to add to the network domain.
	//
	// This parameter is required.
	DatabaseIds []*string `json:"DatabaseIds,omitempty" xml:"DatabaseIds,omitempty" type:"Repeated"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-zpr3h2zo60l
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain to which you want to add databases.
	//
	// > You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s MoveDatabasesToNetworkDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveDatabasesToNetworkDomainRequest) GoString() string {
	return s.String()
}

func (s *MoveDatabasesToNetworkDomainRequest) SetDatabaseIds(v []*string) *MoveDatabasesToNetworkDomainRequest {
	s.DatabaseIds = v
	return s
}

func (s *MoveDatabasesToNetworkDomainRequest) SetInstanceId(v string) *MoveDatabasesToNetworkDomainRequest {
	s.InstanceId = &v
	return s
}

func (s *MoveDatabasesToNetworkDomainRequest) SetNetworkDomainId(v string) *MoveDatabasesToNetworkDomainRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *MoveDatabasesToNetworkDomainRequest) SetRegionId(v string) *MoveDatabasesToNetworkDomainRequest {
	s.RegionId = &v
	return s
}

type MoveDatabasesToNetworkDomainResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// E5B1BC32-72B2-5BFD-BF75-5D38261264D1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The results of the call.
	Results []*MoveDatabasesToNetworkDomainResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s MoveDatabasesToNetworkDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveDatabasesToNetworkDomainResponseBody) GoString() string {
	return s.String()
}

func (s *MoveDatabasesToNetworkDomainResponseBody) SetRequestId(v string) *MoveDatabasesToNetworkDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *MoveDatabasesToNetworkDomainResponseBody) SetResults(v []*MoveDatabasesToNetworkDomainResponseBodyResults) *MoveDatabasesToNetworkDomainResponseBody {
	s.Results = v
	return s
}

type MoveDatabasesToNetworkDomainResponseBodyResults struct {
	// Indicates whether the database is added to the network domain.
	//
	// > The code LICENSE_OUT_OF_LIMIT indicates that the network domain feature is not supported by the current Bastionhost edition.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 45
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s MoveDatabasesToNetworkDomainResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s MoveDatabasesToNetworkDomainResponseBodyResults) GoString() string {
	return s.String()
}

func (s *MoveDatabasesToNetworkDomainResponseBodyResults) SetCode(v string) *MoveDatabasesToNetworkDomainResponseBodyResults {
	s.Code = &v
	return s
}

func (s *MoveDatabasesToNetworkDomainResponseBodyResults) SetDatabaseId(v string) *MoveDatabasesToNetworkDomainResponseBodyResults {
	s.DatabaseId = &v
	return s
}

func (s *MoveDatabasesToNetworkDomainResponseBodyResults) SetMessage(v string) *MoveDatabasesToNetworkDomainResponseBodyResults {
	s.Message = &v
	return s
}

type MoveDatabasesToNetworkDomainResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveDatabasesToNetworkDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveDatabasesToNetworkDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveDatabasesToNetworkDomainResponse) GoString() string {
	return s.String()
}

func (s *MoveDatabasesToNetworkDomainResponse) SetHeaders(v map[string]*string) *MoveDatabasesToNetworkDomainResponse {
	s.Headers = v
	return s
}

func (s *MoveDatabasesToNetworkDomainResponse) SetStatusCode(v int32) *MoveDatabasesToNetworkDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveDatabasesToNetworkDomainResponse) SetBody(v *MoveDatabasesToNetworkDomainResponseBody) *MoveDatabasesToNetworkDomainResponse {
	s.Body = v
	return s
}

type MoveHostsToNetworkDomainRequest struct {
	// The IDs of the hosts that you want to add to the network domain.
	//
	// This parameter is required.
	HostIds []*string `json:"HostIds,omitempty" xml:"HostIds,omitempty" type:"Repeated"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-uax2zmx8005
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the network domain to which you want to add hosts.
	//
	// >  You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	NetworkDomainId *string `json:"NetworkDomainId,omitempty" xml:"NetworkDomainId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s MoveHostsToNetworkDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveHostsToNetworkDomainRequest) GoString() string {
	return s.String()
}

func (s *MoveHostsToNetworkDomainRequest) SetHostIds(v []*string) *MoveHostsToNetworkDomainRequest {
	s.HostIds = v
	return s
}

func (s *MoveHostsToNetworkDomainRequest) SetInstanceId(v string) *MoveHostsToNetworkDomainRequest {
	s.InstanceId = &v
	return s
}

func (s *MoveHostsToNetworkDomainRequest) SetNetworkDomainId(v string) *MoveHostsToNetworkDomainRequest {
	s.NetworkDomainId = &v
	return s
}

func (s *MoveHostsToNetworkDomainRequest) SetRegionId(v string) *MoveHostsToNetworkDomainRequest {
	s.RegionId = &v
	return s
}

type MoveHostsToNetworkDomainResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// F9B9E190-9C8E-5FEE-B963-7E9F1FD7FB4E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*MoveHostsToNetworkDomainResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s MoveHostsToNetworkDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveHostsToNetworkDomainResponseBody) GoString() string {
	return s.String()
}

func (s *MoveHostsToNetworkDomainResponseBody) SetRequestId(v string) *MoveHostsToNetworkDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *MoveHostsToNetworkDomainResponseBody) SetResults(v []*MoveHostsToNetworkDomainResponseBodyResults) *MoveHostsToNetworkDomainResponseBody {
	s.Results = v
	return s
}

type MoveHostsToNetworkDomainResponseBodyResults struct {
	// The return code that indicates whether the host is added to the network domain.
	//
	// > The code LICENSE_OUT_OF_LIMIT indicates that the network domain feature is not supported by the current Bastionhost edition.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The host ID.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The error message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s MoveHostsToNetworkDomainResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s MoveHostsToNetworkDomainResponseBodyResults) GoString() string {
	return s.String()
}

func (s *MoveHostsToNetworkDomainResponseBodyResults) SetCode(v string) *MoveHostsToNetworkDomainResponseBodyResults {
	s.Code = &v
	return s
}

func (s *MoveHostsToNetworkDomainResponseBodyResults) SetHostId(v string) *MoveHostsToNetworkDomainResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *MoveHostsToNetworkDomainResponseBodyResults) SetMessage(v string) *MoveHostsToNetworkDomainResponseBodyResults {
	s.Message = &v
	return s
}

type MoveHostsToNetworkDomainResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveHostsToNetworkDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveHostsToNetworkDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveHostsToNetworkDomainResponse) GoString() string {
	return s.String()
}

func (s *MoveHostsToNetworkDomainResponse) SetHeaders(v map[string]*string) *MoveHostsToNetworkDomainResponse {
	s.Headers = v
	return s
}

func (s *MoveHostsToNetworkDomainResponse) SetStatusCode(v int32) *MoveHostsToNetworkDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveHostsToNetworkDomainResponse) SetBody(v *MoveHostsToNetworkDomainResponseBody) *MoveHostsToNetworkDomainResponse {
	s.Body = v
	return s
}

type MoveResourceGroupRequest struct {
	// The region ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the bastion host is moved.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the resource group ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// rg-aekznp3oyo****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the bastion host for which you want to change the resource group.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource. Set the value to **INSTANCE**, which indicates that the resource is a bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s MoveResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupRequest) SetRegionId(v string) *MoveResourceGroupRequest {
	s.RegionId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceGroupId(v string) *MoveResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceId(v string) *MoveResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceType(v string) *MoveResourceGroupRequest {
	s.ResourceType = &v
	return s
}

type MoveResourceGroupResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 1DEEC28D-27B1-4358-B6DC-E1285AE655C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MoveResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupResponseBody) SetRequestId(v string) *MoveResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type MoveResourceGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupResponse) SetHeaders(v map[string]*string) *MoveResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *MoveResourceGroupResponse) SetStatusCode(v int32) *MoveResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveResourceGroupResponse) SetBody(v *MoveResourceGroupResponseBody) *MoveResourceGroupResponse {
	s.Body = v
	return s
}

type RejectApproveCommandRequest struct {
	// The ID of the command that you want to reject.
	//
	// >  You can call the [ListApproveCommands](https://help.aliyun.com/document_detail/2584310.html) operation to query the IDs of all commands that need to be reviewed.
	//
	// This parameter is required.
	//
	// example:
	//
	// 574
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RejectApproveCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectApproveCommandRequest) GoString() string {
	return s.String()
}

func (s *RejectApproveCommandRequest) SetCommandId(v string) *RejectApproveCommandRequest {
	s.CommandId = &v
	return s
}

func (s *RejectApproveCommandRequest) SetInstanceId(v string) *RejectApproveCommandRequest {
	s.InstanceId = &v
	return s
}

func (s *RejectApproveCommandRequest) SetRegionId(v string) *RejectApproveCommandRequest {
	s.RegionId = &v
	return s
}

type RejectApproveCommandResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RejectApproveCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RejectApproveCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RejectApproveCommandResponseBody) SetRequestId(v string) *RejectApproveCommandResponseBody {
	s.RequestId = &v
	return s
}

type RejectApproveCommandResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RejectApproveCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RejectApproveCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectApproveCommandResponse) GoString() string {
	return s.String()
}

func (s *RejectApproveCommandResponse) SetHeaders(v map[string]*string) *RejectApproveCommandResponse {
	s.Headers = v
	return s
}

func (s *RejectApproveCommandResponse) SetStatusCode(v int32) *RejectApproveCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *RejectApproveCommandResponse) SetBody(v *RejectApproveCommandResponseBody) *RejectApproveCommandResponse {
	s.Body = v
	return s
}

type RejectOperationTicketRequest struct {
	// The review remarks.
	//
	// example:
	//
	// comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the bastion host.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the O\\&M application that you want to reject.
	//
	// >  You can call the [ListOperationTickets](https://help.aliyun.com/document_detail/2584313.html) operation to query the IDs of all O\\&M applications that require review.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	OperationTicketId *string `json:"OperationTicketId,omitempty" xml:"OperationTicketId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RejectOperationTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectOperationTicketRequest) GoString() string {
	return s.String()
}

func (s *RejectOperationTicketRequest) SetComment(v string) *RejectOperationTicketRequest {
	s.Comment = &v
	return s
}

func (s *RejectOperationTicketRequest) SetInstanceId(v string) *RejectOperationTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *RejectOperationTicketRequest) SetOperationTicketId(v string) *RejectOperationTicketRequest {
	s.OperationTicketId = &v
	return s
}

func (s *RejectOperationTicketRequest) SetRegionId(v string) *RejectOperationTicketRequest {
	s.RegionId = &v
	return s
}

type RejectOperationTicketResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RejectOperationTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RejectOperationTicketResponseBody) GoString() string {
	return s.String()
}

func (s *RejectOperationTicketResponseBody) SetRequestId(v string) *RejectOperationTicketResponseBody {
	s.RequestId = &v
	return s
}

type RejectOperationTicketResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RejectOperationTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RejectOperationTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectOperationTicketResponse) GoString() string {
	return s.String()
}

func (s *RejectOperationTicketResponse) SetHeaders(v map[string]*string) *RejectOperationTicketResponse {
	s.Headers = v
	return s
}

func (s *RejectOperationTicketResponse) SetStatusCode(v int32) *RejectOperationTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *RejectOperationTicketResponse) SetBody(v *RejectOperationTicketResponseBody) *RejectOperationTicketResponse {
	s.Body = v
	return s
}

type RemoveDatabasesFromGroupRequest struct {
	// The IDs of the databases that you want to remove.
	//
	// This parameter is required.
	DatabaseIds []*string `json:"DatabaseIds,omitempty" xml:"DatabaseIds,omitempty" type:"Repeated"`
	// The ID of the asset group from which you want to remove databases.
	//
	// > You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the bastion host whose asset group you want to manage.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host whose asset group you want to manage.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RemoveDatabasesFromGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveDatabasesFromGroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveDatabasesFromGroupRequest) SetDatabaseIds(v []*string) *RemoveDatabasesFromGroupRequest {
	s.DatabaseIds = v
	return s
}

func (s *RemoveDatabasesFromGroupRequest) SetHostGroupId(v string) *RemoveDatabasesFromGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *RemoveDatabasesFromGroupRequest) SetInstanceId(v string) *RemoveDatabasesFromGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveDatabasesFromGroupRequest) SetRegionId(v string) *RemoveDatabasesFromGroupRequest {
	s.RegionId = &v
	return s
}

type RemoveDatabasesFromGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*RemoveDatabasesFromGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s RemoveDatabasesFromGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveDatabasesFromGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveDatabasesFromGroupResponseBody) SetRequestId(v string) *RemoveDatabasesFromGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveDatabasesFromGroupResponseBody) SetResults(v []*RemoveDatabasesFromGroupResponseBodyResults) *RemoveDatabasesFromGroupResponseBody {
	s.Results = v
	return s
}

type RemoveDatabasesFromGroupResponseBodyResults struct {
	// The error code that is returned. If OK is returned, the operation was successful. If another error code is returned, the operation failed.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The database ID.
	//
	// example:
	//
	// 20
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The asset group ID.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The error message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s RemoveDatabasesFromGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s RemoveDatabasesFromGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *RemoveDatabasesFromGroupResponseBodyResults) SetCode(v string) *RemoveDatabasesFromGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *RemoveDatabasesFromGroupResponseBodyResults) SetDatabaseId(v string) *RemoveDatabasesFromGroupResponseBodyResults {
	s.DatabaseId = &v
	return s
}

func (s *RemoveDatabasesFromGroupResponseBodyResults) SetHostGroupId(v string) *RemoveDatabasesFromGroupResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *RemoveDatabasesFromGroupResponseBodyResults) SetMessage(v string) *RemoveDatabasesFromGroupResponseBodyResults {
	s.Message = &v
	return s
}

type RemoveDatabasesFromGroupResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveDatabasesFromGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveDatabasesFromGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveDatabasesFromGroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveDatabasesFromGroupResponse) SetHeaders(v map[string]*string) *RemoveDatabasesFromGroupResponse {
	s.Headers = v
	return s
}

func (s *RemoveDatabasesFromGroupResponse) SetStatusCode(v int32) *RemoveDatabasesFromGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveDatabasesFromGroupResponse) SetBody(v *RemoveDatabasesFromGroupResponseBody) *RemoveDatabasesFromGroupResponse {
	s.Body = v
	return s
}

type RemoveHostsFromGroupRequest struct {
	// The ID of the asset group from which you want to remove hosts.
	//
	// >  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The IDs of the hosts that you want to remove from the host group. Specify a JSON string. You can specify up to 100 host IDs.
	//
	// >  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the host IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2","3"]
	HostIds *string `json:"HostIds,omitempty" xml:"HostIds,omitempty"`
	// The ID of the bastion host whose asset group you want to manage.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host whose asset group you want to manage.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RemoveHostsFromGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveHostsFromGroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveHostsFromGroupRequest) SetHostGroupId(v string) *RemoveHostsFromGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *RemoveHostsFromGroupRequest) SetHostIds(v string) *RemoveHostsFromGroupRequest {
	s.HostIds = &v
	return s
}

func (s *RemoveHostsFromGroupRequest) SetInstanceId(v string) *RemoveHostsFromGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveHostsFromGroupRequest) SetRegionId(v string) *RemoveHostsFromGroupRequest {
	s.RegionId = &v
	return s
}

type RemoveHostsFromGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*RemoveHostsFromGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s RemoveHostsFromGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveHostsFromGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveHostsFromGroupResponseBody) SetRequestId(v string) *RemoveHostsFromGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveHostsFromGroupResponseBody) SetResults(v []*RemoveHostsFromGroupResponseBodyResults) *RemoveHostsFromGroupResponseBody {
	s.Results = v
	return s
}

type RemoveHostsFromGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	//     > Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	//     > Make sure that the specified bastion host ID and host IDs are valid and call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the asset group.
	//
	// example:
	//
	// 1
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	// The ID of the host.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// 无
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s RemoveHostsFromGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s RemoveHostsFromGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *RemoveHostsFromGroupResponseBodyResults) SetCode(v string) *RemoveHostsFromGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *RemoveHostsFromGroupResponseBodyResults) SetHostGroupId(v string) *RemoveHostsFromGroupResponseBodyResults {
	s.HostGroupId = &v
	return s
}

func (s *RemoveHostsFromGroupResponseBodyResults) SetHostId(v string) *RemoveHostsFromGroupResponseBodyResults {
	s.HostId = &v
	return s
}

func (s *RemoveHostsFromGroupResponseBodyResults) SetMessage(v string) *RemoveHostsFromGroupResponseBodyResults {
	s.Message = &v
	return s
}

type RemoveHostsFromGroupResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveHostsFromGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveHostsFromGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveHostsFromGroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveHostsFromGroupResponse) SetHeaders(v map[string]*string) *RemoveHostsFromGroupResponse {
	s.Headers = v
	return s
}

func (s *RemoveHostsFromGroupResponse) SetStatusCode(v int32) *RemoveHostsFromGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveHostsFromGroupResponse) SetBody(v *RemoveHostsFromGroupResponseBody) *RemoveHostsFromGroupResponse {
	s.Body = v
	return s
}

type RemoveUsersFromGroupRequest struct {
	// The ID of the bastion host for which you want to remove users from the user group.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host for which you want to remove users from the user group.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user group from which you want to remove users.
	//
	// >  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.
	//
	// This parameter is required.
	//
	// example:
	//
	// １
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The ID of the user who you want to remove. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).
	//
	// >  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the IDs of users.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2","3"]
	UserIds *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s RemoveUsersFromGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromGroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromGroupRequest) SetInstanceId(v string) *RemoveUsersFromGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveUsersFromGroupRequest) SetRegionId(v string) *RemoveUsersFromGroupRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveUsersFromGroupRequest) SetUserGroupId(v string) *RemoveUsersFromGroupRequest {
	s.UserGroupId = &v
	return s
}

func (s *RemoveUsersFromGroupRequest) SetUserIds(v string) *RemoveUsersFromGroupRequest {
	s.UserIds = &v
	return s
}

type RemoveUsersFromGroupResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the call.
	Results []*RemoveUsersFromGroupResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s RemoveUsersFromGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromGroupResponseBody) SetRequestId(v string) *RemoveUsersFromGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveUsersFromGroupResponseBody) SetResults(v []*RemoveUsersFromGroupResponseBodyResults) *RemoveUsersFromGroupResponseBody {
	s.Results = v
	return s
}

type RemoveUsersFromGroupResponseBodyResults struct {
	// The return code that indicates whether the call was successful. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	// > Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	// > Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// 1
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RemoveUsersFromGroupResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromGroupResponseBodyResults) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromGroupResponseBodyResults) SetCode(v string) *RemoveUsersFromGroupResponseBodyResults {
	s.Code = &v
	return s
}

func (s *RemoveUsersFromGroupResponseBodyResults) SetMessage(v string) *RemoveUsersFromGroupResponseBodyResults {
	s.Message = &v
	return s
}

func (s *RemoveUsersFromGroupResponseBodyResults) SetUserGroupId(v string) *RemoveUsersFromGroupResponseBodyResults {
	s.UserGroupId = &v
	return s
}

func (s *RemoveUsersFromGroupResponseBodyResults) SetUserId(v string) *RemoveUsersFromGroupResponseBodyResults {
	s.UserId = &v
	return s
}

type RemoveUsersFromGroupResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveUsersFromGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveUsersFromGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromGroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromGroupResponse) SetHeaders(v map[string]*string) *RemoveUsersFromGroupResponse {
	s.Headers = v
	return s
}

func (s *RemoveUsersFromGroupResponse) SetStatusCode(v int32) *RemoveUsersFromGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveUsersFromGroupResponse) SetBody(v *RemoveUsersFromGroupResponseBody) *RemoveUsersFromGroupResponse {
	s.Body = v
	return s
}

type RenewAssetOperationTokenRequest struct {
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the O\\&M token that you want to renew.
	//
	// >  You can call the [GenerateAssetOperationToken](https://help.aliyun.com/document_detail/2758861.html) operation to query the O\\&M token ID.
	//
	// example:
	//
	// NmYyMmEzNmMwYzljNGYxMjh******
	TokenId *string `json:"TokenId,omitempty" xml:"TokenId,omitempty"`
}

func (s RenewAssetOperationTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewAssetOperationTokenRequest) GoString() string {
	return s.String()
}

func (s *RenewAssetOperationTokenRequest) SetInstanceId(v string) *RenewAssetOperationTokenRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewAssetOperationTokenRequest) SetRegionId(v string) *RenewAssetOperationTokenRequest {
	s.RegionId = &v
	return s
}

func (s *RenewAssetOperationTokenRequest) SetTokenId(v string) *RenewAssetOperationTokenRequest {
	s.TokenId = &v
	return s
}

type RenewAssetOperationTokenResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewAssetOperationTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewAssetOperationTokenResponseBody) GoString() string {
	return s.String()
}

func (s *RenewAssetOperationTokenResponseBody) SetRequestId(v string) *RenewAssetOperationTokenResponseBody {
	s.RequestId = &v
	return s
}

type RenewAssetOperationTokenResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewAssetOperationTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewAssetOperationTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewAssetOperationTokenResponse) GoString() string {
	return s.String()
}

func (s *RenewAssetOperationTokenResponse) SetHeaders(v map[string]*string) *RenewAssetOperationTokenResponse {
	s.Headers = v
	return s
}

func (s *RenewAssetOperationTokenResponse) SetStatusCode(v int32) *RenewAssetOperationTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewAssetOperationTokenResponse) SetBody(v *RenewAssetOperationTokenResponseBody) *RenewAssetOperationTokenResponse {
	s.Body = v
	return s
}

type ResetHostAccountCredentialRequest struct {
	// The type of the logon credential that you want to delete. Valid values:
	//
	// 	- **Password**
	//
	// 	- **PrivateKey**
	//
	// This parameter is required.
	//
	// example:
	//
	// Password
	CredentialType *string `json:"CredentialType,omitempty" xml:"CredentialType,omitempty"`
	// The ID of the host account for which the logon credential is to be deleted.
	//
	// >  You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	HostAccountId *string `json:"HostAccountId,omitempty" xml:"HostAccountId,omitempty"`
	// The ID of the bastion host from which you want to delete the logon credential for the host account.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host from which you want to delete the logon credential for the host account.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ResetHostAccountCredentialRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetHostAccountCredentialRequest) GoString() string {
	return s.String()
}

func (s *ResetHostAccountCredentialRequest) SetCredentialType(v string) *ResetHostAccountCredentialRequest {
	s.CredentialType = &v
	return s
}

func (s *ResetHostAccountCredentialRequest) SetHostAccountId(v string) *ResetHostAccountCredentialRequest {
	s.HostAccountId = &v
	return s
}

func (s *ResetHostAccountCredentialRequest) SetInstanceId(v string) *ResetHostAccountCredentialRequest {
	s.InstanceId = &v
	return s
}

func (s *ResetHostAccountCredentialRequest) SetRegionId(v string) *ResetHostAccountCredentialRequest {
	s.RegionId = &v
	return s
}

type ResetHostAccountCredentialResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8783-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetHostAccountCredentialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetHostAccountCredentialResponseBody) GoString() string {
	return s.String()
}

func (s *ResetHostAccountCredentialResponseBody) SetRequestId(v string) *ResetHostAccountCredentialResponseBody {
	s.RequestId = &v
	return s
}

type ResetHostAccountCredentialResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetHostAccountCredentialResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetHostAccountCredentialResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetHostAccountCredentialResponse) GoString() string {
	return s.String()
}

func (s *ResetHostAccountCredentialResponse) SetHeaders(v map[string]*string) *ResetHostAccountCredentialResponse {
	s.Headers = v
	return s
}

func (s *ResetHostAccountCredentialResponse) SetStatusCode(v int32) *ResetHostAccountCredentialResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetHostAccountCredentialResponse) SetBody(v *ResetHostAccountCredentialResponseBody) *ResetHostAccountCredentialResponse {
	s.Body = v
	return s
}

type SetPolicyAccessTimeRangeConfigRequest struct {
	// The logon period limits.
	//
	// This parameter is required.
	AccessTimeRangeConfig *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfig `json:"AccessTimeRangeConfig,omitempty" xml:"AccessTimeRangeConfig,omitempty" type:"Struct"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The control policy ID.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 13
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyAccessTimeRangeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAccessTimeRangeConfigRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyAccessTimeRangeConfigRequest) SetAccessTimeRangeConfig(v *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfig) *SetPolicyAccessTimeRangeConfigRequest {
	s.AccessTimeRangeConfig = v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigRequest) SetInstanceId(v string) *SetPolicyAccessTimeRangeConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigRequest) SetPolicyId(v string) *SetPolicyAccessTimeRangeConfigRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigRequest) SetRegionId(v string) *SetPolicyAccessTimeRangeConfigRequest {
	s.RegionId = &v
	return s
}

type SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfig struct {
	// The details about the periods during which users can log on to the assets.
	EffectiveTime []*SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty" type:"Repeated"`
}

func (s SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfig) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfig) GoString() string {
	return s.String()
}

func (s *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfig) SetEffectiveTime(v []*SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime) *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfig {
	s.EffectiveTime = v
	return s
}

type SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime struct {
	// The days of the week during which users can log on to the assets.
	Days []*int32 `json:"Days,omitempty" xml:"Days,omitempty" type:"Repeated"`
	// The time periods of the day during which users can log on to the assets.
	Hours []*int32 `json:"Hours,omitempty" xml:"Hours,omitempty" type:"Repeated"`
}

func (s SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime) GoString() string {
	return s.String()
}

func (s *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime) SetDays(v []*int32) *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime {
	s.Days = v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime) SetHours(v []*int32) *SetPolicyAccessTimeRangeConfigRequestAccessTimeRangeConfigEffectiveTime {
	s.Hours = v
	return s
}

type SetPolicyAccessTimeRangeConfigShrinkRequest struct {
	// The logon period limits.
	//
	// This parameter is required.
	AccessTimeRangeConfigShrink *string `json:"AccessTimeRangeConfig,omitempty" xml:"AccessTimeRangeConfig,omitempty"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The control policy ID.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 13
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyAccessTimeRangeConfigShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAccessTimeRangeConfigShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyAccessTimeRangeConfigShrinkRequest) SetAccessTimeRangeConfigShrink(v string) *SetPolicyAccessTimeRangeConfigShrinkRequest {
	s.AccessTimeRangeConfigShrink = &v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigShrinkRequest) SetInstanceId(v string) *SetPolicyAccessTimeRangeConfigShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigShrinkRequest) SetPolicyId(v string) *SetPolicyAccessTimeRangeConfigShrinkRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigShrinkRequest) SetRegionId(v string) *SetPolicyAccessTimeRangeConfigShrinkRequest {
	s.RegionId = &v
	return s
}

type SetPolicyAccessTimeRangeConfigResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPolicyAccessTimeRangeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAccessTimeRangeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetPolicyAccessTimeRangeConfigResponseBody) SetRequestId(v string) *SetPolicyAccessTimeRangeConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetPolicyAccessTimeRangeConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPolicyAccessTimeRangeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPolicyAccessTimeRangeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAccessTimeRangeConfigResponse) GoString() string {
	return s.String()
}

func (s *SetPolicyAccessTimeRangeConfigResponse) SetHeaders(v map[string]*string) *SetPolicyAccessTimeRangeConfigResponse {
	s.Headers = v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigResponse) SetStatusCode(v int32) *SetPolicyAccessTimeRangeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPolicyAccessTimeRangeConfigResponse) SetBody(v *SetPolicyAccessTimeRangeConfigResponseBody) *SetPolicyAccessTimeRangeConfigResponse {
	s.Body = v
	return s
}

type SetPolicyApprovalConfigRequest struct {
	// The O&M approval setting in the control policy.
	//
	// This parameter is required.
	ApprovalConfig *SetPolicyApprovalConfigRequestApprovalConfig `json:"ApprovalConfig,omitempty" xml:"ApprovalConfig,omitempty" type:"Struct"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyApprovalConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyApprovalConfigRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyApprovalConfigRequest) SetApprovalConfig(v *SetPolicyApprovalConfigRequestApprovalConfig) *SetPolicyApprovalConfigRequest {
	s.ApprovalConfig = v
	return s
}

func (s *SetPolicyApprovalConfigRequest) SetInstanceId(v string) *SetPolicyApprovalConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyApprovalConfigRequest) SetPolicyId(v string) *SetPolicyApprovalConfigRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyApprovalConfigRequest) SetRegionId(v string) *SetPolicyApprovalConfigRequest {
	s.RegionId = &v
	return s
}

type SetPolicyApprovalConfigRequestApprovalConfig struct {
	// Specifies whether to enable O&M approval in the control policy. Valid values:
	//
	// 	- **On**: enables O&M approval.
	//
	// 	- **Off**: disables O&M approval.
	//
	// This parameter is required.
	//
	// example:
	//
	// On
	SwitchStatus *string `json:"SwitchStatus,omitempty" xml:"SwitchStatus,omitempty"`
}

func (s SetPolicyApprovalConfigRequestApprovalConfig) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyApprovalConfigRequestApprovalConfig) GoString() string {
	return s.String()
}

func (s *SetPolicyApprovalConfigRequestApprovalConfig) SetSwitchStatus(v string) *SetPolicyApprovalConfigRequestApprovalConfig {
	s.SwitchStatus = &v
	return s
}

type SetPolicyApprovalConfigShrinkRequest struct {
	// The O&M approval setting in the control policy.
	//
	// This parameter is required.
	ApprovalConfigShrink *string `json:"ApprovalConfig,omitempty" xml:"ApprovalConfig,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyApprovalConfigShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyApprovalConfigShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyApprovalConfigShrinkRequest) SetApprovalConfigShrink(v string) *SetPolicyApprovalConfigShrinkRequest {
	s.ApprovalConfigShrink = &v
	return s
}

func (s *SetPolicyApprovalConfigShrinkRequest) SetInstanceId(v string) *SetPolicyApprovalConfigShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyApprovalConfigShrinkRequest) SetPolicyId(v string) *SetPolicyApprovalConfigShrinkRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyApprovalConfigShrinkRequest) SetRegionId(v string) *SetPolicyApprovalConfigShrinkRequest {
	s.RegionId = &v
	return s
}

type SetPolicyApprovalConfigResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPolicyApprovalConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyApprovalConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetPolicyApprovalConfigResponseBody) SetRequestId(v string) *SetPolicyApprovalConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetPolicyApprovalConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPolicyApprovalConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPolicyApprovalConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyApprovalConfigResponse) GoString() string {
	return s.String()
}

func (s *SetPolicyApprovalConfigResponse) SetHeaders(v map[string]*string) *SetPolicyApprovalConfigResponse {
	s.Headers = v
	return s
}

func (s *SetPolicyApprovalConfigResponse) SetStatusCode(v int32) *SetPolicyApprovalConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPolicyApprovalConfigResponse) SetBody(v *SetPolicyApprovalConfigResponseBody) *SetPolicyApprovalConfigResponse {
	s.Body = v
	return s
}

type SetPolicyAssetScopeRequest struct {
	// The databases to which the control policy applies.
	//
	// >  This parameter is required if ScopeType is set to Database. You can specify up to 500 databases.
	Databases []*SetPolicyAssetScopeRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The asset groups to which the control policy applies.
	//
	// > This parameter is required if ScopeType is set to HostGroup. You can specify up to 100 asset groups.
	HostGroups []*SetPolicyAssetScopeRequestHostGroups `json:"HostGroups,omitempty" xml:"HostGroups,omitempty" type:"Repeated"`
	// The hosts to which the control policy applies.
	//
	// > This parameter is required if ScopeType is set to Host. You can specify up to 500 hosts.
	Hosts []*SetPolicyAssetScopeRequestHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The scope of assets to which the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all assets.
	//
	// 	- **Host**: The control policy applies to specified hosts.
	//
	// 	- **Database**: The control policy applies to specified databases.
	//
	// 	- **HostGroup**: The control policy applies to specified asset groups.
	//
	// This parameter is required.
	//
	// example:
	//
	// All
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
}

func (s SetPolicyAssetScopeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAssetScopeRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyAssetScopeRequest) SetDatabases(v []*SetPolicyAssetScopeRequestDatabases) *SetPolicyAssetScopeRequest {
	s.Databases = v
	return s
}

func (s *SetPolicyAssetScopeRequest) SetHostGroups(v []*SetPolicyAssetScopeRequestHostGroups) *SetPolicyAssetScopeRequest {
	s.HostGroups = v
	return s
}

func (s *SetPolicyAssetScopeRequest) SetHosts(v []*SetPolicyAssetScopeRequestHosts) *SetPolicyAssetScopeRequest {
	s.Hosts = v
	return s
}

func (s *SetPolicyAssetScopeRequest) SetInstanceId(v string) *SetPolicyAssetScopeRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyAssetScopeRequest) SetPolicyId(v string) *SetPolicyAssetScopeRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyAssetScopeRequest) SetRegionId(v string) *SetPolicyAssetScopeRequest {
	s.RegionId = &v
	return s
}

func (s *SetPolicyAssetScopeRequest) SetScopeType(v string) *SetPolicyAssetScopeRequest {
	s.ScopeType = &v
	return s
}

type SetPolicyAssetScopeRequestDatabases struct {
	// The scope of database accounts to which the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all database accounts of the database.
	//
	// 	- **AccountId**: The control policy applies to specified database accounts of the database.
	//
	// example:
	//
	// AccountId
	AccountScopeType *string `json:"AccountScopeType,omitempty" xml:"AccountScopeType,omitempty"`
	// The database accounts to which the control policy applies.
	//
	// >  This parameter is required if AccountScopeType is set to AccountId.
	DatabaseAccountIds []*string `json:"DatabaseAccountIds,omitempty" xml:"DatabaseAccountIds,omitempty" type:"Repeated"`
	// The database ID.
	//
	// example:
	//
	// 3
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
}

func (s SetPolicyAssetScopeRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAssetScopeRequestDatabases) GoString() string {
	return s.String()
}

func (s *SetPolicyAssetScopeRequestDatabases) SetAccountScopeType(v string) *SetPolicyAssetScopeRequestDatabases {
	s.AccountScopeType = &v
	return s
}

func (s *SetPolicyAssetScopeRequestDatabases) SetDatabaseAccountIds(v []*string) *SetPolicyAssetScopeRequestDatabases {
	s.DatabaseAccountIds = v
	return s
}

func (s *SetPolicyAssetScopeRequestDatabases) SetDatabaseId(v string) *SetPolicyAssetScopeRequestDatabases {
	s.DatabaseId = &v
	return s
}

type SetPolicyAssetScopeRequestHostGroups struct {
	// The asset accounts to which the control policy applies.
	//
	// > This parameter is required if AccountScopeType is set to AccountName.
	AccountNames []*string `json:"AccountNames,omitempty" xml:"AccountNames,omitempty" type:"Repeated"`
	// The scope of asset accounts to which the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all accounts in the asset group.
	//
	// 	- **AccountName**: The control policy applies to specified accounts in the asset group.
	//
	// example:
	//
	// All
	AccountScopeType *string `json:"AccountScopeType,omitempty" xml:"AccountScopeType,omitempty"`
	// The asset group ID.
	//
	// example:
	//
	// 86
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
}

func (s SetPolicyAssetScopeRequestHostGroups) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAssetScopeRequestHostGroups) GoString() string {
	return s.String()
}

func (s *SetPolicyAssetScopeRequestHostGroups) SetAccountNames(v []*string) *SetPolicyAssetScopeRequestHostGroups {
	s.AccountNames = v
	return s
}

func (s *SetPolicyAssetScopeRequestHostGroups) SetAccountScopeType(v string) *SetPolicyAssetScopeRequestHostGroups {
	s.AccountScopeType = &v
	return s
}

func (s *SetPolicyAssetScopeRequestHostGroups) SetHostGroupId(v string) *SetPolicyAssetScopeRequestHostGroups {
	s.HostGroupId = &v
	return s
}

type SetPolicyAssetScopeRequestHosts struct {
	// The scope of host accounts to which the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all accounts of the host.
	//
	// 	- **AccountId**: The control policy applies specified accounts of the host.
	//
	// example:
	//
	// All
	AccountScopeType *string `json:"AccountScopeType,omitempty" xml:"AccountScopeType,omitempty"`
	// The host accounts to which the control policy applies.
	//
	// > This parameter is required if AccountScopeType is set to AccountId.
	HostAccountIds []*string `json:"HostAccountIds,omitempty" xml:"HostAccountIds,omitempty" type:"Repeated"`
	// The host ID.
	//
	// example:
	//
	// 1
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s SetPolicyAssetScopeRequestHosts) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAssetScopeRequestHosts) GoString() string {
	return s.String()
}

func (s *SetPolicyAssetScopeRequestHosts) SetAccountScopeType(v string) *SetPolicyAssetScopeRequestHosts {
	s.AccountScopeType = &v
	return s
}

func (s *SetPolicyAssetScopeRequestHosts) SetHostAccountIds(v []*string) *SetPolicyAssetScopeRequestHosts {
	s.HostAccountIds = v
	return s
}

func (s *SetPolicyAssetScopeRequestHosts) SetHostId(v string) *SetPolicyAssetScopeRequestHosts {
	s.HostId = &v
	return s
}

type SetPolicyAssetScopeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5EAB922E-F476-5DFA-9290-313C608E724B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPolicyAssetScopeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAssetScopeResponseBody) GoString() string {
	return s.String()
}

func (s *SetPolicyAssetScopeResponseBody) SetRequestId(v string) *SetPolicyAssetScopeResponseBody {
	s.RequestId = &v
	return s
}

type SetPolicyAssetScopeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPolicyAssetScopeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPolicyAssetScopeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyAssetScopeResponse) GoString() string {
	return s.String()
}

func (s *SetPolicyAssetScopeResponse) SetHeaders(v map[string]*string) *SetPolicyAssetScopeResponse {
	s.Headers = v
	return s
}

func (s *SetPolicyAssetScopeResponse) SetStatusCode(v int32) *SetPolicyAssetScopeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPolicyAssetScopeResponse) SetBody(v *SetPolicyAssetScopeResponseBody) *SetPolicyAssetScopeResponse {
	s.Body = v
	return s
}

type SetPolicyCommandConfigRequest struct {
	// The command control settings.
	//
	// > This parameter applies only to Linux hosts.
	//
	// This parameter is required.
	CommandConfig *SetPolicyCommandConfigRequestCommandConfig `json:"CommandConfig,omitempty" xml:"CommandConfig,omitempty" type:"Struct"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// > You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 45
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyCommandConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyCommandConfigRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyCommandConfigRequest) SetCommandConfig(v *SetPolicyCommandConfigRequestCommandConfig) *SetPolicyCommandConfigRequest {
	s.CommandConfig = v
	return s
}

func (s *SetPolicyCommandConfigRequest) SetInstanceId(v string) *SetPolicyCommandConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyCommandConfigRequest) SetPolicyId(v string) *SetPolicyCommandConfigRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyCommandConfigRequest) SetRegionId(v string) *SetPolicyCommandConfigRequest {
	s.RegionId = &v
	return s
}

type SetPolicyCommandConfigRequestCommandConfig struct {
	// The command approval settings.
	//
	// > A command approval policy is used to approve the commands that are excluded from a whitelist or blacklist specified in a command control policy. The command control policy takes precedence over the command approval policy in validation.
	Approval *SetPolicyCommandConfigRequestCommandConfigApproval `json:"Approval,omitempty" xml:"Approval,omitempty" type:"Struct"`
	// The command control settings.
	//
	// This parameter is required.
	Deny *SetPolicyCommandConfigRequestCommandConfigDeny `json:"Deny,omitempty" xml:"Deny,omitempty" type:"Struct"`
}

func (s SetPolicyCommandConfigRequestCommandConfig) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyCommandConfigRequestCommandConfig) GoString() string {
	return s.String()
}

func (s *SetPolicyCommandConfigRequestCommandConfig) SetApproval(v *SetPolicyCommandConfigRequestCommandConfigApproval) *SetPolicyCommandConfigRequestCommandConfig {
	s.Approval = v
	return s
}

func (s *SetPolicyCommandConfigRequestCommandConfig) SetDeny(v *SetPolicyCommandConfigRequestCommandConfigDeny) *SetPolicyCommandConfigRequestCommandConfig {
	s.Deny = v
	return s
}

type SetPolicyCommandConfigRequestCommandConfigApproval struct {
	// The commands that can be run only after approval.
	Commands []*string `json:"Commands,omitempty" xml:"Commands,omitempty" type:"Repeated"`
}

func (s SetPolicyCommandConfigRequestCommandConfigApproval) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyCommandConfigRequestCommandConfigApproval) GoString() string {
	return s.String()
}

func (s *SetPolicyCommandConfigRequestCommandConfigApproval) SetCommands(v []*string) *SetPolicyCommandConfigRequestCommandConfigApproval {
	s.Commands = v
	return s
}

type SetPolicyCommandConfigRequestCommandConfigDeny struct {
	// The type of command control. Valid values:
	//
	// 	- **black**: blacklist mode.
	//
	// 	- **white**: whitelist mode.
	//
	// This parameter is required.
	//
	// example:
	//
	// white
	AclType *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	// The commands to be controlled.
	//
	// > This parameter is required if AclType is set to white.
	Commands []*string `json:"Commands,omitempty" xml:"Commands,omitempty" type:"Repeated"`
}

func (s SetPolicyCommandConfigRequestCommandConfigDeny) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyCommandConfigRequestCommandConfigDeny) GoString() string {
	return s.String()
}

func (s *SetPolicyCommandConfigRequestCommandConfigDeny) SetAclType(v string) *SetPolicyCommandConfigRequestCommandConfigDeny {
	s.AclType = &v
	return s
}

func (s *SetPolicyCommandConfigRequestCommandConfigDeny) SetCommands(v []*string) *SetPolicyCommandConfigRequestCommandConfigDeny {
	s.Commands = v
	return s
}

type SetPolicyCommandConfigShrinkRequest struct {
	// The command control settings.
	//
	// > This parameter applies only to Linux hosts.
	//
	// This parameter is required.
	CommandConfigShrink *string `json:"CommandConfig,omitempty" xml:"CommandConfig,omitempty"`
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1ghxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// > You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 45
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyCommandConfigShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyCommandConfigShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyCommandConfigShrinkRequest) SetCommandConfigShrink(v string) *SetPolicyCommandConfigShrinkRequest {
	s.CommandConfigShrink = &v
	return s
}

func (s *SetPolicyCommandConfigShrinkRequest) SetInstanceId(v string) *SetPolicyCommandConfigShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyCommandConfigShrinkRequest) SetPolicyId(v string) *SetPolicyCommandConfigShrinkRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyCommandConfigShrinkRequest) SetRegionId(v string) *SetPolicyCommandConfigShrinkRequest {
	s.RegionId = &v
	return s
}

type SetPolicyCommandConfigResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4F6C075F-FC86-476E-943B-097BD4E12948
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPolicyCommandConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyCommandConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetPolicyCommandConfigResponseBody) SetRequestId(v string) *SetPolicyCommandConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetPolicyCommandConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPolicyCommandConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPolicyCommandConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyCommandConfigResponse) GoString() string {
	return s.String()
}

func (s *SetPolicyCommandConfigResponse) SetHeaders(v map[string]*string) *SetPolicyCommandConfigResponse {
	s.Headers = v
	return s
}

func (s *SetPolicyCommandConfigResponse) SetStatusCode(v int32) *SetPolicyCommandConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPolicyCommandConfigResponse) SetBody(v *SetPolicyCommandConfigResponseBody) *SetPolicyCommandConfigResponse {
	s.Body = v
	return s
}

type SetPolicyIPAclConfigRequest struct {
	// The access control settings for source IP addresses.
	//
	// This parameter is required.
	IPAclConfig *SetPolicyIPAclConfigRequestIPAclConfig `json:"IPAclConfig,omitempty" xml:"IPAclConfig,omitempty" type:"Struct"`
	// The bastion host ID.
	//
	// > You can call the DescribeInstances operation to query the bastion host ID.[](~~153281~~)
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyIPAclConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyIPAclConfigRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyIPAclConfigRequest) SetIPAclConfig(v *SetPolicyIPAclConfigRequestIPAclConfig) *SetPolicyIPAclConfigRequest {
	s.IPAclConfig = v
	return s
}

func (s *SetPolicyIPAclConfigRequest) SetInstanceId(v string) *SetPolicyIPAclConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyIPAclConfigRequest) SetPolicyId(v string) *SetPolicyIPAclConfigRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyIPAclConfigRequest) SetRegionId(v string) *SetPolicyIPAclConfigRequest {
	s.RegionId = &v
	return s
}

type SetPolicyIPAclConfigRequestIPAclConfig struct {
	// The mode of access control on source IP addresses. Valid values:
	//
	// 	- **black**: blacklist mode.
	//
	// 	- **white**: whitelist mode.
	//
	// This parameter is required.
	//
	// example:
	//
	// white
	AclType *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	// The source IP addresses in the blacklist or whitelist.
	//
	// >
	//
	// 	- This parameter is required if AclType is set to white.
	//
	// 	- If AclType is set to black but you do not want to add IP addresses to the blacklist, you can leave IPs empty.
	//
	// This parameter is required.
	IPs []*string `json:"IPs,omitempty" xml:"IPs,omitempty" type:"Repeated"`
}

func (s SetPolicyIPAclConfigRequestIPAclConfig) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyIPAclConfigRequestIPAclConfig) GoString() string {
	return s.String()
}

func (s *SetPolicyIPAclConfigRequestIPAclConfig) SetAclType(v string) *SetPolicyIPAclConfigRequestIPAclConfig {
	s.AclType = &v
	return s
}

func (s *SetPolicyIPAclConfigRequestIPAclConfig) SetIPs(v []*string) *SetPolicyIPAclConfigRequestIPAclConfig {
	s.IPs = v
	return s
}

type SetPolicyIPAclConfigShrinkRequest struct {
	// The access control settings for source IP addresses.
	//
	// This parameter is required.
	IPAclConfigShrink *string `json:"IPAclConfig,omitempty" xml:"IPAclConfig,omitempty"`
	// The bastion host ID.
	//
	// > You can call the DescribeInstances operation to query the bastion host ID.[](~~153281~~)
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyIPAclConfigShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyIPAclConfigShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyIPAclConfigShrinkRequest) SetIPAclConfigShrink(v string) *SetPolicyIPAclConfigShrinkRequest {
	s.IPAclConfigShrink = &v
	return s
}

func (s *SetPolicyIPAclConfigShrinkRequest) SetInstanceId(v string) *SetPolicyIPAclConfigShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyIPAclConfigShrinkRequest) SetPolicyId(v string) *SetPolicyIPAclConfigShrinkRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyIPAclConfigShrinkRequest) SetRegionId(v string) *SetPolicyIPAclConfigShrinkRequest {
	s.RegionId = &v
	return s
}

type SetPolicyIPAclConfigResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPolicyIPAclConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyIPAclConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetPolicyIPAclConfigResponseBody) SetRequestId(v string) *SetPolicyIPAclConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetPolicyIPAclConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPolicyIPAclConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPolicyIPAclConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyIPAclConfigResponse) GoString() string {
	return s.String()
}

func (s *SetPolicyIPAclConfigResponse) SetHeaders(v map[string]*string) *SetPolicyIPAclConfigResponse {
	s.Headers = v
	return s
}

func (s *SetPolicyIPAclConfigResponse) SetStatusCode(v int32) *SetPolicyIPAclConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPolicyIPAclConfigResponse) SetBody(v *SetPolicyIPAclConfigResponseBody) *SetPolicyIPAclConfigResponse {
	s.Body = v
	return s
}

type SetPolicyProtocolConfigRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// > You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 61
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The protocol control settings.
	//
	// This parameter is required.
	ProtocolConfig *SetPolicyProtocolConfigRequestProtocolConfig `json:"ProtocolConfig,omitempty" xml:"ProtocolConfig,omitempty" type:"Struct"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyProtocolConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyProtocolConfigRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyProtocolConfigRequest) SetInstanceId(v string) *SetPolicyProtocolConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyProtocolConfigRequest) SetPolicyId(v string) *SetPolicyProtocolConfigRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyProtocolConfigRequest) SetProtocolConfig(v *SetPolicyProtocolConfigRequestProtocolConfig) *SetPolicyProtocolConfigRequest {
	s.ProtocolConfig = v
	return s
}

func (s *SetPolicyProtocolConfigRequest) SetRegionId(v string) *SetPolicyProtocolConfigRequest {
	s.RegionId = &v
	return s
}

type SetPolicyProtocolConfigRequestProtocolConfig struct {
	// The settings of the Remote Desktop Protocol (RDP) options.
	RDP *SetPolicyProtocolConfigRequestProtocolConfigRDP `json:"RDP,omitempty" xml:"RDP,omitempty" type:"Struct"`
	// The settings of the SSH and SSH Fine Transfer Protocol (SFTP) options.
	SSH *SetPolicyProtocolConfigRequestProtocolConfigSSH `json:"SSH,omitempty" xml:"SSH,omitempty" type:"Struct"`
}

func (s SetPolicyProtocolConfigRequestProtocolConfig) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyProtocolConfigRequestProtocolConfig) GoString() string {
	return s.String()
}

func (s *SetPolicyProtocolConfigRequestProtocolConfig) SetRDP(v *SetPolicyProtocolConfigRequestProtocolConfigRDP) *SetPolicyProtocolConfigRequestProtocolConfig {
	s.RDP = v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfig) SetSSH(v *SetPolicyProtocolConfigRequestProtocolConfigSSH) *SetPolicyProtocolConfigRequestProtocolConfig {
	s.SSH = v
	return s
}

type SetPolicyProtocolConfigRequestProtocolConfigRDP struct {
	// Specifies whether to enable downloading from the clipboard. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	ClipboardDownload *string `json:"ClipboardDownload,omitempty" xml:"ClipboardDownload,omitempty"`
	// Specifies whether to enable uploading from the clipboard. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	ClipboardUpload *string `json:"ClipboardUpload,omitempty" xml:"ClipboardUpload,omitempty"`
	// Specifies whether to enable driver mapping. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	DiskRedirection *string `json:"DiskRedirection,omitempty" xml:"DiskRedirection,omitempty"`
	// Specifies whether to enable keyboard operation recording. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	RecordKeyboard *string `json:"RecordKeyboard,omitempty" xml:"RecordKeyboard,omitempty"`
}

func (s SetPolicyProtocolConfigRequestProtocolConfigRDP) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyProtocolConfigRequestProtocolConfigRDP) GoString() string {
	return s.String()
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigRDP) SetClipboardDownload(v string) *SetPolicyProtocolConfigRequestProtocolConfigRDP {
	s.ClipboardDownload = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigRDP) SetClipboardUpload(v string) *SetPolicyProtocolConfigRequestProtocolConfigRDP {
	s.ClipboardUpload = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigRDP) SetDiskRedirection(v string) *SetPolicyProtocolConfigRequestProtocolConfigRDP {
	s.DiskRedirection = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigRDP) SetRecordKeyboard(v string) *SetPolicyProtocolConfigRequestProtocolConfigRDP {
	s.RecordKeyboard = &v
	return s
}

type SetPolicyProtocolConfigRequestProtocolConfigSSH struct {
	// Specifies whether to enable remote command execution. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	ExecCommand *string `json:"ExecCommand,omitempty" xml:"ExecCommand,omitempty"`
	// Specifies whether to enable SFTP channels. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// >
	//
	// 	- If you do not specify this parameter, the default value Disable is used.
	//
	// 	- You must set at least one of the following parameters to Enable: SSHChannel and SFTPChannel.
	//
	// 	- If you select Enable Only SFTP Permission for a host account, do not set SSHChannel and SFTPChannel to Disable for the account. Otherwise, users of the bastion host cannot use the account to access the host.
	//
	// example:
	//
	// Enable
	SFTPChannel *string `json:"SFTPChannel,omitempty" xml:"SFTPChannel,omitempty"`
	// Specifies whether to enable file downloading during SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	SFTPDownloadFile *string `json:"SFTPDownloadFile,omitempty" xml:"SFTPDownloadFile,omitempty"`
	// Specifies whether to enable folder creation during SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	SFTPMkdir *string `json:"SFTPMkdir,omitempty" xml:"SFTPMkdir,omitempty"`
	// Specifies whether to enable file deletion during SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	SFTPRemoveFile *string `json:"SFTPRemoveFile,omitempty" xml:"SFTPRemoveFile,omitempty"`
	// Specifies whether to enable file renaming during SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	SFTPRenameFile *string `json:"SFTPRenameFile,omitempty" xml:"SFTPRenameFile,omitempty"`
	// Specifies whether to enable folder deletion during SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	SFTPRmdir *string `json:"SFTPRmdir,omitempty" xml:"SFTPRmdir,omitempty"`
	// Specifies whether to enable file uploading during SFTP-based O\\&M. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	SFTPUploadFile *string `json:"SFTPUploadFile,omitempty" xml:"SFTPUploadFile,omitempty"`
	// Specifies whether to enable SSH channels. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// >
	//
	// 	- If you do not specify this parameter, the default value Disable is used.
	//
	// 	- You must set at least one of the following parameters to Enable: SSHChannel and SFTPChannel. If you set SSHChannel to Disable, SSH-based logon is disabled for the asset account. Proceed with caution.
	//
	// 	- If you select Enable Only SFTP Permission for a host account, do not set SSHChannel and SFTPChannel to Disable for the account. Otherwise, users of the bastion host cannot use the account to access the host.
	//
	// example:
	//
	// Enable
	SSHChannel *string `json:"SSHChannel,omitempty" xml:"SSHChannel,omitempty"`
	// Specifies whether to enable X11 forwarding. Valid values:
	//
	// 	- Enable
	//
	// 	- Disable
	//
	// > If you do not specify this parameter, the default value Disable is used.
	//
	// example:
	//
	// Enable
	X11Forwarding *string `json:"X11Forwarding,omitempty" xml:"X11Forwarding,omitempty"`
}

func (s SetPolicyProtocolConfigRequestProtocolConfigSSH) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyProtocolConfigRequestProtocolConfigSSH) GoString() string {
	return s.String()
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetExecCommand(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.ExecCommand = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSFTPChannel(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SFTPChannel = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSFTPDownloadFile(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SFTPDownloadFile = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSFTPMkdir(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SFTPMkdir = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSFTPRemoveFile(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SFTPRemoveFile = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSFTPRenameFile(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SFTPRenameFile = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSFTPRmdir(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SFTPRmdir = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSFTPUploadFile(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SFTPUploadFile = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetSSHChannel(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.SSHChannel = &v
	return s
}

func (s *SetPolicyProtocolConfigRequestProtocolConfigSSH) SetX11Forwarding(v string) *SetPolicyProtocolConfigRequestProtocolConfigSSH {
	s.X11Forwarding = &v
	return s
}

type SetPolicyProtocolConfigShrinkRequest struct {
	// The bastion host ID.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// > You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 61
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The protocol control settings.
	//
	// This parameter is required.
	ProtocolConfigShrink *string `json:"ProtocolConfig,omitempty" xml:"ProtocolConfig,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetPolicyProtocolConfigShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyProtocolConfigShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyProtocolConfigShrinkRequest) SetInstanceId(v string) *SetPolicyProtocolConfigShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyProtocolConfigShrinkRequest) SetPolicyId(v string) *SetPolicyProtocolConfigShrinkRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyProtocolConfigShrinkRequest) SetProtocolConfigShrink(v string) *SetPolicyProtocolConfigShrinkRequest {
	s.ProtocolConfigShrink = &v
	return s
}

func (s *SetPolicyProtocolConfigShrinkRequest) SetRegionId(v string) *SetPolicyProtocolConfigShrinkRequest {
	s.RegionId = &v
	return s
}

type SetPolicyProtocolConfigResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 81500666-d7f5-4143-8329-0223cc738105
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPolicyProtocolConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyProtocolConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetPolicyProtocolConfigResponseBody) SetRequestId(v string) *SetPolicyProtocolConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetPolicyProtocolConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPolicyProtocolConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPolicyProtocolConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyProtocolConfigResponse) GoString() string {
	return s.String()
}

func (s *SetPolicyProtocolConfigResponse) SetHeaders(v map[string]*string) *SetPolicyProtocolConfigResponse {
	s.Headers = v
	return s
}

func (s *SetPolicyProtocolConfigResponse) SetStatusCode(v int32) *SetPolicyProtocolConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPolicyProtocolConfigResponse) SetBody(v *SetPolicyProtocolConfigResponseBody) *SetPolicyProtocolConfigResponse {
	s.Body = v
	return s
}

type SetPolicyUserScopeRequest struct {
	// The bastion host ID.
	//
	// >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the control policy that you want to modify.
	//
	// >  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID of the bastion host.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The scope of users to whom the control policy applies. Valid values:
	//
	// 	- **All**: The control policy applies to all users.
	//
	// 	- **User**: The control policy applies to specified users.
	//
	// 	- **UserGroup**: The control policy applies to specified user groups.
	//
	// This parameter is required.
	//
	// example:
	//
	// All
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
	// The user groups to which the control policy applies.
	//
	// > This parameter is required if ScopeType is set to UserGroup. You can specify up to 100 user group IDs.
	UserGroupIds []*string `json:"UserGroupIds,omitempty" xml:"UserGroupIds,omitempty" type:"Repeated"`
	// The users to whom the control policy applies.
	//
	// > This parameter is required if ScopeType is set to User. You can specify up to 500 user IDs.
	UserIds []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s SetPolicyUserScopeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyUserScopeRequest) GoString() string {
	return s.String()
}

func (s *SetPolicyUserScopeRequest) SetInstanceId(v string) *SetPolicyUserScopeRequest {
	s.InstanceId = &v
	return s
}

func (s *SetPolicyUserScopeRequest) SetPolicyId(v string) *SetPolicyUserScopeRequest {
	s.PolicyId = &v
	return s
}

func (s *SetPolicyUserScopeRequest) SetRegionId(v string) *SetPolicyUserScopeRequest {
	s.RegionId = &v
	return s
}

func (s *SetPolicyUserScopeRequest) SetScopeType(v string) *SetPolicyUserScopeRequest {
	s.ScopeType = &v
	return s
}

func (s *SetPolicyUserScopeRequest) SetUserGroupIds(v []*string) *SetPolicyUserScopeRequest {
	s.UserGroupIds = v
	return s
}

func (s *SetPolicyUserScopeRequest) SetUserIds(v []*string) *SetPolicyUserScopeRequest {
	s.UserIds = v
	return s
}

type SetPolicyUserScopeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetPolicyUserScopeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyUserScopeResponseBody) GoString() string {
	return s.String()
}

func (s *SetPolicyUserScopeResponseBody) SetRequestId(v string) *SetPolicyUserScopeResponseBody {
	s.RequestId = &v
	return s
}

type SetPolicyUserScopeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetPolicyUserScopeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetPolicyUserScopeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetPolicyUserScopeResponse) GoString() string {
	return s.String()
}

func (s *SetPolicyUserScopeResponse) SetHeaders(v map[string]*string) *SetPolicyUserScopeResponse {
	s.Headers = v
	return s
}

func (s *SetPolicyUserScopeResponse) SetStatusCode(v int32) *SetPolicyUserScopeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetPolicyUserScopeResponse) SetBody(v *SetPolicyUserScopeResponseBody) *SetPolicyUserScopeResponse {
	s.Body = v
	return s
}

type StartInstanceRequest struct {
	ClientSecurityGroupIds    []*string `json:"ClientSecurityGroupIds,omitempty" xml:"ClientSecurityGroupIds,omitempty" type:"Repeated"`
	EnablePortalPrivateAccess *bool     `json:"EnablePortalPrivateAccess,omitempty" xml:"EnablePortalPrivateAccess,omitempty"`
	// The ID of the bastion host that you want to enable.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// An array consisting of the IDs of security groups to which the bastion host is added.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp1aiupc4yjqgmm****
	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	SlaveVswitchId   *string   `json:"SlaveVswitchId,omitempty" xml:"SlaveVswitchId,omitempty"`
	// The ID of the vSwitch to which the bastion host belongs.
	//
	// example:
	//
	// vsw-bp1xfwzzfti0kjbf****
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s StartInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartInstanceRequest) SetClientSecurityGroupIds(v []*string) *StartInstanceRequest {
	s.ClientSecurityGroupIds = v
	return s
}

func (s *StartInstanceRequest) SetEnablePortalPrivateAccess(v bool) *StartInstanceRequest {
	s.EnablePortalPrivateAccess = &v
	return s
}

func (s *StartInstanceRequest) SetInstanceId(v string) *StartInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StartInstanceRequest) SetRegionId(v string) *StartInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StartInstanceRequest) SetSecurityGroupIds(v []*string) *StartInstanceRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *StartInstanceRequest) SetSlaveVswitchId(v string) *StartInstanceRequest {
	s.SlaveVswitchId = &v
	return s
}

func (s *StartInstanceRequest) SetVswitchId(v string) *StartInstanceRequest {
	s.VswitchId = &v
	return s
}

type StartInstanceResponseBody struct {
	// The ID of the bastion host that you enable.
	//
	// example:
	//
	// bastionhost-cn-78v1gh****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 0F85AE0A-6A87-48F3-A0C7-90B998788A36
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstanceResponseBody) SetInstanceId(v string) *StartInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *StartInstanceResponseBody) SetRequestId(v string) *StartInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstanceResponse) SetHeaders(v map[string]*string) *StartInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartInstanceResponse) SetStatusCode(v int32) *StartInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartInstanceResponse) SetBody(v *StartInstanceResponseBody) *StartInstanceResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// The region ID of the bastion hosts to which you want to create and add tags.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// An array that consists of IDs of bastion hosts.
	//
	// Valid values: 1 to 20.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query IDs of bastion hosts.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-78v1gc****
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Set the value to **INSTANCE**, which indicates that the resource is a bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The tag key of the bastion host. You can specify up to 20 tags for the bastion host.
	//
	// > - Thekey cannot be an empty string. The key can be up to 128 characters in length.
	//
	// > - It cannot start with **aliyun*	- or **acs:**, and cannot contain **http://*	- or **https://**.
	//
	// example:
	//
	// operation
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the bastion host.\\
	//
	// You can specify up to 20 tags for the bastion host.
	//
	// > 	- The value can be a string of up to 128 characters or an empty string.
	//
	// > 	- It cannot start with **aliyun*	- or **acs:**, and cannot contain **http://*	- or **https://**.
	//
	// example:
	//
	// operation_test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// 2F24F0A8-4C69-4E89-9392-457D107E2D4A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UnlockUsersRequest struct {
	// The ID of the bastion host to which the users to be unlocked belong.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the bastion host to which the users to be unlocked belong.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the user that you want to unlock. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).
	//
	// > You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["1","2"]
	UserIds *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s UnlockUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s UnlockUsersRequest) GoString() string {
	return s.String()
}

func (s *UnlockUsersRequest) SetInstanceId(v string) *UnlockUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *UnlockUsersRequest) SetRegionId(v string) *UnlockUsersRequest {
	s.RegionId = &v
	return s
}

func (s *UnlockUsersRequest) SetUserIds(v string) *UnlockUsersRequest {
	s.UserIds = &v
	return s
}

type UnlockUsersResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// EC9BF0F4-8983-491A-BC8C-1B4DD94976DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of information about the result of the call.
	Results []*UnlockUsersResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s UnlockUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnlockUsersResponseBody) GoString() string {
	return s.String()
}

func (s *UnlockUsersResponseBody) SetRequestId(v string) *UnlockUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnlockUsersResponseBody) SetResults(v []*UnlockUsersResponseBodyResults) *UnlockUsersResponseBody {
	s.Results = v
	return s
}

type UnlockUsersResponseBodyResults struct {
	// The result of the call. Valid values:
	//
	// 	- **OK**: The call was successful.
	//
	// 	- **UNEXPECTED**: An unknown error occurred.
	//
	// 	- **INVALID_ARGUMENT**: A request parameter is invalid.
	//
	//     **
	//
	//     **Note**Make sure that the request parameters are valid and call the operation again.
	//
	// 	- **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
	//
	//     **
	//
	//     **Note**Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.
	//
	// 	- **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// N/A
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// １
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UnlockUsersResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s UnlockUsersResponseBodyResults) GoString() string {
	return s.String()
}

func (s *UnlockUsersResponseBodyResults) SetCode(v string) *UnlockUsersResponseBodyResults {
	s.Code = &v
	return s
}

func (s *UnlockUsersResponseBodyResults) SetMessage(v string) *UnlockUsersResponseBodyResults {
	s.Message = &v
	return s
}

func (s *UnlockUsersResponseBodyResults) SetUserId(v string) *UnlockUsersResponseBodyResults {
	s.UserId = &v
	return s
}

type UnlockUsersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnlockUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnlockUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s UnlockUsersResponse) GoString() string {
	return s.String()
}

func (s *UnlockUsersResponse) SetHeaders(v map[string]*string) *UnlockUsersResponse {
	s.Headers = v
	return s
}

func (s *UnlockUsersResponse) SetStatusCode(v int32) *UnlockUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *UnlockUsersResponse) SetBody(v *UnlockUsersResponseBody) *UnlockUsersResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Specifies whether to delete all tags that are added to the bastion host.
	//
	// 	- If you specify TagKey.N, the value of this parameter can only be **false**, which indicates that only a specified tag is deleted.
	//
	// 	- If you do not specify TagKey.N and the value of this parameter is **true**, all tags are deleted. If you do not specify TagKey.N and the value of this parameter is **false**, no tags are deleted.
	//
	// example:
	//
	// false
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The region ID of the bastion host to query.
	//
	// > For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// An array that consists of IDs of bastion hosts.
	//
	// Valid values: 1 to 20.
	//
	// > You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.
	//
	// This parameter is required.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Set the value to **INSTANCE**, which indicates that the resource is a bastion host.
	//
	// This parameter is required.
	//
	// example:
	//
	// INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The key of tag N.
	//
	// Valid values of N: 1 to 20.
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// A8A665B9-8550-4942-9DEE-73198051856B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type VerifyInstanceADAuthServerRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn=Manager,dc=test,dc=com
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dc=test,dc=com
	BaseDN *string `json:"BaseDN,omitempty" xml:"BaseDN,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// (objectClass=top)
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// true
	IsSSL *string `json:"IsSSL,omitempty" xml:"IsSSL,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ******
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 389
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 192.168.XX.XX
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// example:
	//
	// 192.168.XX.XX
	StandbyServer *string `json:"StandbyServer,omitempty" xml:"StandbyServer,omitempty"`
}

func (s VerifyInstanceADAuthServerRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyInstanceADAuthServerRequest) GoString() string {
	return s.String()
}

func (s *VerifyInstanceADAuthServerRequest) SetAccount(v string) *VerifyInstanceADAuthServerRequest {
	s.Account = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetBaseDN(v string) *VerifyInstanceADAuthServerRequest {
	s.BaseDN = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetDomain(v string) *VerifyInstanceADAuthServerRequest {
	s.Domain = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetFilter(v string) *VerifyInstanceADAuthServerRequest {
	s.Filter = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetInstanceId(v string) *VerifyInstanceADAuthServerRequest {
	s.InstanceId = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetIsSSL(v string) *VerifyInstanceADAuthServerRequest {
	s.IsSSL = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetPassword(v string) *VerifyInstanceADAuthServerRequest {
	s.Password = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetPort(v string) *VerifyInstanceADAuthServerRequest {
	s.Port = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetRegionId(v string) *VerifyInstanceADAuthServerRequest {
	s.RegionId = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetServer(v string) *VerifyInstanceADAuthServerRequest {
	s.Server = &v
	return s
}

func (s *VerifyInstanceADAuthServerRequest) SetStandbyServer(v string) *VerifyInstanceADAuthServerRequest {
	s.StandbyServer = &v
	return s
}

type VerifyInstanceADAuthServerResponseBody struct {
	// example:
	//
	// 8F1085E3-F048-5F34-B650-F145216E4AA5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s VerifyInstanceADAuthServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyInstanceADAuthServerResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyInstanceADAuthServerResponseBody) SetRequestId(v string) *VerifyInstanceADAuthServerResponseBody {
	s.RequestId = &v
	return s
}

type VerifyInstanceADAuthServerResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *VerifyInstanceADAuthServerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s VerifyInstanceADAuthServerResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyInstanceADAuthServerResponse) GoString() string {
	return s.String()
}

func (s *VerifyInstanceADAuthServerResponse) SetHeaders(v map[string]*string) *VerifyInstanceADAuthServerResponse {
	s.Headers = v
	return s
}

func (s *VerifyInstanceADAuthServerResponse) SetStatusCode(v int32) *VerifyInstanceADAuthServerResponse {
	s.StatusCode = &v
	return s
}

func (s *VerifyInstanceADAuthServerResponse) SetBody(v *VerifyInstanceADAuthServerResponseBody) *VerifyInstanceADAuthServerResponse {
	s.Body = v
	return s
}

type VerifyInstanceLDAPAuthServerRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn=Manager,dc=test,dc=com
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dc=test,dc=com
	BaseDN *string `json:"BaseDN,omitempty" xml:"BaseDN,omitempty"`
	// example:
	//
	// (objectClass=top)
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// bastionhost-cn-st220aw****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// true
	IsSSL *string `json:"IsSSL,omitempty" xml:"IsSSL,omitempty"`
	// example:
	//
	// ******
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 389
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 192.168.XX.XX
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// example:
	//
	// 192.168.XX.XX
	StandbyServer *string `json:"StandbyServer,omitempty" xml:"StandbyServer,omitempty"`
}

func (s VerifyInstanceLDAPAuthServerRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyInstanceLDAPAuthServerRequest) GoString() string {
	return s.String()
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetAccount(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.Account = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetBaseDN(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.BaseDN = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetFilter(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.Filter = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetInstanceId(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.InstanceId = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetIsSSL(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.IsSSL = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetPassword(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.Password = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetPort(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.Port = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetRegionId(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.RegionId = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetServer(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.Server = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerRequest) SetStandbyServer(v string) *VerifyInstanceLDAPAuthServerRequest {
	s.StandbyServer = &v
	return s
}

type VerifyInstanceLDAPAuthServerResponseBody struct {
	// example:
	//
	// C9E97677-BD74-584B-AFCE-948C2A70BB83
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s VerifyInstanceLDAPAuthServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyInstanceLDAPAuthServerResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyInstanceLDAPAuthServerResponseBody) SetRequestId(v string) *VerifyInstanceLDAPAuthServerResponseBody {
	s.RequestId = &v
	return s
}

type VerifyInstanceLDAPAuthServerResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *VerifyInstanceLDAPAuthServerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s VerifyInstanceLDAPAuthServerResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyInstanceLDAPAuthServerResponse) GoString() string {
	return s.String()
}

func (s *VerifyInstanceLDAPAuthServerResponse) SetHeaders(v map[string]*string) *VerifyInstanceLDAPAuthServerResponse {
	s.Headers = v
	return s
}

func (s *VerifyInstanceLDAPAuthServerResponse) SetStatusCode(v int32) *VerifyInstanceLDAPAuthServerResponse {
	s.StatusCode = &v
	return s
}

func (s *VerifyInstanceLDAPAuthServerResponse) SetBody(v *VerifyInstanceLDAPAuthServerResponseBody) *VerifyInstanceLDAPAuthServerResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("yundun-bastionhost"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// If an O\\&M engineer attempts to run a command specified in the Command Approval field on the Create Control Policy page, the administrator is notified to review the command in the Bastionhost console. The command can be run only after it is approved by the administrator.
//
// Description:
//
// You can call this operation as a Bastionhost administrator to approve the request to run a command of an O\\&M engineer.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AcceptApproveCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AcceptApproveCommandResponse
func (client *Client) AcceptApproveCommandWithOptions(request *AcceptApproveCommandRequest, runtime *util.RuntimeOptions) (_result *AcceptApproveCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandId)) {
		query["CommandId"] = request.CommandId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AcceptApproveCommand"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AcceptApproveCommandResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AcceptApproveCommandResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// If an O\\&M engineer attempts to run a command specified in the Command Approval field on the Create Control Policy page, the administrator is notified to review the command in the Bastionhost console. The command can be run only after it is approved by the administrator.
//
// Description:
//
// You can call this operation as a Bastionhost administrator to approve the request to run a command of an O\\&M engineer.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AcceptApproveCommandRequest
//
// @return AcceptApproveCommandResponse
func (client *Client) AcceptApproveCommand(request *AcceptApproveCommandRequest) (_result *AcceptApproveCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptApproveCommandResponse{}
	_body, _err := client.AcceptApproveCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Approves an O\\\\\\\\\\\\&M application.
//
// Description:
//
// You can call this operation as a Bastionhost administrator to approve an O\\&M application of an O\\&M engineer.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AcceptOperationTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AcceptOperationTicketResponse
func (client *Client) AcceptOperationTicketWithOptions(request *AcceptOperationTicketRequest, runtime *util.RuntimeOptions) (_result *AcceptOperationTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.EffectCount)) {
		query["EffectCount"] = request.EffectCount
	}

	if !tea.BoolValue(util.IsUnset(request.EffectEndTime)) {
		query["EffectEndTime"] = request.EffectEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EffectStartTime)) {
		query["EffectStartTime"] = request.EffectStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationTicketId)) {
		query["OperationTicketId"] = request.OperationTicketId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AcceptOperationTicket"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AcceptOperationTicketResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AcceptOperationTicketResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Approves an O\\\\\\\\\\\\&M application.
//
// Description:
//
// You can call this operation as a Bastionhost administrator to approve an O\\&M application of an O\\&M engineer.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AcceptOperationTicketRequest
//
// @return AcceptOperationTicketResponse
func (client *Client) AcceptOperationTicket(request *AcceptOperationTicketRequest) (_result *AcceptOperationTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptOperationTicketResponse{}
	_body, _err := client.AcceptOperationTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds multiple databases to a specified asset group.
//
// @param request - AddDatabasesToGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddDatabasesToGroupResponse
func (client *Client) AddDatabasesToGroupWithOptions(request *AddDatabasesToGroupRequest, runtime *util.RuntimeOptions) (_result *AddDatabasesToGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseIds)) {
		query["DatabaseIds"] = request.DatabaseIds
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDatabasesToGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AddDatabasesToGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AddDatabasesToGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds multiple databases to a specified asset group.
//
// @param request - AddDatabasesToGroupRequest
//
// @return AddDatabasesToGroupResponse
func (client *Client) AddDatabasesToGroup(request *AddDatabasesToGroupRequest) (_result *AddDatabasesToGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDatabasesToGroupResponse{}
	_body, _err := client.AddDatabasesToGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds one or more hosts to the specified host group.
//
// Description:
//
// You can call this operation to add one or more hosts to a host group. You can add multiple hosts to a host group to manage and grant permissions on the hosts in a centralized manner.
//
// # Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
//
// @param request - AddHostsToGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddHostsToGroupResponse
func (client *Client) AddHostsToGroupWithOptions(request *AddHostsToGroupRequest, runtime *util.RuntimeOptions) (_result *AddHostsToGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostIds)) {
		query["HostIds"] = request.HostIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddHostsToGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AddHostsToGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AddHostsToGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds one or more hosts to the specified host group.
//
// Description:
//
// You can call this operation to add one or more hosts to a host group. You can add multiple hosts to a host group to manage and grant permissions on the hosts in a centralized manner.
//
// # Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
//
// @param request - AddHostsToGroupRequest
//
// @return AddHostsToGroupResponse
func (client *Client) AddHostsToGroup(request *AddHostsToGroupRequest) (_result *AddHostsToGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddHostsToGroupResponse{}
	_body, _err := client.AddHostsToGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Add one or more users to a user group.
//
// Description:
//
// #
//
// You can call this operation to add one or more users to a user group. After you call the [CreateUserGroup](https://help.aliyun.com/document_detail/204596.html) operation to create a user group, you can call the AddUsersToGroup operation to add multiple users to the user group. Then, you can manage and grant permissions to the users at a time.
//
// # Limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AddUsersToGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddUsersToGroupResponse
func (client *Client) AddUsersToGroupWithOptions(request *AddUsersToGroupRequest, runtime *util.RuntimeOptions) (_result *AddUsersToGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["UserIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddUsersToGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AddUsersToGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AddUsersToGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Add one or more users to a user group.
//
// Description:
//
// #
//
// You can call this operation to add one or more users to a user group. After you call the [CreateUserGroup](https://help.aliyun.com/document_detail/204596.html) operation to create a user group, you can call the AddUsersToGroup operation to add multiple users to the user group. Then, you can manage and grant permissions to the users at a time.
//
// # Limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AddUsersToGroupRequest
//
// @return AddUsersToGroupResponse
func (client *Client) AddUsersToGroup(request *AddUsersToGroupRequest) (_result *AddUsersToGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddUsersToGroupResponse{}
	_body, _err := client.AddUsersToGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Authorizes a user to manage databases and database accounts.
//
// @param request - AttachDatabaseAccountsToUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachDatabaseAccountsToUserResponse
func (client *Client) AttachDatabaseAccountsToUserWithOptions(request *AttachDatabaseAccountsToUserRequest, runtime *util.RuntimeOptions) (_result *AttachDatabaseAccountsToUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Databases)) {
		query["Databases"] = request.Databases
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachDatabaseAccountsToUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachDatabaseAccountsToUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachDatabaseAccountsToUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Authorizes a user to manage databases and database accounts.
//
// @param request - AttachDatabaseAccountsToUserRequest
//
// @return AttachDatabaseAccountsToUserResponse
func (client *Client) AttachDatabaseAccountsToUser(request *AttachDatabaseAccountsToUserRequest) (_result *AttachDatabaseAccountsToUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDatabaseAccountsToUserResponse{}
	_body, _err := client.AttachDatabaseAccountsToUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Authorizes a user group to manage databases and database accounts.
//
// @param request - AttachDatabaseAccountsToUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachDatabaseAccountsToUserGroupResponse
func (client *Client) AttachDatabaseAccountsToUserGroupWithOptions(request *AttachDatabaseAccountsToUserGroupRequest, runtime *util.RuntimeOptions) (_result *AttachDatabaseAccountsToUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Databases)) {
		query["Databases"] = request.Databases
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachDatabaseAccountsToUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachDatabaseAccountsToUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachDatabaseAccountsToUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Authorizes a user group to manage databases and database accounts.
//
// @param request - AttachDatabaseAccountsToUserGroupRequest
//
// @return AttachDatabaseAccountsToUserGroupResponse
func (client *Client) AttachDatabaseAccountsToUserGroup(request *AttachDatabaseAccountsToUserGroupRequest) (_result *AttachDatabaseAccountsToUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDatabaseAccountsToUserGroupResponse{}
	_body, _err := client.AttachDatabaseAccountsToUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Associates host accounts with a shared key.
//
// @param request - AttachHostAccountsToHostShareKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachHostAccountsToHostShareKeyResponse
func (client *Client) AttachHostAccountsToHostShareKeyWithOptions(request *AttachHostAccountsToHostShareKeyRequest, runtime *util.RuntimeOptions) (_result *AttachHostAccountsToHostShareKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountIds)) {
		query["HostAccountIds"] = request.HostAccountIds
	}

	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachHostAccountsToHostShareKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachHostAccountsToHostShareKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachHostAccountsToHostShareKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Associates host accounts with a shared key.
//
// @param request - AttachHostAccountsToHostShareKeyRequest
//
// @return AttachHostAccountsToHostShareKeyResponse
func (client *Client) AttachHostAccountsToHostShareKey(request *AttachHostAccountsToHostShareKeyRequest) (_result *AttachHostAccountsToHostShareKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachHostAccountsToHostShareKeyResponse{}
	_body, _err := client.AttachHostAccountsToHostShareKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Authorizes a user to manage the hosts and host accounts.
//
// @param request - AttachHostAccountsToUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachHostAccountsToUserResponse
func (client *Client) AttachHostAccountsToUserWithOptions(request *AttachHostAccountsToUserRequest, runtime *util.RuntimeOptions) (_result *AttachHostAccountsToUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Hosts)) {
		query["Hosts"] = request.Hosts
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachHostAccountsToUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachHostAccountsToUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachHostAccountsToUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Authorizes a user to manage the hosts and host accounts.
//
// @param request - AttachHostAccountsToUserRequest
//
// @return AttachHostAccountsToUserResponse
func (client *Client) AttachHostAccountsToUser(request *AttachHostAccountsToUserRequest) (_result *AttachHostAccountsToUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachHostAccountsToUserResponse{}
	_body, _err := client.AttachHostAccountsToUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Authorizes a user group to manage one or more hosts and host accounts.
//
// Description:
//
// After you authorize a user group to manage specific hosts and host accounts, all the users in the user group have access to the authorized hosts and host accounts.
//
// @param request - AttachHostAccountsToUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachHostAccountsToUserGroupResponse
func (client *Client) AttachHostAccountsToUserGroupWithOptions(request *AttachHostAccountsToUserGroupRequest, runtime *util.RuntimeOptions) (_result *AttachHostAccountsToUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Hosts)) {
		query["Hosts"] = request.Hosts
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachHostAccountsToUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachHostAccountsToUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachHostAccountsToUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Authorizes a user group to manage one or more hosts and host accounts.
//
// Description:
//
// After you authorize a user group to manage specific hosts and host accounts, all the users in the user group have access to the authorized hosts and host accounts.
//
// @param request - AttachHostAccountsToUserGroupRequest
//
// @return AttachHostAccountsToUserGroupResponse
func (client *Client) AttachHostAccountsToUserGroup(request *AttachHostAccountsToUserGroupRequest) (_result *AttachHostAccountsToUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachHostAccountsToUserGroupResponse{}
	_body, _err := client.AttachHostAccountsToUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Authorizes a user to manage one or more host groups and host accounts.
//
// @param request - AttachHostGroupAccountsToUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachHostGroupAccountsToUserResponse
func (client *Client) AttachHostGroupAccountsToUserWithOptions(request *AttachHostGroupAccountsToUserRequest, runtime *util.RuntimeOptions) (_result *AttachHostGroupAccountsToUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroups)) {
		query["HostGroups"] = request.HostGroups
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachHostGroupAccountsToUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachHostGroupAccountsToUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachHostGroupAccountsToUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Authorizes a user to manage one or more host groups and host accounts.
//
// @param request - AttachHostGroupAccountsToUserRequest
//
// @return AttachHostGroupAccountsToUserResponse
func (client *Client) AttachHostGroupAccountsToUser(request *AttachHostGroupAccountsToUserRequest) (_result *AttachHostGroupAccountsToUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachHostGroupAccountsToUserResponse{}
	_body, _err := client.AttachHostGroupAccountsToUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Authorizes a user to manage one or more host groups and host accounts.
//
// @param request - AttachHostGroupAccountsToUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachHostGroupAccountsToUserGroupResponse
func (client *Client) AttachHostGroupAccountsToUserGroupWithOptions(request *AttachHostGroupAccountsToUserGroupRequest, runtime *util.RuntimeOptions) (_result *AttachHostGroupAccountsToUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroups)) {
		query["HostGroups"] = request.HostGroups
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachHostGroupAccountsToUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachHostGroupAccountsToUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachHostGroupAccountsToUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Authorizes a user to manage one or more host groups and host accounts.
//
// @param request - AttachHostGroupAccountsToUserGroupRequest
//
// @return AttachHostGroupAccountsToUserGroupResponse
func (client *Client) AttachHostGroupAccountsToUserGroup(request *AttachHostGroupAccountsToUserGroupRequest) (_result *AttachHostGroupAccountsToUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachHostGroupAccountsToUserGroupResponse{}
	_body, _err := client.AttachHostGroupAccountsToUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures security groups for a bastion host.
//
// @param request - ConfigInstanceSecurityGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfigInstanceSecurityGroupsResponse
func (client *Client) ConfigInstanceSecurityGroupsWithOptions(request *ConfigInstanceSecurityGroupsRequest, runtime *util.RuntimeOptions) (_result *ConfigInstanceSecurityGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizedSecurityGroups)) {
		query["AuthorizedSecurityGroups"] = request.AuthorizedSecurityGroups
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigInstanceSecurityGroups"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ConfigInstanceSecurityGroupsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ConfigInstanceSecurityGroupsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures security groups for a bastion host.
//
// @param request - ConfigInstanceSecurityGroupsRequest
//
// @return ConfigInstanceSecurityGroupsResponse
func (client *Client) ConfigInstanceSecurityGroups(request *ConfigInstanceSecurityGroupsRequest) (_result *ConfigInstanceSecurityGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigInstanceSecurityGroupsResponse{}
	_body, _err := client.ConfigInstanceSecurityGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a whitelist of public IP addresses for a bastion host.
//
// Description:
//
// ## Usage notes
//
// You can call this operation to configure a whitelist of public IP addresses for a bastion host. By default, a bastion host is accessible from all public IP addresses. If you want to allow the requests from specific public IP addresses, you can call this operation to add trusted IP addresses to the whitelist of the bastion host.
//
// ## Limits
//
// You can call this operation up to 30 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ConfigInstanceWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfigInstanceWhiteListResponse
func (client *Client) ConfigInstanceWhiteListWithOptions(request *ConfigInstanceWhiteListRequest, runtime *util.RuntimeOptions) (_result *ConfigInstanceWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WhiteList)) {
		query["WhiteList"] = request.WhiteList
	}

	if !tea.BoolValue(util.IsUnset(request.WhiteListPolicies)) {
		query["WhiteListPolicies"] = request.WhiteListPolicies
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigInstanceWhiteList"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ConfigInstanceWhiteListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ConfigInstanceWhiteListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures a whitelist of public IP addresses for a bastion host.
//
// Description:
//
// ## Usage notes
//
// You can call this operation to configure a whitelist of public IP addresses for a bastion host. By default, a bastion host is accessible from all public IP addresses. If you want to allow the requests from specific public IP addresses, you can call this operation to add trusted IP addresses to the whitelist of the bastion host.
//
// ## Limits
//
// You can call this operation up to 30 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ConfigInstanceWhiteListRequest
//
// @return ConfigInstanceWhiteListResponse
func (client *Client) ConfigInstanceWhiteList(request *ConfigInstanceWhiteListRequest) (_result *ConfigInstanceWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigInstanceWhiteListResponse{}
	_body, _err := client.ConfigInstanceWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Imports an ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, PolarDB for MySQL cluster, PolarDB for PostgreSQL cluster, PolarDB for PostgreSQL (Compatible with Oracle) cluster, self-managed MySQL database, self-managed SQL Server database, self-managed PostgreSQL database, or self-managed Oracle database to a bastion host.
//
// @param request - CreateDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDatabaseResponse
func (client *Client) CreateDatabaseWithOptions(request *CreateDatabaseRequest, runtime *util.RuntimeOptions) (_result *CreateDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActiveAddressType)) {
		query["ActiveAddressType"] = request.ActiveAddressType
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabasePort)) {
		query["DatabasePort"] = request.DatabasePort
	}

	if !tea.BoolValue(util.IsUnset(request.DatabasePrivateAddress)) {
		query["DatabasePrivateAddress"] = request.DatabasePrivateAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DatabasePublicAddress)) {
		query["DatabasePublicAddress"] = request.DatabasePublicAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.PolarDBEndpointType)) {
		query["PolarDBEndpointType"] = request.PolarDBEndpointType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceId)) {
		query["SourceInstanceId"] = request.SourceInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceRegionId)) {
		query["SourceInstanceRegionId"] = request.SourceInstanceRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDatabase"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDatabaseResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDatabaseResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Imports an ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, PolarDB for MySQL cluster, PolarDB for PostgreSQL cluster, PolarDB for PostgreSQL (Compatible with Oracle) cluster, self-managed MySQL database, self-managed SQL Server database, self-managed PostgreSQL database, or self-managed Oracle database to a bastion host.
//
// @param request - CreateDatabaseRequest
//
// @return CreateDatabaseResponse
func (client *Client) CreateDatabase(request *CreateDatabaseRequest) (_result *CreateDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.CreateDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// After a database is created, you can create a database account for the database. After the account is created, O\\&M engineers can use the account to log on to and perform O\\&M operations on the database.
//
// @param request - CreateDatabaseAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDatabaseAccountResponse
func (client *Client) CreateDatabaseAccountWithOptions(request *CreateDatabaseAccountRequest, runtime *util.RuntimeOptions) (_result *CreateDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountName)) {
		query["DatabaseAccountName"] = request.DatabaseAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseSchema)) {
		query["DatabaseSchema"] = request.DatabaseSchema
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LoginAttribute)) {
		query["LoginAttribute"] = request.LoginAttribute
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDatabaseAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDatabaseAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDatabaseAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// After a database is created, you can create a database account for the database. After the account is created, O\\&M engineers can use the account to log on to and perform O\\&M operations on the database.
//
// @param request - CreateDatabaseAccountRequest
//
// @return CreateDatabaseAccountResponse
func (client *Client) CreateDatabaseAccount(request *CreateDatabaseAccountRequest) (_result *CreateDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatabaseAccountResponse{}
	_body, _err := client.CreateDatabaseAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateExportConfigJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateExportConfigJobResponse
func (client *Client) CreateExportConfigJobWithOptions(request *CreateExportConfigJobRequest, runtime *util.RuntimeOptions) (_result *CreateExportConfigJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateExportConfigJob"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateExportConfigJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateExportConfigJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// @param request - CreateExportConfigJobRequest
//
// @return CreateExportConfigJobResponse
func (client *Client) CreateExportConfigJob(request *CreateExportConfigJobRequest) (_result *CreateExportConfigJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateExportConfigJobResponse{}
	_body, _err := client.CreateExportConfigJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Bastionhost allows you to perform O\\&M operations on hosts from different sources, such as Alibaba Cloud Elastic Compute Service (ECS) instances, servers in on-premises data centers, and servers on other cloud platforms. Before you perform O\\&M operations on hosts by using a bastion host, you must import the hosts to the bastion host. You can call this operation to import a host to a bastion host.
//
// @param request - CreateHostRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHostResponse
func (client *Client) CreateHostWithOptions(request *CreateHostRequest, runtime *util.RuntimeOptions) (_result *CreateHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActiveAddressType)) {
		query["ActiveAddressType"] = request.ActiveAddressType
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.HostPrivateAddress)) {
		query["HostPrivateAddress"] = request.HostPrivateAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HostPublicAddress)) {
		query["HostPublicAddress"] = request.HostPublicAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceRegionId)) {
		query["InstanceRegionId"] = request.InstanceRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.OSType)) {
		query["OSType"] = request.OSType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceId)) {
		query["SourceInstanceId"] = request.SourceInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHost"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateHostResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateHostResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Bastionhost allows you to perform O\\&M operations on hosts from different sources, such as Alibaba Cloud Elastic Compute Service (ECS) instances, servers in on-premises data centers, and servers on other cloud platforms. Before you perform O\\&M operations on hosts by using a bastion host, you must import the hosts to the bastion host. You can call this operation to import a host to a bastion host.
//
// @param request - CreateHostRequest
//
// @return CreateHostResponse
func (client *Client) CreateHost(request *CreateHostRequest) (_result *CreateHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHostResponse{}
	_body, _err := client.CreateHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// After you import a host to a bastion host, you must add an account of the host to the bastion host. This way, O\\&M engineers can use the account to log on to and perform O\\&M operations on the host by using the bastion host.
//
// @param request - CreateHostAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHostAccountResponse
func (client *Client) CreateHostAccountWithOptions(request *CreateHostAccountRequest, runtime *util.RuntimeOptions) (_result *CreateHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountName)) {
		query["HostAccountName"] = request.HostAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PassPhrase)) {
		query["PassPhrase"] = request.PassPhrase
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateKey)) {
		query["PrivateKey"] = request.PrivateKey
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolName)) {
		query["ProtocolName"] = request.ProtocolName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHostAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateHostAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateHostAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// After you import a host to a bastion host, you must add an account of the host to the bastion host. This way, O\\&M engineers can use the account to log on to and perform O\\&M operations on the host by using the bastion host.
//
// @param request - CreateHostAccountRequest
//
// @return CreateHostAccountResponse
func (client *Client) CreateHostAccount(request *CreateHostAccountRequest) (_result *CreateHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHostAccountResponse{}
	_body, _err := client.CreateHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// You can create asset groups based on your business requirements and add assets of the same type to an asset group. This allows you to classify assets and manage multiple assets at a time.
//
// @param request - CreateHostGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHostGroupResponse
func (client *Client) CreateHostGroupWithOptions(request *CreateHostGroupRequest, runtime *util.RuntimeOptions) (_result *CreateHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHostGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateHostGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateHostGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// You can create asset groups based on your business requirements and add assets of the same type to an asset group. This allows you to classify assets and manage multiple assets at a time.
//
// @param request - CreateHostGroupRequest
//
// @return CreateHostGroupResponse
func (client *Client) CreateHostGroup(request *CreateHostGroupRequest) (_result *CreateHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHostGroupResponse{}
	_body, _err := client.CreateHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Bastionhost provides the shared key feature. This feature allows you to manage the private key that is used to log on to a host in a bastion host. This way, you can associate the private key with multiple accounts of the host to make host account management more efficient.
//
// @param request - CreateHostShareKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHostShareKeyResponse
func (client *Client) CreateHostShareKeyWithOptions(request *CreateHostShareKeyRequest, runtime *util.RuntimeOptions) (_result *CreateHostShareKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostShareKeyName)) {
		query["HostShareKeyName"] = request.HostShareKeyName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PassPhrase)) {
		query["PassPhrase"] = request.PassPhrase
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateKey)) {
		query["PrivateKey"] = request.PrivateKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHostShareKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateHostShareKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateHostShareKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Bastionhost provides the shared key feature. This feature allows you to manage the private key that is used to log on to a host in a bastion host. This way, you can associate the private key with multiple accounts of the host to make host account management more efficient.
//
// @param request - CreateHostShareKeyRequest
//
// @return CreateHostShareKeyResponse
func (client *Client) CreateHostShareKey(request *CreateHostShareKeyRequest) (_result *CreateHostShareKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHostShareKeyResponse{}
	_body, _err := client.CreateHostShareKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a network domain.
//
// @param request - CreateNetworkDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNetworkDomainResponse
func (client *Client) CreateNetworkDomainWithOptions(request *CreateNetworkDomainRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainName)) {
		query["NetworkDomainName"] = request.NetworkDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainType)) {
		query["NetworkDomainType"] = request.NetworkDomainType
	}

	if !tea.BoolValue(util.IsUnset(request.Proxies)) {
		query["Proxies"] = request.Proxies
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkDomain"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateNetworkDomainResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateNetworkDomainResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a network domain.
//
// @param request - CreateNetworkDomainRequest
//
// @return CreateNetworkDomainResponse
func (client *Client) CreateNetworkDomain(request *CreateNetworkDomainRequest) (_result *CreateNetworkDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkDomainResponse{}
	_body, _err := client.CreateNetworkDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateOperationTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOperationTicketResponse
func (client *Client) CreateOperationTicketWithOptions(request *CreateOperationTicketRequest, runtime *util.RuntimeOptions) (_result *CreateOperationTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApproveComment)) {
		query["ApproveComment"] = request.ApproveComment
	}

	if !tea.BoolValue(util.IsUnset(request.AssetAccountName)) {
		query["AssetAccountName"] = request.AssetAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AssetId)) {
		query["AssetId"] = request.AssetId
	}

	if !tea.BoolValue(util.IsUnset(request.EffectEndTime)) {
		query["EffectEndTime"] = request.EffectEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EffectStartTime)) {
		query["EffectStartTime"] = request.EffectStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsOneTimeEffect)) {
		query["IsOneTimeEffect"] = request.IsOneTimeEffect
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolName)) {
		query["ProtocolName"] = request.ProtocolName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOperationTicket"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateOperationTicketResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateOperationTicketResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// @param request - CreateOperationTicketRequest
//
// @return CreateOperationTicketResponse
func (client *Client) CreateOperationTicket(request *CreateOperationTicketRequest) (_result *CreateOperationTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOperationTicketResponse{}
	_body, _err := client.CreateOperationTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a command control, command approval, protocol control, or access control policy to manage O\\&M operations. This effectively prevents users from performing high-risk operations or accidental operations to ensure O\\&M security.
//
// @param request - CreatePolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePolicyResponse
func (client *Client) CreatePolicyWithOptions(request *CreatePolicyRequest, runtime *util.RuntimeOptions) (_result *CreatePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePolicy"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreatePolicyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreatePolicyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures a command control, command approval, protocol control, or access control policy to manage O\\&M operations. This effectively prevents users from performing high-risk operations or accidental operations to ensure O\\&M security.
//
// @param request - CreatePolicyRequest
//
// @return CreatePolicyResponse
func (client *Client) CreatePolicy(request *CreatePolicyRequest) (_result *CreatePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePolicyResponse{}
	_body, _err := client.CreatePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// You can create authorization rules to authorize multiple users to manage assets. You can also specify a validity period for an authorization rule. This way, you can manage users and assets in a more efficient manner and limit the time periods during which users can access assets.
//
// @param request - CreateRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRuleResponse
func (client *Client) CreateRuleWithOptions(request *CreateRuleRequest, runtime *util.RuntimeOptions) (_result *CreateRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.Databases)) {
		query["Databases"] = request.Databases
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveEndTime)) {
		query["EffectiveEndTime"] = request.EffectiveEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveStartTime)) {
		query["EffectiveStartTime"] = request.EffectiveStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroups)) {
		query["HostGroups"] = request.HostGroups
	}

	if !tea.BoolValue(util.IsUnset(request.Hosts)) {
		query["Hosts"] = request.Hosts
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupIds)) {
		query["UserGroupIds"] = request.UserGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["UserIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRule"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateRuleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateRuleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// You can create authorization rules to authorize multiple users to manage assets. You can also specify a validity period for an authorization rule. This way, you can manage users and assets in a more efficient manner and limit the time periods during which users can access assets.
//
// @param request - CreateRuleRequest
//
// @return CreateRuleResponse
func (client *Client) CreateRule(request *CreateRuleRequest) (_result *CreateRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRuleResponse{}
	_body, _err := client.CreateRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a user to a bastion host.
//
// Description:
//
// You can call the CreateUser operation to add local users, Resource Access Management (RAM) users, Active Directory (AD)-authenticated users, or Lightweight Directory Access Protocol (LDAP)-authenticated users to a bastion host. After a Bastionhost administrator adds a user to a bastion host, O\\&M engineers can log on to the bastion host as the user to perform O\\&M operations on the hosts that the user is authorized to manage.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
//
// @param request - CreateUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUserResponse
func (client *Client) CreateUserWithOptions(request *CreateUserRequest, runtime *util.RuntimeOptions) (_result *CreateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveEndTime)) {
		query["EffectiveEndTime"] = request.EffectiveEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveStartTime)) {
		query["EffectiveStartTime"] = request.EffectiveStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.LanguageStatus)) {
		query["LanguageStatus"] = request.LanguageStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Mobile)) {
		query["Mobile"] = request.Mobile
	}

	if !tea.BoolValue(util.IsUnset(request.MobileCountryCode)) {
		query["MobileCountryCode"] = request.MobileCountryCode
	}

	if !tea.BoolValue(util.IsUnset(request.NeedResetPassword)) {
		query["NeedResetPassword"] = request.NeedResetPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceUserId)) {
		query["SourceUserId"] = request.SourceUserId
	}

	if !tea.BoolValue(util.IsUnset(request.TwoFactorMethods)) {
		query["TwoFactorMethods"] = request.TwoFactorMethods
	}

	if !tea.BoolValue(util.IsUnset(request.TwoFactorStatus)) {
		query["TwoFactorStatus"] = request.TwoFactorStatus
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds a user to a bastion host.
//
// Description:
//
// You can call the CreateUser operation to add local users, Resource Access Management (RAM) users, Active Directory (AD)-authenticated users, or Lightweight Directory Access Protocol (LDAP)-authenticated users to a bastion host. After a Bastionhost administrator adds a user to a bastion host, O\\&M engineers can log on to the bastion host as the user to perform O\\&M operations on the hosts that the user is authorized to manage.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
//
// @param request - CreateUserRequest
//
// @return CreateUserResponse
func (client *Client) CreateUser(request *CreateUserRequest) (_result *CreateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserResponse{}
	_body, _err := client.CreateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a user group for the specified bastion host.
//
// Description:
//
// You can call this operation to create a user group for a bastion host as an administrator. Then, you can call the [AddUsersToGroup](https://help.aliyun.com/document_detail/204600.html) operation to add users to the user group at a time. After you add the users to the user group, you can authorize and manage the users in a centralized manner.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - CreateUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUserGroupResponse
func (client *Client) CreateUserGroupWithOptions(request *CreateUserGroupRequest, runtime *util.RuntimeOptions) (_result *CreateUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupName)) {
		query["UserGroupName"] = request.UserGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a user group for the specified bastion host.
//
// Description:
//
// You can call this operation to create a user group for a bastion host as an administrator. Then, you can call the [AddUsersToGroup](https://help.aliyun.com/document_detail/204600.html) operation to add users to the user group at a time. After you add the users to the user group, you can authorize and manage the users in a centralized manner.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - CreateUserGroupRequest
//
// @return CreateUserGroupResponse
func (client *Client) CreateUserGroup(request *CreateUserGroupRequest) (_result *CreateUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserGroupResponse{}
	_body, _err := client.CreateUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a public key for a bastion host user and hosts the public key in the bastion host. This way, O\\&M engineers can use the private key that corresponds to the public key to log on to the bastion host from an O\\&M client.
//
// Description:
//
// You can call the CreateUserPublicKey operation to create a public key for the specified user of a bastion host.
//
// @param request - CreateUserPublicKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUserPublicKeyResponse
func (client *Client) CreateUserPublicKeyWithOptions(request *CreateUserPublicKeyRequest, runtime *util.RuntimeOptions) (_result *CreateUserPublicKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKey)) {
		query["PublicKey"] = request.PublicKey
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKeyName)) {
		query["PublicKeyName"] = request.PublicKeyName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUserPublicKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateUserPublicKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateUserPublicKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a public key for a bastion host user and hosts the public key in the bastion host. This way, O\\&M engineers can use the private key that corresponds to the public key to log on to the bastion host from an O\\&M client.
//
// Description:
//
// You can call the CreateUserPublicKey operation to create a public key for the specified user of a bastion host.
//
// @param request - CreateUserPublicKeyRequest
//
// @return CreateUserPublicKeyResponse
func (client *Client) CreateUserPublicKey(request *CreateUserPublicKeyRequest) (_result *CreateUserPublicKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserPublicKeyResponse{}
	_body, _err := client.CreateUserPublicKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a database.
//
// @param request - DeleteDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDatabaseResponse
func (client *Client) DeleteDatabaseWithOptions(request *DeleteDatabaseRequest, runtime *util.RuntimeOptions) (_result *DeleteDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDatabase"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDatabaseResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDatabaseResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a database.
//
// @param request - DeleteDatabaseRequest
//
// @return DeleteDatabaseResponse
func (client *Client) DeleteDatabase(request *DeleteDatabaseRequest) (_result *DeleteDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatabaseResponse{}
	_body, _err := client.DeleteDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a database account.
//
// @param request - DeleteDatabaseAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDatabaseAccountResponse
func (client *Client) DeleteDatabaseAccountWithOptions(request *DeleteDatabaseAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountId)) {
		query["DatabaseAccountId"] = request.DatabaseAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDatabaseAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDatabaseAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDatabaseAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a database account.
//
// @param request - DeleteDatabaseAccountRequest
//
// @return DeleteDatabaseAccountResponse
func (client *Client) DeleteDatabaseAccount(request *DeleteDatabaseAccountRequest) (_result *DeleteDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatabaseAccountResponse{}
	_body, _err := client.DeleteDatabaseAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the specified host.
//
// @param request - DeleteHostRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHostResponse
func (client *Client) DeleteHostWithOptions(request *DeleteHostRequest, runtime *util.RuntimeOptions) (_result *DeleteHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHost"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteHostResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteHostResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the specified host.
//
// @param request - DeleteHostRequest
//
// @return DeleteHostResponse
func (client *Client) DeleteHost(request *DeleteHostRequest) (_result *DeleteHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHostResponse{}
	_body, _err := client.DeleteHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a host account.
//
// Description:
//
// ## Usage notes
//
// This interface is used to delete individual host accounts. If a host account is no longer in use, you can invoke this interface to delete the host account for that host that has been configured on the bastion.
//
// >  After you remove the host account, you must enter the username and password of the host when you log on to the host in Bastionhost.
//
// ## QPS Limit
//
// The single-user QPS limit of this interface is 10 times/second. If the limit is exceeded, the API call will be stream-limited, which may affect your business, please call reasonably.
//
// @param request - DeleteHostAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHostAccountResponse
func (client *Client) DeleteHostAccountWithOptions(request *DeleteHostAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountId)) {
		query["HostAccountId"] = request.HostAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHostAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteHostAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteHostAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes a host account.
//
// Description:
//
// ## Usage notes
//
// This interface is used to delete individual host accounts. If a host account is no longer in use, you can invoke this interface to delete the host account for that host that has been configured on the bastion.
//
// >  After you remove the host account, you must enter the username and password of the host when you log on to the host in Bastionhost.
//
// ## QPS Limit
//
// The single-user QPS limit of this interface is 10 times/second. If the limit is exceeded, the API call will be stream-limited, which may affect your business, please call reasonably.
//
// @param request - DeleteHostAccountRequest
//
// @return DeleteHostAccountResponse
func (client *Client) DeleteHostAccount(request *DeleteHostAccountRequest) (_result *DeleteHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHostAccountResponse{}
	_body, _err := client.DeleteHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a host group.
//
// Description:
//
// You can call this operation to delete a single host group. If you no longer need to perform O\\&M operations on all hosts in a host group, you can call this operation to delete the host group.
//
// ### Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteHostGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHostGroupResponse
func (client *Client) DeleteHostGroupWithOptions(request *DeleteHostGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHostGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteHostGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteHostGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a host group.
//
// Description:
//
// You can call this operation to delete a single host group. If you no longer need to perform O\\&M operations on all hosts in a host group, you can call this operation to delete the host group.
//
// ### Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteHostGroupRequest
//
// @return DeleteHostGroupResponse
func (client *Client) DeleteHostGroup(request *DeleteHostGroupRequest) (_result *DeleteHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHostGroupResponse{}
	_body, _err := client.DeleteHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a shared key.
//
// @param request - DeleteHostShareKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHostShareKeyResponse
func (client *Client) DeleteHostShareKeyWithOptions(request *DeleteHostShareKeyRequest, runtime *util.RuntimeOptions) (_result *DeleteHostShareKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHostShareKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteHostShareKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteHostShareKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a shared key.
//
// @param request - DeleteHostShareKeyRequest
//
// @return DeleteHostShareKeyResponse
func (client *Client) DeleteHostShareKey(request *DeleteHostShareKeyRequest) (_result *DeleteHostShareKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHostShareKeyResponse{}
	_body, _err := client.DeleteHostShareKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a network domain.
//
// @param request - DeleteNetworkDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNetworkDomainResponse
func (client *Client) DeleteNetworkDomainWithOptions(request *DeleteNetworkDomainRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkDomain"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteNetworkDomainResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteNetworkDomainResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a network domain.
//
// @param request - DeleteNetworkDomainRequest
//
// @return DeleteNetworkDomainResponse
func (client *Client) DeleteNetworkDomain(request *DeleteNetworkDomainRequest) (_result *DeleteNetworkDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkDomainResponse{}
	_body, _err := client.DeleteNetworkDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a control policy.
//
// @param request - DeletePolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePolicyResponse
func (client *Client) DeletePolicyWithOptions(request *DeletePolicyRequest, runtime *util.RuntimeOptions) (_result *DeletePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePolicy"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeletePolicyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeletePolicyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a control policy.
//
// @param request - DeletePolicyRequest
//
// @return DeletePolicyResponse
func (client *Client) DeletePolicy(request *DeletePolicyRequest) (_result *DeletePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePolicyResponse{}
	_body, _err := client.DeletePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an authorization rule.
//
// @param request - DeleteRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRuleResponse
func (client *Client) DeleteRuleWithOptions(request *DeleteRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRule"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteRuleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteRuleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes an authorization rule.
//
// @param request - DeleteRuleRequest
//
// @return DeleteRuleResponse
func (client *Client) DeleteRule(request *DeleteRuleRequest) (_result *DeleteRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRuleResponse{}
	_body, _err := client.DeleteRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a bastion host user.
//
// @param request - DeleteUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteUserResponse
func (client *Client) DeleteUserWithOptions(request *DeleteUserRequest, runtime *util.RuntimeOptions) (_result *DeleteUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a bastion host user.
//
// @param request - DeleteUserRequest
//
// @return DeleteUserResponse
func (client *Client) DeleteUser(request *DeleteUserRequest) (_result *DeleteUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserResponse{}
	_body, _err := client.DeleteUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a specified user group from a specified bastion host.
//
// @param request - DeleteUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteUserGroupResponse
func (client *Client) DeleteUserGroupWithOptions(request *DeleteUserGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a specified user group from a specified bastion host.
//
// @param request - DeleteUserGroupRequest
//
// @return DeleteUserGroupResponse
func (client *Client) DeleteUserGroup(request *DeleteUserGroupRequest) (_result *DeleteUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserGroupResponse{}
	_body, _err := client.DeleteUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a public key from the specified user.
//
// Description:
//
// You can call the DeleteUserPublicKey operation to delete a public key from the specified user of a bastion host.
//
// @param request - DeleteUserPublicKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteUserPublicKeyResponse
func (client *Client) DeleteUserPublicKeyWithOptions(request *DeleteUserPublicKeyRequest, runtime *util.RuntimeOptions) (_result *DeleteUserPublicKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKeyId)) {
		query["PublicKeyId"] = request.PublicKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUserPublicKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteUserPublicKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteUserPublicKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a public key from the specified user.
//
// Description:
//
// You can call the DeleteUserPublicKey operation to delete a public key from the specified user of a bastion host.
//
// @param request - DeleteUserPublicKeyRequest
//
// @return DeleteUserPublicKeyResponse
func (client *Client) DeleteUserPublicKey(request *DeleteUserPublicKeyRequest) (_result *DeleteUserPublicKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserPublicKeyResponse{}
	_body, _err := client.DeleteUserPublicKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the attribute information about the specified bastion host. The information includes the ID and remarks of the bastion host.
//
// Description:
//
// ***
//
// @param request - DescribeInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceAttributeResponse
func (client *Client) DescribeInstanceAttributeWithOptions(request *DescribeInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAttribute"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the attribute information about the specified bastion host. The information includes the ID and remarks of the bastion host.
//
// Description:
//
// ***
//
// @param request - DescribeInstanceAttributeRequest
//
// @return DescribeInstanceAttributeResponse
func (client *Client) DescribeInstanceAttribute(request *DescribeInstanceAttributeRequest) (_result *DescribeInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAttributeResponse{}
	_body, _err := client.DescribeInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 堡垒机实例列表
//
// @param request - DescribeInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstancesResponse
func (client *Client) DescribeInstancesWithOptions(request *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceStatus)) {
		query["InstanceStatus"] = request.InstanceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstances"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 堡垒机实例列表
//
// @param request - DescribeInstancesRequest
//
// @return DescribeInstancesResponse
func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries available regions where you can create bastion hosts.
//
// @param request - DescribeRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		query["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeRegionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeRegionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries available regions where you can create bastion hosts.
//
// @param request - DescribeRegionsRequest
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes permissions on databases and database accounts from a user.
//
// @param request - DetachDatabaseAccountsFromUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachDatabaseAccountsFromUserResponse
func (client *Client) DetachDatabaseAccountsFromUserWithOptions(request *DetachDatabaseAccountsFromUserRequest, runtime *util.RuntimeOptions) (_result *DetachDatabaseAccountsFromUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Databases)) {
		query["Databases"] = request.Databases
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachDatabaseAccountsFromUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachDatabaseAccountsFromUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachDatabaseAccountsFromUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Revokes permissions on databases and database accounts from a user.
//
// @param request - DetachDatabaseAccountsFromUserRequest
//
// @return DetachDatabaseAccountsFromUserResponse
func (client *Client) DetachDatabaseAccountsFromUser(request *DetachDatabaseAccountsFromUserRequest) (_result *DetachDatabaseAccountsFromUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDatabaseAccountsFromUserResponse{}
	_body, _err := client.DetachDatabaseAccountsFromUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes permissions on databases and database accounts from a user group.
//
// @param request - DetachDatabaseAccountsFromUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachDatabaseAccountsFromUserGroupResponse
func (client *Client) DetachDatabaseAccountsFromUserGroupWithOptions(request *DetachDatabaseAccountsFromUserGroupRequest, runtime *util.RuntimeOptions) (_result *DetachDatabaseAccountsFromUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Databases)) {
		query["Databases"] = request.Databases
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachDatabaseAccountsFromUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachDatabaseAccountsFromUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachDatabaseAccountsFromUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Revokes permissions on databases and database accounts from a user group.
//
// @param request - DetachDatabaseAccountsFromUserGroupRequest
//
// @return DetachDatabaseAccountsFromUserGroupResponse
func (client *Client) DetachDatabaseAccountsFromUserGroup(request *DetachDatabaseAccountsFromUserGroupRequest) (_result *DetachDatabaseAccountsFromUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDatabaseAccountsFromUserGroupResponse{}
	_body, _err := client.DetachDatabaseAccountsFromUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociate host accounts from a shared key.
//
// @param request - DetachHostAccountsFromHostShareKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachHostAccountsFromHostShareKeyResponse
func (client *Client) DetachHostAccountsFromHostShareKeyWithOptions(request *DetachHostAccountsFromHostShareKeyRequest, runtime *util.RuntimeOptions) (_result *DetachHostAccountsFromHostShareKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountIds)) {
		query["HostAccountIds"] = request.HostAccountIds
	}

	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachHostAccountsFromHostShareKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachHostAccountsFromHostShareKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachHostAccountsFromHostShareKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disassociate host accounts from a shared key.
//
// @param request - DetachHostAccountsFromHostShareKeyRequest
//
// @return DetachHostAccountsFromHostShareKeyResponse
func (client *Client) DetachHostAccountsFromHostShareKey(request *DetachHostAccountsFromHostShareKeyRequest) (_result *DetachHostAccountsFromHostShareKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachHostAccountsFromHostShareKeyResponse{}
	_body, _err := client.DetachHostAccountsFromHostShareKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes permissions on hosts and host accounts from a user.
//
// @param request - DetachHostAccountsFromUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachHostAccountsFromUserResponse
func (client *Client) DetachHostAccountsFromUserWithOptions(request *DetachHostAccountsFromUserRequest, runtime *util.RuntimeOptions) (_result *DetachHostAccountsFromUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Hosts)) {
		query["Hosts"] = request.Hosts
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachHostAccountsFromUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachHostAccountsFromUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachHostAccountsFromUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Revokes permissions on hosts and host accounts from a user.
//
// @param request - DetachHostAccountsFromUserRequest
//
// @return DetachHostAccountsFromUserResponse
func (client *Client) DetachHostAccountsFromUser(request *DetachHostAccountsFromUserRequest) (_result *DetachHostAccountsFromUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachHostAccountsFromUserResponse{}
	_body, _err := client.DetachHostAccountsFromUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes the permissions on one or more hosts and host accounts from a user group.
//
// @param request - DetachHostAccountsFromUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachHostAccountsFromUserGroupResponse
func (client *Client) DetachHostAccountsFromUserGroupWithOptions(request *DetachHostAccountsFromUserGroupRequest, runtime *util.RuntimeOptions) (_result *DetachHostAccountsFromUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Hosts)) {
		query["Hosts"] = request.Hosts
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachHostAccountsFromUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachHostAccountsFromUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachHostAccountsFromUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Revokes the permissions on one or more hosts and host accounts from a user group.
//
// @param request - DetachHostAccountsFromUserGroupRequest
//
// @return DetachHostAccountsFromUserGroupResponse
func (client *Client) DetachHostAccountsFromUserGroup(request *DetachHostAccountsFromUserGroupRequest) (_result *DetachHostAccountsFromUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachHostAccountsFromUserGroupResponse{}
	_body, _err := client.DetachHostAccountsFromUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes host groups and host accounts from the list of host groups and host accounts that a user is authorized to manage.
//
// @param request - DetachHostGroupAccountsFromUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachHostGroupAccountsFromUserResponse
func (client *Client) DetachHostGroupAccountsFromUserWithOptions(request *DetachHostGroupAccountsFromUserRequest, runtime *util.RuntimeOptions) (_result *DetachHostGroupAccountsFromUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroups)) {
		query["HostGroups"] = request.HostGroups
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachHostGroupAccountsFromUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachHostGroupAccountsFromUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachHostGroupAccountsFromUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes host groups and host accounts from the list of host groups and host accounts that a user is authorized to manage.
//
// @param request - DetachHostGroupAccountsFromUserRequest
//
// @return DetachHostGroupAccountsFromUserResponse
func (client *Client) DetachHostGroupAccountsFromUser(request *DetachHostGroupAccountsFromUserRequest) (_result *DetachHostGroupAccountsFromUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachHostGroupAccountsFromUserResponse{}
	_body, _err := client.DetachHostGroupAccountsFromUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes permissions on one or more host groups and host accounts from a user group.
//
// Description:
//
// ***
//
// @param request - DetachHostGroupAccountsFromUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachHostGroupAccountsFromUserGroupResponse
func (client *Client) DetachHostGroupAccountsFromUserGroupWithOptions(request *DetachHostGroupAccountsFromUserGroupRequest, runtime *util.RuntimeOptions) (_result *DetachHostGroupAccountsFromUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroups)) {
		query["HostGroups"] = request.HostGroups
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachHostGroupAccountsFromUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachHostGroupAccountsFromUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachHostGroupAccountsFromUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Revokes permissions on one or more host groups and host accounts from a user group.
//
// Description:
//
// ***
//
// @param request - DetachHostGroupAccountsFromUserGroupRequest
//
// @return DetachHostGroupAccountsFromUserGroupResponse
func (client *Client) DetachHostGroupAccountsFromUserGroup(request *DetachHostGroupAccountsFromUserGroupRequest) (_result *DetachHostGroupAccountsFromUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachHostGroupAccountsFromUserGroupResponse{}
	_body, _err := client.DetachHostGroupAccountsFromUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables Internet access for a bastion host.
//
// @param request - DisableInstancePublicAccessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableInstancePublicAccessResponse
func (client *Client) DisableInstancePublicAccessWithOptions(request *DisableInstancePublicAccessRequest, runtime *util.RuntimeOptions) (_result *DisableInstancePublicAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableInstancePublicAccess"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableInstancePublicAccessResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableInstancePublicAccessResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables Internet access for a bastion host.
//
// @param request - DisableInstancePublicAccessRequest
//
// @return DisableInstancePublicAccessResponse
func (client *Client) DisableInstancePublicAccess(request *DisableInstancePublicAccessRequest) (_result *DisableInstancePublicAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableInstancePublicAccessResponse{}
	_body, _err := client.DisableInstancePublicAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables an authorization rule.
//
// @param request - DisableRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableRuleResponse
func (client *Client) DisableRuleWithOptions(request *DisableRuleRequest, runtime *util.RuntimeOptions) (_result *DisableRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableRule"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableRuleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableRuleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables an authorization rule.
//
// @param request - DisableRuleRequest
//
// @return DisableRuleResponse
func (client *Client) DisableRule(request *DisableRuleRequest) (_result *DisableRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableRuleResponse{}
	_body, _err := client.DisableRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables Internet access for a bastion host.
//
// @param request - EnableInstancePublicAccessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableInstancePublicAccessResponse
func (client *Client) EnableInstancePublicAccessWithOptions(request *EnableInstancePublicAccessRequest, runtime *util.RuntimeOptions) (_result *EnableInstancePublicAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableInstancePublicAccess"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &EnableInstancePublicAccessResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &EnableInstancePublicAccessResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables Internet access for a bastion host.
//
// @param request - EnableInstancePublicAccessRequest
//
// @return EnableInstancePublicAccessResponse
func (client *Client) EnableInstancePublicAccess(request *EnableInstancePublicAccessRequest) (_result *EnableInstancePublicAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableInstancePublicAccessResponse{}
	_body, _err := client.EnableInstancePublicAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables an authorization rule.
//
// @param request - EnableRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableRuleResponse
func (client *Client) EnableRuleWithOptions(request *EnableRuleRequest, runtime *util.RuntimeOptions) (_result *EnableRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableRule"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &EnableRuleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &EnableRuleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables an authorization rule.
//
// @param request - EnableRuleRequest
//
// @return EnableRuleResponse
func (client *Client) EnableRule(request *EnableRuleRequest) (_result *EnableRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableRuleResponse{}
	_body, _err := client.EnableRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Applies for an O\\&M token.
//
// @param request - GenerateAssetOperationTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateAssetOperationTokenResponse
func (client *Client) GenerateAssetOperationTokenWithOptions(request *GenerateAssetOperationTokenRequest, runtime *util.RuntimeOptions) (_result *GenerateAssetOperationTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetAccountId)) {
		query["AssetAccountId"] = request.AssetAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.AssetAccountName)) {
		query["AssetAccountName"] = request.AssetAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AssetAccountPassword)) {
		query["AssetAccountPassword"] = request.AssetAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.AssetAccountProtocolName)) {
		query["AssetAccountProtocolName"] = request.AssetAccountProtocolName
	}

	if !tea.BoolValue(util.IsUnset(request.AssetId)) {
		query["AssetId"] = request.AssetId
	}

	if !tea.BoolValue(util.IsUnset(request.AssetType)) {
		query["AssetType"] = request.AssetType
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseSchema)) {
		query["DatabaseSchema"] = request.DatabaseSchema
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LoginAttribute)) {
		query["LoginAttribute"] = request.LoginAttribute
	}

	if !tea.BoolValue(util.IsUnset(request.OperationMode)) {
		query["OperationMode"] = request.OperationMode
	}

	if !tea.BoolValue(util.IsUnset(request.OperationNote)) {
		query["OperationNote"] = request.OperationNote
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SsoClient)) {
		query["SsoClient"] = request.SsoClient
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateAssetOperationToken"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GenerateAssetOperationTokenResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GenerateAssetOperationTokenResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Applies for an O\\&M token.
//
// @param request - GenerateAssetOperationTokenRequest
//
// @return GenerateAssetOperationTokenResponse
func (client *Client) GenerateAssetOperationToken(request *GenerateAssetOperationTokenRequest) (_result *GenerateAssetOperationTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateAssetOperationTokenResponse{}
	_body, _err := client.GenerateAssetOperationTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detailed information about a database.
//
// @param request - GetDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDatabaseResponse
func (client *Client) GetDatabaseWithOptions(request *GetDatabaseRequest, runtime *util.RuntimeOptions) (_result *GetDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDatabase"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDatabaseResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDatabaseResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the detailed information about a database.
//
// @param request - GetDatabaseRequest
//
// @return GetDatabaseResponse
func (client *Client) GetDatabase(request *GetDatabaseRequest) (_result *GetDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDatabaseResponse{}
	_body, _err := client.GetDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detailed information about a database account.
//
// @param request - GetDatabaseAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDatabaseAccountResponse
func (client *Client) GetDatabaseAccountWithOptions(request *GetDatabaseAccountRequest, runtime *util.RuntimeOptions) (_result *GetDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountId)) {
		query["DatabaseAccountId"] = request.DatabaseAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDatabaseAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDatabaseAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDatabaseAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the detailed information about a database account.
//
// @param request - GetDatabaseAccountRequest
//
// @return GetDatabaseAccountResponse
func (client *Client) GetDatabaseAccount(request *GetDatabaseAccountRequest) (_result *GetDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDatabaseAccountResponse{}
	_body, _err := client.GetDatabaseAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetExportConfigJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetExportConfigJobResponse
func (client *Client) GetExportConfigJobWithOptions(request *GetExportConfigJobRequest, runtime *util.RuntimeOptions) (_result *GetExportConfigJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetExportConfigJob"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetExportConfigJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetExportConfigJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// @param request - GetExportConfigJobRequest
//
// @return GetExportConfigJobResponse
func (client *Client) GetExportConfigJob(request *GetExportConfigJobRequest) (_result *GetExportConfigJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetExportConfigJobResponse{}
	_body, _err := client.GetExportConfigJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a host, such as the name, source, address, protocol, and service port of the host.
//
// @param request - GetHostRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHostResponse
func (client *Client) GetHostWithOptions(request *GetHostRequest, runtime *util.RuntimeOptions) (_result *GetHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHost"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetHostResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetHostResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of a host, such as the name, source, address, protocol, and service port of the host.
//
// @param request - GetHostRequest
//
// @return GetHostResponse
func (client *Client) GetHost(request *GetHostRequest) (_result *GetHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHostResponse{}
	_body, _err := client.GetHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a specified host account.
//
// @param request - GetHostAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHostAccountResponse
func (client *Client) GetHostAccountWithOptions(request *GetHostAccountRequest, runtime *util.RuntimeOptions) (_result *GetHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountId)) {
		query["HostAccountId"] = request.HostAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHostAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetHostAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetHostAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of a specified host account.
//
// @param request - GetHostAccountRequest
//
// @return GetHostAccountResponse
func (client *Client) GetHostAccount(request *GetHostAccountRequest) (_result *GetHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHostAccountResponse{}
	_body, _err := client.GetHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a specified host group.
//
// @param request - GetHostGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHostGroupResponse
func (client *Client) GetHostGroupWithOptions(request *GetHostGroupRequest, runtime *util.RuntimeOptions) (_result *GetHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHostGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetHostGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetHostGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of a specified host group.
//
// @param request - GetHostGroupRequest
//
// @return GetHostGroupResponse
func (client *Client) GetHostGroup(request *GetHostGroupRequest) (_result *GetHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHostGroupResponse{}
	_body, _err := client.GetHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a shared key.
//
// @param request - GetHostShareKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHostShareKeyResponse
func (client *Client) GetHostShareKeyWithOptions(request *GetHostShareKeyRequest, runtime *util.RuntimeOptions) (_result *GetHostShareKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHostShareKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetHostShareKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetHostShareKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a shared key.
//
// @param request - GetHostShareKeyRequest
//
// @return GetHostShareKeyResponse
func (client *Client) GetHostShareKey(request *GetHostShareKeyRequest) (_result *GetHostShareKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHostShareKeyResponse{}
	_body, _err := client.GetHostShareKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the settings of Active Directory (AD) authentication on a bastion host.
//
// Description:
//
// ###
//
// You can call this operation to query the settings of AD authentication on a bastion host. After you configure AD authentication on a bastion host, you can import AD-authenticated users into the bastion host. After the AD-authenticated users are imported into the bastion host, the AD-authenticated users can log on to the bastion host to perform O\\&M operations on servers.
//
// ### Limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - GetInstanceADAuthServerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceADAuthServerResponse
func (client *Client) GetInstanceADAuthServerWithOptions(request *GetInstanceADAuthServerRequest, runtime *util.RuntimeOptions) (_result *GetInstanceADAuthServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceADAuthServer"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetInstanceADAuthServerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetInstanceADAuthServerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the settings of Active Directory (AD) authentication on a bastion host.
//
// Description:
//
// ###
//
// You can call this operation to query the settings of AD authentication on a bastion host. After you configure AD authentication on a bastion host, you can import AD-authenticated users into the bastion host. After the AD-authenticated users are imported into the bastion host, the AD-authenticated users can log on to the bastion host to perform O\\&M operations on servers.
//
// ### Limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - GetInstanceADAuthServerRequest
//
// @return GetInstanceADAuthServerResponse
func (client *Client) GetInstanceADAuthServer(request *GetInstanceADAuthServerRequest) (_result *GetInstanceADAuthServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceADAuthServerResponse{}
	_body, _err := client.GetInstanceADAuthServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the settings of Lightweight Directory Access Protocol (LDAP) authentication on a bastion host.
//
// @param request - GetInstanceLDAPAuthServerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceLDAPAuthServerResponse
func (client *Client) GetInstanceLDAPAuthServerWithOptions(request *GetInstanceLDAPAuthServerRequest, runtime *util.RuntimeOptions) (_result *GetInstanceLDAPAuthServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceLDAPAuthServer"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetInstanceLDAPAuthServerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetInstanceLDAPAuthServerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the settings of Lightweight Directory Access Protocol (LDAP) authentication on a bastion host.
//
// @param request - GetInstanceLDAPAuthServerRequest
//
// @return GetInstanceLDAPAuthServerResponse
func (client *Client) GetInstanceLDAPAuthServer(request *GetInstanceLDAPAuthServerRequest) (_result *GetInstanceLDAPAuthServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceLDAPAuthServerResponse{}
	_body, _err := client.GetInstanceLDAPAuthServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetInstanceStoreInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceStoreInfoResponse
func (client *Client) GetInstanceStoreInfoWithOptions(request *GetInstanceStoreInfoRequest, runtime *util.RuntimeOptions) (_result *GetInstanceStoreInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceStoreInfo"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetInstanceStoreInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetInstanceStoreInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// @param request - GetInstanceStoreInfoRequest
//
// @return GetInstanceStoreInfoResponse
func (client *Client) GetInstanceStoreInfo(request *GetInstanceStoreInfoRequest) (_result *GetInstanceStoreInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceStoreInfoResponse{}
	_body, _err := client.GetInstanceStoreInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the settings of two-factor authentication on a bastion host.
//
// Description:
//
// You can call this operation to query the settings of two-factor authentication on a bastion host. After you enable two-factor authentication, Bastionhost sends a verification code to a local user when the local user logs on to a bastion host. A local user can log on to the bastion host only when the local user enters the valid username and password and the verification code. This reduces the security risks caused by account information leaks.
//
// ### Limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - GetInstanceTwoFactorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceTwoFactorResponse
func (client *Client) GetInstanceTwoFactorWithOptions(request *GetInstanceTwoFactorRequest, runtime *util.RuntimeOptions) (_result *GetInstanceTwoFactorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceTwoFactor"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetInstanceTwoFactorResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetInstanceTwoFactorResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the settings of two-factor authentication on a bastion host.
//
// Description:
//
// You can call this operation to query the settings of two-factor authentication on a bastion host. After you enable two-factor authentication, Bastionhost sends a verification code to a local user when the local user logs on to a bastion host. A local user can log on to the bastion host only when the local user enters the valid username and password and the verification code. This reduces the security risks caused by account information leaks.
//
// ### Limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - GetInstanceTwoFactorRequest
//
// @return GetInstanceTwoFactorResponse
func (client *Client) GetInstanceTwoFactor(request *GetInstanceTwoFactorRequest) (_result *GetInstanceTwoFactorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceTwoFactorResponse{}
	_body, _err := client.GetInstanceTwoFactorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detailed information about a network domain.
//
// @param request - GetNetworkDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNetworkDomainResponse
func (client *Client) GetNetworkDomainWithOptions(request *GetNetworkDomainRequest, runtime *util.RuntimeOptions) (_result *GetNetworkDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNetworkDomain"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetNetworkDomainResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetNetworkDomainResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the detailed information about a network domain.
//
// @param request - GetNetworkDomainRequest
//
// @return GetNetworkDomainResponse
func (client *Client) GetNetworkDomain(request *GetNetworkDomainRequest) (_result *GetNetworkDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNetworkDomainResponse{}
	_body, _err := client.GetNetworkDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detailed information about a control policy.
//
// @param request - GetPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPolicyResponse
func (client *Client) GetPolicyWithOptions(request *GetPolicyRequest, runtime *util.RuntimeOptions) (_result *GetPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPolicy"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetPolicyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetPolicyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the detailed information about a control policy.
//
// @param request - GetPolicyRequest
//
// @return GetPolicyResponse
func (client *Client) GetPolicy(request *GetPolicyRequest) (_result *GetPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPolicyResponse{}
	_body, _err := client.GetPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the assets to which a control policy applies.
//
// @param request - GetPolicyAssetScopeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPolicyAssetScopeResponse
func (client *Client) GetPolicyAssetScopeWithOptions(request *GetPolicyAssetScopeRequest, runtime *util.RuntimeOptions) (_result *GetPolicyAssetScopeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPolicyAssetScope"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetPolicyAssetScopeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetPolicyAssetScopeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the assets to which a control policy applies.
//
// @param request - GetPolicyAssetScopeRequest
//
// @return GetPolicyAssetScopeResponse
func (client *Client) GetPolicyAssetScope(request *GetPolicyAssetScopeRequest) (_result *GetPolicyAssetScopeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPolicyAssetScopeResponse{}
	_body, _err := client.GetPolicyAssetScopeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the scope of users to whom a control policy applies.
//
// @param request - GetPolicyUserScopeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPolicyUserScopeResponse
func (client *Client) GetPolicyUserScopeWithOptions(request *GetPolicyUserScopeRequest, runtime *util.RuntimeOptions) (_result *GetPolicyUserScopeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPolicyUserScope"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetPolicyUserScopeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetPolicyUserScopeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the scope of users to whom a control policy applies.
//
// @param request - GetPolicyUserScopeRequest
//
// @return GetPolicyUserScopeResponse
func (client *Client) GetPolicyUserScope(request *GetPolicyUserScopeRequest) (_result *GetPolicyUserScopeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPolicyUserScopeResponse{}
	_body, _err := client.GetPolicyUserScopeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detailed information about an authorization rule.
//
// @param request - GetRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRuleResponse
func (client *Client) GetRuleWithOptions(request *GetRuleRequest, runtime *util.RuntimeOptions) (_result *GetRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRule"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetRuleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetRuleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the detailed information about an authorization rule.
//
// @param request - GetRuleRequest
//
// @return GetRuleResponse
func (client *Client) GetRule(request *GetRuleRequest) (_result *GetRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRuleResponse{}
	_body, _err := client.GetRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a user of the specified bastion host.
//
// @param request - GetUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserResponse
func (client *Client) GetUserWithOptions(request *GetUserRequest, runtime *util.RuntimeOptions) (_result *GetUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of a user of the specified bastion host.
//
// @param request - GetUserRequest
//
// @return GetUserResponse
func (client *Client) GetUser(request *GetUserRequest) (_result *GetUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserResponse{}
	_body, _err := client.GetUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a user group in a bastion host.
//
// @param request - GetUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserGroupResponse
func (client *Client) GetUserGroupWithOptions(request *GetUserGroupRequest, runtime *util.RuntimeOptions) (_result *GetUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of a user group in a bastion host.
//
// @param request - GetUserGroupRequest
//
// @return GetUserGroupResponse
func (client *Client) GetUserGroup(request *GetUserGroupRequest) (_result *GetUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserGroupResponse{}
	_body, _err := client.GetUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries commands to be reviewed.
//
// Description:
//
// You can call this operation to query commands to be reviewed by a Bastionhost administrator.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ListApproveCommandsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListApproveCommandsResponse
func (client *Client) ListApproveCommandsWithOptions(request *ListApproveCommandsRequest, runtime *util.RuntimeOptions) (_result *ListApproveCommandsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApproveCommands"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListApproveCommandsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListApproveCommandsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries commands to be reviewed.
//
// Description:
//
// You can call this operation to query commands to be reviewed by a Bastionhost administrator.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ListApproveCommandsRequest
//
// @return ListApproveCommandsResponse
func (client *Client) ListApproveCommands(request *ListApproveCommandsRequest) (_result *ListApproveCommandsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListApproveCommandsResponse{}
	_body, _err := client.ListApproveCommandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the database accounts of a database.
//
// @param request - ListDatabaseAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabaseAccountsResponse
func (client *Client) ListDatabaseAccountsWithOptions(request *ListDatabaseAccountsRequest, runtime *util.RuntimeOptions) (_result *ListDatabaseAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountName)) {
		query["DatabaseAccountName"] = request.DatabaseAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabaseAccounts"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDatabaseAccountsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDatabaseAccountsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the database accounts of a database.
//
// @param request - ListDatabaseAccountsRequest
//
// @return ListDatabaseAccountsResponse
func (client *Client) ListDatabaseAccounts(request *ListDatabaseAccountsRequest) (_result *ListDatabaseAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabaseAccountsResponse{}
	_body, _err := client.ListDatabaseAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the database accounts of a database and whether a user is authorized to manage each database account.
//
// @param request - ListDatabaseAccountsForUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabaseAccountsForUserResponse
func (client *Client) ListDatabaseAccountsForUserWithOptions(request *ListDatabaseAccountsForUserRequest, runtime *util.RuntimeOptions) (_result *ListDatabaseAccountsForUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountName)) {
		query["DatabaseAccountName"] = request.DatabaseAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabaseAccountsForUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDatabaseAccountsForUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDatabaseAccountsForUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the database accounts of a database and whether a user is authorized to manage each database account.
//
// @param request - ListDatabaseAccountsForUserRequest
//
// @return ListDatabaseAccountsForUserResponse
func (client *Client) ListDatabaseAccountsForUser(request *ListDatabaseAccountsForUserRequest) (_result *ListDatabaseAccountsForUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabaseAccountsForUserResponse{}
	_body, _err := client.ListDatabaseAccountsForUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the database accounts of a database and whether a user group is authorized to manage each database account.
//
// @param request - ListDatabaseAccountsForUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabaseAccountsForUserGroupResponse
func (client *Client) ListDatabaseAccountsForUserGroupWithOptions(request *ListDatabaseAccountsForUserGroupRequest, runtime *util.RuntimeOptions) (_result *ListDatabaseAccountsForUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountName)) {
		query["DatabaseAccountName"] = request.DatabaseAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabaseAccountsForUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDatabaseAccountsForUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDatabaseAccountsForUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the database accounts of a database and whether a user group is authorized to manage each database account.
//
// @param request - ListDatabaseAccountsForUserGroupRequest
//
// @return ListDatabaseAccountsForUserGroupResponse
func (client *Client) ListDatabaseAccountsForUserGroup(request *ListDatabaseAccountsForUserGroupRequest) (_result *ListDatabaseAccountsForUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabaseAccountsForUserGroupResponse{}
	_body, _err := client.ListDatabaseAccountsForUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the databases that are managed by a bastion host.
//
// @param request - ListDatabasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabasesResponse
func (client *Client) ListDatabasesWithOptions(request *ListDatabasesRequest, runtime *util.RuntimeOptions) (_result *ListDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabases"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDatabasesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDatabasesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the databases that are managed by a bastion host.
//
// @param request - ListDatabasesRequest
//
// @return ListDatabasesResponse
func (client *Client) ListDatabases(request *ListDatabasesRequest) (_result *ListDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabasesResponse{}
	_body, _err := client.ListDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the databases that a user is authorized to manage.
//
// @param request - ListDatabasesForUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabasesForUserResponse
func (client *Client) ListDatabasesForUserWithOptions(request *ListDatabasesForUserRequest, runtime *util.RuntimeOptions) (_result *ListDatabasesForUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAddress)) {
		query["DatabaseAddress"] = request.DatabaseAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabasesForUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDatabasesForUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDatabasesForUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the databases that a user is authorized to manage.
//
// @param request - ListDatabasesForUserRequest
//
// @return ListDatabasesForUserResponse
func (client *Client) ListDatabasesForUser(request *ListDatabasesForUserRequest) (_result *ListDatabasesForUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabasesForUserResponse{}
	_body, _err := client.ListDatabasesForUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the databases that a user group is authorized to manage.
//
// @param request - ListDatabasesForUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabasesForUserGroupResponse
func (client *Client) ListDatabasesForUserGroupWithOptions(request *ListDatabasesForUserGroupRequest, runtime *util.RuntimeOptions) (_result *ListDatabasesForUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAddress)) {
		query["DatabaseAddress"] = request.DatabaseAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabasesForUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDatabasesForUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDatabasesForUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the databases that a user group is authorized to manage.
//
// @param request - ListDatabasesForUserGroupRequest
//
// @return ListDatabasesForUserGroupResponse
func (client *Client) ListDatabasesForUserGroup(request *ListDatabasesForUserGroupRequest) (_result *ListDatabasesForUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabasesForUserGroupResponse{}
	_body, _err := client.ListDatabasesForUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries accounts of a specified host.
//
// @param request - ListHostAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostAccountsResponse
func (client *Client) ListHostAccountsWithOptions(request *ListHostAccountsRequest, runtime *util.RuntimeOptions) (_result *ListHostAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountName)) {
		query["HostAccountName"] = request.HostAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolName)) {
		query["ProtocolName"] = request.ProtocolName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostAccounts"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostAccountsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostAccountsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries accounts of a specified host.
//
// @param request - ListHostAccountsRequest
//
// @return ListHostAccountsResponse
func (client *Client) ListHostAccounts(request *ListHostAccountsRequest) (_result *ListHostAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostAccountsResponse{}
	_body, _err := client.ListHostAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the host accounts that are associated with a shared key.
//
// @param request - ListHostAccountsForHostShareKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostAccountsForHostShareKeyResponse
func (client *Client) ListHostAccountsForHostShareKeyWithOptions(request *ListHostAccountsForHostShareKeyRequest, runtime *util.RuntimeOptions) (_result *ListHostAccountsForHostShareKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostAccountsForHostShareKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostAccountsForHostShareKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostAccountsForHostShareKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the host accounts that are associated with a shared key.
//
// @param request - ListHostAccountsForHostShareKeyRequest
//
// @return ListHostAccountsForHostShareKeyResponse
func (client *Client) ListHostAccountsForHostShareKey(request *ListHostAccountsForHostShareKeyRequest) (_result *ListHostAccountsForHostShareKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostAccountsForHostShareKeyResponse{}
	_body, _err := client.ListHostAccountsForHostShareKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the host accounts that the specified user is authorized to manage on the specified host.
//
// @param request - ListHostAccountsForUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostAccountsForUserResponse
func (client *Client) ListHostAccountsForUserWithOptions(request *ListHostAccountsForUserRequest, runtime *util.RuntimeOptions) (_result *ListHostAccountsForUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountName)) {
		query["HostAccountName"] = request.HostAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostAccountsForUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostAccountsForUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostAccountsForUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the host accounts that the specified user is authorized to manage on the specified host.
//
// @param request - ListHostAccountsForUserRequest
//
// @return ListHostAccountsForUserResponse
func (client *Client) ListHostAccountsForUser(request *ListHostAccountsForUserRequest) (_result *ListHostAccountsForUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostAccountsForUserResponse{}
	_body, _err := client.ListHostAccountsForUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the host accounts of the specified host that the specified user group is authorized to manage.
//
// @param request - ListHostAccountsForUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostAccountsForUserGroupResponse
func (client *Client) ListHostAccountsForUserGroupWithOptions(request *ListHostAccountsForUserGroupRequest, runtime *util.RuntimeOptions) (_result *ListHostAccountsForUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountName)) {
		query["HostAccountName"] = request.HostAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostAccountsForUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostAccountsForUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostAccountsForUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the host accounts of the specified host that the specified user group is authorized to manage.
//
// @param request - ListHostAccountsForUserGroupRequest
//
// @return ListHostAccountsForUserGroupResponse
func (client *Client) ListHostAccountsForUserGroup(request *ListHostAccountsForUserGroupRequest) (_result *ListHostAccountsForUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostAccountsForUserGroupResponse{}
	_body, _err := client.ListHostAccountsForUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the names of the host accounts that a specified user is authorized to manage in a specified host group.
//
// @param request - ListHostGroupAccountNamesForUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostGroupAccountNamesForUserResponse
func (client *Client) ListHostGroupAccountNamesForUserWithOptions(request *ListHostGroupAccountNamesForUserRequest, runtime *util.RuntimeOptions) (_result *ListHostGroupAccountNamesForUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostGroupAccountNamesForUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostGroupAccountNamesForUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostGroupAccountNamesForUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the names of the host accounts that a specified user is authorized to manage in a specified host group.
//
// @param request - ListHostGroupAccountNamesForUserRequest
//
// @return ListHostGroupAccountNamesForUserResponse
func (client *Client) ListHostGroupAccountNamesForUser(request *ListHostGroupAccountNamesForUserRequest) (_result *ListHostGroupAccountNamesForUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostGroupAccountNamesForUserResponse{}
	_body, _err := client.ListHostGroupAccountNamesForUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the names of the host accounts that a user group is authorized to manage in a host group.
//
// @param request - ListHostGroupAccountNamesForUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostGroupAccountNamesForUserGroupResponse
func (client *Client) ListHostGroupAccountNamesForUserGroupWithOptions(request *ListHostGroupAccountNamesForUserGroupRequest, runtime *util.RuntimeOptions) (_result *ListHostGroupAccountNamesForUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostGroupAccountNamesForUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostGroupAccountNamesForUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostGroupAccountNamesForUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the names of the host accounts that a user group is authorized to manage in a host group.
//
// @param request - ListHostGroupAccountNamesForUserGroupRequest
//
// @return ListHostGroupAccountNamesForUserGroupResponse
func (client *Client) ListHostGroupAccountNamesForUserGroup(request *ListHostGroupAccountNamesForUserGroupRequest) (_result *ListHostGroupAccountNamesForUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostGroupAccountNamesForUserGroupResponse{}
	_body, _err := client.ListHostGroupAccountNamesForUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of asset groups that are managed by a bastion host.
//
// @param request - ListHostGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostGroupsResponse
func (client *Client) ListHostGroupsWithOptions(request *ListHostGroupsRequest, runtime *util.RuntimeOptions) (_result *ListHostGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostGroups"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostGroupsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostGroupsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of asset groups that are managed by a bastion host.
//
// @param request - ListHostGroupsRequest
//
// @return ListHostGroupsResponse
func (client *Client) ListHostGroups(request *ListHostGroupsRequest) (_result *ListHostGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostGroupsResponse{}
	_body, _err := client.ListHostGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of host groups that a bastion host user is authorized or is not authorized to manage.
//
// @param request - ListHostGroupsForUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostGroupsForUserResponse
func (client *Client) ListHostGroupsForUserWithOptions(request *ListHostGroupsForUserRequest, runtime *util.RuntimeOptions) (_result *ListHostGroupsForUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostGroupsForUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostGroupsForUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostGroupsForUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of host groups that a bastion host user is authorized or is not authorized to manage.
//
// @param request - ListHostGroupsForUserRequest
//
// @return ListHostGroupsForUserResponse
func (client *Client) ListHostGroupsForUser(request *ListHostGroupsForUserRequest) (_result *ListHostGroupsForUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostGroupsForUserResponse{}
	_body, _err := client.ListHostGroupsForUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the hosts that a specified user group is authorized or not authorized to manage.
//
// @param request - ListHostGroupsForUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostGroupsForUserGroupResponse
func (client *Client) ListHostGroupsForUserGroupWithOptions(request *ListHostGroupsForUserGroupRequest, runtime *util.RuntimeOptions) (_result *ListHostGroupsForUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostGroupsForUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostGroupsForUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostGroupsForUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the hosts that a specified user group is authorized or not authorized to manage.
//
// @param request - ListHostGroupsForUserGroupRequest
//
// @return ListHostGroupsForUserGroupResponse
func (client *Client) ListHostGroupsForUserGroup(request *ListHostGroupsForUserGroupRequest) (_result *ListHostGroupsForUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostGroupsForUserGroupResponse{}
	_body, _err := client.ListHostGroupsForUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the shared keys that are associated with a host.
//
// @param request - ListHostShareKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostShareKeysResponse
func (client *Client) ListHostShareKeysWithOptions(request *ListHostShareKeysRequest, runtime *util.RuntimeOptions) (_result *ListHostShareKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostShareKeys"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostShareKeysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostShareKeysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the shared keys that are associated with a host.
//
// @param request - ListHostShareKeysRequest
//
// @return ListHostShareKeysResponse
func (client *Client) ListHostShareKeys(request *ListHostShareKeysRequest) (_result *ListHostShareKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostShareKeysResponse{}
	_body, _err := client.ListHostShareKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the hosts in a bastion host.
//
// @param request - ListHostsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostsResponse
func (client *Client) ListHostsWithOptions(request *ListHostsRequest, runtime *util.RuntimeOptions) (_result *ListHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAddress)) {
		query["HostAddress"] = request.HostAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OSType)) {
		query["OSType"] = request.OSType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceId)) {
		query["SourceInstanceId"] = request.SourceInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceState)) {
		query["SourceInstanceState"] = request.SourceInstanceState
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHosts"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the hosts in a bastion host.
//
// @param request - ListHostsRequest
//
// @return ListHostsResponse
func (client *Client) ListHosts(request *ListHostsRequest) (_result *ListHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostsResponse{}
	_body, _err := client.ListHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the hosts that a user group is authorized or not authorized to manage.
//
// @param request - ListHostsForUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostsForUserResponse
func (client *Client) ListHostsForUserWithOptions(request *ListHostsForUserRequest, runtime *util.RuntimeOptions) (_result *ListHostsForUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAddress)) {
		query["HostAddress"] = request.HostAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.OSType)) {
		query["OSType"] = request.OSType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostsForUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostsForUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostsForUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the hosts that a user group is authorized or not authorized to manage.
//
// @param request - ListHostsForUserRequest
//
// @return ListHostsForUserResponse
func (client *Client) ListHostsForUser(request *ListHostsForUserRequest) (_result *ListHostsForUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostsForUserResponse{}
	_body, _err := client.ListHostsForUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the hosts that a user group is authorized or not authorized to manage.
//
// @param request - ListHostsForUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostsForUserGroupResponse
func (client *Client) ListHostsForUserGroupWithOptions(request *ListHostsForUserGroupRequest, runtime *util.RuntimeOptions) (_result *ListHostsForUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAddress)) {
		query["HostAddress"] = request.HostAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.OSType)) {
		query["OSType"] = request.OSType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostsForUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListHostsForUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListHostsForUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the hosts that a user group is authorized or not authorized to manage.
//
// @param request - ListHostsForUserGroupRequest
//
// @return ListHostsForUserGroupResponse
func (client *Client) ListHostsForUserGroup(request *ListHostsForUserGroupRequest) (_result *ListHostsForUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHostsForUserGroupResponse{}
	_body, _err := client.ListHostsForUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the network domains created in a bastion host.
//
// @param request - ListNetworkDomainsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNetworkDomainsResponse
func (client *Client) ListNetworkDomainsWithOptions(request *ListNetworkDomainsRequest, runtime *util.RuntimeOptions) (_result *ListNetworkDomainsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainName)) {
		query["NetworkDomainName"] = request.NetworkDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainType)) {
		query["NetworkDomainType"] = request.NetworkDomainType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNetworkDomains"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListNetworkDomainsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListNetworkDomainsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the network domains created in a bastion host.
//
// @param request - ListNetworkDomainsRequest
//
// @return ListNetworkDomainsResponse
func (client *Client) ListNetworkDomains(request *ListNetworkDomainsRequest) (_result *ListNetworkDomainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNetworkDomainsResponse{}
	_body, _err := client.ListNetworkDomainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of database accounts that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationDatabaseAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationDatabaseAccountsResponse
func (client *Client) ListOperationDatabaseAccountsWithOptions(request *ListOperationDatabaseAccountsRequest, runtime *util.RuntimeOptions) (_result *ListOperationDatabaseAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountName)) {
		query["DatabaseAccountName"] = request.DatabaseAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOperationDatabaseAccounts"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListOperationDatabaseAccountsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListOperationDatabaseAccountsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of database accounts that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationDatabaseAccountsRequest
//
// @return ListOperationDatabaseAccountsResponse
func (client *Client) ListOperationDatabaseAccounts(request *ListOperationDatabaseAccountsRequest) (_result *ListOperationDatabaseAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOperationDatabaseAccountsResponse{}
	_body, _err := client.ListOperationDatabaseAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of databases that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationDatabasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationDatabasesResponse
func (client *Client) ListOperationDatabasesWithOptions(request *ListOperationDatabasesRequest, runtime *util.RuntimeOptions) (_result *ListOperationDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAddress)) {
		query["DatabaseAddress"] = request.DatabaseAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceId)) {
		query["SourceInstanceId"] = request.SourceInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceState)) {
		query["SourceInstanceState"] = request.SourceInstanceState
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOperationDatabases"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListOperationDatabasesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListOperationDatabasesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of databases that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationDatabasesRequest
//
// @return ListOperationDatabasesResponse
func (client *Client) ListOperationDatabases(request *ListOperationDatabasesRequest) (_result *ListOperationDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOperationDatabasesResponse{}
	_body, _err := client.ListOperationDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of host accounts that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationHostAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationHostAccountsResponse
func (client *Client) ListOperationHostAccountsWithOptions(request *ListOperationHostAccountsRequest, runtime *util.RuntimeOptions) (_result *ListOperationHostAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountName)) {
		query["HostAccountName"] = request.HostAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOperationHostAccounts"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListOperationHostAccountsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListOperationHostAccountsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of host accounts that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationHostAccountsRequest
//
// @return ListOperationHostAccountsResponse
func (client *Client) ListOperationHostAccounts(request *ListOperationHostAccountsRequest) (_result *ListOperationHostAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOperationHostAccountsResponse{}
	_body, _err := client.ListOperationHostAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of hosts that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationHostsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationHostsResponse
func (client *Client) ListOperationHostsWithOptions(request *ListOperationHostsRequest, runtime *util.RuntimeOptions) (_result *ListOperationHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAddress)) {
		query["HostAddress"] = request.HostAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OSType)) {
		query["OSType"] = request.OSType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceId)) {
		query["SourceInstanceId"] = request.SourceInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceState)) {
		query["SourceInstanceState"] = request.SourceInstanceState
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOperationHosts"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListOperationHostsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListOperationHostsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of hosts that the current Resource Access Management (RAM) user is authorized to manage.
//
// @param request - ListOperationHostsRequest
//
// @return ListOperationHostsResponse
func (client *Client) ListOperationHosts(request *ListOperationHostsRequest) (_result *ListOperationHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOperationHostsResponse{}
	_body, _err := client.ListOperationHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries O\\\\\\\\\\\\&M applications to be reviewed.
//
// Description:
//
// You can call this operation to query the O\\&M applications to be reviewed by a Bastionhost administrator.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ListOperationTicketsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationTicketsResponse
func (client *Client) ListOperationTicketsWithOptions(request *ListOperationTicketsRequest, runtime *util.RuntimeOptions) (_result *ListOperationTicketsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetAddress)) {
		query["AssetAddress"] = request.AssetAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOperationTickets"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListOperationTicketsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListOperationTicketsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries O\\\\\\\\\\\\&M applications to be reviewed.
//
// Description:
//
// You can call this operation to query the O\\&M applications to be reviewed by a Bastionhost administrator.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ListOperationTicketsRequest
//
// @return ListOperationTicketsResponse
func (client *Client) ListOperationTickets(request *ListOperationTicketsRequest) (_result *ListOperationTicketsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOperationTicketsResponse{}
	_body, _err := client.ListOperationTicketsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of control policies.
//
// @param request - ListPoliciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPoliciesResponse
func (client *Client) ListPoliciesWithOptions(request *ListPoliciesRequest, runtime *util.RuntimeOptions) (_result *ListPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPolicies"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListPoliciesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListPoliciesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of control policies.
//
// @param request - ListPoliciesRequest
//
// @return ListPoliciesResponse
func (client *Client) ListPolicies(request *ListPoliciesRequest) (_result *ListPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPoliciesResponse{}
	_body, _err := client.ListPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of authorization rules of a bastion host.
//
// @param request - ListRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRulesResponse
func (client *Client) ListRulesWithOptions(request *ListRulesRequest, runtime *util.RuntimeOptions) (_result *ListRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleState)) {
		query["RuleState"] = request.RuleState
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRules"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListRulesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListRulesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of authorization rules of a bastion host.
//
// @param request - ListRulesRequest
//
// @return ListRulesResponse
func (client *Client) ListRules(request *ListRulesRequest) (_result *ListRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRulesResponse{}
	_body, _err := client.ListRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the tags that are added to a resource.
//
// @param request - ListTagKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagKeysResponse
func (client *Client) ListTagKeysWithOptions(request *ListTagKeysRequest, runtime *util.RuntimeOptions) (_result *ListTagKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagKeys"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListTagKeysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListTagKeysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the tags that are added to a resource.
//
// @param request - ListTagKeysRequest
//
// @return ListTagKeysResponse
func (client *Client) ListTagKeys(request *ListTagKeysRequest) (_result *ListTagKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagKeysResponse{}
	_body, _err := client.ListTagKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the tags bound to one or more Bastionhost instances.
//
// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListTagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListTagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the tags bound to one or more Bastionhost instances.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of user groups on a bastion host.
//
// @param request - ListUserGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserGroupsResponse
func (client *Client) ListUserGroupsWithOptions(request *ListUserGroupsRequest, runtime *util.RuntimeOptions) (_result *ListUserGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupName)) {
		query["UserGroupName"] = request.UserGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserGroups"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListUserGroupsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListUserGroupsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of user groups on a bastion host.
//
// @param request - ListUserGroupsRequest
//
// @return ListUserGroupsResponse
func (client *Client) ListUserGroups(request *ListUserGroupsRequest) (_result *ListUserGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUserGroupsResponse{}
	_body, _err := client.ListUserGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all public keys of the specified user.
//
// @param request - ListUserPublicKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserPublicKeysResponse
func (client *Client) ListUserPublicKeysWithOptions(request *ListUserPublicKeysRequest, runtime *util.RuntimeOptions) (_result *ListUserPublicKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserPublicKeys"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListUserPublicKeysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListUserPublicKeysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries all public keys of the specified user.
//
// @param request - ListUserPublicKeysRequest
//
// @return ListUserPublicKeysResponse
func (client *Client) ListUserPublicKeys(request *ListUserPublicKeysRequest) (_result *ListUserPublicKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUserPublicKeysResponse{}
	_body, _err := client.ListUserPublicKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of users of a bastion host.
//
// @param request - ListUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUsersResponse
func (client *Client) ListUsersWithOptions(request *ListUsersRequest, runtime *util.RuntimeOptions) (_result *ListUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Mobile)) {
		query["Mobile"] = request.Mobile
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceUserId)) {
		query["SourceUserId"] = request.SourceUserId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.UserState)) {
		query["UserState"] = request.UserState
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUsers"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListUsersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListUsersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of users of a bastion host.
//
// @param request - ListUsersRequest
//
// @return ListUsersResponse
func (client *Client) ListUsers(request *ListUsersRequest) (_result *ListUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUsersResponse{}
	_body, _err := client.ListUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Locks one or more users of a bastion host.
//
// Description:
//
// # Description
//
// You can call this operation to lock one or more users of a bastion host. If a user does not need to use a bastion host to perform O\\&M operations within a specific period of time, you can lock the user. The locked user can no longer log on to or perform O\\&M operations on the hosts on which the user is granted permissions. If you want to unlock the user later, you can call the [UnlockUsers](https://help.aliyun.com/document_detail/204590.html) operation.
//
// # Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - LockUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LockUsersResponse
func (client *Client) LockUsersWithOptions(request *LockUsersRequest, runtime *util.RuntimeOptions) (_result *LockUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["UserIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LockUsers"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &LockUsersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &LockUsersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Locks one or more users of a bastion host.
//
// Description:
//
// # Description
//
// You can call this operation to lock one or more users of a bastion host. If a user does not need to use a bastion host to perform O\\&M operations within a specific period of time, you can lock the user. The locked user can no longer log on to or perform O\\&M operations on the hosts on which the user is granted permissions. If you want to unlock the user later, you can call the [UnlockUsers](https://help.aliyun.com/document_detail/204590.html) operation.
//
// # Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - LockUsersRequest
//
// @return LockUsersResponse
func (client *Client) LockUsers(request *LockUsersRequest) (_result *LockUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LockUsersResponse{}
	_body, _err := client.LockUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the basic information about a database.
//
// @param request - ModifyDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDatabaseResponse
func (client *Client) ModifyDatabaseWithOptions(request *ModifyDatabaseRequest, runtime *util.RuntimeOptions) (_result *ModifyDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActiveAddressType)) {
		query["ActiveAddressType"] = request.ActiveAddressType
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseId)) {
		query["DatabaseId"] = request.DatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabasePort)) {
		query["DatabasePort"] = request.DatabasePort
	}

	if !tea.BoolValue(util.IsUnset(request.DatabasePrivateAddress)) {
		query["DatabasePrivateAddress"] = request.DatabasePrivateAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DatabasePublicAddress)) {
		query["DatabasePublicAddress"] = request.DatabasePublicAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceInstanceId)) {
		query["SourceInstanceId"] = request.SourceInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDatabase"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDatabaseResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDatabaseResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the basic information about a database.
//
// @param request - ModifyDatabaseRequest
//
// @return ModifyDatabaseResponse
func (client *Client) ModifyDatabase(request *ModifyDatabaseRequest) (_result *ModifyDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatabaseResponse{}
	_body, _err := client.ModifyDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the basic information about a database account.
//
// @param request - ModifyDatabaseAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDatabaseAccountResponse
func (client *Client) ModifyDatabaseAccountWithOptions(request *ModifyDatabaseAccountRequest, runtime *util.RuntimeOptions) (_result *ModifyDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountId)) {
		query["DatabaseAccountId"] = request.DatabaseAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseAccountName)) {
		query["DatabaseAccountName"] = request.DatabaseAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseSchema)) {
		query["DatabaseSchema"] = request.DatabaseSchema
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDatabaseAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDatabaseAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDatabaseAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the basic information about a database account.
//
// @param request - ModifyDatabaseAccountRequest
//
// @return ModifyDatabaseAccountResponse
func (client *Client) ModifyDatabaseAccount(request *ModifyDatabaseAccountRequest) (_result *ModifyDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatabaseAccountResponse{}
	_body, _err := client.ModifyDatabaseAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies information about a host. The information includes the address, name, and description of the host and the operating system that the host runs.
//
// Description:
//
// You can call the ModifyHost operation to modify the basic information about a host in a data center, an Elastic Compute Service (ECS) instance, or a host in an ApsaraDB MyBase dedicated cluster.
//
// > The basic information about ECS instances and hosts in ApsaraDB MyBase dedicated clusters within your Alibaba Cloud account is synchronized to Bastionhost on a regular basis. After you modify the basic information about an ECS instance or a host in an ApsaraDB MyBase dedicated cluster, the modification result may be overwritten by the synchronized information.
//
// @param request - ModifyHostRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostResponse
func (client *Client) ModifyHostWithOptions(request *ModifyHostRequest, runtime *util.RuntimeOptions) (_result *ModifyHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.HostPrivateAddress)) {
		query["HostPrivateAddress"] = request.HostPrivateAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HostPublicAddress)) {
		query["HostPublicAddress"] = request.HostPublicAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.OSType)) {
		query["OSType"] = request.OSType
	}

	if !tea.BoolValue(util.IsUnset(request.PrefKex)) {
		query["PrefKex"] = request.PrefKex
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHost"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHostResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHostResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies information about a host. The information includes the address, name, and description of the host and the operating system that the host runs.
//
// Description:
//
// You can call the ModifyHost operation to modify the basic information about a host in a data center, an Elastic Compute Service (ECS) instance, or a host in an ApsaraDB MyBase dedicated cluster.
//
// > The basic information about ECS instances and hosts in ApsaraDB MyBase dedicated clusters within your Alibaba Cloud account is synchronized to Bastionhost on a regular basis. After you modify the basic information about an ECS instance or a host in an ApsaraDB MyBase dedicated cluster, the modification result may be overwritten by the synchronized information.
//
// @param request - ModifyHostRequest
//
// @return ModifyHostResponse
func (client *Client) ModifyHost(request *ModifyHostRequest) (_result *ModifyHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostResponse{}
	_body, _err := client.ModifyHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about a host account, such as the username, password, and private key of the host account.
//
// @param request - ModifyHostAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostAccountResponse
func (client *Client) ModifyHostAccountWithOptions(request *ModifyHostAccountRequest, runtime *util.RuntimeOptions) (_result *ModifyHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAccountId)) {
		query["HostAccountId"] = request.HostAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.HostAccountName)) {
		query["HostAccountName"] = request.HostAccountName
	}

	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PassPhrase)) {
		query["PassPhrase"] = request.PassPhrase
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateKey)) {
		query["PrivateKey"] = request.PrivateKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHostAccount"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHostAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHostAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information about a host account, such as the username, password, and private key of the host account.
//
// @param request - ModifyHostAccountRequest
//
// @return ModifyHostAccountResponse
func (client *Client) ModifyHostAccount(request *ModifyHostAccountRequest) (_result *ModifyHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostAccountResponse{}
	_body, _err := client.ModifyHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the name or description of the specified host group.
//
// @param request - ModifyHostGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostGroupResponse
func (client *Client) ModifyHostGroupWithOptions(request *ModifyHostGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHostGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHostGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHostGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the name or description of the specified host group.
//
// @param request - ModifyHostGroupRequest
//
// @return ModifyHostGroupResponse
func (client *Client) ModifyHostGroup(request *ModifyHostGroupRequest) (_result *ModifyHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostGroupResponse{}
	_body, _err := client.ModifyHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a shared key.
//
// @param request - ModifyHostShareKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostShareKeyResponse
func (client *Client) ModifyHostShareKeyWithOptions(request *ModifyHostShareKeyRequest, runtime *util.RuntimeOptions) (_result *ModifyHostShareKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostShareKeyId)) {
		query["HostShareKeyId"] = request.HostShareKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.HostShareKeyName)) {
		query["HostShareKeyName"] = request.HostShareKeyName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PassPhrase)) {
		query["PassPhrase"] = request.PassPhrase
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateKey)) {
		query["PrivateKey"] = request.PrivateKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHostShareKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHostShareKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHostShareKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a shared key.
//
// @param request - ModifyHostShareKeyRequest
//
// @return ModifyHostShareKeyResponse
func (client *Client) ModifyHostShareKey(request *ModifyHostShareKeyRequest) (_result *ModifyHostShareKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostShareKeyResponse{}
	_body, _err := client.ModifyHostShareKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the portal type of one or more hosts for O\\&M.
//
// @param request - ModifyHostsActiveAddressTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostsActiveAddressTypeResponse
func (client *Client) ModifyHostsActiveAddressTypeWithOptions(request *ModifyHostsActiveAddressTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyHostsActiveAddressTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActiveAddressType)) {
		query["ActiveAddressType"] = request.ActiveAddressType
	}

	if !tea.BoolValue(util.IsUnset(request.HostIds)) {
		query["HostIds"] = request.HostIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHostsActiveAddressType"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHostsActiveAddressTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHostsActiveAddressTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the portal type of one or more hosts for O\\&M.
//
// @param request - ModifyHostsActiveAddressTypeRequest
//
// @return ModifyHostsActiveAddressTypeResponse
func (client *Client) ModifyHostsActiveAddressType(request *ModifyHostsActiveAddressTypeRequest) (_result *ModifyHostsActiveAddressTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostsActiveAddressTypeResponse{}
	_body, _err := client.ModifyHostsActiveAddressTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the port for the O\\\\\\\\\\\\&M protocol on one or more hosts.
//
// Description:
//
// ## Usage notes
//
// You can call this operation to change the port for the O&M protocol on one or more hosts. If the standard port for the O&M protocol on your host is vulnerable to attacks, you can call this operation to specify a custom port. For example, the standard port for SSH is port 22.
//
// >  Ports 0 to 1024 are reserved for Bastionhost. Do not change the port for the O&M protocol to a reserved port.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyHostsPortRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostsPortResponse
func (client *Client) ModifyHostsPortWithOptions(request *ModifyHostsPortRequest, runtime *util.RuntimeOptions) (_result *ModifyHostsPortResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostIds)) {
		query["HostIds"] = request.HostIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolName)) {
		query["ProtocolName"] = request.ProtocolName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHostsPort"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHostsPortResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHostsPortResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the port for the O\\\\\\\\\\\\&M protocol on one or more hosts.
//
// Description:
//
// ## Usage notes
//
// You can call this operation to change the port for the O&M protocol on one or more hosts. If the standard port for the O&M protocol on your host is vulnerable to attacks, you can call this operation to specify a custom port. For example, the standard port for SSH is port 22.
//
// >  Ports 0 to 1024 are reserved for Bastionhost. Do not change the port for the O&M protocol to a reserved port.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyHostsPortRequest
//
// @return ModifyHostsPortResponse
func (client *Client) ModifyHostsPort(request *ModifyHostsPortRequest) (_result *ModifyHostsPortResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostsPortResponse{}
	_body, _err := client.ModifyHostsPortWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the settings of the Active Directory (AD) authentication server of a bastion host.
//
// @param request - ModifyInstanceADAuthServerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceADAuthServerResponse
func (client *Client) ModifyInstanceADAuthServerWithOptions(request *ModifyInstanceADAuthServerRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceADAuthServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		query["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.BaseDN)) {
		query["BaseDN"] = request.BaseDN
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EmailMapping)) {
		query["EmailMapping"] = request.EmailMapping
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsSSL)) {
		query["IsSSL"] = request.IsSSL
	}

	if !tea.BoolValue(util.IsUnset(request.MobileMapping)) {
		query["MobileMapping"] = request.MobileMapping
	}

	if !tea.BoolValue(util.IsUnset(request.NameMapping)) {
		query["NameMapping"] = request.NameMapping
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Server)) {
		query["Server"] = request.Server
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyServer)) {
		query["StandbyServer"] = request.StandbyServer
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceADAuthServer"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceADAuthServerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceADAuthServerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the settings of the Active Directory (AD) authentication server of a bastion host.
//
// @param request - ModifyInstanceADAuthServerRequest
//
// @return ModifyInstanceADAuthServerResponse
func (client *Client) ModifyInstanceADAuthServer(request *ModifyInstanceADAuthServerRequest) (_result *ModifyInstanceADAuthServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceADAuthServerResponse{}
	_body, _err := client.ModifyInstanceADAuthServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about a bastion host.
//
// @param request - ModifyInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceAttributeResponse
func (client *Client) ModifyInstanceAttributeWithOptions(request *ModifyInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAttribute"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information about a bastion host.
//
// @param request - ModifyInstanceAttributeRequest
//
// @return ModifyInstanceAttributeResponse
func (client *Client) ModifyInstanceAttribute(request *ModifyInstanceAttributeRequest) (_result *ModifyInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.ModifyInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the settings of the Lightweight Directory Access Protocol (LDAP) authentication server of a bastion host.
//
// @param request - ModifyInstanceLDAPAuthServerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceLDAPAuthServerResponse
func (client *Client) ModifyInstanceLDAPAuthServerWithOptions(request *ModifyInstanceLDAPAuthServerRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceLDAPAuthServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		query["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.BaseDN)) {
		query["BaseDN"] = request.BaseDN
	}

	if !tea.BoolValue(util.IsUnset(request.EmailMapping)) {
		query["EmailMapping"] = request.EmailMapping
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsSSL)) {
		query["IsSSL"] = request.IsSSL
	}

	if !tea.BoolValue(util.IsUnset(request.LoginNameMapping)) {
		query["LoginNameMapping"] = request.LoginNameMapping
	}

	if !tea.BoolValue(util.IsUnset(request.MobileMapping)) {
		query["MobileMapping"] = request.MobileMapping
	}

	if !tea.BoolValue(util.IsUnset(request.NameMapping)) {
		query["NameMapping"] = request.NameMapping
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Server)) {
		query["Server"] = request.Server
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyServer)) {
		query["StandbyServer"] = request.StandbyServer
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceLDAPAuthServer"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceLDAPAuthServerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceLDAPAuthServerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the settings of the Lightweight Directory Access Protocol (LDAP) authentication server of a bastion host.
//
// @param request - ModifyInstanceLDAPAuthServerRequest
//
// @return ModifyInstanceLDAPAuthServerResponse
func (client *Client) ModifyInstanceLDAPAuthServer(request *ModifyInstanceLDAPAuthServerRequest) (_result *ModifyInstanceLDAPAuthServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceLDAPAuthServerResponse{}
	_body, _err := client.ModifyInstanceLDAPAuthServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the two-factor authentication settings of a bastion host.
//
// @param request - ModifyInstanceTwoFactorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceTwoFactorResponse
func (client *Client) ModifyInstanceTwoFactorWithOptions(request *ModifyInstanceTwoFactorRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceTwoFactorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableTwoFactor)) {
		query["EnableTwoFactor"] = request.EnableTwoFactor
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SkipTwoFactorTime)) {
		query["SkipTwoFactorTime"] = request.SkipTwoFactorTime
	}

	if !tea.BoolValue(util.IsUnset(request.TwoFactorMethods)) {
		query["TwoFactorMethods"] = request.TwoFactorMethods
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceTwoFactor"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceTwoFactorResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceTwoFactorResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the two-factor authentication settings of a bastion host.
//
// @param request - ModifyInstanceTwoFactorRequest
//
// @return ModifyInstanceTwoFactorResponse
func (client *Client) ModifyInstanceTwoFactor(request *ModifyInstanceTwoFactorRequest) (_result *ModifyInstanceTwoFactorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceTwoFactorResponse{}
	_body, _err := client.ModifyInstanceTwoFactorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the basic information about a network domain.
//
// @param request - ModifyNetworkDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyNetworkDomainResponse
func (client *Client) ModifyNetworkDomainWithOptions(request *ModifyNetworkDomainRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainName)) {
		query["NetworkDomainName"] = request.NetworkDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainType)) {
		query["NetworkDomainType"] = request.NetworkDomainType
	}

	if !tea.BoolValue(util.IsUnset(request.Proxies)) {
		query["Proxies"] = request.Proxies
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNetworkDomain"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyNetworkDomainResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyNetworkDomainResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the basic information about a network domain.
//
// @param request - ModifyNetworkDomainRequest
//
// @return ModifyNetworkDomainResponse
func (client *Client) ModifyNetworkDomain(request *ModifyNetworkDomainRequest) (_result *ModifyNetworkDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkDomainResponse{}
	_body, _err := client.ModifyNetworkDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the basic information about a control policy.
//
// @param request - ModifyPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPolicyResponse
func (client *Client) ModifyPolicyWithOptions(request *ModifyPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPolicy"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyPolicyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyPolicyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the basic information about a control policy.
//
// @param request - ModifyPolicyRequest
//
// @return ModifyPolicyResponse
func (client *Client) ModifyPolicy(request *ModifyPolicyRequest) (_result *ModifyPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPolicyResponse{}
	_body, _err := client.ModifyPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the basic information of an authorization rule.
//
// @param request - ModifyRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyRuleResponse
func (client *Client) ModifyRuleWithOptions(request *ModifyRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.Databases)) {
		query["Databases"] = request.Databases
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveEndTime)) {
		query["EffectiveEndTime"] = request.EffectiveEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveStartTime)) {
		query["EffectiveStartTime"] = request.EffectiveStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroups)) {
		query["HostGroups"] = request.HostGroups
	}

	if !tea.BoolValue(util.IsUnset(request.Hosts)) {
		query["Hosts"] = request.Hosts
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupIds)) {
		query["UserGroupIds"] = request.UserGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["UserIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRule"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyRuleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyRuleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the basic information of an authorization rule.
//
// @param request - ModifyRuleRequest
//
// @return ModifyRuleResponse
func (client *Client) ModifyRule(request *ModifyRuleRequest) (_result *ModifyRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRuleResponse{}
	_body, _err := client.ModifyRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about a user of a bastion host.
//
// @param request - ModifyUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUserResponse
func (client *Client) ModifyUserWithOptions(request *ModifyUserRequest, runtime *util.RuntimeOptions) (_result *ModifyUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveEndTime)) {
		query["EffectiveEndTime"] = request.EffectiveEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveStartTime)) {
		query["EffectiveStartTime"] = request.EffectiveStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.LanguageStatus)) {
		query["LanguageStatus"] = request.LanguageStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Mobile)) {
		query["Mobile"] = request.Mobile
	}

	if !tea.BoolValue(util.IsUnset(request.MobileCountryCode)) {
		query["MobileCountryCode"] = request.MobileCountryCode
	}

	if !tea.BoolValue(util.IsUnset(request.NeedResetPassword)) {
		query["NeedResetPassword"] = request.NeedResetPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TwoFactorMethods)) {
		query["TwoFactorMethods"] = request.TwoFactorMethods
	}

	if !tea.BoolValue(util.IsUnset(request.TwoFactorStatus)) {
		query["TwoFactorStatus"] = request.TwoFactorStatus
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUser"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information about a user of a bastion host.
//
// @param request - ModifyUserRequest
//
// @return ModifyUserResponse
func (client *Client) ModifyUser(request *ModifyUserRequest) (_result *ModifyUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserResponse{}
	_body, _err := client.ModifyUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about the specified user group.
//
// @param request - ModifyUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUserGroupResponse
func (client *Client) ModifyUserGroupWithOptions(request *ModifyUserGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupName)) {
		query["UserGroupName"] = request.UserGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUserGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyUserGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyUserGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information about the specified user group.
//
// @param request - ModifyUserGroupRequest
//
// @return ModifyUserGroupResponse
func (client *Client) ModifyUserGroup(request *ModifyUserGroupRequest) (_result *ModifyUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserGroupResponse{}
	_body, _err := client.ModifyUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the public key of the user.
//
// @param request - ModifyUserPublicKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUserPublicKeyResponse
func (client *Client) ModifyUserPublicKeyWithOptions(request *ModifyUserPublicKeyRequest, runtime *util.RuntimeOptions) (_result *ModifyUserPublicKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKey)) {
		query["PublicKey"] = request.PublicKey
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKeyId)) {
		query["PublicKeyId"] = request.PublicKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKeyName)) {
		query["PublicKeyName"] = request.PublicKeyName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUserPublicKey"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyUserPublicKeyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyUserPublicKeyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the public key of the user.
//
// @param request - ModifyUserPublicKeyRequest
//
// @return ModifyUserPublicKeyResponse
func (client *Client) ModifyUserPublicKey(request *ModifyUserPublicKeyRequest) (_result *ModifyUserPublicKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserPublicKeyResponse{}
	_body, _err := client.ModifyUserPublicKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds multiple databases to a network domain at a time.
//
// @param request - MoveDatabasesToNetworkDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveDatabasesToNetworkDomainResponse
func (client *Client) MoveDatabasesToNetworkDomainWithOptions(request *MoveDatabasesToNetworkDomainRequest, runtime *util.RuntimeOptions) (_result *MoveDatabasesToNetworkDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseIds)) {
		query["DatabaseIds"] = request.DatabaseIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveDatabasesToNetworkDomain"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &MoveDatabasesToNetworkDomainResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &MoveDatabasesToNetworkDomainResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds multiple databases to a network domain at a time.
//
// @param request - MoveDatabasesToNetworkDomainRequest
//
// @return MoveDatabasesToNetworkDomainResponse
func (client *Client) MoveDatabasesToNetworkDomain(request *MoveDatabasesToNetworkDomainRequest) (_result *MoveDatabasesToNetworkDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveDatabasesToNetworkDomainResponse{}
	_body, _err := client.MoveDatabasesToNetworkDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds multiple hosts to a network domain at a time.
//
// @param request - MoveHostsToNetworkDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveHostsToNetworkDomainResponse
func (client *Client) MoveHostsToNetworkDomainWithOptions(request *MoveHostsToNetworkDomainRequest, runtime *util.RuntimeOptions) (_result *MoveHostsToNetworkDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostIds)) {
		query["HostIds"] = request.HostIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkDomainId)) {
		query["NetworkDomainId"] = request.NetworkDomainId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveHostsToNetworkDomain"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &MoveHostsToNetworkDomainResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &MoveHostsToNetworkDomainResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds multiple hosts to a network domain at a time.
//
// @param request - MoveHostsToNetworkDomainRequest
//
// @return MoveHostsToNetworkDomainResponse
func (client *Client) MoveHostsToNetworkDomain(request *MoveHostsToNetworkDomainRequest) (_result *MoveHostsToNetworkDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveHostsToNetworkDomainResponse{}
	_body, _err := client.MoveHostsToNetworkDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Moves a bastion host from one resource group to another resource group.
//
// @param request - MoveResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveResourceGroupResponse
func (client *Client) MoveResourceGroupWithOptions(request *MoveResourceGroupRequest, runtime *util.RuntimeOptions) (_result *MoveResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveResourceGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &MoveResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &MoveResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Moves a bastion host from one resource group to another resource group.
//
// @param request - MoveResourceGroupRequest
//
// @return MoveResourceGroupResponse
func (client *Client) MoveResourceGroup(request *MoveResourceGroupRequest) (_result *MoveResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveResourceGroupResponse{}
	_body, _err := client.MoveResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// If an O\\&M engineer attempts to run a command specified in the Command Approval section of the Create Control Policy page, the administrator is notified to review the command in the Bastionhost console. The command can be run only after it is approved by the administrator.
//
// Description:
//
// You can call this operation as a Bastionhost administrator to reject the request to run a command of an O\\&M engineer.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - RejectApproveCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RejectApproveCommandResponse
func (client *Client) RejectApproveCommandWithOptions(request *RejectApproveCommandRequest, runtime *util.RuntimeOptions) (_result *RejectApproveCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandId)) {
		query["CommandId"] = request.CommandId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RejectApproveCommand"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RejectApproveCommandResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RejectApproveCommandResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// If an O\\&M engineer attempts to run a command specified in the Command Approval section of the Create Control Policy page, the administrator is notified to review the command in the Bastionhost console. The command can be run only after it is approved by the administrator.
//
// Description:
//
// You can call this operation as a Bastionhost administrator to reject the request to run a command of an O\\&M engineer.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - RejectApproveCommandRequest
//
// @return RejectApproveCommandResponse
func (client *Client) RejectApproveCommand(request *RejectApproveCommandRequest) (_result *RejectApproveCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RejectApproveCommandResponse{}
	_body, _err := client.RejectApproveCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// If a Bastionhost administrator enables O\\\\\\&M Approval on the Create Control Policy page, O\\\\\\&M engineers can log on to assets to perform O\\\\\\&M operations only after the administrator approves their O\\\\\\&M applications.
//
// Description:
//
// You can call this operation to reject an O\\&M application of an O\\&M engineer as a Bastionhost administrator.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - RejectOperationTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RejectOperationTicketResponse
func (client *Client) RejectOperationTicketWithOptions(request *RejectOperationTicketRequest, runtime *util.RuntimeOptions) (_result *RejectOperationTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationTicketId)) {
		query["OperationTicketId"] = request.OperationTicketId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RejectOperationTicket"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RejectOperationTicketResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RejectOperationTicketResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// If a Bastionhost administrator enables O\\\\\\&M Approval on the Create Control Policy page, O\\\\\\&M engineers can log on to assets to perform O\\\\\\&M operations only after the administrator approves their O\\\\\\&M applications.
//
// Description:
//
// You can call this operation to reject an O\\&M application of an O\\&M engineer as a Bastionhost administrator.
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - RejectOperationTicketRequest
//
// @return RejectOperationTicketResponse
func (client *Client) RejectOperationTicket(request *RejectOperationTicketRequest) (_result *RejectOperationTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RejectOperationTicketResponse{}
	_body, _err := client.RejectOperationTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes multiple databases from an asset group at a time.
//
// @param request - RemoveDatabasesFromGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveDatabasesFromGroupResponse
func (client *Client) RemoveDatabasesFromGroupWithOptions(request *RemoveDatabasesFromGroupRequest, runtime *util.RuntimeOptions) (_result *RemoveDatabasesFromGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseIds)) {
		query["DatabaseIds"] = request.DatabaseIds
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveDatabasesFromGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemoveDatabasesFromGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemoveDatabasesFromGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes multiple databases from an asset group at a time.
//
// @param request - RemoveDatabasesFromGroupRequest
//
// @return RemoveDatabasesFromGroupResponse
func (client *Client) RemoveDatabasesFromGroup(request *RemoveDatabasesFromGroupRequest) (_result *RemoveDatabasesFromGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveDatabasesFromGroupResponse{}
	_body, _err := client.RemoveDatabasesFromGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes multiple hosts from an asset group at a time.
//
// Description:
//
// You can call the RemoveHostsFromGroup operation to remove multiple hosts from an asset group at a time. If you no longer need to manage some hosts in an asset group, you can call this operation to remove the hosts from the asset group.
//
// # [](#qps-)QPS limit
//
// You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RemoveHostsFromGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveHostsFromGroupResponse
func (client *Client) RemoveHostsFromGroupWithOptions(request *RemoveHostsFromGroupRequest, runtime *util.RuntimeOptions) (_result *RemoveHostsFromGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostIds)) {
		query["HostIds"] = request.HostIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveHostsFromGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemoveHostsFromGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemoveHostsFromGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes multiple hosts from an asset group at a time.
//
// Description:
//
// You can call the RemoveHostsFromGroup operation to remove multiple hosts from an asset group at a time. If you no longer need to manage some hosts in an asset group, you can call this operation to remove the hosts from the asset group.
//
// # [](#qps-)QPS limit
//
// You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RemoveHostsFromGroupRequest
//
// @return RemoveHostsFromGroupResponse
func (client *Client) RemoveHostsFromGroup(request *RemoveHostsFromGroupRequest) (_result *RemoveHostsFromGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveHostsFromGroupResponse{}
	_body, _err := client.RemoveHostsFromGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes one or more users from a user group.
//
// Description:
//
// You can call this operation to remove one or more users from a user group. When users in a user group are transferred to a new position, resign, or are switched to another user group, you can call this operation to remove the users from the current user group at a time.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - RemoveUsersFromGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveUsersFromGroupResponse
func (client *Client) RemoveUsersFromGroupWithOptions(request *RemoveUsersFromGroupRequest, runtime *util.RuntimeOptions) (_result *RemoveUsersFromGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["UserIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveUsersFromGroup"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemoveUsersFromGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemoveUsersFromGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes one or more users from a user group.
//
// Description:
//
// You can call this operation to remove one or more users from a user group. When users in a user group are transferred to a new position, resign, or are switched to another user group, you can call this operation to remove the users from the current user group at a time.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - RemoveUsersFromGroupRequest
//
// @return RemoveUsersFromGroupResponse
func (client *Client) RemoveUsersFromGroup(request *RemoveUsersFromGroupRequest) (_result *RemoveUsersFromGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveUsersFromGroupResponse{}
	_body, _err := client.RemoveUsersFromGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renews an O\\&M token for one hour.
//
// @param request - RenewAssetOperationTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewAssetOperationTokenResponse
func (client *Client) RenewAssetOperationTokenWithOptions(request *RenewAssetOperationTokenRequest, runtime *util.RuntimeOptions) (_result *RenewAssetOperationTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TokenId)) {
		query["TokenId"] = request.TokenId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewAssetOperationToken"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RenewAssetOperationTokenResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RenewAssetOperationTokenResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Renews an O\\&M token for one hour.
//
// @param request - RenewAssetOperationTokenRequest
//
// @return RenewAssetOperationTokenResponse
func (client *Client) RenewAssetOperationToken(request *RenewAssetOperationTokenRequest) (_result *RenewAssetOperationTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewAssetOperationTokenResponse{}
	_body, _err := client.RenewAssetOperationTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the logon credential of a specified host account. The logon credential can be the password or Secure Shell (SSH) private key.
//
// @param request - ResetHostAccountCredentialRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetHostAccountCredentialResponse
func (client *Client) ResetHostAccountCredentialWithOptions(request *ResetHostAccountCredentialRequest, runtime *util.RuntimeOptions) (_result *ResetHostAccountCredentialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CredentialType)) {
		query["CredentialType"] = request.CredentialType
	}

	if !tea.BoolValue(util.IsUnset(request.HostAccountId)) {
		query["HostAccountId"] = request.HostAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetHostAccountCredential"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResetHostAccountCredentialResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResetHostAccountCredentialResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the logon credential of a specified host account. The logon credential can be the password or Secure Shell (SSH) private key.
//
// @param request - ResetHostAccountCredentialRequest
//
// @return ResetHostAccountCredentialResponse
func (client *Client) ResetHostAccountCredential(request *ResetHostAccountCredentialRequest) (_result *ResetHostAccountCredentialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetHostAccountCredentialResponse{}
	_body, _err := client.ResetHostAccountCredentialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the logon period limits in a control policy.
//
// @param tmpReq - SetPolicyAccessTimeRangeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPolicyAccessTimeRangeConfigResponse
func (client *Client) SetPolicyAccessTimeRangeConfigWithOptions(tmpReq *SetPolicyAccessTimeRangeConfigRequest, runtime *util.RuntimeOptions) (_result *SetPolicyAccessTimeRangeConfigResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetPolicyAccessTimeRangeConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AccessTimeRangeConfig)) {
		request.AccessTimeRangeConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AccessTimeRangeConfig, tea.String("AccessTimeRangeConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessTimeRangeConfigShrink)) {
		query["AccessTimeRangeConfig"] = request.AccessTimeRangeConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPolicyAccessTimeRangeConfig"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetPolicyAccessTimeRangeConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetPolicyAccessTimeRangeConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures the logon period limits in a control policy.
//
// @param request - SetPolicyAccessTimeRangeConfigRequest
//
// @return SetPolicyAccessTimeRangeConfigResponse
func (client *Client) SetPolicyAccessTimeRangeConfig(request *SetPolicyAccessTimeRangeConfigRequest) (_result *SetPolicyAccessTimeRangeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPolicyAccessTimeRangeConfigResponse{}
	_body, _err := client.SetPolicyAccessTimeRangeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the O&M approval setting in a control policy.
//
// @param tmpReq - SetPolicyApprovalConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPolicyApprovalConfigResponse
func (client *Client) SetPolicyApprovalConfigWithOptions(tmpReq *SetPolicyApprovalConfigRequest, runtime *util.RuntimeOptions) (_result *SetPolicyApprovalConfigResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetPolicyApprovalConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ApprovalConfig)) {
		request.ApprovalConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ApprovalConfig, tea.String("ApprovalConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApprovalConfigShrink)) {
		query["ApprovalConfig"] = request.ApprovalConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPolicyApprovalConfig"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetPolicyApprovalConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetPolicyApprovalConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures the O&M approval setting in a control policy.
//
// @param request - SetPolicyApprovalConfigRequest
//
// @return SetPolicyApprovalConfigResponse
func (client *Client) SetPolicyApprovalConfig(request *SetPolicyApprovalConfigRequest) (_result *SetPolicyApprovalConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPolicyApprovalConfigResponse{}
	_body, _err := client.SetPolicyApprovalConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Specifies the assets to which a control policy applies.
//
// @param request - SetPolicyAssetScopeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPolicyAssetScopeResponse
func (client *Client) SetPolicyAssetScopeWithOptions(request *SetPolicyAssetScopeRequest, runtime *util.RuntimeOptions) (_result *SetPolicyAssetScopeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Databases)) {
		query["Databases"] = request.Databases
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroups)) {
		query["HostGroups"] = request.HostGroups
	}

	if !tea.BoolValue(util.IsUnset(request.Hosts)) {
		query["Hosts"] = request.Hosts
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeType)) {
		query["ScopeType"] = request.ScopeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPolicyAssetScope"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetPolicyAssetScopeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetPolicyAssetScopeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Specifies the assets to which a control policy applies.
//
// @param request - SetPolicyAssetScopeRequest
//
// @return SetPolicyAssetScopeResponse
func (client *Client) SetPolicyAssetScope(request *SetPolicyAssetScopeRequest) (_result *SetPolicyAssetScopeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPolicyAssetScopeResponse{}
	_body, _err := client.SetPolicyAssetScopeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Specifies the commands that can or cannot be run by the users or on the assets associated with the policy and the commands that must be reviewed.
//
// @param tmpReq - SetPolicyCommandConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPolicyCommandConfigResponse
func (client *Client) SetPolicyCommandConfigWithOptions(tmpReq *SetPolicyCommandConfigRequest, runtime *util.RuntimeOptions) (_result *SetPolicyCommandConfigResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetPolicyCommandConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CommandConfig)) {
		request.CommandConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CommandConfig, tea.String("CommandConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandConfigShrink)) {
		query["CommandConfig"] = request.CommandConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPolicyCommandConfig"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetPolicyCommandConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetPolicyCommandConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Specifies the commands that can or cannot be run by the users or on the assets associated with the policy and the commands that must be reviewed.
//
// @param request - SetPolicyCommandConfigRequest
//
// @return SetPolicyCommandConfigResponse
func (client *Client) SetPolicyCommandConfig(request *SetPolicyCommandConfigRequest) (_result *SetPolicyCommandConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPolicyCommandConfigResponse{}
	_body, _err := client.SetPolicyCommandConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures access control settings in a control policy.
//
// @param tmpReq - SetPolicyIPAclConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPolicyIPAclConfigResponse
func (client *Client) SetPolicyIPAclConfigWithOptions(tmpReq *SetPolicyIPAclConfigRequest, runtime *util.RuntimeOptions) (_result *SetPolicyIPAclConfigResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetPolicyIPAclConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.IPAclConfig)) {
		request.IPAclConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.IPAclConfig, tea.String("IPAclConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IPAclConfigShrink)) {
		query["IPAclConfig"] = request.IPAclConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPolicyIPAclConfig"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetPolicyIPAclConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetPolicyIPAclConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures access control settings in a control policy.
//
// @param request - SetPolicyIPAclConfigRequest
//
// @return SetPolicyIPAclConfigResponse
func (client *Client) SetPolicyIPAclConfig(request *SetPolicyIPAclConfigRequest) (_result *SetPolicyIPAclConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPolicyIPAclConfigResponse{}
	_body, _err := client.SetPolicyIPAclConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modify the protocol control settings in a control policy.
//
// @param tmpReq - SetPolicyProtocolConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPolicyProtocolConfigResponse
func (client *Client) SetPolicyProtocolConfigWithOptions(tmpReq *SetPolicyProtocolConfigRequest, runtime *util.RuntimeOptions) (_result *SetPolicyProtocolConfigResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetPolicyProtocolConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ProtocolConfig)) {
		request.ProtocolConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ProtocolConfig, tea.String("ProtocolConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolConfigShrink)) {
		query["ProtocolConfig"] = request.ProtocolConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPolicyProtocolConfig"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetPolicyProtocolConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetPolicyProtocolConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modify the protocol control settings in a control policy.
//
// @param request - SetPolicyProtocolConfigRequest
//
// @return SetPolicyProtocolConfigResponse
func (client *Client) SetPolicyProtocolConfig(request *SetPolicyProtocolConfigRequest) (_result *SetPolicyProtocolConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPolicyProtocolConfigResponse{}
	_body, _err := client.SetPolicyProtocolConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Specifies the users to whom a control policy applies.
//
// @param request - SetPolicyUserScopeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetPolicyUserScopeResponse
func (client *Client) SetPolicyUserScopeWithOptions(request *SetPolicyUserScopeRequest, runtime *util.RuntimeOptions) (_result *SetPolicyUserScopeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeType)) {
		query["ScopeType"] = request.ScopeType
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupIds)) {
		query["UserGroupIds"] = request.UserGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["UserIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetPolicyUserScope"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetPolicyUserScopeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetPolicyUserScopeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Specifies the users to whom a control policy applies.
//
// @param request - SetPolicyUserScopeRequest
//
// @return SetPolicyUserScopeResponse
func (client *Client) SetPolicyUserScope(request *SetPolicyUserScopeRequest) (_result *SetPolicyUserScopeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetPolicyUserScopeResponse{}
	_body, _err := client.SetPolicyUserScopeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables the specified bastion host.
//
// @param request - StartInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartInstanceResponse
func (client *Client) StartInstanceWithOptions(request *StartInstanceRequest, runtime *util.RuntimeOptions) (_result *StartInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientSecurityGroupIds)) {
		query["ClientSecurityGroupIds"] = request.ClientSecurityGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.EnablePortalPrivateAccess)) {
		query["EnablePortalPrivateAccess"] = request.EnablePortalPrivateAccess
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupIds)) {
		query["SecurityGroupIds"] = request.SecurityGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.SlaveVswitchId)) {
		query["SlaveVswitchId"] = request.SlaveVswitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VswitchId)) {
		query["VswitchId"] = request.VswitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartInstance"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StartInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StartInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables the specified bastion host.
//
// @param request - StartInstanceRequest
//
// @return StartInstanceResponse
func (client *Client) StartInstance(request *StartInstanceRequest) (_result *StartInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstanceResponse{}
	_body, _err := client.StartInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates and adds tags to specified bastion hosts.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &TagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &TagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates and adds tags to specified bastion hosts.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unlocks one or more users of a bastion host.
//
// Description:
//
// After you call the [LockUsers](https://help.aliyun.com/document_detail/204591.html) operation to lock one or more users of a bastion host, you can call this operation to unlock the users. After the users are unlocked, the users can perform O\\&M operations by using the bastion host.
//
// # Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UnlockUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnlockUsersResponse
func (client *Client) UnlockUsersWithOptions(request *UnlockUsersRequest, runtime *util.RuntimeOptions) (_result *UnlockUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["UserIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnlockUsers"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnlockUsersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnlockUsersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unlocks one or more users of a bastion host.
//
// Description:
//
// After you call the [LockUsers](https://help.aliyun.com/document_detail/204591.html) operation to lock one or more users of a bastion host, you can call this operation to unlock the users. After the users are unlocked, the users can perform O\\&M operations by using the bastion host.
//
// # Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UnlockUsersRequest
//
// @return UnlockUsersResponse
func (client *Client) UnlockUsers(request *UnlockUsersRequest) (_result *UnlockUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnlockUsersResponse{}
	_body, _err := client.UnlockUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes tags from the specified bastion host and deletes the tags at a time.
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UntagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UntagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes tags from the specified bastion host and deletes the tags at a time.
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 验证实例AD服务配置
//
// @param request - VerifyInstanceADAuthServerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyInstanceADAuthServerResponse
func (client *Client) VerifyInstanceADAuthServerWithOptions(request *VerifyInstanceADAuthServerRequest, runtime *util.RuntimeOptions) (_result *VerifyInstanceADAuthServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		query["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.BaseDN)) {
		query["BaseDN"] = request.BaseDN
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsSSL)) {
		query["IsSSL"] = request.IsSSL
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Server)) {
		query["Server"] = request.Server
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyServer)) {
		query["StandbyServer"] = request.StandbyServer
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyInstanceADAuthServer"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &VerifyInstanceADAuthServerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &VerifyInstanceADAuthServerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 验证实例AD服务配置
//
// @param request - VerifyInstanceADAuthServerRequest
//
// @return VerifyInstanceADAuthServerResponse
func (client *Client) VerifyInstanceADAuthServer(request *VerifyInstanceADAuthServerRequest) (_result *VerifyInstanceADAuthServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyInstanceADAuthServerResponse{}
	_body, _err := client.VerifyInstanceADAuthServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 验证实例LDAP服务配置
//
// @param request - VerifyInstanceLDAPAuthServerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyInstanceLDAPAuthServerResponse
func (client *Client) VerifyInstanceLDAPAuthServerWithOptions(request *VerifyInstanceLDAPAuthServerRequest, runtime *util.RuntimeOptions) (_result *VerifyInstanceLDAPAuthServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		query["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.BaseDN)) {
		query["BaseDN"] = request.BaseDN
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsSSL)) {
		query["IsSSL"] = request.IsSSL
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Server)) {
		query["Server"] = request.Server
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyServer)) {
		query["StandbyServer"] = request.StandbyServer
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyInstanceLDAPAuthServer"),
		Version:     tea.String("2019-12-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &VerifyInstanceLDAPAuthServerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &VerifyInstanceLDAPAuthServerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 验证实例LDAP服务配置
//
// @param request - VerifyInstanceLDAPAuthServerRequest
//
// @return VerifyInstanceLDAPAuthServerResponse
func (client *Client) VerifyInstanceLDAPAuthServer(request *VerifyInstanceLDAPAuthServerRequest) (_result *VerifyInstanceLDAPAuthServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyInstanceLDAPAuthServerResponse{}
	_body, _err := client.VerifyInstanceLDAPAuthServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
